
Consumer.elf:     file format elf32-littlenios2
Consumer.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000c71c memsz 0x0000c71c flags r-x
    LOAD off    0x0000e3b4 vaddr 0x000603b4 paddr 0x0004c73c align 2**12
         filesz 0x00001a5c memsz 0x00001d5c flags rw-
    LOAD off    0x00010000 vaddr 0x00060000 paddr 0x00060000 align 2**12
         filesz 0x000003b4 memsz 0x000003b4 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c588  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b4  00060000  00060000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  000603b4  0004c73c  0000e3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00061e10  0004e198  0000fe10  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c98  00000000  00000000  000103d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013f1  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002321c  00000000  00000000  00012461  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007985  00000000  00000000  0003567d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013565  00000000  00000000  0003d002  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018a4  00000000  00000000  00050568  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002154  00000000  00000000  00051e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000be16  00000000  00000000  00053f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005fd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0005fd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063728  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0006372b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006372f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063730  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00063731  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00063735  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00063739  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006373d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00063748  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00063753  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006375e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000047  00000000  00000000  00063761  2**0
                  CONTENTS, READONLY
 29 .jdi          00008508  00000000  00000000  000637a8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00056891  00000000  00000000  0006bcb0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
00060000 l    d  .rodata	00000000 .rodata
000603b4 l    d  .rwdata	00000000 .rwdata
00061e10 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 FIFO_1.c
00000000 l    df *ABS*	00000000 consumer.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040730 l     F .text	00000058 __sprint_r
000600e2 l     O .rodata	00000010 blanks.3452
000600d2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042794 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00044190 l     F .text	00000058 std
0004429c l     F .text	00000008 __fp_lock
000442a4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000603b4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00061ddc l     O .rwdata	00000004 charset
00060118 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00060260 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00048430 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004955c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00049dd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00049e30 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00049f30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004a050 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004a130 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004a28c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004a4b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00061e00 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004a754 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00060d70 l     O .rwdata	00001060 jtag_uart_0
0004a844 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004aa84 l     F .text	00000228 altera_avalon_jtag_uart_irq
0004acac l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004b328 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004b64c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004ba70 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0004bbac l     F .text	000000dc alt_file_locked
0004be10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004c524 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004c6d8 l     F .text	00000040 alt_sim_halt
00045f4c g     F .text	00000094 _mprec_log10
00046038 g     F .text	00000088 __any_on
00047744 g     F .text	00000070 _isatty_r
00060238 g     O .rodata	00000028 __mprec_tinytens
0004a2ec g     F .text	0000006c alt_main
00040608 g     F .text	000000a0 _puts_r
00061e10 g     O .bss	00000004 writep
00061e80 g     O .bss	00000100 alt_irq
000477b4 g     F .text	00000078 _lseek_r
0004c73c g       *ABS*	00000000 __flash_rwdata_start
00048f50 g     F .text	00000088 __eqdf2
00040454 g     F .text	00000040 FIFO_1_INIT
00062110 g       *ABS*	00000000 __alt_heap_start
00040590 g     F .text	00000044 printf
00047210 g     F .text	00000068 __sseek
000441f8 g     F .text	000000a4 __sinit
00044ed0 g     F .text	00000084 _setlocale_r
000442f8 g     F .text	00000068 __sfmoreglue
0004a378 g     F .text	00000020 __malloc_unlock
000459c8 g     F .text	000000e0 memmove
000442e8 g     F .text	00000010 _cleanup
000460c0 g     F .text	000000bc _Balloc
00049060 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000476d0 g     F .text	00000074 _fstat_r
00061e3c g     O .bss	00000004 errno
00061e44 g     O .bss	00000004 alt_argv
00069dd0 g       *ABS*	00000000 _gp
00060bf0 g     O .rwdata	00000180 alt_fd_list
0004c034 g     F .text	00000094 alt_find_dev
00045928 g     F .text	000000a0 memcpy
000442dc g     F .text	0000000c _cleanup_r
000491f8 g     F .text	000000f8 __floatsidf
0004bb34 g     F .text	00000078 alt_io_redirect
00049170 g     F .text	00000088 __ltdf2
00040000 g       *ABS*	00000000 __alt_mem_onchip_instrucrion_memory0
0004c73c g       *ABS*	00000000 __DTOR_END__
000406a8 g     F .text	00000014 puts
00045e9c g     F .text	000000b0 __ratio
0004aec4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000405d4 g     F .text	00000034 _printf_r
00049698 g     F .text	00000008 __udivsi3
00049f90 g     F .text	000000c0 isatty
00060148 g     O .rodata	000000c8 __mprec_tens
00044eac g     F .text	00000008 __locale_charset
0004c2a0 g     F .text	00000090 alt_icache_flush
00061e30 g     O .bss	00000004 __malloc_top_pad
00061dd8 g     O .rwdata	00000004 __mb_cur_max
00044eb4 g     F .text	0000000c _localeconv_r
000467b8 g     F .text	0000003c __i2b
00044890 g     F .text	0000049c __sfvwrite_r
00047198 g     F .text	00000070 _sbrk_r
000404ac g     F .text	000000a0 consumer
00061e14 g     O .bss	00000004 fullp
0004782c g     F .text	00000078 _read_r
000607b4 g     O .rwdata	0000000c __lc_ctype
00061df8 g     O .rwdata	00000004 alt_max_fd
00049ad4 g     F .text	00000138 __unpack_d
000475ac g     F .text	00000110 _fclose_r
0004415c g     F .text	00000034 fflush
00061e34 g     O .bss	00000004 __malloc_max_sbrked_mem
000488c0 g     F .text	00000074 __adddf3
00045d7c g     F .text	00000120 __b2d
00047e80 g     F .text	000005b0 __umoddi3
0004a19c g     F .text	000000f0 lseek
00061dd4 g     O .rwdata	00000004 _global_impure_ptr
00046b34 g     F .text	000005f4 _realloc_r
00062110 g       *ABS*	00000000 __bss_end
0004b978 g     F .text	000000f8 alt_iic_isr_register
0004bf08 g     F .text	0000010c alt_tick
000478a4 g     F .text	000005dc __udivdi3
00060210 g     O .rodata	00000028 __mprec_bigtens
00046a14 g     F .text	00000120 __s2b
000493c8 g     F .text	00000194 __floatunsidf
00045c9c g     F .text	00000060 __mcmp
000442c4 g     F .text	00000018 __fp_lock_all
0004b930 g     F .text	00000048 alt_ic_irq_enabled
0004be70 g     F .text	00000098 alt_alarm_stop
00061e4c g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
00060bc8 g     O .rwdata	00000028 alt_dev_null
0004b57c g     F .text	0000001c alt_dcache_flush_all
00045b68 g     F .text	00000070 __hi0bits
000492f0 g     F .text	000000d8 __fixdfsi
00061e10 g       *ABS*	00000000 __ram_rwdata_end
00061df0 g     O .rwdata	00000008 alt_dev_list
0004a634 g     F .text	00000120 write
000603b4 g       *ABS*	00000000 __ram_rodata_end
00049e5c g     F .text	000000d4 fstat
000468f4 g     F .text	00000120 __pow5mult
00061e24 g     O .bss	00000004 __nlocale_changed
000496a0 g     F .text	00000008 __umodsi3
00062110 g       *ABS*	00000000 end
0004a9c4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004c738 g       *ABS*	00000000 __CTOR_LIST__
00068000 g       *ABS*	00000000 __alt_stack_pointer
0004b398 g     F .text	00000090 alt_avalon_timer_sc_init
00049740 g     F .text	00000080 __clzsi2
0004b0e8 g     F .text	00000240 altera_avalon_jtag_uart_write
000441e8 g     F .text	00000004 __sfp_lock_acquire
00045844 g     F .text	000000e4 memchr
00040788 g     F .text	00001eac ___vfprintf_internal_r
0004457c g     F .text	00000314 _free_r
0004c528 g     F .text	000001b0 __call_exitprocs
00061e28 g     O .bss	00000004 __mlocale_changed
00061de4 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000003c _start
00061e50 g     O .bss	00000004 _alt_tick_rate
00046484 g     F .text	0000014c __lshift
00061e54 g     O .bss	00000004 _alt_nticks
0004a398 g     F .text	00000120 read
0004a7e8 g     F .text	0000005c alt_sys_init
0004c3f0 g     F .text	00000134 __register_exitproc
000465d0 g     F .text	000001e8 __multiply
0004ad5c g     F .text	00000074 altera_avalon_jtag_uart_close
000603b4 g       *ABS*	00000000 __ram_rwdata_start
00060000 g       *ABS*	00000000 __ram_rodata_start
00061e58 g     O .bss	00000028 __malloc_current_mallinfo
0004617c g     F .text	0000017c __d2b
0004a87c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004c1e8 g     F .text	000000b8 alt_get_fd
00049c0c g     F .text	000000c8 __fpcmp_parts_d
0004753c g     F .text	00000070 _close_r
0004c37c g     F .text	00000074 memcmp
0004a92c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00062110 g       *ABS*	00000000 __alt_stack_base
0004a974 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00042658 g     F .text	0000013c __swsetup_r
00048cf8 g     F .text	00000258 __divdf3
00044360 g     F .text	000000f0 __sfp
00045fe0 g     F .text	00000058 __copybits
000607c0 g     O .rwdata	00000408 __malloc_av_
000441f4 g     F .text	00000004 __sinit_lock_release
00048934 g     F .text	000003c4 __muldf3
000472f4 g     F .text	00000060 __sread
0004c0c8 g     F .text	00000120 alt_find_file
0004b598 g     F .text	000000b4 alt_dev_llist_insert
0004a358 g     F .text	00000020 __malloc_lock
0004a578 g     F .text	000000bc sbrk
00043f60 g     F .text	000001fc _fflush_r
00047488 g     F .text	000000b4 _calloc_r
00061e10 g       *ABS*	00000000 __bss_start
00045aa8 g     F .text	00000098 memset
00040494 g     F .text	00000018 main
00061e48 g     O .bss	00000004 alt_envp
00061e38 g     O .bss	00000004 __malloc_max_total_mem
0004a8d4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00047208 g     F .text	00000008 __sclose
00068000 g       *ABS*	00000000 __alt_heap_limit
000476bc g     F .text	00000014 fclose
00061f80 g     O .bss	00000190 _atexit0
000429ac g     F .text	000015b4 _dtoa_r
00060000 g       *ABS*	00000000 __alt_mem_onchip_data_memory
00045104 g     F .text	00000740 _malloc_r
00061dfc g     O .rwdata	00000004 alt_errno
00044df4 g     F .text	000000b8 _fwalk
000401f0 g     F .text	00000134 WRITE_FIFO_1
000495d8 g     F .text	00000060 __divsi3
0006026c g     O .rodata	00000014 __thenan_df
00044450 g     F .text	0000012c _malloc_trim_r
0004c73c g       *ABS*	00000000 __CTOR_END__
00047354 g     F .text	000000bc strcmp
00060000 g       *ABS*	00000000 __flash_rodata_start
0004c73c g       *ABS*	00000000 __DTOR_LIST__
0004054c g     F .text	00000044 delay
00048fd8 g     F .text	00000088 __nedf2
0004a7b4 g     F .text	00000034 alt_irq_init
0004a518 g     F .text	00000060 alt_release_fd
00060280 g     O .rodata	00000100 __clz_tab
00061e2c g     O .bss	00000004 _PathLocale
0004c330 g     F .text	00000014 atexit
00047410 g     F .text	00000078 _write_r
00044f54 g     F .text	0000001c setlocale
00061dd0 g     O .rwdata	00000004 _impure_ptr
00061e40 g     O .bss	00000004 alt_argc
0004b710 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00045cfc g     F .text	00000080 __ulp
00047128 g     F .text	00000040 __isinfd
000442ac g     F .text	00000018 __fp_unlock_all
00061de8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044ec0 g     F .text	00000010 localeconv
0004b7a4 g     F .text	00000050 alt_ic_isr_register
00061e10 g       *ABS*	00000000 _edata
00062110 g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
0004add0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004b890 g     F .text	000000a0 alt_ic_irq_disable
00047278 g     F .text	0000007c __swrite
00061de0 g     O .rwdata	00000004 __malloc_trim_threshold
0004c014 g     F .text	00000020 altera_nios2_qsys_irq_init
0004c344 g     F .text	00000038 exit
00044d2c g     F .text	000000c8 _fwalk_reent
000462f8 g     F .text	0000018c __mdiff
00061e18 g     O .bss	00000004 readpp
00049638 g     F .text	00000060 __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000441ec g     F .text	00000004 __sfp_lock_release
0004c718 g     F .text	00000020 _exit
00047168 g     F .text	00000030 __isnand
0004b428 g     F .text	00000154 alt_alarm_start
000496a8 g     F .text	00000098 __muldi3
00044f70 g     F .text	00000194 __smakebuf_r
000406bc g     F .text	00000074 strlen
0004bc88 g     F .text	00000188 open
000490e8 g     F .text	00000088 __gedf2
00040324 g     F .text	00000130 READ_FIFO_1
0004b774 g     F .text	00000030 alt_icache_flush_all
00061e04 g     O .rwdata	00000004 alt_priority_mask
00061e1c g     O .bss	00000004 emptyp
0004b7f4 g     F .text	0000009c alt_ic_irq_enable
00042634 g     F .text	00000024 __vfprintf_internal
00048840 g     F .text	00000080 __subdf3
00045bd8 g     F .text	000000c4 __lo0bits
00061e08 g     O .rwdata	00000008 alt_alarm_list
0004b6ac g     F .text	00000064 _do_ctors
00061e20 g     O .bss	00000004 countp
00049cd4 g     F .text	000000fc close
0004a0b0 g     F .text	00000080 alt_load
000497c0 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000441f0 g     F .text	00000004 __sinit_lock_acquire
000467f4 g     F .text	00000100 __multadd
00045b40 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406d14 	ori	at,at,436
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_instrucrion_memory0-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c001b4 	movhi	r3,6
   40134:	18c7a004 	addi	r3,r3,7808
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c001b4 	movhi	r3,6
   4014c:	18c7a004 	addi	r3,r3,7808
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b4:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401b8:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401bc:	068001b4 	movhi	gp,6
    ori gp, gp, %lo(_gp)
   401c0:	d6a77414 	ori	gp,gp,40400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c4:	008001b4 	movhi	r2,6
    ori r2, r2, %lo(__bss_start)
   401c8:	10878414 	ori	r2,r2,7696

    movhi r3, %hi(__bss_end)
   401cc:	00c001b4 	movhi	r3,6
    ori r3, r3, %lo(__bss_end)
   401d0:	18c84414 	ori	r3,r3,8464

    beq r2, r3, 1f
   401d4:	10c00326 	beq	r2,r3,401e4 <_start+0x30>

0:
    stw zero, (r2)
   401d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e0:	10fffd36 	bltu	r2,r3,401d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e4:	004a0b00 	call	4a0b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401e8:	004a2ec0 	call	4a2ec <alt_main>

000401ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401ec:	003fff06 	br	401ec <alt_after_alt_main>

000401f0 <WRITE_FIFO_1>:

#include "FIFO_1.h"


void WRITE_FIFO_1(int *buffer)
{
   401f0:	defffd04 	addi	sp,sp,-12
   401f4:	df000215 	stw	fp,8(sp)
   401f8:	df000204 	addi	fp,sp,8
   401fc:	e13fff15 	stw	r4,-4(fp)
	// Update "count" in shared mem

	// Update the "full?" and "empty?" flags accordingly
	// Set the full flag if FIFO is now full
	// Reset the empty flag if FIFO now has 1 enrty
	while (IORD_32DIRECT(MEM_BASE,fullp)==1);
   40200:	d0a01117 	ldw	r2,-32700(gp)
   40204:	1007883a 	mov	r3,r2
   40208:	008001f4 	movhi	r2,7
   4020c:	1885883a 	add	r2,r3,r2
   40210:	10800037 	ldwio	r2,0(r2)
   40214:	10800060 	cmpeqi	r2,r2,1
   40218:	103ff91e 	bne	r2,zero,40200 <WRITE_FIFO_1+0x10>
	IOWR_32DIRECT(MEM_BASE,writep,*buffer);
   4021c:	d0a01017 	ldw	r2,-32704(gp)
   40220:	1007883a 	mov	r3,r2
   40224:	008001f4 	movhi	r2,7
   40228:	1889883a 	add	r4,r3,r2
   4022c:	e0bfff17 	ldw	r2,-4(fp)
   40230:	10c00017 	ldw	r3,0(r2)
   40234:	2005883a 	mov	r2,r4
   40238:	10c00035 	stwio	r3,0(r2)
	int count = IORD_32DIRECT(MEM_BASE,countp);
   4023c:	d0a01417 	ldw	r2,-32688(gp)
   40240:	1007883a 	mov	r3,r2
   40244:	008001f4 	movhi	r2,7
   40248:	1885883a 	add	r2,r3,r2
   4024c:	10800037 	ldwio	r2,0(r2)
   40250:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(MEM_BASE,countp,count+1);
   40254:	d0a01417 	ldw	r2,-32688(gp)
   40258:	1007883a 	mov	r3,r2
   4025c:	008001f4 	movhi	r2,7
   40260:	1889883a 	add	r4,r3,r2
   40264:	e0bffe17 	ldw	r2,-8(fp)
   40268:	10c00044 	addi	r3,r2,1
   4026c:	2005883a 	mov	r2,r4
   40270:	10c00035 	stwio	r3,0(r2)

	if(IORD_32DIRECT(MEM_BASE,countp) == CAPACITY){
   40274:	d0a01417 	ldw	r2,-32688(gp)
   40278:	1007883a 	mov	r3,r2
   4027c:	008001f4 	movhi	r2,7
   40280:	1885883a 	add	r2,r3,r2
   40284:	10800037 	ldwio	r2,0(r2)
   40288:	10800298 	cmpnei	r2,r2,10
   4028c:	1000081e 	bne	r2,zero,402b0 <WRITE_FIFO_1+0xc0>
		IOWR_32DIRECT(MEM_BASE,fullp,1);
   40290:	d0a01117 	ldw	r2,-32700(gp)
   40294:	1007883a 	mov	r3,r2
   40298:	008001f4 	movhi	r2,7
   4029c:	1885883a 	add	r2,r3,r2
   402a0:	1007883a 	mov	r3,r2
   402a4:	00800044 	movi	r2,1
   402a8:	18800035 	stwio	r2,0(r3)
   402ac:	00000506 	br	402c4 <WRITE_FIFO_1+0xd4>
	}else{
		IOWR_32DIRECT(MEM_BASE,fullp,0);
   402b0:	d0a01117 	ldw	r2,-32700(gp)
   402b4:	1007883a 	mov	r3,r2
   402b8:	008001f4 	movhi	r2,7
   402bc:	1885883a 	add	r2,r3,r2
   402c0:	10000035 	stwio	zero,0(r2)
	}

	if(IORD_32DIRECT(MEM_BASE,countp) > 0){
   402c4:	d0a01417 	ldw	r2,-32688(gp)
   402c8:	1007883a 	mov	r3,r2
   402cc:	008001f4 	movhi	r2,7
   402d0:	1885883a 	add	r2,r3,r2
   402d4:	10800037 	ldwio	r2,0(r2)
   402d8:	10800050 	cmplti	r2,r2,1
   402dc:	1000051e 	bne	r2,zero,402f4 <WRITE_FIFO_1+0x104>
		IOWR_32DIRECT(MEM_BASE,emptyp,0);
   402e0:	d0a01317 	ldw	r2,-32692(gp)
   402e4:	1007883a 	mov	r3,r2
   402e8:	008001f4 	movhi	r2,7
   402ec:	1885883a 	add	r2,r3,r2
   402f0:	10000035 	stwio	zero,0(r2)
	}
	
	writep = writep + UNIT_SIZE;
   402f4:	d0a01017 	ldw	r2,-32704(gp)
   402f8:	10800104 	addi	r2,r2,4
   402fc:	d0a01015 	stw	r2,-32704(gp)
	if (writep == (CAPACITY*UNIT_SIZE)+STARTP)
   40300:	d0a01017 	ldw	r2,-32704(gp)
   40304:	10800d18 	cmpnei	r2,r2,52
   40308:	1000021e 	bne	r2,zero,40314 <WRITE_FIFO_1+0x124>
	{
		writep = STARTP;
   4030c:	00800304 	movi	r2,12
   40310:	d0a01015 	stw	r2,-32704(gp)
	}

	
	
}
   40314:	e037883a 	mov	sp,fp
   40318:	df000017 	ldw	fp,0(sp)
   4031c:	dec00104 	addi	sp,sp,4
   40320:	f800283a 	ret

00040324 <READ_FIFO_1>:


void READ_FIFO_1(int *buffer)
{
   40324:	defffd04 	addi	sp,sp,-12
   40328:	df000215 	stw	fp,8(sp)
   4032c:	df000204 	addi	fp,sp,8
   40330:	e13fff15 	stw	r4,-4(fp)
	// Update "count" in shared mem

	// Update the "full?" and "empty?" flags accordingly
	// Set the empty flag if FIFO is now empty
	// Reset the full flag if FIFO now has 1 enrty less than capacity
	while (IORD_32DIRECT(MEM_BASE,emptyp) == 1);
   40334:	d0a01317 	ldw	r2,-32692(gp)
   40338:	1007883a 	mov	r3,r2
   4033c:	008001f4 	movhi	r2,7
   40340:	1885883a 	add	r2,r3,r2
   40344:	10800037 	ldwio	r2,0(r2)
   40348:	10800060 	cmpeqi	r2,r2,1
   4034c:	103ff91e 	bne	r2,zero,40334 <READ_FIFO_1+0x10>
	*buffer = IORD_32DIRECT(MEM_BASE,readpp);
   40350:	d0a01217 	ldw	r2,-32696(gp)
   40354:	1007883a 	mov	r3,r2
   40358:	008001f4 	movhi	r2,7
   4035c:	1885883a 	add	r2,r3,r2
   40360:	10c00037 	ldwio	r3,0(r2)
   40364:	e0bfff17 	ldw	r2,-4(fp)
   40368:	10c00015 	stw	r3,0(r2)
	
	
	int count = IORD_32DIRECT(MEM_BASE,countp);
   4036c:	d0a01417 	ldw	r2,-32688(gp)
   40370:	1007883a 	mov	r3,r2
   40374:	008001f4 	movhi	r2,7
   40378:	1885883a 	add	r2,r3,r2
   4037c:	10800037 	ldwio	r2,0(r2)
   40380:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(MEM_BASE,countp,count - 1);
   40384:	d0a01417 	ldw	r2,-32688(gp)
   40388:	1007883a 	mov	r3,r2
   4038c:	008001f4 	movhi	r2,7
   40390:	1889883a 	add	r4,r3,r2
   40394:	e0bffe17 	ldw	r2,-8(fp)
   40398:	10ffffc4 	addi	r3,r2,-1
   4039c:	2005883a 	mov	r2,r4
   403a0:	10c00035 	stwio	r3,0(r2)

	if(IORD_32DIRECT(MEM_BASE,countp) == 0){
   403a4:	d0a01417 	ldw	r2,-32688(gp)
   403a8:	1007883a 	mov	r3,r2
   403ac:	008001f4 	movhi	r2,7
   403b0:	1885883a 	add	r2,r3,r2
   403b4:	10800037 	ldwio	r2,0(r2)
   403b8:	1004c03a 	cmpne	r2,r2,zero
   403bc:	1000081e 	bne	r2,zero,403e0 <READ_FIFO_1+0xbc>
		IOWR_32DIRECT(MEM_BASE,emptyp,1);
   403c0:	d0a01317 	ldw	r2,-32692(gp)
   403c4:	1007883a 	mov	r3,r2
   403c8:	008001f4 	movhi	r2,7
   403cc:	1885883a 	add	r2,r3,r2
   403d0:	1007883a 	mov	r3,r2
   403d4:	00800044 	movi	r2,1
   403d8:	18800035 	stwio	r2,0(r3)
   403dc:	00000506 	br	403f4 <READ_FIFO_1+0xd0>
	}else{
		IOWR_32DIRECT(MEM_BASE,emptyp,0);
   403e0:	d0a01317 	ldw	r2,-32692(gp)
   403e4:	1007883a 	mov	r3,r2
   403e8:	008001f4 	movhi	r2,7
   403ec:	1885883a 	add	r2,r3,r2
   403f0:	10000035 	stwio	zero,0(r2)
	}

	if(IORD_32DIRECT(MEM_BASE,countp) < CAPACITY){
   403f4:	d0a01417 	ldw	r2,-32688(gp)
   403f8:	1007883a 	mov	r3,r2
   403fc:	008001f4 	movhi	r2,7
   40400:	1885883a 	add	r2,r3,r2
   40404:	10800037 	ldwio	r2,0(r2)
   40408:	10800288 	cmpgei	r2,r2,10
   4040c:	1000051e 	bne	r2,zero,40424 <READ_FIFO_1+0x100>
		IOWR_32DIRECT(MEM_BASE,fullp,0);
   40410:	d0a01117 	ldw	r2,-32700(gp)
   40414:	1007883a 	mov	r3,r2
   40418:	008001f4 	movhi	r2,7
   4041c:	1885883a 	add	r2,r3,r2
   40420:	10000035 	stwio	zero,0(r2)
	}
	readpp = readpp + UNIT_SIZE;
   40424:	d0a01217 	ldw	r2,-32696(gp)
   40428:	10800104 	addi	r2,r2,4
   4042c:	d0a01215 	stw	r2,-32696(gp)
	if (readpp == (CAPACITY*UNIT_SIZE)+STARTP)
   40430:	d0a01217 	ldw	r2,-32696(gp)
   40434:	10800d18 	cmpnei	r2,r2,52
   40438:	1000021e 	bne	r2,zero,40444 <READ_FIFO_1+0x120>
	{
		readpp = STARTP;
   4043c:	00800304 	movi	r2,12
   40440:	d0a01215 	stw	r2,-32696(gp)
	}
	
	
}
   40444:	e037883a 	mov	sp,fp
   40448:	df000017 	ldw	fp,0(sp)
   4044c:	dec00104 	addi	sp,sp,4
   40450:	f800283a 	ret

00040454 <FIFO_1_INIT>:



//Initialization
void FIFO_1_INIT()
{
   40454:	deffff04 	addi	sp,sp,-4
   40458:	df000015 	stw	fp,0(sp)
   4045c:	d839883a 	mov	fp,sp
	writep = STARTP; // Initially the FIFO is empty, so start writing at the first slot
   40460:	00800304 	movi	r2,12
   40464:	d0a01015 	stw	r2,-32704(gp)
	readpp  = STARTP;
   40468:	00800304 	movi	r2,12
   4046c:	d0a01215 	stw	r2,-32696(gp)
	fullp   = 0; // SET THIS OFFSET (If there are previous FIFOs in shared memory, use Prev Fifo's STARTP + Prev Fifo's size)
   40470:	d0201115 	stw	zero,-32700(gp)
	emptyp   = UNIT_SIZE;
   40474:	00800104 	movi	r2,4
   40478:	d0a01315 	stw	r2,-32692(gp)
	countp  =  2*UNIT_SIZE;
   4047c:	00800204 	movi	r2,8
   40480:	d0a01415 	stw	r2,-32688(gp)
	// Assigning values for the flags.
	IOWR_32DIRECT(MEM_BASE, fullp, 0);
	IOWR_32DIRECT(MEM_BASE, emptyp, 1); // The fifo is empty at the start
	IOWR_32DIRECT(MEM_BASE, countp, 0); // The fifo is empty at the start
	*/
}
   40484:	e037883a 	mov	sp,fp
   40488:	df000017 	ldw	fp,0(sp)
   4048c:	dec00104 	addi	sp,sp,4
   40490:	f800283a 	ret

00040494 <main>:
void delay(int n);
int consumer();


int main()
{
   40494:	defffe04 	addi	sp,sp,-8
   40498:	dfc00115 	stw	ra,4(sp)
   4049c:	df000015 	stw	fp,0(sp)
   404a0:	d839883a 	mov	fp,sp
	consumer();
   404a4:	00404ac0 	call	404ac <consumer>
	
	while(1) { }
   404a8:	003fff06 	br	404a8 <main+0x14>

000404ac <consumer>:
	return 0;
}


int consumer()
{
   404ac:	defffc04 	addi	sp,sp,-16
   404b0:	dfc00315 	stw	ra,12(sp)
   404b4:	df000215 	stw	fp,8(sp)
   404b8:	df000204 	addi	fp,sp,8
	printf("Consumer starting..\n");
   404bc:	010001b4 	movhi	r4,6
   404c0:	21000004 	addi	r4,r4,0
   404c4:	00406a80 	call	406a8 <puts>

	FIFO_1_INIT(); // Initialize the producer-consumer fifo
   404c8:	00404540 	call	40454 <FIFO_1_INIT>

	int j = 0;
   404cc:	e03fff15 	stw	zero,-4(fp)
	int k = 5;
   404d0:	00800144 	movi	r2,5
   404d4:	e0bffe15 	stw	r2,-8(fp)
	while(k<500)
   404d8:	00001006 	br	4051c <consumer+0x70>
	{

		READ_FIFO_1(&j);  // Read from the producer-consumer fifo
   404dc:	e13fff04 	addi	r4,fp,-4
   404e0:	00403240 	call	40324 <READ_FIFO_1>
		printf("Consumer received j value= [%i]\n",j);
   404e4:	e17fff17 	ldw	r5,-4(fp)
   404e8:	010001b4 	movhi	r4,6
   404ec:	21000504 	addi	r4,r4,20
   404f0:	00405900 	call	40590 <printf>
		if(j==k)
   404f4:	e0ffff17 	ldw	r3,-4(fp)
   404f8:	e0bffe17 	ldw	r2,-8(fp)
   404fc:	1880041e 	bne	r3,r2,40510 <consumer+0x64>
			printf("Consumer succefully received [%i]\n",j);
   40500:	e17fff17 	ldw	r5,-4(fp)
   40504:	010001b4 	movhi	r4,6
   40508:	21000e04 	addi	r4,r4,56
   4050c:	00405900 	call	40590 <printf>

		k+=10;
   40510:	e0bffe17 	ldw	r2,-8(fp)
   40514:	10800284 	addi	r2,r2,10
   40518:	e0bffe15 	stw	r2,-8(fp)

	FIFO_1_INIT(); // Initialize the producer-consumer fifo

	int j = 0;
	int k = 5;
	while(k<500)
   4051c:	e0bffe17 	ldw	r2,-8(fp)
   40520:	10807d10 	cmplti	r2,r2,500
   40524:	103fed1e 	bne	r2,zero,404dc <consumer+0x30>
			printf("Consumer succefully received [%i]\n",j);

		k+=10;
	}

	printf("Consumer finished..\n");
   40528:	010001b4 	movhi	r4,6
   4052c:	21001704 	addi	r4,r4,92
   40530:	00406a80 	call	406a8 <puts>
	return 0;
   40534:	0005883a 	mov	r2,zero
}
   40538:	e037883a 	mov	sp,fp
   4053c:	dfc00117 	ldw	ra,4(sp)
   40540:	df000017 	ldw	fp,0(sp)
   40544:	dec00204 	addi	sp,sp,8
   40548:	f800283a 	ret

0004054c <delay>:


void delay(int n)
{
   4054c:	defffd04 	addi	sp,sp,-12
   40550:	df000215 	stw	fp,8(sp)
   40554:	df000204 	addi	fp,sp,8
   40558:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=n; i>0; i--)
   4055c:	e0bfff17 	ldw	r2,-4(fp)
   40560:	e0bffe15 	stw	r2,-8(fp)
   40564:	00000306 	br	40574 <delay+0x28>
   40568:	e0bffe17 	ldw	r2,-8(fp)
   4056c:	10bfffc4 	addi	r2,r2,-1
   40570:	e0bffe15 	stw	r2,-8(fp)
   40574:	e0bffe17 	ldw	r2,-8(fp)
   40578:	10800048 	cmpgei	r2,r2,1
   4057c:	103ffa1e 	bne	r2,zero,40568 <delay+0x1c>
	{
		continue;
	}
}
   40580:	e037883a 	mov	sp,fp
   40584:	df000017 	ldw	fp,0(sp)
   40588:	dec00104 	addi	sp,sp,4
   4058c:	f800283a 	ret

00040590 <printf>:
   40590:	defffb04 	addi	sp,sp,-20
   40594:	dfc00115 	stw	ra,4(sp)
   40598:	d9400215 	stw	r5,8(sp)
   4059c:	d9800315 	stw	r6,12(sp)
   405a0:	d9c00415 	stw	r7,16(sp)
   405a4:	008001b4 	movhi	r2,6
   405a8:	10877404 	addi	r2,r2,7632
   405ac:	10c00017 	ldw	r3,0(r2)
   405b0:	200b883a 	mov	r5,r4
   405b4:	d8800204 	addi	r2,sp,8
   405b8:	19000217 	ldw	r4,8(r3)
   405bc:	100d883a 	mov	r6,r2
   405c0:	d8800015 	stw	r2,0(sp)
   405c4:	00426340 	call	42634 <__vfprintf_internal>
   405c8:	dfc00117 	ldw	ra,4(sp)
   405cc:	dec00504 	addi	sp,sp,20
   405d0:	f800283a 	ret

000405d4 <_printf_r>:
   405d4:	defffc04 	addi	sp,sp,-16
   405d8:	dfc00115 	stw	ra,4(sp)
   405dc:	d9800215 	stw	r6,8(sp)
   405e0:	d9c00315 	stw	r7,12(sp)
   405e4:	280d883a 	mov	r6,r5
   405e8:	21400217 	ldw	r5,8(r4)
   405ec:	d8c00204 	addi	r3,sp,8
   405f0:	180f883a 	mov	r7,r3
   405f4:	d8c00015 	stw	r3,0(sp)
   405f8:	00407880 	call	40788 <___vfprintf_internal_r>
   405fc:	dfc00117 	ldw	ra,4(sp)
   40600:	dec00404 	addi	sp,sp,16
   40604:	f800283a 	ret

00040608 <_puts_r>:
   40608:	defff604 	addi	sp,sp,-40
   4060c:	dc400715 	stw	r17,28(sp)
   40610:	2023883a 	mov	r17,r4
   40614:	2809883a 	mov	r4,r5
   40618:	dfc00915 	stw	ra,36(sp)
   4061c:	dcc00815 	stw	r19,32(sp)
   40620:	2827883a 	mov	r19,r5
   40624:	00406bc0 	call	406bc <strlen>
   40628:	89400217 	ldw	r5,8(r17)
   4062c:	00c001b4 	movhi	r3,6
   40630:	18c01c04 	addi	r3,r3,112
   40634:	01c00044 	movi	r7,1
   40638:	12000044 	addi	r8,r2,1
   4063c:	d8c00515 	stw	r3,20(sp)
   40640:	d9c00615 	stw	r7,24(sp)
   40644:	d8c00304 	addi	r3,sp,12
   40648:	01c00084 	movi	r7,2
   4064c:	8809883a 	mov	r4,r17
   40650:	d80d883a 	mov	r6,sp
   40654:	d8c00015 	stw	r3,0(sp)
   40658:	dcc00315 	stw	r19,12(sp)
   4065c:	da000215 	stw	r8,8(sp)
   40660:	d9c00115 	stw	r7,4(sp)
   40664:	d8800415 	stw	r2,16(sp)
   40668:	00448900 	call	44890 <__sfvwrite_r>
   4066c:	00ffffc4 	movi	r3,-1
   40670:	10000626 	beq	r2,zero,4068c <_puts_r+0x84>
   40674:	1805883a 	mov	r2,r3
   40678:	dfc00917 	ldw	ra,36(sp)
   4067c:	dcc00817 	ldw	r19,32(sp)
   40680:	dc400717 	ldw	r17,28(sp)
   40684:	dec00a04 	addi	sp,sp,40
   40688:	f800283a 	ret
   4068c:	00c00284 	movi	r3,10
   40690:	1805883a 	mov	r2,r3
   40694:	dfc00917 	ldw	ra,36(sp)
   40698:	dcc00817 	ldw	r19,32(sp)
   4069c:	dc400717 	ldw	r17,28(sp)
   406a0:	dec00a04 	addi	sp,sp,40
   406a4:	f800283a 	ret

000406a8 <puts>:
   406a8:	008001b4 	movhi	r2,6
   406ac:	10877404 	addi	r2,r2,7632
   406b0:	200b883a 	mov	r5,r4
   406b4:	11000017 	ldw	r4,0(r2)
   406b8:	00406081 	jmpi	40608 <_puts_r>

000406bc <strlen>:
   406bc:	208000cc 	andi	r2,r4,3
   406c0:	2011883a 	mov	r8,r4
   406c4:	1000161e 	bne	r2,zero,40720 <strlen+0x64>
   406c8:	20c00017 	ldw	r3,0(r4)
   406cc:	017fbff4 	movhi	r5,65279
   406d0:	297fbfc4 	addi	r5,r5,-257
   406d4:	01e02074 	movhi	r7,32897
   406d8:	39e02004 	addi	r7,r7,-32640
   406dc:	1945883a 	add	r2,r3,r5
   406e0:	11c4703a 	and	r2,r2,r7
   406e4:	00c6303a 	nor	r3,zero,r3
   406e8:	1886703a 	and	r3,r3,r2
   406ec:	18000c1e 	bne	r3,zero,40720 <strlen+0x64>
   406f0:	280d883a 	mov	r6,r5
   406f4:	380b883a 	mov	r5,r7
   406f8:	21000104 	addi	r4,r4,4
   406fc:	20800017 	ldw	r2,0(r4)
   40700:	1187883a 	add	r3,r2,r6
   40704:	1946703a 	and	r3,r3,r5
   40708:	0084303a 	nor	r2,zero,r2
   4070c:	10c4703a 	and	r2,r2,r3
   40710:	103ff926 	beq	r2,zero,406f8 <strlen+0x3c>
   40714:	20800007 	ldb	r2,0(r4)
   40718:	10000326 	beq	r2,zero,40728 <strlen+0x6c>
   4071c:	21000044 	addi	r4,r4,1
   40720:	20800007 	ldb	r2,0(r4)
   40724:	103ffd1e 	bne	r2,zero,4071c <strlen+0x60>
   40728:	2205c83a 	sub	r2,r4,r8
   4072c:	f800283a 	ret

00040730 <__sprint_r>:
   40730:	30800217 	ldw	r2,8(r6)
   40734:	defffe04 	addi	sp,sp,-8
   40738:	dc000015 	stw	r16,0(sp)
   4073c:	dfc00115 	stw	ra,4(sp)
   40740:	3021883a 	mov	r16,r6
   40744:	0007883a 	mov	r3,zero
   40748:	1000061e 	bne	r2,zero,40764 <__sprint_r+0x34>
   4074c:	1805883a 	mov	r2,r3
   40750:	30000115 	stw	zero,4(r6)
   40754:	dfc00117 	ldw	ra,4(sp)
   40758:	dc000017 	ldw	r16,0(sp)
   4075c:	dec00204 	addi	sp,sp,8
   40760:	f800283a 	ret
   40764:	00448900 	call	44890 <__sfvwrite_r>
   40768:	1007883a 	mov	r3,r2
   4076c:	1805883a 	mov	r2,r3
   40770:	80000115 	stw	zero,4(r16)
   40774:	80000215 	stw	zero,8(r16)
   40778:	dfc00117 	ldw	ra,4(sp)
   4077c:	dc000017 	ldw	r16,0(sp)
   40780:	dec00204 	addi	sp,sp,8
   40784:	f800283a 	ret

00040788 <___vfprintf_internal_r>:
   40788:	defea404 	addi	sp,sp,-1392
   4078c:	dd815815 	stw	r22,1376(sp)
   40790:	dc015215 	stw	r16,1352(sp)
   40794:	d9c15115 	stw	r7,1348(sp)
   40798:	dfc15b15 	stw	ra,1388(sp)
   4079c:	df015a15 	stw	fp,1384(sp)
   407a0:	ddc15915 	stw	r23,1380(sp)
   407a4:	dd415715 	stw	r21,1372(sp)
   407a8:	dd015615 	stw	r20,1368(sp)
   407ac:	dcc15515 	stw	r19,1364(sp)
   407b0:	dc815415 	stw	r18,1360(sp)
   407b4:	dc415315 	stw	r17,1356(sp)
   407b8:	282d883a 	mov	r22,r5
   407bc:	3021883a 	mov	r16,r6
   407c0:	d9014f15 	stw	r4,1340(sp)
   407c4:	0044eb40 	call	44eb4 <_localeconv_r>
   407c8:	10800017 	ldw	r2,0(r2)
   407cc:	d9c15117 	ldw	r7,1348(sp)
   407d0:	d8814915 	stw	r2,1316(sp)
   407d4:	d8814f17 	ldw	r2,1340(sp)
   407d8:	10000226 	beq	r2,zero,407e4 <___vfprintf_internal_r+0x5c>
   407dc:	10800e17 	ldw	r2,56(r2)
   407e0:	10020d26 	beq	r2,zero,41018 <___vfprintf_internal_r+0x890>
   407e4:	b080030b 	ldhu	r2,12(r22)
   407e8:	1080020c 	andi	r2,r2,8
   407ec:	10020e26 	beq	r2,zero,41028 <___vfprintf_internal_r+0x8a0>
   407f0:	b0800417 	ldw	r2,16(r22)
   407f4:	10020c26 	beq	r2,zero,41028 <___vfprintf_internal_r+0x8a0>
   407f8:	b200030b 	ldhu	r8,12(r22)
   407fc:	00800284 	movi	r2,10
   40800:	40c0068c 	andi	r3,r8,26
   40804:	18802f1e 	bne	r3,r2,408c4 <___vfprintf_internal_r+0x13c>
   40808:	b080038f 	ldh	r2,14(r22)
   4080c:	10002d16 	blt	r2,zero,408c4 <___vfprintf_internal_r+0x13c>
   40810:	b240038b 	ldhu	r9,14(r22)
   40814:	b2800717 	ldw	r10,28(r22)
   40818:	b2c00917 	ldw	r11,36(r22)
   4081c:	d9014f17 	ldw	r4,1340(sp)
   40820:	dc402904 	addi	r17,sp,164
   40824:	d8804004 	addi	r2,sp,256
   40828:	00c10004 	movi	r3,1024
   4082c:	423fff4c 	andi	r8,r8,65533
   40830:	800d883a 	mov	r6,r16
   40834:	880b883a 	mov	r5,r17
   40838:	da002c0d 	sth	r8,176(sp)
   4083c:	da402c8d 	sth	r9,178(sp)
   40840:	da803015 	stw	r10,192(sp)
   40844:	dac03215 	stw	r11,200(sp)
   40848:	d8802d15 	stw	r2,180(sp)
   4084c:	d8c02e15 	stw	r3,184(sp)
   40850:	d8802915 	stw	r2,164(sp)
   40854:	d8c02b15 	stw	r3,172(sp)
   40858:	d8002f15 	stw	zero,188(sp)
   4085c:	00407880 	call	40788 <___vfprintf_internal_r>
   40860:	d8814b15 	stw	r2,1324(sp)
   40864:	10000416 	blt	r2,zero,40878 <___vfprintf_internal_r+0xf0>
   40868:	d9014f17 	ldw	r4,1340(sp)
   4086c:	880b883a 	mov	r5,r17
   40870:	0043f600 	call	43f60 <_fflush_r>
   40874:	1002321e 	bne	r2,zero,41140 <___vfprintf_internal_r+0x9b8>
   40878:	d8802c0b 	ldhu	r2,176(sp)
   4087c:	1080100c 	andi	r2,r2,64
   40880:	10000326 	beq	r2,zero,40890 <___vfprintf_internal_r+0x108>
   40884:	b080030b 	ldhu	r2,12(r22)
   40888:	10801014 	ori	r2,r2,64
   4088c:	b080030d 	sth	r2,12(r22)
   40890:	d8814b17 	ldw	r2,1324(sp)
   40894:	dfc15b17 	ldw	ra,1388(sp)
   40898:	df015a17 	ldw	fp,1384(sp)
   4089c:	ddc15917 	ldw	r23,1380(sp)
   408a0:	dd815817 	ldw	r22,1376(sp)
   408a4:	dd415717 	ldw	r21,1372(sp)
   408a8:	dd015617 	ldw	r20,1368(sp)
   408ac:	dcc15517 	ldw	r19,1364(sp)
   408b0:	dc815417 	ldw	r18,1360(sp)
   408b4:	dc415317 	ldw	r17,1356(sp)
   408b8:	dc015217 	ldw	r16,1352(sp)
   408bc:	dec15c04 	addi	sp,sp,1392
   408c0:	f800283a 	ret
   408c4:	0005883a 	mov	r2,zero
   408c8:	0007883a 	mov	r3,zero
   408cc:	dd401904 	addi	r21,sp,100
   408d0:	d8814215 	stw	r2,1288(sp)
   408d4:	802f883a 	mov	r23,r16
   408d8:	d8c14315 	stw	r3,1292(sp)
   408dc:	d8014b15 	stw	zero,1324(sp)
   408e0:	d8014815 	stw	zero,1312(sp)
   408e4:	d8014415 	stw	zero,1296(sp)
   408e8:	d8014715 	stw	zero,1308(sp)
   408ec:	dd400c15 	stw	r21,48(sp)
   408f0:	d8000e15 	stw	zero,56(sp)
   408f4:	d8000d15 	stw	zero,52(sp)
   408f8:	b8800007 	ldb	r2,0(r23)
   408fc:	10001926 	beq	r2,zero,40964 <___vfprintf_internal_r+0x1dc>
   40900:	00c00944 	movi	r3,37
   40904:	10c01726 	beq	r2,r3,40964 <___vfprintf_internal_r+0x1dc>
   40908:	b821883a 	mov	r16,r23
   4090c:	00000106 	br	40914 <___vfprintf_internal_r+0x18c>
   40910:	10c00326 	beq	r2,r3,40920 <___vfprintf_internal_r+0x198>
   40914:	84000044 	addi	r16,r16,1
   40918:	80800007 	ldb	r2,0(r16)
   4091c:	103ffc1e 	bne	r2,zero,40910 <___vfprintf_internal_r+0x188>
   40920:	85e7c83a 	sub	r19,r16,r23
   40924:	98000e26 	beq	r19,zero,40960 <___vfprintf_internal_r+0x1d8>
   40928:	dc800e17 	ldw	r18,56(sp)
   4092c:	dc400d17 	ldw	r17,52(sp)
   40930:	008001c4 	movi	r2,7
   40934:	94e5883a 	add	r18,r18,r19
   40938:	8c400044 	addi	r17,r17,1
   4093c:	adc00015 	stw	r23,0(r21)
   40940:	dc800e15 	stw	r18,56(sp)
   40944:	acc00115 	stw	r19,4(r21)
   40948:	dc400d15 	stw	r17,52(sp)
   4094c:	14428b16 	blt	r2,r17,4137c <___vfprintf_internal_r+0xbf4>
   40950:	ad400204 	addi	r21,r21,8
   40954:	d9014b17 	ldw	r4,1324(sp)
   40958:	24c9883a 	add	r4,r4,r19
   4095c:	d9014b15 	stw	r4,1324(sp)
   40960:	802f883a 	mov	r23,r16
   40964:	b8800007 	ldb	r2,0(r23)
   40968:	10013c26 	beq	r2,zero,40e5c <___vfprintf_internal_r+0x6d4>
   4096c:	bdc00044 	addi	r23,r23,1
   40970:	d8000405 	stb	zero,16(sp)
   40974:	b8c00007 	ldb	r3,0(r23)
   40978:	04ffffc4 	movi	r19,-1
   4097c:	d8014c15 	stw	zero,1328(sp)
   40980:	d8014a15 	stw	zero,1320(sp)
   40984:	d8c14d15 	stw	r3,1332(sp)
   40988:	bdc00044 	addi	r23,r23,1
   4098c:	d9414d17 	ldw	r5,1332(sp)
   40990:	00801604 	movi	r2,88
   40994:	28fff804 	addi	r3,r5,-32
   40998:	10c06036 	bltu	r2,r3,40b1c <___vfprintf_internal_r+0x394>
   4099c:	18c5883a 	add	r2,r3,r3
   409a0:	1085883a 	add	r2,r2,r2
   409a4:	00c00134 	movhi	r3,4
   409a8:	18c26e04 	addi	r3,r3,2488
   409ac:	10c5883a 	add	r2,r2,r3
   409b0:	11000017 	ldw	r4,0(r2)
   409b4:	2000683a 	jmp	r4
   409b8:	0004192c 	andhi	zero,zero,4196
   409bc:	00040b1c 	xori	zero,zero,4140
   409c0:	00040b1c 	xori	zero,zero,4140
   409c4:	00041918 	cmpnei	zero,zero,4196
   409c8:	00040b1c 	xori	zero,zero,4140
   409cc:	00040b1c 	xori	zero,zero,4140
   409d0:	00040b1c 	xori	zero,zero,4140
   409d4:	00040b1c 	xori	zero,zero,4140
   409d8:	00040b1c 	xori	zero,zero,4140
   409dc:	00040b1c 	xori	zero,zero,4140
   409e0:	000416f8 	rdprs	zero,zero,4187
   409e4:	00041908 	cmpgei	zero,zero,4196
   409e8:	00040b1c 	xori	zero,zero,4140
   409ec:	00041710 	cmplti	zero,zero,4188
   409f0:	000419a4 	muli	zero,zero,4198
   409f4:	00040b1c 	xori	zero,zero,4140
   409f8:	00041990 	cmplti	zero,zero,4198
   409fc:	00041958 	cmpnei	zero,zero,4197
   40a00:	00041958 	cmpnei	zero,zero,4197
   40a04:	00041958 	cmpnei	zero,zero,4197
   40a08:	00041958 	cmpnei	zero,zero,4197
   40a0c:	00041958 	cmpnei	zero,zero,4197
   40a10:	00041958 	cmpnei	zero,zero,4197
   40a14:	00041958 	cmpnei	zero,zero,4197
   40a18:	00041958 	cmpnei	zero,zero,4197
   40a1c:	00041958 	cmpnei	zero,zero,4197
   40a20:	00040b1c 	xori	zero,zero,4140
   40a24:	00040b1c 	xori	zero,zero,4140
   40a28:	00040b1c 	xori	zero,zero,4140
   40a2c:	00040b1c 	xori	zero,zero,4140
   40a30:	00040b1c 	xori	zero,zero,4140
   40a34:	00040b1c 	xori	zero,zero,4140
   40a38:	00040b1c 	xori	zero,zero,4140
   40a3c:	00040b1c 	xori	zero,zero,4140
   40a40:	00040b1c 	xori	zero,zero,4140
   40a44:	00040b1c 	xori	zero,zero,4140
   40a48:	00041174 	movhi	zero,4165
   40a4c:	000417e0 	cmpeqi	zero,zero,4191
   40a50:	00040b1c 	xori	zero,zero,4140
   40a54:	000417e0 	cmpeqi	zero,zero,4191
   40a58:	00040b1c 	xori	zero,zero,4140
   40a5c:	00040b1c 	xori	zero,zero,4140
   40a60:	00040b1c 	xori	zero,zero,4140
   40a64:	00040b1c 	xori	zero,zero,4140
   40a68:	00041944 	movi	zero,4197
   40a6c:	00040b1c 	xori	zero,zero,4140
   40a70:	00040b1c 	xori	zero,zero,4140
   40a74:	00041228 	cmpgeui	zero,zero,4168
   40a78:	00040b1c 	xori	zero,zero,4140
   40a7c:	00040b1c 	xori	zero,zero,4140
   40a80:	00040b1c 	xori	zero,zero,4140
   40a84:	00040b1c 	xori	zero,zero,4140
   40a88:	00040b1c 	xori	zero,zero,4140
   40a8c:	00041274 	movhi	zero,4169
   40a90:	00040b1c 	xori	zero,zero,4140
   40a94:	00040b1c 	xori	zero,zero,4140
   40a98:	00041894 	movui	zero,4194
   40a9c:	00040b1c 	xori	zero,zero,4140
   40aa0:	00040b1c 	xori	zero,zero,4140
   40aa4:	00040b1c 	xori	zero,zero,4140
   40aa8:	00040b1c 	xori	zero,zero,4140
   40aac:	00040b1c 	xori	zero,zero,4140
   40ab0:	00040b1c 	xori	zero,zero,4140
   40ab4:	00040b1c 	xori	zero,zero,4140
   40ab8:	00040b1c 	xori	zero,zero,4140
   40abc:	00040b1c 	xori	zero,zero,4140
   40ac0:	00040b1c 	xori	zero,zero,4140
   40ac4:	00041868 	cmpgeui	zero,zero,4193
   40ac8:	00041180 	call	4118 <__alt_mem_onchip_instrucrion_memory0-0x3bee8>
   40acc:	000417e0 	cmpeqi	zero,zero,4191
   40ad0:	000417e0 	cmpeqi	zero,zero,4191
   40ad4:	000417e0 	cmpeqi	zero,zero,4191
   40ad8:	000417cc 	andi	zero,zero,4191
   40adc:	00041180 	call	4118 <__alt_mem_onchip_instrucrion_memory0-0x3bee8>
   40ae0:	00040b1c 	xori	zero,zero,4140
   40ae4:	00040b1c 	xori	zero,zero,4140
   40ae8:	00041754 	movui	zero,4189
   40aec:	00040b1c 	xori	zero,zero,4140
   40af0:	00041724 	muli	zero,zero,4188
   40af4:	00041234 	movhi	zero,4168
   40af8:	00041784 	movi	zero,4190
   40afc:	00041770 	cmpltui	zero,zero,4189
   40b00:	00040b1c 	xori	zero,zero,4140
   40b04:	00041a00 	call	41a0 <__alt_mem_onchip_instrucrion_memory0-0x3be60>
   40b08:	00040b1c 	xori	zero,zero,4140
   40b0c:	00041280 	call	4128 <__alt_mem_onchip_instrucrion_memory0-0x3bed8>
   40b10:	00040b1c 	xori	zero,zero,4140
   40b14:	00040b1c 	xori	zero,zero,4140
   40b18:	000418f8 	rdprs	zero,zero,4195
   40b1c:	d9014d17 	ldw	r4,1332(sp)
   40b20:	2000ce26 	beq	r4,zero,40e5c <___vfprintf_internal_r+0x6d4>
   40b24:	01400044 	movi	r5,1
   40b28:	d9800f04 	addi	r6,sp,60
   40b2c:	d9c14015 	stw	r7,1280(sp)
   40b30:	d9414515 	stw	r5,1300(sp)
   40b34:	d9814115 	stw	r6,1284(sp)
   40b38:	280f883a 	mov	r7,r5
   40b3c:	d9000f05 	stb	r4,60(sp)
   40b40:	d8000405 	stb	zero,16(sp)
   40b44:	d8014615 	stw	zero,1304(sp)
   40b48:	d8c14c17 	ldw	r3,1328(sp)
   40b4c:	1880008c 	andi	r2,r3,2
   40b50:	1005003a 	cmpeq	r2,r2,zero
   40b54:	d8815015 	stw	r2,1344(sp)
   40b58:	1000031e 	bne	r2,zero,40b68 <___vfprintf_internal_r+0x3e0>
   40b5c:	d9014517 	ldw	r4,1300(sp)
   40b60:	21000084 	addi	r4,r4,2
   40b64:	d9014515 	stw	r4,1300(sp)
   40b68:	d9414c17 	ldw	r5,1328(sp)
   40b6c:	2940210c 	andi	r5,r5,132
   40b70:	d9414e15 	stw	r5,1336(sp)
   40b74:	28002d1e 	bne	r5,zero,40c2c <___vfprintf_internal_r+0x4a4>
   40b78:	d9814a17 	ldw	r6,1320(sp)
   40b7c:	d8814517 	ldw	r2,1300(sp)
   40b80:	30a1c83a 	sub	r16,r6,r2
   40b84:	0400290e 	bge	zero,r16,40c2c <___vfprintf_internal_r+0x4a4>
   40b88:	00800404 	movi	r2,16
   40b8c:	1404580e 	bge	r2,r16,41cf0 <___vfprintf_internal_r+0x1568>
   40b90:	dc800e17 	ldw	r18,56(sp)
   40b94:	dc400d17 	ldw	r17,52(sp)
   40b98:	1027883a 	mov	r19,r2
   40b9c:	070001b4 	movhi	fp,6
   40ba0:	e7003884 	addi	fp,fp,226
   40ba4:	050001c4 	movi	r20,7
   40ba8:	00000306 	br	40bb8 <___vfprintf_internal_r+0x430>
   40bac:	843ffc04 	addi	r16,r16,-16
   40bb0:	ad400204 	addi	r21,r21,8
   40bb4:	9c00130e 	bge	r19,r16,40c04 <___vfprintf_internal_r+0x47c>
   40bb8:	94800404 	addi	r18,r18,16
   40bbc:	8c400044 	addi	r17,r17,1
   40bc0:	af000015 	stw	fp,0(r21)
   40bc4:	acc00115 	stw	r19,4(r21)
   40bc8:	dc800e15 	stw	r18,56(sp)
   40bcc:	dc400d15 	stw	r17,52(sp)
   40bd0:	a47ff60e 	bge	r20,r17,40bac <___vfprintf_internal_r+0x424>
   40bd4:	d9014f17 	ldw	r4,1340(sp)
   40bd8:	b00b883a 	mov	r5,r22
   40bdc:	d9800c04 	addi	r6,sp,48
   40be0:	d9c15115 	stw	r7,1348(sp)
   40be4:	00407300 	call	40730 <__sprint_r>
   40be8:	d9c15117 	ldw	r7,1348(sp)
   40bec:	10009e1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   40bf0:	843ffc04 	addi	r16,r16,-16
   40bf4:	dc800e17 	ldw	r18,56(sp)
   40bf8:	dc400d17 	ldw	r17,52(sp)
   40bfc:	dd401904 	addi	r21,sp,100
   40c00:	9c3fed16 	blt	r19,r16,40bb8 <___vfprintf_internal_r+0x430>
   40c04:	9425883a 	add	r18,r18,r16
   40c08:	8c400044 	addi	r17,r17,1
   40c0c:	008001c4 	movi	r2,7
   40c10:	af000015 	stw	fp,0(r21)
   40c14:	ac000115 	stw	r16,4(r21)
   40c18:	dc800e15 	stw	r18,56(sp)
   40c1c:	dc400d15 	stw	r17,52(sp)
   40c20:	1441f516 	blt	r2,r17,413f8 <___vfprintf_internal_r+0xc70>
   40c24:	ad400204 	addi	r21,r21,8
   40c28:	00000206 	br	40c34 <___vfprintf_internal_r+0x4ac>
   40c2c:	dc800e17 	ldw	r18,56(sp)
   40c30:	dc400d17 	ldw	r17,52(sp)
   40c34:	d8800407 	ldb	r2,16(sp)
   40c38:	10000b26 	beq	r2,zero,40c68 <___vfprintf_internal_r+0x4e0>
   40c3c:	00800044 	movi	r2,1
   40c40:	94800044 	addi	r18,r18,1
   40c44:	8c400044 	addi	r17,r17,1
   40c48:	a8800115 	stw	r2,4(r21)
   40c4c:	d8c00404 	addi	r3,sp,16
   40c50:	008001c4 	movi	r2,7
   40c54:	a8c00015 	stw	r3,0(r21)
   40c58:	dc800e15 	stw	r18,56(sp)
   40c5c:	dc400d15 	stw	r17,52(sp)
   40c60:	1441da16 	blt	r2,r17,413cc <___vfprintf_internal_r+0xc44>
   40c64:	ad400204 	addi	r21,r21,8
   40c68:	d9015017 	ldw	r4,1344(sp)
   40c6c:	20000b1e 	bne	r4,zero,40c9c <___vfprintf_internal_r+0x514>
   40c70:	d8800444 	addi	r2,sp,17
   40c74:	94800084 	addi	r18,r18,2
   40c78:	8c400044 	addi	r17,r17,1
   40c7c:	a8800015 	stw	r2,0(r21)
   40c80:	00c00084 	movi	r3,2
   40c84:	008001c4 	movi	r2,7
   40c88:	a8c00115 	stw	r3,4(r21)
   40c8c:	dc800e15 	stw	r18,56(sp)
   40c90:	dc400d15 	stw	r17,52(sp)
   40c94:	1441c216 	blt	r2,r17,413a0 <___vfprintf_internal_r+0xc18>
   40c98:	ad400204 	addi	r21,r21,8
   40c9c:	d9414e17 	ldw	r5,1336(sp)
   40ca0:	00802004 	movi	r2,128
   40ca4:	2880b126 	beq	r5,r2,40f6c <___vfprintf_internal_r+0x7e4>
   40ca8:	d8c14617 	ldw	r3,1304(sp)
   40cac:	19e1c83a 	sub	r16,r3,r7
   40cb0:	0400260e 	bge	zero,r16,40d4c <___vfprintf_internal_r+0x5c4>
   40cb4:	00800404 	movi	r2,16
   40cb8:	1403c90e 	bge	r2,r16,41be0 <___vfprintf_internal_r+0x1458>
   40cbc:	1027883a 	mov	r19,r2
   40cc0:	070001b4 	movhi	fp,6
   40cc4:	e7003484 	addi	fp,fp,210
   40cc8:	050001c4 	movi	r20,7
   40ccc:	00000306 	br	40cdc <___vfprintf_internal_r+0x554>
   40cd0:	843ffc04 	addi	r16,r16,-16
   40cd4:	ad400204 	addi	r21,r21,8
   40cd8:	9c00130e 	bge	r19,r16,40d28 <___vfprintf_internal_r+0x5a0>
   40cdc:	94800404 	addi	r18,r18,16
   40ce0:	8c400044 	addi	r17,r17,1
   40ce4:	af000015 	stw	fp,0(r21)
   40ce8:	acc00115 	stw	r19,4(r21)
   40cec:	dc800e15 	stw	r18,56(sp)
   40cf0:	dc400d15 	stw	r17,52(sp)
   40cf4:	a47ff60e 	bge	r20,r17,40cd0 <___vfprintf_internal_r+0x548>
   40cf8:	d9014f17 	ldw	r4,1340(sp)
   40cfc:	b00b883a 	mov	r5,r22
   40d00:	d9800c04 	addi	r6,sp,48
   40d04:	d9c15115 	stw	r7,1348(sp)
   40d08:	00407300 	call	40730 <__sprint_r>
   40d0c:	d9c15117 	ldw	r7,1348(sp)
   40d10:	1000551e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   40d14:	843ffc04 	addi	r16,r16,-16
   40d18:	dc800e17 	ldw	r18,56(sp)
   40d1c:	dc400d17 	ldw	r17,52(sp)
   40d20:	dd401904 	addi	r21,sp,100
   40d24:	9c3fed16 	blt	r19,r16,40cdc <___vfprintf_internal_r+0x554>
   40d28:	9425883a 	add	r18,r18,r16
   40d2c:	8c400044 	addi	r17,r17,1
   40d30:	008001c4 	movi	r2,7
   40d34:	af000015 	stw	fp,0(r21)
   40d38:	ac000115 	stw	r16,4(r21)
   40d3c:	dc800e15 	stw	r18,56(sp)
   40d40:	dc400d15 	stw	r17,52(sp)
   40d44:	14418216 	blt	r2,r17,41350 <___vfprintf_internal_r+0xbc8>
   40d48:	ad400204 	addi	r21,r21,8
   40d4c:	d9014c17 	ldw	r4,1328(sp)
   40d50:	2080400c 	andi	r2,r4,256
   40d54:	10004a1e 	bne	r2,zero,40e80 <___vfprintf_internal_r+0x6f8>
   40d58:	d9414117 	ldw	r5,1284(sp)
   40d5c:	91e5883a 	add	r18,r18,r7
   40d60:	8c400044 	addi	r17,r17,1
   40d64:	008001c4 	movi	r2,7
   40d68:	a9400015 	stw	r5,0(r21)
   40d6c:	a9c00115 	stw	r7,4(r21)
   40d70:	dc800e15 	stw	r18,56(sp)
   40d74:	dc400d15 	stw	r17,52(sp)
   40d78:	14416716 	blt	r2,r17,41318 <___vfprintf_internal_r+0xb90>
   40d7c:	a8c00204 	addi	r3,r21,8
   40d80:	d9814c17 	ldw	r6,1328(sp)
   40d84:	3080010c 	andi	r2,r6,4
   40d88:	10002826 	beq	r2,zero,40e2c <___vfprintf_internal_r+0x6a4>
   40d8c:	d8814a17 	ldw	r2,1320(sp)
   40d90:	d9014517 	ldw	r4,1300(sp)
   40d94:	1121c83a 	sub	r16,r2,r4
   40d98:	0400240e 	bge	zero,r16,40e2c <___vfprintf_internal_r+0x6a4>
   40d9c:	00800404 	movi	r2,16
   40da0:	14044f0e 	bge	r2,r16,41ee0 <___vfprintf_internal_r+0x1758>
   40da4:	dc400d17 	ldw	r17,52(sp)
   40da8:	1027883a 	mov	r19,r2
   40dac:	070001b4 	movhi	fp,6
   40db0:	e7003884 	addi	fp,fp,226
   40db4:	050001c4 	movi	r20,7
   40db8:	00000306 	br	40dc8 <___vfprintf_internal_r+0x640>
   40dbc:	843ffc04 	addi	r16,r16,-16
   40dc0:	18c00204 	addi	r3,r3,8
   40dc4:	9c00110e 	bge	r19,r16,40e0c <___vfprintf_internal_r+0x684>
   40dc8:	94800404 	addi	r18,r18,16
   40dcc:	8c400044 	addi	r17,r17,1
   40dd0:	1f000015 	stw	fp,0(r3)
   40dd4:	1cc00115 	stw	r19,4(r3)
   40dd8:	dc800e15 	stw	r18,56(sp)
   40ddc:	dc400d15 	stw	r17,52(sp)
   40de0:	a47ff60e 	bge	r20,r17,40dbc <___vfprintf_internal_r+0x634>
   40de4:	d9014f17 	ldw	r4,1340(sp)
   40de8:	b00b883a 	mov	r5,r22
   40dec:	d9800c04 	addi	r6,sp,48
   40df0:	00407300 	call	40730 <__sprint_r>
   40df4:	10001c1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   40df8:	843ffc04 	addi	r16,r16,-16
   40dfc:	dc800e17 	ldw	r18,56(sp)
   40e00:	dc400d17 	ldw	r17,52(sp)
   40e04:	d8c01904 	addi	r3,sp,100
   40e08:	9c3fef16 	blt	r19,r16,40dc8 <___vfprintf_internal_r+0x640>
   40e0c:	9425883a 	add	r18,r18,r16
   40e10:	8c400044 	addi	r17,r17,1
   40e14:	008001c4 	movi	r2,7
   40e18:	1f000015 	stw	fp,0(r3)
   40e1c:	1c000115 	stw	r16,4(r3)
   40e20:	dc800e15 	stw	r18,56(sp)
   40e24:	dc400d15 	stw	r17,52(sp)
   40e28:	1440cb16 	blt	r2,r17,41158 <___vfprintf_internal_r+0x9d0>
   40e2c:	d8814a17 	ldw	r2,1320(sp)
   40e30:	d9414517 	ldw	r5,1300(sp)
   40e34:	1140010e 	bge	r2,r5,40e3c <___vfprintf_internal_r+0x6b4>
   40e38:	2805883a 	mov	r2,r5
   40e3c:	d9814b17 	ldw	r6,1324(sp)
   40e40:	308d883a 	add	r6,r6,r2
   40e44:	d9814b15 	stw	r6,1324(sp)
   40e48:	90013b1e 	bne	r18,zero,41338 <___vfprintf_internal_r+0xbb0>
   40e4c:	d9c14017 	ldw	r7,1280(sp)
   40e50:	dd401904 	addi	r21,sp,100
   40e54:	d8000d15 	stw	zero,52(sp)
   40e58:	003ea706 	br	408f8 <___vfprintf_internal_r+0x170>
   40e5c:	d8800e17 	ldw	r2,56(sp)
   40e60:	10053f1e 	bne	r2,zero,42360 <___vfprintf_internal_r+0x1bd8>
   40e64:	d8000d15 	stw	zero,52(sp)
   40e68:	b080030b 	ldhu	r2,12(r22)
   40e6c:	1080100c 	andi	r2,r2,64
   40e70:	103e8726 	beq	r2,zero,40890 <___vfprintf_internal_r+0x108>
   40e74:	00bfffc4 	movi	r2,-1
   40e78:	d8814b15 	stw	r2,1324(sp)
   40e7c:	003e8406 	br	40890 <___vfprintf_internal_r+0x108>
   40e80:	d9814d17 	ldw	r6,1332(sp)
   40e84:	00801944 	movi	r2,101
   40e88:	11806e16 	blt	r2,r6,41044 <___vfprintf_internal_r+0x8bc>
   40e8c:	d9414717 	ldw	r5,1308(sp)
   40e90:	00c00044 	movi	r3,1
   40e94:	1943430e 	bge	r3,r5,41ba4 <___vfprintf_internal_r+0x141c>
   40e98:	d8814117 	ldw	r2,1284(sp)
   40e9c:	94800044 	addi	r18,r18,1
   40ea0:	8c400044 	addi	r17,r17,1
   40ea4:	a8800015 	stw	r2,0(r21)
   40ea8:	008001c4 	movi	r2,7
   40eac:	a8c00115 	stw	r3,4(r21)
   40eb0:	dc800e15 	stw	r18,56(sp)
   40eb4:	dc400d15 	stw	r17,52(sp)
   40eb8:	1441ca16 	blt	r2,r17,415e4 <___vfprintf_internal_r+0xe5c>
   40ebc:	a8c00204 	addi	r3,r21,8
   40ec0:	d9014917 	ldw	r4,1316(sp)
   40ec4:	00800044 	movi	r2,1
   40ec8:	94800044 	addi	r18,r18,1
   40ecc:	8c400044 	addi	r17,r17,1
   40ed0:	18800115 	stw	r2,4(r3)
   40ed4:	008001c4 	movi	r2,7
   40ed8:	19000015 	stw	r4,0(r3)
   40edc:	dc800e15 	stw	r18,56(sp)
   40ee0:	dc400d15 	stw	r17,52(sp)
   40ee4:	1441b616 	blt	r2,r17,415c0 <___vfprintf_internal_r+0xe38>
   40ee8:	1cc00204 	addi	r19,r3,8
   40eec:	d9014217 	ldw	r4,1288(sp)
   40ef0:	d9414317 	ldw	r5,1292(sp)
   40ef4:	000d883a 	mov	r6,zero
   40ef8:	000f883a 	mov	r7,zero
   40efc:	0048fd80 	call	48fd8 <__nedf2>
   40f00:	10017426 	beq	r2,zero,414d4 <___vfprintf_internal_r+0xd4c>
   40f04:	d9414717 	ldw	r5,1308(sp)
   40f08:	d9814117 	ldw	r6,1284(sp)
   40f0c:	8c400044 	addi	r17,r17,1
   40f10:	2c85883a 	add	r2,r5,r18
   40f14:	14bfffc4 	addi	r18,r2,-1
   40f18:	28bfffc4 	addi	r2,r5,-1
   40f1c:	30c00044 	addi	r3,r6,1
   40f20:	98800115 	stw	r2,4(r19)
   40f24:	008001c4 	movi	r2,7
   40f28:	98c00015 	stw	r3,0(r19)
   40f2c:	dc800e15 	stw	r18,56(sp)
   40f30:	dc400d15 	stw	r17,52(sp)
   40f34:	14418e16 	blt	r2,r17,41570 <___vfprintf_internal_r+0xde8>
   40f38:	9cc00204 	addi	r19,r19,8
   40f3c:	d9414817 	ldw	r5,1312(sp)
   40f40:	d8800804 	addi	r2,sp,32
   40f44:	8c400044 	addi	r17,r17,1
   40f48:	9165883a 	add	r18,r18,r5
   40f4c:	98800015 	stw	r2,0(r19)
   40f50:	008001c4 	movi	r2,7
   40f54:	99400115 	stw	r5,4(r19)
   40f58:	dc800e15 	stw	r18,56(sp)
   40f5c:	dc400d15 	stw	r17,52(sp)
   40f60:	1440ed16 	blt	r2,r17,41318 <___vfprintf_internal_r+0xb90>
   40f64:	98c00204 	addi	r3,r19,8
   40f68:	003f8506 	br	40d80 <___vfprintf_internal_r+0x5f8>
   40f6c:	d9814a17 	ldw	r6,1320(sp)
   40f70:	d8814517 	ldw	r2,1300(sp)
   40f74:	30a1c83a 	sub	r16,r6,r2
   40f78:	043f4b0e 	bge	zero,r16,40ca8 <___vfprintf_internal_r+0x520>
   40f7c:	00800404 	movi	r2,16
   40f80:	1404340e 	bge	r2,r16,42054 <___vfprintf_internal_r+0x18cc>
   40f84:	1027883a 	mov	r19,r2
   40f88:	070001b4 	movhi	fp,6
   40f8c:	e7003484 	addi	fp,fp,210
   40f90:	050001c4 	movi	r20,7
   40f94:	00000306 	br	40fa4 <___vfprintf_internal_r+0x81c>
   40f98:	843ffc04 	addi	r16,r16,-16
   40f9c:	ad400204 	addi	r21,r21,8
   40fa0:	9c00130e 	bge	r19,r16,40ff0 <___vfprintf_internal_r+0x868>
   40fa4:	94800404 	addi	r18,r18,16
   40fa8:	8c400044 	addi	r17,r17,1
   40fac:	af000015 	stw	fp,0(r21)
   40fb0:	acc00115 	stw	r19,4(r21)
   40fb4:	dc800e15 	stw	r18,56(sp)
   40fb8:	dc400d15 	stw	r17,52(sp)
   40fbc:	a47ff60e 	bge	r20,r17,40f98 <___vfprintf_internal_r+0x810>
   40fc0:	d9014f17 	ldw	r4,1340(sp)
   40fc4:	b00b883a 	mov	r5,r22
   40fc8:	d9800c04 	addi	r6,sp,48
   40fcc:	d9c15115 	stw	r7,1348(sp)
   40fd0:	00407300 	call	40730 <__sprint_r>
   40fd4:	d9c15117 	ldw	r7,1348(sp)
   40fd8:	103fa31e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   40fdc:	843ffc04 	addi	r16,r16,-16
   40fe0:	dc800e17 	ldw	r18,56(sp)
   40fe4:	dc400d17 	ldw	r17,52(sp)
   40fe8:	dd401904 	addi	r21,sp,100
   40fec:	9c3fed16 	blt	r19,r16,40fa4 <___vfprintf_internal_r+0x81c>
   40ff0:	9425883a 	add	r18,r18,r16
   40ff4:	8c400044 	addi	r17,r17,1
   40ff8:	008001c4 	movi	r2,7
   40ffc:	af000015 	stw	fp,0(r21)
   41000:	ac000115 	stw	r16,4(r21)
   41004:	dc800e15 	stw	r18,56(sp)
   41008:	dc400d15 	stw	r17,52(sp)
   4100c:	14416116 	blt	r2,r17,41594 <___vfprintf_internal_r+0xe0c>
   41010:	ad400204 	addi	r21,r21,8
   41014:	003f2406 	br	40ca8 <___vfprintf_internal_r+0x520>
   41018:	d9014f17 	ldw	r4,1340(sp)
   4101c:	00441f80 	call	441f8 <__sinit>
   41020:	d9c15117 	ldw	r7,1348(sp)
   41024:	003def06 	br	407e4 <___vfprintf_internal_r+0x5c>
   41028:	d9014f17 	ldw	r4,1340(sp)
   4102c:	b00b883a 	mov	r5,r22
   41030:	d9c15115 	stw	r7,1348(sp)
   41034:	00426580 	call	42658 <__swsetup_r>
   41038:	d9c15117 	ldw	r7,1348(sp)
   4103c:	103dee26 	beq	r2,zero,407f8 <___vfprintf_internal_r+0x70>
   41040:	003f8c06 	br	40e74 <___vfprintf_internal_r+0x6ec>
   41044:	d9014217 	ldw	r4,1288(sp)
   41048:	d9414317 	ldw	r5,1292(sp)
   4104c:	000d883a 	mov	r6,zero
   41050:	000f883a 	mov	r7,zero
   41054:	0048f500 	call	48f50 <__eqdf2>
   41058:	1000f21e 	bne	r2,zero,41424 <___vfprintf_internal_r+0xc9c>
   4105c:	008001b4 	movhi	r2,6
   41060:	10803404 	addi	r2,r2,208
   41064:	94800044 	addi	r18,r18,1
   41068:	8c400044 	addi	r17,r17,1
   4106c:	a8800015 	stw	r2,0(r21)
   41070:	00c00044 	movi	r3,1
   41074:	008001c4 	movi	r2,7
   41078:	a8c00115 	stw	r3,4(r21)
   4107c:	dc800e15 	stw	r18,56(sp)
   41080:	dc400d15 	stw	r17,52(sp)
   41084:	1442fa16 	blt	r2,r17,41c70 <___vfprintf_internal_r+0x14e8>
   41088:	a8c00204 	addi	r3,r21,8
   4108c:	d8800517 	ldw	r2,20(sp)
   41090:	d9014717 	ldw	r4,1308(sp)
   41094:	11015c0e 	bge	r2,r4,41608 <___vfprintf_internal_r+0xe80>
   41098:	dc400d17 	ldw	r17,52(sp)
   4109c:	d9814917 	ldw	r6,1316(sp)
   410a0:	00800044 	movi	r2,1
   410a4:	94800044 	addi	r18,r18,1
   410a8:	8c400044 	addi	r17,r17,1
   410ac:	18800115 	stw	r2,4(r3)
   410b0:	008001c4 	movi	r2,7
   410b4:	19800015 	stw	r6,0(r3)
   410b8:	dc800e15 	stw	r18,56(sp)
   410bc:	dc400d15 	stw	r17,52(sp)
   410c0:	14431016 	blt	r2,r17,41d04 <___vfprintf_internal_r+0x157c>
   410c4:	18c00204 	addi	r3,r3,8
   410c8:	d8814717 	ldw	r2,1308(sp)
   410cc:	143fffc4 	addi	r16,r2,-1
   410d0:	043f2b0e 	bge	zero,r16,40d80 <___vfprintf_internal_r+0x5f8>
   410d4:	00800404 	movi	r2,16
   410d8:	1402a20e 	bge	r2,r16,41b64 <___vfprintf_internal_r+0x13dc>
   410dc:	dc400d17 	ldw	r17,52(sp)
   410e0:	1027883a 	mov	r19,r2
   410e4:	070001b4 	movhi	fp,6
   410e8:	e7003484 	addi	fp,fp,210
   410ec:	050001c4 	movi	r20,7
   410f0:	00000306 	br	41100 <___vfprintf_internal_r+0x978>
   410f4:	18c00204 	addi	r3,r3,8
   410f8:	843ffc04 	addi	r16,r16,-16
   410fc:	9c029c0e 	bge	r19,r16,41b70 <___vfprintf_internal_r+0x13e8>
   41100:	94800404 	addi	r18,r18,16
   41104:	8c400044 	addi	r17,r17,1
   41108:	1f000015 	stw	fp,0(r3)
   4110c:	1cc00115 	stw	r19,4(r3)
   41110:	dc800e15 	stw	r18,56(sp)
   41114:	dc400d15 	stw	r17,52(sp)
   41118:	a47ff60e 	bge	r20,r17,410f4 <___vfprintf_internal_r+0x96c>
   4111c:	d9014f17 	ldw	r4,1340(sp)
   41120:	b00b883a 	mov	r5,r22
   41124:	d9800c04 	addi	r6,sp,48
   41128:	00407300 	call	40730 <__sprint_r>
   4112c:	103f4e1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41130:	dc800e17 	ldw	r18,56(sp)
   41134:	dc400d17 	ldw	r17,52(sp)
   41138:	d8c01904 	addi	r3,sp,100
   4113c:	003fee06 	br	410f8 <___vfprintf_internal_r+0x970>
   41140:	d8802c0b 	ldhu	r2,176(sp)
   41144:	00ffffc4 	movi	r3,-1
   41148:	d8c14b15 	stw	r3,1324(sp)
   4114c:	1080100c 	andi	r2,r2,64
   41150:	103dcc1e 	bne	r2,zero,40884 <___vfprintf_internal_r+0xfc>
   41154:	003dce06 	br	40890 <___vfprintf_internal_r+0x108>
   41158:	d9014f17 	ldw	r4,1340(sp)
   4115c:	b00b883a 	mov	r5,r22
   41160:	d9800c04 	addi	r6,sp,48
   41164:	00407300 	call	40730 <__sprint_r>
   41168:	103f3f1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   4116c:	dc800e17 	ldw	r18,56(sp)
   41170:	003f2e06 	br	40e2c <___vfprintf_internal_r+0x6a4>
   41174:	d9414c17 	ldw	r5,1328(sp)
   41178:	29400414 	ori	r5,r5,16
   4117c:	d9414c15 	stw	r5,1328(sp)
   41180:	d9814c17 	ldw	r6,1328(sp)
   41184:	3080080c 	andi	r2,r6,32
   41188:	10014f1e 	bne	r2,zero,416c8 <___vfprintf_internal_r+0xf40>
   4118c:	d8c14c17 	ldw	r3,1328(sp)
   41190:	1880040c 	andi	r2,r3,16
   41194:	1002ea1e 	bne	r2,zero,41d40 <___vfprintf_internal_r+0x15b8>
   41198:	d9014c17 	ldw	r4,1328(sp)
   4119c:	2080100c 	andi	r2,r4,64
   411a0:	1002e726 	beq	r2,zero,41d40 <___vfprintf_internal_r+0x15b8>
   411a4:	3880000f 	ldh	r2,0(r7)
   411a8:	39c00104 	addi	r7,r7,4
   411ac:	d9c14015 	stw	r7,1280(sp)
   411b0:	1023d7fa 	srai	r17,r2,31
   411b4:	1021883a 	mov	r16,r2
   411b8:	88037216 	blt	r17,zero,41f84 <___vfprintf_internal_r+0x17fc>
   411bc:	01000044 	movi	r4,1
   411c0:	98000416 	blt	r19,zero,411d4 <___vfprintf_internal_r+0xa4c>
   411c4:	d8c14c17 	ldw	r3,1328(sp)
   411c8:	00bfdfc4 	movi	r2,-129
   411cc:	1886703a 	and	r3,r3,r2
   411d0:	d8c14c15 	stw	r3,1328(sp)
   411d4:	8444b03a 	or	r2,r16,r17
   411d8:	1002261e 	bne	r2,zero,41a74 <___vfprintf_internal_r+0x12ec>
   411dc:	9802251e 	bne	r19,zero,41a74 <___vfprintf_internal_r+0x12ec>
   411e0:	20803fcc 	andi	r2,r4,255
   411e4:	10029b26 	beq	r2,zero,41c54 <___vfprintf_internal_r+0x14cc>
   411e8:	d8c01904 	addi	r3,sp,100
   411ec:	dd000f04 	addi	r20,sp,60
   411f0:	d8c14115 	stw	r3,1284(sp)
   411f4:	d8c14117 	ldw	r3,1284(sp)
   411f8:	dcc14515 	stw	r19,1300(sp)
   411fc:	a0c5c83a 	sub	r2,r20,r3
   41200:	11c00a04 	addi	r7,r2,40
   41204:	99c0010e 	bge	r19,r7,4120c <___vfprintf_internal_r+0xa84>
   41208:	d9c14515 	stw	r7,1300(sp)
   4120c:	dcc14615 	stw	r19,1304(sp)
   41210:	d8800407 	ldb	r2,16(sp)
   41214:	103e4c26 	beq	r2,zero,40b48 <___vfprintf_internal_r+0x3c0>
   41218:	d8814517 	ldw	r2,1300(sp)
   4121c:	10800044 	addi	r2,r2,1
   41220:	d8814515 	stw	r2,1300(sp)
   41224:	003e4806 	br	40b48 <___vfprintf_internal_r+0x3c0>
   41228:	d9814c17 	ldw	r6,1328(sp)
   4122c:	31800414 	ori	r6,r6,16
   41230:	d9814c15 	stw	r6,1328(sp)
   41234:	d8c14c17 	ldw	r3,1328(sp)
   41238:	1880080c 	andi	r2,r3,32
   4123c:	1001271e 	bne	r2,zero,416dc <___vfprintf_internal_r+0xf54>
   41240:	d9414c17 	ldw	r5,1328(sp)
   41244:	2880040c 	andi	r2,r5,16
   41248:	1002b61e 	bne	r2,zero,41d24 <___vfprintf_internal_r+0x159c>
   4124c:	d9814c17 	ldw	r6,1328(sp)
   41250:	3080100c 	andi	r2,r6,64
   41254:	1002b326 	beq	r2,zero,41d24 <___vfprintf_internal_r+0x159c>
   41258:	3c00000b 	ldhu	r16,0(r7)
   4125c:	0009883a 	mov	r4,zero
   41260:	39c00104 	addi	r7,r7,4
   41264:	0023883a 	mov	r17,zero
   41268:	d9c14015 	stw	r7,1280(sp)
   4126c:	d8000405 	stb	zero,16(sp)
   41270:	003fd306 	br	411c0 <___vfprintf_internal_r+0xa38>
   41274:	d9014c17 	ldw	r4,1328(sp)
   41278:	21000414 	ori	r4,r4,16
   4127c:	d9014c15 	stw	r4,1328(sp)
   41280:	d9414c17 	ldw	r5,1328(sp)
   41284:	2880080c 	andi	r2,r5,32
   41288:	1001081e 	bne	r2,zero,416ac <___vfprintf_internal_r+0xf24>
   4128c:	d8c14c17 	ldw	r3,1328(sp)
   41290:	1880040c 	andi	r2,r3,16
   41294:	1002b01e 	bne	r2,zero,41d58 <___vfprintf_internal_r+0x15d0>
   41298:	d9014c17 	ldw	r4,1328(sp)
   4129c:	2080100c 	andi	r2,r4,64
   412a0:	1002ad26 	beq	r2,zero,41d58 <___vfprintf_internal_r+0x15d0>
   412a4:	3c00000b 	ldhu	r16,0(r7)
   412a8:	01000044 	movi	r4,1
   412ac:	39c00104 	addi	r7,r7,4
   412b0:	0023883a 	mov	r17,zero
   412b4:	d9c14015 	stw	r7,1280(sp)
   412b8:	d8000405 	stb	zero,16(sp)
   412bc:	003fc006 	br	411c0 <___vfprintf_internal_r+0xa38>
   412c0:	d9014f17 	ldw	r4,1340(sp)
   412c4:	b00b883a 	mov	r5,r22
   412c8:	d9800c04 	addi	r6,sp,48
   412cc:	00407300 	call	40730 <__sprint_r>
   412d0:	103ee51e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   412d4:	dc800e17 	ldw	r18,56(sp)
   412d8:	d8c01904 	addi	r3,sp,100
   412dc:	d9814c17 	ldw	r6,1328(sp)
   412e0:	3080004c 	andi	r2,r6,1
   412e4:	1005003a 	cmpeq	r2,r2,zero
   412e8:	103ea51e 	bne	r2,zero,40d80 <___vfprintf_internal_r+0x5f8>
   412ec:	00800044 	movi	r2,1
   412f0:	dc400d17 	ldw	r17,52(sp)
   412f4:	18800115 	stw	r2,4(r3)
   412f8:	d8814917 	ldw	r2,1316(sp)
   412fc:	94800044 	addi	r18,r18,1
   41300:	8c400044 	addi	r17,r17,1
   41304:	18800015 	stw	r2,0(r3)
   41308:	008001c4 	movi	r2,7
   4130c:	dc800e15 	stw	r18,56(sp)
   41310:	dc400d15 	stw	r17,52(sp)
   41314:	14421e0e 	bge	r2,r17,41b90 <___vfprintf_internal_r+0x1408>
   41318:	d9014f17 	ldw	r4,1340(sp)
   4131c:	b00b883a 	mov	r5,r22
   41320:	d9800c04 	addi	r6,sp,48
   41324:	00407300 	call	40730 <__sprint_r>
   41328:	103ecf1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   4132c:	dc800e17 	ldw	r18,56(sp)
   41330:	d8c01904 	addi	r3,sp,100
   41334:	003e9206 	br	40d80 <___vfprintf_internal_r+0x5f8>
   41338:	d9014f17 	ldw	r4,1340(sp)
   4133c:	b00b883a 	mov	r5,r22
   41340:	d9800c04 	addi	r6,sp,48
   41344:	00407300 	call	40730 <__sprint_r>
   41348:	103ec026 	beq	r2,zero,40e4c <___vfprintf_internal_r+0x6c4>
   4134c:	003ec606 	br	40e68 <___vfprintf_internal_r+0x6e0>
   41350:	d9014f17 	ldw	r4,1340(sp)
   41354:	b00b883a 	mov	r5,r22
   41358:	d9800c04 	addi	r6,sp,48
   4135c:	d9c15115 	stw	r7,1348(sp)
   41360:	00407300 	call	40730 <__sprint_r>
   41364:	d9c15117 	ldw	r7,1348(sp)
   41368:	103ebf1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   4136c:	dc800e17 	ldw	r18,56(sp)
   41370:	dc400d17 	ldw	r17,52(sp)
   41374:	dd401904 	addi	r21,sp,100
   41378:	003e7406 	br	40d4c <___vfprintf_internal_r+0x5c4>
   4137c:	d9014f17 	ldw	r4,1340(sp)
   41380:	b00b883a 	mov	r5,r22
   41384:	d9800c04 	addi	r6,sp,48
   41388:	d9c15115 	stw	r7,1348(sp)
   4138c:	00407300 	call	40730 <__sprint_r>
   41390:	d9c15117 	ldw	r7,1348(sp)
   41394:	103eb41e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41398:	dd401904 	addi	r21,sp,100
   4139c:	003d6d06 	br	40954 <___vfprintf_internal_r+0x1cc>
   413a0:	d9014f17 	ldw	r4,1340(sp)
   413a4:	b00b883a 	mov	r5,r22
   413a8:	d9800c04 	addi	r6,sp,48
   413ac:	d9c15115 	stw	r7,1348(sp)
   413b0:	00407300 	call	40730 <__sprint_r>
   413b4:	d9c15117 	ldw	r7,1348(sp)
   413b8:	103eab1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   413bc:	dc800e17 	ldw	r18,56(sp)
   413c0:	dc400d17 	ldw	r17,52(sp)
   413c4:	dd401904 	addi	r21,sp,100
   413c8:	003e3406 	br	40c9c <___vfprintf_internal_r+0x514>
   413cc:	d9014f17 	ldw	r4,1340(sp)
   413d0:	b00b883a 	mov	r5,r22
   413d4:	d9800c04 	addi	r6,sp,48
   413d8:	d9c15115 	stw	r7,1348(sp)
   413dc:	00407300 	call	40730 <__sprint_r>
   413e0:	d9c15117 	ldw	r7,1348(sp)
   413e4:	103ea01e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   413e8:	dc800e17 	ldw	r18,56(sp)
   413ec:	dc400d17 	ldw	r17,52(sp)
   413f0:	dd401904 	addi	r21,sp,100
   413f4:	003e1c06 	br	40c68 <___vfprintf_internal_r+0x4e0>
   413f8:	d9014f17 	ldw	r4,1340(sp)
   413fc:	b00b883a 	mov	r5,r22
   41400:	d9800c04 	addi	r6,sp,48
   41404:	d9c15115 	stw	r7,1348(sp)
   41408:	00407300 	call	40730 <__sprint_r>
   4140c:	d9c15117 	ldw	r7,1348(sp)
   41410:	103e951e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41414:	dc800e17 	ldw	r18,56(sp)
   41418:	dc400d17 	ldw	r17,52(sp)
   4141c:	dd401904 	addi	r21,sp,100
   41420:	003e0406 	br	40c34 <___vfprintf_internal_r+0x4ac>
   41424:	d9000517 	ldw	r4,20(sp)
   41428:	0102520e 	bge	zero,r4,41d74 <___vfprintf_internal_r+0x15ec>
   4142c:	d9814717 	ldw	r6,1308(sp)
   41430:	21807a16 	blt	r4,r6,4161c <___vfprintf_internal_r+0xe94>
   41434:	d8814117 	ldw	r2,1284(sp)
   41438:	91a5883a 	add	r18,r18,r6
   4143c:	8c400044 	addi	r17,r17,1
   41440:	a8800015 	stw	r2,0(r21)
   41444:	008001c4 	movi	r2,7
   41448:	a9800115 	stw	r6,4(r21)
   4144c:	dc800e15 	stw	r18,56(sp)
   41450:	dc400d15 	stw	r17,52(sp)
   41454:	1442f616 	blt	r2,r17,42030 <___vfprintf_internal_r+0x18a8>
   41458:	a8c00204 	addi	r3,r21,8
   4145c:	d9414717 	ldw	r5,1308(sp)
   41460:	2161c83a 	sub	r16,r4,r5
   41464:	043f9d0e 	bge	zero,r16,412dc <___vfprintf_internal_r+0xb54>
   41468:	00800404 	movi	r2,16
   4146c:	1402130e 	bge	r2,r16,41cbc <___vfprintf_internal_r+0x1534>
   41470:	dc400d17 	ldw	r17,52(sp)
   41474:	1027883a 	mov	r19,r2
   41478:	070001b4 	movhi	fp,6
   4147c:	e7003484 	addi	fp,fp,210
   41480:	050001c4 	movi	r20,7
   41484:	00000306 	br	41494 <___vfprintf_internal_r+0xd0c>
   41488:	18c00204 	addi	r3,r3,8
   4148c:	843ffc04 	addi	r16,r16,-16
   41490:	9c020d0e 	bge	r19,r16,41cc8 <___vfprintf_internal_r+0x1540>
   41494:	94800404 	addi	r18,r18,16
   41498:	8c400044 	addi	r17,r17,1
   4149c:	1f000015 	stw	fp,0(r3)
   414a0:	1cc00115 	stw	r19,4(r3)
   414a4:	dc800e15 	stw	r18,56(sp)
   414a8:	dc400d15 	stw	r17,52(sp)
   414ac:	a47ff60e 	bge	r20,r17,41488 <___vfprintf_internal_r+0xd00>
   414b0:	d9014f17 	ldw	r4,1340(sp)
   414b4:	b00b883a 	mov	r5,r22
   414b8:	d9800c04 	addi	r6,sp,48
   414bc:	00407300 	call	40730 <__sprint_r>
   414c0:	103e691e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   414c4:	dc800e17 	ldw	r18,56(sp)
   414c8:	dc400d17 	ldw	r17,52(sp)
   414cc:	d8c01904 	addi	r3,sp,100
   414d0:	003fee06 	br	4148c <___vfprintf_internal_r+0xd04>
   414d4:	d8814717 	ldw	r2,1308(sp)
   414d8:	143fffc4 	addi	r16,r2,-1
   414dc:	043e970e 	bge	zero,r16,40f3c <___vfprintf_internal_r+0x7b4>
   414e0:	00800404 	movi	r2,16
   414e4:	1400180e 	bge	r2,r16,41548 <___vfprintf_internal_r+0xdc0>
   414e8:	1029883a 	mov	r20,r2
   414ec:	070001b4 	movhi	fp,6
   414f0:	e7003484 	addi	fp,fp,210
   414f4:	054001c4 	movi	r21,7
   414f8:	00000306 	br	41508 <___vfprintf_internal_r+0xd80>
   414fc:	9cc00204 	addi	r19,r19,8
   41500:	843ffc04 	addi	r16,r16,-16
   41504:	a400120e 	bge	r20,r16,41550 <___vfprintf_internal_r+0xdc8>
   41508:	94800404 	addi	r18,r18,16
   4150c:	8c400044 	addi	r17,r17,1
   41510:	9f000015 	stw	fp,0(r19)
   41514:	9d000115 	stw	r20,4(r19)
   41518:	dc800e15 	stw	r18,56(sp)
   4151c:	dc400d15 	stw	r17,52(sp)
   41520:	ac7ff60e 	bge	r21,r17,414fc <___vfprintf_internal_r+0xd74>
   41524:	d9014f17 	ldw	r4,1340(sp)
   41528:	b00b883a 	mov	r5,r22
   4152c:	d9800c04 	addi	r6,sp,48
   41530:	00407300 	call	40730 <__sprint_r>
   41534:	103e4c1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41538:	dc800e17 	ldw	r18,56(sp)
   4153c:	dc400d17 	ldw	r17,52(sp)
   41540:	dcc01904 	addi	r19,sp,100
   41544:	003fee06 	br	41500 <___vfprintf_internal_r+0xd78>
   41548:	070001b4 	movhi	fp,6
   4154c:	e7003484 	addi	fp,fp,210
   41550:	9425883a 	add	r18,r18,r16
   41554:	8c400044 	addi	r17,r17,1
   41558:	008001c4 	movi	r2,7
   4155c:	9f000015 	stw	fp,0(r19)
   41560:	9c000115 	stw	r16,4(r19)
   41564:	dc800e15 	stw	r18,56(sp)
   41568:	dc400d15 	stw	r17,52(sp)
   4156c:	147e720e 	bge	r2,r17,40f38 <___vfprintf_internal_r+0x7b0>
   41570:	d9014f17 	ldw	r4,1340(sp)
   41574:	b00b883a 	mov	r5,r22
   41578:	d9800c04 	addi	r6,sp,48
   4157c:	00407300 	call	40730 <__sprint_r>
   41580:	103e391e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41584:	dc800e17 	ldw	r18,56(sp)
   41588:	dc400d17 	ldw	r17,52(sp)
   4158c:	dcc01904 	addi	r19,sp,100
   41590:	003e6a06 	br	40f3c <___vfprintf_internal_r+0x7b4>
   41594:	d9014f17 	ldw	r4,1340(sp)
   41598:	b00b883a 	mov	r5,r22
   4159c:	d9800c04 	addi	r6,sp,48
   415a0:	d9c15115 	stw	r7,1348(sp)
   415a4:	00407300 	call	40730 <__sprint_r>
   415a8:	d9c15117 	ldw	r7,1348(sp)
   415ac:	103e2e1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   415b0:	dc800e17 	ldw	r18,56(sp)
   415b4:	dc400d17 	ldw	r17,52(sp)
   415b8:	dd401904 	addi	r21,sp,100
   415bc:	003dba06 	br	40ca8 <___vfprintf_internal_r+0x520>
   415c0:	d9014f17 	ldw	r4,1340(sp)
   415c4:	b00b883a 	mov	r5,r22
   415c8:	d9800c04 	addi	r6,sp,48
   415cc:	00407300 	call	40730 <__sprint_r>
   415d0:	103e251e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   415d4:	dc800e17 	ldw	r18,56(sp)
   415d8:	dc400d17 	ldw	r17,52(sp)
   415dc:	dcc01904 	addi	r19,sp,100
   415e0:	003e4206 	br	40eec <___vfprintf_internal_r+0x764>
   415e4:	d9014f17 	ldw	r4,1340(sp)
   415e8:	b00b883a 	mov	r5,r22
   415ec:	d9800c04 	addi	r6,sp,48
   415f0:	00407300 	call	40730 <__sprint_r>
   415f4:	103e1c1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   415f8:	dc800e17 	ldw	r18,56(sp)
   415fc:	dc400d17 	ldw	r17,52(sp)
   41600:	d8c01904 	addi	r3,sp,100
   41604:	003e2e06 	br	40ec0 <___vfprintf_internal_r+0x738>
   41608:	d9414c17 	ldw	r5,1328(sp)
   4160c:	2880004c 	andi	r2,r5,1
   41610:	1005003a 	cmpeq	r2,r2,zero
   41614:	103dda1e 	bne	r2,zero,40d80 <___vfprintf_internal_r+0x5f8>
   41618:	003e9f06 	br	41098 <___vfprintf_internal_r+0x910>
   4161c:	d8c14117 	ldw	r3,1284(sp)
   41620:	9125883a 	add	r18,r18,r4
   41624:	8c400044 	addi	r17,r17,1
   41628:	008001c4 	movi	r2,7
   4162c:	a8c00015 	stw	r3,0(r21)
   41630:	a9000115 	stw	r4,4(r21)
   41634:	dc800e15 	stw	r18,56(sp)
   41638:	dc400d15 	stw	r17,52(sp)
   4163c:	14426616 	blt	r2,r17,41fd8 <___vfprintf_internal_r+0x1850>
   41640:	a8c00204 	addi	r3,r21,8
   41644:	d9414917 	ldw	r5,1316(sp)
   41648:	00800044 	movi	r2,1
   4164c:	94800044 	addi	r18,r18,1
   41650:	8c400044 	addi	r17,r17,1
   41654:	18800115 	stw	r2,4(r3)
   41658:	008001c4 	movi	r2,7
   4165c:	19400015 	stw	r5,0(r3)
   41660:	dc800e15 	stw	r18,56(sp)
   41664:	dc400d15 	stw	r17,52(sp)
   41668:	2021883a 	mov	r16,r4
   4166c:	14425016 	blt	r2,r17,41fb0 <___vfprintf_internal_r+0x1828>
   41670:	19400204 	addi	r5,r3,8
   41674:	d9814717 	ldw	r6,1308(sp)
   41678:	8c400044 	addi	r17,r17,1
   4167c:	dc400d15 	stw	r17,52(sp)
   41680:	3107c83a 	sub	r3,r6,r4
   41684:	d9014117 	ldw	r4,1284(sp)
   41688:	90e5883a 	add	r18,r18,r3
   4168c:	28c00115 	stw	r3,4(r5)
   41690:	8105883a 	add	r2,r16,r4
   41694:	28800015 	stw	r2,0(r5)
   41698:	008001c4 	movi	r2,7
   4169c:	dc800e15 	stw	r18,56(sp)
   416a0:	147f1d16 	blt	r2,r17,41318 <___vfprintf_internal_r+0xb90>
   416a4:	28c00204 	addi	r3,r5,8
   416a8:	003db506 	br	40d80 <___vfprintf_internal_r+0x5f8>
   416ac:	3c000017 	ldw	r16,0(r7)
   416b0:	3c400117 	ldw	r17,4(r7)
   416b4:	39800204 	addi	r6,r7,8
   416b8:	01000044 	movi	r4,1
   416bc:	d9814015 	stw	r6,1280(sp)
   416c0:	d8000405 	stb	zero,16(sp)
   416c4:	003ebe06 	br	411c0 <___vfprintf_internal_r+0xa38>
   416c8:	3c000017 	ldw	r16,0(r7)
   416cc:	3c400117 	ldw	r17,4(r7)
   416d0:	38800204 	addi	r2,r7,8
   416d4:	d8814015 	stw	r2,1280(sp)
   416d8:	003eb706 	br	411b8 <___vfprintf_internal_r+0xa30>
   416dc:	3c000017 	ldw	r16,0(r7)
   416e0:	3c400117 	ldw	r17,4(r7)
   416e4:	39000204 	addi	r4,r7,8
   416e8:	d9014015 	stw	r4,1280(sp)
   416ec:	0009883a 	mov	r4,zero
   416f0:	d8000405 	stb	zero,16(sp)
   416f4:	003eb206 	br	411c0 <___vfprintf_internal_r+0xa38>
   416f8:	38c00017 	ldw	r3,0(r7)
   416fc:	39c00104 	addi	r7,r7,4
   41700:	d8c14a15 	stw	r3,1320(sp)
   41704:	1800d10e 	bge	r3,zero,41a4c <___vfprintf_internal_r+0x12c4>
   41708:	00c7c83a 	sub	r3,zero,r3
   4170c:	d8c14a15 	stw	r3,1320(sp)
   41710:	d9014c17 	ldw	r4,1328(sp)
   41714:	b8c00007 	ldb	r3,0(r23)
   41718:	21000114 	ori	r4,r4,4
   4171c:	d9014c15 	stw	r4,1328(sp)
   41720:	003c9806 	br	40984 <___vfprintf_internal_r+0x1fc>
   41724:	d9814c17 	ldw	r6,1328(sp)
   41728:	3080080c 	andi	r2,r6,32
   4172c:	1001f026 	beq	r2,zero,41ef0 <___vfprintf_internal_r+0x1768>
   41730:	d9014b17 	ldw	r4,1324(sp)
   41734:	38800017 	ldw	r2,0(r7)
   41738:	39c00104 	addi	r7,r7,4
   4173c:	d9c14015 	stw	r7,1280(sp)
   41740:	2007d7fa 	srai	r3,r4,31
   41744:	d9c14017 	ldw	r7,1280(sp)
   41748:	11000015 	stw	r4,0(r2)
   4174c:	10c00115 	stw	r3,4(r2)
   41750:	003c6906 	br	408f8 <___vfprintf_internal_r+0x170>
   41754:	b8c00007 	ldb	r3,0(r23)
   41758:	00801b04 	movi	r2,108
   4175c:	18824f26 	beq	r3,r2,4209c <___vfprintf_internal_r+0x1914>
   41760:	d9414c17 	ldw	r5,1328(sp)
   41764:	29400414 	ori	r5,r5,16
   41768:	d9414c15 	stw	r5,1328(sp)
   4176c:	003c8506 	br	40984 <___vfprintf_internal_r+0x1fc>
   41770:	d9814c17 	ldw	r6,1328(sp)
   41774:	b8c00007 	ldb	r3,0(r23)
   41778:	31800814 	ori	r6,r6,32
   4177c:	d9814c15 	stw	r6,1328(sp)
   41780:	003c8006 	br	40984 <___vfprintf_internal_r+0x1fc>
   41784:	d8814c17 	ldw	r2,1328(sp)
   41788:	3c000017 	ldw	r16,0(r7)
   4178c:	00c01e04 	movi	r3,120
   41790:	10800094 	ori	r2,r2,2
   41794:	d8814c15 	stw	r2,1328(sp)
   41798:	39c00104 	addi	r7,r7,4
   4179c:	014001b4 	movhi	r5,6
   417a0:	29401d04 	addi	r5,r5,116
   417a4:	00800c04 	movi	r2,48
   417a8:	0023883a 	mov	r17,zero
   417ac:	01000084 	movi	r4,2
   417b0:	d9c14015 	stw	r7,1280(sp)
   417b4:	d8c14d15 	stw	r3,1332(sp)
   417b8:	d9414415 	stw	r5,1296(sp)
   417bc:	d8800445 	stb	r2,17(sp)
   417c0:	d8c00485 	stb	r3,18(sp)
   417c4:	d8000405 	stb	zero,16(sp)
   417c8:	003e7d06 	br	411c0 <___vfprintf_internal_r+0xa38>
   417cc:	d8814c17 	ldw	r2,1328(sp)
   417d0:	b8c00007 	ldb	r3,0(r23)
   417d4:	10801014 	ori	r2,r2,64
   417d8:	d8814c15 	stw	r2,1328(sp)
   417dc:	003c6906 	br	40984 <___vfprintf_internal_r+0x1fc>
   417e0:	d9414c17 	ldw	r5,1328(sp)
   417e4:	2880020c 	andi	r2,r5,8
   417e8:	1001df26 	beq	r2,zero,41f68 <___vfprintf_internal_r+0x17e0>
   417ec:	39800017 	ldw	r6,0(r7)
   417f0:	38800204 	addi	r2,r7,8
   417f4:	d8814015 	stw	r2,1280(sp)
   417f8:	d9814215 	stw	r6,1288(sp)
   417fc:	39c00117 	ldw	r7,4(r7)
   41800:	d9c14315 	stw	r7,1292(sp)
   41804:	d9014217 	ldw	r4,1288(sp)
   41808:	d9414317 	ldw	r5,1292(sp)
   4180c:	00471280 	call	47128 <__isinfd>
   41810:	10021726 	beq	r2,zero,42070 <___vfprintf_internal_r+0x18e8>
   41814:	d9014217 	ldw	r4,1288(sp)
   41818:	d9414317 	ldw	r5,1292(sp)
   4181c:	000d883a 	mov	r6,zero
   41820:	000f883a 	mov	r7,zero
   41824:	00491700 	call	49170 <__ltdf2>
   41828:	1002ca16 	blt	r2,zero,42354 <___vfprintf_internal_r+0x1bcc>
   4182c:	d9414d17 	ldw	r5,1332(sp)
   41830:	008011c4 	movi	r2,71
   41834:	11420a16 	blt	r2,r5,42060 <___vfprintf_internal_r+0x18d8>
   41838:	018001b4 	movhi	r6,6
   4183c:	31802204 	addi	r6,r6,136
   41840:	d9814115 	stw	r6,1284(sp)
   41844:	d9014c17 	ldw	r4,1328(sp)
   41848:	00c000c4 	movi	r3,3
   4184c:	00bfdfc4 	movi	r2,-129
   41850:	2088703a 	and	r4,r4,r2
   41854:	180f883a 	mov	r7,r3
   41858:	d8c14515 	stw	r3,1300(sp)
   4185c:	d9014c15 	stw	r4,1328(sp)
   41860:	d8014615 	stw	zero,1304(sp)
   41864:	003e6a06 	br	41210 <___vfprintf_internal_r+0xa88>
   41868:	38800017 	ldw	r2,0(r7)
   4186c:	00c00044 	movi	r3,1
   41870:	39c00104 	addi	r7,r7,4
   41874:	d9c14015 	stw	r7,1280(sp)
   41878:	d9000f04 	addi	r4,sp,60
   4187c:	180f883a 	mov	r7,r3
   41880:	d8c14515 	stw	r3,1300(sp)
   41884:	d9014115 	stw	r4,1284(sp)
   41888:	d8800f05 	stb	r2,60(sp)
   4188c:	d8000405 	stb	zero,16(sp)
   41890:	003cac06 	br	40b44 <___vfprintf_internal_r+0x3bc>
   41894:	014001b4 	movhi	r5,6
   41898:	29402804 	addi	r5,r5,160
   4189c:	d9414415 	stw	r5,1296(sp)
   418a0:	d9814c17 	ldw	r6,1328(sp)
   418a4:	3080080c 	andi	r2,r6,32
   418a8:	1000f926 	beq	r2,zero,41c90 <___vfprintf_internal_r+0x1508>
   418ac:	3c000017 	ldw	r16,0(r7)
   418b0:	3c400117 	ldw	r17,4(r7)
   418b4:	38800204 	addi	r2,r7,8
   418b8:	d8814015 	stw	r2,1280(sp)
   418bc:	d9414c17 	ldw	r5,1328(sp)
   418c0:	2880004c 	andi	r2,r5,1
   418c4:	1005003a 	cmpeq	r2,r2,zero
   418c8:	1000b31e 	bne	r2,zero,41b98 <___vfprintf_internal_r+0x1410>
   418cc:	8444b03a 	or	r2,r16,r17
   418d0:	1000b126 	beq	r2,zero,41b98 <___vfprintf_internal_r+0x1410>
   418d4:	d9814d17 	ldw	r6,1332(sp)
   418d8:	29400094 	ori	r5,r5,2
   418dc:	00800c04 	movi	r2,48
   418e0:	01000084 	movi	r4,2
   418e4:	d9414c15 	stw	r5,1328(sp)
   418e8:	d8800445 	stb	r2,17(sp)
   418ec:	d9800485 	stb	r6,18(sp)
   418f0:	d8000405 	stb	zero,16(sp)
   418f4:	003e3206 	br	411c0 <___vfprintf_internal_r+0xa38>
   418f8:	018001b4 	movhi	r6,6
   418fc:	31801d04 	addi	r6,r6,116
   41900:	d9814415 	stw	r6,1296(sp)
   41904:	003fe606 	br	418a0 <___vfprintf_internal_r+0x1118>
   41908:	00800ac4 	movi	r2,43
   4190c:	d8800405 	stb	r2,16(sp)
   41910:	b8c00007 	ldb	r3,0(r23)
   41914:	003c1b06 	br	40984 <___vfprintf_internal_r+0x1fc>
   41918:	d8814c17 	ldw	r2,1328(sp)
   4191c:	b8c00007 	ldb	r3,0(r23)
   41920:	10800054 	ori	r2,r2,1
   41924:	d8814c15 	stw	r2,1328(sp)
   41928:	003c1606 	br	40984 <___vfprintf_internal_r+0x1fc>
   4192c:	d8800407 	ldb	r2,16(sp)
   41930:	1000461e 	bne	r2,zero,41a4c <___vfprintf_internal_r+0x12c4>
   41934:	00800804 	movi	r2,32
   41938:	d8800405 	stb	r2,16(sp)
   4193c:	b8c00007 	ldb	r3,0(r23)
   41940:	003c1006 	br	40984 <___vfprintf_internal_r+0x1fc>
   41944:	d9814c17 	ldw	r6,1328(sp)
   41948:	b8c00007 	ldb	r3,0(r23)
   4194c:	31800214 	ori	r6,r6,8
   41950:	d9814c15 	stw	r6,1328(sp)
   41954:	003c0b06 	br	40984 <___vfprintf_internal_r+0x1fc>
   41958:	0007883a 	mov	r3,zero
   4195c:	01000244 	movi	r4,9
   41960:	188002a4 	muli	r2,r3,10
   41964:	b8c00007 	ldb	r3,0(r23)
   41968:	d9814d17 	ldw	r6,1332(sp)
   4196c:	bdc00044 	addi	r23,r23,1
   41970:	d8c14d15 	stw	r3,1332(sp)
   41974:	d9414d17 	ldw	r5,1332(sp)
   41978:	3085883a 	add	r2,r6,r2
   4197c:	10fff404 	addi	r3,r2,-48
   41980:	28bff404 	addi	r2,r5,-48
   41984:	20bff62e 	bgeu	r4,r2,41960 <___vfprintf_internal_r+0x11d8>
   41988:	d8c14a15 	stw	r3,1320(sp)
   4198c:	003bff06 	br	4098c <___vfprintf_internal_r+0x204>
   41990:	d9414c17 	ldw	r5,1328(sp)
   41994:	b8c00007 	ldb	r3,0(r23)
   41998:	29402014 	ori	r5,r5,128
   4199c:	d9414c15 	stw	r5,1328(sp)
   419a0:	003bf806 	br	40984 <___vfprintf_internal_r+0x1fc>
   419a4:	b8c00007 	ldb	r3,0(r23)
   419a8:	00800a84 	movi	r2,42
   419ac:	bdc00044 	addi	r23,r23,1
   419b0:	18831526 	beq	r3,r2,42608 <___vfprintf_internal_r+0x1e80>
   419b4:	d8c14d15 	stw	r3,1332(sp)
   419b8:	18bff404 	addi	r2,r3,-48
   419bc:	00c00244 	movi	r3,9
   419c0:	18827836 	bltu	r3,r2,423a4 <___vfprintf_internal_r+0x1c1c>
   419c4:	000d883a 	mov	r6,zero
   419c8:	308002a4 	muli	r2,r6,10
   419cc:	b9800007 	ldb	r6,0(r23)
   419d0:	d9414d17 	ldw	r5,1332(sp)
   419d4:	bdc00044 	addi	r23,r23,1
   419d8:	d9814d15 	stw	r6,1332(sp)
   419dc:	d9014d17 	ldw	r4,1332(sp)
   419e0:	1145883a 	add	r2,r2,r5
   419e4:	11bff404 	addi	r6,r2,-48
   419e8:	20bff404 	addi	r2,r4,-48
   419ec:	18bff62e 	bgeu	r3,r2,419c8 <___vfprintf_internal_r+0x1240>
   419f0:	3027883a 	mov	r19,r6
   419f4:	303be50e 	bge	r6,zero,4098c <___vfprintf_internal_r+0x204>
   419f8:	04ffffc4 	movi	r19,-1
   419fc:	003be306 	br	4098c <___vfprintf_internal_r+0x204>
   41a00:	d8000405 	stb	zero,16(sp)
   41a04:	39800017 	ldw	r6,0(r7)
   41a08:	39c00104 	addi	r7,r7,4
   41a0c:	d9c14015 	stw	r7,1280(sp)
   41a10:	d9814115 	stw	r6,1284(sp)
   41a14:	3001c926 	beq	r6,zero,4213c <___vfprintf_internal_r+0x19b4>
   41a18:	98000e16 	blt	r19,zero,41a54 <___vfprintf_internal_r+0x12cc>
   41a1c:	d9014117 	ldw	r4,1284(sp)
   41a20:	000b883a 	mov	r5,zero
   41a24:	980d883a 	mov	r6,r19
   41a28:	00458440 	call	45844 <memchr>
   41a2c:	10025926 	beq	r2,zero,42394 <___vfprintf_internal_r+0x1c0c>
   41a30:	d8c14117 	ldw	r3,1284(sp)
   41a34:	10cfc83a 	sub	r7,r2,r3
   41a38:	99c19e16 	blt	r19,r7,420b4 <___vfprintf_internal_r+0x192c>
   41a3c:	d9c14515 	stw	r7,1300(sp)
   41a40:	38000916 	blt	r7,zero,41a68 <___vfprintf_internal_r+0x12e0>
   41a44:	d8014615 	stw	zero,1304(sp)
   41a48:	003df106 	br	41210 <___vfprintf_internal_r+0xa88>
   41a4c:	b8c00007 	ldb	r3,0(r23)
   41a50:	003bcc06 	br	40984 <___vfprintf_internal_r+0x1fc>
   41a54:	d9014117 	ldw	r4,1284(sp)
   41a58:	00406bc0 	call	406bc <strlen>
   41a5c:	d8814515 	stw	r2,1300(sp)
   41a60:	100f883a 	mov	r7,r2
   41a64:	103ff70e 	bge	r2,zero,41a44 <___vfprintf_internal_r+0x12bc>
   41a68:	d8014515 	stw	zero,1300(sp)
   41a6c:	d8014615 	stw	zero,1304(sp)
   41a70:	003de706 	br	41210 <___vfprintf_internal_r+0xa88>
   41a74:	20c03fcc 	andi	r3,r4,255
   41a78:	00800044 	movi	r2,1
   41a7c:	18802d26 	beq	r3,r2,41b34 <___vfprintf_internal_r+0x13ac>
   41a80:	18800e36 	bltu	r3,r2,41abc <___vfprintf_internal_r+0x1334>
   41a84:	00800084 	movi	r2,2
   41a88:	1880fa26 	beq	r3,r2,41e74 <___vfprintf_internal_r+0x16ec>
   41a8c:	010001b4 	movhi	r4,6
   41a90:	21002d04 	addi	r4,r4,180
   41a94:	00406bc0 	call	406bc <strlen>
   41a98:	100f883a 	mov	r7,r2
   41a9c:	dcc14515 	stw	r19,1300(sp)
   41aa0:	9880010e 	bge	r19,r2,41aa8 <___vfprintf_internal_r+0x1320>
   41aa4:	d8814515 	stw	r2,1300(sp)
   41aa8:	008001b4 	movhi	r2,6
   41aac:	10802d04 	addi	r2,r2,180
   41ab0:	dcc14615 	stw	r19,1304(sp)
   41ab4:	d8814115 	stw	r2,1284(sp)
   41ab8:	003dd506 	br	41210 <___vfprintf_internal_r+0xa88>
   41abc:	d9401904 	addi	r5,sp,100
   41ac0:	dd000f04 	addi	r20,sp,60
   41ac4:	d9414115 	stw	r5,1284(sp)
   41ac8:	880a977a 	slli	r5,r17,29
   41acc:	d9814117 	ldw	r6,1284(sp)
   41ad0:	8004d0fa 	srli	r2,r16,3
   41ad4:	8806d0fa 	srli	r3,r17,3
   41ad8:	810001cc 	andi	r4,r16,7
   41adc:	2884b03a 	or	r2,r5,r2
   41ae0:	31bfffc4 	addi	r6,r6,-1
   41ae4:	21000c04 	addi	r4,r4,48
   41ae8:	d9814115 	stw	r6,1284(sp)
   41aec:	10cab03a 	or	r5,r2,r3
   41af0:	31000005 	stb	r4,0(r6)
   41af4:	1021883a 	mov	r16,r2
   41af8:	1823883a 	mov	r17,r3
   41afc:	283ff21e 	bne	r5,zero,41ac8 <___vfprintf_internal_r+0x1340>
   41b00:	d8c14c17 	ldw	r3,1328(sp)
   41b04:	1880004c 	andi	r2,r3,1
   41b08:	1005003a 	cmpeq	r2,r2,zero
   41b0c:	103db91e 	bne	r2,zero,411f4 <___vfprintf_internal_r+0xa6c>
   41b10:	20803fcc 	andi	r2,r4,255
   41b14:	1080201c 	xori	r2,r2,128
   41b18:	10bfe004 	addi	r2,r2,-128
   41b1c:	00c00c04 	movi	r3,48
   41b20:	10fdb426 	beq	r2,r3,411f4 <___vfprintf_internal_r+0xa6c>
   41b24:	31bfffc4 	addi	r6,r6,-1
   41b28:	d9814115 	stw	r6,1284(sp)
   41b2c:	30c00005 	stb	r3,0(r6)
   41b30:	003db006 	br	411f4 <___vfprintf_internal_r+0xa6c>
   41b34:	88800068 	cmpgeui	r2,r17,1
   41b38:	10002c1e 	bne	r2,zero,41bec <___vfprintf_internal_r+0x1464>
   41b3c:	8800021e 	bne	r17,zero,41b48 <___vfprintf_internal_r+0x13c0>
   41b40:	00800244 	movi	r2,9
   41b44:	14002936 	bltu	r2,r16,41bec <___vfprintf_internal_r+0x1464>
   41b48:	d90018c4 	addi	r4,sp,99
   41b4c:	dd000f04 	addi	r20,sp,60
   41b50:	d9014115 	stw	r4,1284(sp)
   41b54:	d9014117 	ldw	r4,1284(sp)
   41b58:	80800c04 	addi	r2,r16,48
   41b5c:	20800005 	stb	r2,0(r4)
   41b60:	003da406 	br	411f4 <___vfprintf_internal_r+0xa6c>
   41b64:	dc400d17 	ldw	r17,52(sp)
   41b68:	070001b4 	movhi	fp,6
   41b6c:	e7003484 	addi	fp,fp,210
   41b70:	9425883a 	add	r18,r18,r16
   41b74:	8c400044 	addi	r17,r17,1
   41b78:	008001c4 	movi	r2,7
   41b7c:	1f000015 	stw	fp,0(r3)
   41b80:	1c000115 	stw	r16,4(r3)
   41b84:	dc800e15 	stw	r18,56(sp)
   41b88:	dc400d15 	stw	r17,52(sp)
   41b8c:	147de216 	blt	r2,r17,41318 <___vfprintf_internal_r+0xb90>
   41b90:	18c00204 	addi	r3,r3,8
   41b94:	003c7a06 	br	40d80 <___vfprintf_internal_r+0x5f8>
   41b98:	01000084 	movi	r4,2
   41b9c:	d8000405 	stb	zero,16(sp)
   41ba0:	003d8706 	br	411c0 <___vfprintf_internal_r+0xa38>
   41ba4:	d9814c17 	ldw	r6,1328(sp)
   41ba8:	30c4703a 	and	r2,r6,r3
   41bac:	1005003a 	cmpeq	r2,r2,zero
   41bb0:	103cb926 	beq	r2,zero,40e98 <___vfprintf_internal_r+0x710>
   41bb4:	d9014117 	ldw	r4,1284(sp)
   41bb8:	94800044 	addi	r18,r18,1
   41bbc:	8c400044 	addi	r17,r17,1
   41bc0:	008001c4 	movi	r2,7
   41bc4:	a9000015 	stw	r4,0(r21)
   41bc8:	a8c00115 	stw	r3,4(r21)
   41bcc:	dc800e15 	stw	r18,56(sp)
   41bd0:	dc400d15 	stw	r17,52(sp)
   41bd4:	147e6616 	blt	r2,r17,41570 <___vfprintf_internal_r+0xde8>
   41bd8:	acc00204 	addi	r19,r21,8
   41bdc:	003cd706 	br	40f3c <___vfprintf_internal_r+0x7b4>
   41be0:	070001b4 	movhi	fp,6
   41be4:	e7003484 	addi	fp,fp,210
   41be8:	003c4f06 	br	40d28 <___vfprintf_internal_r+0x5a0>
   41bec:	dd000f04 	addi	r20,sp,60
   41bf0:	dc801904 	addi	r18,sp,100
   41bf4:	8009883a 	mov	r4,r16
   41bf8:	880b883a 	mov	r5,r17
   41bfc:	01800284 	movi	r6,10
   41c00:	000f883a 	mov	r7,zero
   41c04:	0047e800 	call	47e80 <__umoddi3>
   41c08:	12000c04 	addi	r8,r2,48
   41c0c:	94bfffc4 	addi	r18,r18,-1
   41c10:	8009883a 	mov	r4,r16
   41c14:	880b883a 	mov	r5,r17
   41c18:	01800284 	movi	r6,10
   41c1c:	000f883a 	mov	r7,zero
   41c20:	92000005 	stb	r8,0(r18)
   41c24:	00478a40 	call	478a4 <__udivdi3>
   41c28:	1009883a 	mov	r4,r2
   41c2c:	1021883a 	mov	r16,r2
   41c30:	18800068 	cmpgeui	r2,r3,1
   41c34:	1823883a 	mov	r17,r3
   41c38:	103fee1e 	bne	r2,zero,41bf4 <___vfprintf_internal_r+0x146c>
   41c3c:	1800021e 	bne	r3,zero,41c48 <___vfprintf_internal_r+0x14c0>
   41c40:	00800244 	movi	r2,9
   41c44:	113feb36 	bltu	r2,r4,41bf4 <___vfprintf_internal_r+0x146c>
   41c48:	94bfffc4 	addi	r18,r18,-1
   41c4c:	dc814115 	stw	r18,1284(sp)
   41c50:	003fc006 	br	41b54 <___vfprintf_internal_r+0x13cc>
   41c54:	d9014c17 	ldw	r4,1328(sp)
   41c58:	2080004c 	andi	r2,r4,1
   41c5c:	10009a1e 	bne	r2,zero,41ec8 <___vfprintf_internal_r+0x1740>
   41c60:	d9401904 	addi	r5,sp,100
   41c64:	dd000f04 	addi	r20,sp,60
   41c68:	d9414115 	stw	r5,1284(sp)
   41c6c:	003d6106 	br	411f4 <___vfprintf_internal_r+0xa6c>
   41c70:	d9014f17 	ldw	r4,1340(sp)
   41c74:	b00b883a 	mov	r5,r22
   41c78:	d9800c04 	addi	r6,sp,48
   41c7c:	00407300 	call	40730 <__sprint_r>
   41c80:	103c791e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41c84:	dc800e17 	ldw	r18,56(sp)
   41c88:	d8c01904 	addi	r3,sp,100
   41c8c:	003cff06 	br	4108c <___vfprintf_internal_r+0x904>
   41c90:	d8c14c17 	ldw	r3,1328(sp)
   41c94:	1880040c 	andi	r2,r3,16
   41c98:	1000711e 	bne	r2,zero,41e60 <___vfprintf_internal_r+0x16d8>
   41c9c:	d9014c17 	ldw	r4,1328(sp)
   41ca0:	2080100c 	andi	r2,r4,64
   41ca4:	10006e26 	beq	r2,zero,41e60 <___vfprintf_internal_r+0x16d8>
   41ca8:	3c00000b 	ldhu	r16,0(r7)
   41cac:	0023883a 	mov	r17,zero
   41cb0:	39c00104 	addi	r7,r7,4
   41cb4:	d9c14015 	stw	r7,1280(sp)
   41cb8:	003f0006 	br	418bc <___vfprintf_internal_r+0x1134>
   41cbc:	dc400d17 	ldw	r17,52(sp)
   41cc0:	070001b4 	movhi	fp,6
   41cc4:	e7003484 	addi	fp,fp,210
   41cc8:	9425883a 	add	r18,r18,r16
   41ccc:	8c400044 	addi	r17,r17,1
   41cd0:	008001c4 	movi	r2,7
   41cd4:	1f000015 	stw	fp,0(r3)
   41cd8:	1c000115 	stw	r16,4(r3)
   41cdc:	dc800e15 	stw	r18,56(sp)
   41ce0:	dc400d15 	stw	r17,52(sp)
   41ce4:	147d7616 	blt	r2,r17,412c0 <___vfprintf_internal_r+0xb38>
   41ce8:	18c00204 	addi	r3,r3,8
   41cec:	003d7b06 	br	412dc <___vfprintf_internal_r+0xb54>
   41cf0:	dc800e17 	ldw	r18,56(sp)
   41cf4:	dc400d17 	ldw	r17,52(sp)
   41cf8:	070001b4 	movhi	fp,6
   41cfc:	e7003884 	addi	fp,fp,226
   41d00:	003bc006 	br	40c04 <___vfprintf_internal_r+0x47c>
   41d04:	d9014f17 	ldw	r4,1340(sp)
   41d08:	b00b883a 	mov	r5,r22
   41d0c:	d9800c04 	addi	r6,sp,48
   41d10:	00407300 	call	40730 <__sprint_r>
   41d14:	103c541e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41d18:	dc800e17 	ldw	r18,56(sp)
   41d1c:	d8c01904 	addi	r3,sp,100
   41d20:	003ce906 	br	410c8 <___vfprintf_internal_r+0x940>
   41d24:	3c000017 	ldw	r16,0(r7)
   41d28:	0009883a 	mov	r4,zero
   41d2c:	39c00104 	addi	r7,r7,4
   41d30:	0023883a 	mov	r17,zero
   41d34:	d9c14015 	stw	r7,1280(sp)
   41d38:	d8000405 	stb	zero,16(sp)
   41d3c:	003d2006 	br	411c0 <___vfprintf_internal_r+0xa38>
   41d40:	38800017 	ldw	r2,0(r7)
   41d44:	39c00104 	addi	r7,r7,4
   41d48:	d9c14015 	stw	r7,1280(sp)
   41d4c:	1023d7fa 	srai	r17,r2,31
   41d50:	1021883a 	mov	r16,r2
   41d54:	003d1806 	br	411b8 <___vfprintf_internal_r+0xa30>
   41d58:	3c000017 	ldw	r16,0(r7)
   41d5c:	01000044 	movi	r4,1
   41d60:	39c00104 	addi	r7,r7,4
   41d64:	0023883a 	mov	r17,zero
   41d68:	d9c14015 	stw	r7,1280(sp)
   41d6c:	d8000405 	stb	zero,16(sp)
   41d70:	003d1306 	br	411c0 <___vfprintf_internal_r+0xa38>
   41d74:	008001b4 	movhi	r2,6
   41d78:	10803404 	addi	r2,r2,208
   41d7c:	94800044 	addi	r18,r18,1
   41d80:	8c400044 	addi	r17,r17,1
   41d84:	a8800015 	stw	r2,0(r21)
   41d88:	00c00044 	movi	r3,1
   41d8c:	008001c4 	movi	r2,7
   41d90:	a8c00115 	stw	r3,4(r21)
   41d94:	dc800e15 	stw	r18,56(sp)
   41d98:	dc400d15 	stw	r17,52(sp)
   41d9c:	1440ca16 	blt	r2,r17,420c8 <___vfprintf_internal_r+0x1940>
   41da0:	a8c00204 	addi	r3,r21,8
   41da4:	2000061e 	bne	r4,zero,41dc0 <___vfprintf_internal_r+0x1638>
   41da8:	d9414717 	ldw	r5,1308(sp)
   41dac:	2800041e 	bne	r5,zero,41dc0 <___vfprintf_internal_r+0x1638>
   41db0:	d9814c17 	ldw	r6,1328(sp)
   41db4:	3080004c 	andi	r2,r6,1
   41db8:	1005003a 	cmpeq	r2,r2,zero
   41dbc:	103bf01e 	bne	r2,zero,40d80 <___vfprintf_internal_r+0x5f8>
   41dc0:	00800044 	movi	r2,1
   41dc4:	dc400d17 	ldw	r17,52(sp)
   41dc8:	18800115 	stw	r2,4(r3)
   41dcc:	d8814917 	ldw	r2,1316(sp)
   41dd0:	94800044 	addi	r18,r18,1
   41dd4:	8c400044 	addi	r17,r17,1
   41dd8:	18800015 	stw	r2,0(r3)
   41ddc:	008001c4 	movi	r2,7
   41de0:	dc800e15 	stw	r18,56(sp)
   41de4:	dc400d15 	stw	r17,52(sp)
   41de8:	1440ca16 	blt	r2,r17,42114 <___vfprintf_internal_r+0x198c>
   41dec:	18c00204 	addi	r3,r3,8
   41df0:	0121c83a 	sub	r16,zero,r4
   41df4:	0400500e 	bge	zero,r16,41f38 <___vfprintf_internal_r+0x17b0>
   41df8:	00800404 	movi	r2,16
   41dfc:	1400800e 	bge	r2,r16,42000 <___vfprintf_internal_r+0x1878>
   41e00:	1027883a 	mov	r19,r2
   41e04:	070001b4 	movhi	fp,6
   41e08:	e7003484 	addi	fp,fp,210
   41e0c:	050001c4 	movi	r20,7
   41e10:	00000306 	br	41e20 <___vfprintf_internal_r+0x1698>
   41e14:	18c00204 	addi	r3,r3,8
   41e18:	843ffc04 	addi	r16,r16,-16
   41e1c:	9c007a0e 	bge	r19,r16,42008 <___vfprintf_internal_r+0x1880>
   41e20:	94800404 	addi	r18,r18,16
   41e24:	8c400044 	addi	r17,r17,1
   41e28:	1f000015 	stw	fp,0(r3)
   41e2c:	1cc00115 	stw	r19,4(r3)
   41e30:	dc800e15 	stw	r18,56(sp)
   41e34:	dc400d15 	stw	r17,52(sp)
   41e38:	a47ff60e 	bge	r20,r17,41e14 <___vfprintf_internal_r+0x168c>
   41e3c:	d9014f17 	ldw	r4,1340(sp)
   41e40:	b00b883a 	mov	r5,r22
   41e44:	d9800c04 	addi	r6,sp,48
   41e48:	00407300 	call	40730 <__sprint_r>
   41e4c:	103c061e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41e50:	dc800e17 	ldw	r18,56(sp)
   41e54:	dc400d17 	ldw	r17,52(sp)
   41e58:	d8c01904 	addi	r3,sp,100
   41e5c:	003fee06 	br	41e18 <___vfprintf_internal_r+0x1690>
   41e60:	3c000017 	ldw	r16,0(r7)
   41e64:	0023883a 	mov	r17,zero
   41e68:	39c00104 	addi	r7,r7,4
   41e6c:	d9c14015 	stw	r7,1280(sp)
   41e70:	003e9206 	br	418bc <___vfprintf_internal_r+0x1134>
   41e74:	d9401904 	addi	r5,sp,100
   41e78:	dd000f04 	addi	r20,sp,60
   41e7c:	d9414115 	stw	r5,1284(sp)
   41e80:	d9814417 	ldw	r6,1296(sp)
   41e84:	880a973a 	slli	r5,r17,28
   41e88:	8004d13a 	srli	r2,r16,4
   41e8c:	810003cc 	andi	r4,r16,15
   41e90:	3109883a 	add	r4,r6,r4
   41e94:	2884b03a 	or	r2,r5,r2
   41e98:	21400003 	ldbu	r5,0(r4)
   41e9c:	d9014117 	ldw	r4,1284(sp)
   41ea0:	8806d13a 	srli	r3,r17,4
   41ea4:	1021883a 	mov	r16,r2
   41ea8:	213fffc4 	addi	r4,r4,-1
   41eac:	d9014115 	stw	r4,1284(sp)
   41eb0:	d9814117 	ldw	r6,1284(sp)
   41eb4:	10c8b03a 	or	r4,r2,r3
   41eb8:	1823883a 	mov	r17,r3
   41ebc:	31400005 	stb	r5,0(r6)
   41ec0:	203fef1e 	bne	r4,zero,41e80 <___vfprintf_internal_r+0x16f8>
   41ec4:	003ccb06 	br	411f4 <___vfprintf_internal_r+0xa6c>
   41ec8:	00800c04 	movi	r2,48
   41ecc:	d98018c4 	addi	r6,sp,99
   41ed0:	dd000f04 	addi	r20,sp,60
   41ed4:	d88018c5 	stb	r2,99(sp)
   41ed8:	d9814115 	stw	r6,1284(sp)
   41edc:	003cc506 	br	411f4 <___vfprintf_internal_r+0xa6c>
   41ee0:	dc400d17 	ldw	r17,52(sp)
   41ee4:	070001b4 	movhi	fp,6
   41ee8:	e7003884 	addi	fp,fp,226
   41eec:	003bc706 	br	40e0c <___vfprintf_internal_r+0x684>
   41ef0:	d9414c17 	ldw	r5,1328(sp)
   41ef4:	2880040c 	andi	r2,r5,16
   41ef8:	10007c26 	beq	r2,zero,420ec <___vfprintf_internal_r+0x1964>
   41efc:	38800017 	ldw	r2,0(r7)
   41f00:	39c00104 	addi	r7,r7,4
   41f04:	d9c14015 	stw	r7,1280(sp)
   41f08:	d9814b17 	ldw	r6,1324(sp)
   41f0c:	d9c14017 	ldw	r7,1280(sp)
   41f10:	11800015 	stw	r6,0(r2)
   41f14:	003a7806 	br	408f8 <___vfprintf_internal_r+0x170>
   41f18:	d9014f17 	ldw	r4,1340(sp)
   41f1c:	b00b883a 	mov	r5,r22
   41f20:	d9800c04 	addi	r6,sp,48
   41f24:	00407300 	call	40730 <__sprint_r>
   41f28:	103bcf1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41f2c:	dc800e17 	ldw	r18,56(sp)
   41f30:	dc400d17 	ldw	r17,52(sp)
   41f34:	d8c01904 	addi	r3,sp,100
   41f38:	d9014717 	ldw	r4,1308(sp)
   41f3c:	d9414117 	ldw	r5,1284(sp)
   41f40:	8c400044 	addi	r17,r17,1
   41f44:	9125883a 	add	r18,r18,r4
   41f48:	008001c4 	movi	r2,7
   41f4c:	19400015 	stw	r5,0(r3)
   41f50:	19000115 	stw	r4,4(r3)
   41f54:	dc800e15 	stw	r18,56(sp)
   41f58:	dc400d15 	stw	r17,52(sp)
   41f5c:	147cee16 	blt	r2,r17,41318 <___vfprintf_internal_r+0xb90>
   41f60:	18c00204 	addi	r3,r3,8
   41f64:	003b8606 	br	40d80 <___vfprintf_internal_r+0x5f8>
   41f68:	38c00017 	ldw	r3,0(r7)
   41f6c:	39000204 	addi	r4,r7,8
   41f70:	d9014015 	stw	r4,1280(sp)
   41f74:	d8c14215 	stw	r3,1288(sp)
   41f78:	39c00117 	ldw	r7,4(r7)
   41f7c:	d9c14315 	stw	r7,1292(sp)
   41f80:	003e2006 	br	41804 <___vfprintf_internal_r+0x107c>
   41f84:	0005883a 	mov	r2,zero
   41f88:	1409c83a 	sub	r4,r2,r16
   41f8c:	1105803a 	cmpltu	r2,r2,r4
   41f90:	044bc83a 	sub	r5,zero,r17
   41f94:	2885c83a 	sub	r2,r5,r2
   41f98:	2021883a 	mov	r16,r4
   41f9c:	1023883a 	mov	r17,r2
   41fa0:	01000044 	movi	r4,1
   41fa4:	00800b44 	movi	r2,45
   41fa8:	d8800405 	stb	r2,16(sp)
   41fac:	003c8406 	br	411c0 <___vfprintf_internal_r+0xa38>
   41fb0:	d9014f17 	ldw	r4,1340(sp)
   41fb4:	b00b883a 	mov	r5,r22
   41fb8:	d9800c04 	addi	r6,sp,48
   41fbc:	00407300 	call	40730 <__sprint_r>
   41fc0:	103ba91e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41fc4:	dc800e17 	ldw	r18,56(sp)
   41fc8:	dc400d17 	ldw	r17,52(sp)
   41fcc:	d9000517 	ldw	r4,20(sp)
   41fd0:	d9401904 	addi	r5,sp,100
   41fd4:	003da706 	br	41674 <___vfprintf_internal_r+0xeec>
   41fd8:	d9014f17 	ldw	r4,1340(sp)
   41fdc:	b00b883a 	mov	r5,r22
   41fe0:	d9800c04 	addi	r6,sp,48
   41fe4:	00407300 	call	40730 <__sprint_r>
   41fe8:	103b9f1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   41fec:	dc800e17 	ldw	r18,56(sp)
   41ff0:	dc400d17 	ldw	r17,52(sp)
   41ff4:	d9000517 	ldw	r4,20(sp)
   41ff8:	d8c01904 	addi	r3,sp,100
   41ffc:	003d9106 	br	41644 <___vfprintf_internal_r+0xebc>
   42000:	070001b4 	movhi	fp,6
   42004:	e7003484 	addi	fp,fp,210
   42008:	9425883a 	add	r18,r18,r16
   4200c:	8c400044 	addi	r17,r17,1
   42010:	008001c4 	movi	r2,7
   42014:	1f000015 	stw	fp,0(r3)
   42018:	1c000115 	stw	r16,4(r3)
   4201c:	dc800e15 	stw	r18,56(sp)
   42020:	dc400d15 	stw	r17,52(sp)
   42024:	147fbc16 	blt	r2,r17,41f18 <___vfprintf_internal_r+0x1790>
   42028:	18c00204 	addi	r3,r3,8
   4202c:	003fc206 	br	41f38 <___vfprintf_internal_r+0x17b0>
   42030:	d9014f17 	ldw	r4,1340(sp)
   42034:	b00b883a 	mov	r5,r22
   42038:	d9800c04 	addi	r6,sp,48
   4203c:	00407300 	call	40730 <__sprint_r>
   42040:	103b891e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   42044:	dc800e17 	ldw	r18,56(sp)
   42048:	d9000517 	ldw	r4,20(sp)
   4204c:	d8c01904 	addi	r3,sp,100
   42050:	003d0206 	br	4145c <___vfprintf_internal_r+0xcd4>
   42054:	070001b4 	movhi	fp,6
   42058:	e7003484 	addi	fp,fp,210
   4205c:	003be406 	br	40ff0 <___vfprintf_internal_r+0x868>
   42060:	008001b4 	movhi	r2,6
   42064:	10802304 	addi	r2,r2,140
   42068:	d8814115 	stw	r2,1284(sp)
   4206c:	003df506 	br	41844 <___vfprintf_internal_r+0x10bc>
   42070:	d9014217 	ldw	r4,1288(sp)
   42074:	d9414317 	ldw	r5,1292(sp)
   42078:	00471680 	call	47168 <__isnand>
   4207c:	10003926 	beq	r2,zero,42164 <___vfprintf_internal_r+0x19dc>
   42080:	d9414d17 	ldw	r5,1332(sp)
   42084:	008011c4 	movi	r2,71
   42088:	1140ce16 	blt	r2,r5,423c4 <___vfprintf_internal_r+0x1c3c>
   4208c:	018001b4 	movhi	r6,6
   42090:	31802404 	addi	r6,r6,144
   42094:	d9814115 	stw	r6,1284(sp)
   42098:	003dea06 	br	41844 <___vfprintf_internal_r+0x10bc>
   4209c:	d9014c17 	ldw	r4,1328(sp)
   420a0:	bdc00044 	addi	r23,r23,1
   420a4:	b8c00007 	ldb	r3,0(r23)
   420a8:	21000814 	ori	r4,r4,32
   420ac:	d9014c15 	stw	r4,1328(sp)
   420b0:	003a3406 	br	40984 <___vfprintf_internal_r+0x1fc>
   420b4:	dcc14515 	stw	r19,1300(sp)
   420b8:	98011016 	blt	r19,zero,424fc <___vfprintf_internal_r+0x1d74>
   420bc:	980f883a 	mov	r7,r19
   420c0:	d8014615 	stw	zero,1304(sp)
   420c4:	003c5206 	br	41210 <___vfprintf_internal_r+0xa88>
   420c8:	d9014f17 	ldw	r4,1340(sp)
   420cc:	b00b883a 	mov	r5,r22
   420d0:	d9800c04 	addi	r6,sp,48
   420d4:	00407300 	call	40730 <__sprint_r>
   420d8:	103b631e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   420dc:	dc800e17 	ldw	r18,56(sp)
   420e0:	d9000517 	ldw	r4,20(sp)
   420e4:	d8c01904 	addi	r3,sp,100
   420e8:	003f2e06 	br	41da4 <___vfprintf_internal_r+0x161c>
   420ec:	d8c14c17 	ldw	r3,1328(sp)
   420f0:	1880100c 	andi	r2,r3,64
   420f4:	1000a026 	beq	r2,zero,42378 <___vfprintf_internal_r+0x1bf0>
   420f8:	38800017 	ldw	r2,0(r7)
   420fc:	39c00104 	addi	r7,r7,4
   42100:	d9c14015 	stw	r7,1280(sp)
   42104:	d9014b17 	ldw	r4,1324(sp)
   42108:	d9c14017 	ldw	r7,1280(sp)
   4210c:	1100000d 	sth	r4,0(r2)
   42110:	0039f906 	br	408f8 <___vfprintf_internal_r+0x170>
   42114:	d9014f17 	ldw	r4,1340(sp)
   42118:	b00b883a 	mov	r5,r22
   4211c:	d9800c04 	addi	r6,sp,48
   42120:	00407300 	call	40730 <__sprint_r>
   42124:	103b501e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   42128:	dc800e17 	ldw	r18,56(sp)
   4212c:	dc400d17 	ldw	r17,52(sp)
   42130:	d9000517 	ldw	r4,20(sp)
   42134:	d8c01904 	addi	r3,sp,100
   42138:	003f2d06 	br	41df0 <___vfprintf_internal_r+0x1668>
   4213c:	00800184 	movi	r2,6
   42140:	14c09a36 	bltu	r2,r19,423ac <___vfprintf_internal_r+0x1c24>
   42144:	dcc14515 	stw	r19,1300(sp)
   42148:	9800010e 	bge	r19,zero,42150 <___vfprintf_internal_r+0x19c8>
   4214c:	d8014515 	stw	zero,1300(sp)
   42150:	008001b4 	movhi	r2,6
   42154:	10802604 	addi	r2,r2,152
   42158:	980f883a 	mov	r7,r19
   4215c:	d8814115 	stw	r2,1284(sp)
   42160:	003a7806 	br	40b44 <___vfprintf_internal_r+0x3bc>
   42164:	00bfffc4 	movi	r2,-1
   42168:	9880e226 	beq	r19,r2,424f4 <___vfprintf_internal_r+0x1d6c>
   4216c:	d9414d17 	ldw	r5,1332(sp)
   42170:	008019c4 	movi	r2,103
   42174:	2880dc26 	beq	r5,r2,424e8 <___vfprintf_internal_r+0x1d60>
   42178:	008011c4 	movi	r2,71
   4217c:	2880da26 	beq	r5,r2,424e8 <___vfprintf_internal_r+0x1d60>
   42180:	d9414c17 	ldw	r5,1328(sp)
   42184:	d9014317 	ldw	r4,1292(sp)
   42188:	d9814217 	ldw	r6,1288(sp)
   4218c:	29404014 	ori	r5,r5,256
   42190:	d9414c15 	stw	r5,1328(sp)
   42194:	2000cc16 	blt	r4,zero,424c8 <___vfprintf_internal_r+0x1d40>
   42198:	3021883a 	mov	r16,r6
   4219c:	2023883a 	mov	r17,r4
   421a0:	0039883a 	mov	fp,zero
   421a4:	d9414d17 	ldw	r5,1332(sp)
   421a8:	00801984 	movi	r2,102
   421ac:	2880b726 	beq	r5,r2,4248c <___vfprintf_internal_r+0x1d04>
   421b0:	00801184 	movi	r2,70
   421b4:	2880b526 	beq	r5,r2,4248c <___vfprintf_internal_r+0x1d04>
   421b8:	00801944 	movi	r2,101
   421bc:	2880c826 	beq	r5,r2,424e0 <___vfprintf_internal_r+0x1d58>
   421c0:	00801144 	movi	r2,69
   421c4:	2880c626 	beq	r5,r2,424e0 <___vfprintf_internal_r+0x1d58>
   421c8:	9829883a 	mov	r20,r19
   421cc:	d9014f17 	ldw	r4,1340(sp)
   421d0:	d8800504 	addi	r2,sp,20
   421d4:	880d883a 	mov	r6,r17
   421d8:	d8800115 	stw	r2,4(sp)
   421dc:	d8c00604 	addi	r3,sp,24
   421e0:	d8800704 	addi	r2,sp,28
   421e4:	800b883a 	mov	r5,r16
   421e8:	01c00084 	movi	r7,2
   421ec:	d8c00215 	stw	r3,8(sp)
   421f0:	d8800315 	stw	r2,12(sp)
   421f4:	dd000015 	stw	r20,0(sp)
   421f8:	00429ac0 	call	429ac <_dtoa_r>
   421fc:	d9814d17 	ldw	r6,1332(sp)
   42200:	d8814115 	stw	r2,1284(sp)
   42204:	008019c4 	movi	r2,103
   42208:	30809526 	beq	r6,r2,42460 <___vfprintf_internal_r+0x1cd8>
   4220c:	d8c14d17 	ldw	r3,1332(sp)
   42210:	008011c4 	movi	r2,71
   42214:	18809226 	beq	r3,r2,42460 <___vfprintf_internal_r+0x1cd8>
   42218:	d9414117 	ldw	r5,1284(sp)
   4221c:	d9814d17 	ldw	r6,1332(sp)
   42220:	00801984 	movi	r2,102
   42224:	2d25883a 	add	r18,r5,r20
   42228:	30808626 	beq	r6,r2,42444 <___vfprintf_internal_r+0x1cbc>
   4222c:	00801184 	movi	r2,70
   42230:	30808426 	beq	r6,r2,42444 <___vfprintf_internal_r+0x1cbc>
   42234:	000d883a 	mov	r6,zero
   42238:	000f883a 	mov	r7,zero
   4223c:	880b883a 	mov	r5,r17
   42240:	8009883a 	mov	r4,r16
   42244:	0048f500 	call	48f50 <__eqdf2>
   42248:	1000751e 	bne	r2,zero,42420 <___vfprintf_internal_r+0x1c98>
   4224c:	9005883a 	mov	r2,r18
   42250:	dc800715 	stw	r18,28(sp)
   42254:	d9014117 	ldw	r4,1284(sp)
   42258:	d9414d17 	ldw	r5,1332(sp)
   4225c:	00c019c4 	movi	r3,103
   42260:	1125c83a 	sub	r18,r2,r4
   42264:	28c06826 	beq	r5,r3,42408 <___vfprintf_internal_r+0x1c80>
   42268:	008011c4 	movi	r2,71
   4226c:	28806626 	beq	r5,r2,42408 <___vfprintf_internal_r+0x1c80>
   42270:	d9000517 	ldw	r4,20(sp)
   42274:	d8c14d17 	ldw	r3,1332(sp)
   42278:	00801944 	movi	r2,101
   4227c:	10c05516 	blt	r2,r3,423d4 <___vfprintf_internal_r+0x1c4c>
   42280:	213fffc4 	addi	r4,r4,-1
   42284:	d9000515 	stw	r4,20(sp)
   42288:	d8c00805 	stb	r3,32(sp)
   4228c:	2021883a 	mov	r16,r4
   42290:	2000c116 	blt	r4,zero,42598 <___vfprintf_internal_r+0x1e10>
   42294:	00800ac4 	movi	r2,43
   42298:	d8800845 	stb	r2,33(sp)
   4229c:	00800244 	movi	r2,9
   422a0:	1400af0e 	bge	r2,r16,42560 <___vfprintf_internal_r+0x1dd8>
   422a4:	1027883a 	mov	r19,r2
   422a8:	dc400b84 	addi	r17,sp,46
   422ac:	8009883a 	mov	r4,r16
   422b0:	01400284 	movi	r5,10
   422b4:	00496380 	call	49638 <__modsi3>
   422b8:	10800c04 	addi	r2,r2,48
   422bc:	8c7fffc4 	addi	r17,r17,-1
   422c0:	8009883a 	mov	r4,r16
   422c4:	01400284 	movi	r5,10
   422c8:	88800005 	stb	r2,0(r17)
   422cc:	00495d80 	call	495d8 <__divsi3>
   422d0:	1021883a 	mov	r16,r2
   422d4:	98bff516 	blt	r19,r2,422ac <___vfprintf_internal_r+0x1b24>
   422d8:	10c00c04 	addi	r3,r2,48
   422dc:	d88009c4 	addi	r2,sp,39
   422e0:	108001c4 	addi	r2,r2,7
   422e4:	897fffc4 	addi	r5,r17,-1
   422e8:	88ffffc5 	stb	r3,-1(r17)
   422ec:	2880a72e 	bgeu	r5,r2,4258c <___vfprintf_internal_r+0x1e04>
   422f0:	1009883a 	mov	r4,r2
   422f4:	d9800804 	addi	r6,sp,32
   422f8:	d8c00884 	addi	r3,sp,34
   422fc:	28800003 	ldbu	r2,0(r5)
   42300:	29400044 	addi	r5,r5,1
   42304:	18800005 	stb	r2,0(r3)
   42308:	18c00044 	addi	r3,r3,1
   4230c:	293ffb36 	bltu	r5,r4,422fc <___vfprintf_internal_r+0x1b74>
   42310:	1987c83a 	sub	r3,r3,r6
   42314:	00800044 	movi	r2,1
   42318:	d8c14815 	stw	r3,1312(sp)
   4231c:	90cf883a 	add	r7,r18,r3
   42320:	1480960e 	bge	r2,r18,4257c <___vfprintf_internal_r+0x1df4>
   42324:	39c00044 	addi	r7,r7,1
   42328:	d9c14515 	stw	r7,1300(sp)
   4232c:	38003416 	blt	r7,zero,42400 <___vfprintf_internal_r+0x1c78>
   42330:	e0803fcc 	andi	r2,fp,255
   42334:	1080201c 	xori	r2,r2,128
   42338:	10bfe004 	addi	r2,r2,-128
   4233c:	10004e26 	beq	r2,zero,42478 <___vfprintf_internal_r+0x1cf0>
   42340:	00800b44 	movi	r2,45
   42344:	dc814715 	stw	r18,1308(sp)
   42348:	d8014615 	stw	zero,1304(sp)
   4234c:	d8800405 	stb	r2,16(sp)
   42350:	003bb106 	br	41218 <___vfprintf_internal_r+0xa90>
   42354:	00800b44 	movi	r2,45
   42358:	d8800405 	stb	r2,16(sp)
   4235c:	003d3306 	br	4182c <___vfprintf_internal_r+0x10a4>
   42360:	d9014f17 	ldw	r4,1340(sp)
   42364:	b00b883a 	mov	r5,r22
   42368:	d9800c04 	addi	r6,sp,48
   4236c:	00407300 	call	40730 <__sprint_r>
   42370:	103abd1e 	bne	r2,zero,40e68 <___vfprintf_internal_r+0x6e0>
   42374:	003abb06 	br	40e64 <___vfprintf_internal_r+0x6dc>
   42378:	38800017 	ldw	r2,0(r7)
   4237c:	39c00104 	addi	r7,r7,4
   42380:	d9c14015 	stw	r7,1280(sp)
   42384:	d9414b17 	ldw	r5,1324(sp)
   42388:	d9c14017 	ldw	r7,1280(sp)
   4238c:	11400015 	stw	r5,0(r2)
   42390:	00395906 	br	408f8 <___vfprintf_internal_r+0x170>
   42394:	980f883a 	mov	r7,r19
   42398:	dcc14515 	stw	r19,1300(sp)
   4239c:	d8014615 	stw	zero,1304(sp)
   423a0:	003b9b06 	br	41210 <___vfprintf_internal_r+0xa88>
   423a4:	0027883a 	mov	r19,zero
   423a8:	00397806 	br	4098c <___vfprintf_internal_r+0x204>
   423ac:	00c001b4 	movhi	r3,6
   423b0:	18c02604 	addi	r3,r3,152
   423b4:	100f883a 	mov	r7,r2
   423b8:	d8814515 	stw	r2,1300(sp)
   423bc:	d8c14115 	stw	r3,1284(sp)
   423c0:	0039e006 	br	40b44 <___vfprintf_internal_r+0x3bc>
   423c4:	008001b4 	movhi	r2,6
   423c8:	10802504 	addi	r2,r2,148
   423cc:	d8814115 	stw	r2,1284(sp)
   423d0:	003d1c06 	br	41844 <___vfprintf_internal_r+0x10bc>
   423d4:	d9414d17 	ldw	r5,1332(sp)
   423d8:	00801984 	movi	r2,102
   423dc:	28804926 	beq	r5,r2,42504 <___vfprintf_internal_r+0x1d7c>
   423e0:	200f883a 	mov	r7,r4
   423e4:	24805716 	blt	r4,r18,42544 <___vfprintf_internal_r+0x1dbc>
   423e8:	d9414c17 	ldw	r5,1328(sp)
   423ec:	2880004c 	andi	r2,r5,1
   423f0:	10000126 	beq	r2,zero,423f8 <___vfprintf_internal_r+0x1c70>
   423f4:	21c00044 	addi	r7,r4,1
   423f8:	d9c14515 	stw	r7,1300(sp)
   423fc:	383fcc0e 	bge	r7,zero,42330 <___vfprintf_internal_r+0x1ba8>
   42400:	d8014515 	stw	zero,1300(sp)
   42404:	003fca06 	br	42330 <___vfprintf_internal_r+0x1ba8>
   42408:	d9000517 	ldw	r4,20(sp)
   4240c:	00bfff04 	movi	r2,-4
   42410:	1100480e 	bge	r2,r4,42534 <___vfprintf_internal_r+0x1dac>
   42414:	99004716 	blt	r19,r4,42534 <___vfprintf_internal_r+0x1dac>
   42418:	d8c14d15 	stw	r3,1332(sp)
   4241c:	003ff006 	br	423e0 <___vfprintf_internal_r+0x1c58>
   42420:	d8800717 	ldw	r2,28(sp)
   42424:	14bf8b2e 	bgeu	r2,r18,42254 <___vfprintf_internal_r+0x1acc>
   42428:	9007883a 	mov	r3,r18
   4242c:	01000c04 	movi	r4,48
   42430:	11000005 	stb	r4,0(r2)
   42434:	10800044 	addi	r2,r2,1
   42438:	d8800715 	stw	r2,28(sp)
   4243c:	18bffc1e 	bne	r3,r2,42430 <___vfprintf_internal_r+0x1ca8>
   42440:	003f8406 	br	42254 <___vfprintf_internal_r+0x1acc>
   42444:	d8814117 	ldw	r2,1284(sp)
   42448:	10c00007 	ldb	r3,0(r2)
   4244c:	00800c04 	movi	r2,48
   42450:	18805b26 	beq	r3,r2,425c0 <___vfprintf_internal_r+0x1e38>
   42454:	d9000517 	ldw	r4,20(sp)
   42458:	9125883a 	add	r18,r18,r4
   4245c:	003f7506 	br	42234 <___vfprintf_internal_r+0x1aac>
   42460:	d9014c17 	ldw	r4,1328(sp)
   42464:	2080004c 	andi	r2,r4,1
   42468:	1005003a 	cmpeq	r2,r2,zero
   4246c:	103f6a26 	beq	r2,zero,42218 <___vfprintf_internal_r+0x1a90>
   42470:	d8800717 	ldw	r2,28(sp)
   42474:	003f7706 	br	42254 <___vfprintf_internal_r+0x1acc>
   42478:	d9c14515 	stw	r7,1300(sp)
   4247c:	38004d16 	blt	r7,zero,425b4 <___vfprintf_internal_r+0x1e2c>
   42480:	dc814715 	stw	r18,1308(sp)
   42484:	d8014615 	stw	zero,1304(sp)
   42488:	003b6106 	br	41210 <___vfprintf_internal_r+0xa88>
   4248c:	d9014f17 	ldw	r4,1340(sp)
   42490:	d8800504 	addi	r2,sp,20
   42494:	d8800115 	stw	r2,4(sp)
   42498:	d8c00604 	addi	r3,sp,24
   4249c:	d8800704 	addi	r2,sp,28
   424a0:	800b883a 	mov	r5,r16
   424a4:	880d883a 	mov	r6,r17
   424a8:	01c000c4 	movi	r7,3
   424ac:	d8c00215 	stw	r3,8(sp)
   424b0:	d8800315 	stw	r2,12(sp)
   424b4:	dcc00015 	stw	r19,0(sp)
   424b8:	9829883a 	mov	r20,r19
   424bc:	00429ac0 	call	429ac <_dtoa_r>
   424c0:	d8814115 	stw	r2,1284(sp)
   424c4:	003f5106 	br	4220c <___vfprintf_internal_r+0x1a84>
   424c8:	d8c14217 	ldw	r3,1288(sp)
   424cc:	d9014317 	ldw	r4,1292(sp)
   424d0:	07000b44 	movi	fp,45
   424d4:	1821883a 	mov	r16,r3
   424d8:	2460003c 	xorhi	r17,r4,32768
   424dc:	003f3106 	br	421a4 <___vfprintf_internal_r+0x1a1c>
   424e0:	9d000044 	addi	r20,r19,1
   424e4:	003f3906 	br	421cc <___vfprintf_internal_r+0x1a44>
   424e8:	983f251e 	bne	r19,zero,42180 <___vfprintf_internal_r+0x19f8>
   424ec:	04c00044 	movi	r19,1
   424f0:	003f2306 	br	42180 <___vfprintf_internal_r+0x19f8>
   424f4:	04c00184 	movi	r19,6
   424f8:	003f2106 	br	42180 <___vfprintf_internal_r+0x19f8>
   424fc:	d8014515 	stw	zero,1300(sp)
   42500:	003eee06 	br	420bc <___vfprintf_internal_r+0x1934>
   42504:	200f883a 	mov	r7,r4
   42508:	0100370e 	bge	zero,r4,425e8 <___vfprintf_internal_r+0x1e60>
   4250c:	9800031e 	bne	r19,zero,4251c <___vfprintf_internal_r+0x1d94>
   42510:	d9814c17 	ldw	r6,1328(sp)
   42514:	3080004c 	andi	r2,r6,1
   42518:	103fb726 	beq	r2,zero,423f8 <___vfprintf_internal_r+0x1c70>
   4251c:	20800044 	addi	r2,r4,1
   42520:	98a7883a 	add	r19,r19,r2
   42524:	dcc14515 	stw	r19,1300(sp)
   42528:	980f883a 	mov	r7,r19
   4252c:	983f800e 	bge	r19,zero,42330 <___vfprintf_internal_r+0x1ba8>
   42530:	003fb306 	br	42400 <___vfprintf_internal_r+0x1c78>
   42534:	d9814d17 	ldw	r6,1332(sp)
   42538:	31bfff84 	addi	r6,r6,-2
   4253c:	d9814d15 	stw	r6,1332(sp)
   42540:	003f4c06 	br	42274 <___vfprintf_internal_r+0x1aec>
   42544:	0100180e 	bge	zero,r4,425a8 <___vfprintf_internal_r+0x1e20>
   42548:	00800044 	movi	r2,1
   4254c:	1485883a 	add	r2,r2,r18
   42550:	d8814515 	stw	r2,1300(sp)
   42554:	100f883a 	mov	r7,r2
   42558:	103f750e 	bge	r2,zero,42330 <___vfprintf_internal_r+0x1ba8>
   4255c:	003fa806 	br	42400 <___vfprintf_internal_r+0x1c78>
   42560:	80c00c04 	addi	r3,r16,48
   42564:	00800c04 	movi	r2,48
   42568:	d8c008c5 	stb	r3,35(sp)
   4256c:	d9800804 	addi	r6,sp,32
   42570:	d8c00904 	addi	r3,sp,36
   42574:	d8800885 	stb	r2,34(sp)
   42578:	003f6506 	br	42310 <___vfprintf_internal_r+0x1b88>
   4257c:	d9014c17 	ldw	r4,1328(sp)
   42580:	2084703a 	and	r2,r4,r2
   42584:	103f9c26 	beq	r2,zero,423f8 <___vfprintf_internal_r+0x1c70>
   42588:	003f6606 	br	42324 <___vfprintf_internal_r+0x1b9c>
   4258c:	d9800804 	addi	r6,sp,32
   42590:	d8c00884 	addi	r3,sp,34
   42594:	003f5e06 	br	42310 <___vfprintf_internal_r+0x1b88>
   42598:	00800b44 	movi	r2,45
   4259c:	0121c83a 	sub	r16,zero,r4
   425a0:	d8800845 	stb	r2,33(sp)
   425a4:	003f3d06 	br	4229c <___vfprintf_internal_r+0x1b14>
   425a8:	00800084 	movi	r2,2
   425ac:	1105c83a 	sub	r2,r2,r4
   425b0:	003fe606 	br	4254c <___vfprintf_internal_r+0x1dc4>
   425b4:	d8014515 	stw	zero,1300(sp)
   425b8:	dc814715 	stw	r18,1308(sp)
   425bc:	003fb106 	br	42484 <___vfprintf_internal_r+0x1cfc>
   425c0:	000d883a 	mov	r6,zero
   425c4:	000f883a 	mov	r7,zero
   425c8:	8009883a 	mov	r4,r16
   425cc:	880b883a 	mov	r5,r17
   425d0:	0048fd80 	call	48fd8 <__nedf2>
   425d4:	103f9f26 	beq	r2,zero,42454 <___vfprintf_internal_r+0x1ccc>
   425d8:	00800044 	movi	r2,1
   425dc:	1509c83a 	sub	r4,r2,r20
   425e0:	d9000515 	stw	r4,20(sp)
   425e4:	003f9b06 	br	42454 <___vfprintf_internal_r+0x1ccc>
   425e8:	98000d1e 	bne	r19,zero,42620 <___vfprintf_internal_r+0x1e98>
   425ec:	d8c14c17 	ldw	r3,1328(sp)
   425f0:	1880004c 	andi	r2,r3,1
   425f4:	10000a1e 	bne	r2,zero,42620 <___vfprintf_internal_r+0x1e98>
   425f8:	01000044 	movi	r4,1
   425fc:	200f883a 	mov	r7,r4
   42600:	d9014515 	stw	r4,1300(sp)
   42604:	003f4a06 	br	42330 <___vfprintf_internal_r+0x1ba8>
   42608:	3cc00017 	ldw	r19,0(r7)
   4260c:	39c00104 	addi	r7,r7,4
   42610:	983d0e0e 	bge	r19,zero,41a4c <___vfprintf_internal_r+0x12c4>
   42614:	b8c00007 	ldb	r3,0(r23)
   42618:	04ffffc4 	movi	r19,-1
   4261c:	0038d906 	br	40984 <___vfprintf_internal_r+0x1fc>
   42620:	9cc00084 	addi	r19,r19,2
   42624:	dcc14515 	stw	r19,1300(sp)
   42628:	980f883a 	mov	r7,r19
   4262c:	983f400e 	bge	r19,zero,42330 <___vfprintf_internal_r+0x1ba8>
   42630:	003f7306 	br	42400 <___vfprintf_internal_r+0x1c78>

00042634 <__vfprintf_internal>:
   42634:	008001b4 	movhi	r2,6
   42638:	10877404 	addi	r2,r2,7632
   4263c:	2013883a 	mov	r9,r4
   42640:	11000017 	ldw	r4,0(r2)
   42644:	2805883a 	mov	r2,r5
   42648:	300f883a 	mov	r7,r6
   4264c:	480b883a 	mov	r5,r9
   42650:	100d883a 	mov	r6,r2
   42654:	00407881 	jmpi	40788 <___vfprintf_internal_r>

00042658 <__swsetup_r>:
   42658:	008001b4 	movhi	r2,6
   4265c:	10877404 	addi	r2,r2,7632
   42660:	10c00017 	ldw	r3,0(r2)
   42664:	defffd04 	addi	sp,sp,-12
   42668:	dc400115 	stw	r17,4(sp)
   4266c:	dc000015 	stw	r16,0(sp)
   42670:	dfc00215 	stw	ra,8(sp)
   42674:	2023883a 	mov	r17,r4
   42678:	2821883a 	mov	r16,r5
   4267c:	18000226 	beq	r3,zero,42688 <__swsetup_r+0x30>
   42680:	18800e17 	ldw	r2,56(r3)
   42684:	10001f26 	beq	r2,zero,42704 <__swsetup_r+0xac>
   42688:	8100030b 	ldhu	r4,12(r16)
   4268c:	2080020c 	andi	r2,r4,8
   42690:	10002826 	beq	r2,zero,42734 <__swsetup_r+0xdc>
   42694:	81400417 	ldw	r5,16(r16)
   42698:	28001d26 	beq	r5,zero,42710 <__swsetup_r+0xb8>
   4269c:	2080004c 	andi	r2,r4,1
   426a0:	1005003a 	cmpeq	r2,r2,zero
   426a4:	10000b26 	beq	r2,zero,426d4 <__swsetup_r+0x7c>
   426a8:	2080008c 	andi	r2,r4,2
   426ac:	10001226 	beq	r2,zero,426f8 <__swsetup_r+0xa0>
   426b0:	0005883a 	mov	r2,zero
   426b4:	80800215 	stw	r2,8(r16)
   426b8:	28000b26 	beq	r5,zero,426e8 <__swsetup_r+0x90>
   426bc:	0005883a 	mov	r2,zero
   426c0:	dfc00217 	ldw	ra,8(sp)
   426c4:	dc400117 	ldw	r17,4(sp)
   426c8:	dc000017 	ldw	r16,0(sp)
   426cc:	dec00304 	addi	sp,sp,12
   426d0:	f800283a 	ret
   426d4:	80800517 	ldw	r2,20(r16)
   426d8:	80000215 	stw	zero,8(r16)
   426dc:	0085c83a 	sub	r2,zero,r2
   426e0:	80800615 	stw	r2,24(r16)
   426e4:	283ff51e 	bne	r5,zero,426bc <__swsetup_r+0x64>
   426e8:	2080200c 	andi	r2,r4,128
   426ec:	103ff326 	beq	r2,zero,426bc <__swsetup_r+0x64>
   426f0:	00bfffc4 	movi	r2,-1
   426f4:	003ff206 	br	426c0 <__swsetup_r+0x68>
   426f8:	80800517 	ldw	r2,20(r16)
   426fc:	80800215 	stw	r2,8(r16)
   42700:	003fed06 	br	426b8 <__swsetup_r+0x60>
   42704:	1809883a 	mov	r4,r3
   42708:	00441f80 	call	441f8 <__sinit>
   4270c:	003fde06 	br	42688 <__swsetup_r+0x30>
   42710:	20c0a00c 	andi	r3,r4,640
   42714:	00808004 	movi	r2,512
   42718:	18bfe026 	beq	r3,r2,4269c <__swsetup_r+0x44>
   4271c:	8809883a 	mov	r4,r17
   42720:	800b883a 	mov	r5,r16
   42724:	0044f700 	call	44f70 <__smakebuf_r>
   42728:	8100030b 	ldhu	r4,12(r16)
   4272c:	81400417 	ldw	r5,16(r16)
   42730:	003fda06 	br	4269c <__swsetup_r+0x44>
   42734:	2080040c 	andi	r2,r4,16
   42738:	103fed26 	beq	r2,zero,426f0 <__swsetup_r+0x98>
   4273c:	2080010c 	andi	r2,r4,4
   42740:	10001226 	beq	r2,zero,4278c <__swsetup_r+0x134>
   42744:	81400c17 	ldw	r5,48(r16)
   42748:	28000526 	beq	r5,zero,42760 <__swsetup_r+0x108>
   4274c:	80801004 	addi	r2,r16,64
   42750:	28800226 	beq	r5,r2,4275c <__swsetup_r+0x104>
   42754:	8809883a 	mov	r4,r17
   42758:	004457c0 	call	4457c <_free_r>
   4275c:	80000c15 	stw	zero,48(r16)
   42760:	8080030b 	ldhu	r2,12(r16)
   42764:	81400417 	ldw	r5,16(r16)
   42768:	80000115 	stw	zero,4(r16)
   4276c:	10bff6cc 	andi	r2,r2,65499
   42770:	8080030d 	sth	r2,12(r16)
   42774:	81400015 	stw	r5,0(r16)
   42778:	8080030b 	ldhu	r2,12(r16)
   4277c:	10800214 	ori	r2,r2,8
   42780:	113fffcc 	andi	r4,r2,65535
   42784:	8080030d 	sth	r2,12(r16)
   42788:	003fc306 	br	42698 <__swsetup_r+0x40>
   4278c:	81400417 	ldw	r5,16(r16)
   42790:	003ff906 	br	42778 <__swsetup_r+0x120>

00042794 <quorem>:
   42794:	28c00417 	ldw	r3,16(r5)
   42798:	20800417 	ldw	r2,16(r4)
   4279c:	defff604 	addi	sp,sp,-40
   427a0:	ddc00715 	stw	r23,28(sp)
   427a4:	dd400515 	stw	r21,20(sp)
   427a8:	dfc00915 	stw	ra,36(sp)
   427ac:	df000815 	stw	fp,32(sp)
   427b0:	dd800615 	stw	r22,24(sp)
   427b4:	dd000415 	stw	r20,16(sp)
   427b8:	dcc00315 	stw	r19,12(sp)
   427bc:	dc800215 	stw	r18,8(sp)
   427c0:	dc400115 	stw	r17,4(sp)
   427c4:	dc000015 	stw	r16,0(sp)
   427c8:	202f883a 	mov	r23,r4
   427cc:	282b883a 	mov	r21,r5
   427d0:	10c07416 	blt	r2,r3,429a4 <quorem+0x210>
   427d4:	1c7fffc4 	addi	r17,r3,-1
   427d8:	8c45883a 	add	r2,r17,r17
   427dc:	1085883a 	add	r2,r2,r2
   427e0:	2c000504 	addi	r16,r5,20
   427e4:	24c00504 	addi	r19,r4,20
   427e8:	14ed883a 	add	r22,r2,r19
   427ec:	80a5883a 	add	r18,r16,r2
   427f0:	b7000017 	ldw	fp,0(r22)
   427f4:	91400017 	ldw	r5,0(r18)
   427f8:	e009883a 	mov	r4,fp
   427fc:	29400044 	addi	r5,r5,1
   42800:	00496980 	call	49698 <__udivsi3>
   42804:	1029883a 	mov	r20,r2
   42808:	10003c1e 	bne	r2,zero,428fc <quorem+0x168>
   4280c:	a80b883a 	mov	r5,r21
   42810:	b809883a 	mov	r4,r23
   42814:	0045c9c0 	call	45c9c <__mcmp>
   42818:	10002b16 	blt	r2,zero,428c8 <quorem+0x134>
   4281c:	a5000044 	addi	r20,r20,1
   42820:	980f883a 	mov	r7,r19
   42824:	0011883a 	mov	r8,zero
   42828:	0009883a 	mov	r4,zero
   4282c:	81400017 	ldw	r5,0(r16)
   42830:	38c00017 	ldw	r3,0(r7)
   42834:	84000104 	addi	r16,r16,4
   42838:	28bfffcc 	andi	r2,r5,65535
   4283c:	2085883a 	add	r2,r4,r2
   42840:	11bfffcc 	andi	r6,r2,65535
   42844:	193fffcc 	andi	r4,r3,65535
   42848:	1004d43a 	srli	r2,r2,16
   4284c:	280ad43a 	srli	r5,r5,16
   42850:	2189c83a 	sub	r4,r4,r6
   42854:	2209883a 	add	r4,r4,r8
   42858:	1806d43a 	srli	r3,r3,16
   4285c:	288b883a 	add	r5,r5,r2
   42860:	200dd43a 	srai	r6,r4,16
   42864:	28bfffcc 	andi	r2,r5,65535
   42868:	1887c83a 	sub	r3,r3,r2
   4286c:	1987883a 	add	r3,r3,r6
   42870:	3900000d 	sth	r4,0(r7)
   42874:	38c0008d 	sth	r3,2(r7)
   42878:	2808d43a 	srli	r4,r5,16
   4287c:	39c00104 	addi	r7,r7,4
   42880:	1811d43a 	srai	r8,r3,16
   42884:	943fe92e 	bgeu	r18,r16,4282c <quorem+0x98>
   42888:	8c45883a 	add	r2,r17,r17
   4288c:	1085883a 	add	r2,r2,r2
   42890:	9885883a 	add	r2,r19,r2
   42894:	10c00017 	ldw	r3,0(r2)
   42898:	18000b1e 	bne	r3,zero,428c8 <quorem+0x134>
   4289c:	113fff04 	addi	r4,r2,-4
   428a0:	9900082e 	bgeu	r19,r4,428c4 <quorem+0x130>
   428a4:	10bfff17 	ldw	r2,-4(r2)
   428a8:	10000326 	beq	r2,zero,428b8 <quorem+0x124>
   428ac:	00000506 	br	428c4 <quorem+0x130>
   428b0:	20800017 	ldw	r2,0(r4)
   428b4:	1000031e 	bne	r2,zero,428c4 <quorem+0x130>
   428b8:	213fff04 	addi	r4,r4,-4
   428bc:	8c7fffc4 	addi	r17,r17,-1
   428c0:	993ffb36 	bltu	r19,r4,428b0 <quorem+0x11c>
   428c4:	bc400415 	stw	r17,16(r23)
   428c8:	a005883a 	mov	r2,r20
   428cc:	dfc00917 	ldw	ra,36(sp)
   428d0:	df000817 	ldw	fp,32(sp)
   428d4:	ddc00717 	ldw	r23,28(sp)
   428d8:	dd800617 	ldw	r22,24(sp)
   428dc:	dd400517 	ldw	r21,20(sp)
   428e0:	dd000417 	ldw	r20,16(sp)
   428e4:	dcc00317 	ldw	r19,12(sp)
   428e8:	dc800217 	ldw	r18,8(sp)
   428ec:	dc400117 	ldw	r17,4(sp)
   428f0:	dc000017 	ldw	r16,0(sp)
   428f4:	dec00a04 	addi	sp,sp,40
   428f8:	f800283a 	ret
   428fc:	980f883a 	mov	r7,r19
   42900:	8011883a 	mov	r8,r16
   42904:	0013883a 	mov	r9,zero
   42908:	000d883a 	mov	r6,zero
   4290c:	40c00017 	ldw	r3,0(r8)
   42910:	39000017 	ldw	r4,0(r7)
   42914:	42000104 	addi	r8,r8,4
   42918:	18bfffcc 	andi	r2,r3,65535
   4291c:	a085383a 	mul	r2,r20,r2
   42920:	1806d43a 	srli	r3,r3,16
   42924:	217fffcc 	andi	r5,r4,65535
   42928:	3085883a 	add	r2,r6,r2
   4292c:	11bfffcc 	andi	r6,r2,65535
   42930:	a0c7383a 	mul	r3,r20,r3
   42934:	1004d43a 	srli	r2,r2,16
   42938:	298bc83a 	sub	r5,r5,r6
   4293c:	2a4b883a 	add	r5,r5,r9
   42940:	2008d43a 	srli	r4,r4,16
   42944:	1887883a 	add	r3,r3,r2
   42948:	280dd43a 	srai	r6,r5,16
   4294c:	18bfffcc 	andi	r2,r3,65535
   42950:	2089c83a 	sub	r4,r4,r2
   42954:	2189883a 	add	r4,r4,r6
   42958:	3900008d 	sth	r4,2(r7)
   4295c:	3940000d 	sth	r5,0(r7)
   42960:	180cd43a 	srli	r6,r3,16
   42964:	39c00104 	addi	r7,r7,4
   42968:	2013d43a 	srai	r9,r4,16
   4296c:	923fe72e 	bgeu	r18,r8,4290c <quorem+0x178>
   42970:	e03fa61e 	bne	fp,zero,4280c <quorem+0x78>
   42974:	b0ffff04 	addi	r3,r22,-4
   42978:	98c0082e 	bgeu	r19,r3,4299c <quorem+0x208>
   4297c:	b0bfff17 	ldw	r2,-4(r22)
   42980:	10000326 	beq	r2,zero,42990 <quorem+0x1fc>
   42984:	00000506 	br	4299c <quorem+0x208>
   42988:	18800017 	ldw	r2,0(r3)
   4298c:	1000031e 	bne	r2,zero,4299c <quorem+0x208>
   42990:	18ffff04 	addi	r3,r3,-4
   42994:	8c7fffc4 	addi	r17,r17,-1
   42998:	98fffb36 	bltu	r19,r3,42988 <quorem+0x1f4>
   4299c:	bc400415 	stw	r17,16(r23)
   429a0:	003f9a06 	br	4280c <quorem+0x78>
   429a4:	0005883a 	mov	r2,zero
   429a8:	003fc806 	br	428cc <quorem+0x138>

000429ac <_dtoa_r>:
   429ac:	22001017 	ldw	r8,64(r4)
   429b0:	deffda04 	addi	sp,sp,-152
   429b4:	dd402115 	stw	r21,132(sp)
   429b8:	dd002015 	stw	r20,128(sp)
   429bc:	dc801e15 	stw	r18,120(sp)
   429c0:	dc401d15 	stw	r17,116(sp)
   429c4:	dfc02515 	stw	ra,148(sp)
   429c8:	df002415 	stw	fp,144(sp)
   429cc:	ddc02315 	stw	r23,140(sp)
   429d0:	dd802215 	stw	r22,136(sp)
   429d4:	dcc01f15 	stw	r19,124(sp)
   429d8:	dc001c15 	stw	r16,112(sp)
   429dc:	d9001615 	stw	r4,88(sp)
   429e0:	3023883a 	mov	r17,r6
   429e4:	2829883a 	mov	r20,r5
   429e8:	d9c01715 	stw	r7,92(sp)
   429ec:	dc802817 	ldw	r18,160(sp)
   429f0:	302b883a 	mov	r21,r6
   429f4:	40000a26 	beq	r8,zero,42a20 <_dtoa_r+0x74>
   429f8:	20801117 	ldw	r2,68(r4)
   429fc:	400b883a 	mov	r5,r8
   42a00:	40800115 	stw	r2,4(r8)
   42a04:	20c01117 	ldw	r3,68(r4)
   42a08:	00800044 	movi	r2,1
   42a0c:	10c4983a 	sll	r2,r2,r3
   42a10:	40800215 	stw	r2,8(r8)
   42a14:	0045b400 	call	45b40 <_Bfree>
   42a18:	d8c01617 	ldw	r3,88(sp)
   42a1c:	18001015 	stw	zero,64(r3)
   42a20:	8800a316 	blt	r17,zero,42cb0 <_dtoa_r+0x304>
   42a24:	90000015 	stw	zero,0(r18)
   42a28:	a8dffc2c 	andhi	r3,r21,32752
   42a2c:	009ffc34 	movhi	r2,32752
   42a30:	18809126 	beq	r3,r2,42c78 <_dtoa_r+0x2cc>
   42a34:	000d883a 	mov	r6,zero
   42a38:	000f883a 	mov	r7,zero
   42a3c:	a009883a 	mov	r4,r20
   42a40:	a80b883a 	mov	r5,r21
   42a44:	dd001215 	stw	r20,72(sp)
   42a48:	dd401315 	stw	r21,76(sp)
   42a4c:	0048fd80 	call	48fd8 <__nedf2>
   42a50:	1000171e 	bne	r2,zero,42ab0 <_dtoa_r+0x104>
   42a54:	d9802717 	ldw	r6,156(sp)
   42a58:	00800044 	movi	r2,1
   42a5c:	30800015 	stw	r2,0(r6)
   42a60:	d8802917 	ldw	r2,164(sp)
   42a64:	10029b26 	beq	r2,zero,434d4 <_dtoa_r+0xb28>
   42a68:	d9002917 	ldw	r4,164(sp)
   42a6c:	008001b4 	movhi	r2,6
   42a70:	10803444 	addi	r2,r2,209
   42a74:	10ffffc4 	addi	r3,r2,-1
   42a78:	20800015 	stw	r2,0(r4)
   42a7c:	1805883a 	mov	r2,r3
   42a80:	dfc02517 	ldw	ra,148(sp)
   42a84:	df002417 	ldw	fp,144(sp)
   42a88:	ddc02317 	ldw	r23,140(sp)
   42a8c:	dd802217 	ldw	r22,136(sp)
   42a90:	dd402117 	ldw	r21,132(sp)
   42a94:	dd002017 	ldw	r20,128(sp)
   42a98:	dcc01f17 	ldw	r19,124(sp)
   42a9c:	dc801e17 	ldw	r18,120(sp)
   42aa0:	dc401d17 	ldw	r17,116(sp)
   42aa4:	dc001c17 	ldw	r16,112(sp)
   42aa8:	dec02604 	addi	sp,sp,152
   42aac:	f800283a 	ret
   42ab0:	d9001617 	ldw	r4,88(sp)
   42ab4:	d9401217 	ldw	r5,72(sp)
   42ab8:	d8800104 	addi	r2,sp,4
   42abc:	a80d883a 	mov	r6,r21
   42ac0:	d9c00204 	addi	r7,sp,8
   42ac4:	d8800015 	stw	r2,0(sp)
   42ac8:	004617c0 	call	4617c <__d2b>
   42acc:	d8800715 	stw	r2,28(sp)
   42ad0:	a804d53a 	srli	r2,r21,20
   42ad4:	1101ffcc 	andi	r4,r2,2047
   42ad8:	20008626 	beq	r4,zero,42cf4 <_dtoa_r+0x348>
   42adc:	d8c01217 	ldw	r3,72(sp)
   42ae0:	00800434 	movhi	r2,16
   42ae4:	10bfffc4 	addi	r2,r2,-1
   42ae8:	ddc00117 	ldw	r23,4(sp)
   42aec:	a884703a 	and	r2,r21,r2
   42af0:	1811883a 	mov	r8,r3
   42af4:	124ffc34 	orhi	r9,r2,16368
   42af8:	25bf0044 	addi	r22,r4,-1023
   42afc:	d8000815 	stw	zero,32(sp)
   42b00:	0005883a 	mov	r2,zero
   42b04:	00cffe34 	movhi	r3,16376
   42b08:	480b883a 	mov	r5,r9
   42b0c:	4009883a 	mov	r4,r8
   42b10:	180f883a 	mov	r7,r3
   42b14:	100d883a 	mov	r6,r2
   42b18:	00488400 	call	48840 <__subdf3>
   42b1c:	0218dbf4 	movhi	r8,25455
   42b20:	4210d844 	addi	r8,r8,17249
   42b24:	024ff4f4 	movhi	r9,16339
   42b28:	4a61e9c4 	addi	r9,r9,-30809
   42b2c:	480f883a 	mov	r7,r9
   42b30:	400d883a 	mov	r6,r8
   42b34:	180b883a 	mov	r5,r3
   42b38:	1009883a 	mov	r4,r2
   42b3c:	00489340 	call	48934 <__muldf3>
   42b40:	0222d874 	movhi	r8,35681
   42b44:	42322cc4 	addi	r8,r8,-14157
   42b48:	024ff1f4 	movhi	r9,16327
   42b4c:	4a628a04 	addi	r9,r9,-30168
   42b50:	480f883a 	mov	r7,r9
   42b54:	400d883a 	mov	r6,r8
   42b58:	180b883a 	mov	r5,r3
   42b5c:	1009883a 	mov	r4,r2
   42b60:	00488c00 	call	488c0 <__adddf3>
   42b64:	b009883a 	mov	r4,r22
   42b68:	1021883a 	mov	r16,r2
   42b6c:	1823883a 	mov	r17,r3
   42b70:	00491f80 	call	491f8 <__floatsidf>
   42b74:	021427f4 	movhi	r8,20639
   42b78:	421e7ec4 	addi	r8,r8,31227
   42b7c:	024ff4f4 	movhi	r9,16339
   42b80:	4a5104c4 	addi	r9,r9,17427
   42b84:	480f883a 	mov	r7,r9
   42b88:	400d883a 	mov	r6,r8
   42b8c:	180b883a 	mov	r5,r3
   42b90:	1009883a 	mov	r4,r2
   42b94:	00489340 	call	48934 <__muldf3>
   42b98:	180f883a 	mov	r7,r3
   42b9c:	880b883a 	mov	r5,r17
   42ba0:	100d883a 	mov	r6,r2
   42ba4:	8009883a 	mov	r4,r16
   42ba8:	00488c00 	call	488c0 <__adddf3>
   42bac:	1009883a 	mov	r4,r2
   42bb0:	180b883a 	mov	r5,r3
   42bb4:	1021883a 	mov	r16,r2
   42bb8:	1823883a 	mov	r17,r3
   42bbc:	00492f00 	call	492f0 <__fixdfsi>
   42bc0:	000d883a 	mov	r6,zero
   42bc4:	000f883a 	mov	r7,zero
   42bc8:	8009883a 	mov	r4,r16
   42bcc:	880b883a 	mov	r5,r17
   42bd0:	d8800d15 	stw	r2,52(sp)
   42bd4:	00491700 	call	49170 <__ltdf2>
   42bd8:	10031716 	blt	r2,zero,43838 <_dtoa_r+0xe8c>
   42bdc:	d8c00d17 	ldw	r3,52(sp)
   42be0:	00800584 	movi	r2,22
   42be4:	10c1482e 	bgeu	r2,r3,43108 <_dtoa_r+0x75c>
   42be8:	01000044 	movi	r4,1
   42bec:	d9000c15 	stw	r4,48(sp)
   42bf0:	bd85c83a 	sub	r2,r23,r22
   42bf4:	11bfffc4 	addi	r6,r2,-1
   42bf8:	30030b16 	blt	r6,zero,43828 <_dtoa_r+0xe7c>
   42bfc:	d9800a15 	stw	r6,40(sp)
   42c00:	d8001115 	stw	zero,68(sp)
   42c04:	d8c00d17 	ldw	r3,52(sp)
   42c08:	1802ff16 	blt	r3,zero,43808 <_dtoa_r+0xe5c>
   42c0c:	d9000a17 	ldw	r4,40(sp)
   42c10:	d8c00915 	stw	r3,36(sp)
   42c14:	d8001015 	stw	zero,64(sp)
   42c18:	20c9883a 	add	r4,r4,r3
   42c1c:	d9000a15 	stw	r4,40(sp)
   42c20:	d9001717 	ldw	r4,92(sp)
   42c24:	00800244 	movi	r2,9
   42c28:	11004636 	bltu	r2,r4,42d44 <_dtoa_r+0x398>
   42c2c:	00800144 	movi	r2,5
   42c30:	11020416 	blt	r2,r4,43444 <_dtoa_r+0xa98>
   42c34:	04400044 	movi	r17,1
   42c38:	d8c01717 	ldw	r3,92(sp)
   42c3c:	00800144 	movi	r2,5
   42c40:	10c1ed36 	bltu	r2,r3,433f8 <_dtoa_r+0xa4c>
   42c44:	18c5883a 	add	r2,r3,r3
   42c48:	1085883a 	add	r2,r2,r2
   42c4c:	00c00134 	movhi	r3,4
   42c50:	18cb1804 	addi	r3,r3,11360
   42c54:	10c5883a 	add	r2,r2,r3
   42c58:	11000017 	ldw	r4,0(r2)
   42c5c:	2000683a 	jmp	r4
   42c60:	00042d4c 	andi	zero,zero,4277
   42c64:	00042d4c 	andi	zero,zero,4277
   42c68:	0004374c 	andi	zero,zero,4317
   42c6c:	00043724 	muli	zero,zero,4316
   42c70:	00043768 	cmpgeui	zero,zero,4317
   42c74:	00043774 	movhi	zero,4317
   42c78:	d9002717 	ldw	r4,156(sp)
   42c7c:	0089c3c4 	movi	r2,9999
   42c80:	20800015 	stw	r2,0(r4)
   42c84:	a0001026 	beq	r20,zero,42cc8 <_dtoa_r+0x31c>
   42c88:	00c001b4 	movhi	r3,6
   42c8c:	18c04004 	addi	r3,r3,256
   42c90:	d9802917 	ldw	r6,164(sp)
   42c94:	303f7926 	beq	r6,zero,42a7c <_dtoa_r+0xd0>
   42c98:	188000c7 	ldb	r2,3(r3)
   42c9c:	190000c4 	addi	r4,r3,3
   42ca0:	1000101e 	bne	r2,zero,42ce4 <_dtoa_r+0x338>
   42ca4:	d8802917 	ldw	r2,164(sp)
   42ca8:	11000015 	stw	r4,0(r2)
   42cac:	003f7306 	br	42a7c <_dtoa_r+0xd0>
   42cb0:	00a00034 	movhi	r2,32768
   42cb4:	10bfffc4 	addi	r2,r2,-1
   42cb8:	00c00044 	movi	r3,1
   42cbc:	88aa703a 	and	r21,r17,r2
   42cc0:	90c00015 	stw	r3,0(r18)
   42cc4:	003f5806 	br	42a28 <_dtoa_r+0x7c>
   42cc8:	00800434 	movhi	r2,16
   42ccc:	10bfffc4 	addi	r2,r2,-1
   42cd0:	a884703a 	and	r2,r21,r2
   42cd4:	103fec1e 	bne	r2,zero,42c88 <_dtoa_r+0x2dc>
   42cd8:	00c001b4 	movhi	r3,6
   42cdc:	18c03d04 	addi	r3,r3,244
   42ce0:	003feb06 	br	42c90 <_dtoa_r+0x2e4>
   42ce4:	d8802917 	ldw	r2,164(sp)
   42ce8:	19000204 	addi	r4,r3,8
   42cec:	11000015 	stw	r4,0(r2)
   42cf0:	003f6206 	br	42a7c <_dtoa_r+0xd0>
   42cf4:	ddc00117 	ldw	r23,4(sp)
   42cf8:	d8800217 	ldw	r2,8(sp)
   42cfc:	01000804 	movi	r4,32
   42d00:	b8c10c84 	addi	r3,r23,1074
   42d04:	18a3883a 	add	r17,r3,r2
   42d08:	2441b80e 	bge	r4,r17,433ec <_dtoa_r+0xa40>
   42d0c:	00c01004 	movi	r3,64
   42d10:	1c47c83a 	sub	r3,r3,r17
   42d14:	88bff804 	addi	r2,r17,-32
   42d18:	a8c6983a 	sll	r3,r21,r3
   42d1c:	a084d83a 	srl	r2,r20,r2
   42d20:	1888b03a 	or	r4,r3,r2
   42d24:	00493c80 	call	493c8 <__floatunsidf>
   42d28:	1011883a 	mov	r8,r2
   42d2c:	00bf8434 	movhi	r2,65040
   42d30:	01000044 	movi	r4,1
   42d34:	10d3883a 	add	r9,r2,r3
   42d38:	8dbef344 	addi	r22,r17,-1075
   42d3c:	d9000815 	stw	r4,32(sp)
   42d40:	003f6f06 	br	42b00 <_dtoa_r+0x154>
   42d44:	d8001715 	stw	zero,92(sp)
   42d48:	04400044 	movi	r17,1
   42d4c:	00bfffc4 	movi	r2,-1
   42d50:	00c00044 	movi	r3,1
   42d54:	d8800e15 	stw	r2,56(sp)
   42d58:	d8002615 	stw	zero,152(sp)
   42d5c:	d8800f15 	stw	r2,60(sp)
   42d60:	d8c00b15 	stw	r3,44(sp)
   42d64:	1021883a 	mov	r16,r2
   42d68:	d8801617 	ldw	r2,88(sp)
   42d6c:	10001115 	stw	zero,68(r2)
   42d70:	d8801617 	ldw	r2,88(sp)
   42d74:	11401117 	ldw	r5,68(r2)
   42d78:	1009883a 	mov	r4,r2
   42d7c:	00460c00 	call	460c0 <_Balloc>
   42d80:	d8c01617 	ldw	r3,88(sp)
   42d84:	d8800515 	stw	r2,20(sp)
   42d88:	18801015 	stw	r2,64(r3)
   42d8c:	00800384 	movi	r2,14
   42d90:	14006836 	bltu	r2,r16,42f34 <_dtoa_r+0x588>
   42d94:	8805003a 	cmpeq	r2,r17,zero
   42d98:	1000661e 	bne	r2,zero,42f34 <_dtoa_r+0x588>
   42d9c:	d9000d17 	ldw	r4,52(sp)
   42da0:	0102300e 	bge	zero,r4,43664 <_dtoa_r+0xcb8>
   42da4:	208003cc 	andi	r2,r4,15
   42da8:	100490fa 	slli	r2,r2,3
   42dac:	2025d13a 	srai	r18,r4,4
   42db0:	00c001b4 	movhi	r3,6
   42db4:	18c05204 	addi	r3,r3,328
   42db8:	10c5883a 	add	r2,r2,r3
   42dbc:	90c0040c 	andi	r3,r18,16
   42dc0:	14000017 	ldw	r16,0(r2)
   42dc4:	14400117 	ldw	r17,4(r2)
   42dc8:	18036a1e 	bne	r3,zero,43b74 <_dtoa_r+0x11c8>
   42dcc:	05800084 	movi	r22,2
   42dd0:	90001026 	beq	r18,zero,42e14 <_dtoa_r+0x468>
   42dd4:	04c001b4 	movhi	r19,6
   42dd8:	9cc08404 	addi	r19,r19,528
   42ddc:	9080004c 	andi	r2,r18,1
   42de0:	1005003a 	cmpeq	r2,r2,zero
   42de4:	1000081e 	bne	r2,zero,42e08 <_dtoa_r+0x45c>
   42de8:	99800017 	ldw	r6,0(r19)
   42dec:	99c00117 	ldw	r7,4(r19)
   42df0:	880b883a 	mov	r5,r17
   42df4:	8009883a 	mov	r4,r16
   42df8:	00489340 	call	48934 <__muldf3>
   42dfc:	1021883a 	mov	r16,r2
   42e00:	b5800044 	addi	r22,r22,1
   42e04:	1823883a 	mov	r17,r3
   42e08:	9025d07a 	srai	r18,r18,1
   42e0c:	9cc00204 	addi	r19,r19,8
   42e10:	903ff21e 	bne	r18,zero,42ddc <_dtoa_r+0x430>
   42e14:	a80b883a 	mov	r5,r21
   42e18:	a009883a 	mov	r4,r20
   42e1c:	880f883a 	mov	r7,r17
   42e20:	800d883a 	mov	r6,r16
   42e24:	0048cf80 	call	48cf8 <__divdf3>
   42e28:	1029883a 	mov	r20,r2
   42e2c:	182b883a 	mov	r21,r3
   42e30:	d8c00c17 	ldw	r3,48(sp)
   42e34:	1805003a 	cmpeq	r2,r3,zero
   42e38:	1000081e 	bne	r2,zero,42e5c <_dtoa_r+0x4b0>
   42e3c:	0005883a 	mov	r2,zero
   42e40:	00cffc34 	movhi	r3,16368
   42e44:	180f883a 	mov	r7,r3
   42e48:	a009883a 	mov	r4,r20
   42e4c:	a80b883a 	mov	r5,r21
   42e50:	100d883a 	mov	r6,r2
   42e54:	00491700 	call	49170 <__ltdf2>
   42e58:	1003fe16 	blt	r2,zero,43e54 <_dtoa_r+0x14a8>
   42e5c:	b009883a 	mov	r4,r22
   42e60:	00491f80 	call	491f8 <__floatsidf>
   42e64:	180b883a 	mov	r5,r3
   42e68:	1009883a 	mov	r4,r2
   42e6c:	a00d883a 	mov	r6,r20
   42e70:	a80f883a 	mov	r7,r21
   42e74:	00489340 	call	48934 <__muldf3>
   42e78:	0011883a 	mov	r8,zero
   42e7c:	02500734 	movhi	r9,16412
   42e80:	1009883a 	mov	r4,r2
   42e84:	180b883a 	mov	r5,r3
   42e88:	480f883a 	mov	r7,r9
   42e8c:	400d883a 	mov	r6,r8
   42e90:	00488c00 	call	488c0 <__adddf3>
   42e94:	d9000f17 	ldw	r4,60(sp)
   42e98:	102d883a 	mov	r22,r2
   42e9c:	00bf3034 	movhi	r2,64704
   42ea0:	18b9883a 	add	fp,r3,r2
   42ea4:	e02f883a 	mov	r23,fp
   42ea8:	20028f1e 	bne	r4,zero,438e8 <_dtoa_r+0xf3c>
   42eac:	0005883a 	mov	r2,zero
   42eb0:	00d00534 	movhi	r3,16404
   42eb4:	a009883a 	mov	r4,r20
   42eb8:	a80b883a 	mov	r5,r21
   42ebc:	180f883a 	mov	r7,r3
   42ec0:	100d883a 	mov	r6,r2
   42ec4:	00488400 	call	48840 <__subdf3>
   42ec8:	1009883a 	mov	r4,r2
   42ecc:	e00f883a 	mov	r7,fp
   42ed0:	180b883a 	mov	r5,r3
   42ed4:	b00d883a 	mov	r6,r22
   42ed8:	1025883a 	mov	r18,r2
   42edc:	1827883a 	mov	r19,r3
   42ee0:	00490600 	call	49060 <__gtdf2>
   42ee4:	00834f16 	blt	zero,r2,43c24 <_dtoa_r+0x1278>
   42ee8:	e0e0003c 	xorhi	r3,fp,32768
   42eec:	9009883a 	mov	r4,r18
   42ef0:	980b883a 	mov	r5,r19
   42ef4:	180f883a 	mov	r7,r3
   42ef8:	b00d883a 	mov	r6,r22
   42efc:	00491700 	call	49170 <__ltdf2>
   42f00:	1000080e 	bge	r2,zero,42f24 <_dtoa_r+0x578>
   42f04:	0027883a 	mov	r19,zero
   42f08:	0025883a 	mov	r18,zero
   42f0c:	d8802617 	ldw	r2,152(sp)
   42f10:	df000517 	ldw	fp,20(sp)
   42f14:	d8000615 	stw	zero,24(sp)
   42f18:	0084303a 	nor	r2,zero,r2
   42f1c:	d8800d15 	stw	r2,52(sp)
   42f20:	00019b06 	br	43590 <_dtoa_r+0xbe4>
   42f24:	d9801217 	ldw	r6,72(sp)
   42f28:	d8801317 	ldw	r2,76(sp)
   42f2c:	3029883a 	mov	r20,r6
   42f30:	102b883a 	mov	r21,r2
   42f34:	d8c00217 	ldw	r3,8(sp)
   42f38:	18008516 	blt	r3,zero,43150 <_dtoa_r+0x7a4>
   42f3c:	d9000d17 	ldw	r4,52(sp)
   42f40:	00800384 	movi	r2,14
   42f44:	11008216 	blt	r2,r4,43150 <_dtoa_r+0x7a4>
   42f48:	200490fa 	slli	r2,r4,3
   42f4c:	d9802617 	ldw	r6,152(sp)
   42f50:	00c001b4 	movhi	r3,6
   42f54:	18c05204 	addi	r3,r3,328
   42f58:	10c5883a 	add	r2,r2,r3
   42f5c:	14800017 	ldw	r18,0(r2)
   42f60:	14c00117 	ldw	r19,4(r2)
   42f64:	30031e16 	blt	r6,zero,43be0 <_dtoa_r+0x1234>
   42f68:	d9000517 	ldw	r4,20(sp)
   42f6c:	d8c00f17 	ldw	r3,60(sp)
   42f70:	a823883a 	mov	r17,r21
   42f74:	a021883a 	mov	r16,r20
   42f78:	192b883a 	add	r21,r3,r4
   42f7c:	2039883a 	mov	fp,r4
   42f80:	00000f06 	br	42fc0 <_dtoa_r+0x614>
   42f84:	0005883a 	mov	r2,zero
   42f88:	00d00934 	movhi	r3,16420
   42f8c:	5009883a 	mov	r4,r10
   42f90:	580b883a 	mov	r5,r11
   42f94:	180f883a 	mov	r7,r3
   42f98:	100d883a 	mov	r6,r2
   42f9c:	00489340 	call	48934 <__muldf3>
   42fa0:	180b883a 	mov	r5,r3
   42fa4:	000d883a 	mov	r6,zero
   42fa8:	000f883a 	mov	r7,zero
   42fac:	1009883a 	mov	r4,r2
   42fb0:	1021883a 	mov	r16,r2
   42fb4:	1823883a 	mov	r17,r3
   42fb8:	0048fd80 	call	48fd8 <__nedf2>
   42fbc:	10004526 	beq	r2,zero,430d4 <_dtoa_r+0x728>
   42fc0:	900d883a 	mov	r6,r18
   42fc4:	980f883a 	mov	r7,r19
   42fc8:	8009883a 	mov	r4,r16
   42fcc:	880b883a 	mov	r5,r17
   42fd0:	0048cf80 	call	48cf8 <__divdf3>
   42fd4:	180b883a 	mov	r5,r3
   42fd8:	1009883a 	mov	r4,r2
   42fdc:	00492f00 	call	492f0 <__fixdfsi>
   42fe0:	1009883a 	mov	r4,r2
   42fe4:	1029883a 	mov	r20,r2
   42fe8:	00491f80 	call	491f8 <__floatsidf>
   42fec:	180f883a 	mov	r7,r3
   42ff0:	9009883a 	mov	r4,r18
   42ff4:	980b883a 	mov	r5,r19
   42ff8:	100d883a 	mov	r6,r2
   42ffc:	00489340 	call	48934 <__muldf3>
   43000:	180f883a 	mov	r7,r3
   43004:	880b883a 	mov	r5,r17
   43008:	8009883a 	mov	r4,r16
   4300c:	100d883a 	mov	r6,r2
   43010:	00488400 	call	48840 <__subdf3>
   43014:	1015883a 	mov	r10,r2
   43018:	a0800c04 	addi	r2,r20,48
   4301c:	e0800005 	stb	r2,0(fp)
   43020:	e7000044 	addi	fp,fp,1
   43024:	1817883a 	mov	r11,r3
   43028:	e57fd61e 	bne	fp,r21,42f84 <_dtoa_r+0x5d8>
   4302c:	500d883a 	mov	r6,r10
   43030:	180f883a 	mov	r7,r3
   43034:	5009883a 	mov	r4,r10
   43038:	180b883a 	mov	r5,r3
   4303c:	00488c00 	call	488c0 <__adddf3>
   43040:	100d883a 	mov	r6,r2
   43044:	9009883a 	mov	r4,r18
   43048:	980b883a 	mov	r5,r19
   4304c:	180f883a 	mov	r7,r3
   43050:	1021883a 	mov	r16,r2
   43054:	1823883a 	mov	r17,r3
   43058:	00491700 	call	49170 <__ltdf2>
   4305c:	10000816 	blt	r2,zero,43080 <_dtoa_r+0x6d4>
   43060:	980b883a 	mov	r5,r19
   43064:	800d883a 	mov	r6,r16
   43068:	880f883a 	mov	r7,r17
   4306c:	9009883a 	mov	r4,r18
   43070:	0048f500 	call	48f50 <__eqdf2>
   43074:	1000171e 	bne	r2,zero,430d4 <_dtoa_r+0x728>
   43078:	a080004c 	andi	r2,r20,1
   4307c:	10001526 	beq	r2,zero,430d4 <_dtoa_r+0x728>
   43080:	d8800d17 	ldw	r2,52(sp)
   43084:	d8800415 	stw	r2,16(sp)
   43088:	e009883a 	mov	r4,fp
   4308c:	213fffc4 	addi	r4,r4,-1
   43090:	20c00007 	ldb	r3,0(r4)
   43094:	00800e44 	movi	r2,57
   43098:	1880081e 	bne	r3,r2,430bc <_dtoa_r+0x710>
   4309c:	d8800517 	ldw	r2,20(sp)
   430a0:	113ffa1e 	bne	r2,r4,4308c <_dtoa_r+0x6e0>
   430a4:	d8c00417 	ldw	r3,16(sp)
   430a8:	d9800517 	ldw	r6,20(sp)
   430ac:	00800c04 	movi	r2,48
   430b0:	18c00044 	addi	r3,r3,1
   430b4:	d8c00415 	stw	r3,16(sp)
   430b8:	30800005 	stb	r2,0(r6)
   430bc:	20800003 	ldbu	r2,0(r4)
   430c0:	d8c00417 	ldw	r3,16(sp)
   430c4:	27000044 	addi	fp,r4,1
   430c8:	10800044 	addi	r2,r2,1
   430cc:	d8c00d15 	stw	r3,52(sp)
   430d0:	20800005 	stb	r2,0(r4)
   430d4:	d9001617 	ldw	r4,88(sp)
   430d8:	d9400717 	ldw	r5,28(sp)
   430dc:	0045b400 	call	45b40 <_Bfree>
   430e0:	e0000005 	stb	zero,0(fp)
   430e4:	d9800d17 	ldw	r6,52(sp)
   430e8:	d8c02717 	ldw	r3,156(sp)
   430ec:	d9002917 	ldw	r4,164(sp)
   430f0:	30800044 	addi	r2,r6,1
   430f4:	18800015 	stw	r2,0(r3)
   430f8:	20029c26 	beq	r4,zero,43b6c <_dtoa_r+0x11c0>
   430fc:	d8c00517 	ldw	r3,20(sp)
   43100:	27000015 	stw	fp,0(r4)
   43104:	003e5d06 	br	42a7c <_dtoa_r+0xd0>
   43108:	d9800d17 	ldw	r6,52(sp)
   4310c:	00c001b4 	movhi	r3,6
   43110:	18c05204 	addi	r3,r3,328
   43114:	d9001217 	ldw	r4,72(sp)
   43118:	300490fa 	slli	r2,r6,3
   4311c:	d9401317 	ldw	r5,76(sp)
   43120:	10c5883a 	add	r2,r2,r3
   43124:	12000017 	ldw	r8,0(r2)
   43128:	12400117 	ldw	r9,4(r2)
   4312c:	400d883a 	mov	r6,r8
   43130:	480f883a 	mov	r7,r9
   43134:	00491700 	call	49170 <__ltdf2>
   43138:	1000030e 	bge	r2,zero,43148 <_dtoa_r+0x79c>
   4313c:	d8800d17 	ldw	r2,52(sp)
   43140:	10bfffc4 	addi	r2,r2,-1
   43144:	d8800d15 	stw	r2,52(sp)
   43148:	d8000c15 	stw	zero,48(sp)
   4314c:	003ea806 	br	42bf0 <_dtoa_r+0x244>
   43150:	d9000b17 	ldw	r4,44(sp)
   43154:	202cc03a 	cmpne	r22,r4,zero
   43158:	b000c71e 	bne	r22,zero,43478 <_dtoa_r+0xacc>
   4315c:	dc001117 	ldw	r16,68(sp)
   43160:	dc801017 	ldw	r18,64(sp)
   43164:	0027883a 	mov	r19,zero
   43168:	04000b0e 	bge	zero,r16,43198 <_dtoa_r+0x7ec>
   4316c:	d8c00a17 	ldw	r3,40(sp)
   43170:	00c0090e 	bge	zero,r3,43198 <_dtoa_r+0x7ec>
   43174:	8005883a 	mov	r2,r16
   43178:	1c011316 	blt	r3,r16,435c8 <_dtoa_r+0xc1c>
   4317c:	d9000a17 	ldw	r4,40(sp)
   43180:	d9801117 	ldw	r6,68(sp)
   43184:	80a1c83a 	sub	r16,r16,r2
   43188:	2089c83a 	sub	r4,r4,r2
   4318c:	308dc83a 	sub	r6,r6,r2
   43190:	d9000a15 	stw	r4,40(sp)
   43194:	d9801115 	stw	r6,68(sp)
   43198:	d8801017 	ldw	r2,64(sp)
   4319c:	0080150e 	bge	zero,r2,431f4 <_dtoa_r+0x848>
   431a0:	d8c00b17 	ldw	r3,44(sp)
   431a4:	1805003a 	cmpeq	r2,r3,zero
   431a8:	1001c91e 	bne	r2,zero,438d0 <_dtoa_r+0xf24>
   431ac:	04800e0e 	bge	zero,r18,431e8 <_dtoa_r+0x83c>
   431b0:	d9001617 	ldw	r4,88(sp)
   431b4:	980b883a 	mov	r5,r19
   431b8:	900d883a 	mov	r6,r18
   431bc:	00468f40 	call	468f4 <__pow5mult>
   431c0:	d9001617 	ldw	r4,88(sp)
   431c4:	d9800717 	ldw	r6,28(sp)
   431c8:	100b883a 	mov	r5,r2
   431cc:	1027883a 	mov	r19,r2
   431d0:	00465d00 	call	465d0 <__multiply>
   431d4:	d9001617 	ldw	r4,88(sp)
   431d8:	d9400717 	ldw	r5,28(sp)
   431dc:	1023883a 	mov	r17,r2
   431e0:	0045b400 	call	45b40 <_Bfree>
   431e4:	dc400715 	stw	r17,28(sp)
   431e8:	d9001017 	ldw	r4,64(sp)
   431ec:	248dc83a 	sub	r6,r4,r18
   431f0:	30010e1e 	bne	r6,zero,4362c <_dtoa_r+0xc80>
   431f4:	d9001617 	ldw	r4,88(sp)
   431f8:	04400044 	movi	r17,1
   431fc:	880b883a 	mov	r5,r17
   43200:	00467b80 	call	467b8 <__i2b>
   43204:	d9800917 	ldw	r6,36(sp)
   43208:	1025883a 	mov	r18,r2
   4320c:	0180040e 	bge	zero,r6,43220 <_dtoa_r+0x874>
   43210:	d9001617 	ldw	r4,88(sp)
   43214:	100b883a 	mov	r5,r2
   43218:	00468f40 	call	468f4 <__pow5mult>
   4321c:	1025883a 	mov	r18,r2
   43220:	d8801717 	ldw	r2,92(sp)
   43224:	8880f30e 	bge	r17,r2,435f4 <_dtoa_r+0xc48>
   43228:	0023883a 	mov	r17,zero
   4322c:	d9800917 	ldw	r6,36(sp)
   43230:	30019e1e 	bne	r6,zero,438ac <_dtoa_r+0xf00>
   43234:	00c00044 	movi	r3,1
   43238:	d9000a17 	ldw	r4,40(sp)
   4323c:	20c5883a 	add	r2,r4,r3
   43240:	10c007cc 	andi	r3,r2,31
   43244:	1800841e 	bne	r3,zero,43458 <_dtoa_r+0xaac>
   43248:	00800704 	movi	r2,28
   4324c:	d9000a17 	ldw	r4,40(sp)
   43250:	d9801117 	ldw	r6,68(sp)
   43254:	80a1883a 	add	r16,r16,r2
   43258:	2089883a 	add	r4,r4,r2
   4325c:	308d883a 	add	r6,r6,r2
   43260:	d9000a15 	stw	r4,40(sp)
   43264:	d9801115 	stw	r6,68(sp)
   43268:	d8801117 	ldw	r2,68(sp)
   4326c:	0080050e 	bge	zero,r2,43284 <_dtoa_r+0x8d8>
   43270:	d9400717 	ldw	r5,28(sp)
   43274:	d9001617 	ldw	r4,88(sp)
   43278:	100d883a 	mov	r6,r2
   4327c:	00464840 	call	46484 <__lshift>
   43280:	d8800715 	stw	r2,28(sp)
   43284:	d8c00a17 	ldw	r3,40(sp)
   43288:	00c0050e 	bge	zero,r3,432a0 <_dtoa_r+0x8f4>
   4328c:	d9001617 	ldw	r4,88(sp)
   43290:	900b883a 	mov	r5,r18
   43294:	180d883a 	mov	r6,r3
   43298:	00464840 	call	46484 <__lshift>
   4329c:	1025883a 	mov	r18,r2
   432a0:	d9000c17 	ldw	r4,48(sp)
   432a4:	2005003a 	cmpeq	r2,r4,zero
   432a8:	10016f26 	beq	r2,zero,43868 <_dtoa_r+0xebc>
   432ac:	d9000f17 	ldw	r4,60(sp)
   432b0:	0102170e 	bge	zero,r4,43b10 <_dtoa_r+0x1164>
   432b4:	d9800b17 	ldw	r6,44(sp)
   432b8:	3005003a 	cmpeq	r2,r6,zero
   432bc:	1000881e 	bne	r2,zero,434e0 <_dtoa_r+0xb34>
   432c0:	0400050e 	bge	zero,r16,432d8 <_dtoa_r+0x92c>
   432c4:	d9001617 	ldw	r4,88(sp)
   432c8:	980b883a 	mov	r5,r19
   432cc:	800d883a 	mov	r6,r16
   432d0:	00464840 	call	46484 <__lshift>
   432d4:	1027883a 	mov	r19,r2
   432d8:	8804c03a 	cmpne	r2,r17,zero
   432dc:	1002541e 	bne	r2,zero,43c30 <_dtoa_r+0x1284>
   432e0:	980b883a 	mov	r5,r19
   432e4:	dd800517 	ldw	r22,20(sp)
   432e8:	dcc00615 	stw	r19,24(sp)
   432ec:	a700004c 	andi	fp,r20,1
   432f0:	2827883a 	mov	r19,r5
   432f4:	d9000717 	ldw	r4,28(sp)
   432f8:	900b883a 	mov	r5,r18
   432fc:	00427940 	call	42794 <quorem>
   43300:	d9000717 	ldw	r4,28(sp)
   43304:	d9400617 	ldw	r5,24(sp)
   43308:	1023883a 	mov	r17,r2
   4330c:	8dc00c04 	addi	r23,r17,48
   43310:	0045c9c0 	call	45c9c <__mcmp>
   43314:	d9001617 	ldw	r4,88(sp)
   43318:	900b883a 	mov	r5,r18
   4331c:	980d883a 	mov	r6,r19
   43320:	1029883a 	mov	r20,r2
   43324:	00462f80 	call	462f8 <__mdiff>
   43328:	102b883a 	mov	r21,r2
   4332c:	10800317 	ldw	r2,12(r2)
   43330:	1001281e 	bne	r2,zero,437d4 <_dtoa_r+0xe28>
   43334:	d9000717 	ldw	r4,28(sp)
   43338:	a80b883a 	mov	r5,r21
   4333c:	0045c9c0 	call	45c9c <__mcmp>
   43340:	d9001617 	ldw	r4,88(sp)
   43344:	1021883a 	mov	r16,r2
   43348:	a80b883a 	mov	r5,r21
   4334c:	0045b400 	call	45b40 <_Bfree>
   43350:	8000041e 	bne	r16,zero,43364 <_dtoa_r+0x9b8>
   43354:	d8801717 	ldw	r2,92(sp)
   43358:	1000021e 	bne	r2,zero,43364 <_dtoa_r+0x9b8>
   4335c:	e004c03a 	cmpne	r2,fp,zero
   43360:	10011726 	beq	r2,zero,437c0 <_dtoa_r+0xe14>
   43364:	a0010616 	blt	r20,zero,43780 <_dtoa_r+0xdd4>
   43368:	a000041e 	bne	r20,zero,4337c <_dtoa_r+0x9d0>
   4336c:	d8c01717 	ldw	r3,92(sp)
   43370:	1800021e 	bne	r3,zero,4337c <_dtoa_r+0x9d0>
   43374:	e004c03a 	cmpne	r2,fp,zero
   43378:	10010126 	beq	r2,zero,43780 <_dtoa_r+0xdd4>
   4337c:	04023d16 	blt	zero,r16,43c74 <_dtoa_r+0x12c8>
   43380:	b5c00005 	stb	r23,0(r22)
   43384:	d9800517 	ldw	r6,20(sp)
   43388:	d9000f17 	ldw	r4,60(sp)
   4338c:	b5800044 	addi	r22,r22,1
   43390:	3105883a 	add	r2,r6,r4
   43394:	b0806526 	beq	r22,r2,4352c <_dtoa_r+0xb80>
   43398:	d9400717 	ldw	r5,28(sp)
   4339c:	d9001617 	ldw	r4,88(sp)
   433a0:	01800284 	movi	r6,10
   433a4:	000f883a 	mov	r7,zero
   433a8:	00467f40 	call	467f4 <__multadd>
   433ac:	d8800715 	stw	r2,28(sp)
   433b0:	d8800617 	ldw	r2,24(sp)
   433b4:	14c10c26 	beq	r2,r19,437e8 <_dtoa_r+0xe3c>
   433b8:	d9400617 	ldw	r5,24(sp)
   433bc:	d9001617 	ldw	r4,88(sp)
   433c0:	01800284 	movi	r6,10
   433c4:	000f883a 	mov	r7,zero
   433c8:	00467f40 	call	467f4 <__multadd>
   433cc:	d9001617 	ldw	r4,88(sp)
   433d0:	980b883a 	mov	r5,r19
   433d4:	01800284 	movi	r6,10
   433d8:	000f883a 	mov	r7,zero
   433dc:	d8800615 	stw	r2,24(sp)
   433e0:	00467f40 	call	467f4 <__multadd>
   433e4:	1027883a 	mov	r19,r2
   433e8:	003fc206 	br	432f4 <_dtoa_r+0x948>
   433ec:	2445c83a 	sub	r2,r4,r17
   433f0:	a088983a 	sll	r4,r20,r2
   433f4:	003e4b06 	br	42d24 <_dtoa_r+0x378>
   433f8:	01bfffc4 	movi	r6,-1
   433fc:	00800044 	movi	r2,1
   43400:	d9800e15 	stw	r6,56(sp)
   43404:	d9800f15 	stw	r6,60(sp)
   43408:	d8800b15 	stw	r2,44(sp)
   4340c:	d8c01617 	ldw	r3,88(sp)
   43410:	008005c4 	movi	r2,23
   43414:	18001115 	stw	zero,68(r3)
   43418:	1580082e 	bgeu	r2,r22,4343c <_dtoa_r+0xa90>
   4341c:	00c00104 	movi	r3,4
   43420:	0009883a 	mov	r4,zero
   43424:	18c7883a 	add	r3,r3,r3
   43428:	18800504 	addi	r2,r3,20
   4342c:	21000044 	addi	r4,r4,1
   43430:	b0bffc2e 	bgeu	r22,r2,43424 <_dtoa_r+0xa78>
   43434:	d9801617 	ldw	r6,88(sp)
   43438:	31001115 	stw	r4,68(r6)
   4343c:	dc000f17 	ldw	r16,60(sp)
   43440:	003e4b06 	br	42d70 <_dtoa_r+0x3c4>
   43444:	d9801717 	ldw	r6,92(sp)
   43448:	0023883a 	mov	r17,zero
   4344c:	31bfff04 	addi	r6,r6,-4
   43450:	d9801715 	stw	r6,92(sp)
   43454:	003df806 	br	42c38 <_dtoa_r+0x28c>
   43458:	00800804 	movi	r2,32
   4345c:	10c9c83a 	sub	r4,r2,r3
   43460:	00c00104 	movi	r3,4
   43464:	19005a16 	blt	r3,r4,435d0 <_dtoa_r+0xc24>
   43468:	008000c4 	movi	r2,3
   4346c:	113f7e16 	blt	r2,r4,43268 <_dtoa_r+0x8bc>
   43470:	20800704 	addi	r2,r4,28
   43474:	003f7506 	br	4324c <_dtoa_r+0x8a0>
   43478:	d9801717 	ldw	r6,92(sp)
   4347c:	00800044 	movi	r2,1
   43480:	1180a10e 	bge	r2,r6,43708 <_dtoa_r+0xd5c>
   43484:	d9800f17 	ldw	r6,60(sp)
   43488:	d8c01017 	ldw	r3,64(sp)
   4348c:	30bfffc4 	addi	r2,r6,-1
   43490:	1881c616 	blt	r3,r2,43bac <_dtoa_r+0x1200>
   43494:	18a5c83a 	sub	r18,r3,r2
   43498:	d8800f17 	ldw	r2,60(sp)
   4349c:	10026216 	blt	r2,zero,43e28 <_dtoa_r+0x147c>
   434a0:	dc001117 	ldw	r16,68(sp)
   434a4:	1007883a 	mov	r3,r2
   434a8:	d9800a17 	ldw	r6,40(sp)
   434ac:	d8801117 	ldw	r2,68(sp)
   434b0:	d9001617 	ldw	r4,88(sp)
   434b4:	30cd883a 	add	r6,r6,r3
   434b8:	10c5883a 	add	r2,r2,r3
   434bc:	01400044 	movi	r5,1
   434c0:	d9800a15 	stw	r6,40(sp)
   434c4:	d8801115 	stw	r2,68(sp)
   434c8:	00467b80 	call	467b8 <__i2b>
   434cc:	1027883a 	mov	r19,r2
   434d0:	003f2506 	br	43168 <_dtoa_r+0x7bc>
   434d4:	00c001b4 	movhi	r3,6
   434d8:	18c03404 	addi	r3,r3,208
   434dc:	003d6706 	br	42a7c <_dtoa_r+0xd0>
   434e0:	dd800517 	ldw	r22,20(sp)
   434e4:	04000044 	movi	r16,1
   434e8:	00000706 	br	43508 <_dtoa_r+0xb5c>
   434ec:	d9400717 	ldw	r5,28(sp)
   434f0:	d9001617 	ldw	r4,88(sp)
   434f4:	01800284 	movi	r6,10
   434f8:	000f883a 	mov	r7,zero
   434fc:	00467f40 	call	467f4 <__multadd>
   43500:	d8800715 	stw	r2,28(sp)
   43504:	84000044 	addi	r16,r16,1
   43508:	d9000717 	ldw	r4,28(sp)
   4350c:	900b883a 	mov	r5,r18
   43510:	00427940 	call	42794 <quorem>
   43514:	15c00c04 	addi	r23,r2,48
   43518:	b5c00005 	stb	r23,0(r22)
   4351c:	d8c00f17 	ldw	r3,60(sp)
   43520:	b5800044 	addi	r22,r22,1
   43524:	80fff116 	blt	r16,r3,434ec <_dtoa_r+0xb40>
   43528:	d8000615 	stw	zero,24(sp)
   4352c:	d9400717 	ldw	r5,28(sp)
   43530:	d9001617 	ldw	r4,88(sp)
   43534:	01800044 	movi	r6,1
   43538:	00464840 	call	46484 <__lshift>
   4353c:	1009883a 	mov	r4,r2
   43540:	900b883a 	mov	r5,r18
   43544:	d8800715 	stw	r2,28(sp)
   43548:	0045c9c0 	call	45c9c <__mcmp>
   4354c:	00803c0e 	bge	zero,r2,43640 <_dtoa_r+0xc94>
   43550:	b009883a 	mov	r4,r22
   43554:	213fffc4 	addi	r4,r4,-1
   43558:	21400003 	ldbu	r5,0(r4)
   4355c:	00800e44 	movi	r2,57
   43560:	28c03fcc 	andi	r3,r5,255
   43564:	18c0201c 	xori	r3,r3,128
   43568:	18ffe004 	addi	r3,r3,-128
   4356c:	1881981e 	bne	r3,r2,43bd0 <_dtoa_r+0x1224>
   43570:	d9800517 	ldw	r6,20(sp)
   43574:	21bff71e 	bne	r4,r6,43554 <_dtoa_r+0xba8>
   43578:	d8800d17 	ldw	r2,52(sp)
   4357c:	37000044 	addi	fp,r6,1
   43580:	10800044 	addi	r2,r2,1
   43584:	d8800d15 	stw	r2,52(sp)
   43588:	00800c44 	movi	r2,49
   4358c:	30800005 	stb	r2,0(r6)
   43590:	d9001617 	ldw	r4,88(sp)
   43594:	900b883a 	mov	r5,r18
   43598:	0045b400 	call	45b40 <_Bfree>
   4359c:	983ecd26 	beq	r19,zero,430d4 <_dtoa_r+0x728>
   435a0:	d8c00617 	ldw	r3,24(sp)
   435a4:	18000426 	beq	r3,zero,435b8 <_dtoa_r+0xc0c>
   435a8:	1cc00326 	beq	r3,r19,435b8 <_dtoa_r+0xc0c>
   435ac:	d9001617 	ldw	r4,88(sp)
   435b0:	180b883a 	mov	r5,r3
   435b4:	0045b400 	call	45b40 <_Bfree>
   435b8:	d9001617 	ldw	r4,88(sp)
   435bc:	980b883a 	mov	r5,r19
   435c0:	0045b400 	call	45b40 <_Bfree>
   435c4:	003ec306 	br	430d4 <_dtoa_r+0x728>
   435c8:	1805883a 	mov	r2,r3
   435cc:	003eeb06 	br	4317c <_dtoa_r+0x7d0>
   435d0:	d9800a17 	ldw	r6,40(sp)
   435d4:	d8c01117 	ldw	r3,68(sp)
   435d8:	20bfff04 	addi	r2,r4,-4
   435dc:	308d883a 	add	r6,r6,r2
   435e0:	1887883a 	add	r3,r3,r2
   435e4:	80a1883a 	add	r16,r16,r2
   435e8:	d9800a15 	stw	r6,40(sp)
   435ec:	d8c01115 	stw	r3,68(sp)
   435f0:	003f1d06 	br	43268 <_dtoa_r+0x8bc>
   435f4:	a03f0c1e 	bne	r20,zero,43228 <_dtoa_r+0x87c>
   435f8:	00800434 	movhi	r2,16
   435fc:	10bfffc4 	addi	r2,r2,-1
   43600:	a884703a 	and	r2,r21,r2
   43604:	103f081e 	bne	r2,zero,43228 <_dtoa_r+0x87c>
   43608:	a89ffc2c 	andhi	r2,r21,32752
   4360c:	103f0626 	beq	r2,zero,43228 <_dtoa_r+0x87c>
   43610:	d8c01117 	ldw	r3,68(sp)
   43614:	d9000a17 	ldw	r4,40(sp)
   43618:	18c00044 	addi	r3,r3,1
   4361c:	21000044 	addi	r4,r4,1
   43620:	d8c01115 	stw	r3,68(sp)
   43624:	d9000a15 	stw	r4,40(sp)
   43628:	003f0006 	br	4322c <_dtoa_r+0x880>
   4362c:	d9400717 	ldw	r5,28(sp)
   43630:	d9001617 	ldw	r4,88(sp)
   43634:	00468f40 	call	468f4 <__pow5mult>
   43638:	d8800715 	stw	r2,28(sp)
   4363c:	003eed06 	br	431f4 <_dtoa_r+0x848>
   43640:	1000021e 	bne	r2,zero,4364c <_dtoa_r+0xca0>
   43644:	b880004c 	andi	r2,r23,1
   43648:	103fc11e 	bne	r2,zero,43550 <_dtoa_r+0xba4>
   4364c:	b5bfffc4 	addi	r22,r22,-1
   43650:	b0c00007 	ldb	r3,0(r22)
   43654:	00800c04 	movi	r2,48
   43658:	18bffc26 	beq	r3,r2,4364c <_dtoa_r+0xca0>
   4365c:	b7000044 	addi	fp,r22,1
   43660:	003fcb06 	br	43590 <_dtoa_r+0xbe4>
   43664:	d9800d17 	ldw	r6,52(sp)
   43668:	018fc83a 	sub	r7,zero,r6
   4366c:	3801f726 	beq	r7,zero,43e4c <_dtoa_r+0x14a0>
   43670:	398003cc 	andi	r6,r7,15
   43674:	300c90fa 	slli	r6,r6,3
   43678:	014001b4 	movhi	r5,6
   4367c:	29405204 	addi	r5,r5,328
   43680:	d9001217 	ldw	r4,72(sp)
   43684:	314d883a 	add	r6,r6,r5
   43688:	30c00117 	ldw	r3,4(r6)
   4368c:	30800017 	ldw	r2,0(r6)
   43690:	d9401317 	ldw	r5,76(sp)
   43694:	3821d13a 	srai	r16,r7,4
   43698:	100d883a 	mov	r6,r2
   4369c:	180f883a 	mov	r7,r3
   436a0:	00489340 	call	48934 <__muldf3>
   436a4:	1011883a 	mov	r8,r2
   436a8:	1813883a 	mov	r9,r3
   436ac:	1029883a 	mov	r20,r2
   436b0:	182b883a 	mov	r21,r3
   436b4:	8001e526 	beq	r16,zero,43e4c <_dtoa_r+0x14a0>
   436b8:	05800084 	movi	r22,2
   436bc:	044001b4 	movhi	r17,6
   436c0:	8c408404 	addi	r17,r17,528
   436c4:	8080004c 	andi	r2,r16,1
   436c8:	1005003a 	cmpeq	r2,r2,zero
   436cc:	1000081e 	bne	r2,zero,436f0 <_dtoa_r+0xd44>
   436d0:	89800017 	ldw	r6,0(r17)
   436d4:	89c00117 	ldw	r7,4(r17)
   436d8:	480b883a 	mov	r5,r9
   436dc:	4009883a 	mov	r4,r8
   436e0:	00489340 	call	48934 <__muldf3>
   436e4:	1011883a 	mov	r8,r2
   436e8:	b5800044 	addi	r22,r22,1
   436ec:	1813883a 	mov	r9,r3
   436f0:	8021d07a 	srai	r16,r16,1
   436f4:	8c400204 	addi	r17,r17,8
   436f8:	803ff21e 	bne	r16,zero,436c4 <_dtoa_r+0xd18>
   436fc:	4029883a 	mov	r20,r8
   43700:	482b883a 	mov	r21,r9
   43704:	003dca06 	br	42e30 <_dtoa_r+0x484>
   43708:	d9000817 	ldw	r4,32(sp)
   4370c:	2005003a 	cmpeq	r2,r4,zero
   43710:	1001f61e 	bne	r2,zero,43eec <_dtoa_r+0x1540>
   43714:	dc001117 	ldw	r16,68(sp)
   43718:	dc801017 	ldw	r18,64(sp)
   4371c:	18c10cc4 	addi	r3,r3,1075
   43720:	003f6106 	br	434a8 <_dtoa_r+0xafc>
   43724:	d8000b15 	stw	zero,44(sp)
   43728:	d9802617 	ldw	r6,152(sp)
   4372c:	d8c00d17 	ldw	r3,52(sp)
   43730:	30800044 	addi	r2,r6,1
   43734:	18ad883a 	add	r22,r3,r2
   43738:	b13fffc4 	addi	r4,r22,-1
   4373c:	d9000e15 	stw	r4,56(sp)
   43740:	0581f60e 	bge	zero,r22,43f1c <_dtoa_r+0x1570>
   43744:	dd800f15 	stw	r22,60(sp)
   43748:	003f3006 	br	4340c <_dtoa_r+0xa60>
   4374c:	d8000b15 	stw	zero,44(sp)
   43750:	d9002617 	ldw	r4,152(sp)
   43754:	0101eb0e 	bge	zero,r4,43f04 <_dtoa_r+0x1558>
   43758:	202d883a 	mov	r22,r4
   4375c:	d9000e15 	stw	r4,56(sp)
   43760:	d9000f15 	stw	r4,60(sp)
   43764:	003f2906 	br	4340c <_dtoa_r+0xa60>
   43768:	01800044 	movi	r6,1
   4376c:	d9800b15 	stw	r6,44(sp)
   43770:	003ff706 	br	43750 <_dtoa_r+0xda4>
   43774:	01000044 	movi	r4,1
   43778:	d9000b15 	stw	r4,44(sp)
   4377c:	003fea06 	br	43728 <_dtoa_r+0xd7c>
   43780:	04000c0e 	bge	zero,r16,437b4 <_dtoa_r+0xe08>
   43784:	d9400717 	ldw	r5,28(sp)
   43788:	d9001617 	ldw	r4,88(sp)
   4378c:	01800044 	movi	r6,1
   43790:	00464840 	call	46484 <__lshift>
   43794:	1009883a 	mov	r4,r2
   43798:	900b883a 	mov	r5,r18
   4379c:	d8800715 	stw	r2,28(sp)
   437a0:	0045c9c0 	call	45c9c <__mcmp>
   437a4:	0081e00e 	bge	zero,r2,43f28 <_dtoa_r+0x157c>
   437a8:	bdc00044 	addi	r23,r23,1
   437ac:	00800e84 	movi	r2,58
   437b0:	b881a226 	beq	r23,r2,43e3c <_dtoa_r+0x1490>
   437b4:	b7000044 	addi	fp,r22,1
   437b8:	b5c00005 	stb	r23,0(r22)
   437bc:	003f7406 	br	43590 <_dtoa_r+0xbe4>
   437c0:	00800e44 	movi	r2,57
   437c4:	b8819d26 	beq	r23,r2,43e3c <_dtoa_r+0x1490>
   437c8:	053ffa0e 	bge	zero,r20,437b4 <_dtoa_r+0xe08>
   437cc:	8dc00c44 	addi	r23,r17,49
   437d0:	003ff806 	br	437b4 <_dtoa_r+0xe08>
   437d4:	d9001617 	ldw	r4,88(sp)
   437d8:	a80b883a 	mov	r5,r21
   437dc:	04000044 	movi	r16,1
   437e0:	0045b400 	call	45b40 <_Bfree>
   437e4:	003edf06 	br	43364 <_dtoa_r+0x9b8>
   437e8:	d9001617 	ldw	r4,88(sp)
   437ec:	980b883a 	mov	r5,r19
   437f0:	01800284 	movi	r6,10
   437f4:	000f883a 	mov	r7,zero
   437f8:	00467f40 	call	467f4 <__multadd>
   437fc:	1027883a 	mov	r19,r2
   43800:	d8800615 	stw	r2,24(sp)
   43804:	003ebb06 	br	432f4 <_dtoa_r+0x948>
   43808:	d9801117 	ldw	r6,68(sp)
   4380c:	d8800d17 	ldw	r2,52(sp)
   43810:	d8000915 	stw	zero,36(sp)
   43814:	308dc83a 	sub	r6,r6,r2
   43818:	0087c83a 	sub	r3,zero,r2
   4381c:	d9801115 	stw	r6,68(sp)
   43820:	d8c01015 	stw	r3,64(sp)
   43824:	003cfe06 	br	42c20 <_dtoa_r+0x274>
   43828:	018dc83a 	sub	r6,zero,r6
   4382c:	d9801115 	stw	r6,68(sp)
   43830:	d8000a15 	stw	zero,40(sp)
   43834:	003cf306 	br	42c04 <_dtoa_r+0x258>
   43838:	d9000d17 	ldw	r4,52(sp)
   4383c:	00491f80 	call	491f8 <__floatsidf>
   43840:	880b883a 	mov	r5,r17
   43844:	8009883a 	mov	r4,r16
   43848:	180f883a 	mov	r7,r3
   4384c:	100d883a 	mov	r6,r2
   43850:	0048fd80 	call	48fd8 <__nedf2>
   43854:	103ce126 	beq	r2,zero,42bdc <_dtoa_r+0x230>
   43858:	d9800d17 	ldw	r6,52(sp)
   4385c:	31bfffc4 	addi	r6,r6,-1
   43860:	d9800d15 	stw	r6,52(sp)
   43864:	003cdd06 	br	42bdc <_dtoa_r+0x230>
   43868:	d9000717 	ldw	r4,28(sp)
   4386c:	900b883a 	mov	r5,r18
   43870:	0045c9c0 	call	45c9c <__mcmp>
   43874:	103e8d0e 	bge	r2,zero,432ac <_dtoa_r+0x900>
   43878:	d9400717 	ldw	r5,28(sp)
   4387c:	d9001617 	ldw	r4,88(sp)
   43880:	01800284 	movi	r6,10
   43884:	000f883a 	mov	r7,zero
   43888:	00467f40 	call	467f4 <__multadd>
   4388c:	d9800d17 	ldw	r6,52(sp)
   43890:	d8800715 	stw	r2,28(sp)
   43894:	31bfffc4 	addi	r6,r6,-1
   43898:	d9800d15 	stw	r6,52(sp)
   4389c:	b001a71e 	bne	r22,zero,43f3c <_dtoa_r+0x1590>
   438a0:	d8800e17 	ldw	r2,56(sp)
   438a4:	d8800f15 	stw	r2,60(sp)
   438a8:	003e8006 	br	432ac <_dtoa_r+0x900>
   438ac:	90800417 	ldw	r2,16(r18)
   438b0:	1085883a 	add	r2,r2,r2
   438b4:	1085883a 	add	r2,r2,r2
   438b8:	1485883a 	add	r2,r2,r18
   438bc:	11000417 	ldw	r4,16(r2)
   438c0:	0045b680 	call	45b68 <__hi0bits>
   438c4:	00c00804 	movi	r3,32
   438c8:	1887c83a 	sub	r3,r3,r2
   438cc:	003e5a06 	br	43238 <_dtoa_r+0x88c>
   438d0:	d9400717 	ldw	r5,28(sp)
   438d4:	d9801017 	ldw	r6,64(sp)
   438d8:	d9001617 	ldw	r4,88(sp)
   438dc:	00468f40 	call	468f4 <__pow5mult>
   438e0:	d8800715 	stw	r2,28(sp)
   438e4:	003e4306 	br	431f4 <_dtoa_r+0x848>
   438e8:	d9800f17 	ldw	r6,60(sp)
   438ec:	d8800d17 	ldw	r2,52(sp)
   438f0:	d9800315 	stw	r6,12(sp)
   438f4:	d8800415 	stw	r2,16(sp)
   438f8:	d8c00b17 	ldw	r3,44(sp)
   438fc:	1805003a 	cmpeq	r2,r3,zero
   43900:	1000e21e 	bne	r2,zero,43c8c <_dtoa_r+0x12e0>
   43904:	d9000317 	ldw	r4,12(sp)
   43908:	0005883a 	mov	r2,zero
   4390c:	00cff834 	movhi	r3,16352
   43910:	200c90fa 	slli	r6,r4,3
   43914:	010001b4 	movhi	r4,6
   43918:	21005204 	addi	r4,r4,328
   4391c:	180b883a 	mov	r5,r3
   43920:	310d883a 	add	r6,r6,r4
   43924:	327fff17 	ldw	r9,-4(r6)
   43928:	323ffe17 	ldw	r8,-8(r6)
   4392c:	1009883a 	mov	r4,r2
   43930:	480f883a 	mov	r7,r9
   43934:	400d883a 	mov	r6,r8
   43938:	0048cf80 	call	48cf8 <__divdf3>
   4393c:	180b883a 	mov	r5,r3
   43940:	b00d883a 	mov	r6,r22
   43944:	b80f883a 	mov	r7,r23
   43948:	1009883a 	mov	r4,r2
   4394c:	00488400 	call	48840 <__subdf3>
   43950:	a80b883a 	mov	r5,r21
   43954:	a009883a 	mov	r4,r20
   43958:	d8c01915 	stw	r3,100(sp)
   4395c:	d8801815 	stw	r2,96(sp)
   43960:	00492f00 	call	492f0 <__fixdfsi>
   43964:	1009883a 	mov	r4,r2
   43968:	1027883a 	mov	r19,r2
   4396c:	00491f80 	call	491f8 <__floatsidf>
   43970:	a80b883a 	mov	r5,r21
   43974:	a009883a 	mov	r4,r20
   43978:	180f883a 	mov	r7,r3
   4397c:	100d883a 	mov	r6,r2
   43980:	00488400 	call	48840 <__subdf3>
   43984:	d9801817 	ldw	r6,96(sp)
   43988:	1823883a 	mov	r17,r3
   4398c:	d8801415 	stw	r2,80(sp)
   43990:	302d883a 	mov	r22,r6
   43994:	d9800517 	ldw	r6,20(sp)
   43998:	9cc00c04 	addi	r19,r19,48
   4399c:	dc401515 	stw	r17,84(sp)
   439a0:	d8c01917 	ldw	r3,100(sp)
   439a4:	34c00005 	stb	r19,0(r6)
   439a8:	d8800517 	ldw	r2,20(sp)
   439ac:	d9401917 	ldw	r5,100(sp)
   439b0:	d9801417 	ldw	r6,80(sp)
   439b4:	b009883a 	mov	r4,r22
   439b8:	880f883a 	mov	r7,r17
   439bc:	182f883a 	mov	r23,r3
   439c0:	17000044 	addi	fp,r2,1
   439c4:	00490600 	call	49060 <__gtdf2>
   439c8:	00804e16 	blt	zero,r2,43b04 <_dtoa_r+0x1158>
   439cc:	d9801417 	ldw	r6,80(sp)
   439d0:	0005883a 	mov	r2,zero
   439d4:	00cffc34 	movhi	r3,16368
   439d8:	180b883a 	mov	r5,r3
   439dc:	880f883a 	mov	r7,r17
   439e0:	1009883a 	mov	r4,r2
   439e4:	00488400 	call	48840 <__subdf3>
   439e8:	d9401917 	ldw	r5,100(sp)
   439ec:	180f883a 	mov	r7,r3
   439f0:	b009883a 	mov	r4,r22
   439f4:	100d883a 	mov	r6,r2
   439f8:	00490600 	call	49060 <__gtdf2>
   439fc:	00bda216 	blt	zero,r2,43088 <_dtoa_r+0x6dc>
   43a00:	d8c00317 	ldw	r3,12(sp)
   43a04:	00800044 	movi	r2,1
   43a08:	10c01216 	blt	r2,r3,43a54 <_dtoa_r+0x10a8>
   43a0c:	003d4506 	br	42f24 <_dtoa_r+0x578>
   43a10:	d9801417 	ldw	r6,80(sp)
   43a14:	0005883a 	mov	r2,zero
   43a18:	00cffc34 	movhi	r3,16368
   43a1c:	180b883a 	mov	r5,r3
   43a20:	880f883a 	mov	r7,r17
   43a24:	1009883a 	mov	r4,r2
   43a28:	00488400 	call	48840 <__subdf3>
   43a2c:	d9c01b17 	ldw	r7,108(sp)
   43a30:	180b883a 	mov	r5,r3
   43a34:	1009883a 	mov	r4,r2
   43a38:	b00d883a 	mov	r6,r22
   43a3c:	00491700 	call	49170 <__ltdf2>
   43a40:	103d9116 	blt	r2,zero,43088 <_dtoa_r+0x6dc>
   43a44:	d9800517 	ldw	r6,20(sp)
   43a48:	d9000317 	ldw	r4,12(sp)
   43a4c:	3105883a 	add	r2,r6,r4
   43a50:	e0bd3426 	beq	fp,r2,42f24 <_dtoa_r+0x578>
   43a54:	04500934 	movhi	r17,16420
   43a58:	0021883a 	mov	r16,zero
   43a5c:	b80b883a 	mov	r5,r23
   43a60:	b009883a 	mov	r4,r22
   43a64:	800d883a 	mov	r6,r16
   43a68:	880f883a 	mov	r7,r17
   43a6c:	00489340 	call	48934 <__muldf3>
   43a70:	d9401517 	ldw	r5,84(sp)
   43a74:	d9001417 	ldw	r4,80(sp)
   43a78:	880f883a 	mov	r7,r17
   43a7c:	000d883a 	mov	r6,zero
   43a80:	d8801a15 	stw	r2,104(sp)
   43a84:	d8c01b15 	stw	r3,108(sp)
   43a88:	00489340 	call	48934 <__muldf3>
   43a8c:	180b883a 	mov	r5,r3
   43a90:	1009883a 	mov	r4,r2
   43a94:	1823883a 	mov	r17,r3
   43a98:	1021883a 	mov	r16,r2
   43a9c:	00492f00 	call	492f0 <__fixdfsi>
   43aa0:	1009883a 	mov	r4,r2
   43aa4:	102b883a 	mov	r21,r2
   43aa8:	00491f80 	call	491f8 <__floatsidf>
   43aac:	880b883a 	mov	r5,r17
   43ab0:	8009883a 	mov	r4,r16
   43ab4:	180f883a 	mov	r7,r3
   43ab8:	100d883a 	mov	r6,r2
   43abc:	00488400 	call	48840 <__subdf3>
   43ac0:	1021883a 	mov	r16,r2
   43ac4:	d9001b17 	ldw	r4,108(sp)
   43ac8:	1823883a 	mov	r17,r3
   43acc:	dc001415 	stw	r16,80(sp)
   43ad0:	ad400c04 	addi	r21,r21,48
   43ad4:	dc401515 	stw	r17,84(sp)
   43ad8:	d8801a17 	ldw	r2,104(sp)
   43adc:	e5400005 	stb	r21,0(fp)
   43ae0:	202f883a 	mov	r23,r4
   43ae4:	d9c01b17 	ldw	r7,108(sp)
   43ae8:	d9001417 	ldw	r4,80(sp)
   43aec:	880b883a 	mov	r5,r17
   43af0:	100d883a 	mov	r6,r2
   43af4:	102d883a 	mov	r22,r2
   43af8:	e7000044 	addi	fp,fp,1
   43afc:	00491700 	call	49170 <__ltdf2>
   43b00:	103fc30e 	bge	r2,zero,43a10 <_dtoa_r+0x1064>
   43b04:	d9000417 	ldw	r4,16(sp)
   43b08:	d9000d15 	stw	r4,52(sp)
   43b0c:	003d7106 	br	430d4 <_dtoa_r+0x728>
   43b10:	d9801717 	ldw	r6,92(sp)
   43b14:	00800084 	movi	r2,2
   43b18:	11bde60e 	bge	r2,r6,432b4 <_dtoa_r+0x908>
   43b1c:	203cfb1e 	bne	r4,zero,42f0c <_dtoa_r+0x560>
   43b20:	d9001617 	ldw	r4,88(sp)
   43b24:	900b883a 	mov	r5,r18
   43b28:	01800144 	movi	r6,5
   43b2c:	000f883a 	mov	r7,zero
   43b30:	00467f40 	call	467f4 <__multadd>
   43b34:	d9000717 	ldw	r4,28(sp)
   43b38:	100b883a 	mov	r5,r2
   43b3c:	1025883a 	mov	r18,r2
   43b40:	0045c9c0 	call	45c9c <__mcmp>
   43b44:	00bcf10e 	bge	zero,r2,42f0c <_dtoa_r+0x560>
   43b48:	d8c00d17 	ldw	r3,52(sp)
   43b4c:	d9000517 	ldw	r4,20(sp)
   43b50:	d8000615 	stw	zero,24(sp)
   43b54:	18c00044 	addi	r3,r3,1
   43b58:	d8c00d15 	stw	r3,52(sp)
   43b5c:	00800c44 	movi	r2,49
   43b60:	27000044 	addi	fp,r4,1
   43b64:	20800005 	stb	r2,0(r4)
   43b68:	003e8906 	br	43590 <_dtoa_r+0xbe4>
   43b6c:	d8c00517 	ldw	r3,20(sp)
   43b70:	003bc206 	br	42a7c <_dtoa_r+0xd0>
   43b74:	018001b4 	movhi	r6,6
   43b78:	31808404 	addi	r6,r6,528
   43b7c:	30c00917 	ldw	r3,36(r6)
   43b80:	30800817 	ldw	r2,32(r6)
   43b84:	d9001217 	ldw	r4,72(sp)
   43b88:	d9401317 	ldw	r5,76(sp)
   43b8c:	180f883a 	mov	r7,r3
   43b90:	100d883a 	mov	r6,r2
   43b94:	0048cf80 	call	48cf8 <__divdf3>
   43b98:	948003cc 	andi	r18,r18,15
   43b9c:	058000c4 	movi	r22,3
   43ba0:	1029883a 	mov	r20,r2
   43ba4:	182b883a 	mov	r21,r3
   43ba8:	003c8906 	br	42dd0 <_dtoa_r+0x424>
   43bac:	d9001017 	ldw	r4,64(sp)
   43bb0:	d9800917 	ldw	r6,36(sp)
   43bb4:	0025883a 	mov	r18,zero
   43bb8:	1105c83a 	sub	r2,r2,r4
   43bbc:	2089883a 	add	r4,r4,r2
   43bc0:	308d883a 	add	r6,r6,r2
   43bc4:	d9001015 	stw	r4,64(sp)
   43bc8:	d9800915 	stw	r6,36(sp)
   43bcc:	003e3206 	br	43498 <_dtoa_r+0xaec>
   43bd0:	28800044 	addi	r2,r5,1
   43bd4:	27000044 	addi	fp,r4,1
   43bd8:	20800005 	stb	r2,0(r4)
   43bdc:	003e6c06 	br	43590 <_dtoa_r+0xbe4>
   43be0:	d8800f17 	ldw	r2,60(sp)
   43be4:	00bce016 	blt	zero,r2,42f68 <_dtoa_r+0x5bc>
   43be8:	d9800f17 	ldw	r6,60(sp)
   43bec:	303cc51e 	bne	r6,zero,42f04 <_dtoa_r+0x558>
   43bf0:	0005883a 	mov	r2,zero
   43bf4:	00d00534 	movhi	r3,16404
   43bf8:	980b883a 	mov	r5,r19
   43bfc:	180f883a 	mov	r7,r3
   43c00:	9009883a 	mov	r4,r18
   43c04:	100d883a 	mov	r6,r2
   43c08:	00489340 	call	48934 <__muldf3>
   43c0c:	180b883a 	mov	r5,r3
   43c10:	a80f883a 	mov	r7,r21
   43c14:	1009883a 	mov	r4,r2
   43c18:	a00d883a 	mov	r6,r20
   43c1c:	00490e80 	call	490e8 <__gedf2>
   43c20:	103cb80e 	bge	r2,zero,42f04 <_dtoa_r+0x558>
   43c24:	0027883a 	mov	r19,zero
   43c28:	0025883a 	mov	r18,zero
   43c2c:	003fc606 	br	43b48 <_dtoa_r+0x119c>
   43c30:	99400117 	ldw	r5,4(r19)
   43c34:	d9001617 	ldw	r4,88(sp)
   43c38:	00460c00 	call	460c0 <_Balloc>
   43c3c:	99800417 	ldw	r6,16(r19)
   43c40:	11000304 	addi	r4,r2,12
   43c44:	99400304 	addi	r5,r19,12
   43c48:	318d883a 	add	r6,r6,r6
   43c4c:	318d883a 	add	r6,r6,r6
   43c50:	31800204 	addi	r6,r6,8
   43c54:	1023883a 	mov	r17,r2
   43c58:	00459280 	call	45928 <memcpy>
   43c5c:	d9001617 	ldw	r4,88(sp)
   43c60:	880b883a 	mov	r5,r17
   43c64:	01800044 	movi	r6,1
   43c68:	00464840 	call	46484 <__lshift>
   43c6c:	100b883a 	mov	r5,r2
   43c70:	003d9c06 	br	432e4 <_dtoa_r+0x938>
   43c74:	00800e44 	movi	r2,57
   43c78:	b8807026 	beq	r23,r2,43e3c <_dtoa_r+0x1490>
   43c7c:	b8800044 	addi	r2,r23,1
   43c80:	b7000044 	addi	fp,r22,1
   43c84:	b0800005 	stb	r2,0(r22)
   43c88:	003e4106 	br	43590 <_dtoa_r+0xbe4>
   43c8c:	d8800317 	ldw	r2,12(sp)
   43c90:	018001b4 	movhi	r6,6
   43c94:	31805204 	addi	r6,r6,328
   43c98:	b009883a 	mov	r4,r22
   43c9c:	100e90fa 	slli	r7,r2,3
   43ca0:	b80b883a 	mov	r5,r23
   43ca4:	398f883a 	add	r7,r7,r6
   43ca8:	38bffe17 	ldw	r2,-8(r7)
   43cac:	d9800517 	ldw	r6,20(sp)
   43cb0:	38ffff17 	ldw	r3,-4(r7)
   43cb4:	37000044 	addi	fp,r6,1
   43cb8:	180f883a 	mov	r7,r3
   43cbc:	100d883a 	mov	r6,r2
   43cc0:	00489340 	call	48934 <__muldf3>
   43cc4:	a80b883a 	mov	r5,r21
   43cc8:	a009883a 	mov	r4,r20
   43ccc:	182f883a 	mov	r23,r3
   43cd0:	102d883a 	mov	r22,r2
   43cd4:	00492f00 	call	492f0 <__fixdfsi>
   43cd8:	1009883a 	mov	r4,r2
   43cdc:	1027883a 	mov	r19,r2
   43ce0:	00491f80 	call	491f8 <__floatsidf>
   43ce4:	a80b883a 	mov	r5,r21
   43ce8:	a009883a 	mov	r4,r20
   43cec:	180f883a 	mov	r7,r3
   43cf0:	100d883a 	mov	r6,r2
   43cf4:	00488400 	call	48840 <__subdf3>
   43cf8:	180b883a 	mov	r5,r3
   43cfc:	d8c00517 	ldw	r3,20(sp)
   43d00:	9cc00c04 	addi	r19,r19,48
   43d04:	1009883a 	mov	r4,r2
   43d08:	1cc00005 	stb	r19,0(r3)
   43d0c:	2021883a 	mov	r16,r4
   43d10:	d9000317 	ldw	r4,12(sp)
   43d14:	00800044 	movi	r2,1
   43d18:	2823883a 	mov	r17,r5
   43d1c:	20802226 	beq	r4,r2,43da8 <_dtoa_r+0x13fc>
   43d20:	1029883a 	mov	r20,r2
   43d24:	0005883a 	mov	r2,zero
   43d28:	00d00934 	movhi	r3,16420
   43d2c:	180f883a 	mov	r7,r3
   43d30:	100d883a 	mov	r6,r2
   43d34:	880b883a 	mov	r5,r17
   43d38:	8009883a 	mov	r4,r16
   43d3c:	00489340 	call	48934 <__muldf3>
   43d40:	180b883a 	mov	r5,r3
   43d44:	1009883a 	mov	r4,r2
   43d48:	1823883a 	mov	r17,r3
   43d4c:	1021883a 	mov	r16,r2
   43d50:	00492f00 	call	492f0 <__fixdfsi>
   43d54:	1009883a 	mov	r4,r2
   43d58:	102b883a 	mov	r21,r2
   43d5c:	00491f80 	call	491f8 <__floatsidf>
   43d60:	880b883a 	mov	r5,r17
   43d64:	8009883a 	mov	r4,r16
   43d68:	180f883a 	mov	r7,r3
   43d6c:	100d883a 	mov	r6,r2
   43d70:	00488400 	call	48840 <__subdf3>
   43d74:	180b883a 	mov	r5,r3
   43d78:	d8c00517 	ldw	r3,20(sp)
   43d7c:	1009883a 	mov	r4,r2
   43d80:	ad400c04 	addi	r21,r21,48
   43d84:	1d05883a 	add	r2,r3,r20
   43d88:	15400005 	stb	r21,0(r2)
   43d8c:	2021883a 	mov	r16,r4
   43d90:	d9000317 	ldw	r4,12(sp)
   43d94:	a5000044 	addi	r20,r20,1
   43d98:	2823883a 	mov	r17,r5
   43d9c:	a13fe11e 	bne	r20,r4,43d24 <_dtoa_r+0x1378>
   43da0:	e505883a 	add	r2,fp,r20
   43da4:	173fffc4 	addi	fp,r2,-1
   43da8:	0025883a 	mov	r18,zero
   43dac:	04cff834 	movhi	r19,16352
   43db0:	b009883a 	mov	r4,r22
   43db4:	b80b883a 	mov	r5,r23
   43db8:	900d883a 	mov	r6,r18
   43dbc:	980f883a 	mov	r7,r19
   43dc0:	00488c00 	call	488c0 <__adddf3>
   43dc4:	180b883a 	mov	r5,r3
   43dc8:	1009883a 	mov	r4,r2
   43dcc:	800d883a 	mov	r6,r16
   43dd0:	880f883a 	mov	r7,r17
   43dd4:	00491700 	call	49170 <__ltdf2>
   43dd8:	103cab16 	blt	r2,zero,43088 <_dtoa_r+0x6dc>
   43ddc:	0009883a 	mov	r4,zero
   43de0:	980b883a 	mov	r5,r19
   43de4:	b80f883a 	mov	r7,r23
   43de8:	b00d883a 	mov	r6,r22
   43dec:	00488400 	call	48840 <__subdf3>
   43df0:	180b883a 	mov	r5,r3
   43df4:	880f883a 	mov	r7,r17
   43df8:	1009883a 	mov	r4,r2
   43dfc:	800d883a 	mov	r6,r16
   43e00:	00490600 	call	49060 <__gtdf2>
   43e04:	00bc470e 	bge	zero,r2,42f24 <_dtoa_r+0x578>
   43e08:	00c00c04 	movi	r3,48
   43e0c:	e73fffc4 	addi	fp,fp,-1
   43e10:	e0800007 	ldb	r2,0(fp)
   43e14:	10fffd26 	beq	r2,r3,43e0c <_dtoa_r+0x1460>
   43e18:	d9800417 	ldw	r6,16(sp)
   43e1c:	e7000044 	addi	fp,fp,1
   43e20:	d9800d15 	stw	r6,52(sp)
   43e24:	003cab06 	br	430d4 <_dtoa_r+0x728>
   43e28:	d8c00f17 	ldw	r3,60(sp)
   43e2c:	d9001117 	ldw	r4,68(sp)
   43e30:	20e1c83a 	sub	r16,r4,r3
   43e34:	0007883a 	mov	r3,zero
   43e38:	003d9b06 	br	434a8 <_dtoa_r+0xafc>
   43e3c:	00800e44 	movi	r2,57
   43e40:	b0800005 	stb	r2,0(r22)
   43e44:	b5800044 	addi	r22,r22,1
   43e48:	003dc106 	br	43550 <_dtoa_r+0xba4>
   43e4c:	05800084 	movi	r22,2
   43e50:	003bf706 	br	42e30 <_dtoa_r+0x484>
   43e54:	d9000f17 	ldw	r4,60(sp)
   43e58:	013c000e 	bge	zero,r4,42e5c <_dtoa_r+0x4b0>
   43e5c:	d9800e17 	ldw	r6,56(sp)
   43e60:	01bc300e 	bge	zero,r6,42f24 <_dtoa_r+0x578>
   43e64:	0005883a 	mov	r2,zero
   43e68:	00d00934 	movhi	r3,16420
   43e6c:	a80b883a 	mov	r5,r21
   43e70:	180f883a 	mov	r7,r3
   43e74:	a009883a 	mov	r4,r20
   43e78:	100d883a 	mov	r6,r2
   43e7c:	00489340 	call	48934 <__muldf3>
   43e80:	b1000044 	addi	r4,r22,1
   43e84:	1021883a 	mov	r16,r2
   43e88:	1823883a 	mov	r17,r3
   43e8c:	00491f80 	call	491f8 <__floatsidf>
   43e90:	880b883a 	mov	r5,r17
   43e94:	8009883a 	mov	r4,r16
   43e98:	180f883a 	mov	r7,r3
   43e9c:	100d883a 	mov	r6,r2
   43ea0:	00489340 	call	48934 <__muldf3>
   43ea4:	0011883a 	mov	r8,zero
   43ea8:	02500734 	movhi	r9,16412
   43eac:	180b883a 	mov	r5,r3
   43eb0:	480f883a 	mov	r7,r9
   43eb4:	1009883a 	mov	r4,r2
   43eb8:	400d883a 	mov	r6,r8
   43ebc:	00488c00 	call	488c0 <__adddf3>
   43ec0:	102d883a 	mov	r22,r2
   43ec4:	00bf3034 	movhi	r2,64704
   43ec8:	10ef883a 	add	r23,r2,r3
   43ecc:	d8800d17 	ldw	r2,52(sp)
   43ed0:	d8c00e17 	ldw	r3,56(sp)
   43ed4:	8029883a 	mov	r20,r16
   43ed8:	10bfffc4 	addi	r2,r2,-1
   43edc:	882b883a 	mov	r21,r17
   43ee0:	d8800415 	stw	r2,16(sp)
   43ee4:	d8c00315 	stw	r3,12(sp)
   43ee8:	003e8306 	br	438f8 <_dtoa_r+0xf4c>
   43eec:	d8800117 	ldw	r2,4(sp)
   43ef0:	dc001117 	ldw	r16,68(sp)
   43ef4:	dc801017 	ldw	r18,64(sp)
   43ef8:	00c00d84 	movi	r3,54
   43efc:	1887c83a 	sub	r3,r3,r2
   43f00:	003d6906 	br	434a8 <_dtoa_r+0xafc>
   43f04:	01800044 	movi	r6,1
   43f08:	3021883a 	mov	r16,r6
   43f0c:	d9800f15 	stw	r6,60(sp)
   43f10:	d9802615 	stw	r6,152(sp)
   43f14:	d9800e15 	stw	r6,56(sp)
   43f18:	003b9306 	br	42d68 <_dtoa_r+0x3bc>
   43f1c:	b021883a 	mov	r16,r22
   43f20:	dd800f15 	stw	r22,60(sp)
   43f24:	003b9006 	br	42d68 <_dtoa_r+0x3bc>
   43f28:	103e221e 	bne	r2,zero,437b4 <_dtoa_r+0xe08>
   43f2c:	b880004c 	andi	r2,r23,1
   43f30:	1005003a 	cmpeq	r2,r2,zero
   43f34:	103e1f1e 	bne	r2,zero,437b4 <_dtoa_r+0xe08>
   43f38:	003e1b06 	br	437a8 <_dtoa_r+0xdfc>
   43f3c:	d9001617 	ldw	r4,88(sp)
   43f40:	980b883a 	mov	r5,r19
   43f44:	01800284 	movi	r6,10
   43f48:	000f883a 	mov	r7,zero
   43f4c:	00467f40 	call	467f4 <__multadd>
   43f50:	d8c00e17 	ldw	r3,56(sp)
   43f54:	1027883a 	mov	r19,r2
   43f58:	d8c00f15 	stw	r3,60(sp)
   43f5c:	003cd306 	br	432ac <_dtoa_r+0x900>

00043f60 <_fflush_r>:
   43f60:	defffb04 	addi	sp,sp,-20
   43f64:	dcc00315 	stw	r19,12(sp)
   43f68:	dc800215 	stw	r18,8(sp)
   43f6c:	dfc00415 	stw	ra,16(sp)
   43f70:	dc400115 	stw	r17,4(sp)
   43f74:	dc000015 	stw	r16,0(sp)
   43f78:	2027883a 	mov	r19,r4
   43f7c:	2825883a 	mov	r18,r5
   43f80:	20000226 	beq	r4,zero,43f8c <_fflush_r+0x2c>
   43f84:	20800e17 	ldw	r2,56(r4)
   43f88:	10005626 	beq	r2,zero,440e4 <_fflush_r+0x184>
   43f8c:	9100030b 	ldhu	r4,12(r18)
   43f90:	20ffffcc 	andi	r3,r4,65535
   43f94:	18e0001c 	xori	r3,r3,32768
   43f98:	18e00004 	addi	r3,r3,-32768
   43f9c:	1880020c 	andi	r2,r3,8
   43fa0:	1000261e 	bne	r2,zero,4403c <_fflush_r+0xdc>
   43fa4:	90c00117 	ldw	r3,4(r18)
   43fa8:	20820014 	ori	r2,r4,2048
   43fac:	9080030d 	sth	r2,12(r18)
   43fb0:	1009883a 	mov	r4,r2
   43fb4:	00c0400e 	bge	zero,r3,440b8 <_fflush_r+0x158>
   43fb8:	92000a17 	ldw	r8,40(r18)
   43fbc:	40004026 	beq	r8,zero,440c0 <_fflush_r+0x160>
   43fc0:	2084000c 	andi	r2,r4,4096
   43fc4:	10005326 	beq	r2,zero,44114 <_fflush_r+0x1b4>
   43fc8:	94001417 	ldw	r16,80(r18)
   43fcc:	9080030b 	ldhu	r2,12(r18)
   43fd0:	1080010c 	andi	r2,r2,4
   43fd4:	1000481e 	bne	r2,zero,440f8 <_fflush_r+0x198>
   43fd8:	91400717 	ldw	r5,28(r18)
   43fdc:	9809883a 	mov	r4,r19
   43fe0:	800d883a 	mov	r6,r16
   43fe4:	000f883a 	mov	r7,zero
   43fe8:	403ee83a 	callr	r8
   43fec:	8080261e 	bne	r16,r2,44088 <_fflush_r+0x128>
   43ff0:	9080030b 	ldhu	r2,12(r18)
   43ff4:	91000417 	ldw	r4,16(r18)
   43ff8:	90000115 	stw	zero,4(r18)
   43ffc:	10bdffcc 	andi	r2,r2,63487
   44000:	10ffffcc 	andi	r3,r2,65535
   44004:	18c4000c 	andi	r3,r3,4096
   44008:	9080030d 	sth	r2,12(r18)
   4400c:	91000015 	stw	r4,0(r18)
   44010:	18002b26 	beq	r3,zero,440c0 <_fflush_r+0x160>
   44014:	0007883a 	mov	r3,zero
   44018:	1805883a 	mov	r2,r3
   4401c:	94001415 	stw	r16,80(r18)
   44020:	dfc00417 	ldw	ra,16(sp)
   44024:	dcc00317 	ldw	r19,12(sp)
   44028:	dc800217 	ldw	r18,8(sp)
   4402c:	dc400117 	ldw	r17,4(sp)
   44030:	dc000017 	ldw	r16,0(sp)
   44034:	dec00504 	addi	sp,sp,20
   44038:	f800283a 	ret
   4403c:	94400417 	ldw	r17,16(r18)
   44040:	88001f26 	beq	r17,zero,440c0 <_fflush_r+0x160>
   44044:	90800017 	ldw	r2,0(r18)
   44048:	18c000cc 	andi	r3,r3,3
   4404c:	94400015 	stw	r17,0(r18)
   44050:	1461c83a 	sub	r16,r2,r17
   44054:	18002526 	beq	r3,zero,440ec <_fflush_r+0x18c>
   44058:	0005883a 	mov	r2,zero
   4405c:	90800215 	stw	r2,8(r18)
   44060:	0400170e 	bge	zero,r16,440c0 <_fflush_r+0x160>
   44064:	90c00917 	ldw	r3,36(r18)
   44068:	91400717 	ldw	r5,28(r18)
   4406c:	880d883a 	mov	r6,r17
   44070:	800f883a 	mov	r7,r16
   44074:	9809883a 	mov	r4,r19
   44078:	183ee83a 	callr	r3
   4407c:	88a3883a 	add	r17,r17,r2
   44080:	80a1c83a 	sub	r16,r16,r2
   44084:	00bff616 	blt	zero,r2,44060 <_fflush_r+0x100>
   44088:	9080030b 	ldhu	r2,12(r18)
   4408c:	00ffffc4 	movi	r3,-1
   44090:	10801014 	ori	r2,r2,64
   44094:	9080030d 	sth	r2,12(r18)
   44098:	1805883a 	mov	r2,r3
   4409c:	dfc00417 	ldw	ra,16(sp)
   440a0:	dcc00317 	ldw	r19,12(sp)
   440a4:	dc800217 	ldw	r18,8(sp)
   440a8:	dc400117 	ldw	r17,4(sp)
   440ac:	dc000017 	ldw	r16,0(sp)
   440b0:	dec00504 	addi	sp,sp,20
   440b4:	f800283a 	ret
   440b8:	90800f17 	ldw	r2,60(r18)
   440bc:	00bfbe16 	blt	zero,r2,43fb8 <_fflush_r+0x58>
   440c0:	0007883a 	mov	r3,zero
   440c4:	1805883a 	mov	r2,r3
   440c8:	dfc00417 	ldw	ra,16(sp)
   440cc:	dcc00317 	ldw	r19,12(sp)
   440d0:	dc800217 	ldw	r18,8(sp)
   440d4:	dc400117 	ldw	r17,4(sp)
   440d8:	dc000017 	ldw	r16,0(sp)
   440dc:	dec00504 	addi	sp,sp,20
   440e0:	f800283a 	ret
   440e4:	00441f80 	call	441f8 <__sinit>
   440e8:	003fa806 	br	43f8c <_fflush_r+0x2c>
   440ec:	90800517 	ldw	r2,20(r18)
   440f0:	90800215 	stw	r2,8(r18)
   440f4:	003fda06 	br	44060 <_fflush_r+0x100>
   440f8:	90800117 	ldw	r2,4(r18)
   440fc:	90c00c17 	ldw	r3,48(r18)
   44100:	80a1c83a 	sub	r16,r16,r2
   44104:	183fb426 	beq	r3,zero,43fd8 <_fflush_r+0x78>
   44108:	90800f17 	ldw	r2,60(r18)
   4410c:	80a1c83a 	sub	r16,r16,r2
   44110:	003fb106 	br	43fd8 <_fflush_r+0x78>
   44114:	91400717 	ldw	r5,28(r18)
   44118:	9809883a 	mov	r4,r19
   4411c:	000d883a 	mov	r6,zero
   44120:	01c00044 	movi	r7,1
   44124:	403ee83a 	callr	r8
   44128:	1021883a 	mov	r16,r2
   4412c:	00bfffc4 	movi	r2,-1
   44130:	80800226 	beq	r16,r2,4413c <_fflush_r+0x1dc>
   44134:	92000a17 	ldw	r8,40(r18)
   44138:	003fa406 	br	43fcc <_fflush_r+0x6c>
   4413c:	98c00017 	ldw	r3,0(r19)
   44140:	00800744 	movi	r2,29
   44144:	18bfde26 	beq	r3,r2,440c0 <_fflush_r+0x160>
   44148:	9080030b 	ldhu	r2,12(r18)
   4414c:	8007883a 	mov	r3,r16
   44150:	10801014 	ori	r2,r2,64
   44154:	9080030d 	sth	r2,12(r18)
   44158:	003fcf06 	br	44098 <_fflush_r+0x138>

0004415c <fflush>:
   4415c:	01400134 	movhi	r5,4
   44160:	294fd804 	addi	r5,r5,16224
   44164:	2007883a 	mov	r3,r4
   44168:	20000526 	beq	r4,zero,44180 <fflush+0x24>
   4416c:	008001b4 	movhi	r2,6
   44170:	10877404 	addi	r2,r2,7632
   44174:	11000017 	ldw	r4,0(r2)
   44178:	180b883a 	mov	r5,r3
   4417c:	0043f601 	jmpi	43f60 <_fflush_r>
   44180:	008001b4 	movhi	r2,6
   44184:	10877504 	addi	r2,r2,7636
   44188:	11000017 	ldw	r4,0(r2)
   4418c:	0044d2c1 	jmpi	44d2c <_fwalk_reent>

00044190 <std>:
   44190:	00800134 	movhi	r2,4
   44194:	109c8204 	addi	r2,r2,29192
   44198:	20800b15 	stw	r2,44(r4)
   4419c:	00800134 	movhi	r2,4
   441a0:	109cbd04 	addi	r2,r2,29428
   441a4:	20800815 	stw	r2,32(r4)
   441a8:	00c00134 	movhi	r3,4
   441ac:	18dc9e04 	addi	r3,r3,29304
   441b0:	00800134 	movhi	r2,4
   441b4:	109c8404 	addi	r2,r2,29200
   441b8:	2140030d 	sth	r5,12(r4)
   441bc:	2180038d 	sth	r6,14(r4)
   441c0:	20c00915 	stw	r3,36(r4)
   441c4:	20800a15 	stw	r2,40(r4)
   441c8:	20000015 	stw	zero,0(r4)
   441cc:	20000115 	stw	zero,4(r4)
   441d0:	20000215 	stw	zero,8(r4)
   441d4:	20000415 	stw	zero,16(r4)
   441d8:	20000515 	stw	zero,20(r4)
   441dc:	20000615 	stw	zero,24(r4)
   441e0:	21000715 	stw	r4,28(r4)
   441e4:	f800283a 	ret

000441e8 <__sfp_lock_acquire>:
   441e8:	f800283a 	ret

000441ec <__sfp_lock_release>:
   441ec:	f800283a 	ret

000441f0 <__sinit_lock_acquire>:
   441f0:	f800283a 	ret

000441f4 <__sinit_lock_release>:
   441f4:	f800283a 	ret

000441f8 <__sinit>:
   441f8:	20800e17 	ldw	r2,56(r4)
   441fc:	defffd04 	addi	sp,sp,-12
   44200:	dc400115 	stw	r17,4(sp)
   44204:	dc000015 	stw	r16,0(sp)
   44208:	dfc00215 	stw	ra,8(sp)
   4420c:	04400044 	movi	r17,1
   44210:	01400104 	movi	r5,4
   44214:	000d883a 	mov	r6,zero
   44218:	2021883a 	mov	r16,r4
   4421c:	2200bb04 	addi	r8,r4,748
   44220:	200f883a 	mov	r7,r4
   44224:	10000526 	beq	r2,zero,4423c <__sinit+0x44>
   44228:	dfc00217 	ldw	ra,8(sp)
   4422c:	dc400117 	ldw	r17,4(sp)
   44230:	dc000017 	ldw	r16,0(sp)
   44234:	dec00304 	addi	sp,sp,12
   44238:	f800283a 	ret
   4423c:	21000117 	ldw	r4,4(r4)
   44240:	00800134 	movhi	r2,4
   44244:	1090b704 	addi	r2,r2,17116
   44248:	00c000c4 	movi	r3,3
   4424c:	80800f15 	stw	r2,60(r16)
   44250:	80c0b915 	stw	r3,740(r16)
   44254:	8200ba15 	stw	r8,744(r16)
   44258:	84400e15 	stw	r17,56(r16)
   4425c:	8000b815 	stw	zero,736(r16)
   44260:	00441900 	call	44190 <std>
   44264:	81000217 	ldw	r4,8(r16)
   44268:	880d883a 	mov	r6,r17
   4426c:	800f883a 	mov	r7,r16
   44270:	01400284 	movi	r5,10
   44274:	00441900 	call	44190 <std>
   44278:	81000317 	ldw	r4,12(r16)
   4427c:	800f883a 	mov	r7,r16
   44280:	01400484 	movi	r5,18
   44284:	01800084 	movi	r6,2
   44288:	dfc00217 	ldw	ra,8(sp)
   4428c:	dc400117 	ldw	r17,4(sp)
   44290:	dc000017 	ldw	r16,0(sp)
   44294:	dec00304 	addi	sp,sp,12
   44298:	00441901 	jmpi	44190 <std>

0004429c <__fp_lock>:
   4429c:	0005883a 	mov	r2,zero
   442a0:	f800283a 	ret

000442a4 <__fp_unlock>:
   442a4:	0005883a 	mov	r2,zero
   442a8:	f800283a 	ret

000442ac <__fp_unlock_all>:
   442ac:	008001b4 	movhi	r2,6
   442b0:	10877404 	addi	r2,r2,7632
   442b4:	11000017 	ldw	r4,0(r2)
   442b8:	01400134 	movhi	r5,4
   442bc:	2950a904 	addi	r5,r5,17060
   442c0:	0044df41 	jmpi	44df4 <_fwalk>

000442c4 <__fp_lock_all>:
   442c4:	008001b4 	movhi	r2,6
   442c8:	10877404 	addi	r2,r2,7632
   442cc:	11000017 	ldw	r4,0(r2)
   442d0:	01400134 	movhi	r5,4
   442d4:	2950a704 	addi	r5,r5,17052
   442d8:	0044df41 	jmpi	44df4 <_fwalk>

000442dc <_cleanup_r>:
   442dc:	01400134 	movhi	r5,4
   442e0:	295daf04 	addi	r5,r5,30396
   442e4:	0044df41 	jmpi	44df4 <_fwalk>

000442e8 <_cleanup>:
   442e8:	008001b4 	movhi	r2,6
   442ec:	10877504 	addi	r2,r2,7636
   442f0:	11000017 	ldw	r4,0(r2)
   442f4:	00442dc1 	jmpi	442dc <_cleanup_r>

000442f8 <__sfmoreglue>:
   442f8:	defffc04 	addi	sp,sp,-16
   442fc:	dc400115 	stw	r17,4(sp)
   44300:	2c401724 	muli	r17,r5,92
   44304:	dc800215 	stw	r18,8(sp)
   44308:	2825883a 	mov	r18,r5
   4430c:	89400304 	addi	r5,r17,12
   44310:	dc000015 	stw	r16,0(sp)
   44314:	dfc00315 	stw	ra,12(sp)
   44318:	00451040 	call	45104 <_malloc_r>
   4431c:	0021883a 	mov	r16,zero
   44320:	880d883a 	mov	r6,r17
   44324:	000b883a 	mov	r5,zero
   44328:	10000626 	beq	r2,zero,44344 <__sfmoreglue+0x4c>
   4432c:	11000304 	addi	r4,r2,12
   44330:	14800115 	stw	r18,4(r2)
   44334:	10000015 	stw	zero,0(r2)
   44338:	11000215 	stw	r4,8(r2)
   4433c:	1021883a 	mov	r16,r2
   44340:	0045aa80 	call	45aa8 <memset>
   44344:	8005883a 	mov	r2,r16
   44348:	dfc00317 	ldw	ra,12(sp)
   4434c:	dc800217 	ldw	r18,8(sp)
   44350:	dc400117 	ldw	r17,4(sp)
   44354:	dc000017 	ldw	r16,0(sp)
   44358:	dec00404 	addi	sp,sp,16
   4435c:	f800283a 	ret

00044360 <__sfp>:
   44360:	defffd04 	addi	sp,sp,-12
   44364:	008001b4 	movhi	r2,6
   44368:	10877504 	addi	r2,r2,7636
   4436c:	dc000015 	stw	r16,0(sp)
   44370:	14000017 	ldw	r16,0(r2)
   44374:	dc400115 	stw	r17,4(sp)
   44378:	dfc00215 	stw	ra,8(sp)
   4437c:	80800e17 	ldw	r2,56(r16)
   44380:	2023883a 	mov	r17,r4
   44384:	10002626 	beq	r2,zero,44420 <__sfp+0xc0>
   44388:	8400b804 	addi	r16,r16,736
   4438c:	80800117 	ldw	r2,4(r16)
   44390:	81000217 	ldw	r4,8(r16)
   44394:	10ffffc4 	addi	r3,r2,-1
   44398:	18000916 	blt	r3,zero,443c0 <__sfp+0x60>
   4439c:	2080030f 	ldh	r2,12(r4)
   443a0:	10000b26 	beq	r2,zero,443d0 <__sfp+0x70>
   443a4:	017fffc4 	movi	r5,-1
   443a8:	00000206 	br	443b4 <__sfp+0x54>
   443ac:	2080030f 	ldh	r2,12(r4)
   443b0:	10000726 	beq	r2,zero,443d0 <__sfp+0x70>
   443b4:	18ffffc4 	addi	r3,r3,-1
   443b8:	21001704 	addi	r4,r4,92
   443bc:	197ffb1e 	bne	r3,r5,443ac <__sfp+0x4c>
   443c0:	80800017 	ldw	r2,0(r16)
   443c4:	10001926 	beq	r2,zero,4442c <__sfp+0xcc>
   443c8:	1021883a 	mov	r16,r2
   443cc:	003fef06 	br	4438c <__sfp+0x2c>
   443d0:	00bfffc4 	movi	r2,-1
   443d4:	00c00044 	movi	r3,1
   443d8:	2080038d 	sth	r2,14(r4)
   443dc:	20c0030d 	sth	r3,12(r4)
   443e0:	20000015 	stw	zero,0(r4)
   443e4:	20000215 	stw	zero,8(r4)
   443e8:	20000115 	stw	zero,4(r4)
   443ec:	20000415 	stw	zero,16(r4)
   443f0:	20000515 	stw	zero,20(r4)
   443f4:	20000615 	stw	zero,24(r4)
   443f8:	20000c15 	stw	zero,48(r4)
   443fc:	20000d15 	stw	zero,52(r4)
   44400:	20001115 	stw	zero,68(r4)
   44404:	20001215 	stw	zero,72(r4)
   44408:	2005883a 	mov	r2,r4
   4440c:	dfc00217 	ldw	ra,8(sp)
   44410:	dc400117 	ldw	r17,4(sp)
   44414:	dc000017 	ldw	r16,0(sp)
   44418:	dec00304 	addi	sp,sp,12
   4441c:	f800283a 	ret
   44420:	8009883a 	mov	r4,r16
   44424:	00441f80 	call	441f8 <__sinit>
   44428:	003fd706 	br	44388 <__sfp+0x28>
   4442c:	8809883a 	mov	r4,r17
   44430:	01400104 	movi	r5,4
   44434:	00442f80 	call	442f8 <__sfmoreglue>
   44438:	80800015 	stw	r2,0(r16)
   4443c:	103fe21e 	bne	r2,zero,443c8 <__sfp+0x68>
   44440:	00800304 	movi	r2,12
   44444:	0009883a 	mov	r4,zero
   44448:	88800015 	stw	r2,0(r17)
   4444c:	003fee06 	br	44408 <__sfp+0xa8>

00044450 <_malloc_trim_r>:
   44450:	defffb04 	addi	sp,sp,-20
   44454:	dcc00315 	stw	r19,12(sp)
   44458:	04c001b4 	movhi	r19,6
   4445c:	9cc1f004 	addi	r19,r19,1984
   44460:	dc800215 	stw	r18,8(sp)
   44464:	dc400115 	stw	r17,4(sp)
   44468:	dc000015 	stw	r16,0(sp)
   4446c:	2823883a 	mov	r17,r5
   44470:	2025883a 	mov	r18,r4
   44474:	dfc00415 	stw	ra,16(sp)
   44478:	004a3580 	call	4a358 <__malloc_lock>
   4447c:	98800217 	ldw	r2,8(r19)
   44480:	9009883a 	mov	r4,r18
   44484:	000b883a 	mov	r5,zero
   44488:	10c00117 	ldw	r3,4(r2)
   4448c:	00bfff04 	movi	r2,-4
   44490:	18a0703a 	and	r16,r3,r2
   44494:	8463c83a 	sub	r17,r16,r17
   44498:	8c43fbc4 	addi	r17,r17,4079
   4449c:	8822d33a 	srli	r17,r17,12
   444a0:	0083ffc4 	movi	r2,4095
   444a4:	8c7fffc4 	addi	r17,r17,-1
   444a8:	8822933a 	slli	r17,r17,12
   444ac:	1440060e 	bge	r2,r17,444c8 <_malloc_trim_r+0x78>
   444b0:	00471980 	call	47198 <_sbrk_r>
   444b4:	98c00217 	ldw	r3,8(r19)
   444b8:	9009883a 	mov	r4,r18
   444bc:	044bc83a 	sub	r5,zero,r17
   444c0:	80c7883a 	add	r3,r16,r3
   444c4:	10c00926 	beq	r2,r3,444ec <_malloc_trim_r+0x9c>
   444c8:	004a3780 	call	4a378 <__malloc_unlock>
   444cc:	0005883a 	mov	r2,zero
   444d0:	dfc00417 	ldw	ra,16(sp)
   444d4:	dcc00317 	ldw	r19,12(sp)
   444d8:	dc800217 	ldw	r18,8(sp)
   444dc:	dc400117 	ldw	r17,4(sp)
   444e0:	dc000017 	ldw	r16,0(sp)
   444e4:	dec00504 	addi	sp,sp,20
   444e8:	f800283a 	ret
   444ec:	9009883a 	mov	r4,r18
   444f0:	00471980 	call	47198 <_sbrk_r>
   444f4:	844dc83a 	sub	r6,r16,r17
   444f8:	00ffffc4 	movi	r3,-1
   444fc:	9009883a 	mov	r4,r18
   44500:	000b883a 	mov	r5,zero
   44504:	01c001b4 	movhi	r7,6
   44508:	39c79604 	addi	r7,r7,7768
   4450c:	31800054 	ori	r6,r6,1
   44510:	10c00926 	beq	r2,r3,44538 <_malloc_trim_r+0xe8>
   44514:	38800017 	ldw	r2,0(r7)
   44518:	98c00217 	ldw	r3,8(r19)
   4451c:	9009883a 	mov	r4,r18
   44520:	1445c83a 	sub	r2,r2,r17
   44524:	38800015 	stw	r2,0(r7)
   44528:	19800115 	stw	r6,4(r3)
   4452c:	004a3780 	call	4a378 <__malloc_unlock>
   44530:	00800044 	movi	r2,1
   44534:	003fe606 	br	444d0 <_malloc_trim_r+0x80>
   44538:	00471980 	call	47198 <_sbrk_r>
   4453c:	99800217 	ldw	r6,8(r19)
   44540:	100f883a 	mov	r7,r2
   44544:	9009883a 	mov	r4,r18
   44548:	1187c83a 	sub	r3,r2,r6
   4454c:	008003c4 	movi	r2,15
   44550:	19400054 	ori	r5,r3,1
   44554:	10ffdc0e 	bge	r2,r3,444c8 <_malloc_trim_r+0x78>
   44558:	008001b4 	movhi	r2,6
   4455c:	10877904 	addi	r2,r2,7652
   44560:	10c00017 	ldw	r3,0(r2)
   44564:	008001b4 	movhi	r2,6
   44568:	10879604 	addi	r2,r2,7768
   4456c:	31400115 	stw	r5,4(r6)
   44570:	38c7c83a 	sub	r3,r7,r3
   44574:	10c00015 	stw	r3,0(r2)
   44578:	003fd306 	br	444c8 <_malloc_trim_r+0x78>

0004457c <_free_r>:
   4457c:	defffd04 	addi	sp,sp,-12
   44580:	dc400115 	stw	r17,4(sp)
   44584:	dc000015 	stw	r16,0(sp)
   44588:	dfc00215 	stw	ra,8(sp)
   4458c:	2821883a 	mov	r16,r5
   44590:	2023883a 	mov	r17,r4
   44594:	28005a26 	beq	r5,zero,44700 <_free_r+0x184>
   44598:	004a3580 	call	4a358 <__malloc_lock>
   4459c:	823ffe04 	addi	r8,r16,-8
   445a0:	41400117 	ldw	r5,4(r8)
   445a4:	00bfff84 	movi	r2,-2
   445a8:	028001b4 	movhi	r10,6
   445ac:	5281f004 	addi	r10,r10,1984
   445b0:	288e703a 	and	r7,r5,r2
   445b4:	41cd883a 	add	r6,r8,r7
   445b8:	30c00117 	ldw	r3,4(r6)
   445bc:	51000217 	ldw	r4,8(r10)
   445c0:	00bfff04 	movi	r2,-4
   445c4:	1892703a 	and	r9,r3,r2
   445c8:	5017883a 	mov	r11,r10
   445cc:	31006726 	beq	r6,r4,4476c <_free_r+0x1f0>
   445d0:	2880004c 	andi	r2,r5,1
   445d4:	1005003a 	cmpeq	r2,r2,zero
   445d8:	32400115 	stw	r9,4(r6)
   445dc:	10001a1e 	bne	r2,zero,44648 <_free_r+0xcc>
   445e0:	000b883a 	mov	r5,zero
   445e4:	3247883a 	add	r3,r6,r9
   445e8:	18800117 	ldw	r2,4(r3)
   445ec:	1080004c 	andi	r2,r2,1
   445f0:	1000231e 	bne	r2,zero,44680 <_free_r+0x104>
   445f4:	280ac03a 	cmpne	r5,r5,zero
   445f8:	3a4f883a 	add	r7,r7,r9
   445fc:	2800451e 	bne	r5,zero,44714 <_free_r+0x198>
   44600:	31000217 	ldw	r4,8(r6)
   44604:	008001b4 	movhi	r2,6
   44608:	1081f204 	addi	r2,r2,1992
   4460c:	20807b26 	beq	r4,r2,447fc <_free_r+0x280>
   44610:	30800317 	ldw	r2,12(r6)
   44614:	3a07883a 	add	r3,r7,r8
   44618:	19c00015 	stw	r7,0(r3)
   4461c:	11000215 	stw	r4,8(r2)
   44620:	20800315 	stw	r2,12(r4)
   44624:	38800054 	ori	r2,r7,1
   44628:	40800115 	stw	r2,4(r8)
   4462c:	28001a26 	beq	r5,zero,44698 <_free_r+0x11c>
   44630:	8809883a 	mov	r4,r17
   44634:	dfc00217 	ldw	ra,8(sp)
   44638:	dc400117 	ldw	r17,4(sp)
   4463c:	dc000017 	ldw	r16,0(sp)
   44640:	dec00304 	addi	sp,sp,12
   44644:	004a3781 	jmpi	4a378 <__malloc_unlock>
   44648:	80bffe17 	ldw	r2,-8(r16)
   4464c:	50c00204 	addi	r3,r10,8
   44650:	4091c83a 	sub	r8,r8,r2
   44654:	41000217 	ldw	r4,8(r8)
   44658:	388f883a 	add	r7,r7,r2
   4465c:	20c06126 	beq	r4,r3,447e4 <_free_r+0x268>
   44660:	40800317 	ldw	r2,12(r8)
   44664:	3247883a 	add	r3,r6,r9
   44668:	000b883a 	mov	r5,zero
   4466c:	11000215 	stw	r4,8(r2)
   44670:	20800315 	stw	r2,12(r4)
   44674:	18800117 	ldw	r2,4(r3)
   44678:	1080004c 	andi	r2,r2,1
   4467c:	103fdd26 	beq	r2,zero,445f4 <_free_r+0x78>
   44680:	38800054 	ori	r2,r7,1
   44684:	3a07883a 	add	r3,r7,r8
   44688:	280ac03a 	cmpne	r5,r5,zero
   4468c:	40800115 	stw	r2,4(r8)
   44690:	19c00015 	stw	r7,0(r3)
   44694:	283fe61e 	bne	r5,zero,44630 <_free_r+0xb4>
   44698:	00807fc4 	movi	r2,511
   4469c:	11c01f2e 	bgeu	r2,r7,4471c <_free_r+0x1a0>
   446a0:	3806d27a 	srli	r3,r7,9
   446a4:	1800481e 	bne	r3,zero,447c8 <_free_r+0x24c>
   446a8:	3804d0fa 	srli	r2,r7,3
   446ac:	100690fa 	slli	r3,r2,3
   446b0:	1acd883a 	add	r6,r3,r11
   446b4:	31400217 	ldw	r5,8(r6)
   446b8:	31405926 	beq	r6,r5,44820 <_free_r+0x2a4>
   446bc:	28800117 	ldw	r2,4(r5)
   446c0:	00ffff04 	movi	r3,-4
   446c4:	10c4703a 	and	r2,r2,r3
   446c8:	3880022e 	bgeu	r7,r2,446d4 <_free_r+0x158>
   446cc:	29400217 	ldw	r5,8(r5)
   446d0:	317ffa1e 	bne	r6,r5,446bc <_free_r+0x140>
   446d4:	29800317 	ldw	r6,12(r5)
   446d8:	41800315 	stw	r6,12(r8)
   446dc:	41400215 	stw	r5,8(r8)
   446e0:	8809883a 	mov	r4,r17
   446e4:	2a000315 	stw	r8,12(r5)
   446e8:	32000215 	stw	r8,8(r6)
   446ec:	dfc00217 	ldw	ra,8(sp)
   446f0:	dc400117 	ldw	r17,4(sp)
   446f4:	dc000017 	ldw	r16,0(sp)
   446f8:	dec00304 	addi	sp,sp,12
   446fc:	004a3781 	jmpi	4a378 <__malloc_unlock>
   44700:	dfc00217 	ldw	ra,8(sp)
   44704:	dc400117 	ldw	r17,4(sp)
   44708:	dc000017 	ldw	r16,0(sp)
   4470c:	dec00304 	addi	sp,sp,12
   44710:	f800283a 	ret
   44714:	31000217 	ldw	r4,8(r6)
   44718:	003fbd06 	br	44610 <_free_r+0x94>
   4471c:	3806d0fa 	srli	r3,r7,3
   44720:	00800044 	movi	r2,1
   44724:	51400117 	ldw	r5,4(r10)
   44728:	180890fa 	slli	r4,r3,3
   4472c:	1807d0ba 	srai	r3,r3,2
   44730:	22c9883a 	add	r4,r4,r11
   44734:	21800217 	ldw	r6,8(r4)
   44738:	10c4983a 	sll	r2,r2,r3
   4473c:	41000315 	stw	r4,12(r8)
   44740:	41800215 	stw	r6,8(r8)
   44744:	288ab03a 	or	r5,r5,r2
   44748:	22000215 	stw	r8,8(r4)
   4474c:	8809883a 	mov	r4,r17
   44750:	51400115 	stw	r5,4(r10)
   44754:	32000315 	stw	r8,12(r6)
   44758:	dfc00217 	ldw	ra,8(sp)
   4475c:	dc400117 	ldw	r17,4(sp)
   44760:	dc000017 	ldw	r16,0(sp)
   44764:	dec00304 	addi	sp,sp,12
   44768:	004a3781 	jmpi	4a378 <__malloc_unlock>
   4476c:	2880004c 	andi	r2,r5,1
   44770:	3a4d883a 	add	r6,r7,r9
   44774:	1000071e 	bne	r2,zero,44794 <_free_r+0x218>
   44778:	80bffe17 	ldw	r2,-8(r16)
   4477c:	4091c83a 	sub	r8,r8,r2
   44780:	41000317 	ldw	r4,12(r8)
   44784:	40c00217 	ldw	r3,8(r8)
   44788:	308d883a 	add	r6,r6,r2
   4478c:	20c00215 	stw	r3,8(r4)
   44790:	19000315 	stw	r4,12(r3)
   44794:	008001b4 	movhi	r2,6
   44798:	10877804 	addi	r2,r2,7648
   4479c:	11000017 	ldw	r4,0(r2)
   447a0:	30c00054 	ori	r3,r6,1
   447a4:	52000215 	stw	r8,8(r10)
   447a8:	40c00115 	stw	r3,4(r8)
   447ac:	313fa036 	bltu	r6,r4,44630 <_free_r+0xb4>
   447b0:	008001b4 	movhi	r2,6
   447b4:	10878c04 	addi	r2,r2,7728
   447b8:	11400017 	ldw	r5,0(r2)
   447bc:	8809883a 	mov	r4,r17
   447c0:	00444500 	call	44450 <_malloc_trim_r>
   447c4:	003f9a06 	br	44630 <_free_r+0xb4>
   447c8:	00800104 	movi	r2,4
   447cc:	10c0072e 	bgeu	r2,r3,447ec <_free_r+0x270>
   447d0:	00800504 	movi	r2,20
   447d4:	10c01936 	bltu	r2,r3,4483c <_free_r+0x2c0>
   447d8:	188016c4 	addi	r2,r3,91
   447dc:	100690fa 	slli	r3,r2,3
   447e0:	003fb306 	br	446b0 <_free_r+0x134>
   447e4:	01400044 	movi	r5,1
   447e8:	003f7e06 	br	445e4 <_free_r+0x68>
   447ec:	3804d1ba 	srli	r2,r7,6
   447f0:	10800e04 	addi	r2,r2,56
   447f4:	100690fa 	slli	r3,r2,3
   447f8:	003fad06 	br	446b0 <_free_r+0x134>
   447fc:	22000315 	stw	r8,12(r4)
   44800:	22000215 	stw	r8,8(r4)
   44804:	3a05883a 	add	r2,r7,r8
   44808:	38c00054 	ori	r3,r7,1
   4480c:	11c00015 	stw	r7,0(r2)
   44810:	41000215 	stw	r4,8(r8)
   44814:	40c00115 	stw	r3,4(r8)
   44818:	41000315 	stw	r4,12(r8)
   4481c:	003f8406 	br	44630 <_free_r+0xb4>
   44820:	1005d0ba 	srai	r2,r2,2
   44824:	00c00044 	movi	r3,1
   44828:	51000117 	ldw	r4,4(r10)
   4482c:	1886983a 	sll	r3,r3,r2
   44830:	20c8b03a 	or	r4,r4,r3
   44834:	51000115 	stw	r4,4(r10)
   44838:	003fa706 	br	446d8 <_free_r+0x15c>
   4483c:	00801504 	movi	r2,84
   44840:	10c00436 	bltu	r2,r3,44854 <_free_r+0x2d8>
   44844:	3804d33a 	srli	r2,r7,12
   44848:	10801b84 	addi	r2,r2,110
   4484c:	100690fa 	slli	r3,r2,3
   44850:	003f9706 	br	446b0 <_free_r+0x134>
   44854:	00805504 	movi	r2,340
   44858:	10c00436 	bltu	r2,r3,4486c <_free_r+0x2f0>
   4485c:	3804d3fa 	srli	r2,r7,15
   44860:	10801dc4 	addi	r2,r2,119
   44864:	100690fa 	slli	r3,r2,3
   44868:	003f9106 	br	446b0 <_free_r+0x134>
   4486c:	00815504 	movi	r2,1364
   44870:	10c0032e 	bgeu	r2,r3,44880 <_free_r+0x304>
   44874:	00801f84 	movi	r2,126
   44878:	00c0fc04 	movi	r3,1008
   4487c:	003f8c06 	br	446b0 <_free_r+0x134>
   44880:	3804d4ba 	srli	r2,r7,18
   44884:	10801f04 	addi	r2,r2,124
   44888:	100690fa 	slli	r3,r2,3
   4488c:	003f8806 	br	446b0 <_free_r+0x134>

00044890 <__sfvwrite_r>:
   44890:	30800217 	ldw	r2,8(r6)
   44894:	defff504 	addi	sp,sp,-44
   44898:	df000915 	stw	fp,36(sp)
   4489c:	dd800715 	stw	r22,28(sp)
   448a0:	dc800315 	stw	r18,12(sp)
   448a4:	dfc00a15 	stw	ra,40(sp)
   448a8:	ddc00815 	stw	r23,32(sp)
   448ac:	dd400615 	stw	r21,24(sp)
   448b0:	dd000515 	stw	r20,20(sp)
   448b4:	dcc00415 	stw	r19,16(sp)
   448b8:	dc400215 	stw	r17,8(sp)
   448bc:	dc000115 	stw	r16,4(sp)
   448c0:	302d883a 	mov	r22,r6
   448c4:	2039883a 	mov	fp,r4
   448c8:	2825883a 	mov	r18,r5
   448cc:	10001c26 	beq	r2,zero,44940 <__sfvwrite_r+0xb0>
   448d0:	29c0030b 	ldhu	r7,12(r5)
   448d4:	3880020c 	andi	r2,r7,8
   448d8:	10002726 	beq	r2,zero,44978 <__sfvwrite_r+0xe8>
   448dc:	28800417 	ldw	r2,16(r5)
   448e0:	10002526 	beq	r2,zero,44978 <__sfvwrite_r+0xe8>
   448e4:	3880008c 	andi	r2,r7,2
   448e8:	b5400017 	ldw	r21,0(r22)
   448ec:	10002826 	beq	r2,zero,44990 <__sfvwrite_r+0x100>
   448f0:	0021883a 	mov	r16,zero
   448f4:	0023883a 	mov	r17,zero
   448f8:	880d883a 	mov	r6,r17
   448fc:	e009883a 	mov	r4,fp
   44900:	00810004 	movi	r2,1024
   44904:	80006e26 	beq	r16,zero,44ac0 <__sfvwrite_r+0x230>
   44908:	800f883a 	mov	r7,r16
   4490c:	91400717 	ldw	r5,28(r18)
   44910:	1400012e 	bgeu	r2,r16,44918 <__sfvwrite_r+0x88>
   44914:	100f883a 	mov	r7,r2
   44918:	90c00917 	ldw	r3,36(r18)
   4491c:	183ee83a 	callr	r3
   44920:	1007883a 	mov	r3,r2
   44924:	80a1c83a 	sub	r16,r16,r2
   44928:	88a3883a 	add	r17,r17,r2
   4492c:	00806d0e 	bge	zero,r2,44ae4 <__sfvwrite_r+0x254>
   44930:	b0800217 	ldw	r2,8(r22)
   44934:	10c5c83a 	sub	r2,r2,r3
   44938:	b0800215 	stw	r2,8(r22)
   4493c:	103fee1e 	bne	r2,zero,448f8 <__sfvwrite_r+0x68>
   44940:	0009883a 	mov	r4,zero
   44944:	2005883a 	mov	r2,r4
   44948:	dfc00a17 	ldw	ra,40(sp)
   4494c:	df000917 	ldw	fp,36(sp)
   44950:	ddc00817 	ldw	r23,32(sp)
   44954:	dd800717 	ldw	r22,28(sp)
   44958:	dd400617 	ldw	r21,24(sp)
   4495c:	dd000517 	ldw	r20,20(sp)
   44960:	dcc00417 	ldw	r19,16(sp)
   44964:	dc800317 	ldw	r18,12(sp)
   44968:	dc400217 	ldw	r17,8(sp)
   4496c:	dc000117 	ldw	r16,4(sp)
   44970:	dec00b04 	addi	sp,sp,44
   44974:	f800283a 	ret
   44978:	00426580 	call	42658 <__swsetup_r>
   4497c:	1000e41e 	bne	r2,zero,44d10 <__sfvwrite_r+0x480>
   44980:	91c0030b 	ldhu	r7,12(r18)
   44984:	b5400017 	ldw	r21,0(r22)
   44988:	3880008c 	andi	r2,r7,2
   4498c:	103fd81e 	bne	r2,zero,448f0 <__sfvwrite_r+0x60>
   44990:	3880004c 	andi	r2,r7,1
   44994:	1005003a 	cmpeq	r2,r2,zero
   44998:	10005726 	beq	r2,zero,44af8 <__sfvwrite_r+0x268>
   4499c:	0029883a 	mov	r20,zero
   449a0:	002f883a 	mov	r23,zero
   449a4:	a0004226 	beq	r20,zero,44ab0 <__sfvwrite_r+0x220>
   449a8:	3880800c 	andi	r2,r7,512
   449ac:	94000217 	ldw	r16,8(r18)
   449b0:	10008b26 	beq	r2,zero,44be0 <__sfvwrite_r+0x350>
   449b4:	800d883a 	mov	r6,r16
   449b8:	a400a536 	bltu	r20,r16,44c50 <__sfvwrite_r+0x3c0>
   449bc:	3881200c 	andi	r2,r7,1152
   449c0:	10002726 	beq	r2,zero,44a60 <__sfvwrite_r+0x1d0>
   449c4:	90800517 	ldw	r2,20(r18)
   449c8:	92000417 	ldw	r8,16(r18)
   449cc:	91400017 	ldw	r5,0(r18)
   449d0:	1087883a 	add	r3,r2,r2
   449d4:	1887883a 	add	r3,r3,r2
   449d8:	1808d7fa 	srli	r4,r3,31
   449dc:	2a21c83a 	sub	r16,r5,r8
   449e0:	80800044 	addi	r2,r16,1
   449e4:	20c9883a 	add	r4,r4,r3
   449e8:	2027d07a 	srai	r19,r4,1
   449ec:	a085883a 	add	r2,r20,r2
   449f0:	980d883a 	mov	r6,r19
   449f4:	9880022e 	bgeu	r19,r2,44a00 <__sfvwrite_r+0x170>
   449f8:	1027883a 	mov	r19,r2
   449fc:	100d883a 	mov	r6,r2
   44a00:	3881000c 	andi	r2,r7,1024
   44a04:	1000b826 	beq	r2,zero,44ce8 <__sfvwrite_r+0x458>
   44a08:	300b883a 	mov	r5,r6
   44a0c:	e009883a 	mov	r4,fp
   44a10:	00451040 	call	45104 <_malloc_r>
   44a14:	10003126 	beq	r2,zero,44adc <__sfvwrite_r+0x24c>
   44a18:	91400417 	ldw	r5,16(r18)
   44a1c:	1009883a 	mov	r4,r2
   44a20:	800d883a 	mov	r6,r16
   44a24:	1023883a 	mov	r17,r2
   44a28:	00459280 	call	45928 <memcpy>
   44a2c:	90c0030b 	ldhu	r3,12(r18)
   44a30:	00beffc4 	movi	r2,-1025
   44a34:	1886703a 	and	r3,r3,r2
   44a38:	18c02014 	ori	r3,r3,128
   44a3c:	90c0030d 	sth	r3,12(r18)
   44a40:	9c07c83a 	sub	r3,r19,r16
   44a44:	8c05883a 	add	r2,r17,r16
   44a48:	a00d883a 	mov	r6,r20
   44a4c:	a021883a 	mov	r16,r20
   44a50:	90800015 	stw	r2,0(r18)
   44a54:	90c00215 	stw	r3,8(r18)
   44a58:	94400415 	stw	r17,16(r18)
   44a5c:	94c00515 	stw	r19,20(r18)
   44a60:	91000017 	ldw	r4,0(r18)
   44a64:	b80b883a 	mov	r5,r23
   44a68:	a023883a 	mov	r17,r20
   44a6c:	00459c80 	call	459c8 <memmove>
   44a70:	90c00217 	ldw	r3,8(r18)
   44a74:	90800017 	ldw	r2,0(r18)
   44a78:	a027883a 	mov	r19,r20
   44a7c:	1c07c83a 	sub	r3,r3,r16
   44a80:	1405883a 	add	r2,r2,r16
   44a84:	90c00215 	stw	r3,8(r18)
   44a88:	a021883a 	mov	r16,r20
   44a8c:	90800015 	stw	r2,0(r18)
   44a90:	b0800217 	ldw	r2,8(r22)
   44a94:	1405c83a 	sub	r2,r2,r16
   44a98:	b0800215 	stw	r2,8(r22)
   44a9c:	103fa826 	beq	r2,zero,44940 <__sfvwrite_r+0xb0>
   44aa0:	a469c83a 	sub	r20,r20,r17
   44aa4:	91c0030b 	ldhu	r7,12(r18)
   44aa8:	bcef883a 	add	r23,r23,r19
   44aac:	a03fbe1e 	bne	r20,zero,449a8 <__sfvwrite_r+0x118>
   44ab0:	adc00017 	ldw	r23,0(r21)
   44ab4:	ad000117 	ldw	r20,4(r21)
   44ab8:	ad400204 	addi	r21,r21,8
   44abc:	003fb906 	br	449a4 <__sfvwrite_r+0x114>
   44ac0:	ac400017 	ldw	r17,0(r21)
   44ac4:	ac000117 	ldw	r16,4(r21)
   44ac8:	ad400204 	addi	r21,r21,8
   44acc:	003f8a06 	br	448f8 <__sfvwrite_r+0x68>
   44ad0:	91400417 	ldw	r5,16(r18)
   44ad4:	e009883a 	mov	r4,fp
   44ad8:	004457c0 	call	4457c <_free_r>
   44adc:	00800304 	movi	r2,12
   44ae0:	e0800015 	stw	r2,0(fp)
   44ae4:	9080030b 	ldhu	r2,12(r18)
   44ae8:	013fffc4 	movi	r4,-1
   44aec:	10801014 	ori	r2,r2,64
   44af0:	9080030d 	sth	r2,12(r18)
   44af4:	003f9306 	br	44944 <__sfvwrite_r+0xb4>
   44af8:	0027883a 	mov	r19,zero
   44afc:	002f883a 	mov	r23,zero
   44b00:	d8000015 	stw	zero,0(sp)
   44b04:	0029883a 	mov	r20,zero
   44b08:	98001e26 	beq	r19,zero,44b84 <__sfvwrite_r+0x2f4>
   44b0c:	d8c00017 	ldw	r3,0(sp)
   44b10:	1804c03a 	cmpne	r2,r3,zero
   44b14:	10005e26 	beq	r2,zero,44c90 <__sfvwrite_r+0x400>
   44b18:	9821883a 	mov	r16,r19
   44b1c:	a4c0012e 	bgeu	r20,r19,44b24 <__sfvwrite_r+0x294>
   44b20:	a021883a 	mov	r16,r20
   44b24:	91000017 	ldw	r4,0(r18)
   44b28:	90800417 	ldw	r2,16(r18)
   44b2c:	91800217 	ldw	r6,8(r18)
   44b30:	91c00517 	ldw	r7,20(r18)
   44b34:	1100022e 	bgeu	r2,r4,44b40 <__sfvwrite_r+0x2b0>
   44b38:	31e3883a 	add	r17,r6,r7
   44b3c:	8c001616 	blt	r17,r16,44b98 <__sfvwrite_r+0x308>
   44b40:	81c03816 	blt	r16,r7,44c24 <__sfvwrite_r+0x394>
   44b44:	90c00917 	ldw	r3,36(r18)
   44b48:	91400717 	ldw	r5,28(r18)
   44b4c:	e009883a 	mov	r4,fp
   44b50:	b80d883a 	mov	r6,r23
   44b54:	183ee83a 	callr	r3
   44b58:	1023883a 	mov	r17,r2
   44b5c:	00bfe10e 	bge	zero,r2,44ae4 <__sfvwrite_r+0x254>
   44b60:	a469c83a 	sub	r20,r20,r17
   44b64:	a0001826 	beq	r20,zero,44bc8 <__sfvwrite_r+0x338>
   44b68:	b0800217 	ldw	r2,8(r22)
   44b6c:	1445c83a 	sub	r2,r2,r17
   44b70:	b0800215 	stw	r2,8(r22)
   44b74:	103f7226 	beq	r2,zero,44940 <__sfvwrite_r+0xb0>
   44b78:	9c67c83a 	sub	r19,r19,r17
   44b7c:	bc6f883a 	add	r23,r23,r17
   44b80:	983fe21e 	bne	r19,zero,44b0c <__sfvwrite_r+0x27c>
   44b84:	adc00017 	ldw	r23,0(r21)
   44b88:	acc00117 	ldw	r19,4(r21)
   44b8c:	ad400204 	addi	r21,r21,8
   44b90:	d8000015 	stw	zero,0(sp)
   44b94:	003fdc06 	br	44b08 <__sfvwrite_r+0x278>
   44b98:	b80b883a 	mov	r5,r23
   44b9c:	880d883a 	mov	r6,r17
   44ba0:	00459c80 	call	459c8 <memmove>
   44ba4:	90c00017 	ldw	r3,0(r18)
   44ba8:	e009883a 	mov	r4,fp
   44bac:	900b883a 	mov	r5,r18
   44bb0:	1c47883a 	add	r3,r3,r17
   44bb4:	90c00015 	stw	r3,0(r18)
   44bb8:	0043f600 	call	43f60 <_fflush_r>
   44bbc:	103fc91e 	bne	r2,zero,44ae4 <__sfvwrite_r+0x254>
   44bc0:	a469c83a 	sub	r20,r20,r17
   44bc4:	a03fe81e 	bne	r20,zero,44b68 <__sfvwrite_r+0x2d8>
   44bc8:	e009883a 	mov	r4,fp
   44bcc:	900b883a 	mov	r5,r18
   44bd0:	0043f600 	call	43f60 <_fflush_r>
   44bd4:	103fc31e 	bne	r2,zero,44ae4 <__sfvwrite_r+0x254>
   44bd8:	d8000015 	stw	zero,0(sp)
   44bdc:	003fe206 	br	44b68 <__sfvwrite_r+0x2d8>
   44be0:	91000017 	ldw	r4,0(r18)
   44be4:	90800417 	ldw	r2,16(r18)
   44be8:	1100022e 	bgeu	r2,r4,44bf4 <__sfvwrite_r+0x364>
   44bec:	8023883a 	mov	r17,r16
   44bf0:	85003136 	bltu	r16,r20,44cb8 <__sfvwrite_r+0x428>
   44bf4:	91c00517 	ldw	r7,20(r18)
   44bf8:	a1c01836 	bltu	r20,r7,44c5c <__sfvwrite_r+0x3cc>
   44bfc:	90c00917 	ldw	r3,36(r18)
   44c00:	91400717 	ldw	r5,28(r18)
   44c04:	e009883a 	mov	r4,fp
   44c08:	b80d883a 	mov	r6,r23
   44c0c:	183ee83a 	callr	r3
   44c10:	1021883a 	mov	r16,r2
   44c14:	00bfb30e 	bge	zero,r2,44ae4 <__sfvwrite_r+0x254>
   44c18:	1023883a 	mov	r17,r2
   44c1c:	1027883a 	mov	r19,r2
   44c20:	003f9b06 	br	44a90 <__sfvwrite_r+0x200>
   44c24:	b80b883a 	mov	r5,r23
   44c28:	800d883a 	mov	r6,r16
   44c2c:	00459c80 	call	459c8 <memmove>
   44c30:	90c00217 	ldw	r3,8(r18)
   44c34:	90800017 	ldw	r2,0(r18)
   44c38:	8023883a 	mov	r17,r16
   44c3c:	1c07c83a 	sub	r3,r3,r16
   44c40:	1405883a 	add	r2,r2,r16
   44c44:	90c00215 	stw	r3,8(r18)
   44c48:	90800015 	stw	r2,0(r18)
   44c4c:	003fc406 	br	44b60 <__sfvwrite_r+0x2d0>
   44c50:	a00d883a 	mov	r6,r20
   44c54:	a021883a 	mov	r16,r20
   44c58:	003f8106 	br	44a60 <__sfvwrite_r+0x1d0>
   44c5c:	b80b883a 	mov	r5,r23
   44c60:	a00d883a 	mov	r6,r20
   44c64:	00459c80 	call	459c8 <memmove>
   44c68:	90c00217 	ldw	r3,8(r18)
   44c6c:	90800017 	ldw	r2,0(r18)
   44c70:	a021883a 	mov	r16,r20
   44c74:	1d07c83a 	sub	r3,r3,r20
   44c78:	1505883a 	add	r2,r2,r20
   44c7c:	a023883a 	mov	r17,r20
   44c80:	a027883a 	mov	r19,r20
   44c84:	90c00215 	stw	r3,8(r18)
   44c88:	90800015 	stw	r2,0(r18)
   44c8c:	003f8006 	br	44a90 <__sfvwrite_r+0x200>
   44c90:	b809883a 	mov	r4,r23
   44c94:	01400284 	movi	r5,10
   44c98:	980d883a 	mov	r6,r19
   44c9c:	00458440 	call	45844 <memchr>
   44ca0:	10001726 	beq	r2,zero,44d00 <__sfvwrite_r+0x470>
   44ca4:	15c5c83a 	sub	r2,r2,r23
   44ca8:	15000044 	addi	r20,r2,1
   44cac:	00800044 	movi	r2,1
   44cb0:	d8800015 	stw	r2,0(sp)
   44cb4:	003f9806 	br	44b18 <__sfvwrite_r+0x288>
   44cb8:	b80b883a 	mov	r5,r23
   44cbc:	800d883a 	mov	r6,r16
   44cc0:	00459c80 	call	459c8 <memmove>
   44cc4:	90c00017 	ldw	r3,0(r18)
   44cc8:	e009883a 	mov	r4,fp
   44ccc:	900b883a 	mov	r5,r18
   44cd0:	1c07883a 	add	r3,r3,r16
   44cd4:	90c00015 	stw	r3,0(r18)
   44cd8:	8027883a 	mov	r19,r16
   44cdc:	0043f600 	call	43f60 <_fflush_r>
   44ce0:	103f6b26 	beq	r2,zero,44a90 <__sfvwrite_r+0x200>
   44ce4:	003f7f06 	br	44ae4 <__sfvwrite_r+0x254>
   44ce8:	400b883a 	mov	r5,r8
   44cec:	e009883a 	mov	r4,fp
   44cf0:	0046b340 	call	46b34 <_realloc_r>
   44cf4:	103f7626 	beq	r2,zero,44ad0 <__sfvwrite_r+0x240>
   44cf8:	1023883a 	mov	r17,r2
   44cfc:	003f5006 	br	44a40 <__sfvwrite_r+0x1b0>
   44d00:	00c00044 	movi	r3,1
   44d04:	9d000044 	addi	r20,r19,1
   44d08:	d8c00015 	stw	r3,0(sp)
   44d0c:	003f8206 	br	44b18 <__sfvwrite_r+0x288>
   44d10:	9080030b 	ldhu	r2,12(r18)
   44d14:	00c00244 	movi	r3,9
   44d18:	013fffc4 	movi	r4,-1
   44d1c:	10801014 	ori	r2,r2,64
   44d20:	9080030d 	sth	r2,12(r18)
   44d24:	e0c00015 	stw	r3,0(fp)
   44d28:	003f0606 	br	44944 <__sfvwrite_r+0xb4>

00044d2c <_fwalk_reent>:
   44d2c:	defff704 	addi	sp,sp,-36
   44d30:	dcc00315 	stw	r19,12(sp)
   44d34:	24c0b804 	addi	r19,r4,736
   44d38:	dd800615 	stw	r22,24(sp)
   44d3c:	dd400515 	stw	r21,20(sp)
   44d40:	dfc00815 	stw	ra,32(sp)
   44d44:	ddc00715 	stw	r23,28(sp)
   44d48:	dd000415 	stw	r20,16(sp)
   44d4c:	dc800215 	stw	r18,8(sp)
   44d50:	dc400115 	stw	r17,4(sp)
   44d54:	dc000015 	stw	r16,0(sp)
   44d58:	202b883a 	mov	r21,r4
   44d5c:	282d883a 	mov	r22,r5
   44d60:	00441e80 	call	441e8 <__sfp_lock_acquire>
   44d64:	98002126 	beq	r19,zero,44dec <_fwalk_reent+0xc0>
   44d68:	002f883a 	mov	r23,zero
   44d6c:	9c800117 	ldw	r18,4(r19)
   44d70:	9c000217 	ldw	r16,8(r19)
   44d74:	90bfffc4 	addi	r2,r18,-1
   44d78:	10000d16 	blt	r2,zero,44db0 <_fwalk_reent+0x84>
   44d7c:	0023883a 	mov	r17,zero
   44d80:	053fffc4 	movi	r20,-1
   44d84:	8080030f 	ldh	r2,12(r16)
   44d88:	8c400044 	addi	r17,r17,1
   44d8c:	10000626 	beq	r2,zero,44da8 <_fwalk_reent+0x7c>
   44d90:	8080038f 	ldh	r2,14(r16)
   44d94:	800b883a 	mov	r5,r16
   44d98:	a809883a 	mov	r4,r21
   44d9c:	15000226 	beq	r2,r20,44da8 <_fwalk_reent+0x7c>
   44da0:	b03ee83a 	callr	r22
   44da4:	b8aeb03a 	or	r23,r23,r2
   44da8:	84001704 	addi	r16,r16,92
   44dac:	947ff51e 	bne	r18,r17,44d84 <_fwalk_reent+0x58>
   44db0:	9cc00017 	ldw	r19,0(r19)
   44db4:	983fed1e 	bne	r19,zero,44d6c <_fwalk_reent+0x40>
   44db8:	00441ec0 	call	441ec <__sfp_lock_release>
   44dbc:	b805883a 	mov	r2,r23
   44dc0:	dfc00817 	ldw	ra,32(sp)
   44dc4:	ddc00717 	ldw	r23,28(sp)
   44dc8:	dd800617 	ldw	r22,24(sp)
   44dcc:	dd400517 	ldw	r21,20(sp)
   44dd0:	dd000417 	ldw	r20,16(sp)
   44dd4:	dcc00317 	ldw	r19,12(sp)
   44dd8:	dc800217 	ldw	r18,8(sp)
   44ddc:	dc400117 	ldw	r17,4(sp)
   44de0:	dc000017 	ldw	r16,0(sp)
   44de4:	dec00904 	addi	sp,sp,36
   44de8:	f800283a 	ret
   44dec:	002f883a 	mov	r23,zero
   44df0:	003ff106 	br	44db8 <_fwalk_reent+0x8c>

00044df4 <_fwalk>:
   44df4:	defff804 	addi	sp,sp,-32
   44df8:	dcc00315 	stw	r19,12(sp)
   44dfc:	24c0b804 	addi	r19,r4,736
   44e00:	dd400515 	stw	r21,20(sp)
   44e04:	dfc00715 	stw	ra,28(sp)
   44e08:	dd800615 	stw	r22,24(sp)
   44e0c:	dd000415 	stw	r20,16(sp)
   44e10:	dc800215 	stw	r18,8(sp)
   44e14:	dc400115 	stw	r17,4(sp)
   44e18:	dc000015 	stw	r16,0(sp)
   44e1c:	282b883a 	mov	r21,r5
   44e20:	00441e80 	call	441e8 <__sfp_lock_acquire>
   44e24:	98001f26 	beq	r19,zero,44ea4 <_fwalk+0xb0>
   44e28:	002d883a 	mov	r22,zero
   44e2c:	9c800117 	ldw	r18,4(r19)
   44e30:	9c000217 	ldw	r16,8(r19)
   44e34:	90bfffc4 	addi	r2,r18,-1
   44e38:	10000c16 	blt	r2,zero,44e6c <_fwalk+0x78>
   44e3c:	0023883a 	mov	r17,zero
   44e40:	053fffc4 	movi	r20,-1
   44e44:	8080030f 	ldh	r2,12(r16)
   44e48:	8c400044 	addi	r17,r17,1
   44e4c:	10000526 	beq	r2,zero,44e64 <_fwalk+0x70>
   44e50:	8080038f 	ldh	r2,14(r16)
   44e54:	8009883a 	mov	r4,r16
   44e58:	15000226 	beq	r2,r20,44e64 <_fwalk+0x70>
   44e5c:	a83ee83a 	callr	r21
   44e60:	b0acb03a 	or	r22,r22,r2
   44e64:	84001704 	addi	r16,r16,92
   44e68:	947ff61e 	bne	r18,r17,44e44 <_fwalk+0x50>
   44e6c:	9cc00017 	ldw	r19,0(r19)
   44e70:	983fee1e 	bne	r19,zero,44e2c <_fwalk+0x38>
   44e74:	00441ec0 	call	441ec <__sfp_lock_release>
   44e78:	b005883a 	mov	r2,r22
   44e7c:	dfc00717 	ldw	ra,28(sp)
   44e80:	dd800617 	ldw	r22,24(sp)
   44e84:	dd400517 	ldw	r21,20(sp)
   44e88:	dd000417 	ldw	r20,16(sp)
   44e8c:	dcc00317 	ldw	r19,12(sp)
   44e90:	dc800217 	ldw	r18,8(sp)
   44e94:	dc400117 	ldw	r17,4(sp)
   44e98:	dc000017 	ldw	r16,0(sp)
   44e9c:	dec00804 	addi	sp,sp,32
   44ea0:	f800283a 	ret
   44ea4:	002d883a 	mov	r22,zero
   44ea8:	003ff206 	br	44e74 <_fwalk+0x80>

00044eac <__locale_charset>:
   44eac:	d0a00317 	ldw	r2,-32756(gp)
   44eb0:	f800283a 	ret

00044eb4 <_localeconv_r>:
   44eb4:	008001b4 	movhi	r2,6
   44eb8:	10804604 	addi	r2,r2,280
   44ebc:	f800283a 	ret

00044ec0 <localeconv>:
   44ec0:	008001b4 	movhi	r2,6
   44ec4:	10877404 	addi	r2,r2,7632
   44ec8:	11000017 	ldw	r4,0(r2)
   44ecc:	0044eb41 	jmpi	44eb4 <_localeconv_r>

00044ed0 <_setlocale_r>:
   44ed0:	defffc04 	addi	sp,sp,-16
   44ed4:	00c001b4 	movhi	r3,6
   44ed8:	18c04104 	addi	r3,r3,260
   44edc:	dc800215 	stw	r18,8(sp)
   44ee0:	dc400115 	stw	r17,4(sp)
   44ee4:	dc000015 	stw	r16,0(sp)
   44ee8:	2023883a 	mov	r17,r4
   44eec:	2825883a 	mov	r18,r5
   44ef0:	dfc00315 	stw	ra,12(sp)
   44ef4:	3021883a 	mov	r16,r6
   44ef8:	3009883a 	mov	r4,r6
   44efc:	180b883a 	mov	r5,r3
   44f00:	30000926 	beq	r6,zero,44f28 <_setlocale_r+0x58>
   44f04:	00473540 	call	47354 <strcmp>
   44f08:	8009883a 	mov	r4,r16
   44f0c:	014001b4 	movhi	r5,6
   44f10:	29402c04 	addi	r5,r5,176
   44f14:	10000b1e 	bne	r2,zero,44f44 <_setlocale_r+0x74>
   44f18:	8c000d15 	stw	r16,52(r17)
   44f1c:	8c800c15 	stw	r18,48(r17)
   44f20:	00c001b4 	movhi	r3,6
   44f24:	18c04104 	addi	r3,r3,260
   44f28:	1805883a 	mov	r2,r3
   44f2c:	dfc00317 	ldw	ra,12(sp)
   44f30:	dc800217 	ldw	r18,8(sp)
   44f34:	dc400117 	ldw	r17,4(sp)
   44f38:	dc000017 	ldw	r16,0(sp)
   44f3c:	dec00404 	addi	sp,sp,16
   44f40:	f800283a 	ret
   44f44:	00473540 	call	47354 <strcmp>
   44f48:	0007883a 	mov	r3,zero
   44f4c:	103ff226 	beq	r2,zero,44f18 <_setlocale_r+0x48>
   44f50:	003ff506 	br	44f28 <_setlocale_r+0x58>

00044f54 <setlocale>:
   44f54:	018001b4 	movhi	r6,6
   44f58:	31877404 	addi	r6,r6,7632
   44f5c:	2007883a 	mov	r3,r4
   44f60:	31000017 	ldw	r4,0(r6)
   44f64:	280d883a 	mov	r6,r5
   44f68:	180b883a 	mov	r5,r3
   44f6c:	0044ed01 	jmpi	44ed0 <_setlocale_r>

00044f70 <__smakebuf_r>:
   44f70:	2880030b 	ldhu	r2,12(r5)
   44f74:	deffed04 	addi	sp,sp,-76
   44f78:	dc401015 	stw	r17,64(sp)
   44f7c:	1080008c 	andi	r2,r2,2
   44f80:	dc000f15 	stw	r16,60(sp)
   44f84:	dfc01215 	stw	ra,72(sp)
   44f88:	dc801115 	stw	r18,68(sp)
   44f8c:	2821883a 	mov	r16,r5
   44f90:	2023883a 	mov	r17,r4
   44f94:	10000b26 	beq	r2,zero,44fc4 <__smakebuf_r+0x54>
   44f98:	28c010c4 	addi	r3,r5,67
   44f9c:	00800044 	movi	r2,1
   44fa0:	28800515 	stw	r2,20(r5)
   44fa4:	28c00415 	stw	r3,16(r5)
   44fa8:	28c00015 	stw	r3,0(r5)
   44fac:	dfc01217 	ldw	ra,72(sp)
   44fb0:	dc801117 	ldw	r18,68(sp)
   44fb4:	dc401017 	ldw	r17,64(sp)
   44fb8:	dc000f17 	ldw	r16,60(sp)
   44fbc:	dec01304 	addi	sp,sp,76
   44fc0:	f800283a 	ret
   44fc4:	2940038f 	ldh	r5,14(r5)
   44fc8:	28002116 	blt	r5,zero,45050 <__smakebuf_r+0xe0>
   44fcc:	d80d883a 	mov	r6,sp
   44fd0:	00476d00 	call	476d0 <_fstat_r>
   44fd4:	10001e16 	blt	r2,zero,45050 <__smakebuf_r+0xe0>
   44fd8:	d8800117 	ldw	r2,4(sp)
   44fdc:	00e00014 	movui	r3,32768
   44fe0:	113c000c 	andi	r4,r2,61440
   44fe4:	20c03126 	beq	r4,r3,450ac <__smakebuf_r+0x13c>
   44fe8:	8080030b 	ldhu	r2,12(r16)
   44fec:	00c80004 	movi	r3,8192
   44ff0:	10820014 	ori	r2,r2,2048
   44ff4:	8080030d 	sth	r2,12(r16)
   44ff8:	20c01e26 	beq	r4,r3,45074 <__smakebuf_r+0x104>
   44ffc:	04810004 	movi	r18,1024
   45000:	8809883a 	mov	r4,r17
   45004:	900b883a 	mov	r5,r18
   45008:	00451040 	call	45104 <_malloc_r>
   4500c:	1009883a 	mov	r4,r2
   45010:	10003126 	beq	r2,zero,450d8 <__smakebuf_r+0x168>
   45014:	80c0030b 	ldhu	r3,12(r16)
   45018:	00800134 	movhi	r2,4
   4501c:	1090b704 	addi	r2,r2,17116
   45020:	88800f15 	stw	r2,60(r17)
   45024:	18c02014 	ori	r3,r3,128
   45028:	84800515 	stw	r18,20(r16)
   4502c:	80c0030d 	sth	r3,12(r16)
   45030:	81000415 	stw	r4,16(r16)
   45034:	81000015 	stw	r4,0(r16)
   45038:	dfc01217 	ldw	ra,72(sp)
   4503c:	dc801117 	ldw	r18,68(sp)
   45040:	dc401017 	ldw	r17,64(sp)
   45044:	dc000f17 	ldw	r16,60(sp)
   45048:	dec01304 	addi	sp,sp,76
   4504c:	f800283a 	ret
   45050:	80c0030b 	ldhu	r3,12(r16)
   45054:	1880200c 	andi	r2,r3,128
   45058:	10000426 	beq	r2,zero,4506c <__smakebuf_r+0xfc>
   4505c:	04801004 	movi	r18,64
   45060:	18820014 	ori	r2,r3,2048
   45064:	8080030d 	sth	r2,12(r16)
   45068:	003fe506 	br	45000 <__smakebuf_r+0x90>
   4506c:	04810004 	movi	r18,1024
   45070:	003ffb06 	br	45060 <__smakebuf_r+0xf0>
   45074:	8140038f 	ldh	r5,14(r16)
   45078:	8809883a 	mov	r4,r17
   4507c:	00477440 	call	47744 <_isatty_r>
   45080:	103fde26 	beq	r2,zero,44ffc <__smakebuf_r+0x8c>
   45084:	8080030b 	ldhu	r2,12(r16)
   45088:	80c010c4 	addi	r3,r16,67
   4508c:	04810004 	movi	r18,1024
   45090:	10800054 	ori	r2,r2,1
   45094:	8080030d 	sth	r2,12(r16)
   45098:	00800044 	movi	r2,1
   4509c:	80c00415 	stw	r3,16(r16)
   450a0:	80800515 	stw	r2,20(r16)
   450a4:	80c00015 	stw	r3,0(r16)
   450a8:	003fd506 	br	45000 <__smakebuf_r+0x90>
   450ac:	80c00a17 	ldw	r3,40(r16)
   450b0:	00800134 	movhi	r2,4
   450b4:	109c8404 	addi	r2,r2,29200
   450b8:	18bfcb1e 	bne	r3,r2,44fe8 <__smakebuf_r+0x78>
   450bc:	8080030b 	ldhu	r2,12(r16)
   450c0:	00c10004 	movi	r3,1024
   450c4:	1825883a 	mov	r18,r3
   450c8:	10c4b03a 	or	r2,r2,r3
   450cc:	8080030d 	sth	r2,12(r16)
   450d0:	80c01315 	stw	r3,76(r16)
   450d4:	003fca06 	br	45000 <__smakebuf_r+0x90>
   450d8:	8100030b 	ldhu	r4,12(r16)
   450dc:	2080800c 	andi	r2,r4,512
   450e0:	103fb21e 	bne	r2,zero,44fac <__smakebuf_r+0x3c>
   450e4:	80c010c4 	addi	r3,r16,67
   450e8:	21000094 	ori	r4,r4,2
   450ec:	00800044 	movi	r2,1
   450f0:	80800515 	stw	r2,20(r16)
   450f4:	8100030d 	sth	r4,12(r16)
   450f8:	80c00415 	stw	r3,16(r16)
   450fc:	80c00015 	stw	r3,0(r16)
   45100:	003faa06 	br	44fac <__smakebuf_r+0x3c>

00045104 <_malloc_r>:
   45104:	defff604 	addi	sp,sp,-40
   45108:	28c002c4 	addi	r3,r5,11
   4510c:	00800584 	movi	r2,22
   45110:	dc800215 	stw	r18,8(sp)
   45114:	dfc00915 	stw	ra,36(sp)
   45118:	df000815 	stw	fp,32(sp)
   4511c:	ddc00715 	stw	r23,28(sp)
   45120:	dd800615 	stw	r22,24(sp)
   45124:	dd400515 	stw	r21,20(sp)
   45128:	dd000415 	stw	r20,16(sp)
   4512c:	dcc00315 	stw	r19,12(sp)
   45130:	dc400115 	stw	r17,4(sp)
   45134:	dc000015 	stw	r16,0(sp)
   45138:	2025883a 	mov	r18,r4
   4513c:	10c01236 	bltu	r2,r3,45188 <_malloc_r+0x84>
   45140:	04400404 	movi	r17,16
   45144:	8940142e 	bgeu	r17,r5,45198 <_malloc_r+0x94>
   45148:	00800304 	movi	r2,12
   4514c:	0007883a 	mov	r3,zero
   45150:	90800015 	stw	r2,0(r18)
   45154:	1805883a 	mov	r2,r3
   45158:	dfc00917 	ldw	ra,36(sp)
   4515c:	df000817 	ldw	fp,32(sp)
   45160:	ddc00717 	ldw	r23,28(sp)
   45164:	dd800617 	ldw	r22,24(sp)
   45168:	dd400517 	ldw	r21,20(sp)
   4516c:	dd000417 	ldw	r20,16(sp)
   45170:	dcc00317 	ldw	r19,12(sp)
   45174:	dc800217 	ldw	r18,8(sp)
   45178:	dc400117 	ldw	r17,4(sp)
   4517c:	dc000017 	ldw	r16,0(sp)
   45180:	dec00a04 	addi	sp,sp,40
   45184:	f800283a 	ret
   45188:	00bffe04 	movi	r2,-8
   4518c:	18a2703a 	and	r17,r3,r2
   45190:	883fed16 	blt	r17,zero,45148 <_malloc_r+0x44>
   45194:	897fec36 	bltu	r17,r5,45148 <_malloc_r+0x44>
   45198:	9009883a 	mov	r4,r18
   4519c:	004a3580 	call	4a358 <__malloc_lock>
   451a0:	00807dc4 	movi	r2,503
   451a4:	14402b2e 	bgeu	r2,r17,45254 <_malloc_r+0x150>
   451a8:	8806d27a 	srli	r3,r17,9
   451ac:	18003f1e 	bne	r3,zero,452ac <_malloc_r+0x1a8>
   451b0:	880cd0fa 	srli	r6,r17,3
   451b4:	300490fa 	slli	r2,r6,3
   451b8:	02c001b4 	movhi	r11,6
   451bc:	5ac1f004 	addi	r11,r11,1984
   451c0:	12cb883a 	add	r5,r2,r11
   451c4:	2c000317 	ldw	r16,12(r5)
   451c8:	580f883a 	mov	r7,r11
   451cc:	2c00041e 	bne	r5,r16,451e0 <_malloc_r+0xdc>
   451d0:	00000a06 	br	451fc <_malloc_r+0xf8>
   451d4:	1800860e 	bge	r3,zero,453f0 <_malloc_r+0x2ec>
   451d8:	84000317 	ldw	r16,12(r16)
   451dc:	2c000726 	beq	r5,r16,451fc <_malloc_r+0xf8>
   451e0:	80800117 	ldw	r2,4(r16)
   451e4:	00ffff04 	movi	r3,-4
   451e8:	10c8703a 	and	r4,r2,r3
   451ec:	2447c83a 	sub	r3,r4,r17
   451f0:	008003c4 	movi	r2,15
   451f4:	10fff70e 	bge	r2,r3,451d4 <_malloc_r+0xd0>
   451f8:	31bfffc4 	addi	r6,r6,-1
   451fc:	32400044 	addi	r9,r6,1
   45200:	028001b4 	movhi	r10,6
   45204:	5281f204 	addi	r10,r10,1992
   45208:	54000217 	ldw	r16,8(r10)
   4520c:	8280a026 	beq	r16,r10,45490 <_malloc_r+0x38c>
   45210:	80800117 	ldw	r2,4(r16)
   45214:	00ffff04 	movi	r3,-4
   45218:	10ca703a 	and	r5,r2,r3
   4521c:	2c4dc83a 	sub	r6,r5,r17
   45220:	008003c4 	movi	r2,15
   45224:	11808316 	blt	r2,r6,45434 <_malloc_r+0x330>
   45228:	52800315 	stw	r10,12(r10)
   4522c:	52800215 	stw	r10,8(r10)
   45230:	30002916 	blt	r6,zero,452d8 <_malloc_r+0x1d4>
   45234:	8147883a 	add	r3,r16,r5
   45238:	18800117 	ldw	r2,4(r3)
   4523c:	9009883a 	mov	r4,r18
   45240:	10800054 	ori	r2,r2,1
   45244:	18800115 	stw	r2,4(r3)
   45248:	004a3780 	call	4a378 <__malloc_unlock>
   4524c:	80c00204 	addi	r3,r16,8
   45250:	003fc006 	br	45154 <_malloc_r+0x50>
   45254:	02c001b4 	movhi	r11,6
   45258:	5ac1f004 	addi	r11,r11,1984
   4525c:	8ac5883a 	add	r2,r17,r11
   45260:	14000317 	ldw	r16,12(r2)
   45264:	580f883a 	mov	r7,r11
   45268:	8806d0fa 	srli	r3,r17,3
   4526c:	14006c26 	beq	r2,r16,45420 <_malloc_r+0x31c>
   45270:	80c00117 	ldw	r3,4(r16)
   45274:	00bfff04 	movi	r2,-4
   45278:	81800317 	ldw	r6,12(r16)
   4527c:	1886703a 	and	r3,r3,r2
   45280:	80c7883a 	add	r3,r16,r3
   45284:	18800117 	ldw	r2,4(r3)
   45288:	81400217 	ldw	r5,8(r16)
   4528c:	9009883a 	mov	r4,r18
   45290:	10800054 	ori	r2,r2,1
   45294:	18800115 	stw	r2,4(r3)
   45298:	31400215 	stw	r5,8(r6)
   4529c:	29800315 	stw	r6,12(r5)
   452a0:	004a3780 	call	4a378 <__malloc_unlock>
   452a4:	80c00204 	addi	r3,r16,8
   452a8:	003faa06 	br	45154 <_malloc_r+0x50>
   452ac:	00800104 	movi	r2,4
   452b0:	10c0052e 	bgeu	r2,r3,452c8 <_malloc_r+0x1c4>
   452b4:	00800504 	movi	r2,20
   452b8:	10c07836 	bltu	r2,r3,4549c <_malloc_r+0x398>
   452bc:	198016c4 	addi	r6,r3,91
   452c0:	300490fa 	slli	r2,r6,3
   452c4:	003fbc06 	br	451b8 <_malloc_r+0xb4>
   452c8:	8804d1ba 	srli	r2,r17,6
   452cc:	11800e04 	addi	r6,r2,56
   452d0:	300490fa 	slli	r2,r6,3
   452d4:	003fb806 	br	451b8 <_malloc_r+0xb4>
   452d8:	00807fc4 	movi	r2,511
   452dc:	1140bb36 	bltu	r2,r5,455cc <_malloc_r+0x4c8>
   452e0:	2806d0fa 	srli	r3,r5,3
   452e4:	573ffe04 	addi	fp,r10,-8
   452e8:	00800044 	movi	r2,1
   452ec:	180890fa 	slli	r4,r3,3
   452f0:	1807d0ba 	srai	r3,r3,2
   452f4:	e1c00117 	ldw	r7,4(fp)
   452f8:	5909883a 	add	r4,r11,r4
   452fc:	21400217 	ldw	r5,8(r4)
   45300:	10c4983a 	sll	r2,r2,r3
   45304:	81000315 	stw	r4,12(r16)
   45308:	81400215 	stw	r5,8(r16)
   4530c:	388eb03a 	or	r7,r7,r2
   45310:	2c000315 	stw	r16,12(r5)
   45314:	24000215 	stw	r16,8(r4)
   45318:	e1c00115 	stw	r7,4(fp)
   4531c:	4807883a 	mov	r3,r9
   45320:	4800cd16 	blt	r9,zero,45658 <_malloc_r+0x554>
   45324:	1807d0ba 	srai	r3,r3,2
   45328:	00800044 	movi	r2,1
   4532c:	10c8983a 	sll	r4,r2,r3
   45330:	39004436 	bltu	r7,r4,45444 <_malloc_r+0x340>
   45334:	21c4703a 	and	r2,r4,r7
   45338:	10000a1e 	bne	r2,zero,45364 <_malloc_r+0x260>
   4533c:	2109883a 	add	r4,r4,r4
   45340:	00bfff04 	movi	r2,-4
   45344:	4884703a 	and	r2,r9,r2
   45348:	3906703a 	and	r3,r7,r4
   4534c:	12400104 	addi	r9,r2,4
   45350:	1800041e 	bne	r3,zero,45364 <_malloc_r+0x260>
   45354:	2109883a 	add	r4,r4,r4
   45358:	3904703a 	and	r2,r7,r4
   4535c:	4a400104 	addi	r9,r9,4
   45360:	103ffc26 	beq	r2,zero,45354 <_malloc_r+0x250>
   45364:	480490fa 	slli	r2,r9,3
   45368:	4819883a 	mov	r12,r9
   4536c:	023fff04 	movi	r8,-4
   45370:	589b883a 	add	r13,r11,r2
   45374:	6807883a 	mov	r3,r13
   45378:	014003c4 	movi	r5,15
   4537c:	1c000317 	ldw	r16,12(r3)
   45380:	1c00041e 	bne	r3,r16,45394 <_malloc_r+0x290>
   45384:	0000a706 	br	45624 <_malloc_r+0x520>
   45388:	3000ab0e 	bge	r6,zero,45638 <_malloc_r+0x534>
   4538c:	84000317 	ldw	r16,12(r16)
   45390:	1c00a426 	beq	r3,r16,45624 <_malloc_r+0x520>
   45394:	80800117 	ldw	r2,4(r16)
   45398:	1204703a 	and	r2,r2,r8
   4539c:	144dc83a 	sub	r6,r2,r17
   453a0:	29bff90e 	bge	r5,r6,45388 <_malloc_r+0x284>
   453a4:	81000317 	ldw	r4,12(r16)
   453a8:	80c00217 	ldw	r3,8(r16)
   453ac:	89400054 	ori	r5,r17,1
   453b0:	8445883a 	add	r2,r16,r17
   453b4:	20c00215 	stw	r3,8(r4)
   453b8:	19000315 	stw	r4,12(r3)
   453bc:	81400115 	stw	r5,4(r16)
   453c0:	1187883a 	add	r3,r2,r6
   453c4:	31000054 	ori	r4,r6,1
   453c8:	50800315 	stw	r2,12(r10)
   453cc:	50800215 	stw	r2,8(r10)
   453d0:	19800015 	stw	r6,0(r3)
   453d4:	11000115 	stw	r4,4(r2)
   453d8:	12800215 	stw	r10,8(r2)
   453dc:	12800315 	stw	r10,12(r2)
   453e0:	9009883a 	mov	r4,r18
   453e4:	004a3780 	call	4a378 <__malloc_unlock>
   453e8:	80c00204 	addi	r3,r16,8
   453ec:	003f5906 	br	45154 <_malloc_r+0x50>
   453f0:	8109883a 	add	r4,r16,r4
   453f4:	20800117 	ldw	r2,4(r4)
   453f8:	80c00217 	ldw	r3,8(r16)
   453fc:	81400317 	ldw	r5,12(r16)
   45400:	10800054 	ori	r2,r2,1
   45404:	20800115 	stw	r2,4(r4)
   45408:	28c00215 	stw	r3,8(r5)
   4540c:	19400315 	stw	r5,12(r3)
   45410:	9009883a 	mov	r4,r18
   45414:	004a3780 	call	4a378 <__malloc_unlock>
   45418:	80c00204 	addi	r3,r16,8
   4541c:	003f4d06 	br	45154 <_malloc_r+0x50>
   45420:	80800204 	addi	r2,r16,8
   45424:	14000317 	ldw	r16,12(r2)
   45428:	143f911e 	bne	r2,r16,45270 <_malloc_r+0x16c>
   4542c:	1a400084 	addi	r9,r3,2
   45430:	003f7306 	br	45200 <_malloc_r+0xfc>
   45434:	88c00054 	ori	r3,r17,1
   45438:	8445883a 	add	r2,r16,r17
   4543c:	80c00115 	stw	r3,4(r16)
   45440:	003fdf06 	br	453c0 <_malloc_r+0x2bc>
   45444:	e4000217 	ldw	r16,8(fp)
   45448:	00bfff04 	movi	r2,-4
   4544c:	80c00117 	ldw	r3,4(r16)
   45450:	802d883a 	mov	r22,r16
   45454:	18aa703a 	and	r21,r3,r2
   45458:	ac401636 	bltu	r21,r17,454b4 <_malloc_r+0x3b0>
   4545c:	ac49c83a 	sub	r4,r21,r17
   45460:	008003c4 	movi	r2,15
   45464:	1100130e 	bge	r2,r4,454b4 <_malloc_r+0x3b0>
   45468:	88800054 	ori	r2,r17,1
   4546c:	8447883a 	add	r3,r16,r17
   45470:	80800115 	stw	r2,4(r16)
   45474:	20800054 	ori	r2,r4,1
   45478:	18800115 	stw	r2,4(r3)
   4547c:	e0c00215 	stw	r3,8(fp)
   45480:	9009883a 	mov	r4,r18
   45484:	004a3780 	call	4a378 <__malloc_unlock>
   45488:	80c00204 	addi	r3,r16,8
   4548c:	003f3106 	br	45154 <_malloc_r+0x50>
   45490:	39c00117 	ldw	r7,4(r7)
   45494:	573ffe04 	addi	fp,r10,-8
   45498:	003fa006 	br	4531c <_malloc_r+0x218>
   4549c:	00801504 	movi	r2,84
   454a0:	10c06736 	bltu	r2,r3,45640 <_malloc_r+0x53c>
   454a4:	8804d33a 	srli	r2,r17,12
   454a8:	11801b84 	addi	r6,r2,110
   454ac:	300490fa 	slli	r2,r6,3
   454b0:	003f4106 	br	451b8 <_malloc_r+0xb4>
   454b4:	d0a01817 	ldw	r2,-32672(gp)
   454b8:	d0e00517 	ldw	r3,-32748(gp)
   454bc:	053fffc4 	movi	r20,-1
   454c0:	10800404 	addi	r2,r2,16
   454c4:	88a7883a 	add	r19,r17,r2
   454c8:	1d000326 	beq	r3,r20,454d8 <_malloc_r+0x3d4>
   454cc:	98c3ffc4 	addi	r3,r19,4095
   454d0:	00bc0004 	movi	r2,-4096
   454d4:	18a6703a 	and	r19,r3,r2
   454d8:	9009883a 	mov	r4,r18
   454dc:	980b883a 	mov	r5,r19
   454e0:	00471980 	call	47198 <_sbrk_r>
   454e4:	1009883a 	mov	r4,r2
   454e8:	15000426 	beq	r2,r20,454fc <_malloc_r+0x3f8>
   454ec:	854b883a 	add	r5,r16,r21
   454f0:	1029883a 	mov	r20,r2
   454f4:	11405a2e 	bgeu	r2,r5,45660 <_malloc_r+0x55c>
   454f8:	87000c26 	beq	r16,fp,4552c <_malloc_r+0x428>
   454fc:	e4000217 	ldw	r16,8(fp)
   45500:	80c00117 	ldw	r3,4(r16)
   45504:	00bfff04 	movi	r2,-4
   45508:	1884703a 	and	r2,r3,r2
   4550c:	14400336 	bltu	r2,r17,4551c <_malloc_r+0x418>
   45510:	1449c83a 	sub	r4,r2,r17
   45514:	008003c4 	movi	r2,15
   45518:	113fd316 	blt	r2,r4,45468 <_malloc_r+0x364>
   4551c:	9009883a 	mov	r4,r18
   45520:	004a3780 	call	4a378 <__malloc_unlock>
   45524:	0007883a 	mov	r3,zero
   45528:	003f0a06 	br	45154 <_malloc_r+0x50>
   4552c:	05c001b4 	movhi	r23,6
   45530:	bdc79604 	addi	r23,r23,7768
   45534:	b8800017 	ldw	r2,0(r23)
   45538:	988d883a 	add	r6,r19,r2
   4553c:	b9800015 	stw	r6,0(r23)
   45540:	d0e00517 	ldw	r3,-32748(gp)
   45544:	00bfffc4 	movi	r2,-1
   45548:	18808e26 	beq	r3,r2,45784 <_malloc_r+0x680>
   4554c:	2145c83a 	sub	r2,r4,r5
   45550:	3085883a 	add	r2,r6,r2
   45554:	b8800015 	stw	r2,0(r23)
   45558:	20c001cc 	andi	r3,r4,7
   4555c:	18005f1e 	bne	r3,zero,456dc <_malloc_r+0x5d8>
   45560:	000b883a 	mov	r5,zero
   45564:	a4c5883a 	add	r2,r20,r19
   45568:	1083ffcc 	andi	r2,r2,4095
   4556c:	00c40004 	movi	r3,4096
   45570:	1887c83a 	sub	r3,r3,r2
   45574:	28e7883a 	add	r19,r5,r3
   45578:	9009883a 	mov	r4,r18
   4557c:	980b883a 	mov	r5,r19
   45580:	00471980 	call	47198 <_sbrk_r>
   45584:	1007883a 	mov	r3,r2
   45588:	00bfffc4 	movi	r2,-1
   4558c:	18807a26 	beq	r3,r2,45778 <_malloc_r+0x674>
   45590:	1d05c83a 	sub	r2,r3,r20
   45594:	9885883a 	add	r2,r19,r2
   45598:	10c00054 	ori	r3,r2,1
   4559c:	b8800017 	ldw	r2,0(r23)
   455a0:	a021883a 	mov	r16,r20
   455a4:	a0c00115 	stw	r3,4(r20)
   455a8:	9885883a 	add	r2,r19,r2
   455ac:	b8800015 	stw	r2,0(r23)
   455b0:	e5000215 	stw	r20,8(fp)
   455b4:	b7003626 	beq	r22,fp,45690 <_malloc_r+0x58c>
   455b8:	018003c4 	movi	r6,15
   455bc:	35404b36 	bltu	r6,r21,456ec <_malloc_r+0x5e8>
   455c0:	00800044 	movi	r2,1
   455c4:	a0800115 	stw	r2,4(r20)
   455c8:	003fcd06 	br	45500 <_malloc_r+0x3fc>
   455cc:	2808d27a 	srli	r4,r5,9
   455d0:	2000371e 	bne	r4,zero,456b0 <_malloc_r+0x5ac>
   455d4:	2808d0fa 	srli	r4,r5,3
   455d8:	200690fa 	slli	r3,r4,3
   455dc:	1ad1883a 	add	r8,r3,r11
   455e0:	41800217 	ldw	r6,8(r8)
   455e4:	41805b26 	beq	r8,r6,45754 <_malloc_r+0x650>
   455e8:	30800117 	ldw	r2,4(r6)
   455ec:	00ffff04 	movi	r3,-4
   455f0:	10c4703a 	and	r2,r2,r3
   455f4:	2880022e 	bgeu	r5,r2,45600 <_malloc_r+0x4fc>
   455f8:	31800217 	ldw	r6,8(r6)
   455fc:	41bffa1e 	bne	r8,r6,455e8 <_malloc_r+0x4e4>
   45600:	32000317 	ldw	r8,12(r6)
   45604:	39c00117 	ldw	r7,4(r7)
   45608:	82000315 	stw	r8,12(r16)
   4560c:	81800215 	stw	r6,8(r16)
   45610:	070001b4 	movhi	fp,6
   45614:	e701f004 	addi	fp,fp,1984
   45618:	34000315 	stw	r16,12(r6)
   4561c:	44000215 	stw	r16,8(r8)
   45620:	003f3e06 	br	4531c <_malloc_r+0x218>
   45624:	63000044 	addi	r12,r12,1
   45628:	608000cc 	andi	r2,r12,3
   4562c:	10005d26 	beq	r2,zero,457a4 <_malloc_r+0x6a0>
   45630:	18c00204 	addi	r3,r3,8
   45634:	003f5106 	br	4537c <_malloc_r+0x278>
   45638:	8089883a 	add	r4,r16,r2
   4563c:	003f6d06 	br	453f4 <_malloc_r+0x2f0>
   45640:	00805504 	movi	r2,340
   45644:	10c02036 	bltu	r2,r3,456c8 <_malloc_r+0x5c4>
   45648:	8804d3fa 	srli	r2,r17,15
   4564c:	11801dc4 	addi	r6,r2,119
   45650:	300490fa 	slli	r2,r6,3
   45654:	003ed806 	br	451b8 <_malloc_r+0xb4>
   45658:	48c000c4 	addi	r3,r9,3
   4565c:	003f3106 	br	45324 <_malloc_r+0x220>
   45660:	05c001b4 	movhi	r23,6
   45664:	bdc79604 	addi	r23,r23,7768
   45668:	b8800017 	ldw	r2,0(r23)
   4566c:	988d883a 	add	r6,r19,r2
   45670:	b9800015 	stw	r6,0(r23)
   45674:	293fb21e 	bne	r5,r4,45540 <_malloc_r+0x43c>
   45678:	2083ffcc 	andi	r2,r4,4095
   4567c:	103fb01e 	bne	r2,zero,45540 <_malloc_r+0x43c>
   45680:	e4000217 	ldw	r16,8(fp)
   45684:	9d45883a 	add	r2,r19,r21
   45688:	10800054 	ori	r2,r2,1
   4568c:	80800115 	stw	r2,4(r16)
   45690:	b8c00017 	ldw	r3,0(r23)
   45694:	d0a01917 	ldw	r2,-32668(gp)
   45698:	10c0012e 	bgeu	r2,r3,456a0 <_malloc_r+0x59c>
   4569c:	d0e01915 	stw	r3,-32668(gp)
   456a0:	d0a01a17 	ldw	r2,-32664(gp)
   456a4:	10ff962e 	bgeu	r2,r3,45500 <_malloc_r+0x3fc>
   456a8:	d0e01a15 	stw	r3,-32664(gp)
   456ac:	003f9406 	br	45500 <_malloc_r+0x3fc>
   456b0:	00800104 	movi	r2,4
   456b4:	11001e36 	bltu	r2,r4,45730 <_malloc_r+0x62c>
   456b8:	2804d1ba 	srli	r2,r5,6
   456bc:	11000e04 	addi	r4,r2,56
   456c0:	200690fa 	slli	r3,r4,3
   456c4:	003fc506 	br	455dc <_malloc_r+0x4d8>
   456c8:	00815504 	movi	r2,1364
   456cc:	10c01d2e 	bgeu	r2,r3,45744 <_malloc_r+0x640>
   456d0:	01801f84 	movi	r6,126
   456d4:	0080fc04 	movi	r2,1008
   456d8:	003eb706 	br	451b8 <_malloc_r+0xb4>
   456dc:	00800204 	movi	r2,8
   456e0:	10cbc83a 	sub	r5,r2,r3
   456e4:	2169883a 	add	r20,r4,r5
   456e8:	003f9e06 	br	45564 <_malloc_r+0x460>
   456ec:	00bffe04 	movi	r2,-8
   456f0:	a93ffd04 	addi	r4,r21,-12
   456f4:	2088703a 	and	r4,r4,r2
   456f8:	b10b883a 	add	r5,r22,r4
   456fc:	00c00144 	movi	r3,5
   45700:	28c00215 	stw	r3,8(r5)
   45704:	28c00115 	stw	r3,4(r5)
   45708:	b0800117 	ldw	r2,4(r22)
   4570c:	1080004c 	andi	r2,r2,1
   45710:	2084b03a 	or	r2,r4,r2
   45714:	b0800115 	stw	r2,4(r22)
   45718:	313fdd2e 	bgeu	r6,r4,45690 <_malloc_r+0x58c>
   4571c:	b1400204 	addi	r5,r22,8
   45720:	9009883a 	mov	r4,r18
   45724:	004457c0 	call	4457c <_free_r>
   45728:	e4000217 	ldw	r16,8(fp)
   4572c:	003fd806 	br	45690 <_malloc_r+0x58c>
   45730:	00800504 	movi	r2,20
   45734:	11001536 	bltu	r2,r4,4578c <_malloc_r+0x688>
   45738:	210016c4 	addi	r4,r4,91
   4573c:	200690fa 	slli	r3,r4,3
   45740:	003fa606 	br	455dc <_malloc_r+0x4d8>
   45744:	8804d4ba 	srli	r2,r17,18
   45748:	11801f04 	addi	r6,r2,124
   4574c:	300490fa 	slli	r2,r6,3
   45750:	003e9906 	br	451b8 <_malloc_r+0xb4>
   45754:	2009d0ba 	srai	r4,r4,2
   45758:	014001b4 	movhi	r5,6
   4575c:	2941f004 	addi	r5,r5,1984
   45760:	00c00044 	movi	r3,1
   45764:	28800117 	ldw	r2,4(r5)
   45768:	1906983a 	sll	r3,r3,r4
   4576c:	10c4b03a 	or	r2,r2,r3
   45770:	28800115 	stw	r2,4(r5)
   45774:	003fa306 	br	45604 <_malloc_r+0x500>
   45778:	0027883a 	mov	r19,zero
   4577c:	00c00044 	movi	r3,1
   45780:	003f8606 	br	4559c <_malloc_r+0x498>
   45784:	d1200515 	stw	r4,-32748(gp)
   45788:	003f7306 	br	45558 <_malloc_r+0x454>
   4578c:	00801504 	movi	r2,84
   45790:	11001936 	bltu	r2,r4,457f8 <_malloc_r+0x6f4>
   45794:	2804d33a 	srli	r2,r5,12
   45798:	11001b84 	addi	r4,r2,110
   4579c:	200690fa 	slli	r3,r4,3
   457a0:	003f8e06 	br	455dc <_malloc_r+0x4d8>
   457a4:	480b883a 	mov	r5,r9
   457a8:	6807883a 	mov	r3,r13
   457ac:	288000cc 	andi	r2,r5,3
   457b0:	18fffe04 	addi	r3,r3,-8
   457b4:	297fffc4 	addi	r5,r5,-1
   457b8:	10001526 	beq	r2,zero,45810 <_malloc_r+0x70c>
   457bc:	18800217 	ldw	r2,8(r3)
   457c0:	10fffa26 	beq	r2,r3,457ac <_malloc_r+0x6a8>
   457c4:	2109883a 	add	r4,r4,r4
   457c8:	393f1e36 	bltu	r7,r4,45444 <_malloc_r+0x340>
   457cc:	203f1d26 	beq	r4,zero,45444 <_malloc_r+0x340>
   457d0:	21c4703a 	and	r2,r4,r7
   457d4:	10000226 	beq	r2,zero,457e0 <_malloc_r+0x6dc>
   457d8:	6013883a 	mov	r9,r12
   457dc:	003ee106 	br	45364 <_malloc_r+0x260>
   457e0:	2109883a 	add	r4,r4,r4
   457e4:	3904703a 	and	r2,r7,r4
   457e8:	63000104 	addi	r12,r12,4
   457ec:	103ffc26 	beq	r2,zero,457e0 <_malloc_r+0x6dc>
   457f0:	6013883a 	mov	r9,r12
   457f4:	003edb06 	br	45364 <_malloc_r+0x260>
   457f8:	00805504 	movi	r2,340
   457fc:	11000836 	bltu	r2,r4,45820 <_malloc_r+0x71c>
   45800:	2804d3fa 	srli	r2,r5,15
   45804:	11001dc4 	addi	r4,r2,119
   45808:	200690fa 	slli	r3,r4,3
   4580c:	003f7306 	br	455dc <_malloc_r+0x4d8>
   45810:	0104303a 	nor	r2,zero,r4
   45814:	388e703a 	and	r7,r7,r2
   45818:	e1c00115 	stw	r7,4(fp)
   4581c:	003fe906 	br	457c4 <_malloc_r+0x6c0>
   45820:	00815504 	movi	r2,1364
   45824:	1100032e 	bgeu	r2,r4,45834 <_malloc_r+0x730>
   45828:	01001f84 	movi	r4,126
   4582c:	00c0fc04 	movi	r3,1008
   45830:	003f6a06 	br	455dc <_malloc_r+0x4d8>
   45834:	2804d4ba 	srli	r2,r5,18
   45838:	11001f04 	addi	r4,r2,124
   4583c:	200690fa 	slli	r3,r4,3
   45840:	003f6606 	br	455dc <_malloc_r+0x4d8>

00045844 <memchr>:
   45844:	008000c4 	movi	r2,3
   45848:	29403fcc 	andi	r5,r5,255
   4584c:	2007883a 	mov	r3,r4
   45850:	1180022e 	bgeu	r2,r6,4585c <memchr+0x18>
   45854:	2084703a 	and	r2,r4,r2
   45858:	10000b26 	beq	r2,zero,45888 <memchr+0x44>
   4585c:	313fffc4 	addi	r4,r6,-1
   45860:	3000051e 	bne	r6,zero,45878 <memchr+0x34>
   45864:	00002c06 	br	45918 <memchr+0xd4>
   45868:	213fffc4 	addi	r4,r4,-1
   4586c:	00bfffc4 	movi	r2,-1
   45870:	18c00044 	addi	r3,r3,1
   45874:	20802826 	beq	r4,r2,45918 <memchr+0xd4>
   45878:	18800003 	ldbu	r2,0(r3)
   4587c:	28bffa1e 	bne	r5,r2,45868 <memchr+0x24>
   45880:	1805883a 	mov	r2,r3
   45884:	f800283a 	ret
   45888:	0011883a 	mov	r8,zero
   4588c:	0007883a 	mov	r3,zero
   45890:	01c00104 	movi	r7,4
   45894:	4004923a 	slli	r2,r8,8
   45898:	18c00044 	addi	r3,r3,1
   4589c:	1151883a 	add	r8,r2,r5
   458a0:	19fffc1e 	bne	r3,r7,45894 <memchr+0x50>
   458a4:	02bfbff4 	movhi	r10,65279
   458a8:	52bfbfc4 	addi	r10,r10,-257
   458ac:	02602074 	movhi	r9,32897
   458b0:	4a602004 	addi	r9,r9,-32640
   458b4:	02c000c4 	movi	r11,3
   458b8:	20800017 	ldw	r2,0(r4)
   458bc:	31bfff04 	addi	r6,r6,-4
   458c0:	200f883a 	mov	r7,r4
   458c4:	1204f03a 	xor	r2,r2,r8
   458c8:	1287883a 	add	r3,r2,r10
   458cc:	1a46703a 	and	r3,r3,r9
   458d0:	0084303a 	nor	r2,zero,r2
   458d4:	10c4703a 	and	r2,r2,r3
   458d8:	10000b26 	beq	r2,zero,45908 <memchr+0xc4>
   458dc:	20800003 	ldbu	r2,0(r4)
   458e0:	28800f26 	beq	r5,r2,45920 <memchr+0xdc>
   458e4:	20800043 	ldbu	r2,1(r4)
   458e8:	21c00044 	addi	r7,r4,1
   458ec:	28800c26 	beq	r5,r2,45920 <memchr+0xdc>
   458f0:	20800083 	ldbu	r2,2(r4)
   458f4:	21c00084 	addi	r7,r4,2
   458f8:	28800926 	beq	r5,r2,45920 <memchr+0xdc>
   458fc:	208000c3 	ldbu	r2,3(r4)
   45900:	21c000c4 	addi	r7,r4,3
   45904:	28800626 	beq	r5,r2,45920 <memchr+0xdc>
   45908:	21000104 	addi	r4,r4,4
   4590c:	59bfea36 	bltu	r11,r6,458b8 <memchr+0x74>
   45910:	2007883a 	mov	r3,r4
   45914:	003fd106 	br	4585c <memchr+0x18>
   45918:	0005883a 	mov	r2,zero
   4591c:	f800283a 	ret
   45920:	3805883a 	mov	r2,r7
   45924:	f800283a 	ret

00045928 <memcpy>:
   45928:	01c003c4 	movi	r7,15
   4592c:	2007883a 	mov	r3,r4
   45930:	3980032e 	bgeu	r7,r6,45940 <memcpy+0x18>
   45934:	2904b03a 	or	r2,r5,r4
   45938:	108000cc 	andi	r2,r2,3
   4593c:	10000926 	beq	r2,zero,45964 <memcpy+0x3c>
   45940:	30000626 	beq	r6,zero,4595c <memcpy+0x34>
   45944:	30cd883a 	add	r6,r6,r3
   45948:	28800003 	ldbu	r2,0(r5)
   4594c:	29400044 	addi	r5,r5,1
   45950:	18800005 	stb	r2,0(r3)
   45954:	18c00044 	addi	r3,r3,1
   45958:	30fffb1e 	bne	r6,r3,45948 <memcpy+0x20>
   4595c:	2005883a 	mov	r2,r4
   45960:	f800283a 	ret
   45964:	3811883a 	mov	r8,r7
   45968:	200f883a 	mov	r7,r4
   4596c:	28c00017 	ldw	r3,0(r5)
   45970:	31bffc04 	addi	r6,r6,-16
   45974:	38c00015 	stw	r3,0(r7)
   45978:	28800117 	ldw	r2,4(r5)
   4597c:	38800115 	stw	r2,4(r7)
   45980:	28c00217 	ldw	r3,8(r5)
   45984:	38c00215 	stw	r3,8(r7)
   45988:	28800317 	ldw	r2,12(r5)
   4598c:	29400404 	addi	r5,r5,16
   45990:	38800315 	stw	r2,12(r7)
   45994:	39c00404 	addi	r7,r7,16
   45998:	41bff436 	bltu	r8,r6,4596c <memcpy+0x44>
   4599c:	008000c4 	movi	r2,3
   459a0:	1180072e 	bgeu	r2,r6,459c0 <memcpy+0x98>
   459a4:	1007883a 	mov	r3,r2
   459a8:	28800017 	ldw	r2,0(r5)
   459ac:	31bfff04 	addi	r6,r6,-4
   459b0:	29400104 	addi	r5,r5,4
   459b4:	38800015 	stw	r2,0(r7)
   459b8:	39c00104 	addi	r7,r7,4
   459bc:	19bffa36 	bltu	r3,r6,459a8 <memcpy+0x80>
   459c0:	3807883a 	mov	r3,r7
   459c4:	003fde06 	br	45940 <memcpy+0x18>

000459c8 <memmove>:
   459c8:	2807883a 	mov	r3,r5
   459cc:	2011883a 	mov	r8,r4
   459d0:	29000c2e 	bgeu	r5,r4,45a04 <memmove+0x3c>
   459d4:	298f883a 	add	r7,r5,r6
   459d8:	21c00a2e 	bgeu	r4,r7,45a04 <memmove+0x3c>
   459dc:	30000726 	beq	r6,zero,459fc <memmove+0x34>
   459e0:	2187883a 	add	r3,r4,r6
   459e4:	198dc83a 	sub	r6,r3,r6
   459e8:	39ffffc4 	addi	r7,r7,-1
   459ec:	38800003 	ldbu	r2,0(r7)
   459f0:	18ffffc4 	addi	r3,r3,-1
   459f4:	18800005 	stb	r2,0(r3)
   459f8:	19bffb1e 	bne	r3,r6,459e8 <memmove+0x20>
   459fc:	2005883a 	mov	r2,r4
   45a00:	f800283a 	ret
   45a04:	01c003c4 	movi	r7,15
   45a08:	39800a36 	bltu	r7,r6,45a34 <memmove+0x6c>
   45a0c:	303ffb26 	beq	r6,zero,459fc <memmove+0x34>
   45a10:	400f883a 	mov	r7,r8
   45a14:	320d883a 	add	r6,r6,r8
   45a18:	28800003 	ldbu	r2,0(r5)
   45a1c:	29400044 	addi	r5,r5,1
   45a20:	38800005 	stb	r2,0(r7)
   45a24:	39c00044 	addi	r7,r7,1
   45a28:	39bffb1e 	bne	r7,r6,45a18 <memmove+0x50>
   45a2c:	2005883a 	mov	r2,r4
   45a30:	f800283a 	ret
   45a34:	1904b03a 	or	r2,r3,r4
   45a38:	108000cc 	andi	r2,r2,3
   45a3c:	103ff31e 	bne	r2,zero,45a0c <memmove+0x44>
   45a40:	3811883a 	mov	r8,r7
   45a44:	180b883a 	mov	r5,r3
   45a48:	200f883a 	mov	r7,r4
   45a4c:	28c00017 	ldw	r3,0(r5)
   45a50:	31bffc04 	addi	r6,r6,-16
   45a54:	38c00015 	stw	r3,0(r7)
   45a58:	28800117 	ldw	r2,4(r5)
   45a5c:	38800115 	stw	r2,4(r7)
   45a60:	28c00217 	ldw	r3,8(r5)
   45a64:	38c00215 	stw	r3,8(r7)
   45a68:	28800317 	ldw	r2,12(r5)
   45a6c:	29400404 	addi	r5,r5,16
   45a70:	38800315 	stw	r2,12(r7)
   45a74:	39c00404 	addi	r7,r7,16
   45a78:	41bff436 	bltu	r8,r6,45a4c <memmove+0x84>
   45a7c:	008000c4 	movi	r2,3
   45a80:	1180072e 	bgeu	r2,r6,45aa0 <memmove+0xd8>
   45a84:	1007883a 	mov	r3,r2
   45a88:	28800017 	ldw	r2,0(r5)
   45a8c:	31bfff04 	addi	r6,r6,-4
   45a90:	29400104 	addi	r5,r5,4
   45a94:	38800015 	stw	r2,0(r7)
   45a98:	39c00104 	addi	r7,r7,4
   45a9c:	19bffa36 	bltu	r3,r6,45a88 <memmove+0xc0>
   45aa0:	3811883a 	mov	r8,r7
   45aa4:	003fd906 	br	45a0c <memmove+0x44>

00045aa8 <memset>:
   45aa8:	008000c4 	movi	r2,3
   45aac:	29403fcc 	andi	r5,r5,255
   45ab0:	2007883a 	mov	r3,r4
   45ab4:	1180022e 	bgeu	r2,r6,45ac0 <memset+0x18>
   45ab8:	2084703a 	and	r2,r4,r2
   45abc:	10000826 	beq	r2,zero,45ae0 <memset+0x38>
   45ac0:	30000526 	beq	r6,zero,45ad8 <memset+0x30>
   45ac4:	2805883a 	mov	r2,r5
   45ac8:	30cd883a 	add	r6,r6,r3
   45acc:	18800005 	stb	r2,0(r3)
   45ad0:	18c00044 	addi	r3,r3,1
   45ad4:	19bffd1e 	bne	r3,r6,45acc <memset+0x24>
   45ad8:	2005883a 	mov	r2,r4
   45adc:	f800283a 	ret
   45ae0:	2804923a 	slli	r2,r5,8
   45ae4:	020003c4 	movi	r8,15
   45ae8:	200f883a 	mov	r7,r4
   45aec:	2884b03a 	or	r2,r5,r2
   45af0:	1006943a 	slli	r3,r2,16
   45af4:	10c6b03a 	or	r3,r2,r3
   45af8:	41800a2e 	bgeu	r8,r6,45b24 <memset+0x7c>
   45afc:	4005883a 	mov	r2,r8
   45b00:	31bffc04 	addi	r6,r6,-16
   45b04:	38c00015 	stw	r3,0(r7)
   45b08:	38c00115 	stw	r3,4(r7)
   45b0c:	38c00215 	stw	r3,8(r7)
   45b10:	38c00315 	stw	r3,12(r7)
   45b14:	39c00404 	addi	r7,r7,16
   45b18:	11bff936 	bltu	r2,r6,45b00 <memset+0x58>
   45b1c:	008000c4 	movi	r2,3
   45b20:	1180052e 	bgeu	r2,r6,45b38 <memset+0x90>
   45b24:	31bfff04 	addi	r6,r6,-4
   45b28:	008000c4 	movi	r2,3
   45b2c:	38c00015 	stw	r3,0(r7)
   45b30:	39c00104 	addi	r7,r7,4
   45b34:	11bffb36 	bltu	r2,r6,45b24 <memset+0x7c>
   45b38:	3807883a 	mov	r3,r7
   45b3c:	003fe006 	br	45ac0 <memset+0x18>

00045b40 <_Bfree>:
   45b40:	28000826 	beq	r5,zero,45b64 <_Bfree+0x24>
   45b44:	28800117 	ldw	r2,4(r5)
   45b48:	21001317 	ldw	r4,76(r4)
   45b4c:	1085883a 	add	r2,r2,r2
   45b50:	1085883a 	add	r2,r2,r2
   45b54:	1105883a 	add	r2,r2,r4
   45b58:	10c00017 	ldw	r3,0(r2)
   45b5c:	28c00015 	stw	r3,0(r5)
   45b60:	11400015 	stw	r5,0(r2)
   45b64:	f800283a 	ret

00045b68 <__hi0bits>:
   45b68:	20bfffec 	andhi	r2,r4,65535
   45b6c:	10001426 	beq	r2,zero,45bc0 <__hi0bits+0x58>
   45b70:	0007883a 	mov	r3,zero
   45b74:	20bfc02c 	andhi	r2,r4,65280
   45b78:	1000021e 	bne	r2,zero,45b84 <__hi0bits+0x1c>
   45b7c:	2008923a 	slli	r4,r4,8
   45b80:	18c00204 	addi	r3,r3,8
   45b84:	20bc002c 	andhi	r2,r4,61440
   45b88:	1000021e 	bne	r2,zero,45b94 <__hi0bits+0x2c>
   45b8c:	2008913a 	slli	r4,r4,4
   45b90:	18c00104 	addi	r3,r3,4
   45b94:	20b0002c 	andhi	r2,r4,49152
   45b98:	1000031e 	bne	r2,zero,45ba8 <__hi0bits+0x40>
   45b9c:	2105883a 	add	r2,r4,r4
   45ba0:	18c00084 	addi	r3,r3,2
   45ba4:	1089883a 	add	r4,r2,r2
   45ba8:	20000316 	blt	r4,zero,45bb8 <__hi0bits+0x50>
   45bac:	2090002c 	andhi	r2,r4,16384
   45bb0:	10000626 	beq	r2,zero,45bcc <__hi0bits+0x64>
   45bb4:	18c00044 	addi	r3,r3,1
   45bb8:	1805883a 	mov	r2,r3
   45bbc:	f800283a 	ret
   45bc0:	2008943a 	slli	r4,r4,16
   45bc4:	00c00404 	movi	r3,16
   45bc8:	003fea06 	br	45b74 <__hi0bits+0xc>
   45bcc:	00c00804 	movi	r3,32
   45bd0:	1805883a 	mov	r2,r3
   45bd4:	f800283a 	ret

00045bd8 <__lo0bits>:
   45bd8:	20c00017 	ldw	r3,0(r4)
   45bdc:	188001cc 	andi	r2,r3,7
   45be0:	10000a26 	beq	r2,zero,45c0c <__lo0bits+0x34>
   45be4:	1880004c 	andi	r2,r3,1
   45be8:	1005003a 	cmpeq	r2,r2,zero
   45bec:	10002126 	beq	r2,zero,45c74 <__lo0bits+0x9c>
   45bf0:	1880008c 	andi	r2,r3,2
   45bf4:	1000251e 	bne	r2,zero,45c8c <__lo0bits+0xb4>
   45bf8:	1804d0ba 	srli	r2,r3,2
   45bfc:	01400084 	movi	r5,2
   45c00:	20800015 	stw	r2,0(r4)
   45c04:	2805883a 	mov	r2,r5
   45c08:	f800283a 	ret
   45c0c:	18bfffcc 	andi	r2,r3,65535
   45c10:	10001526 	beq	r2,zero,45c68 <__lo0bits+0x90>
   45c14:	000b883a 	mov	r5,zero
   45c18:	18803fcc 	andi	r2,r3,255
   45c1c:	1000021e 	bne	r2,zero,45c28 <__lo0bits+0x50>
   45c20:	1806d23a 	srli	r3,r3,8
   45c24:	29400204 	addi	r5,r5,8
   45c28:	188003cc 	andi	r2,r3,15
   45c2c:	1000021e 	bne	r2,zero,45c38 <__lo0bits+0x60>
   45c30:	1806d13a 	srli	r3,r3,4
   45c34:	29400104 	addi	r5,r5,4
   45c38:	188000cc 	andi	r2,r3,3
   45c3c:	1000021e 	bne	r2,zero,45c48 <__lo0bits+0x70>
   45c40:	1806d0ba 	srli	r3,r3,2
   45c44:	29400084 	addi	r5,r5,2
   45c48:	1880004c 	andi	r2,r3,1
   45c4c:	1000031e 	bne	r2,zero,45c5c <__lo0bits+0x84>
   45c50:	1806d07a 	srli	r3,r3,1
   45c54:	18000a26 	beq	r3,zero,45c80 <__lo0bits+0xa8>
   45c58:	29400044 	addi	r5,r5,1
   45c5c:	2805883a 	mov	r2,r5
   45c60:	20c00015 	stw	r3,0(r4)
   45c64:	f800283a 	ret
   45c68:	1806d43a 	srli	r3,r3,16
   45c6c:	01400404 	movi	r5,16
   45c70:	003fe906 	br	45c18 <__lo0bits+0x40>
   45c74:	000b883a 	mov	r5,zero
   45c78:	2805883a 	mov	r2,r5
   45c7c:	f800283a 	ret
   45c80:	01400804 	movi	r5,32
   45c84:	2805883a 	mov	r2,r5
   45c88:	f800283a 	ret
   45c8c:	1804d07a 	srli	r2,r3,1
   45c90:	01400044 	movi	r5,1
   45c94:	20800015 	stw	r2,0(r4)
   45c98:	003fda06 	br	45c04 <__lo0bits+0x2c>

00045c9c <__mcmp>:
   45c9c:	20800417 	ldw	r2,16(r4)
   45ca0:	28c00417 	ldw	r3,16(r5)
   45ca4:	10cfc83a 	sub	r7,r2,r3
   45ca8:	38000c1e 	bne	r7,zero,45cdc <__mcmp+0x40>
   45cac:	18c5883a 	add	r2,r3,r3
   45cb0:	1085883a 	add	r2,r2,r2
   45cb4:	10c00504 	addi	r3,r2,20
   45cb8:	21000504 	addi	r4,r4,20
   45cbc:	28cb883a 	add	r5,r5,r3
   45cc0:	2085883a 	add	r2,r4,r2
   45cc4:	10bfff04 	addi	r2,r2,-4
   45cc8:	297fff04 	addi	r5,r5,-4
   45ccc:	11800017 	ldw	r6,0(r2)
   45cd0:	28c00017 	ldw	r3,0(r5)
   45cd4:	30c0031e 	bne	r6,r3,45ce4 <__mcmp+0x48>
   45cd8:	20bffa36 	bltu	r4,r2,45cc4 <__mcmp+0x28>
   45cdc:	3805883a 	mov	r2,r7
   45ce0:	f800283a 	ret
   45ce4:	30c00336 	bltu	r6,r3,45cf4 <__mcmp+0x58>
   45ce8:	01c00044 	movi	r7,1
   45cec:	3805883a 	mov	r2,r7
   45cf0:	f800283a 	ret
   45cf4:	01ffffc4 	movi	r7,-1
   45cf8:	003ff806 	br	45cdc <__mcmp+0x40>

00045cfc <__ulp>:
   45cfc:	295ffc2c 	andhi	r5,r5,32752
   45d00:	013f3034 	movhi	r4,64704
   45d04:	290b883a 	add	r5,r5,r4
   45d08:	0145c83a 	sub	r2,zero,r5
   45d0c:	1007d53a 	srai	r3,r2,20
   45d10:	000d883a 	mov	r6,zero
   45d14:	0140040e 	bge	zero,r5,45d28 <__ulp+0x2c>
   45d18:	280f883a 	mov	r7,r5
   45d1c:	3807883a 	mov	r3,r7
   45d20:	3005883a 	mov	r2,r6
   45d24:	f800283a 	ret
   45d28:	008004c4 	movi	r2,19
   45d2c:	193ffb04 	addi	r4,r3,-20
   45d30:	10c00c0e 	bge	r2,r3,45d64 <__ulp+0x68>
   45d34:	008007c4 	movi	r2,31
   45d38:	1107c83a 	sub	r3,r2,r4
   45d3c:	00800784 	movi	r2,30
   45d40:	01400044 	movi	r5,1
   45d44:	11000216 	blt	r2,r4,45d50 <__ulp+0x54>
   45d48:	00800044 	movi	r2,1
   45d4c:	10ca983a 	sll	r5,r2,r3
   45d50:	000f883a 	mov	r7,zero
   45d54:	280d883a 	mov	r6,r5
   45d58:	3807883a 	mov	r3,r7
   45d5c:	3005883a 	mov	r2,r6
   45d60:	f800283a 	ret
   45d64:	00800234 	movhi	r2,8
   45d68:	10cfd83a 	sra	r7,r2,r3
   45d6c:	000d883a 	mov	r6,zero
   45d70:	3005883a 	mov	r2,r6
   45d74:	3807883a 	mov	r3,r7
   45d78:	f800283a 	ret

00045d7c <__b2d>:
   45d7c:	20800417 	ldw	r2,16(r4)
   45d80:	defff904 	addi	sp,sp,-28
   45d84:	dd000415 	stw	r20,16(sp)
   45d88:	1085883a 	add	r2,r2,r2
   45d8c:	25000504 	addi	r20,r4,20
   45d90:	1085883a 	add	r2,r2,r2
   45d94:	dc000015 	stw	r16,0(sp)
   45d98:	a0a1883a 	add	r16,r20,r2
   45d9c:	dd400515 	stw	r21,20(sp)
   45da0:	857fff17 	ldw	r21,-4(r16)
   45da4:	dc400115 	stw	r17,4(sp)
   45da8:	dfc00615 	stw	ra,24(sp)
   45dac:	a809883a 	mov	r4,r21
   45db0:	2823883a 	mov	r17,r5
   45db4:	dcc00315 	stw	r19,12(sp)
   45db8:	dc800215 	stw	r18,8(sp)
   45dbc:	0045b680 	call	45b68 <__hi0bits>
   45dc0:	100b883a 	mov	r5,r2
   45dc4:	00800804 	movi	r2,32
   45dc8:	1145c83a 	sub	r2,r2,r5
   45dcc:	88800015 	stw	r2,0(r17)
   45dd0:	00800284 	movi	r2,10
   45dd4:	80ffff04 	addi	r3,r16,-4
   45dd8:	11401416 	blt	r2,r5,45e2c <__b2d+0xb0>
   45ddc:	008002c4 	movi	r2,11
   45de0:	1149c83a 	sub	r4,r2,r5
   45de4:	a0c02736 	bltu	r20,r3,45e84 <__b2d+0x108>
   45de8:	000d883a 	mov	r6,zero
   45dec:	28800544 	addi	r2,r5,21
   45df0:	a906d83a 	srl	r3,r21,r4
   45df4:	a884983a 	sll	r2,r21,r2
   45df8:	1ccffc34 	orhi	r19,r3,16368
   45dfc:	11a4b03a 	or	r18,r2,r6
   45e00:	9005883a 	mov	r2,r18
   45e04:	9807883a 	mov	r3,r19
   45e08:	dfc00617 	ldw	ra,24(sp)
   45e0c:	dd400517 	ldw	r21,20(sp)
   45e10:	dd000417 	ldw	r20,16(sp)
   45e14:	dcc00317 	ldw	r19,12(sp)
   45e18:	dc800217 	ldw	r18,8(sp)
   45e1c:	dc400117 	ldw	r17,4(sp)
   45e20:	dc000017 	ldw	r16,0(sp)
   45e24:	dec00704 	addi	sp,sp,28
   45e28:	f800283a 	ret
   45e2c:	a0c00e36 	bltu	r20,r3,45e68 <__b2d+0xec>
   45e30:	293ffd44 	addi	r4,r5,-11
   45e34:	000d883a 	mov	r6,zero
   45e38:	20000f26 	beq	r4,zero,45e78 <__b2d+0xfc>
   45e3c:	00800804 	movi	r2,32
   45e40:	110bc83a 	sub	r5,r2,r4
   45e44:	a0c01236 	bltu	r20,r3,45e90 <__b2d+0x114>
   45e48:	000f883a 	mov	r7,zero
   45e4c:	a904983a 	sll	r2,r21,r4
   45e50:	3146d83a 	srl	r3,r6,r5
   45e54:	3108983a 	sll	r4,r6,r4
   45e58:	108ffc34 	orhi	r2,r2,16368
   45e5c:	18a6b03a 	or	r19,r3,r2
   45e60:	3924b03a 	or	r18,r7,r4
   45e64:	003fe606 	br	45e00 <__b2d+0x84>
   45e68:	293ffd44 	addi	r4,r5,-11
   45e6c:	81bffe17 	ldw	r6,-8(r16)
   45e70:	80fffe04 	addi	r3,r16,-8
   45e74:	203ff11e 	bne	r4,zero,45e3c <__b2d+0xc0>
   45e78:	accffc34 	orhi	r19,r21,16368
   45e7c:	3025883a 	mov	r18,r6
   45e80:	003fdf06 	br	45e00 <__b2d+0x84>
   45e84:	18bfff17 	ldw	r2,-4(r3)
   45e88:	110cd83a 	srl	r6,r2,r4
   45e8c:	003fd706 	br	45dec <__b2d+0x70>
   45e90:	18bfff17 	ldw	r2,-4(r3)
   45e94:	114ed83a 	srl	r7,r2,r5
   45e98:	003fec06 	br	45e4c <__b2d+0xd0>

00045e9c <__ratio>:
   45e9c:	defff904 	addi	sp,sp,-28
   45ea0:	dc400215 	stw	r17,8(sp)
   45ea4:	2823883a 	mov	r17,r5
   45ea8:	d80b883a 	mov	r5,sp
   45eac:	dfc00615 	stw	ra,24(sp)
   45eb0:	dd000515 	stw	r20,20(sp)
   45eb4:	dcc00415 	stw	r19,16(sp)
   45eb8:	dc800315 	stw	r18,12(sp)
   45ebc:	2025883a 	mov	r18,r4
   45ec0:	0045d7c0 	call	45d7c <__b2d>
   45ec4:	8809883a 	mov	r4,r17
   45ec8:	d9400104 	addi	r5,sp,4
   45ecc:	1027883a 	mov	r19,r2
   45ed0:	1829883a 	mov	r20,r3
   45ed4:	0045d7c0 	call	45d7c <__b2d>
   45ed8:	89000417 	ldw	r4,16(r17)
   45edc:	91c00417 	ldw	r7,16(r18)
   45ee0:	d9800117 	ldw	r6,4(sp)
   45ee4:	180b883a 	mov	r5,r3
   45ee8:	390fc83a 	sub	r7,r7,r4
   45eec:	1009883a 	mov	r4,r2
   45ef0:	d8800017 	ldw	r2,0(sp)
   45ef4:	380e917a 	slli	r7,r7,5
   45ef8:	2011883a 	mov	r8,r4
   45efc:	1185c83a 	sub	r2,r2,r6
   45f00:	11c5883a 	add	r2,r2,r7
   45f04:	1006953a 	slli	r3,r2,20
   45f08:	2813883a 	mov	r9,r5
   45f0c:	00800d0e 	bge	zero,r2,45f44 <__ratio+0xa8>
   45f10:	1d29883a 	add	r20,r3,r20
   45f14:	a00b883a 	mov	r5,r20
   45f18:	480f883a 	mov	r7,r9
   45f1c:	9809883a 	mov	r4,r19
   45f20:	400d883a 	mov	r6,r8
   45f24:	0048cf80 	call	48cf8 <__divdf3>
   45f28:	dfc00617 	ldw	ra,24(sp)
   45f2c:	dd000517 	ldw	r20,20(sp)
   45f30:	dcc00417 	ldw	r19,16(sp)
   45f34:	dc800317 	ldw	r18,12(sp)
   45f38:	dc400217 	ldw	r17,8(sp)
   45f3c:	dec00704 	addi	sp,sp,28
   45f40:	f800283a 	ret
   45f44:	28d3c83a 	sub	r9,r5,r3
   45f48:	003ff206 	br	45f14 <__ratio+0x78>

00045f4c <_mprec_log10>:
   45f4c:	defffe04 	addi	sp,sp,-8
   45f50:	008005c4 	movi	r2,23
   45f54:	dc000015 	stw	r16,0(sp)
   45f58:	dfc00115 	stw	ra,4(sp)
   45f5c:	2021883a 	mov	r16,r4
   45f60:	11000c16 	blt	r2,r4,45f94 <_mprec_log10+0x48>
   45f64:	200490fa 	slli	r2,r4,3
   45f68:	00c001b4 	movhi	r3,6
   45f6c:	18c05204 	addi	r3,r3,328
   45f70:	10c5883a 	add	r2,r2,r3
   45f74:	12400117 	ldw	r9,4(r2)
   45f78:	12000017 	ldw	r8,0(r2)
   45f7c:	4807883a 	mov	r3,r9
   45f80:	4005883a 	mov	r2,r8
   45f84:	dfc00117 	ldw	ra,4(sp)
   45f88:	dc000017 	ldw	r16,0(sp)
   45f8c:	dec00204 	addi	sp,sp,8
   45f90:	f800283a 	ret
   45f94:	0011883a 	mov	r8,zero
   45f98:	024ffc34 	movhi	r9,16368
   45f9c:	0005883a 	mov	r2,zero
   45fa0:	00d00934 	movhi	r3,16420
   45fa4:	480b883a 	mov	r5,r9
   45fa8:	4009883a 	mov	r4,r8
   45fac:	180f883a 	mov	r7,r3
   45fb0:	100d883a 	mov	r6,r2
   45fb4:	00489340 	call	48934 <__muldf3>
   45fb8:	843fffc4 	addi	r16,r16,-1
   45fbc:	1011883a 	mov	r8,r2
   45fc0:	1813883a 	mov	r9,r3
   45fc4:	803ff51e 	bne	r16,zero,45f9c <_mprec_log10+0x50>
   45fc8:	4005883a 	mov	r2,r8
   45fcc:	4807883a 	mov	r3,r9
   45fd0:	dfc00117 	ldw	ra,4(sp)
   45fd4:	dc000017 	ldw	r16,0(sp)
   45fd8:	dec00204 	addi	sp,sp,8
   45fdc:	f800283a 	ret

00045fe0 <__copybits>:
   45fe0:	297fffc4 	addi	r5,r5,-1
   45fe4:	30800417 	ldw	r2,16(r6)
   45fe8:	280bd17a 	srai	r5,r5,5
   45fec:	31800504 	addi	r6,r6,20
   45ff0:	1085883a 	add	r2,r2,r2
   45ff4:	294b883a 	add	r5,r5,r5
   45ff8:	294b883a 	add	r5,r5,r5
   45ffc:	1085883a 	add	r2,r2,r2
   46000:	290b883a 	add	r5,r5,r4
   46004:	3087883a 	add	r3,r6,r2
   46008:	29400104 	addi	r5,r5,4
   4600c:	30c0052e 	bgeu	r6,r3,46024 <__copybits+0x44>
   46010:	30800017 	ldw	r2,0(r6)
   46014:	31800104 	addi	r6,r6,4
   46018:	20800015 	stw	r2,0(r4)
   4601c:	21000104 	addi	r4,r4,4
   46020:	30fffb36 	bltu	r6,r3,46010 <__copybits+0x30>
   46024:	2140032e 	bgeu	r4,r5,46034 <__copybits+0x54>
   46028:	20000015 	stw	zero,0(r4)
   4602c:	21000104 	addi	r4,r4,4
   46030:	217ffd36 	bltu	r4,r5,46028 <__copybits+0x48>
   46034:	f800283a 	ret

00046038 <__any_on>:
   46038:	20800417 	ldw	r2,16(r4)
   4603c:	2807d17a 	srai	r3,r5,5
   46040:	21000504 	addi	r4,r4,20
   46044:	10c00d0e 	bge	r2,r3,4607c <__any_on+0x44>
   46048:	1085883a 	add	r2,r2,r2
   4604c:	1085883a 	add	r2,r2,r2
   46050:	208d883a 	add	r6,r4,r2
   46054:	2180182e 	bgeu	r4,r6,460b8 <__any_on+0x80>
   46058:	30bfff17 	ldw	r2,-4(r6)
   4605c:	30ffff04 	addi	r3,r6,-4
   46060:	1000041e 	bne	r2,zero,46074 <__any_on+0x3c>
   46064:	20c0142e 	bgeu	r4,r3,460b8 <__any_on+0x80>
   46068:	18ffff04 	addi	r3,r3,-4
   4606c:	18800017 	ldw	r2,0(r3)
   46070:	103ffc26 	beq	r2,zero,46064 <__any_on+0x2c>
   46074:	00800044 	movi	r2,1
   46078:	f800283a 	ret
   4607c:	18800a0e 	bge	r3,r2,460a8 <__any_on+0x70>
   46080:	294007cc 	andi	r5,r5,31
   46084:	28000826 	beq	r5,zero,460a8 <__any_on+0x70>
   46088:	18c5883a 	add	r2,r3,r3
   4608c:	1085883a 	add	r2,r2,r2
   46090:	208d883a 	add	r6,r4,r2
   46094:	30c00017 	ldw	r3,0(r6)
   46098:	1944d83a 	srl	r2,r3,r5
   4609c:	1144983a 	sll	r2,r2,r5
   460a0:	18bff41e 	bne	r3,r2,46074 <__any_on+0x3c>
   460a4:	003feb06 	br	46054 <__any_on+0x1c>
   460a8:	18c5883a 	add	r2,r3,r3
   460ac:	1085883a 	add	r2,r2,r2
   460b0:	208d883a 	add	r6,r4,r2
   460b4:	003fe706 	br	46054 <__any_on+0x1c>
   460b8:	0005883a 	mov	r2,zero
   460bc:	f800283a 	ret

000460c0 <_Balloc>:
   460c0:	20c01317 	ldw	r3,76(r4)
   460c4:	defffb04 	addi	sp,sp,-20
   460c8:	dcc00315 	stw	r19,12(sp)
   460cc:	dc800215 	stw	r18,8(sp)
   460d0:	dfc00415 	stw	ra,16(sp)
   460d4:	2825883a 	mov	r18,r5
   460d8:	dc400115 	stw	r17,4(sp)
   460dc:	dc000015 	stw	r16,0(sp)
   460e0:	2027883a 	mov	r19,r4
   460e4:	01800404 	movi	r6,16
   460e8:	01400104 	movi	r5,4
   460ec:	18001726 	beq	r3,zero,4614c <_Balloc+0x8c>
   460f0:	01400044 	movi	r5,1
   460f4:	9485883a 	add	r2,r18,r18
   460f8:	2ca2983a 	sll	r17,r5,r18
   460fc:	1085883a 	add	r2,r2,r2
   46100:	10c7883a 	add	r3,r2,r3
   46104:	1c000017 	ldw	r16,0(r3)
   46108:	8c4d883a 	add	r6,r17,r17
   4610c:	318d883a 	add	r6,r6,r6
   46110:	9809883a 	mov	r4,r19
   46114:	31800504 	addi	r6,r6,20
   46118:	80001226 	beq	r16,zero,46164 <_Balloc+0xa4>
   4611c:	80800017 	ldw	r2,0(r16)
   46120:	18800015 	stw	r2,0(r3)
   46124:	80000415 	stw	zero,16(r16)
   46128:	80000315 	stw	zero,12(r16)
   4612c:	8005883a 	mov	r2,r16
   46130:	dfc00417 	ldw	ra,16(sp)
   46134:	dcc00317 	ldw	r19,12(sp)
   46138:	dc800217 	ldw	r18,8(sp)
   4613c:	dc400117 	ldw	r17,4(sp)
   46140:	dc000017 	ldw	r16,0(sp)
   46144:	dec00504 	addi	sp,sp,20
   46148:	f800283a 	ret
   4614c:	00474880 	call	47488 <_calloc_r>
   46150:	1007883a 	mov	r3,r2
   46154:	0021883a 	mov	r16,zero
   46158:	98801315 	stw	r2,76(r19)
   4615c:	103fe41e 	bne	r2,zero,460f0 <_Balloc+0x30>
   46160:	003ff206 	br	4612c <_Balloc+0x6c>
   46164:	00474880 	call	47488 <_calloc_r>
   46168:	103ff026 	beq	r2,zero,4612c <_Balloc+0x6c>
   4616c:	1021883a 	mov	r16,r2
   46170:	14800115 	stw	r18,4(r2)
   46174:	14400215 	stw	r17,8(r2)
   46178:	003fea06 	br	46124 <_Balloc+0x64>

0004617c <__d2b>:
   4617c:	defff504 	addi	sp,sp,-44
   46180:	dcc00515 	stw	r19,20(sp)
   46184:	04c00044 	movi	r19,1
   46188:	dc000215 	stw	r16,8(sp)
   4618c:	2821883a 	mov	r16,r5
   46190:	980b883a 	mov	r5,r19
   46194:	ddc00915 	stw	r23,36(sp)
   46198:	dd800815 	stw	r22,32(sp)
   4619c:	dd400715 	stw	r21,28(sp)
   461a0:	dd000615 	stw	r20,24(sp)
   461a4:	dc800415 	stw	r18,16(sp)
   461a8:	dc400315 	stw	r17,12(sp)
   461ac:	dfc00a15 	stw	ra,40(sp)
   461b0:	3023883a 	mov	r17,r6
   461b4:	382d883a 	mov	r22,r7
   461b8:	ddc00b17 	ldw	r23,44(sp)
   461bc:	00460c00 	call	460c0 <_Balloc>
   461c0:	1025883a 	mov	r18,r2
   461c4:	00a00034 	movhi	r2,32768
   461c8:	10bfffc4 	addi	r2,r2,-1
   461cc:	8888703a 	and	r4,r17,r2
   461d0:	202ad53a 	srli	r21,r4,20
   461d4:	00800434 	movhi	r2,16
   461d8:	10bfffc4 	addi	r2,r2,-1
   461dc:	8886703a 	and	r3,r17,r2
   461e0:	a829003a 	cmpeq	r20,r21,zero
   461e4:	800b883a 	mov	r5,r16
   461e8:	d8c00115 	stw	r3,4(sp)
   461ec:	94000504 	addi	r16,r18,20
   461f0:	a000021e 	bne	r20,zero,461fc <__d2b+0x80>
   461f4:	18c00434 	orhi	r3,r3,16
   461f8:	d8c00115 	stw	r3,4(sp)
   461fc:	28002726 	beq	r5,zero,4629c <__d2b+0x120>
   46200:	d809883a 	mov	r4,sp
   46204:	d9400015 	stw	r5,0(sp)
   46208:	0045bd80 	call	45bd8 <__lo0bits>
   4620c:	100d883a 	mov	r6,r2
   46210:	10003526 	beq	r2,zero,462e8 <__d2b+0x16c>
   46214:	d8c00117 	ldw	r3,4(sp)
   46218:	00800804 	movi	r2,32
   4621c:	1185c83a 	sub	r2,r2,r6
   46220:	d9000017 	ldw	r4,0(sp)
   46224:	1886983a 	sll	r3,r3,r2
   46228:	1906b03a 	or	r3,r3,r4
   4622c:	90c00515 	stw	r3,20(r18)
   46230:	d8c00117 	ldw	r3,4(sp)
   46234:	1986d83a 	srl	r3,r3,r6
   46238:	d8c00115 	stw	r3,4(sp)
   4623c:	180b003a 	cmpeq	r5,r3,zero
   46240:	00800084 	movi	r2,2
   46244:	114bc83a 	sub	r5,r2,r5
   46248:	80c00115 	stw	r3,4(r16)
   4624c:	91400415 	stw	r5,16(r18)
   46250:	a0001a1e 	bne	r20,zero,462bc <__d2b+0x140>
   46254:	3545883a 	add	r2,r6,r21
   46258:	10bef344 	addi	r2,r2,-1075
   4625c:	00c00d44 	movi	r3,53
   46260:	b0800015 	stw	r2,0(r22)
   46264:	1987c83a 	sub	r3,r3,r6
   46268:	b8c00015 	stw	r3,0(r23)
   4626c:	9005883a 	mov	r2,r18
   46270:	dfc00a17 	ldw	ra,40(sp)
   46274:	ddc00917 	ldw	r23,36(sp)
   46278:	dd800817 	ldw	r22,32(sp)
   4627c:	dd400717 	ldw	r21,28(sp)
   46280:	dd000617 	ldw	r20,24(sp)
   46284:	dcc00517 	ldw	r19,20(sp)
   46288:	dc800417 	ldw	r18,16(sp)
   4628c:	dc400317 	ldw	r17,12(sp)
   46290:	dc000217 	ldw	r16,8(sp)
   46294:	dec00b04 	addi	sp,sp,44
   46298:	f800283a 	ret
   4629c:	d9000104 	addi	r4,sp,4
   462a0:	0045bd80 	call	45bd8 <__lo0bits>
   462a4:	11800804 	addi	r6,r2,32
   462a8:	d8800117 	ldw	r2,4(sp)
   462ac:	94c00415 	stw	r19,16(r18)
   462b0:	980b883a 	mov	r5,r19
   462b4:	90800515 	stw	r2,20(r18)
   462b8:	a03fe626 	beq	r20,zero,46254 <__d2b+0xd8>
   462bc:	2945883a 	add	r2,r5,r5
   462c0:	1085883a 	add	r2,r2,r2
   462c4:	1405883a 	add	r2,r2,r16
   462c8:	113fff17 	ldw	r4,-4(r2)
   462cc:	30fef384 	addi	r3,r6,-1074
   462d0:	2820917a 	slli	r16,r5,5
   462d4:	b0c00015 	stw	r3,0(r22)
   462d8:	0045b680 	call	45b68 <__hi0bits>
   462dc:	80a1c83a 	sub	r16,r16,r2
   462e0:	bc000015 	stw	r16,0(r23)
   462e4:	003fe106 	br	4626c <__d2b+0xf0>
   462e8:	d8800017 	ldw	r2,0(sp)
   462ec:	90800515 	stw	r2,20(r18)
   462f0:	d8c00117 	ldw	r3,4(sp)
   462f4:	003fd106 	br	4623c <__d2b+0xc0>

000462f8 <__mdiff>:
   462f8:	defffb04 	addi	sp,sp,-20
   462fc:	dc000015 	stw	r16,0(sp)
   46300:	2821883a 	mov	r16,r5
   46304:	dc800215 	stw	r18,8(sp)
   46308:	300b883a 	mov	r5,r6
   4630c:	2025883a 	mov	r18,r4
   46310:	8009883a 	mov	r4,r16
   46314:	dc400115 	stw	r17,4(sp)
   46318:	dfc00415 	stw	ra,16(sp)
   4631c:	dcc00315 	stw	r19,12(sp)
   46320:	3023883a 	mov	r17,r6
   46324:	0045c9c0 	call	45c9c <__mcmp>
   46328:	10004226 	beq	r2,zero,46434 <__mdiff+0x13c>
   4632c:	10005016 	blt	r2,zero,46470 <__mdiff+0x178>
   46330:	0027883a 	mov	r19,zero
   46334:	81400117 	ldw	r5,4(r16)
   46338:	9009883a 	mov	r4,r18
   4633c:	00460c00 	call	460c0 <_Balloc>
   46340:	1019883a 	mov	r12,r2
   46344:	82800417 	ldw	r10,16(r16)
   46348:	88800417 	ldw	r2,16(r17)
   4634c:	81800504 	addi	r6,r16,20
   46350:	5287883a 	add	r3,r10,r10
   46354:	1085883a 	add	r2,r2,r2
   46358:	18c7883a 	add	r3,r3,r3
   4635c:	1085883a 	add	r2,r2,r2
   46360:	8a000504 	addi	r8,r17,20
   46364:	64c00315 	stw	r19,12(r12)
   46368:	30db883a 	add	r13,r6,r3
   4636c:	4097883a 	add	r11,r8,r2
   46370:	61c00504 	addi	r7,r12,20
   46374:	0013883a 	mov	r9,zero
   46378:	31000017 	ldw	r4,0(r6)
   4637c:	41400017 	ldw	r5,0(r8)
   46380:	42000104 	addi	r8,r8,4
   46384:	20bfffcc 	andi	r2,r4,65535
   46388:	28ffffcc 	andi	r3,r5,65535
   4638c:	10c5c83a 	sub	r2,r2,r3
   46390:	1245883a 	add	r2,r2,r9
   46394:	2008d43a 	srli	r4,r4,16
   46398:	280ad43a 	srli	r5,r5,16
   4639c:	1007d43a 	srai	r3,r2,16
   463a0:	3880000d 	sth	r2,0(r7)
   463a4:	2149c83a 	sub	r4,r4,r5
   463a8:	20c9883a 	add	r4,r4,r3
   463ac:	3900008d 	sth	r4,2(r7)
   463b0:	31800104 	addi	r6,r6,4
   463b4:	39c00104 	addi	r7,r7,4
   463b8:	2013d43a 	srai	r9,r4,16
   463bc:	42ffee36 	bltu	r8,r11,46378 <__mdiff+0x80>
   463c0:	33400c2e 	bgeu	r6,r13,463f4 <__mdiff+0xfc>
   463c4:	30800017 	ldw	r2,0(r6)
   463c8:	31800104 	addi	r6,r6,4
   463cc:	10ffffcc 	andi	r3,r2,65535
   463d0:	1a47883a 	add	r3,r3,r9
   463d4:	1004d43a 	srli	r2,r2,16
   463d8:	1809d43a 	srai	r4,r3,16
   463dc:	38c0000d 	sth	r3,0(r7)
   463e0:	1105883a 	add	r2,r2,r4
   463e4:	3880008d 	sth	r2,2(r7)
   463e8:	1013d43a 	srai	r9,r2,16
   463ec:	39c00104 	addi	r7,r7,4
   463f0:	337ff436 	bltu	r6,r13,463c4 <__mdiff+0xcc>
   463f4:	38bfff17 	ldw	r2,-4(r7)
   463f8:	38ffff04 	addi	r3,r7,-4
   463fc:	1000041e 	bne	r2,zero,46410 <__mdiff+0x118>
   46400:	18ffff04 	addi	r3,r3,-4
   46404:	18800017 	ldw	r2,0(r3)
   46408:	52bfffc4 	addi	r10,r10,-1
   4640c:	103ffc26 	beq	r2,zero,46400 <__mdiff+0x108>
   46410:	6005883a 	mov	r2,r12
   46414:	62800415 	stw	r10,16(r12)
   46418:	dfc00417 	ldw	ra,16(sp)
   4641c:	dcc00317 	ldw	r19,12(sp)
   46420:	dc800217 	ldw	r18,8(sp)
   46424:	dc400117 	ldw	r17,4(sp)
   46428:	dc000017 	ldw	r16,0(sp)
   4642c:	dec00504 	addi	sp,sp,20
   46430:	f800283a 	ret
   46434:	9009883a 	mov	r4,r18
   46438:	000b883a 	mov	r5,zero
   4643c:	00460c00 	call	460c0 <_Balloc>
   46440:	1019883a 	mov	r12,r2
   46444:	00800044 	movi	r2,1
   46448:	60800415 	stw	r2,16(r12)
   4644c:	6005883a 	mov	r2,r12
   46450:	60000515 	stw	zero,20(r12)
   46454:	dfc00417 	ldw	ra,16(sp)
   46458:	dcc00317 	ldw	r19,12(sp)
   4645c:	dc800217 	ldw	r18,8(sp)
   46460:	dc400117 	ldw	r17,4(sp)
   46464:	dc000017 	ldw	r16,0(sp)
   46468:	dec00504 	addi	sp,sp,20
   4646c:	f800283a 	ret
   46470:	880d883a 	mov	r6,r17
   46474:	04c00044 	movi	r19,1
   46478:	8023883a 	mov	r17,r16
   4647c:	3021883a 	mov	r16,r6
   46480:	003fac06 	br	46334 <__mdiff+0x3c>

00046484 <__lshift>:
   46484:	defff904 	addi	sp,sp,-28
   46488:	28800417 	ldw	r2,16(r5)
   4648c:	dc000015 	stw	r16,0(sp)
   46490:	3021d17a 	srai	r16,r6,5
   46494:	28c00217 	ldw	r3,8(r5)
   46498:	10800044 	addi	r2,r2,1
   4649c:	dc400115 	stw	r17,4(sp)
   464a0:	80a3883a 	add	r17,r16,r2
   464a4:	dd400515 	stw	r21,20(sp)
   464a8:	dd000415 	stw	r20,16(sp)
   464ac:	dc800215 	stw	r18,8(sp)
   464b0:	dfc00615 	stw	ra,24(sp)
   464b4:	2825883a 	mov	r18,r5
   464b8:	dcc00315 	stw	r19,12(sp)
   464bc:	3029883a 	mov	r20,r6
   464c0:	202b883a 	mov	r21,r4
   464c4:	29400117 	ldw	r5,4(r5)
   464c8:	1c40030e 	bge	r3,r17,464d8 <__lshift+0x54>
   464cc:	18c7883a 	add	r3,r3,r3
   464d0:	29400044 	addi	r5,r5,1
   464d4:	1c7ffd16 	blt	r3,r17,464cc <__lshift+0x48>
   464d8:	a809883a 	mov	r4,r21
   464dc:	00460c00 	call	460c0 <_Balloc>
   464e0:	1027883a 	mov	r19,r2
   464e4:	11400504 	addi	r5,r2,20
   464e8:	0400090e 	bge	zero,r16,46510 <__lshift+0x8c>
   464ec:	2805883a 	mov	r2,r5
   464f0:	0007883a 	mov	r3,zero
   464f4:	18c00044 	addi	r3,r3,1
   464f8:	10000015 	stw	zero,0(r2)
   464fc:	10800104 	addi	r2,r2,4
   46500:	80fffc1e 	bne	r16,r3,464f4 <__lshift+0x70>
   46504:	8405883a 	add	r2,r16,r16
   46508:	1085883a 	add	r2,r2,r2
   4650c:	288b883a 	add	r5,r5,r2
   46510:	90800417 	ldw	r2,16(r18)
   46514:	91000504 	addi	r4,r18,20
   46518:	a18007cc 	andi	r6,r20,31
   4651c:	1085883a 	add	r2,r2,r2
   46520:	1085883a 	add	r2,r2,r2
   46524:	208f883a 	add	r7,r4,r2
   46528:	30001e26 	beq	r6,zero,465a4 <__lshift+0x120>
   4652c:	00800804 	movi	r2,32
   46530:	1191c83a 	sub	r8,r2,r6
   46534:	0007883a 	mov	r3,zero
   46538:	20800017 	ldw	r2,0(r4)
   4653c:	1184983a 	sll	r2,r2,r6
   46540:	1884b03a 	or	r2,r3,r2
   46544:	28800015 	stw	r2,0(r5)
   46548:	20c00017 	ldw	r3,0(r4)
   4654c:	21000104 	addi	r4,r4,4
   46550:	29400104 	addi	r5,r5,4
   46554:	1a06d83a 	srl	r3,r3,r8
   46558:	21fff736 	bltu	r4,r7,46538 <__lshift+0xb4>
   4655c:	28c00015 	stw	r3,0(r5)
   46560:	18000126 	beq	r3,zero,46568 <__lshift+0xe4>
   46564:	8c400044 	addi	r17,r17,1
   46568:	88bfffc4 	addi	r2,r17,-1
   4656c:	98800415 	stw	r2,16(r19)
   46570:	a809883a 	mov	r4,r21
   46574:	900b883a 	mov	r5,r18
   46578:	0045b400 	call	45b40 <_Bfree>
   4657c:	9805883a 	mov	r2,r19
   46580:	dfc00617 	ldw	ra,24(sp)
   46584:	dd400517 	ldw	r21,20(sp)
   46588:	dd000417 	ldw	r20,16(sp)
   4658c:	dcc00317 	ldw	r19,12(sp)
   46590:	dc800217 	ldw	r18,8(sp)
   46594:	dc400117 	ldw	r17,4(sp)
   46598:	dc000017 	ldw	r16,0(sp)
   4659c:	dec00704 	addi	sp,sp,28
   465a0:	f800283a 	ret
   465a4:	20800017 	ldw	r2,0(r4)
   465a8:	21000104 	addi	r4,r4,4
   465ac:	28800015 	stw	r2,0(r5)
   465b0:	29400104 	addi	r5,r5,4
   465b4:	21ffec2e 	bgeu	r4,r7,46568 <__lshift+0xe4>
   465b8:	20800017 	ldw	r2,0(r4)
   465bc:	21000104 	addi	r4,r4,4
   465c0:	28800015 	stw	r2,0(r5)
   465c4:	29400104 	addi	r5,r5,4
   465c8:	21fff636 	bltu	r4,r7,465a4 <__lshift+0x120>
   465cc:	003fe606 	br	46568 <__lshift+0xe4>

000465d0 <__multiply>:
   465d0:	defff904 	addi	sp,sp,-28
   465d4:	dcc00315 	stw	r19,12(sp)
   465d8:	dc800215 	stw	r18,8(sp)
   465dc:	2cc00417 	ldw	r19,16(r5)
   465e0:	34800417 	ldw	r18,16(r6)
   465e4:	dd000415 	stw	r20,16(sp)
   465e8:	dc400115 	stw	r17,4(sp)
   465ec:	dfc00615 	stw	ra,24(sp)
   465f0:	dd400515 	stw	r21,20(sp)
   465f4:	dc000015 	stw	r16,0(sp)
   465f8:	2823883a 	mov	r17,r5
   465fc:	3029883a 	mov	r20,r6
   46600:	9c80040e 	bge	r19,r18,46614 <__multiply+0x44>
   46604:	9027883a 	mov	r19,r18
   46608:	2c800417 	ldw	r18,16(r5)
   4660c:	2829883a 	mov	r20,r5
   46610:	3023883a 	mov	r17,r6
   46614:	88800217 	ldw	r2,8(r17)
   46618:	9ca1883a 	add	r16,r19,r18
   4661c:	89400117 	ldw	r5,4(r17)
   46620:	1400010e 	bge	r2,r16,46628 <__multiply+0x58>
   46624:	29400044 	addi	r5,r5,1
   46628:	00460c00 	call	460c0 <_Balloc>
   4662c:	102b883a 	mov	r21,r2
   46630:	8405883a 	add	r2,r16,r16
   46634:	1085883a 	add	r2,r2,r2
   46638:	a9000504 	addi	r4,r21,20
   4663c:	209d883a 	add	r14,r4,r2
   46640:	2380042e 	bgeu	r4,r14,46654 <__multiply+0x84>
   46644:	2005883a 	mov	r2,r4
   46648:	10000015 	stw	zero,0(r2)
   4664c:	10800104 	addi	r2,r2,4
   46650:	13bffd36 	bltu	r2,r14,46648 <__multiply+0x78>
   46654:	9485883a 	add	r2,r18,r18
   46658:	9cc7883a 	add	r3,r19,r19
   4665c:	a1800504 	addi	r6,r20,20
   46660:	1085883a 	add	r2,r2,r2
   46664:	8b400504 	addi	r13,r17,20
   46668:	18c7883a 	add	r3,r3,r3
   4666c:	309f883a 	add	r15,r6,r2
   46670:	68d7883a 	add	r11,r13,r3
   46674:	33c03b2e 	bgeu	r6,r15,46764 <__multiply+0x194>
   46678:	2019883a 	mov	r12,r4
   4667c:	30800017 	ldw	r2,0(r6)
   46680:	127fffcc 	andi	r9,r2,65535
   46684:	48001826 	beq	r9,zero,466e8 <__multiply+0x118>
   46688:	6811883a 	mov	r8,r13
   4668c:	600f883a 	mov	r7,r12
   46690:	0015883a 	mov	r10,zero
   46694:	40c00017 	ldw	r3,0(r8)
   46698:	39400017 	ldw	r5,0(r7)
   4669c:	42000104 	addi	r8,r8,4
   466a0:	193fffcc 	andi	r4,r3,65535
   466a4:	4909383a 	mul	r4,r9,r4
   466a8:	1806d43a 	srli	r3,r3,16
   466ac:	28bfffcc 	andi	r2,r5,65535
   466b0:	5085883a 	add	r2,r10,r2
   466b4:	2089883a 	add	r4,r4,r2
   466b8:	48c7383a 	mul	r3,r9,r3
   466bc:	280ad43a 	srli	r5,r5,16
   466c0:	2004d43a 	srli	r2,r4,16
   466c4:	3900000d 	sth	r4,0(r7)
   466c8:	1947883a 	add	r3,r3,r5
   466cc:	10c5883a 	add	r2,r2,r3
   466d0:	3880008d 	sth	r2,2(r7)
   466d4:	1014d43a 	srli	r10,r2,16
   466d8:	39c00104 	addi	r7,r7,4
   466dc:	42ffed36 	bltu	r8,r11,46694 <__multiply+0xc4>
   466e0:	3a800015 	stw	r10,0(r7)
   466e4:	30800017 	ldw	r2,0(r6)
   466e8:	1012d43a 	srli	r9,r2,16
   466ec:	48001926 	beq	r9,zero,46754 <__multiply+0x184>
   466f0:	60800017 	ldw	r2,0(r12)
   466f4:	6811883a 	mov	r8,r13
   466f8:	600f883a 	mov	r7,r12
   466fc:	0015883a 	mov	r10,zero
   46700:	100b883a 	mov	r5,r2
   46704:	41000017 	ldw	r4,0(r8)
   46708:	2806d43a 	srli	r3,r5,16
   4670c:	3880000d 	sth	r2,0(r7)
   46710:	20bfffcc 	andi	r2,r4,65535
   46714:	4885383a 	mul	r2,r9,r2
   46718:	50c7883a 	add	r3,r10,r3
   4671c:	2008d43a 	srli	r4,r4,16
   46720:	10c5883a 	add	r2,r2,r3
   46724:	3880008d 	sth	r2,2(r7)
   46728:	39c00104 	addi	r7,r7,4
   4672c:	39400017 	ldw	r5,0(r7)
   46730:	4909383a 	mul	r4,r9,r4
   46734:	1004d43a 	srli	r2,r2,16
   46738:	28ffffcc 	andi	r3,r5,65535
   4673c:	20c9883a 	add	r4,r4,r3
   46740:	1105883a 	add	r2,r2,r4
   46744:	42000104 	addi	r8,r8,4
   46748:	1014d43a 	srli	r10,r2,16
   4674c:	42ffed36 	bltu	r8,r11,46704 <__multiply+0x134>
   46750:	38800015 	stw	r2,0(r7)
   46754:	31800104 	addi	r6,r6,4
   46758:	33c0022e 	bgeu	r6,r15,46764 <__multiply+0x194>
   4675c:	63000104 	addi	r12,r12,4
   46760:	003fc606 	br	4667c <__multiply+0xac>
   46764:	0400090e 	bge	zero,r16,4678c <__multiply+0x1bc>
   46768:	70bfff17 	ldw	r2,-4(r14)
   4676c:	70ffff04 	addi	r3,r14,-4
   46770:	10000326 	beq	r2,zero,46780 <__multiply+0x1b0>
   46774:	00000506 	br	4678c <__multiply+0x1bc>
   46778:	18800017 	ldw	r2,0(r3)
   4677c:	1000031e 	bne	r2,zero,4678c <__multiply+0x1bc>
   46780:	843fffc4 	addi	r16,r16,-1
   46784:	18ffff04 	addi	r3,r3,-4
   46788:	803ffb1e 	bne	r16,zero,46778 <__multiply+0x1a8>
   4678c:	a805883a 	mov	r2,r21
   46790:	ac000415 	stw	r16,16(r21)
   46794:	dfc00617 	ldw	ra,24(sp)
   46798:	dd400517 	ldw	r21,20(sp)
   4679c:	dd000417 	ldw	r20,16(sp)
   467a0:	dcc00317 	ldw	r19,12(sp)
   467a4:	dc800217 	ldw	r18,8(sp)
   467a8:	dc400117 	ldw	r17,4(sp)
   467ac:	dc000017 	ldw	r16,0(sp)
   467b0:	dec00704 	addi	sp,sp,28
   467b4:	f800283a 	ret

000467b8 <__i2b>:
   467b8:	defffd04 	addi	sp,sp,-12
   467bc:	dc000015 	stw	r16,0(sp)
   467c0:	04000044 	movi	r16,1
   467c4:	dc800115 	stw	r18,4(sp)
   467c8:	2825883a 	mov	r18,r5
   467cc:	800b883a 	mov	r5,r16
   467d0:	dfc00215 	stw	ra,8(sp)
   467d4:	00460c00 	call	460c0 <_Balloc>
   467d8:	14000415 	stw	r16,16(r2)
   467dc:	14800515 	stw	r18,20(r2)
   467e0:	dfc00217 	ldw	ra,8(sp)
   467e4:	dc800117 	ldw	r18,4(sp)
   467e8:	dc000017 	ldw	r16,0(sp)
   467ec:	dec00304 	addi	sp,sp,12
   467f0:	f800283a 	ret

000467f4 <__multadd>:
   467f4:	defffa04 	addi	sp,sp,-24
   467f8:	dc800215 	stw	r18,8(sp)
   467fc:	2c800417 	ldw	r18,16(r5)
   46800:	dd000415 	stw	r20,16(sp)
   46804:	dcc00315 	stw	r19,12(sp)
   46808:	dc000015 	stw	r16,0(sp)
   4680c:	dfc00515 	stw	ra,20(sp)
   46810:	3821883a 	mov	r16,r7
   46814:	dc400115 	stw	r17,4(sp)
   46818:	2827883a 	mov	r19,r5
   4681c:	2029883a 	mov	r20,r4
   46820:	2a000504 	addi	r8,r5,20
   46824:	000f883a 	mov	r7,zero
   46828:	40800017 	ldw	r2,0(r8)
   4682c:	39c00044 	addi	r7,r7,1
   46830:	10ffffcc 	andi	r3,r2,65535
   46834:	1987383a 	mul	r3,r3,r6
   46838:	1004d43a 	srli	r2,r2,16
   4683c:	1c07883a 	add	r3,r3,r16
   46840:	180ad43a 	srli	r5,r3,16
   46844:	1185383a 	mul	r2,r2,r6
   46848:	18ffffcc 	andi	r3,r3,65535
   4684c:	1145883a 	add	r2,r2,r5
   46850:	1008943a 	slli	r4,r2,16
   46854:	1020d43a 	srli	r16,r2,16
   46858:	20c9883a 	add	r4,r4,r3
   4685c:	41000015 	stw	r4,0(r8)
   46860:	42000104 	addi	r8,r8,4
   46864:	3cbff016 	blt	r7,r18,46828 <__multadd+0x34>
   46868:	80000826 	beq	r16,zero,4688c <__multadd+0x98>
   4686c:	98800217 	ldw	r2,8(r19)
   46870:	90800f0e 	bge	r18,r2,468b0 <__multadd+0xbc>
   46874:	9485883a 	add	r2,r18,r18
   46878:	1085883a 	add	r2,r2,r2
   4687c:	14c5883a 	add	r2,r2,r19
   46880:	90c00044 	addi	r3,r18,1
   46884:	14000515 	stw	r16,20(r2)
   46888:	98c00415 	stw	r3,16(r19)
   4688c:	9805883a 	mov	r2,r19
   46890:	dfc00517 	ldw	ra,20(sp)
   46894:	dd000417 	ldw	r20,16(sp)
   46898:	dcc00317 	ldw	r19,12(sp)
   4689c:	dc800217 	ldw	r18,8(sp)
   468a0:	dc400117 	ldw	r17,4(sp)
   468a4:	dc000017 	ldw	r16,0(sp)
   468a8:	dec00604 	addi	sp,sp,24
   468ac:	f800283a 	ret
   468b0:	99400117 	ldw	r5,4(r19)
   468b4:	a009883a 	mov	r4,r20
   468b8:	29400044 	addi	r5,r5,1
   468bc:	00460c00 	call	460c0 <_Balloc>
   468c0:	99800417 	ldw	r6,16(r19)
   468c4:	99400304 	addi	r5,r19,12
   468c8:	11000304 	addi	r4,r2,12
   468cc:	318d883a 	add	r6,r6,r6
   468d0:	318d883a 	add	r6,r6,r6
   468d4:	31800204 	addi	r6,r6,8
   468d8:	1023883a 	mov	r17,r2
   468dc:	00459280 	call	45928 <memcpy>
   468e0:	980b883a 	mov	r5,r19
   468e4:	a009883a 	mov	r4,r20
   468e8:	0045b400 	call	45b40 <_Bfree>
   468ec:	8827883a 	mov	r19,r17
   468f0:	003fe006 	br	46874 <__multadd+0x80>

000468f4 <__pow5mult>:
   468f4:	defffa04 	addi	sp,sp,-24
   468f8:	308000cc 	andi	r2,r6,3
   468fc:	dd000415 	stw	r20,16(sp)
   46900:	dcc00315 	stw	r19,12(sp)
   46904:	dc000015 	stw	r16,0(sp)
   46908:	dfc00515 	stw	ra,20(sp)
   4690c:	dc800215 	stw	r18,8(sp)
   46910:	dc400115 	stw	r17,4(sp)
   46914:	3021883a 	mov	r16,r6
   46918:	2027883a 	mov	r19,r4
   4691c:	2829883a 	mov	r20,r5
   46920:	10002b1e 	bne	r2,zero,469d0 <__pow5mult+0xdc>
   46924:	8025d0ba 	srai	r18,r16,2
   46928:	90001b26 	beq	r18,zero,46998 <__pow5mult+0xa4>
   4692c:	9c001217 	ldw	r16,72(r19)
   46930:	8000081e 	bne	r16,zero,46954 <__pow5mult+0x60>
   46934:	00003006 	br	469f8 <__pow5mult+0x104>
   46938:	800b883a 	mov	r5,r16
   4693c:	800d883a 	mov	r6,r16
   46940:	9809883a 	mov	r4,r19
   46944:	90001426 	beq	r18,zero,46998 <__pow5mult+0xa4>
   46948:	80800017 	ldw	r2,0(r16)
   4694c:	10001b26 	beq	r2,zero,469bc <__pow5mult+0xc8>
   46950:	1021883a 	mov	r16,r2
   46954:	9080004c 	andi	r2,r18,1
   46958:	1005003a 	cmpeq	r2,r2,zero
   4695c:	9025d07a 	srai	r18,r18,1
   46960:	800d883a 	mov	r6,r16
   46964:	9809883a 	mov	r4,r19
   46968:	a00b883a 	mov	r5,r20
   4696c:	103ff21e 	bne	r2,zero,46938 <__pow5mult+0x44>
   46970:	00465d00 	call	465d0 <__multiply>
   46974:	a00b883a 	mov	r5,r20
   46978:	9809883a 	mov	r4,r19
   4697c:	1023883a 	mov	r17,r2
   46980:	0045b400 	call	45b40 <_Bfree>
   46984:	8829883a 	mov	r20,r17
   46988:	800b883a 	mov	r5,r16
   4698c:	800d883a 	mov	r6,r16
   46990:	9809883a 	mov	r4,r19
   46994:	903fec1e 	bne	r18,zero,46948 <__pow5mult+0x54>
   46998:	a005883a 	mov	r2,r20
   4699c:	dfc00517 	ldw	ra,20(sp)
   469a0:	dd000417 	ldw	r20,16(sp)
   469a4:	dcc00317 	ldw	r19,12(sp)
   469a8:	dc800217 	ldw	r18,8(sp)
   469ac:	dc400117 	ldw	r17,4(sp)
   469b0:	dc000017 	ldw	r16,0(sp)
   469b4:	dec00604 	addi	sp,sp,24
   469b8:	f800283a 	ret
   469bc:	00465d00 	call	465d0 <__multiply>
   469c0:	80800015 	stw	r2,0(r16)
   469c4:	1021883a 	mov	r16,r2
   469c8:	10000015 	stw	zero,0(r2)
   469cc:	003fe106 	br	46954 <__pow5mult+0x60>
   469d0:	1085883a 	add	r2,r2,r2
   469d4:	00c001b4 	movhi	r3,6
   469d8:	18c09804 	addi	r3,r3,608
   469dc:	1085883a 	add	r2,r2,r2
   469e0:	10c5883a 	add	r2,r2,r3
   469e4:	11bfff17 	ldw	r6,-4(r2)
   469e8:	000f883a 	mov	r7,zero
   469ec:	00467f40 	call	467f4 <__multadd>
   469f0:	1029883a 	mov	r20,r2
   469f4:	003fcb06 	br	46924 <__pow5mult+0x30>
   469f8:	9809883a 	mov	r4,r19
   469fc:	01409c44 	movi	r5,625
   46a00:	00467b80 	call	467b8 <__i2b>
   46a04:	98801215 	stw	r2,72(r19)
   46a08:	1021883a 	mov	r16,r2
   46a0c:	10000015 	stw	zero,0(r2)
   46a10:	003fd006 	br	46954 <__pow5mult+0x60>

00046a14 <__s2b>:
   46a14:	defff904 	addi	sp,sp,-28
   46a18:	dcc00315 	stw	r19,12(sp)
   46a1c:	dc800215 	stw	r18,8(sp)
   46a20:	2827883a 	mov	r19,r5
   46a24:	2025883a 	mov	r18,r4
   46a28:	01400244 	movi	r5,9
   46a2c:	39000204 	addi	r4,r7,8
   46a30:	dd000415 	stw	r20,16(sp)
   46a34:	dc400115 	stw	r17,4(sp)
   46a38:	dfc00615 	stw	ra,24(sp)
   46a3c:	dd400515 	stw	r21,20(sp)
   46a40:	dc000015 	stw	r16,0(sp)
   46a44:	3829883a 	mov	r20,r7
   46a48:	3023883a 	mov	r17,r6
   46a4c:	00495d80 	call	495d8 <__divsi3>
   46a50:	00c00044 	movi	r3,1
   46a54:	1880350e 	bge	r3,r2,46b2c <__s2b+0x118>
   46a58:	000b883a 	mov	r5,zero
   46a5c:	18c7883a 	add	r3,r3,r3
   46a60:	29400044 	addi	r5,r5,1
   46a64:	18bffd16 	blt	r3,r2,46a5c <__s2b+0x48>
   46a68:	9009883a 	mov	r4,r18
   46a6c:	00460c00 	call	460c0 <_Balloc>
   46a70:	1011883a 	mov	r8,r2
   46a74:	d8800717 	ldw	r2,28(sp)
   46a78:	00c00044 	movi	r3,1
   46a7c:	01800244 	movi	r6,9
   46a80:	40800515 	stw	r2,20(r8)
   46a84:	40c00415 	stw	r3,16(r8)
   46a88:	3440260e 	bge	r6,r17,46b24 <__s2b+0x110>
   46a8c:	3021883a 	mov	r16,r6
   46a90:	99ab883a 	add	r21,r19,r6
   46a94:	9c05883a 	add	r2,r19,r16
   46a98:	11c00007 	ldb	r7,0(r2)
   46a9c:	400b883a 	mov	r5,r8
   46aa0:	9009883a 	mov	r4,r18
   46aa4:	39fff404 	addi	r7,r7,-48
   46aa8:	01800284 	movi	r6,10
   46aac:	00467f40 	call	467f4 <__multadd>
   46ab0:	84000044 	addi	r16,r16,1
   46ab4:	1011883a 	mov	r8,r2
   46ab8:	8c3ff61e 	bne	r17,r16,46a94 <__s2b+0x80>
   46abc:	ac45883a 	add	r2,r21,r17
   46ac0:	117ffe04 	addi	r5,r2,-8
   46ac4:	880d883a 	mov	r6,r17
   46ac8:	35000c0e 	bge	r6,r20,46afc <__s2b+0xe8>
   46acc:	a185c83a 	sub	r2,r20,r6
   46ad0:	2821883a 	mov	r16,r5
   46ad4:	28a3883a 	add	r17,r5,r2
   46ad8:	81c00007 	ldb	r7,0(r16)
   46adc:	400b883a 	mov	r5,r8
   46ae0:	9009883a 	mov	r4,r18
   46ae4:	39fff404 	addi	r7,r7,-48
   46ae8:	01800284 	movi	r6,10
   46aec:	00467f40 	call	467f4 <__multadd>
   46af0:	84000044 	addi	r16,r16,1
   46af4:	1011883a 	mov	r8,r2
   46af8:	847ff71e 	bne	r16,r17,46ad8 <__s2b+0xc4>
   46afc:	4005883a 	mov	r2,r8
   46b00:	dfc00617 	ldw	ra,24(sp)
   46b04:	dd400517 	ldw	r21,20(sp)
   46b08:	dd000417 	ldw	r20,16(sp)
   46b0c:	dcc00317 	ldw	r19,12(sp)
   46b10:	dc800217 	ldw	r18,8(sp)
   46b14:	dc400117 	ldw	r17,4(sp)
   46b18:	dc000017 	ldw	r16,0(sp)
   46b1c:	dec00704 	addi	sp,sp,28
   46b20:	f800283a 	ret
   46b24:	99400284 	addi	r5,r19,10
   46b28:	003fe706 	br	46ac8 <__s2b+0xb4>
   46b2c:	000b883a 	mov	r5,zero
   46b30:	003fcd06 	br	46a68 <__s2b+0x54>

00046b34 <_realloc_r>:
   46b34:	defff404 	addi	sp,sp,-48
   46b38:	dd800815 	stw	r22,32(sp)
   46b3c:	dc800415 	stw	r18,16(sp)
   46b40:	dc400315 	stw	r17,12(sp)
   46b44:	dfc00b15 	stw	ra,44(sp)
   46b48:	df000a15 	stw	fp,40(sp)
   46b4c:	ddc00915 	stw	r23,36(sp)
   46b50:	dd400715 	stw	r21,28(sp)
   46b54:	dd000615 	stw	r20,24(sp)
   46b58:	dcc00515 	stw	r19,20(sp)
   46b5c:	dc000215 	stw	r16,8(sp)
   46b60:	2825883a 	mov	r18,r5
   46b64:	3023883a 	mov	r17,r6
   46b68:	202d883a 	mov	r22,r4
   46b6c:	2800c926 	beq	r5,zero,46e94 <_realloc_r+0x360>
   46b70:	004a3580 	call	4a358 <__malloc_lock>
   46b74:	943ffe04 	addi	r16,r18,-8
   46b78:	88c002c4 	addi	r3,r17,11
   46b7c:	00800584 	movi	r2,22
   46b80:	82000117 	ldw	r8,4(r16)
   46b84:	10c01b2e 	bgeu	r2,r3,46bf4 <_realloc_r+0xc0>
   46b88:	00bffe04 	movi	r2,-8
   46b8c:	188e703a 	and	r7,r3,r2
   46b90:	3839883a 	mov	fp,r7
   46b94:	38001a16 	blt	r7,zero,46c00 <_realloc_r+0xcc>
   46b98:	e4401936 	bltu	fp,r17,46c00 <_realloc_r+0xcc>
   46b9c:	013fff04 	movi	r4,-4
   46ba0:	4126703a 	and	r19,r8,r4
   46ba4:	99c02616 	blt	r19,r7,46c40 <_realloc_r+0x10c>
   46ba8:	802b883a 	mov	r21,r16
   46bac:	9829883a 	mov	r20,r19
   46bb0:	84000204 	addi	r16,r16,8
   46bb4:	a80f883a 	mov	r7,r21
   46bb8:	a70dc83a 	sub	r6,r20,fp
   46bbc:	008003c4 	movi	r2,15
   46bc0:	1180c136 	bltu	r2,r6,46ec8 <_realloc_r+0x394>
   46bc4:	38800117 	ldw	r2,4(r7)
   46bc8:	a549883a 	add	r4,r20,r21
   46bcc:	1080004c 	andi	r2,r2,1
   46bd0:	a084b03a 	or	r2,r20,r2
   46bd4:	38800115 	stw	r2,4(r7)
   46bd8:	20c00117 	ldw	r3,4(r4)
   46bdc:	18c00054 	ori	r3,r3,1
   46be0:	20c00115 	stw	r3,4(r4)
   46be4:	b009883a 	mov	r4,r22
   46be8:	004a3780 	call	4a378 <__malloc_unlock>
   46bec:	8023883a 	mov	r17,r16
   46bf0:	00000606 	br	46c0c <_realloc_r+0xd8>
   46bf4:	01c00404 	movi	r7,16
   46bf8:	3839883a 	mov	fp,r7
   46bfc:	e47fe72e 	bgeu	fp,r17,46b9c <_realloc_r+0x68>
   46c00:	00800304 	movi	r2,12
   46c04:	0023883a 	mov	r17,zero
   46c08:	b0800015 	stw	r2,0(r22)
   46c0c:	8805883a 	mov	r2,r17
   46c10:	dfc00b17 	ldw	ra,44(sp)
   46c14:	df000a17 	ldw	fp,40(sp)
   46c18:	ddc00917 	ldw	r23,36(sp)
   46c1c:	dd800817 	ldw	r22,32(sp)
   46c20:	dd400717 	ldw	r21,28(sp)
   46c24:	dd000617 	ldw	r20,24(sp)
   46c28:	dcc00517 	ldw	r19,20(sp)
   46c2c:	dc800417 	ldw	r18,16(sp)
   46c30:	dc400317 	ldw	r17,12(sp)
   46c34:	dc000217 	ldw	r16,8(sp)
   46c38:	dec00c04 	addi	sp,sp,48
   46c3c:	f800283a 	ret
   46c40:	008001b4 	movhi	r2,6
   46c44:	1081f004 	addi	r2,r2,1984
   46c48:	12400217 	ldw	r9,8(r2)
   46c4c:	84cd883a 	add	r6,r16,r19
   46c50:	802b883a 	mov	r21,r16
   46c54:	3240b926 	beq	r6,r9,46f3c <_realloc_r+0x408>
   46c58:	31400117 	ldw	r5,4(r6)
   46c5c:	00bfff84 	movi	r2,-2
   46c60:	2884703a 	and	r2,r5,r2
   46c64:	1185883a 	add	r2,r2,r6
   46c68:	10c00117 	ldw	r3,4(r2)
   46c6c:	18c0004c 	andi	r3,r3,1
   46c70:	1807003a 	cmpeq	r3,r3,zero
   46c74:	1800a326 	beq	r3,zero,46f04 <_realloc_r+0x3d0>
   46c78:	2908703a 	and	r4,r5,r4
   46c7c:	9929883a 	add	r20,r19,r4
   46c80:	a1c0a30e 	bge	r20,r7,46f10 <_realloc_r+0x3dc>
   46c84:	4080004c 	andi	r2,r8,1
   46c88:	1000551e 	bne	r2,zero,46de0 <_realloc_r+0x2ac>
   46c8c:	80800017 	ldw	r2,0(r16)
   46c90:	80afc83a 	sub	r23,r16,r2
   46c94:	b8c00117 	ldw	r3,4(r23)
   46c98:	00bfff04 	movi	r2,-4
   46c9c:	1884703a 	and	r2,r3,r2
   46ca0:	30002e26 	beq	r6,zero,46d5c <_realloc_r+0x228>
   46ca4:	3240b926 	beq	r6,r9,46f8c <_realloc_r+0x458>
   46ca8:	98a9883a 	add	r20,r19,r2
   46cac:	2509883a 	add	r4,r4,r20
   46cb0:	d9000015 	stw	r4,0(sp)
   46cb4:	21c02a16 	blt	r4,r7,46d60 <_realloc_r+0x22c>
   46cb8:	30800317 	ldw	r2,12(r6)
   46cbc:	30c00217 	ldw	r3,8(r6)
   46cc0:	01400904 	movi	r5,36
   46cc4:	99bfff04 	addi	r6,r19,-4
   46cc8:	18800315 	stw	r2,12(r3)
   46ccc:	10c00215 	stw	r3,8(r2)
   46cd0:	b9000317 	ldw	r4,12(r23)
   46cd4:	b8800217 	ldw	r2,8(r23)
   46cd8:	b82b883a 	mov	r21,r23
   46cdc:	bc000204 	addi	r16,r23,8
   46ce0:	20800215 	stw	r2,8(r4)
   46ce4:	11000315 	stw	r4,12(r2)
   46ce8:	2980e436 	bltu	r5,r6,4707c <_realloc_r+0x548>
   46cec:	008004c4 	movi	r2,19
   46cf0:	9009883a 	mov	r4,r18
   46cf4:	8011883a 	mov	r8,r16
   46cf8:	11800f2e 	bgeu	r2,r6,46d38 <_realloc_r+0x204>
   46cfc:	90800017 	ldw	r2,0(r18)
   46d00:	ba000404 	addi	r8,r23,16
   46d04:	91000204 	addi	r4,r18,8
   46d08:	b8800215 	stw	r2,8(r23)
   46d0c:	90c00117 	ldw	r3,4(r18)
   46d10:	008006c4 	movi	r2,27
   46d14:	b8c00315 	stw	r3,12(r23)
   46d18:	1180072e 	bgeu	r2,r6,46d38 <_realloc_r+0x204>
   46d1c:	90c00217 	ldw	r3,8(r18)
   46d20:	ba000604 	addi	r8,r23,24
   46d24:	91000404 	addi	r4,r18,16
   46d28:	b8c00415 	stw	r3,16(r23)
   46d2c:	90800317 	ldw	r2,12(r18)
   46d30:	b8800515 	stw	r2,20(r23)
   46d34:	3140e726 	beq	r6,r5,470d4 <_realloc_r+0x5a0>
   46d38:	20800017 	ldw	r2,0(r4)
   46d3c:	dd000017 	ldw	r20,0(sp)
   46d40:	b80f883a 	mov	r7,r23
   46d44:	40800015 	stw	r2,0(r8)
   46d48:	20c00117 	ldw	r3,4(r4)
   46d4c:	40c00115 	stw	r3,4(r8)
   46d50:	20800217 	ldw	r2,8(r4)
   46d54:	40800215 	stw	r2,8(r8)
   46d58:	003f9706 	br	46bb8 <_realloc_r+0x84>
   46d5c:	98a9883a 	add	r20,r19,r2
   46d60:	a1c01f16 	blt	r20,r7,46de0 <_realloc_r+0x2ac>
   46d64:	b8c00317 	ldw	r3,12(r23)
   46d68:	b8800217 	ldw	r2,8(r23)
   46d6c:	99bfff04 	addi	r6,r19,-4
   46d70:	01400904 	movi	r5,36
   46d74:	b82b883a 	mov	r21,r23
   46d78:	18800215 	stw	r2,8(r3)
   46d7c:	10c00315 	stw	r3,12(r2)
   46d80:	bc000204 	addi	r16,r23,8
   46d84:	2980c336 	bltu	r5,r6,47094 <_realloc_r+0x560>
   46d88:	008004c4 	movi	r2,19
   46d8c:	9009883a 	mov	r4,r18
   46d90:	8011883a 	mov	r8,r16
   46d94:	11800f2e 	bgeu	r2,r6,46dd4 <_realloc_r+0x2a0>
   46d98:	90800017 	ldw	r2,0(r18)
   46d9c:	ba000404 	addi	r8,r23,16
   46da0:	91000204 	addi	r4,r18,8
   46da4:	b8800215 	stw	r2,8(r23)
   46da8:	90c00117 	ldw	r3,4(r18)
   46dac:	008006c4 	movi	r2,27
   46db0:	b8c00315 	stw	r3,12(r23)
   46db4:	1180072e 	bgeu	r2,r6,46dd4 <_realloc_r+0x2a0>
   46db8:	90c00217 	ldw	r3,8(r18)
   46dbc:	ba000604 	addi	r8,r23,24
   46dc0:	91000404 	addi	r4,r18,16
   46dc4:	b8c00415 	stw	r3,16(r23)
   46dc8:	90800317 	ldw	r2,12(r18)
   46dcc:	b8800515 	stw	r2,20(r23)
   46dd0:	3140c726 	beq	r6,r5,470f0 <_realloc_r+0x5bc>
   46dd4:	20800017 	ldw	r2,0(r4)
   46dd8:	b80f883a 	mov	r7,r23
   46ddc:	003fd906 	br	46d44 <_realloc_r+0x210>
   46de0:	880b883a 	mov	r5,r17
   46de4:	b009883a 	mov	r4,r22
   46de8:	00451040 	call	45104 <_malloc_r>
   46dec:	1023883a 	mov	r17,r2
   46df0:	10002526 	beq	r2,zero,46e88 <_realloc_r+0x354>
   46df4:	80800117 	ldw	r2,4(r16)
   46df8:	00ffff84 	movi	r3,-2
   46dfc:	893ffe04 	addi	r4,r17,-8
   46e00:	10c4703a 	and	r2,r2,r3
   46e04:	8085883a 	add	r2,r16,r2
   46e08:	20809526 	beq	r4,r2,47060 <_realloc_r+0x52c>
   46e0c:	99bfff04 	addi	r6,r19,-4
   46e10:	01c00904 	movi	r7,36
   46e14:	39804536 	bltu	r7,r6,46f2c <_realloc_r+0x3f8>
   46e18:	008004c4 	movi	r2,19
   46e1c:	9009883a 	mov	r4,r18
   46e20:	880b883a 	mov	r5,r17
   46e24:	11800f2e 	bgeu	r2,r6,46e64 <_realloc_r+0x330>
   46e28:	90800017 	ldw	r2,0(r18)
   46e2c:	89400204 	addi	r5,r17,8
   46e30:	91000204 	addi	r4,r18,8
   46e34:	88800015 	stw	r2,0(r17)
   46e38:	90c00117 	ldw	r3,4(r18)
   46e3c:	008006c4 	movi	r2,27
   46e40:	88c00115 	stw	r3,4(r17)
   46e44:	1180072e 	bgeu	r2,r6,46e64 <_realloc_r+0x330>
   46e48:	90c00217 	ldw	r3,8(r18)
   46e4c:	89400404 	addi	r5,r17,16
   46e50:	91000404 	addi	r4,r18,16
   46e54:	88c00215 	stw	r3,8(r17)
   46e58:	90800317 	ldw	r2,12(r18)
   46e5c:	88800315 	stw	r2,12(r17)
   46e60:	31c09126 	beq	r6,r7,470a8 <_realloc_r+0x574>
   46e64:	20800017 	ldw	r2,0(r4)
   46e68:	28800015 	stw	r2,0(r5)
   46e6c:	20c00117 	ldw	r3,4(r4)
   46e70:	28c00115 	stw	r3,4(r5)
   46e74:	20800217 	ldw	r2,8(r4)
   46e78:	28800215 	stw	r2,8(r5)
   46e7c:	900b883a 	mov	r5,r18
   46e80:	b009883a 	mov	r4,r22
   46e84:	004457c0 	call	4457c <_free_r>
   46e88:	b009883a 	mov	r4,r22
   46e8c:	004a3780 	call	4a378 <__malloc_unlock>
   46e90:	003f5e06 	br	46c0c <_realloc_r+0xd8>
   46e94:	300b883a 	mov	r5,r6
   46e98:	dfc00b17 	ldw	ra,44(sp)
   46e9c:	df000a17 	ldw	fp,40(sp)
   46ea0:	ddc00917 	ldw	r23,36(sp)
   46ea4:	dd800817 	ldw	r22,32(sp)
   46ea8:	dd400717 	ldw	r21,28(sp)
   46eac:	dd000617 	ldw	r20,24(sp)
   46eb0:	dcc00517 	ldw	r19,20(sp)
   46eb4:	dc800417 	ldw	r18,16(sp)
   46eb8:	dc400317 	ldw	r17,12(sp)
   46ebc:	dc000217 	ldw	r16,8(sp)
   46ec0:	dec00c04 	addi	sp,sp,48
   46ec4:	00451041 	jmpi	45104 <_malloc_r>
   46ec8:	38800117 	ldw	r2,4(r7)
   46ecc:	e54b883a 	add	r5,fp,r21
   46ed0:	31000054 	ori	r4,r6,1
   46ed4:	1080004c 	andi	r2,r2,1
   46ed8:	1704b03a 	or	r2,r2,fp
   46edc:	38800115 	stw	r2,4(r7)
   46ee0:	29000115 	stw	r4,4(r5)
   46ee4:	2987883a 	add	r3,r5,r6
   46ee8:	18800117 	ldw	r2,4(r3)
   46eec:	29400204 	addi	r5,r5,8
   46ef0:	b009883a 	mov	r4,r22
   46ef4:	10800054 	ori	r2,r2,1
   46ef8:	18800115 	stw	r2,4(r3)
   46efc:	004457c0 	call	4457c <_free_r>
   46f00:	003f3806 	br	46be4 <_realloc_r+0xb0>
   46f04:	000d883a 	mov	r6,zero
   46f08:	0009883a 	mov	r4,zero
   46f0c:	003f5d06 	br	46c84 <_realloc_r+0x150>
   46f10:	30c00217 	ldw	r3,8(r6)
   46f14:	30800317 	ldw	r2,12(r6)
   46f18:	800f883a 	mov	r7,r16
   46f1c:	84000204 	addi	r16,r16,8
   46f20:	10c00215 	stw	r3,8(r2)
   46f24:	18800315 	stw	r2,12(r3)
   46f28:	003f2306 	br	46bb8 <_realloc_r+0x84>
   46f2c:	8809883a 	mov	r4,r17
   46f30:	900b883a 	mov	r5,r18
   46f34:	00459c80 	call	459c8 <memmove>
   46f38:	003fd006 	br	46e7c <_realloc_r+0x348>
   46f3c:	30800117 	ldw	r2,4(r6)
   46f40:	e0c00404 	addi	r3,fp,16
   46f44:	1108703a 	and	r4,r2,r4
   46f48:	9905883a 	add	r2,r19,r4
   46f4c:	10ff4d16 	blt	r2,r3,46c84 <_realloc_r+0x150>
   46f50:	1705c83a 	sub	r2,r2,fp
   46f54:	870b883a 	add	r5,r16,fp
   46f58:	10800054 	ori	r2,r2,1
   46f5c:	28800115 	stw	r2,4(r5)
   46f60:	80c00117 	ldw	r3,4(r16)
   46f64:	008001b4 	movhi	r2,6
   46f68:	1081f004 	addi	r2,r2,1984
   46f6c:	b009883a 	mov	r4,r22
   46f70:	18c0004c 	andi	r3,r3,1
   46f74:	e0c6b03a 	or	r3,fp,r3
   46f78:	11400215 	stw	r5,8(r2)
   46f7c:	80c00115 	stw	r3,4(r16)
   46f80:	004a3780 	call	4a378 <__malloc_unlock>
   46f84:	84400204 	addi	r17,r16,8
   46f88:	003f2006 	br	46c0c <_realloc_r+0xd8>
   46f8c:	98a9883a 	add	r20,r19,r2
   46f90:	2509883a 	add	r4,r4,r20
   46f94:	e0800404 	addi	r2,fp,16
   46f98:	d9000115 	stw	r4,4(sp)
   46f9c:	20bf7016 	blt	r4,r2,46d60 <_realloc_r+0x22c>
   46fa0:	b8c00317 	ldw	r3,12(r23)
   46fa4:	b8800217 	ldw	r2,8(r23)
   46fa8:	99bfff04 	addi	r6,r19,-4
   46fac:	01400904 	movi	r5,36
   46fb0:	18800215 	stw	r2,8(r3)
   46fb4:	10c00315 	stw	r3,12(r2)
   46fb8:	bc400204 	addi	r17,r23,8
   46fbc:	29804136 	bltu	r5,r6,470c4 <_realloc_r+0x590>
   46fc0:	008004c4 	movi	r2,19
   46fc4:	9009883a 	mov	r4,r18
   46fc8:	880f883a 	mov	r7,r17
   46fcc:	11800f2e 	bgeu	r2,r6,4700c <_realloc_r+0x4d8>
   46fd0:	90800017 	ldw	r2,0(r18)
   46fd4:	b9c00404 	addi	r7,r23,16
   46fd8:	91000204 	addi	r4,r18,8
   46fdc:	b8800215 	stw	r2,8(r23)
   46fe0:	90c00117 	ldw	r3,4(r18)
   46fe4:	008006c4 	movi	r2,27
   46fe8:	b8c00315 	stw	r3,12(r23)
   46fec:	1180072e 	bgeu	r2,r6,4700c <_realloc_r+0x4d8>
   46ff0:	90c00217 	ldw	r3,8(r18)
   46ff4:	b9c00604 	addi	r7,r23,24
   46ff8:	91000404 	addi	r4,r18,16
   46ffc:	b8c00415 	stw	r3,16(r23)
   47000:	90800317 	ldw	r2,12(r18)
   47004:	b8800515 	stw	r2,20(r23)
   47008:	31404026 	beq	r6,r5,4710c <_realloc_r+0x5d8>
   4700c:	20800017 	ldw	r2,0(r4)
   47010:	38800015 	stw	r2,0(r7)
   47014:	20c00117 	ldw	r3,4(r4)
   47018:	38c00115 	stw	r3,4(r7)
   4701c:	20800217 	ldw	r2,8(r4)
   47020:	38800215 	stw	r2,8(r7)
   47024:	d8c00117 	ldw	r3,4(sp)
   47028:	bf0b883a 	add	r5,r23,fp
   4702c:	b009883a 	mov	r4,r22
   47030:	1f05c83a 	sub	r2,r3,fp
   47034:	10800054 	ori	r2,r2,1
   47038:	28800115 	stw	r2,4(r5)
   4703c:	b8c00117 	ldw	r3,4(r23)
   47040:	008001b4 	movhi	r2,6
   47044:	1081f004 	addi	r2,r2,1984
   47048:	11400215 	stw	r5,8(r2)
   4704c:	18c0004c 	andi	r3,r3,1
   47050:	e0c6b03a 	or	r3,fp,r3
   47054:	b8c00115 	stw	r3,4(r23)
   47058:	004a3780 	call	4a378 <__malloc_unlock>
   4705c:	003eeb06 	br	46c0c <_realloc_r+0xd8>
   47060:	20800117 	ldw	r2,4(r4)
   47064:	00ffff04 	movi	r3,-4
   47068:	800f883a 	mov	r7,r16
   4706c:	10c4703a 	and	r2,r2,r3
   47070:	98a9883a 	add	r20,r19,r2
   47074:	84000204 	addi	r16,r16,8
   47078:	003ecf06 	br	46bb8 <_realloc_r+0x84>
   4707c:	900b883a 	mov	r5,r18
   47080:	8009883a 	mov	r4,r16
   47084:	00459c80 	call	459c8 <memmove>
   47088:	dd000017 	ldw	r20,0(sp)
   4708c:	b80f883a 	mov	r7,r23
   47090:	003ec906 	br	46bb8 <_realloc_r+0x84>
   47094:	900b883a 	mov	r5,r18
   47098:	8009883a 	mov	r4,r16
   4709c:	00459c80 	call	459c8 <memmove>
   470a0:	b80f883a 	mov	r7,r23
   470a4:	003ec406 	br	46bb8 <_realloc_r+0x84>
   470a8:	90c00417 	ldw	r3,16(r18)
   470ac:	89400604 	addi	r5,r17,24
   470b0:	91000604 	addi	r4,r18,24
   470b4:	88c00415 	stw	r3,16(r17)
   470b8:	90800517 	ldw	r2,20(r18)
   470bc:	88800515 	stw	r2,20(r17)
   470c0:	003f6806 	br	46e64 <_realloc_r+0x330>
   470c4:	900b883a 	mov	r5,r18
   470c8:	8809883a 	mov	r4,r17
   470cc:	00459c80 	call	459c8 <memmove>
   470d0:	003fd406 	br	47024 <_realloc_r+0x4f0>
   470d4:	90c00417 	ldw	r3,16(r18)
   470d8:	91000604 	addi	r4,r18,24
   470dc:	ba000804 	addi	r8,r23,32
   470e0:	b8c00615 	stw	r3,24(r23)
   470e4:	90800517 	ldw	r2,20(r18)
   470e8:	b8800715 	stw	r2,28(r23)
   470ec:	003f1206 	br	46d38 <_realloc_r+0x204>
   470f0:	90c00417 	ldw	r3,16(r18)
   470f4:	91000604 	addi	r4,r18,24
   470f8:	ba000804 	addi	r8,r23,32
   470fc:	b8c00615 	stw	r3,24(r23)
   47100:	90800517 	ldw	r2,20(r18)
   47104:	b8800715 	stw	r2,28(r23)
   47108:	003f3206 	br	46dd4 <_realloc_r+0x2a0>
   4710c:	90c00417 	ldw	r3,16(r18)
   47110:	91000604 	addi	r4,r18,24
   47114:	b9c00804 	addi	r7,r23,32
   47118:	b8c00615 	stw	r3,24(r23)
   4711c:	90800517 	ldw	r2,20(r18)
   47120:	b8800715 	stw	r2,28(r23)
   47124:	003fb906 	br	4700c <_realloc_r+0x4d8>

00047128 <__isinfd>:
   47128:	200d883a 	mov	r6,r4
   4712c:	0109c83a 	sub	r4,zero,r4
   47130:	2188b03a 	or	r4,r4,r6
   47134:	2008d7fa 	srli	r4,r4,31
   47138:	00a00034 	movhi	r2,32768
   4713c:	10bfffc4 	addi	r2,r2,-1
   47140:	1144703a 	and	r2,r2,r5
   47144:	2088b03a 	or	r4,r4,r2
   47148:	009ffc34 	movhi	r2,32752
   4714c:	1105c83a 	sub	r2,r2,r4
   47150:	0087c83a 	sub	r3,zero,r2
   47154:	10c4b03a 	or	r2,r2,r3
   47158:	1004d7fa 	srli	r2,r2,31
   4715c:	00c00044 	movi	r3,1
   47160:	1885c83a 	sub	r2,r3,r2
   47164:	f800283a 	ret

00047168 <__isnand>:
   47168:	200d883a 	mov	r6,r4
   4716c:	0109c83a 	sub	r4,zero,r4
   47170:	2188b03a 	or	r4,r4,r6
   47174:	2008d7fa 	srli	r4,r4,31
   47178:	00a00034 	movhi	r2,32768
   4717c:	10bfffc4 	addi	r2,r2,-1
   47180:	1144703a 	and	r2,r2,r5
   47184:	2088b03a 	or	r4,r4,r2
   47188:	009ffc34 	movhi	r2,32752
   4718c:	1105c83a 	sub	r2,r2,r4
   47190:	1004d7fa 	srli	r2,r2,31
   47194:	f800283a 	ret

00047198 <_sbrk_r>:
   47198:	defffd04 	addi	sp,sp,-12
   4719c:	dc000015 	stw	r16,0(sp)
   471a0:	040001b4 	movhi	r16,6
   471a4:	84078f04 	addi	r16,r16,7740
   471a8:	dc400115 	stw	r17,4(sp)
   471ac:	80000015 	stw	zero,0(r16)
   471b0:	2023883a 	mov	r17,r4
   471b4:	2809883a 	mov	r4,r5
   471b8:	dfc00215 	stw	ra,8(sp)
   471bc:	004a5780 	call	4a578 <sbrk>
   471c0:	1007883a 	mov	r3,r2
   471c4:	00bfffc4 	movi	r2,-1
   471c8:	18800626 	beq	r3,r2,471e4 <_sbrk_r+0x4c>
   471cc:	1805883a 	mov	r2,r3
   471d0:	dfc00217 	ldw	ra,8(sp)
   471d4:	dc400117 	ldw	r17,4(sp)
   471d8:	dc000017 	ldw	r16,0(sp)
   471dc:	dec00304 	addi	sp,sp,12
   471e0:	f800283a 	ret
   471e4:	80800017 	ldw	r2,0(r16)
   471e8:	103ff826 	beq	r2,zero,471cc <_sbrk_r+0x34>
   471ec:	88800015 	stw	r2,0(r17)
   471f0:	1805883a 	mov	r2,r3
   471f4:	dfc00217 	ldw	ra,8(sp)
   471f8:	dc400117 	ldw	r17,4(sp)
   471fc:	dc000017 	ldw	r16,0(sp)
   47200:	dec00304 	addi	sp,sp,12
   47204:	f800283a 	ret

00047208 <__sclose>:
   47208:	2940038f 	ldh	r5,14(r5)
   4720c:	004753c1 	jmpi	4753c <_close_r>

00047210 <__sseek>:
   47210:	defffe04 	addi	sp,sp,-8
   47214:	dc000015 	stw	r16,0(sp)
   47218:	2821883a 	mov	r16,r5
   4721c:	2940038f 	ldh	r5,14(r5)
   47220:	dfc00115 	stw	ra,4(sp)
   47224:	00477b40 	call	477b4 <_lseek_r>
   47228:	1007883a 	mov	r3,r2
   4722c:	00bfffc4 	movi	r2,-1
   47230:	18800926 	beq	r3,r2,47258 <__sseek+0x48>
   47234:	8080030b 	ldhu	r2,12(r16)
   47238:	80c01415 	stw	r3,80(r16)
   4723c:	10840014 	ori	r2,r2,4096
   47240:	8080030d 	sth	r2,12(r16)
   47244:	1805883a 	mov	r2,r3
   47248:	dfc00117 	ldw	ra,4(sp)
   4724c:	dc000017 	ldw	r16,0(sp)
   47250:	dec00204 	addi	sp,sp,8
   47254:	f800283a 	ret
   47258:	8080030b 	ldhu	r2,12(r16)
   4725c:	10bbffcc 	andi	r2,r2,61439
   47260:	8080030d 	sth	r2,12(r16)
   47264:	1805883a 	mov	r2,r3
   47268:	dfc00117 	ldw	ra,4(sp)
   4726c:	dc000017 	ldw	r16,0(sp)
   47270:	dec00204 	addi	sp,sp,8
   47274:	f800283a 	ret

00047278 <__swrite>:
   47278:	2880030b 	ldhu	r2,12(r5)
   4727c:	defffb04 	addi	sp,sp,-20
   47280:	dcc00315 	stw	r19,12(sp)
   47284:	1080400c 	andi	r2,r2,256
   47288:	dc800215 	stw	r18,8(sp)
   4728c:	dc400115 	stw	r17,4(sp)
   47290:	dc000015 	stw	r16,0(sp)
   47294:	3027883a 	mov	r19,r6
   47298:	3825883a 	mov	r18,r7
   4729c:	dfc00415 	stw	ra,16(sp)
   472a0:	2821883a 	mov	r16,r5
   472a4:	000d883a 	mov	r6,zero
   472a8:	01c00084 	movi	r7,2
   472ac:	2023883a 	mov	r17,r4
   472b0:	10000226 	beq	r2,zero,472bc <__swrite+0x44>
   472b4:	2940038f 	ldh	r5,14(r5)
   472b8:	00477b40 	call	477b4 <_lseek_r>
   472bc:	8080030b 	ldhu	r2,12(r16)
   472c0:	8140038f 	ldh	r5,14(r16)
   472c4:	8809883a 	mov	r4,r17
   472c8:	10bbffcc 	andi	r2,r2,61439
   472cc:	980d883a 	mov	r6,r19
   472d0:	900f883a 	mov	r7,r18
   472d4:	8080030d 	sth	r2,12(r16)
   472d8:	dfc00417 	ldw	ra,16(sp)
   472dc:	dcc00317 	ldw	r19,12(sp)
   472e0:	dc800217 	ldw	r18,8(sp)
   472e4:	dc400117 	ldw	r17,4(sp)
   472e8:	dc000017 	ldw	r16,0(sp)
   472ec:	dec00504 	addi	sp,sp,20
   472f0:	00474101 	jmpi	47410 <_write_r>

000472f4 <__sread>:
   472f4:	defffe04 	addi	sp,sp,-8
   472f8:	dc000015 	stw	r16,0(sp)
   472fc:	2821883a 	mov	r16,r5
   47300:	2940038f 	ldh	r5,14(r5)
   47304:	dfc00115 	stw	ra,4(sp)
   47308:	004782c0 	call	4782c <_read_r>
   4730c:	1007883a 	mov	r3,r2
   47310:	10000816 	blt	r2,zero,47334 <__sread+0x40>
   47314:	80801417 	ldw	r2,80(r16)
   47318:	10c5883a 	add	r2,r2,r3
   4731c:	80801415 	stw	r2,80(r16)
   47320:	1805883a 	mov	r2,r3
   47324:	dfc00117 	ldw	ra,4(sp)
   47328:	dc000017 	ldw	r16,0(sp)
   4732c:	dec00204 	addi	sp,sp,8
   47330:	f800283a 	ret
   47334:	8080030b 	ldhu	r2,12(r16)
   47338:	10bbffcc 	andi	r2,r2,61439
   4733c:	8080030d 	sth	r2,12(r16)
   47340:	1805883a 	mov	r2,r3
   47344:	dfc00117 	ldw	ra,4(sp)
   47348:	dc000017 	ldw	r16,0(sp)
   4734c:	dec00204 	addi	sp,sp,8
   47350:	f800283a 	ret

00047354 <strcmp>:
   47354:	2144b03a 	or	r2,r4,r5
   47358:	108000cc 	andi	r2,r2,3
   4735c:	10001d1e 	bne	r2,zero,473d4 <strcmp+0x80>
   47360:	200f883a 	mov	r7,r4
   47364:	28800017 	ldw	r2,0(r5)
   47368:	21000017 	ldw	r4,0(r4)
   4736c:	280d883a 	mov	r6,r5
   47370:	2080161e 	bne	r4,r2,473cc <strcmp+0x78>
   47374:	023fbff4 	movhi	r8,65279
   47378:	423fbfc4 	addi	r8,r8,-257
   4737c:	2207883a 	add	r3,r4,r8
   47380:	01602074 	movhi	r5,32897
   47384:	29602004 	addi	r5,r5,-32640
   47388:	1946703a 	and	r3,r3,r5
   4738c:	0104303a 	nor	r2,zero,r4
   47390:	10c4703a 	and	r2,r2,r3
   47394:	10001c1e 	bne	r2,zero,47408 <strcmp+0xb4>
   47398:	4013883a 	mov	r9,r8
   4739c:	2811883a 	mov	r8,r5
   473a0:	00000106 	br	473a8 <strcmp+0x54>
   473a4:	1800181e 	bne	r3,zero,47408 <strcmp+0xb4>
   473a8:	39c00104 	addi	r7,r7,4
   473ac:	39000017 	ldw	r4,0(r7)
   473b0:	31800104 	addi	r6,r6,4
   473b4:	31400017 	ldw	r5,0(r6)
   473b8:	2245883a 	add	r2,r4,r9
   473bc:	1204703a 	and	r2,r2,r8
   473c0:	0106303a 	nor	r3,zero,r4
   473c4:	1886703a 	and	r3,r3,r2
   473c8:	217ff626 	beq	r4,r5,473a4 <strcmp+0x50>
   473cc:	3809883a 	mov	r4,r7
   473d0:	300b883a 	mov	r5,r6
   473d4:	20c00007 	ldb	r3,0(r4)
   473d8:	1800051e 	bne	r3,zero,473f0 <strcmp+0x9c>
   473dc:	00000606 	br	473f8 <strcmp+0xa4>
   473e0:	21000044 	addi	r4,r4,1
   473e4:	20c00007 	ldb	r3,0(r4)
   473e8:	29400044 	addi	r5,r5,1
   473ec:	18000226 	beq	r3,zero,473f8 <strcmp+0xa4>
   473f0:	28800007 	ldb	r2,0(r5)
   473f4:	18bffa26 	beq	r3,r2,473e0 <strcmp+0x8c>
   473f8:	20c00003 	ldbu	r3,0(r4)
   473fc:	28800003 	ldbu	r2,0(r5)
   47400:	1885c83a 	sub	r2,r3,r2
   47404:	f800283a 	ret
   47408:	0005883a 	mov	r2,zero
   4740c:	f800283a 	ret

00047410 <_write_r>:
   47410:	defffd04 	addi	sp,sp,-12
   47414:	dc000015 	stw	r16,0(sp)
   47418:	040001b4 	movhi	r16,6
   4741c:	84078f04 	addi	r16,r16,7740
   47420:	dc400115 	stw	r17,4(sp)
   47424:	80000015 	stw	zero,0(r16)
   47428:	2023883a 	mov	r17,r4
   4742c:	2809883a 	mov	r4,r5
   47430:	300b883a 	mov	r5,r6
   47434:	380d883a 	mov	r6,r7
   47438:	dfc00215 	stw	ra,8(sp)
   4743c:	004a6340 	call	4a634 <write>
   47440:	1007883a 	mov	r3,r2
   47444:	00bfffc4 	movi	r2,-1
   47448:	18800626 	beq	r3,r2,47464 <_write_r+0x54>
   4744c:	1805883a 	mov	r2,r3
   47450:	dfc00217 	ldw	ra,8(sp)
   47454:	dc400117 	ldw	r17,4(sp)
   47458:	dc000017 	ldw	r16,0(sp)
   4745c:	dec00304 	addi	sp,sp,12
   47460:	f800283a 	ret
   47464:	80800017 	ldw	r2,0(r16)
   47468:	103ff826 	beq	r2,zero,4744c <_write_r+0x3c>
   4746c:	88800015 	stw	r2,0(r17)
   47470:	1805883a 	mov	r2,r3
   47474:	dfc00217 	ldw	ra,8(sp)
   47478:	dc400117 	ldw	r17,4(sp)
   4747c:	dc000017 	ldw	r16,0(sp)
   47480:	dec00304 	addi	sp,sp,12
   47484:	f800283a 	ret

00047488 <_calloc_r>:
   47488:	298b383a 	mul	r5,r5,r6
   4748c:	defffe04 	addi	sp,sp,-8
   47490:	dc000015 	stw	r16,0(sp)
   47494:	dfc00115 	stw	ra,4(sp)
   47498:	00451040 	call	45104 <_malloc_r>
   4749c:	1021883a 	mov	r16,r2
   474a0:	01c00904 	movi	r7,36
   474a4:	10000d26 	beq	r2,zero,474dc <_calloc_r+0x54>
   474a8:	10ffff17 	ldw	r3,-4(r2)
   474ac:	1009883a 	mov	r4,r2
   474b0:	00bfff04 	movi	r2,-4
   474b4:	1886703a 	and	r3,r3,r2
   474b8:	1887883a 	add	r3,r3,r2
   474bc:	180d883a 	mov	r6,r3
   474c0:	000b883a 	mov	r5,zero
   474c4:	38c01736 	bltu	r7,r3,47524 <_calloc_r+0x9c>
   474c8:	008004c4 	movi	r2,19
   474cc:	10c00836 	bltu	r2,r3,474f0 <_calloc_r+0x68>
   474d0:	20000215 	stw	zero,8(r4)
   474d4:	20000015 	stw	zero,0(r4)
   474d8:	20000115 	stw	zero,4(r4)
   474dc:	8005883a 	mov	r2,r16
   474e0:	dfc00117 	ldw	ra,4(sp)
   474e4:	dc000017 	ldw	r16,0(sp)
   474e8:	dec00204 	addi	sp,sp,8
   474ec:	f800283a 	ret
   474f0:	008006c4 	movi	r2,27
   474f4:	80000015 	stw	zero,0(r16)
   474f8:	80000115 	stw	zero,4(r16)
   474fc:	81000204 	addi	r4,r16,8
   47500:	10fff32e 	bgeu	r2,r3,474d0 <_calloc_r+0x48>
   47504:	80000215 	stw	zero,8(r16)
   47508:	80000315 	stw	zero,12(r16)
   4750c:	81000404 	addi	r4,r16,16
   47510:	19ffef1e 	bne	r3,r7,474d0 <_calloc_r+0x48>
   47514:	81000604 	addi	r4,r16,24
   47518:	80000415 	stw	zero,16(r16)
   4751c:	80000515 	stw	zero,20(r16)
   47520:	003feb06 	br	474d0 <_calloc_r+0x48>
   47524:	0045aa80 	call	45aa8 <memset>
   47528:	8005883a 	mov	r2,r16
   4752c:	dfc00117 	ldw	ra,4(sp)
   47530:	dc000017 	ldw	r16,0(sp)
   47534:	dec00204 	addi	sp,sp,8
   47538:	f800283a 	ret

0004753c <_close_r>:
   4753c:	defffd04 	addi	sp,sp,-12
   47540:	dc000015 	stw	r16,0(sp)
   47544:	040001b4 	movhi	r16,6
   47548:	84078f04 	addi	r16,r16,7740
   4754c:	dc400115 	stw	r17,4(sp)
   47550:	80000015 	stw	zero,0(r16)
   47554:	2023883a 	mov	r17,r4
   47558:	2809883a 	mov	r4,r5
   4755c:	dfc00215 	stw	ra,8(sp)
   47560:	0049cd40 	call	49cd4 <close>
   47564:	1007883a 	mov	r3,r2
   47568:	00bfffc4 	movi	r2,-1
   4756c:	18800626 	beq	r3,r2,47588 <_close_r+0x4c>
   47570:	1805883a 	mov	r2,r3
   47574:	dfc00217 	ldw	ra,8(sp)
   47578:	dc400117 	ldw	r17,4(sp)
   4757c:	dc000017 	ldw	r16,0(sp)
   47580:	dec00304 	addi	sp,sp,12
   47584:	f800283a 	ret
   47588:	80800017 	ldw	r2,0(r16)
   4758c:	103ff826 	beq	r2,zero,47570 <_close_r+0x34>
   47590:	88800015 	stw	r2,0(r17)
   47594:	1805883a 	mov	r2,r3
   47598:	dfc00217 	ldw	ra,8(sp)
   4759c:	dc400117 	ldw	r17,4(sp)
   475a0:	dc000017 	ldw	r16,0(sp)
   475a4:	dec00304 	addi	sp,sp,12
   475a8:	f800283a 	ret

000475ac <_fclose_r>:
   475ac:	defffc04 	addi	sp,sp,-16
   475b0:	dc400115 	stw	r17,4(sp)
   475b4:	dc000015 	stw	r16,0(sp)
   475b8:	dfc00315 	stw	ra,12(sp)
   475bc:	dc800215 	stw	r18,8(sp)
   475c0:	2821883a 	mov	r16,r5
   475c4:	2023883a 	mov	r17,r4
   475c8:	28002926 	beq	r5,zero,47670 <_fclose_r+0xc4>
   475cc:	00441e80 	call	441e8 <__sfp_lock_acquire>
   475d0:	88000226 	beq	r17,zero,475dc <_fclose_r+0x30>
   475d4:	88800e17 	ldw	r2,56(r17)
   475d8:	10002d26 	beq	r2,zero,47690 <_fclose_r+0xe4>
   475dc:	8080030f 	ldh	r2,12(r16)
   475e0:	10002226 	beq	r2,zero,4766c <_fclose_r+0xc0>
   475e4:	8809883a 	mov	r4,r17
   475e8:	800b883a 	mov	r5,r16
   475ec:	0043f600 	call	43f60 <_fflush_r>
   475f0:	1025883a 	mov	r18,r2
   475f4:	80800b17 	ldw	r2,44(r16)
   475f8:	10000426 	beq	r2,zero,4760c <_fclose_r+0x60>
   475fc:	81400717 	ldw	r5,28(r16)
   47600:	8809883a 	mov	r4,r17
   47604:	103ee83a 	callr	r2
   47608:	10002a16 	blt	r2,zero,476b4 <_fclose_r+0x108>
   4760c:	8080030b 	ldhu	r2,12(r16)
   47610:	1080200c 	andi	r2,r2,128
   47614:	1000231e 	bne	r2,zero,476a4 <_fclose_r+0xf8>
   47618:	81400c17 	ldw	r5,48(r16)
   4761c:	28000526 	beq	r5,zero,47634 <_fclose_r+0x88>
   47620:	80801004 	addi	r2,r16,64
   47624:	28800226 	beq	r5,r2,47630 <_fclose_r+0x84>
   47628:	8809883a 	mov	r4,r17
   4762c:	004457c0 	call	4457c <_free_r>
   47630:	80000c15 	stw	zero,48(r16)
   47634:	81401117 	ldw	r5,68(r16)
   47638:	28000326 	beq	r5,zero,47648 <_fclose_r+0x9c>
   4763c:	8809883a 	mov	r4,r17
   47640:	004457c0 	call	4457c <_free_r>
   47644:	80001115 	stw	zero,68(r16)
   47648:	8000030d 	sth	zero,12(r16)
   4764c:	00441ec0 	call	441ec <__sfp_lock_release>
   47650:	9005883a 	mov	r2,r18
   47654:	dfc00317 	ldw	ra,12(sp)
   47658:	dc800217 	ldw	r18,8(sp)
   4765c:	dc400117 	ldw	r17,4(sp)
   47660:	dc000017 	ldw	r16,0(sp)
   47664:	dec00404 	addi	sp,sp,16
   47668:	f800283a 	ret
   4766c:	00441ec0 	call	441ec <__sfp_lock_release>
   47670:	0025883a 	mov	r18,zero
   47674:	9005883a 	mov	r2,r18
   47678:	dfc00317 	ldw	ra,12(sp)
   4767c:	dc800217 	ldw	r18,8(sp)
   47680:	dc400117 	ldw	r17,4(sp)
   47684:	dc000017 	ldw	r16,0(sp)
   47688:	dec00404 	addi	sp,sp,16
   4768c:	f800283a 	ret
   47690:	8809883a 	mov	r4,r17
   47694:	00441f80 	call	441f8 <__sinit>
   47698:	8080030f 	ldh	r2,12(r16)
   4769c:	103fd11e 	bne	r2,zero,475e4 <_fclose_r+0x38>
   476a0:	003ff206 	br	4766c <_fclose_r+0xc0>
   476a4:	81400417 	ldw	r5,16(r16)
   476a8:	8809883a 	mov	r4,r17
   476ac:	004457c0 	call	4457c <_free_r>
   476b0:	003fd906 	br	47618 <_fclose_r+0x6c>
   476b4:	04bfffc4 	movi	r18,-1
   476b8:	003fd406 	br	4760c <_fclose_r+0x60>

000476bc <fclose>:
   476bc:	008001b4 	movhi	r2,6
   476c0:	10877404 	addi	r2,r2,7632
   476c4:	200b883a 	mov	r5,r4
   476c8:	11000017 	ldw	r4,0(r2)
   476cc:	00475ac1 	jmpi	475ac <_fclose_r>

000476d0 <_fstat_r>:
   476d0:	defffd04 	addi	sp,sp,-12
   476d4:	dc000015 	stw	r16,0(sp)
   476d8:	040001b4 	movhi	r16,6
   476dc:	84078f04 	addi	r16,r16,7740
   476e0:	dc400115 	stw	r17,4(sp)
   476e4:	80000015 	stw	zero,0(r16)
   476e8:	2023883a 	mov	r17,r4
   476ec:	2809883a 	mov	r4,r5
   476f0:	300b883a 	mov	r5,r6
   476f4:	dfc00215 	stw	ra,8(sp)
   476f8:	0049e5c0 	call	49e5c <fstat>
   476fc:	1007883a 	mov	r3,r2
   47700:	00bfffc4 	movi	r2,-1
   47704:	18800626 	beq	r3,r2,47720 <_fstat_r+0x50>
   47708:	1805883a 	mov	r2,r3
   4770c:	dfc00217 	ldw	ra,8(sp)
   47710:	dc400117 	ldw	r17,4(sp)
   47714:	dc000017 	ldw	r16,0(sp)
   47718:	dec00304 	addi	sp,sp,12
   4771c:	f800283a 	ret
   47720:	80800017 	ldw	r2,0(r16)
   47724:	103ff826 	beq	r2,zero,47708 <_fstat_r+0x38>
   47728:	88800015 	stw	r2,0(r17)
   4772c:	1805883a 	mov	r2,r3
   47730:	dfc00217 	ldw	ra,8(sp)
   47734:	dc400117 	ldw	r17,4(sp)
   47738:	dc000017 	ldw	r16,0(sp)
   4773c:	dec00304 	addi	sp,sp,12
   47740:	f800283a 	ret

00047744 <_isatty_r>:
   47744:	defffd04 	addi	sp,sp,-12
   47748:	dc000015 	stw	r16,0(sp)
   4774c:	040001b4 	movhi	r16,6
   47750:	84078f04 	addi	r16,r16,7740
   47754:	dc400115 	stw	r17,4(sp)
   47758:	80000015 	stw	zero,0(r16)
   4775c:	2023883a 	mov	r17,r4
   47760:	2809883a 	mov	r4,r5
   47764:	dfc00215 	stw	ra,8(sp)
   47768:	0049f900 	call	49f90 <isatty>
   4776c:	1007883a 	mov	r3,r2
   47770:	00bfffc4 	movi	r2,-1
   47774:	18800626 	beq	r3,r2,47790 <_isatty_r+0x4c>
   47778:	1805883a 	mov	r2,r3
   4777c:	dfc00217 	ldw	ra,8(sp)
   47780:	dc400117 	ldw	r17,4(sp)
   47784:	dc000017 	ldw	r16,0(sp)
   47788:	dec00304 	addi	sp,sp,12
   4778c:	f800283a 	ret
   47790:	80800017 	ldw	r2,0(r16)
   47794:	103ff826 	beq	r2,zero,47778 <_isatty_r+0x34>
   47798:	88800015 	stw	r2,0(r17)
   4779c:	1805883a 	mov	r2,r3
   477a0:	dfc00217 	ldw	ra,8(sp)
   477a4:	dc400117 	ldw	r17,4(sp)
   477a8:	dc000017 	ldw	r16,0(sp)
   477ac:	dec00304 	addi	sp,sp,12
   477b0:	f800283a 	ret

000477b4 <_lseek_r>:
   477b4:	defffd04 	addi	sp,sp,-12
   477b8:	dc000015 	stw	r16,0(sp)
   477bc:	040001b4 	movhi	r16,6
   477c0:	84078f04 	addi	r16,r16,7740
   477c4:	dc400115 	stw	r17,4(sp)
   477c8:	80000015 	stw	zero,0(r16)
   477cc:	2023883a 	mov	r17,r4
   477d0:	2809883a 	mov	r4,r5
   477d4:	300b883a 	mov	r5,r6
   477d8:	380d883a 	mov	r6,r7
   477dc:	dfc00215 	stw	ra,8(sp)
   477e0:	004a19c0 	call	4a19c <lseek>
   477e4:	1007883a 	mov	r3,r2
   477e8:	00bfffc4 	movi	r2,-1
   477ec:	18800626 	beq	r3,r2,47808 <_lseek_r+0x54>
   477f0:	1805883a 	mov	r2,r3
   477f4:	dfc00217 	ldw	ra,8(sp)
   477f8:	dc400117 	ldw	r17,4(sp)
   477fc:	dc000017 	ldw	r16,0(sp)
   47800:	dec00304 	addi	sp,sp,12
   47804:	f800283a 	ret
   47808:	80800017 	ldw	r2,0(r16)
   4780c:	103ff826 	beq	r2,zero,477f0 <_lseek_r+0x3c>
   47810:	88800015 	stw	r2,0(r17)
   47814:	1805883a 	mov	r2,r3
   47818:	dfc00217 	ldw	ra,8(sp)
   4781c:	dc400117 	ldw	r17,4(sp)
   47820:	dc000017 	ldw	r16,0(sp)
   47824:	dec00304 	addi	sp,sp,12
   47828:	f800283a 	ret

0004782c <_read_r>:
   4782c:	defffd04 	addi	sp,sp,-12
   47830:	dc000015 	stw	r16,0(sp)
   47834:	040001b4 	movhi	r16,6
   47838:	84078f04 	addi	r16,r16,7740
   4783c:	dc400115 	stw	r17,4(sp)
   47840:	80000015 	stw	zero,0(r16)
   47844:	2023883a 	mov	r17,r4
   47848:	2809883a 	mov	r4,r5
   4784c:	300b883a 	mov	r5,r6
   47850:	380d883a 	mov	r6,r7
   47854:	dfc00215 	stw	ra,8(sp)
   47858:	004a3980 	call	4a398 <read>
   4785c:	1007883a 	mov	r3,r2
   47860:	00bfffc4 	movi	r2,-1
   47864:	18800626 	beq	r3,r2,47880 <_read_r+0x54>
   47868:	1805883a 	mov	r2,r3
   4786c:	dfc00217 	ldw	ra,8(sp)
   47870:	dc400117 	ldw	r17,4(sp)
   47874:	dc000017 	ldw	r16,0(sp)
   47878:	dec00304 	addi	sp,sp,12
   4787c:	f800283a 	ret
   47880:	80800017 	ldw	r2,0(r16)
   47884:	103ff826 	beq	r2,zero,47868 <_read_r+0x3c>
   47888:	88800015 	stw	r2,0(r17)
   4788c:	1805883a 	mov	r2,r3
   47890:	dfc00217 	ldw	ra,8(sp)
   47894:	dc400117 	ldw	r17,4(sp)
   47898:	dc000017 	ldw	r16,0(sp)
   4789c:	dec00304 	addi	sp,sp,12
   478a0:	f800283a 	ret

000478a4 <__udivdi3>:
   478a4:	defff004 	addi	sp,sp,-64
   478a8:	2005883a 	mov	r2,r4
   478ac:	3011883a 	mov	r8,r6
   478b0:	df000e15 	stw	fp,56(sp)
   478b4:	dd000a15 	stw	r20,40(sp)
   478b8:	dc000615 	stw	r16,24(sp)
   478bc:	dfc00f15 	stw	ra,60(sp)
   478c0:	ddc00d15 	stw	r23,52(sp)
   478c4:	dd800c15 	stw	r22,48(sp)
   478c8:	dd400b15 	stw	r21,44(sp)
   478cc:	dcc00915 	stw	r19,36(sp)
   478d0:	dc800815 	stw	r18,32(sp)
   478d4:	dc400715 	stw	r17,28(sp)
   478d8:	4021883a 	mov	r16,r8
   478dc:	1039883a 	mov	fp,r2
   478e0:	2829883a 	mov	r20,r5
   478e4:	38003b1e 	bne	r7,zero,479d4 <__udivdi3+0x130>
   478e8:	2a005c36 	bltu	r5,r8,47a5c <__udivdi3+0x1b8>
   478ec:	4000a626 	beq	r8,zero,47b88 <__udivdi3+0x2e4>
   478f0:	00bfffd4 	movui	r2,65535
   478f4:	14009e36 	bltu	r2,r16,47b70 <__udivdi3+0x2cc>
   478f8:	00803fc4 	movi	r2,255
   478fc:	14013d36 	bltu	r2,r16,47df4 <__udivdi3+0x550>
   47900:	000b883a 	mov	r5,zero
   47904:	0005883a 	mov	r2,zero
   47908:	8084d83a 	srl	r2,r16,r2
   4790c:	010001b4 	movhi	r4,6
   47910:	2100a004 	addi	r4,r4,640
   47914:	01800804 	movi	r6,32
   47918:	1105883a 	add	r2,r2,r4
   4791c:	10c00003 	ldbu	r3,0(r2)
   47920:	28c7883a 	add	r3,r5,r3
   47924:	30edc83a 	sub	r22,r6,r3
   47928:	b000ee1e 	bne	r22,zero,47ce4 <__udivdi3+0x440>
   4792c:	802ad43a 	srli	r21,r16,16
   47930:	00800044 	movi	r2,1
   47934:	a423c83a 	sub	r17,r20,r16
   47938:	85ffffcc 	andi	r23,r16,65535
   4793c:	d8800315 	stw	r2,12(sp)
   47940:	8809883a 	mov	r4,r17
   47944:	a80b883a 	mov	r5,r21
   47948:	00496980 	call	49698 <__udivsi3>
   4794c:	8809883a 	mov	r4,r17
   47950:	a80b883a 	mov	r5,r21
   47954:	102d883a 	mov	r22,r2
   47958:	00496a00 	call	496a0 <__umodsi3>
   4795c:	1004943a 	slli	r2,r2,16
   47960:	e006d43a 	srli	r3,fp,16
   47964:	bda3383a 	mul	r17,r23,r22
   47968:	10c4b03a 	or	r2,r2,r3
   4796c:	1440042e 	bgeu	r2,r17,47980 <__udivdi3+0xdc>
   47970:	1405883a 	add	r2,r2,r16
   47974:	b5bfffc4 	addi	r22,r22,-1
   47978:	14000136 	bltu	r2,r16,47980 <__udivdi3+0xdc>
   4797c:	14413d36 	bltu	r2,r17,47e74 <__udivdi3+0x5d0>
   47980:	1463c83a 	sub	r17,r2,r17
   47984:	8809883a 	mov	r4,r17
   47988:	a80b883a 	mov	r5,r21
   4798c:	00496980 	call	49698 <__udivsi3>
   47990:	8809883a 	mov	r4,r17
   47994:	a80b883a 	mov	r5,r21
   47998:	1029883a 	mov	r20,r2
   4799c:	00496a00 	call	496a0 <__umodsi3>
   479a0:	1004943a 	slli	r2,r2,16
   479a4:	bd09383a 	mul	r4,r23,r20
   479a8:	e0ffffcc 	andi	r3,fp,65535
   479ac:	10c4b03a 	or	r2,r2,r3
   479b0:	1100042e 	bgeu	r2,r4,479c4 <__udivdi3+0x120>
   479b4:	8085883a 	add	r2,r16,r2
   479b8:	a53fffc4 	addi	r20,r20,-1
   479bc:	14000136 	bltu	r2,r16,479c4 <__udivdi3+0x120>
   479c0:	11012036 	bltu	r2,r4,47e44 <__udivdi3+0x5a0>
   479c4:	b004943a 	slli	r2,r22,16
   479c8:	d9000317 	ldw	r4,12(sp)
   479cc:	a084b03a 	or	r2,r20,r2
   479d0:	00001506 	br	47a28 <__udivdi3+0x184>
   479d4:	380d883a 	mov	r6,r7
   479d8:	29c06236 	bltu	r5,r7,47b64 <__udivdi3+0x2c0>
   479dc:	00bfffd4 	movui	r2,65535
   479e0:	11c05a36 	bltu	r2,r7,47b4c <__udivdi3+0x2a8>
   479e4:	00803fc4 	movi	r2,255
   479e8:	11c0fc36 	bltu	r2,r7,47ddc <__udivdi3+0x538>
   479ec:	000b883a 	mov	r5,zero
   479f0:	0005883a 	mov	r2,zero
   479f4:	3084d83a 	srl	r2,r6,r2
   479f8:	010001b4 	movhi	r4,6
   479fc:	2100a004 	addi	r4,r4,640
   47a00:	01c00804 	movi	r7,32
   47a04:	1105883a 	add	r2,r2,r4
   47a08:	10c00003 	ldbu	r3,0(r2)
   47a0c:	28c7883a 	add	r3,r5,r3
   47a10:	38efc83a 	sub	r23,r7,r3
   47a14:	b800691e 	bne	r23,zero,47bbc <__udivdi3+0x318>
   47a18:	35000136 	bltu	r6,r20,47a20 <__udivdi3+0x17c>
   47a1c:	e4005136 	bltu	fp,r16,47b64 <__udivdi3+0x2c0>
   47a20:	00800044 	movi	r2,1
   47a24:	0009883a 	mov	r4,zero
   47a28:	2007883a 	mov	r3,r4
   47a2c:	dfc00f17 	ldw	ra,60(sp)
   47a30:	df000e17 	ldw	fp,56(sp)
   47a34:	ddc00d17 	ldw	r23,52(sp)
   47a38:	dd800c17 	ldw	r22,48(sp)
   47a3c:	dd400b17 	ldw	r21,44(sp)
   47a40:	dd000a17 	ldw	r20,40(sp)
   47a44:	dcc00917 	ldw	r19,36(sp)
   47a48:	dc800817 	ldw	r18,32(sp)
   47a4c:	dc400717 	ldw	r17,28(sp)
   47a50:	dc000617 	ldw	r16,24(sp)
   47a54:	dec01004 	addi	sp,sp,64
   47a58:	f800283a 	ret
   47a5c:	00bfffd4 	movui	r2,65535
   47a60:	12005036 	bltu	r2,r8,47ba4 <__udivdi3+0x300>
   47a64:	00803fc4 	movi	r2,255
   47a68:	1200e836 	bltu	r2,r8,47e0c <__udivdi3+0x568>
   47a6c:	000b883a 	mov	r5,zero
   47a70:	0005883a 	mov	r2,zero
   47a74:	8084d83a 	srl	r2,r16,r2
   47a78:	010001b4 	movhi	r4,6
   47a7c:	2100a004 	addi	r4,r4,640
   47a80:	01800804 	movi	r6,32
   47a84:	1105883a 	add	r2,r2,r4
   47a88:	10c00003 	ldbu	r3,0(r2)
   47a8c:	28c7883a 	add	r3,r5,r3
   47a90:	30cbc83a 	sub	r5,r6,r3
   47a94:	28000626 	beq	r5,zero,47ab0 <__udivdi3+0x20c>
   47a98:	3145c83a 	sub	r2,r6,r5
   47a9c:	e084d83a 	srl	r2,fp,r2
   47aa0:	a146983a 	sll	r3,r20,r5
   47aa4:	e178983a 	sll	fp,fp,r5
   47aa8:	8160983a 	sll	r16,r16,r5
   47aac:	18a8b03a 	or	r20,r3,r2
   47ab0:	802ad43a 	srli	r21,r16,16
   47ab4:	a009883a 	mov	r4,r20
   47ab8:	85ffffcc 	andi	r23,r16,65535
   47abc:	a80b883a 	mov	r5,r21
   47ac0:	00496980 	call	49698 <__udivsi3>
   47ac4:	a009883a 	mov	r4,r20
   47ac8:	a80b883a 	mov	r5,r21
   47acc:	102d883a 	mov	r22,r2
   47ad0:	00496a00 	call	496a0 <__umodsi3>
   47ad4:	1004943a 	slli	r2,r2,16
   47ad8:	e006d43a 	srli	r3,fp,16
   47adc:	bda3383a 	mul	r17,r23,r22
   47ae0:	10c4b03a 	or	r2,r2,r3
   47ae4:	1440042e 	bgeu	r2,r17,47af8 <__udivdi3+0x254>
   47ae8:	1405883a 	add	r2,r2,r16
   47aec:	b5bfffc4 	addi	r22,r22,-1
   47af0:	14000136 	bltu	r2,r16,47af8 <__udivdi3+0x254>
   47af4:	1440d536 	bltu	r2,r17,47e4c <__udivdi3+0x5a8>
   47af8:	1463c83a 	sub	r17,r2,r17
   47afc:	8809883a 	mov	r4,r17
   47b00:	a80b883a 	mov	r5,r21
   47b04:	00496980 	call	49698 <__udivsi3>
   47b08:	8809883a 	mov	r4,r17
   47b0c:	a80b883a 	mov	r5,r21
   47b10:	1029883a 	mov	r20,r2
   47b14:	00496a00 	call	496a0 <__umodsi3>
   47b18:	1004943a 	slli	r2,r2,16
   47b1c:	bd09383a 	mul	r4,r23,r20
   47b20:	e0ffffcc 	andi	r3,fp,65535
   47b24:	10c4b03a 	or	r2,r2,r3
   47b28:	1100042e 	bgeu	r2,r4,47b3c <__udivdi3+0x298>
   47b2c:	8085883a 	add	r2,r16,r2
   47b30:	a53fffc4 	addi	r20,r20,-1
   47b34:	14000136 	bltu	r2,r16,47b3c <__udivdi3+0x298>
   47b38:	1100c736 	bltu	r2,r4,47e58 <__udivdi3+0x5b4>
   47b3c:	b004943a 	slli	r2,r22,16
   47b40:	0009883a 	mov	r4,zero
   47b44:	a084b03a 	or	r2,r20,r2
   47b48:	003fb706 	br	47a28 <__udivdi3+0x184>
   47b4c:	00804034 	movhi	r2,256
   47b50:	10bfffc4 	addi	r2,r2,-1
   47b54:	11c0a436 	bltu	r2,r7,47de8 <__udivdi3+0x544>
   47b58:	01400404 	movi	r5,16
   47b5c:	2805883a 	mov	r2,r5
   47b60:	003fa406 	br	479f4 <__udivdi3+0x150>
   47b64:	0005883a 	mov	r2,zero
   47b68:	0009883a 	mov	r4,zero
   47b6c:	003fae06 	br	47a28 <__udivdi3+0x184>
   47b70:	00804034 	movhi	r2,256
   47b74:	10bfffc4 	addi	r2,r2,-1
   47b78:	1400a136 	bltu	r2,r16,47e00 <__udivdi3+0x55c>
   47b7c:	01400404 	movi	r5,16
   47b80:	2805883a 	mov	r2,r5
   47b84:	003f6006 	br	47908 <__udivdi3+0x64>
   47b88:	01000044 	movi	r4,1
   47b8c:	000b883a 	mov	r5,zero
   47b90:	00496980 	call	49698 <__udivsi3>
   47b94:	1021883a 	mov	r16,r2
   47b98:	00bfffd4 	movui	r2,65535
   47b9c:	143ff436 	bltu	r2,r16,47b70 <__udivdi3+0x2cc>
   47ba0:	003f5506 	br	478f8 <__udivdi3+0x54>
   47ba4:	00804034 	movhi	r2,256
   47ba8:	10bfffc4 	addi	r2,r2,-1
   47bac:	12009a36 	bltu	r2,r8,47e18 <__udivdi3+0x574>
   47bb0:	01400404 	movi	r5,16
   47bb4:	2805883a 	mov	r2,r5
   47bb8:	003fae06 	br	47a74 <__udivdi3+0x1d0>
   47bbc:	3dc5c83a 	sub	r2,r7,r23
   47bc0:	35c8983a 	sll	r4,r6,r23
   47bc4:	8086d83a 	srl	r3,r16,r2
   47bc8:	a0a2d83a 	srl	r17,r20,r2
   47bcc:	e084d83a 	srl	r2,fp,r2
   47bd0:	20eab03a 	or	r21,r4,r3
   47bd4:	a82cd43a 	srli	r22,r21,16
   47bd8:	a5c6983a 	sll	r3,r20,r23
   47bdc:	8809883a 	mov	r4,r17
   47be0:	b00b883a 	mov	r5,r22
   47be4:	1886b03a 	or	r3,r3,r2
   47be8:	d8c00215 	stw	r3,8(sp)
   47bec:	00496980 	call	49698 <__udivsi3>
   47bf0:	8809883a 	mov	r4,r17
   47bf4:	b00b883a 	mov	r5,r22
   47bf8:	1029883a 	mov	r20,r2
   47bfc:	00496a00 	call	496a0 <__umodsi3>
   47c00:	a8ffffcc 	andi	r3,r21,65535
   47c04:	d8c00515 	stw	r3,20(sp)
   47c08:	d9000217 	ldw	r4,8(sp)
   47c0c:	d9400517 	ldw	r5,20(sp)
   47c10:	1004943a 	slli	r2,r2,16
   47c14:	2006d43a 	srli	r3,r4,16
   47c18:	85e0983a 	sll	r16,r16,r23
   47c1c:	2d23383a 	mul	r17,r5,r20
   47c20:	10c4b03a 	or	r2,r2,r3
   47c24:	dc000015 	stw	r16,0(sp)
   47c28:	1440032e 	bgeu	r2,r17,47c38 <__udivdi3+0x394>
   47c2c:	1545883a 	add	r2,r2,r21
   47c30:	a53fffc4 	addi	r20,r20,-1
   47c34:	15407f2e 	bgeu	r2,r21,47e34 <__udivdi3+0x590>
   47c38:	1463c83a 	sub	r17,r2,r17
   47c3c:	8809883a 	mov	r4,r17
   47c40:	b00b883a 	mov	r5,r22
   47c44:	00496980 	call	49698 <__udivsi3>
   47c48:	8809883a 	mov	r4,r17
   47c4c:	b00b883a 	mov	r5,r22
   47c50:	1021883a 	mov	r16,r2
   47c54:	00496a00 	call	496a0 <__umodsi3>
   47c58:	d8c00517 	ldw	r3,20(sp)
   47c5c:	d9000217 	ldw	r4,8(sp)
   47c60:	1004943a 	slli	r2,r2,16
   47c64:	1c0f383a 	mul	r7,r3,r16
   47c68:	20ffffcc 	andi	r3,r4,65535
   47c6c:	10e2b03a 	or	r17,r2,r3
   47c70:	89c0032e 	bgeu	r17,r7,47c80 <__udivdi3+0x3dc>
   47c74:	8d63883a 	add	r17,r17,r21
   47c78:	843fffc4 	addi	r16,r16,-1
   47c7c:	8d40692e 	bgeu	r17,r21,47e24 <__udivdi3+0x580>
   47c80:	a008943a 	slli	r4,r20,16
   47c84:	d9400017 	ldw	r5,0(sp)
   47c88:	89e3c83a 	sub	r17,r17,r7
   47c8c:	8110b03a 	or	r8,r16,r4
   47c90:	280cd43a 	srli	r6,r5,16
   47c94:	28ffffcc 	andi	r3,r5,65535
   47c98:	40bfffcc 	andi	r2,r8,65535
   47c9c:	400ad43a 	srli	r5,r8,16
   47ca0:	10d3383a 	mul	r9,r2,r3
   47ca4:	1185383a 	mul	r2,r2,r6
   47ca8:	28c7383a 	mul	r3,r5,r3
   47cac:	4808d43a 	srli	r4,r9,16
   47cb0:	298b383a 	mul	r5,r5,r6
   47cb4:	10c5883a 	add	r2,r2,r3
   47cb8:	2089883a 	add	r4,r4,r2
   47cbc:	20c0022e 	bgeu	r4,r3,47cc8 <__udivdi3+0x424>
   47cc0:	00800074 	movhi	r2,1
   47cc4:	288b883a 	add	r5,r5,r2
   47cc8:	2004d43a 	srli	r2,r4,16
   47ccc:	288b883a 	add	r5,r5,r2
   47cd0:	89403f36 	bltu	r17,r5,47dd0 <__udivdi3+0x52c>
   47cd4:	89403926 	beq	r17,r5,47dbc <__udivdi3+0x518>
   47cd8:	4005883a 	mov	r2,r8
   47cdc:	0009883a 	mov	r4,zero
   47ce0:	003f5106 	br	47a28 <__udivdi3+0x184>
   47ce4:	85a0983a 	sll	r16,r16,r22
   47ce8:	3585c83a 	sub	r2,r6,r22
   47cec:	a0a2d83a 	srl	r17,r20,r2
   47cf0:	802ad43a 	srli	r21,r16,16
   47cf4:	e084d83a 	srl	r2,fp,r2
   47cf8:	a586983a 	sll	r3,r20,r22
   47cfc:	8809883a 	mov	r4,r17
   47d00:	a80b883a 	mov	r5,r21
   47d04:	1886b03a 	or	r3,r3,r2
   47d08:	d8c00115 	stw	r3,4(sp)
   47d0c:	00496980 	call	49698 <__udivsi3>
   47d10:	8809883a 	mov	r4,r17
   47d14:	a80b883a 	mov	r5,r21
   47d18:	d8800415 	stw	r2,16(sp)
   47d1c:	00496a00 	call	496a0 <__umodsi3>
   47d20:	d9000117 	ldw	r4,4(sp)
   47d24:	d9400417 	ldw	r5,16(sp)
   47d28:	1004943a 	slli	r2,r2,16
   47d2c:	85ffffcc 	andi	r23,r16,65535
   47d30:	2006d43a 	srli	r3,r4,16
   47d34:	b963383a 	mul	r17,r23,r5
   47d38:	10c4b03a 	or	r2,r2,r3
   47d3c:	1440042e 	bgeu	r2,r17,47d50 <__udivdi3+0x4ac>
   47d40:	297fffc4 	addi	r5,r5,-1
   47d44:	1405883a 	add	r2,r2,r16
   47d48:	d9400415 	stw	r5,16(sp)
   47d4c:	1400442e 	bgeu	r2,r16,47e60 <__udivdi3+0x5bc>
   47d50:	1463c83a 	sub	r17,r2,r17
   47d54:	8809883a 	mov	r4,r17
   47d58:	a80b883a 	mov	r5,r21
   47d5c:	00496980 	call	49698 <__udivsi3>
   47d60:	8809883a 	mov	r4,r17
   47d64:	a80b883a 	mov	r5,r21
   47d68:	1029883a 	mov	r20,r2
   47d6c:	00496a00 	call	496a0 <__umodsi3>
   47d70:	d9400117 	ldw	r5,4(sp)
   47d74:	1004943a 	slli	r2,r2,16
   47d78:	bd09383a 	mul	r4,r23,r20
   47d7c:	28ffffcc 	andi	r3,r5,65535
   47d80:	10c6b03a 	or	r3,r2,r3
   47d84:	1900062e 	bgeu	r3,r4,47da0 <__udivdi3+0x4fc>
   47d88:	1c07883a 	add	r3,r3,r16
   47d8c:	a53fffc4 	addi	r20,r20,-1
   47d90:	1c000336 	bltu	r3,r16,47da0 <__udivdi3+0x4fc>
   47d94:	1900022e 	bgeu	r3,r4,47da0 <__udivdi3+0x4fc>
   47d98:	a53fffc4 	addi	r20,r20,-1
   47d9c:	1c07883a 	add	r3,r3,r16
   47da0:	d9400417 	ldw	r5,16(sp)
   47da4:	e5b8983a 	sll	fp,fp,r22
   47da8:	1923c83a 	sub	r17,r3,r4
   47dac:	2804943a 	slli	r2,r5,16
   47db0:	a0a8b03a 	or	r20,r20,r2
   47db4:	dd000315 	stw	r20,12(sp)
   47db8:	003ee106 	br	47940 <__udivdi3+0x9c>
   47dbc:	2004943a 	slli	r2,r4,16
   47dc0:	e5c8983a 	sll	r4,fp,r23
   47dc4:	48ffffcc 	andi	r3,r9,65535
   47dc8:	10c5883a 	add	r2,r2,r3
   47dcc:	20bfc22e 	bgeu	r4,r2,47cd8 <__udivdi3+0x434>
   47dd0:	40bfffc4 	addi	r2,r8,-1
   47dd4:	0009883a 	mov	r4,zero
   47dd8:	003f1306 	br	47a28 <__udivdi3+0x184>
   47ddc:	01400204 	movi	r5,8
   47de0:	2805883a 	mov	r2,r5
   47de4:	003f0306 	br	479f4 <__udivdi3+0x150>
   47de8:	01400604 	movi	r5,24
   47dec:	2805883a 	mov	r2,r5
   47df0:	003f0006 	br	479f4 <__udivdi3+0x150>
   47df4:	01400204 	movi	r5,8
   47df8:	2805883a 	mov	r2,r5
   47dfc:	003ec206 	br	47908 <__udivdi3+0x64>
   47e00:	01400604 	movi	r5,24
   47e04:	2805883a 	mov	r2,r5
   47e08:	003ebf06 	br	47908 <__udivdi3+0x64>
   47e0c:	01400204 	movi	r5,8
   47e10:	2805883a 	mov	r2,r5
   47e14:	003f1706 	br	47a74 <__udivdi3+0x1d0>
   47e18:	01400604 	movi	r5,24
   47e1c:	2805883a 	mov	r2,r5
   47e20:	003f1406 	br	47a74 <__udivdi3+0x1d0>
   47e24:	89ff962e 	bgeu	r17,r7,47c80 <__udivdi3+0x3dc>
   47e28:	8d63883a 	add	r17,r17,r21
   47e2c:	843fffc4 	addi	r16,r16,-1
   47e30:	003f9306 	br	47c80 <__udivdi3+0x3dc>
   47e34:	147f802e 	bgeu	r2,r17,47c38 <__udivdi3+0x394>
   47e38:	a53fffc4 	addi	r20,r20,-1
   47e3c:	1545883a 	add	r2,r2,r21
   47e40:	003f7d06 	br	47c38 <__udivdi3+0x394>
   47e44:	a53fffc4 	addi	r20,r20,-1
   47e48:	003ede06 	br	479c4 <__udivdi3+0x120>
   47e4c:	b5bfffc4 	addi	r22,r22,-1
   47e50:	1405883a 	add	r2,r2,r16
   47e54:	003f2806 	br	47af8 <__udivdi3+0x254>
   47e58:	a53fffc4 	addi	r20,r20,-1
   47e5c:	003f3706 	br	47b3c <__udivdi3+0x298>
   47e60:	147fbb2e 	bgeu	r2,r17,47d50 <__udivdi3+0x4ac>
   47e64:	297fffc4 	addi	r5,r5,-1
   47e68:	1405883a 	add	r2,r2,r16
   47e6c:	d9400415 	stw	r5,16(sp)
   47e70:	003fb706 	br	47d50 <__udivdi3+0x4ac>
   47e74:	b5bfffc4 	addi	r22,r22,-1
   47e78:	1405883a 	add	r2,r2,r16
   47e7c:	003ec006 	br	47980 <__udivdi3+0xdc>

00047e80 <__umoddi3>:
   47e80:	defff104 	addi	sp,sp,-60
   47e84:	dd800b15 	stw	r22,44(sp)
   47e88:	dd000915 	stw	r20,36(sp)
   47e8c:	dc000515 	stw	r16,20(sp)
   47e90:	dfc00e15 	stw	ra,56(sp)
   47e94:	df000d15 	stw	fp,52(sp)
   47e98:	ddc00c15 	stw	r23,48(sp)
   47e9c:	dd400a15 	stw	r21,40(sp)
   47ea0:	dcc00815 	stw	r19,32(sp)
   47ea4:	dc800715 	stw	r18,28(sp)
   47ea8:	dc400615 	stw	r17,24(sp)
   47eac:	3021883a 	mov	r16,r6
   47eb0:	202d883a 	mov	r22,r4
   47eb4:	2829883a 	mov	r20,r5
   47eb8:	38002b1e 	bne	r7,zero,47f68 <__umoddi3+0xe8>
   47ebc:	29805036 	bltu	r5,r6,48000 <__umoddi3+0x180>
   47ec0:	30008a26 	beq	r6,zero,480ec <__umoddi3+0x26c>
   47ec4:	00bfffd4 	movui	r2,65535
   47ec8:	14008236 	bltu	r2,r16,480d4 <__umoddi3+0x254>
   47ecc:	00803fc4 	movi	r2,255
   47ed0:	14013636 	bltu	r2,r16,483ac <__umoddi3+0x52c>
   47ed4:	000b883a 	mov	r5,zero
   47ed8:	0005883a 	mov	r2,zero
   47edc:	8084d83a 	srl	r2,r16,r2
   47ee0:	010001b4 	movhi	r4,6
   47ee4:	2100a004 	addi	r4,r4,640
   47ee8:	01800804 	movi	r6,32
   47eec:	1105883a 	add	r2,r2,r4
   47ef0:	10c00003 	ldbu	r3,0(r2)
   47ef4:	28c7883a 	add	r3,r5,r3
   47ef8:	30efc83a 	sub	r23,r6,r3
   47efc:	b800941e 	bne	r23,zero,48150 <__umoddi3+0x2d0>
   47f00:	802ad43a 	srli	r21,r16,16
   47f04:	a423c83a 	sub	r17,r20,r16
   47f08:	0039883a 	mov	fp,zero
   47f0c:	853fffcc 	andi	r20,r16,65535
   47f10:	8809883a 	mov	r4,r17
   47f14:	a80b883a 	mov	r5,r21
   47f18:	00496980 	call	49698 <__udivsi3>
   47f1c:	8809883a 	mov	r4,r17
   47f20:	a80b883a 	mov	r5,r21
   47f24:	a0a3383a 	mul	r17,r20,r2
   47f28:	00496a00 	call	496a0 <__umodsi3>
   47f2c:	1004943a 	slli	r2,r2,16
   47f30:	b006d43a 	srli	r3,r22,16
   47f34:	10c4b03a 	or	r2,r2,r3
   47f38:	1440032e 	bgeu	r2,r17,47f48 <__umoddi3+0xc8>
   47f3c:	1405883a 	add	r2,r2,r16
   47f40:	14000136 	bltu	r2,r16,47f48 <__umoddi3+0xc8>
   47f44:	14413536 	bltu	r2,r17,4841c <__umoddi3+0x59c>
   47f48:	1463c83a 	sub	r17,r2,r17
   47f4c:	8809883a 	mov	r4,r17
   47f50:	a80b883a 	mov	r5,r21
   47f54:	00496980 	call	49698 <__udivsi3>
   47f58:	8809883a 	mov	r4,r17
   47f5c:	a0a3383a 	mul	r17,r20,r2
   47f60:	a80b883a 	mov	r5,r21
   47f64:	00004d06 	br	4809c <__umoddi3+0x21c>
   47f68:	380d883a 	mov	r6,r7
   47f6c:	29c0102e 	bgeu	r5,r7,47fb0 <__umoddi3+0x130>
   47f70:	2011883a 	mov	r8,r4
   47f74:	2813883a 	mov	r9,r5
   47f78:	4005883a 	mov	r2,r8
   47f7c:	4807883a 	mov	r3,r9
   47f80:	dfc00e17 	ldw	ra,56(sp)
   47f84:	df000d17 	ldw	fp,52(sp)
   47f88:	ddc00c17 	ldw	r23,48(sp)
   47f8c:	dd800b17 	ldw	r22,44(sp)
   47f90:	dd400a17 	ldw	r21,40(sp)
   47f94:	dd000917 	ldw	r20,36(sp)
   47f98:	dcc00817 	ldw	r19,32(sp)
   47f9c:	dc800717 	ldw	r18,28(sp)
   47fa0:	dc400617 	ldw	r17,24(sp)
   47fa4:	dc000517 	ldw	r16,20(sp)
   47fa8:	dec00f04 	addi	sp,sp,60
   47fac:	f800283a 	ret
   47fb0:	00bfffd4 	movui	r2,65535
   47fb4:	11c05a36 	bltu	r2,r7,48120 <__umoddi3+0x2a0>
   47fb8:	00803fc4 	movi	r2,255
   47fbc:	11c0fe36 	bltu	r2,r7,483b8 <__umoddi3+0x538>
   47fc0:	000b883a 	mov	r5,zero
   47fc4:	0005883a 	mov	r2,zero
   47fc8:	3084d83a 	srl	r2,r6,r2
   47fcc:	010001b4 	movhi	r4,6
   47fd0:	2100a004 	addi	r4,r4,640
   47fd4:	01c00804 	movi	r7,32
   47fd8:	1105883a 	add	r2,r2,r4
   47fdc:	10c00003 	ldbu	r3,0(r2)
   47fe0:	28c7883a 	add	r3,r5,r3
   47fe4:	38ebc83a 	sub	r21,r7,r3
   47fe8:	a800851e 	bne	r21,zero,48200 <__umoddi3+0x380>
   47fec:	35005236 	bltu	r6,r20,48138 <__umoddi3+0x2b8>
   47ff0:	b400512e 	bgeu	r22,r16,48138 <__umoddi3+0x2b8>
   47ff4:	b011883a 	mov	r8,r22
   47ff8:	a013883a 	mov	r9,r20
   47ffc:	003fde06 	br	47f78 <__umoddi3+0xf8>
   48000:	00bfffd4 	movui	r2,65535
   48004:	11804036 	bltu	r2,r6,48108 <__umoddi3+0x288>
   48008:	00803fc4 	movi	r2,255
   4800c:	1180ed36 	bltu	r2,r6,483c4 <__umoddi3+0x544>
   48010:	000b883a 	mov	r5,zero
   48014:	0005883a 	mov	r2,zero
   48018:	8084d83a 	srl	r2,r16,r2
   4801c:	010001b4 	movhi	r4,6
   48020:	2100a004 	addi	r4,r4,640
   48024:	01800804 	movi	r6,32
   48028:	1105883a 	add	r2,r2,r4
   4802c:	10c00003 	ldbu	r3,0(r2)
   48030:	28c7883a 	add	r3,r5,r3
   48034:	30c7c83a 	sub	r3,r6,r3
   48038:	1800bf1e 	bne	r3,zero,48338 <__umoddi3+0x4b8>
   4803c:	0039883a 	mov	fp,zero
   48040:	802ad43a 	srli	r21,r16,16
   48044:	a009883a 	mov	r4,r20
   48048:	85ffffcc 	andi	r23,r16,65535
   4804c:	a80b883a 	mov	r5,r21
   48050:	00496980 	call	49698 <__udivsi3>
   48054:	a009883a 	mov	r4,r20
   48058:	a80b883a 	mov	r5,r21
   4805c:	b8a3383a 	mul	r17,r23,r2
   48060:	00496a00 	call	496a0 <__umodsi3>
   48064:	1004943a 	slli	r2,r2,16
   48068:	b006d43a 	srli	r3,r22,16
   4806c:	10c4b03a 	or	r2,r2,r3
   48070:	1440032e 	bgeu	r2,r17,48080 <__umoddi3+0x200>
   48074:	1405883a 	add	r2,r2,r16
   48078:	14000136 	bltu	r2,r16,48080 <__umoddi3+0x200>
   4807c:	1440e536 	bltu	r2,r17,48414 <__umoddi3+0x594>
   48080:	1463c83a 	sub	r17,r2,r17
   48084:	8809883a 	mov	r4,r17
   48088:	a80b883a 	mov	r5,r21
   4808c:	00496980 	call	49698 <__udivsi3>
   48090:	8809883a 	mov	r4,r17
   48094:	b8a3383a 	mul	r17,r23,r2
   48098:	a80b883a 	mov	r5,r21
   4809c:	00496a00 	call	496a0 <__umodsi3>
   480a0:	1004943a 	slli	r2,r2,16
   480a4:	b0ffffcc 	andi	r3,r22,65535
   480a8:	10c4b03a 	or	r2,r2,r3
   480ac:	1440042e 	bgeu	r2,r17,480c0 <__umoddi3+0x240>
   480b0:	1405883a 	add	r2,r2,r16
   480b4:	14000236 	bltu	r2,r16,480c0 <__umoddi3+0x240>
   480b8:	1440012e 	bgeu	r2,r17,480c0 <__umoddi3+0x240>
   480bc:	1405883a 	add	r2,r2,r16
   480c0:	1445c83a 	sub	r2,r2,r17
   480c4:	1724d83a 	srl	r18,r2,fp
   480c8:	0013883a 	mov	r9,zero
   480cc:	9011883a 	mov	r8,r18
   480d0:	003fa906 	br	47f78 <__umoddi3+0xf8>
   480d4:	00804034 	movhi	r2,256
   480d8:	10bfffc4 	addi	r2,r2,-1
   480dc:	1400b036 	bltu	r2,r16,483a0 <__umoddi3+0x520>
   480e0:	01400404 	movi	r5,16
   480e4:	2805883a 	mov	r2,r5
   480e8:	003f7c06 	br	47edc <__umoddi3+0x5c>
   480ec:	01000044 	movi	r4,1
   480f0:	000b883a 	mov	r5,zero
   480f4:	00496980 	call	49698 <__udivsi3>
   480f8:	1021883a 	mov	r16,r2
   480fc:	00bfffd4 	movui	r2,65535
   48100:	143ff436 	bltu	r2,r16,480d4 <__umoddi3+0x254>
   48104:	003f7106 	br	47ecc <__umoddi3+0x4c>
   48108:	00804034 	movhi	r2,256
   4810c:	10bfffc4 	addi	r2,r2,-1
   48110:	1180af36 	bltu	r2,r6,483d0 <__umoddi3+0x550>
   48114:	01400404 	movi	r5,16
   48118:	2805883a 	mov	r2,r5
   4811c:	003fbe06 	br	48018 <__umoddi3+0x198>
   48120:	00804034 	movhi	r2,256
   48124:	10bfffc4 	addi	r2,r2,-1
   48128:	11c0ac36 	bltu	r2,r7,483dc <__umoddi3+0x55c>
   4812c:	01400404 	movi	r5,16
   48130:	2805883a 	mov	r2,r5
   48134:	003fa406 	br	47fc8 <__umoddi3+0x148>
   48138:	b409c83a 	sub	r4,r22,r16
   4813c:	b105803a 	cmpltu	r2,r22,r4
   48140:	a187c83a 	sub	r3,r20,r6
   48144:	18a9c83a 	sub	r20,r3,r2
   48148:	202d883a 	mov	r22,r4
   4814c:	003fa906 	br	47ff4 <__umoddi3+0x174>
   48150:	85e0983a 	sll	r16,r16,r23
   48154:	35c5c83a 	sub	r2,r6,r23
   48158:	a0a2d83a 	srl	r17,r20,r2
   4815c:	802ad43a 	srli	r21,r16,16
   48160:	b084d83a 	srl	r2,r22,r2
   48164:	a5c6983a 	sll	r3,r20,r23
   48168:	8809883a 	mov	r4,r17
   4816c:	a80b883a 	mov	r5,r21
   48170:	1886b03a 	or	r3,r3,r2
   48174:	d8c00115 	stw	r3,4(sp)
   48178:	853fffcc 	andi	r20,r16,65535
   4817c:	00496980 	call	49698 <__udivsi3>
   48180:	8809883a 	mov	r4,r17
   48184:	a80b883a 	mov	r5,r21
   48188:	a0a3383a 	mul	r17,r20,r2
   4818c:	00496a00 	call	496a0 <__umodsi3>
   48190:	d9000117 	ldw	r4,4(sp)
   48194:	1004943a 	slli	r2,r2,16
   48198:	b839883a 	mov	fp,r23
   4819c:	2006d43a 	srli	r3,r4,16
   481a0:	10c4b03a 	or	r2,r2,r3
   481a4:	1440022e 	bgeu	r2,r17,481b0 <__umoddi3+0x330>
   481a8:	1405883a 	add	r2,r2,r16
   481ac:	1400962e 	bgeu	r2,r16,48408 <__umoddi3+0x588>
   481b0:	1463c83a 	sub	r17,r2,r17
   481b4:	8809883a 	mov	r4,r17
   481b8:	a80b883a 	mov	r5,r21
   481bc:	00496980 	call	49698 <__udivsi3>
   481c0:	8809883a 	mov	r4,r17
   481c4:	a80b883a 	mov	r5,r21
   481c8:	a0a3383a 	mul	r17,r20,r2
   481cc:	00496a00 	call	496a0 <__umodsi3>
   481d0:	d9400117 	ldw	r5,4(sp)
   481d4:	1004943a 	slli	r2,r2,16
   481d8:	28ffffcc 	andi	r3,r5,65535
   481dc:	10c4b03a 	or	r2,r2,r3
   481e0:	1440042e 	bgeu	r2,r17,481f4 <__umoddi3+0x374>
   481e4:	1405883a 	add	r2,r2,r16
   481e8:	14000236 	bltu	r2,r16,481f4 <__umoddi3+0x374>
   481ec:	1440012e 	bgeu	r2,r17,481f4 <__umoddi3+0x374>
   481f0:	1405883a 	add	r2,r2,r16
   481f4:	b5ec983a 	sll	r22,r22,r23
   481f8:	1463c83a 	sub	r17,r2,r17
   481fc:	003f4406 	br	47f10 <__umoddi3+0x90>
   48200:	3d4fc83a 	sub	r7,r7,r21
   48204:	3546983a 	sll	r3,r6,r21
   48208:	81c4d83a 	srl	r2,r16,r7
   4820c:	a1e2d83a 	srl	r17,r20,r7
   48210:	a54c983a 	sll	r6,r20,r21
   48214:	18aeb03a 	or	r23,r3,r2
   48218:	b828d43a 	srli	r20,r23,16
   4821c:	b1c4d83a 	srl	r2,r22,r7
   48220:	8809883a 	mov	r4,r17
   48224:	a00b883a 	mov	r5,r20
   48228:	308cb03a 	or	r6,r6,r2
   4822c:	d9c00315 	stw	r7,12(sp)
   48230:	d9800215 	stw	r6,8(sp)
   48234:	00496980 	call	49698 <__udivsi3>
   48238:	8809883a 	mov	r4,r17
   4823c:	a00b883a 	mov	r5,r20
   48240:	1039883a 	mov	fp,r2
   48244:	00496a00 	call	496a0 <__umodsi3>
   48248:	b8ffffcc 	andi	r3,r23,65535
   4824c:	d8c00415 	stw	r3,16(sp)
   48250:	d9000217 	ldw	r4,8(sp)
   48254:	d9400417 	ldw	r5,16(sp)
   48258:	1004943a 	slli	r2,r2,16
   4825c:	2006d43a 	srli	r3,r4,16
   48260:	8560983a 	sll	r16,r16,r21
   48264:	2f23383a 	mul	r17,r5,fp
   48268:	10c4b03a 	or	r2,r2,r3
   4826c:	dc000015 	stw	r16,0(sp)
   48270:	b56c983a 	sll	r22,r22,r21
   48274:	1440032e 	bgeu	r2,r17,48284 <__umoddi3+0x404>
   48278:	15c5883a 	add	r2,r2,r23
   4827c:	e73fffc4 	addi	fp,fp,-1
   48280:	15c05d2e 	bgeu	r2,r23,483f8 <__umoddi3+0x578>
   48284:	1463c83a 	sub	r17,r2,r17
   48288:	8809883a 	mov	r4,r17
   4828c:	a00b883a 	mov	r5,r20
   48290:	00496980 	call	49698 <__udivsi3>
   48294:	8809883a 	mov	r4,r17
   48298:	a00b883a 	mov	r5,r20
   4829c:	1021883a 	mov	r16,r2
   482a0:	00496a00 	call	496a0 <__umodsi3>
   482a4:	d8c00417 	ldw	r3,16(sp)
   482a8:	d9000217 	ldw	r4,8(sp)
   482ac:	1004943a 	slli	r2,r2,16
   482b0:	1c23383a 	mul	r17,r3,r16
   482b4:	20ffffcc 	andi	r3,r4,65535
   482b8:	10ceb03a 	or	r7,r2,r3
   482bc:	3c40032e 	bgeu	r7,r17,482cc <__umoddi3+0x44c>
   482c0:	3dcf883a 	add	r7,r7,r23
   482c4:	843fffc4 	addi	r16,r16,-1
   482c8:	3dc0472e 	bgeu	r7,r23,483e8 <__umoddi3+0x568>
   482cc:	e004943a 	slli	r2,fp,16
   482d0:	d9400017 	ldw	r5,0(sp)
   482d4:	3c4fc83a 	sub	r7,r7,r17
   482d8:	8084b03a 	or	r2,r16,r2
   482dc:	28ffffcc 	andi	r3,r5,65535
   482e0:	280cd43a 	srli	r6,r5,16
   482e4:	100ad43a 	srli	r5,r2,16
   482e8:	10bfffcc 	andi	r2,r2,65535
   482ec:	10d1383a 	mul	r8,r2,r3
   482f0:	28c7383a 	mul	r3,r5,r3
   482f4:	1185383a 	mul	r2,r2,r6
   482f8:	4008d43a 	srli	r4,r8,16
   482fc:	298b383a 	mul	r5,r5,r6
   48300:	10c5883a 	add	r2,r2,r3
   48304:	2089883a 	add	r4,r4,r2
   48308:	20c0022e 	bgeu	r4,r3,48314 <__umoddi3+0x494>
   4830c:	00800074 	movhi	r2,1
   48310:	288b883a 	add	r5,r5,r2
   48314:	2004d43a 	srli	r2,r4,16
   48318:	2008943a 	slli	r4,r4,16
   4831c:	40ffffcc 	andi	r3,r8,65535
   48320:	288b883a 	add	r5,r5,r2
   48324:	20c9883a 	add	r4,r4,r3
   48328:	39400b36 	bltu	r7,r5,48358 <__umoddi3+0x4d8>
   4832c:	39403d26 	beq	r7,r5,48424 <__umoddi3+0x5a4>
   48330:	394bc83a 	sub	r5,r7,r5
   48334:	00000f06 	br	48374 <__umoddi3+0x4f4>
   48338:	30c5c83a 	sub	r2,r6,r3
   4833c:	1839883a 	mov	fp,r3
   48340:	b084d83a 	srl	r2,r22,r2
   48344:	a0c6983a 	sll	r3,r20,r3
   48348:	8720983a 	sll	r16,r16,fp
   4834c:	b72c983a 	sll	r22,r22,fp
   48350:	18a8b03a 	or	r20,r3,r2
   48354:	003f3a06 	br	48040 <__umoddi3+0x1c0>
   48358:	d8c00017 	ldw	r3,0(sp)
   4835c:	20c5c83a 	sub	r2,r4,r3
   48360:	2089803a 	cmpltu	r4,r4,r2
   48364:	2dc7c83a 	sub	r3,r5,r23
   48368:	1907c83a 	sub	r3,r3,r4
   4836c:	38cbc83a 	sub	r5,r7,r3
   48370:	1009883a 	mov	r4,r2
   48374:	b105c83a 	sub	r2,r22,r4
   48378:	b087803a 	cmpltu	r3,r22,r2
   4837c:	28c7c83a 	sub	r3,r5,r3
   48380:	d9400317 	ldw	r5,12(sp)
   48384:	1544d83a 	srl	r2,r2,r21
   48388:	1948983a 	sll	r4,r3,r5
   4838c:	1d46d83a 	srl	r3,r3,r21
   48390:	20a4b03a 	or	r18,r4,r2
   48394:	9011883a 	mov	r8,r18
   48398:	1813883a 	mov	r9,r3
   4839c:	003ef606 	br	47f78 <__umoddi3+0xf8>
   483a0:	01400604 	movi	r5,24
   483a4:	2805883a 	mov	r2,r5
   483a8:	003ecc06 	br	47edc <__umoddi3+0x5c>
   483ac:	01400204 	movi	r5,8
   483b0:	2805883a 	mov	r2,r5
   483b4:	003ec906 	br	47edc <__umoddi3+0x5c>
   483b8:	01400204 	movi	r5,8
   483bc:	2805883a 	mov	r2,r5
   483c0:	003f0106 	br	47fc8 <__umoddi3+0x148>
   483c4:	01400204 	movi	r5,8
   483c8:	2805883a 	mov	r2,r5
   483cc:	003f1206 	br	48018 <__umoddi3+0x198>
   483d0:	01400604 	movi	r5,24
   483d4:	2805883a 	mov	r2,r5
   483d8:	003f0f06 	br	48018 <__umoddi3+0x198>
   483dc:	01400604 	movi	r5,24
   483e0:	2805883a 	mov	r2,r5
   483e4:	003ef806 	br	47fc8 <__umoddi3+0x148>
   483e8:	3c7fb82e 	bgeu	r7,r17,482cc <__umoddi3+0x44c>
   483ec:	843fffc4 	addi	r16,r16,-1
   483f0:	3dcf883a 	add	r7,r7,r23
   483f4:	003fb506 	br	482cc <__umoddi3+0x44c>
   483f8:	147fa22e 	bgeu	r2,r17,48284 <__umoddi3+0x404>
   483fc:	e73fffc4 	addi	fp,fp,-1
   48400:	15c5883a 	add	r2,r2,r23
   48404:	003f9f06 	br	48284 <__umoddi3+0x404>
   48408:	147f692e 	bgeu	r2,r17,481b0 <__umoddi3+0x330>
   4840c:	1405883a 	add	r2,r2,r16
   48410:	003f6706 	br	481b0 <__umoddi3+0x330>
   48414:	1405883a 	add	r2,r2,r16
   48418:	003f1906 	br	48080 <__umoddi3+0x200>
   4841c:	1405883a 	add	r2,r2,r16
   48420:	003ec906 	br	47f48 <__umoddi3+0xc8>
   48424:	b13fcc36 	bltu	r22,r4,48358 <__umoddi3+0x4d8>
   48428:	000b883a 	mov	r5,zero
   4842c:	003fd106 	br	48374 <__umoddi3+0x4f4>

00048430 <_fpadd_parts>:
   48430:	defff804 	addi	sp,sp,-32
   48434:	dcc00315 	stw	r19,12(sp)
   48438:	2027883a 	mov	r19,r4
   4843c:	21000017 	ldw	r4,0(r4)
   48440:	00c00044 	movi	r3,1
   48444:	dd400515 	stw	r21,20(sp)
   48448:	dd000415 	stw	r20,16(sp)
   4844c:	ddc00715 	stw	r23,28(sp)
   48450:	dd800615 	stw	r22,24(sp)
   48454:	dc800215 	stw	r18,8(sp)
   48458:	dc400115 	stw	r17,4(sp)
   4845c:	dc000015 	stw	r16,0(sp)
   48460:	282b883a 	mov	r21,r5
   48464:	3029883a 	mov	r20,r6
   48468:	1900632e 	bgeu	r3,r4,485f8 <_fpadd_parts+0x1c8>
   4846c:	28800017 	ldw	r2,0(r5)
   48470:	1880812e 	bgeu	r3,r2,48678 <_fpadd_parts+0x248>
   48474:	00c00104 	movi	r3,4
   48478:	20c0dc26 	beq	r4,r3,487ec <_fpadd_parts+0x3bc>
   4847c:	10c07e26 	beq	r2,r3,48678 <_fpadd_parts+0x248>
   48480:	00c00084 	movi	r3,2
   48484:	10c06726 	beq	r2,r3,48624 <_fpadd_parts+0x1f4>
   48488:	20c07b26 	beq	r4,r3,48678 <_fpadd_parts+0x248>
   4848c:	9dc00217 	ldw	r23,8(r19)
   48490:	28c00217 	ldw	r3,8(r5)
   48494:	9c400317 	ldw	r17,12(r19)
   48498:	2bc00317 	ldw	r15,12(r5)
   4849c:	b8cdc83a 	sub	r6,r23,r3
   484a0:	9c800417 	ldw	r18,16(r19)
   484a4:	2c000417 	ldw	r16,16(r5)
   484a8:	3009883a 	mov	r4,r6
   484ac:	30009716 	blt	r6,zero,4870c <_fpadd_parts+0x2dc>
   484b0:	00800fc4 	movi	r2,63
   484b4:	11806b16 	blt	r2,r6,48664 <_fpadd_parts+0x234>
   484b8:	0100a40e 	bge	zero,r4,4874c <_fpadd_parts+0x31c>
   484bc:	35bff804 	addi	r22,r6,-32
   484c0:	b000bc16 	blt	r22,zero,487b4 <_fpadd_parts+0x384>
   484c4:	8596d83a 	srl	r11,r16,r22
   484c8:	0019883a 	mov	r12,zero
   484cc:	0013883a 	mov	r9,zero
   484d0:	01000044 	movi	r4,1
   484d4:	0015883a 	mov	r10,zero
   484d8:	b000be16 	blt	r22,zero,487d4 <_fpadd_parts+0x3a4>
   484dc:	2590983a 	sll	r8,r4,r22
   484e0:	000f883a 	mov	r7,zero
   484e4:	00bfffc4 	movi	r2,-1
   484e8:	3889883a 	add	r4,r7,r2
   484ec:	408b883a 	add	r5,r8,r2
   484f0:	21cd803a 	cmpltu	r6,r4,r7
   484f4:	314b883a 	add	r5,r6,r5
   484f8:	7904703a 	and	r2,r15,r4
   484fc:	8146703a 	and	r3,r16,r5
   48500:	10c4b03a 	or	r2,r2,r3
   48504:	10000226 	beq	r2,zero,48510 <_fpadd_parts+0xe0>
   48508:	02400044 	movi	r9,1
   4850c:	0015883a 	mov	r10,zero
   48510:	5a5eb03a 	or	r15,r11,r9
   48514:	62a0b03a 	or	r16,r12,r10
   48518:	99400117 	ldw	r5,4(r19)
   4851c:	a8800117 	ldw	r2,4(r21)
   48520:	28806e26 	beq	r5,r2,486dc <_fpadd_parts+0x2ac>
   48524:	28006626 	beq	r5,zero,486c0 <_fpadd_parts+0x290>
   48528:	7c45c83a 	sub	r2,r15,r17
   4852c:	7889803a 	cmpltu	r4,r15,r2
   48530:	8487c83a 	sub	r3,r16,r18
   48534:	1909c83a 	sub	r4,r3,r4
   48538:	100d883a 	mov	r6,r2
   4853c:	200f883a 	mov	r7,r4
   48540:	38007716 	blt	r7,zero,48720 <_fpadd_parts+0x2f0>
   48544:	a5c00215 	stw	r23,8(r20)
   48548:	a1c00415 	stw	r7,16(r20)
   4854c:	a0000115 	stw	zero,4(r20)
   48550:	a1800315 	stw	r6,12(r20)
   48554:	a2000317 	ldw	r8,12(r20)
   48558:	a2400417 	ldw	r9,16(r20)
   4855c:	00bfffc4 	movi	r2,-1
   48560:	408b883a 	add	r5,r8,r2
   48564:	2a09803a 	cmpltu	r4,r5,r8
   48568:	488d883a 	add	r6,r9,r2
   4856c:	01c40034 	movhi	r7,4096
   48570:	39ffffc4 	addi	r7,r7,-1
   48574:	218d883a 	add	r6,r4,r6
   48578:	39801736 	bltu	r7,r6,485d8 <_fpadd_parts+0x1a8>
   4857c:	31c06526 	beq	r6,r7,48714 <_fpadd_parts+0x2e4>
   48580:	a3000217 	ldw	r12,8(r20)
   48584:	4209883a 	add	r4,r8,r8
   48588:	00bfffc4 	movi	r2,-1
   4858c:	220f803a 	cmpltu	r7,r4,r8
   48590:	4a4b883a 	add	r5,r9,r9
   48594:	394f883a 	add	r7,r7,r5
   48598:	2095883a 	add	r10,r4,r2
   4859c:	3897883a 	add	r11,r7,r2
   485a0:	510d803a 	cmpltu	r6,r10,r4
   485a4:	6099883a 	add	r12,r12,r2
   485a8:	32d7883a 	add	r11,r6,r11
   485ac:	00840034 	movhi	r2,4096
   485b0:	10bfffc4 	addi	r2,r2,-1
   485b4:	2011883a 	mov	r8,r4
   485b8:	3813883a 	mov	r9,r7
   485bc:	a1000315 	stw	r4,12(r20)
   485c0:	a1c00415 	stw	r7,16(r20)
   485c4:	a3000215 	stw	r12,8(r20)
   485c8:	12c00336 	bltu	r2,r11,485d8 <_fpadd_parts+0x1a8>
   485cc:	58bfed1e 	bne	r11,r2,48584 <_fpadd_parts+0x154>
   485d0:	00bfff84 	movi	r2,-2
   485d4:	12bfeb2e 	bgeu	r2,r10,48584 <_fpadd_parts+0x154>
   485d8:	a2800417 	ldw	r10,16(r20)
   485dc:	008000c4 	movi	r2,3
   485e0:	00c80034 	movhi	r3,8192
   485e4:	18ffffc4 	addi	r3,r3,-1
   485e8:	a2400317 	ldw	r9,12(r20)
   485ec:	a0800015 	stw	r2,0(r20)
   485f0:	1a802336 	bltu	r3,r10,48680 <_fpadd_parts+0x250>
   485f4:	a027883a 	mov	r19,r20
   485f8:	9805883a 	mov	r2,r19
   485fc:	ddc00717 	ldw	r23,28(sp)
   48600:	dd800617 	ldw	r22,24(sp)
   48604:	dd400517 	ldw	r21,20(sp)
   48608:	dd000417 	ldw	r20,16(sp)
   4860c:	dcc00317 	ldw	r19,12(sp)
   48610:	dc800217 	ldw	r18,8(sp)
   48614:	dc400117 	ldw	r17,4(sp)
   48618:	dc000017 	ldw	r16,0(sp)
   4861c:	dec00804 	addi	sp,sp,32
   48620:	f800283a 	ret
   48624:	20fff41e 	bne	r4,r3,485f8 <_fpadd_parts+0x1c8>
   48628:	31000015 	stw	r4,0(r6)
   4862c:	98800117 	ldw	r2,4(r19)
   48630:	30800115 	stw	r2,4(r6)
   48634:	98c00217 	ldw	r3,8(r19)
   48638:	30c00215 	stw	r3,8(r6)
   4863c:	98800317 	ldw	r2,12(r19)
   48640:	30800315 	stw	r2,12(r6)
   48644:	98c00417 	ldw	r3,16(r19)
   48648:	30c00415 	stw	r3,16(r6)
   4864c:	98800117 	ldw	r2,4(r19)
   48650:	28c00117 	ldw	r3,4(r5)
   48654:	3027883a 	mov	r19,r6
   48658:	10c4703a 	and	r2,r2,r3
   4865c:	30800115 	stw	r2,4(r6)
   48660:	003fe506 	br	485f8 <_fpadd_parts+0x1c8>
   48664:	1dc02616 	blt	r3,r23,48700 <_fpadd_parts+0x2d0>
   48668:	0023883a 	mov	r17,zero
   4866c:	182f883a 	mov	r23,r3
   48670:	0025883a 	mov	r18,zero
   48674:	003fa806 	br	48518 <_fpadd_parts+0xe8>
   48678:	a827883a 	mov	r19,r21
   4867c:	003fde06 	br	485f8 <_fpadd_parts+0x1c8>
   48680:	01800044 	movi	r6,1
   48684:	500497fa 	slli	r2,r10,31
   48688:	4808d07a 	srli	r4,r9,1
   4868c:	518ad83a 	srl	r5,r10,r6
   48690:	a2000217 	ldw	r8,8(r20)
   48694:	1108b03a 	or	r4,r2,r4
   48698:	0007883a 	mov	r3,zero
   4869c:	4984703a 	and	r2,r9,r6
   486a0:	208cb03a 	or	r6,r4,r2
   486a4:	28ceb03a 	or	r7,r5,r3
   486a8:	42000044 	addi	r8,r8,1
   486ac:	a027883a 	mov	r19,r20
   486b0:	a1c00415 	stw	r7,16(r20)
   486b4:	a2000215 	stw	r8,8(r20)
   486b8:	a1800315 	stw	r6,12(r20)
   486bc:	003fce06 	br	485f8 <_fpadd_parts+0x1c8>
   486c0:	8bc5c83a 	sub	r2,r17,r15
   486c4:	8889803a 	cmpltu	r4,r17,r2
   486c8:	9407c83a 	sub	r3,r18,r16
   486cc:	1909c83a 	sub	r4,r3,r4
   486d0:	100d883a 	mov	r6,r2
   486d4:	200f883a 	mov	r7,r4
   486d8:	003f9906 	br	48540 <_fpadd_parts+0x110>
   486dc:	7c45883a 	add	r2,r15,r17
   486e0:	13c9803a 	cmpltu	r4,r2,r15
   486e4:	8487883a 	add	r3,r16,r18
   486e8:	20c9883a 	add	r4,r4,r3
   486ec:	a1400115 	stw	r5,4(r20)
   486f0:	a5c00215 	stw	r23,8(r20)
   486f4:	a0800315 	stw	r2,12(r20)
   486f8:	a1000415 	stw	r4,16(r20)
   486fc:	003fb606 	br	485d8 <_fpadd_parts+0x1a8>
   48700:	001f883a 	mov	r15,zero
   48704:	0021883a 	mov	r16,zero
   48708:	003f8306 	br	48518 <_fpadd_parts+0xe8>
   4870c:	018dc83a 	sub	r6,zero,r6
   48710:	003f6706 	br	484b0 <_fpadd_parts+0x80>
   48714:	00bfff84 	movi	r2,-2
   48718:	117faf36 	bltu	r2,r5,485d8 <_fpadd_parts+0x1a8>
   4871c:	003f9806 	br	48580 <_fpadd_parts+0x150>
   48720:	0005883a 	mov	r2,zero
   48724:	1189c83a 	sub	r4,r2,r6
   48728:	1105803a 	cmpltu	r2,r2,r4
   4872c:	01cbc83a 	sub	r5,zero,r7
   48730:	2885c83a 	sub	r2,r5,r2
   48734:	01800044 	movi	r6,1
   48738:	a1800115 	stw	r6,4(r20)
   4873c:	a5c00215 	stw	r23,8(r20)
   48740:	a1000315 	stw	r4,12(r20)
   48744:	a0800415 	stw	r2,16(r20)
   48748:	003f8206 	br	48554 <_fpadd_parts+0x124>
   4874c:	203f7226 	beq	r4,zero,48518 <_fpadd_parts+0xe8>
   48750:	35bff804 	addi	r22,r6,-32
   48754:	b9af883a 	add	r23,r23,r6
   48758:	b0003116 	blt	r22,zero,48820 <_fpadd_parts+0x3f0>
   4875c:	959ad83a 	srl	r13,r18,r22
   48760:	001d883a 	mov	r14,zero
   48764:	000f883a 	mov	r7,zero
   48768:	01000044 	movi	r4,1
   4876c:	0011883a 	mov	r8,zero
   48770:	b0002516 	blt	r22,zero,48808 <_fpadd_parts+0x3d8>
   48774:	2594983a 	sll	r10,r4,r22
   48778:	0013883a 	mov	r9,zero
   4877c:	00bfffc4 	movi	r2,-1
   48780:	4889883a 	add	r4,r9,r2
   48784:	508b883a 	add	r5,r10,r2
   48788:	224d803a 	cmpltu	r6,r4,r9
   4878c:	314b883a 	add	r5,r6,r5
   48790:	8904703a 	and	r2,r17,r4
   48794:	9146703a 	and	r3,r18,r5
   48798:	10c4b03a 	or	r2,r2,r3
   4879c:	10000226 	beq	r2,zero,487a8 <_fpadd_parts+0x378>
   487a0:	01c00044 	movi	r7,1
   487a4:	0011883a 	mov	r8,zero
   487a8:	69e2b03a 	or	r17,r13,r7
   487ac:	7224b03a 	or	r18,r14,r8
   487b0:	003f5906 	br	48518 <_fpadd_parts+0xe8>
   487b4:	8407883a 	add	r3,r16,r16
   487b8:	008007c4 	movi	r2,31
   487bc:	1185c83a 	sub	r2,r2,r6
   487c0:	1886983a 	sll	r3,r3,r2
   487c4:	7996d83a 	srl	r11,r15,r6
   487c8:	8198d83a 	srl	r12,r16,r6
   487cc:	1ad6b03a 	or	r11,r3,r11
   487d0:	003f3e06 	br	484cc <_fpadd_parts+0x9c>
   487d4:	2006d07a 	srli	r3,r4,1
   487d8:	008007c4 	movi	r2,31
   487dc:	1185c83a 	sub	r2,r2,r6
   487e0:	1890d83a 	srl	r8,r3,r2
   487e4:	218e983a 	sll	r7,r4,r6
   487e8:	003f3e06 	br	484e4 <_fpadd_parts+0xb4>
   487ec:	113f821e 	bne	r2,r4,485f8 <_fpadd_parts+0x1c8>
   487f0:	28c00117 	ldw	r3,4(r5)
   487f4:	98800117 	ldw	r2,4(r19)
   487f8:	10ff7f26 	beq	r2,r3,485f8 <_fpadd_parts+0x1c8>
   487fc:	04c001b4 	movhi	r19,6
   48800:	9cc09b04 	addi	r19,r19,620
   48804:	003f7c06 	br	485f8 <_fpadd_parts+0x1c8>
   48808:	2006d07a 	srli	r3,r4,1
   4880c:	008007c4 	movi	r2,31
   48810:	1185c83a 	sub	r2,r2,r6
   48814:	1894d83a 	srl	r10,r3,r2
   48818:	2192983a 	sll	r9,r4,r6
   4881c:	003fd706 	br	4877c <_fpadd_parts+0x34c>
   48820:	9487883a 	add	r3,r18,r18
   48824:	008007c4 	movi	r2,31
   48828:	1185c83a 	sub	r2,r2,r6
   4882c:	1886983a 	sll	r3,r3,r2
   48830:	899ad83a 	srl	r13,r17,r6
   48834:	919cd83a 	srl	r14,r18,r6
   48838:	1b5ab03a 	or	r13,r3,r13
   4883c:	003fc906 	br	48764 <_fpadd_parts+0x334>

00048840 <__subdf3>:
   48840:	deffea04 	addi	sp,sp,-88
   48844:	dcc01415 	stw	r19,80(sp)
   48848:	dcc00404 	addi	r19,sp,16
   4884c:	2011883a 	mov	r8,r4
   48850:	2813883a 	mov	r9,r5
   48854:	dc401315 	stw	r17,76(sp)
   48858:	d809883a 	mov	r4,sp
   4885c:	980b883a 	mov	r5,r19
   48860:	dc400904 	addi	r17,sp,36
   48864:	dfc01515 	stw	ra,84(sp)
   48868:	da400115 	stw	r9,4(sp)
   4886c:	d9c00315 	stw	r7,12(sp)
   48870:	da000015 	stw	r8,0(sp)
   48874:	d9800215 	stw	r6,8(sp)
   48878:	0049ad40 	call	49ad4 <__unpack_d>
   4887c:	d9000204 	addi	r4,sp,8
   48880:	880b883a 	mov	r5,r17
   48884:	0049ad40 	call	49ad4 <__unpack_d>
   48888:	d8800a17 	ldw	r2,40(sp)
   4888c:	880b883a 	mov	r5,r17
   48890:	9809883a 	mov	r4,r19
   48894:	d9800e04 	addi	r6,sp,56
   48898:	1080005c 	xori	r2,r2,1
   4889c:	d8800a15 	stw	r2,40(sp)
   488a0:	00484300 	call	48430 <_fpadd_parts>
   488a4:	1009883a 	mov	r4,r2
   488a8:	00497c00 	call	497c0 <__pack_d>
   488ac:	dfc01517 	ldw	ra,84(sp)
   488b0:	dcc01417 	ldw	r19,80(sp)
   488b4:	dc401317 	ldw	r17,76(sp)
   488b8:	dec01604 	addi	sp,sp,88
   488bc:	f800283a 	ret

000488c0 <__adddf3>:
   488c0:	deffea04 	addi	sp,sp,-88
   488c4:	dcc01415 	stw	r19,80(sp)
   488c8:	dcc00404 	addi	r19,sp,16
   488cc:	2011883a 	mov	r8,r4
   488d0:	2813883a 	mov	r9,r5
   488d4:	dc401315 	stw	r17,76(sp)
   488d8:	d809883a 	mov	r4,sp
   488dc:	980b883a 	mov	r5,r19
   488e0:	dc400904 	addi	r17,sp,36
   488e4:	dfc01515 	stw	ra,84(sp)
   488e8:	da400115 	stw	r9,4(sp)
   488ec:	d9c00315 	stw	r7,12(sp)
   488f0:	da000015 	stw	r8,0(sp)
   488f4:	d9800215 	stw	r6,8(sp)
   488f8:	0049ad40 	call	49ad4 <__unpack_d>
   488fc:	d9000204 	addi	r4,sp,8
   48900:	880b883a 	mov	r5,r17
   48904:	0049ad40 	call	49ad4 <__unpack_d>
   48908:	d9800e04 	addi	r6,sp,56
   4890c:	9809883a 	mov	r4,r19
   48910:	880b883a 	mov	r5,r17
   48914:	00484300 	call	48430 <_fpadd_parts>
   48918:	1009883a 	mov	r4,r2
   4891c:	00497c00 	call	497c0 <__pack_d>
   48920:	dfc01517 	ldw	ra,84(sp)
   48924:	dcc01417 	ldw	r19,80(sp)
   48928:	dc401317 	ldw	r17,76(sp)
   4892c:	dec01604 	addi	sp,sp,88
   48930:	f800283a 	ret

00048934 <__muldf3>:
   48934:	deffe004 	addi	sp,sp,-128
   48938:	dc401815 	stw	r17,96(sp)
   4893c:	dc400404 	addi	r17,sp,16
   48940:	2011883a 	mov	r8,r4
   48944:	2813883a 	mov	r9,r5
   48948:	dc001715 	stw	r16,92(sp)
   4894c:	d809883a 	mov	r4,sp
   48950:	880b883a 	mov	r5,r17
   48954:	dc000904 	addi	r16,sp,36
   48958:	dfc01f15 	stw	ra,124(sp)
   4895c:	da400115 	stw	r9,4(sp)
   48960:	d9c00315 	stw	r7,12(sp)
   48964:	da000015 	stw	r8,0(sp)
   48968:	d9800215 	stw	r6,8(sp)
   4896c:	ddc01e15 	stw	r23,120(sp)
   48970:	dd801d15 	stw	r22,116(sp)
   48974:	dd401c15 	stw	r21,112(sp)
   48978:	dd001b15 	stw	r20,108(sp)
   4897c:	dcc01a15 	stw	r19,104(sp)
   48980:	dc801915 	stw	r18,100(sp)
   48984:	0049ad40 	call	49ad4 <__unpack_d>
   48988:	d9000204 	addi	r4,sp,8
   4898c:	800b883a 	mov	r5,r16
   48990:	0049ad40 	call	49ad4 <__unpack_d>
   48994:	d9000417 	ldw	r4,16(sp)
   48998:	00800044 	movi	r2,1
   4899c:	1100102e 	bgeu	r2,r4,489e0 <__muldf3+0xac>
   489a0:	d8c00917 	ldw	r3,36(sp)
   489a4:	10c0062e 	bgeu	r2,r3,489c0 <__muldf3+0x8c>
   489a8:	00800104 	movi	r2,4
   489ac:	20800a26 	beq	r4,r2,489d8 <__muldf3+0xa4>
   489b0:	1880cc26 	beq	r3,r2,48ce4 <__muldf3+0x3b0>
   489b4:	00800084 	movi	r2,2
   489b8:	20800926 	beq	r4,r2,489e0 <__muldf3+0xac>
   489bc:	1880191e 	bne	r3,r2,48a24 <__muldf3+0xf0>
   489c0:	d8c00a17 	ldw	r3,40(sp)
   489c4:	d8800517 	ldw	r2,20(sp)
   489c8:	8009883a 	mov	r4,r16
   489cc:	10c4c03a 	cmpne	r2,r2,r3
   489d0:	d8800a15 	stw	r2,40(sp)
   489d4:	00000706 	br	489f4 <__muldf3+0xc0>
   489d8:	00800084 	movi	r2,2
   489dc:	1880c326 	beq	r3,r2,48cec <__muldf3+0x3b8>
   489e0:	d8800517 	ldw	r2,20(sp)
   489e4:	d8c00a17 	ldw	r3,40(sp)
   489e8:	8809883a 	mov	r4,r17
   489ec:	10c4c03a 	cmpne	r2,r2,r3
   489f0:	d8800515 	stw	r2,20(sp)
   489f4:	00497c00 	call	497c0 <__pack_d>
   489f8:	dfc01f17 	ldw	ra,124(sp)
   489fc:	ddc01e17 	ldw	r23,120(sp)
   48a00:	dd801d17 	ldw	r22,116(sp)
   48a04:	dd401c17 	ldw	r21,112(sp)
   48a08:	dd001b17 	ldw	r20,108(sp)
   48a0c:	dcc01a17 	ldw	r19,104(sp)
   48a10:	dc801917 	ldw	r18,100(sp)
   48a14:	dc401817 	ldw	r17,96(sp)
   48a18:	dc001717 	ldw	r16,92(sp)
   48a1c:	dec02004 	addi	sp,sp,128
   48a20:	f800283a 	ret
   48a24:	dd800717 	ldw	r22,28(sp)
   48a28:	dc800c17 	ldw	r18,48(sp)
   48a2c:	002b883a 	mov	r21,zero
   48a30:	0023883a 	mov	r17,zero
   48a34:	a80b883a 	mov	r5,r21
   48a38:	b00d883a 	mov	r6,r22
   48a3c:	880f883a 	mov	r7,r17
   48a40:	ddc00817 	ldw	r23,32(sp)
   48a44:	dcc00d17 	ldw	r19,52(sp)
   48a48:	9009883a 	mov	r4,r18
   48a4c:	00496a80 	call	496a8 <__muldi3>
   48a50:	001b883a 	mov	r13,zero
   48a54:	680f883a 	mov	r7,r13
   48a58:	b009883a 	mov	r4,r22
   48a5c:	000b883a 	mov	r5,zero
   48a60:	980d883a 	mov	r6,r19
   48a64:	b82d883a 	mov	r22,r23
   48a68:	002f883a 	mov	r23,zero
   48a6c:	db401615 	stw	r13,88(sp)
   48a70:	d8801315 	stw	r2,76(sp)
   48a74:	d8c01415 	stw	r3,80(sp)
   48a78:	dcc01515 	stw	r19,84(sp)
   48a7c:	00496a80 	call	496a8 <__muldi3>
   48a80:	b00d883a 	mov	r6,r22
   48a84:	000b883a 	mov	r5,zero
   48a88:	9009883a 	mov	r4,r18
   48a8c:	b80f883a 	mov	r7,r23
   48a90:	1021883a 	mov	r16,r2
   48a94:	1823883a 	mov	r17,r3
   48a98:	00496a80 	call	496a8 <__muldi3>
   48a9c:	8085883a 	add	r2,r16,r2
   48aa0:	140d803a 	cmpltu	r6,r2,r16
   48aa4:	88c7883a 	add	r3,r17,r3
   48aa8:	30cd883a 	add	r6,r6,r3
   48aac:	1029883a 	mov	r20,r2
   48ab0:	302b883a 	mov	r21,r6
   48ab4:	da801317 	ldw	r10,76(sp)
   48ab8:	dac01417 	ldw	r11,80(sp)
   48abc:	db001517 	ldw	r12,84(sp)
   48ac0:	db401617 	ldw	r13,88(sp)
   48ac4:	3440612e 	bgeu	r6,r17,48c4c <__muldf3+0x318>
   48ac8:	0009883a 	mov	r4,zero
   48acc:	5105883a 	add	r2,r10,r4
   48ad0:	128d803a 	cmpltu	r6,r2,r10
   48ad4:	5d07883a 	add	r3,r11,r20
   48ad8:	30cd883a 	add	r6,r6,r3
   48adc:	0021883a 	mov	r16,zero
   48ae0:	04400044 	movi	r17,1
   48ae4:	1025883a 	mov	r18,r2
   48ae8:	3027883a 	mov	r19,r6
   48aec:	32c06236 	bltu	r6,r11,48c78 <__muldf3+0x344>
   48af0:	59807a26 	beq	r11,r6,48cdc <__muldf3+0x3a8>
   48af4:	680b883a 	mov	r5,r13
   48af8:	b80f883a 	mov	r7,r23
   48afc:	6009883a 	mov	r4,r12
   48b00:	b00d883a 	mov	r6,r22
   48b04:	00496a80 	call	496a8 <__muldi3>
   48b08:	1009883a 	mov	r4,r2
   48b0c:	000f883a 	mov	r7,zero
   48b10:	1545883a 	add	r2,r2,r21
   48b14:	1111803a 	cmpltu	r8,r2,r4
   48b18:	19c7883a 	add	r3,r3,r7
   48b1c:	40c7883a 	add	r3,r8,r3
   48b20:	88cb883a 	add	r5,r17,r3
   48b24:	d8c00617 	ldw	r3,24(sp)
   48b28:	8089883a 	add	r4,r16,r2
   48b2c:	d8800b17 	ldw	r2,44(sp)
   48b30:	18c00104 	addi	r3,r3,4
   48b34:	240d803a 	cmpltu	r6,r4,r16
   48b38:	10c7883a 	add	r3,r2,r3
   48b3c:	2013883a 	mov	r9,r4
   48b40:	d8800a17 	ldw	r2,40(sp)
   48b44:	d9000517 	ldw	r4,20(sp)
   48b48:	314d883a 	add	r6,r6,r5
   48b4c:	3015883a 	mov	r10,r6
   48b50:	2088c03a 	cmpne	r4,r4,r2
   48b54:	00880034 	movhi	r2,8192
   48b58:	10bfffc4 	addi	r2,r2,-1
   48b5c:	d9000f15 	stw	r4,60(sp)
   48b60:	d8c01015 	stw	r3,64(sp)
   48b64:	1180162e 	bgeu	r2,r6,48bc0 <__muldf3+0x28c>
   48b68:	1811883a 	mov	r8,r3
   48b6c:	101f883a 	mov	r15,r2
   48b70:	980497fa 	slli	r2,r19,31
   48b74:	9016d07a 	srli	r11,r18,1
   48b78:	500697fa 	slli	r3,r10,31
   48b7c:	480cd07a 	srli	r6,r9,1
   48b80:	500ed07a 	srli	r7,r10,1
   48b84:	12d6b03a 	or	r11,r2,r11
   48b88:	00800044 	movi	r2,1
   48b8c:	198cb03a 	or	r6,r3,r6
   48b90:	4888703a 	and	r4,r9,r2
   48b94:	9818d07a 	srli	r12,r19,1
   48b98:	001b883a 	mov	r13,zero
   48b9c:	03a00034 	movhi	r14,32768
   48ba0:	3013883a 	mov	r9,r6
   48ba4:	3815883a 	mov	r10,r7
   48ba8:	4091883a 	add	r8,r8,r2
   48bac:	20000226 	beq	r4,zero,48bb8 <__muldf3+0x284>
   48bb0:	5b64b03a 	or	r18,r11,r13
   48bb4:	63a6b03a 	or	r19,r12,r14
   48bb8:	7abfed36 	bltu	r15,r10,48b70 <__muldf3+0x23c>
   48bbc:	da001015 	stw	r8,64(sp)
   48bc0:	00840034 	movhi	r2,4096
   48bc4:	10bfffc4 	addi	r2,r2,-1
   48bc8:	12801436 	bltu	r2,r10,48c1c <__muldf3+0x2e8>
   48bcc:	da001017 	ldw	r8,64(sp)
   48bd0:	101f883a 	mov	r15,r2
   48bd4:	4a45883a 	add	r2,r9,r9
   48bd8:	124d803a 	cmpltu	r6,r2,r9
   48bdc:	5287883a 	add	r3,r10,r10
   48be0:	9497883a 	add	r11,r18,r18
   48be4:	5c8f803a 	cmpltu	r7,r11,r18
   48be8:	9cd9883a 	add	r12,r19,r19
   48bec:	01000044 	movi	r4,1
   48bf0:	30cd883a 	add	r6,r6,r3
   48bf4:	3b0f883a 	add	r7,r7,r12
   48bf8:	423fffc4 	addi	r8,r8,-1
   48bfc:	1013883a 	mov	r9,r2
   48c00:	3015883a 	mov	r10,r6
   48c04:	111ab03a 	or	r13,r2,r4
   48c08:	98003016 	blt	r19,zero,48ccc <__muldf3+0x398>
   48c0c:	5825883a 	mov	r18,r11
   48c10:	3827883a 	mov	r19,r7
   48c14:	7abfef2e 	bgeu	r15,r10,48bd4 <__muldf3+0x2a0>
   48c18:	da001015 	stw	r8,64(sp)
   48c1c:	00803fc4 	movi	r2,255
   48c20:	488e703a 	and	r7,r9,r2
   48c24:	00802004 	movi	r2,128
   48c28:	0007883a 	mov	r3,zero
   48c2c:	0011883a 	mov	r8,zero
   48c30:	38801826 	beq	r7,r2,48c94 <__muldf3+0x360>
   48c34:	008000c4 	movi	r2,3
   48c38:	d9000e04 	addi	r4,sp,56
   48c3c:	da801215 	stw	r10,72(sp)
   48c40:	d8800e15 	stw	r2,56(sp)
   48c44:	da401115 	stw	r9,68(sp)
   48c48:	003f6a06 	br	489f4 <__muldf3+0xc0>
   48c4c:	89802126 	beq	r17,r6,48cd4 <__muldf3+0x3a0>
   48c50:	0009883a 	mov	r4,zero
   48c54:	5105883a 	add	r2,r10,r4
   48c58:	128d803a 	cmpltu	r6,r2,r10
   48c5c:	5d07883a 	add	r3,r11,r20
   48c60:	30cd883a 	add	r6,r6,r3
   48c64:	0021883a 	mov	r16,zero
   48c68:	0023883a 	mov	r17,zero
   48c6c:	1025883a 	mov	r18,r2
   48c70:	3027883a 	mov	r19,r6
   48c74:	32ff9e2e 	bgeu	r6,r11,48af0 <__muldf3+0x1bc>
   48c78:	00800044 	movi	r2,1
   48c7c:	8089883a 	add	r4,r16,r2
   48c80:	240d803a 	cmpltu	r6,r4,r16
   48c84:	344d883a 	add	r6,r6,r17
   48c88:	2021883a 	mov	r16,r4
   48c8c:	3023883a 	mov	r17,r6
   48c90:	003f9806 	br	48af4 <__muldf3+0x1c0>
   48c94:	403fe71e 	bne	r8,zero,48c34 <__muldf3+0x300>
   48c98:	01004004 	movi	r4,256
   48c9c:	4904703a 	and	r2,r9,r4
   48ca0:	10c4b03a 	or	r2,r2,r3
   48ca4:	103fe31e 	bne	r2,zero,48c34 <__muldf3+0x300>
   48ca8:	94c4b03a 	or	r2,r18,r19
   48cac:	103fe126 	beq	r2,zero,48c34 <__muldf3+0x300>
   48cb0:	49c5883a 	add	r2,r9,r7
   48cb4:	1251803a 	cmpltu	r8,r2,r9
   48cb8:	4291883a 	add	r8,r8,r10
   48cbc:	013fc004 	movi	r4,-256
   48cc0:	1112703a 	and	r9,r2,r4
   48cc4:	4015883a 	mov	r10,r8
   48cc8:	003fda06 	br	48c34 <__muldf3+0x300>
   48ccc:	6813883a 	mov	r9,r13
   48cd0:	003fce06 	br	48c0c <__muldf3+0x2d8>
   48cd4:	143f7c36 	bltu	r2,r16,48ac8 <__muldf3+0x194>
   48cd8:	003fdd06 	br	48c50 <__muldf3+0x31c>
   48cdc:	12bf852e 	bgeu	r2,r10,48af4 <__muldf3+0x1c0>
   48ce0:	003fe506 	br	48c78 <__muldf3+0x344>
   48ce4:	00800084 	movi	r2,2
   48ce8:	20bf351e 	bne	r4,r2,489c0 <__muldf3+0x8c>
   48cec:	010001b4 	movhi	r4,6
   48cf0:	21009b04 	addi	r4,r4,620
   48cf4:	003f3f06 	br	489f4 <__muldf3+0xc0>

00048cf8 <__divdf3>:
   48cf8:	deffed04 	addi	sp,sp,-76
   48cfc:	dcc01115 	stw	r19,68(sp)
   48d00:	dcc00404 	addi	r19,sp,16
   48d04:	2011883a 	mov	r8,r4
   48d08:	2813883a 	mov	r9,r5
   48d0c:	dc000e15 	stw	r16,56(sp)
   48d10:	d809883a 	mov	r4,sp
   48d14:	980b883a 	mov	r5,r19
   48d18:	dc000904 	addi	r16,sp,36
   48d1c:	dfc01215 	stw	ra,72(sp)
   48d20:	da400115 	stw	r9,4(sp)
   48d24:	d9c00315 	stw	r7,12(sp)
   48d28:	da000015 	stw	r8,0(sp)
   48d2c:	d9800215 	stw	r6,8(sp)
   48d30:	dc801015 	stw	r18,64(sp)
   48d34:	dc400f15 	stw	r17,60(sp)
   48d38:	0049ad40 	call	49ad4 <__unpack_d>
   48d3c:	d9000204 	addi	r4,sp,8
   48d40:	800b883a 	mov	r5,r16
   48d44:	0049ad40 	call	49ad4 <__unpack_d>
   48d48:	d9000417 	ldw	r4,16(sp)
   48d4c:	00800044 	movi	r2,1
   48d50:	11000b2e 	bgeu	r2,r4,48d80 <__divdf3+0x88>
   48d54:	d9400917 	ldw	r5,36(sp)
   48d58:	1140762e 	bgeu	r2,r5,48f34 <__divdf3+0x23c>
   48d5c:	d8800517 	ldw	r2,20(sp)
   48d60:	d8c00a17 	ldw	r3,40(sp)
   48d64:	01800104 	movi	r6,4
   48d68:	10c4f03a 	xor	r2,r2,r3
   48d6c:	d8800515 	stw	r2,20(sp)
   48d70:	21800226 	beq	r4,r6,48d7c <__divdf3+0x84>
   48d74:	00800084 	movi	r2,2
   48d78:	2080141e 	bne	r4,r2,48dcc <__divdf3+0xd4>
   48d7c:	29000926 	beq	r5,r4,48da4 <__divdf3+0xac>
   48d80:	9809883a 	mov	r4,r19
   48d84:	00497c00 	call	497c0 <__pack_d>
   48d88:	dfc01217 	ldw	ra,72(sp)
   48d8c:	dcc01117 	ldw	r19,68(sp)
   48d90:	dc801017 	ldw	r18,64(sp)
   48d94:	dc400f17 	ldw	r17,60(sp)
   48d98:	dc000e17 	ldw	r16,56(sp)
   48d9c:	dec01304 	addi	sp,sp,76
   48da0:	f800283a 	ret
   48da4:	010001b4 	movhi	r4,6
   48da8:	21009b04 	addi	r4,r4,620
   48dac:	00497c00 	call	497c0 <__pack_d>
   48db0:	dfc01217 	ldw	ra,72(sp)
   48db4:	dcc01117 	ldw	r19,68(sp)
   48db8:	dc801017 	ldw	r18,64(sp)
   48dbc:	dc400f17 	ldw	r17,60(sp)
   48dc0:	dc000e17 	ldw	r16,56(sp)
   48dc4:	dec01304 	addi	sp,sp,76
   48dc8:	f800283a 	ret
   48dcc:	29805b26 	beq	r5,r6,48f3c <__divdf3+0x244>
   48dd0:	28802d26 	beq	r5,r2,48e88 <__divdf3+0x190>
   48dd4:	d8c00617 	ldw	r3,24(sp)
   48dd8:	d8800b17 	ldw	r2,44(sp)
   48ddc:	d9c00817 	ldw	r7,32(sp)
   48de0:	dc400d17 	ldw	r17,52(sp)
   48de4:	188bc83a 	sub	r5,r3,r2
   48de8:	d9800717 	ldw	r6,28(sp)
   48dec:	dc000c17 	ldw	r16,48(sp)
   48df0:	d9400615 	stw	r5,24(sp)
   48df4:	3c403836 	bltu	r7,r17,48ed8 <__divdf3+0x1e0>
   48df8:	89c03626 	beq	r17,r7,48ed4 <__divdf3+0x1dc>
   48dfc:	0015883a 	mov	r10,zero
   48e00:	001d883a 	mov	r14,zero
   48e04:	02c40034 	movhi	r11,4096
   48e08:	001f883a 	mov	r15,zero
   48e0c:	003f883a 	mov	ra,zero
   48e10:	04800f44 	movi	r18,61
   48e14:	00000f06 	br	48e54 <__divdf3+0x15c>
   48e18:	601d883a 	mov	r14,r12
   48e1c:	681f883a 	mov	r15,r13
   48e20:	400d883a 	mov	r6,r8
   48e24:	100f883a 	mov	r7,r2
   48e28:	3191883a 	add	r8,r6,r6
   48e2c:	5808d07a 	srli	r4,r11,1
   48e30:	4185803a 	cmpltu	r2,r8,r6
   48e34:	39d3883a 	add	r9,r7,r7
   48e38:	28c6b03a 	or	r3,r5,r3
   48e3c:	1245883a 	add	r2,r2,r9
   48e40:	1815883a 	mov	r10,r3
   48e44:	2017883a 	mov	r11,r4
   48e48:	400d883a 	mov	r6,r8
   48e4c:	100f883a 	mov	r7,r2
   48e50:	fc801726 	beq	ra,r18,48eb0 <__divdf3+0x1b8>
   48e54:	580a97fa 	slli	r5,r11,31
   48e58:	5006d07a 	srli	r3,r10,1
   48e5c:	ffc00044 	addi	ra,ra,1
   48e60:	3c7ff136 	bltu	r7,r17,48e28 <__divdf3+0x130>
   48e64:	3411c83a 	sub	r8,r6,r16
   48e68:	3205803a 	cmpltu	r2,r6,r8
   48e6c:	3c53c83a 	sub	r9,r7,r17
   48e70:	7298b03a 	or	r12,r14,r10
   48e74:	7adab03a 	or	r13,r15,r11
   48e78:	4885c83a 	sub	r2,r9,r2
   48e7c:	89ffe61e 	bne	r17,r7,48e18 <__divdf3+0x120>
   48e80:	343fe936 	bltu	r6,r16,48e28 <__divdf3+0x130>
   48e84:	003fe406 	br	48e18 <__divdf3+0x120>
   48e88:	9809883a 	mov	r4,r19
   48e8c:	d9800415 	stw	r6,16(sp)
   48e90:	00497c00 	call	497c0 <__pack_d>
   48e94:	dfc01217 	ldw	ra,72(sp)
   48e98:	dcc01117 	ldw	r19,68(sp)
   48e9c:	dc801017 	ldw	r18,64(sp)
   48ea0:	dc400f17 	ldw	r17,60(sp)
   48ea4:	dc000e17 	ldw	r16,56(sp)
   48ea8:	dec01304 	addi	sp,sp,76
   48eac:	f800283a 	ret
   48eb0:	00803fc4 	movi	r2,255
   48eb4:	7090703a 	and	r8,r14,r2
   48eb8:	00802004 	movi	r2,128
   48ebc:	0007883a 	mov	r3,zero
   48ec0:	0013883a 	mov	r9,zero
   48ec4:	40800d26 	beq	r8,r2,48efc <__divdf3+0x204>
   48ec8:	dbc00815 	stw	r15,32(sp)
   48ecc:	db800715 	stw	r14,28(sp)
   48ed0:	003fab06 	br	48d80 <__divdf3+0x88>
   48ed4:	343fc92e 	bgeu	r6,r16,48dfc <__divdf3+0x104>
   48ed8:	3185883a 	add	r2,r6,r6
   48edc:	1189803a 	cmpltu	r4,r2,r6
   48ee0:	39c7883a 	add	r3,r7,r7
   48ee4:	20c9883a 	add	r4,r4,r3
   48ee8:	297fffc4 	addi	r5,r5,-1
   48eec:	100d883a 	mov	r6,r2
   48ef0:	200f883a 	mov	r7,r4
   48ef4:	d9400615 	stw	r5,24(sp)
   48ef8:	003fc006 	br	48dfc <__divdf3+0x104>
   48efc:	483ff21e 	bne	r9,zero,48ec8 <__divdf3+0x1d0>
   48f00:	01004004 	movi	r4,256
   48f04:	7104703a 	and	r2,r14,r4
   48f08:	10c4b03a 	or	r2,r2,r3
   48f0c:	103fee1e 	bne	r2,zero,48ec8 <__divdf3+0x1d0>
   48f10:	31c4b03a 	or	r2,r6,r7
   48f14:	103fec26 	beq	r2,zero,48ec8 <__divdf3+0x1d0>
   48f18:	7205883a 	add	r2,r14,r8
   48f1c:	1391803a 	cmpltu	r8,r2,r14
   48f20:	43d1883a 	add	r8,r8,r15
   48f24:	013fc004 	movi	r4,-256
   48f28:	111c703a 	and	r14,r2,r4
   48f2c:	401f883a 	mov	r15,r8
   48f30:	003fe506 	br	48ec8 <__divdf3+0x1d0>
   48f34:	8009883a 	mov	r4,r16
   48f38:	003f9206 	br	48d84 <__divdf3+0x8c>
   48f3c:	9809883a 	mov	r4,r19
   48f40:	d8000715 	stw	zero,28(sp)
   48f44:	d8000815 	stw	zero,32(sp)
   48f48:	d8000615 	stw	zero,24(sp)
   48f4c:	003f8d06 	br	48d84 <__divdf3+0x8c>

00048f50 <__eqdf2>:
   48f50:	deffef04 	addi	sp,sp,-68
   48f54:	dc400f15 	stw	r17,60(sp)
   48f58:	dc400404 	addi	r17,sp,16
   48f5c:	2005883a 	mov	r2,r4
   48f60:	2807883a 	mov	r3,r5
   48f64:	dc000e15 	stw	r16,56(sp)
   48f68:	d809883a 	mov	r4,sp
   48f6c:	880b883a 	mov	r5,r17
   48f70:	dc000904 	addi	r16,sp,36
   48f74:	d8c00115 	stw	r3,4(sp)
   48f78:	d8800015 	stw	r2,0(sp)
   48f7c:	d9800215 	stw	r6,8(sp)
   48f80:	dfc01015 	stw	ra,64(sp)
   48f84:	d9c00315 	stw	r7,12(sp)
   48f88:	0049ad40 	call	49ad4 <__unpack_d>
   48f8c:	d9000204 	addi	r4,sp,8
   48f90:	800b883a 	mov	r5,r16
   48f94:	0049ad40 	call	49ad4 <__unpack_d>
   48f98:	d8800417 	ldw	r2,16(sp)
   48f9c:	00c00044 	movi	r3,1
   48fa0:	180d883a 	mov	r6,r3
   48fa4:	1880062e 	bgeu	r3,r2,48fc0 <__eqdf2+0x70>
   48fa8:	d8800917 	ldw	r2,36(sp)
   48fac:	8809883a 	mov	r4,r17
   48fb0:	800b883a 	mov	r5,r16
   48fb4:	1880022e 	bgeu	r3,r2,48fc0 <__eqdf2+0x70>
   48fb8:	0049c0c0 	call	49c0c <__fpcmp_parts_d>
   48fbc:	100d883a 	mov	r6,r2
   48fc0:	3005883a 	mov	r2,r6
   48fc4:	dfc01017 	ldw	ra,64(sp)
   48fc8:	dc400f17 	ldw	r17,60(sp)
   48fcc:	dc000e17 	ldw	r16,56(sp)
   48fd0:	dec01104 	addi	sp,sp,68
   48fd4:	f800283a 	ret

00048fd8 <__nedf2>:
   48fd8:	deffef04 	addi	sp,sp,-68
   48fdc:	dc400f15 	stw	r17,60(sp)
   48fe0:	dc400404 	addi	r17,sp,16
   48fe4:	2005883a 	mov	r2,r4
   48fe8:	2807883a 	mov	r3,r5
   48fec:	dc000e15 	stw	r16,56(sp)
   48ff0:	d809883a 	mov	r4,sp
   48ff4:	880b883a 	mov	r5,r17
   48ff8:	dc000904 	addi	r16,sp,36
   48ffc:	d8c00115 	stw	r3,4(sp)
   49000:	d8800015 	stw	r2,0(sp)
   49004:	d9800215 	stw	r6,8(sp)
   49008:	dfc01015 	stw	ra,64(sp)
   4900c:	d9c00315 	stw	r7,12(sp)
   49010:	0049ad40 	call	49ad4 <__unpack_d>
   49014:	d9000204 	addi	r4,sp,8
   49018:	800b883a 	mov	r5,r16
   4901c:	0049ad40 	call	49ad4 <__unpack_d>
   49020:	d8800417 	ldw	r2,16(sp)
   49024:	00c00044 	movi	r3,1
   49028:	180d883a 	mov	r6,r3
   4902c:	1880062e 	bgeu	r3,r2,49048 <__nedf2+0x70>
   49030:	d8800917 	ldw	r2,36(sp)
   49034:	8809883a 	mov	r4,r17
   49038:	800b883a 	mov	r5,r16
   4903c:	1880022e 	bgeu	r3,r2,49048 <__nedf2+0x70>
   49040:	0049c0c0 	call	49c0c <__fpcmp_parts_d>
   49044:	100d883a 	mov	r6,r2
   49048:	3005883a 	mov	r2,r6
   4904c:	dfc01017 	ldw	ra,64(sp)
   49050:	dc400f17 	ldw	r17,60(sp)
   49054:	dc000e17 	ldw	r16,56(sp)
   49058:	dec01104 	addi	sp,sp,68
   4905c:	f800283a 	ret

00049060 <__gtdf2>:
   49060:	deffef04 	addi	sp,sp,-68
   49064:	dc400f15 	stw	r17,60(sp)
   49068:	dc400404 	addi	r17,sp,16
   4906c:	2005883a 	mov	r2,r4
   49070:	2807883a 	mov	r3,r5
   49074:	dc000e15 	stw	r16,56(sp)
   49078:	d809883a 	mov	r4,sp
   4907c:	880b883a 	mov	r5,r17
   49080:	dc000904 	addi	r16,sp,36
   49084:	d8c00115 	stw	r3,4(sp)
   49088:	d8800015 	stw	r2,0(sp)
   4908c:	d9800215 	stw	r6,8(sp)
   49090:	dfc01015 	stw	ra,64(sp)
   49094:	d9c00315 	stw	r7,12(sp)
   49098:	0049ad40 	call	49ad4 <__unpack_d>
   4909c:	d9000204 	addi	r4,sp,8
   490a0:	800b883a 	mov	r5,r16
   490a4:	0049ad40 	call	49ad4 <__unpack_d>
   490a8:	d8800417 	ldw	r2,16(sp)
   490ac:	00c00044 	movi	r3,1
   490b0:	01bfffc4 	movi	r6,-1
   490b4:	1880062e 	bgeu	r3,r2,490d0 <__gtdf2+0x70>
   490b8:	d8800917 	ldw	r2,36(sp)
   490bc:	8809883a 	mov	r4,r17
   490c0:	800b883a 	mov	r5,r16
   490c4:	1880022e 	bgeu	r3,r2,490d0 <__gtdf2+0x70>
   490c8:	0049c0c0 	call	49c0c <__fpcmp_parts_d>
   490cc:	100d883a 	mov	r6,r2
   490d0:	3005883a 	mov	r2,r6
   490d4:	dfc01017 	ldw	ra,64(sp)
   490d8:	dc400f17 	ldw	r17,60(sp)
   490dc:	dc000e17 	ldw	r16,56(sp)
   490e0:	dec01104 	addi	sp,sp,68
   490e4:	f800283a 	ret

000490e8 <__gedf2>:
   490e8:	deffef04 	addi	sp,sp,-68
   490ec:	dc400f15 	stw	r17,60(sp)
   490f0:	dc400404 	addi	r17,sp,16
   490f4:	2005883a 	mov	r2,r4
   490f8:	2807883a 	mov	r3,r5
   490fc:	dc000e15 	stw	r16,56(sp)
   49100:	d809883a 	mov	r4,sp
   49104:	880b883a 	mov	r5,r17
   49108:	dc000904 	addi	r16,sp,36
   4910c:	d8c00115 	stw	r3,4(sp)
   49110:	d8800015 	stw	r2,0(sp)
   49114:	d9800215 	stw	r6,8(sp)
   49118:	dfc01015 	stw	ra,64(sp)
   4911c:	d9c00315 	stw	r7,12(sp)
   49120:	0049ad40 	call	49ad4 <__unpack_d>
   49124:	d9000204 	addi	r4,sp,8
   49128:	800b883a 	mov	r5,r16
   4912c:	0049ad40 	call	49ad4 <__unpack_d>
   49130:	d8800417 	ldw	r2,16(sp)
   49134:	00c00044 	movi	r3,1
   49138:	01bfffc4 	movi	r6,-1
   4913c:	1880062e 	bgeu	r3,r2,49158 <__gedf2+0x70>
   49140:	d8800917 	ldw	r2,36(sp)
   49144:	8809883a 	mov	r4,r17
   49148:	800b883a 	mov	r5,r16
   4914c:	1880022e 	bgeu	r3,r2,49158 <__gedf2+0x70>
   49150:	0049c0c0 	call	49c0c <__fpcmp_parts_d>
   49154:	100d883a 	mov	r6,r2
   49158:	3005883a 	mov	r2,r6
   4915c:	dfc01017 	ldw	ra,64(sp)
   49160:	dc400f17 	ldw	r17,60(sp)
   49164:	dc000e17 	ldw	r16,56(sp)
   49168:	dec01104 	addi	sp,sp,68
   4916c:	f800283a 	ret

00049170 <__ltdf2>:
   49170:	deffef04 	addi	sp,sp,-68
   49174:	dc400f15 	stw	r17,60(sp)
   49178:	dc400404 	addi	r17,sp,16
   4917c:	2005883a 	mov	r2,r4
   49180:	2807883a 	mov	r3,r5
   49184:	dc000e15 	stw	r16,56(sp)
   49188:	d809883a 	mov	r4,sp
   4918c:	880b883a 	mov	r5,r17
   49190:	dc000904 	addi	r16,sp,36
   49194:	d8c00115 	stw	r3,4(sp)
   49198:	d8800015 	stw	r2,0(sp)
   4919c:	d9800215 	stw	r6,8(sp)
   491a0:	dfc01015 	stw	ra,64(sp)
   491a4:	d9c00315 	stw	r7,12(sp)
   491a8:	0049ad40 	call	49ad4 <__unpack_d>
   491ac:	d9000204 	addi	r4,sp,8
   491b0:	800b883a 	mov	r5,r16
   491b4:	0049ad40 	call	49ad4 <__unpack_d>
   491b8:	d8800417 	ldw	r2,16(sp)
   491bc:	00c00044 	movi	r3,1
   491c0:	180d883a 	mov	r6,r3
   491c4:	1880062e 	bgeu	r3,r2,491e0 <__ltdf2+0x70>
   491c8:	d8800917 	ldw	r2,36(sp)
   491cc:	8809883a 	mov	r4,r17
   491d0:	800b883a 	mov	r5,r16
   491d4:	1880022e 	bgeu	r3,r2,491e0 <__ltdf2+0x70>
   491d8:	0049c0c0 	call	49c0c <__fpcmp_parts_d>
   491dc:	100d883a 	mov	r6,r2
   491e0:	3005883a 	mov	r2,r6
   491e4:	dfc01017 	ldw	ra,64(sp)
   491e8:	dc400f17 	ldw	r17,60(sp)
   491ec:	dc000e17 	ldw	r16,56(sp)
   491f0:	dec01104 	addi	sp,sp,68
   491f4:	f800283a 	ret

000491f8 <__floatsidf>:
   491f8:	2006d7fa 	srli	r3,r4,31
   491fc:	defff604 	addi	sp,sp,-40
   49200:	008000c4 	movi	r2,3
   49204:	dfc00915 	stw	ra,36(sp)
   49208:	dcc00815 	stw	r19,32(sp)
   4920c:	dc800715 	stw	r18,28(sp)
   49210:	dc400615 	stw	r17,24(sp)
   49214:	dc000515 	stw	r16,20(sp)
   49218:	d8800015 	stw	r2,0(sp)
   4921c:	d8c00115 	stw	r3,4(sp)
   49220:	20000f1e 	bne	r4,zero,49260 <__floatsidf+0x68>
   49224:	00800084 	movi	r2,2
   49228:	d8800015 	stw	r2,0(sp)
   4922c:	d809883a 	mov	r4,sp
   49230:	00497c00 	call	497c0 <__pack_d>
   49234:	1009883a 	mov	r4,r2
   49238:	180b883a 	mov	r5,r3
   4923c:	2005883a 	mov	r2,r4
   49240:	2807883a 	mov	r3,r5
   49244:	dfc00917 	ldw	ra,36(sp)
   49248:	dcc00817 	ldw	r19,32(sp)
   4924c:	dc800717 	ldw	r18,28(sp)
   49250:	dc400617 	ldw	r17,24(sp)
   49254:	dc000517 	ldw	r16,20(sp)
   49258:	dec00a04 	addi	sp,sp,40
   4925c:	f800283a 	ret
   49260:	00800f04 	movi	r2,60
   49264:	1807003a 	cmpeq	r3,r3,zero
   49268:	d8800215 	stw	r2,8(sp)
   4926c:	18001126 	beq	r3,zero,492b4 <__floatsidf+0xbc>
   49270:	0027883a 	mov	r19,zero
   49274:	2025883a 	mov	r18,r4
   49278:	d9000315 	stw	r4,12(sp)
   4927c:	dcc00415 	stw	r19,16(sp)
   49280:	00497400 	call	49740 <__clzsi2>
   49284:	11000744 	addi	r4,r2,29
   49288:	013fe80e 	bge	zero,r4,4922c <__floatsidf+0x34>
   4928c:	10bfff44 	addi	r2,r2,-3
   49290:	10000c16 	blt	r2,zero,492c4 <__floatsidf+0xcc>
   49294:	90a2983a 	sll	r17,r18,r2
   49298:	0021883a 	mov	r16,zero
   4929c:	d8800217 	ldw	r2,8(sp)
   492a0:	dc400415 	stw	r17,16(sp)
   492a4:	dc000315 	stw	r16,12(sp)
   492a8:	1105c83a 	sub	r2,r2,r4
   492ac:	d8800215 	stw	r2,8(sp)
   492b0:	003fde06 	br	4922c <__floatsidf+0x34>
   492b4:	00a00034 	movhi	r2,32768
   492b8:	20800a26 	beq	r4,r2,492e4 <__floatsidf+0xec>
   492bc:	0109c83a 	sub	r4,zero,r4
   492c0:	003feb06 	br	49270 <__floatsidf+0x78>
   492c4:	9006d07a 	srli	r3,r18,1
   492c8:	008007c4 	movi	r2,31
   492cc:	1105c83a 	sub	r2,r2,r4
   492d0:	1886d83a 	srl	r3,r3,r2
   492d4:	9922983a 	sll	r17,r19,r4
   492d8:	9120983a 	sll	r16,r18,r4
   492dc:	1c62b03a 	or	r17,r3,r17
   492e0:	003fee06 	br	4929c <__floatsidf+0xa4>
   492e4:	0009883a 	mov	r4,zero
   492e8:	01707834 	movhi	r5,49632
   492ec:	003fd306 	br	4923c <__floatsidf+0x44>

000492f0 <__fixdfsi>:
   492f0:	defff804 	addi	sp,sp,-32
   492f4:	2005883a 	mov	r2,r4
   492f8:	2807883a 	mov	r3,r5
   492fc:	d809883a 	mov	r4,sp
   49300:	d9400204 	addi	r5,sp,8
   49304:	d8c00115 	stw	r3,4(sp)
   49308:	d8800015 	stw	r2,0(sp)
   4930c:	dfc00715 	stw	ra,28(sp)
   49310:	0049ad40 	call	49ad4 <__unpack_d>
   49314:	d8c00217 	ldw	r3,8(sp)
   49318:	00800084 	movi	r2,2
   4931c:	1880051e 	bne	r3,r2,49334 <__fixdfsi+0x44>
   49320:	0007883a 	mov	r3,zero
   49324:	1805883a 	mov	r2,r3
   49328:	dfc00717 	ldw	ra,28(sp)
   4932c:	dec00804 	addi	sp,sp,32
   49330:	f800283a 	ret
   49334:	00800044 	movi	r2,1
   49338:	10fff92e 	bgeu	r2,r3,49320 <__fixdfsi+0x30>
   4933c:	00800104 	movi	r2,4
   49340:	18800426 	beq	r3,r2,49354 <__fixdfsi+0x64>
   49344:	d8c00417 	ldw	r3,16(sp)
   49348:	183ff516 	blt	r3,zero,49320 <__fixdfsi+0x30>
   4934c:	00800784 	movi	r2,30
   49350:	10c0080e 	bge	r2,r3,49374 <__fixdfsi+0x84>
   49354:	d8800317 	ldw	r2,12(sp)
   49358:	1000121e 	bne	r2,zero,493a4 <__fixdfsi+0xb4>
   4935c:	00e00034 	movhi	r3,32768
   49360:	18ffffc4 	addi	r3,r3,-1
   49364:	1805883a 	mov	r2,r3
   49368:	dfc00717 	ldw	ra,28(sp)
   4936c:	dec00804 	addi	sp,sp,32
   49370:	f800283a 	ret
   49374:	00800f04 	movi	r2,60
   49378:	10d1c83a 	sub	r8,r2,r3
   4937c:	40bff804 	addi	r2,r8,-32
   49380:	d9800517 	ldw	r6,20(sp)
   49384:	d9c00617 	ldw	r7,24(sp)
   49388:	10000816 	blt	r2,zero,493ac <__fixdfsi+0xbc>
   4938c:	3888d83a 	srl	r4,r7,r2
   49390:	d8800317 	ldw	r2,12(sp)
   49394:	2007883a 	mov	r3,r4
   49398:	103fe226 	beq	r2,zero,49324 <__fixdfsi+0x34>
   4939c:	0107c83a 	sub	r3,zero,r4
   493a0:	003fe006 	br	49324 <__fixdfsi+0x34>
   493a4:	00e00034 	movhi	r3,32768
   493a8:	003fde06 	br	49324 <__fixdfsi+0x34>
   493ac:	39c7883a 	add	r3,r7,r7
   493b0:	008007c4 	movi	r2,31
   493b4:	1205c83a 	sub	r2,r2,r8
   493b8:	1886983a 	sll	r3,r3,r2
   493bc:	3208d83a 	srl	r4,r6,r8
   493c0:	1908b03a 	or	r4,r3,r4
   493c4:	003ff206 	br	49390 <__fixdfsi+0xa0>

000493c8 <__floatunsidf>:
   493c8:	defff204 	addi	sp,sp,-56
   493cc:	dfc00d15 	stw	ra,52(sp)
   493d0:	ddc00c15 	stw	r23,48(sp)
   493d4:	dd800b15 	stw	r22,44(sp)
   493d8:	dd400a15 	stw	r21,40(sp)
   493dc:	dd000915 	stw	r20,36(sp)
   493e0:	dcc00815 	stw	r19,32(sp)
   493e4:	dc800715 	stw	r18,28(sp)
   493e8:	dc400615 	stw	r17,24(sp)
   493ec:	dc000515 	stw	r16,20(sp)
   493f0:	d8000115 	stw	zero,4(sp)
   493f4:	20000f1e 	bne	r4,zero,49434 <__floatunsidf+0x6c>
   493f8:	00800084 	movi	r2,2
   493fc:	d8800015 	stw	r2,0(sp)
   49400:	d809883a 	mov	r4,sp
   49404:	00497c00 	call	497c0 <__pack_d>
   49408:	dfc00d17 	ldw	ra,52(sp)
   4940c:	ddc00c17 	ldw	r23,48(sp)
   49410:	dd800b17 	ldw	r22,44(sp)
   49414:	dd400a17 	ldw	r21,40(sp)
   49418:	dd000917 	ldw	r20,36(sp)
   4941c:	dcc00817 	ldw	r19,32(sp)
   49420:	dc800717 	ldw	r18,28(sp)
   49424:	dc400617 	ldw	r17,24(sp)
   49428:	dc000517 	ldw	r16,20(sp)
   4942c:	dec00e04 	addi	sp,sp,56
   49430:	f800283a 	ret
   49434:	008000c4 	movi	r2,3
   49438:	00c00f04 	movi	r3,60
   4943c:	002f883a 	mov	r23,zero
   49440:	202d883a 	mov	r22,r4
   49444:	d8800015 	stw	r2,0(sp)
   49448:	d8c00215 	stw	r3,8(sp)
   4944c:	d9000315 	stw	r4,12(sp)
   49450:	ddc00415 	stw	r23,16(sp)
   49454:	00497400 	call	49740 <__clzsi2>
   49458:	12400744 	addi	r9,r2,29
   4945c:	48000b16 	blt	r9,zero,4948c <__floatunsidf+0xc4>
   49460:	483fe726 	beq	r9,zero,49400 <__floatunsidf+0x38>
   49464:	10bfff44 	addi	r2,r2,-3
   49468:	10002e16 	blt	r2,zero,49524 <__floatunsidf+0x15c>
   4946c:	b0a2983a 	sll	r17,r22,r2
   49470:	0021883a 	mov	r16,zero
   49474:	d8800217 	ldw	r2,8(sp)
   49478:	dc400415 	stw	r17,16(sp)
   4947c:	dc000315 	stw	r16,12(sp)
   49480:	1245c83a 	sub	r2,r2,r9
   49484:	d8800215 	stw	r2,8(sp)
   49488:	003fdd06 	br	49400 <__floatunsidf+0x38>
   4948c:	0255c83a 	sub	r10,zero,r9
   49490:	51bff804 	addi	r6,r10,-32
   49494:	30001b16 	blt	r6,zero,49504 <__floatunsidf+0x13c>
   49498:	b9a8d83a 	srl	r20,r23,r6
   4949c:	002b883a 	mov	r21,zero
   494a0:	000f883a 	mov	r7,zero
   494a4:	01000044 	movi	r4,1
   494a8:	0011883a 	mov	r8,zero
   494ac:	30002516 	blt	r6,zero,49544 <__floatunsidf+0x17c>
   494b0:	21a6983a 	sll	r19,r4,r6
   494b4:	0025883a 	mov	r18,zero
   494b8:	00bfffc4 	movi	r2,-1
   494bc:	9089883a 	add	r4,r18,r2
   494c0:	988b883a 	add	r5,r19,r2
   494c4:	248d803a 	cmpltu	r6,r4,r18
   494c8:	314b883a 	add	r5,r6,r5
   494cc:	b104703a 	and	r2,r22,r4
   494d0:	b946703a 	and	r3,r23,r5
   494d4:	10c4b03a 	or	r2,r2,r3
   494d8:	10000226 	beq	r2,zero,494e4 <__floatunsidf+0x11c>
   494dc:	01c00044 	movi	r7,1
   494e0:	0011883a 	mov	r8,zero
   494e4:	d9000217 	ldw	r4,8(sp)
   494e8:	a1c4b03a 	or	r2,r20,r7
   494ec:	aa06b03a 	or	r3,r21,r8
   494f0:	2249c83a 	sub	r4,r4,r9
   494f4:	d8c00415 	stw	r3,16(sp)
   494f8:	d9000215 	stw	r4,8(sp)
   494fc:	d8800315 	stw	r2,12(sp)
   49500:	003fbf06 	br	49400 <__floatunsidf+0x38>
   49504:	bdc7883a 	add	r3,r23,r23
   49508:	008007c4 	movi	r2,31
   4950c:	1285c83a 	sub	r2,r2,r10
   49510:	1886983a 	sll	r3,r3,r2
   49514:	b2a8d83a 	srl	r20,r22,r10
   49518:	baaad83a 	srl	r21,r23,r10
   4951c:	1d28b03a 	or	r20,r3,r20
   49520:	003fdf06 	br	494a0 <__floatunsidf+0xd8>
   49524:	b006d07a 	srli	r3,r22,1
   49528:	008007c4 	movi	r2,31
   4952c:	1245c83a 	sub	r2,r2,r9
   49530:	1886d83a 	srl	r3,r3,r2
   49534:	ba62983a 	sll	r17,r23,r9
   49538:	b260983a 	sll	r16,r22,r9
   4953c:	1c62b03a 	or	r17,r3,r17
   49540:	003fcc06 	br	49474 <__floatunsidf+0xac>
   49544:	2006d07a 	srli	r3,r4,1
   49548:	008007c4 	movi	r2,31
   4954c:	1285c83a 	sub	r2,r2,r10
   49550:	18a6d83a 	srl	r19,r3,r2
   49554:	22a4983a 	sll	r18,r4,r10
   49558:	003fd706 	br	494b8 <__floatunsidf+0xf0>

0004955c <udivmodsi4>:
   4955c:	29001b2e 	bgeu	r5,r4,495cc <udivmodsi4+0x70>
   49560:	28001a16 	blt	r5,zero,495cc <udivmodsi4+0x70>
   49564:	00800044 	movi	r2,1
   49568:	0007883a 	mov	r3,zero
   4956c:	01c007c4 	movi	r7,31
   49570:	00000306 	br	49580 <udivmodsi4+0x24>
   49574:	19c01326 	beq	r3,r7,495c4 <udivmodsi4+0x68>
   49578:	18c00044 	addi	r3,r3,1
   4957c:	28000416 	blt	r5,zero,49590 <udivmodsi4+0x34>
   49580:	294b883a 	add	r5,r5,r5
   49584:	1085883a 	add	r2,r2,r2
   49588:	293ffa36 	bltu	r5,r4,49574 <udivmodsi4+0x18>
   4958c:	10000d26 	beq	r2,zero,495c4 <udivmodsi4+0x68>
   49590:	0007883a 	mov	r3,zero
   49594:	21400236 	bltu	r4,r5,495a0 <udivmodsi4+0x44>
   49598:	2149c83a 	sub	r4,r4,r5
   4959c:	1886b03a 	or	r3,r3,r2
   495a0:	1004d07a 	srli	r2,r2,1
   495a4:	280ad07a 	srli	r5,r5,1
   495a8:	103ffa1e 	bne	r2,zero,49594 <udivmodsi4+0x38>
   495ac:	30000226 	beq	r6,zero,495b8 <udivmodsi4+0x5c>
   495b0:	2005883a 	mov	r2,r4
   495b4:	f800283a 	ret
   495b8:	1809883a 	mov	r4,r3
   495bc:	2005883a 	mov	r2,r4
   495c0:	f800283a 	ret
   495c4:	0007883a 	mov	r3,zero
   495c8:	003ff806 	br	495ac <udivmodsi4+0x50>
   495cc:	00800044 	movi	r2,1
   495d0:	0007883a 	mov	r3,zero
   495d4:	003fef06 	br	49594 <udivmodsi4+0x38>

000495d8 <__divsi3>:
   495d8:	defffe04 	addi	sp,sp,-8
   495dc:	dc000015 	stw	r16,0(sp)
   495e0:	dfc00115 	stw	ra,4(sp)
   495e4:	0021883a 	mov	r16,zero
   495e8:	20000c16 	blt	r4,zero,4961c <__divsi3+0x44>
   495ec:	000d883a 	mov	r6,zero
   495f0:	28000e16 	blt	r5,zero,4962c <__divsi3+0x54>
   495f4:	004955c0 	call	4955c <udivmodsi4>
   495f8:	1007883a 	mov	r3,r2
   495fc:	8005003a 	cmpeq	r2,r16,zero
   49600:	1000011e 	bne	r2,zero,49608 <__divsi3+0x30>
   49604:	00c7c83a 	sub	r3,zero,r3
   49608:	1805883a 	mov	r2,r3
   4960c:	dfc00117 	ldw	ra,4(sp)
   49610:	dc000017 	ldw	r16,0(sp)
   49614:	dec00204 	addi	sp,sp,8
   49618:	f800283a 	ret
   4961c:	0109c83a 	sub	r4,zero,r4
   49620:	04000044 	movi	r16,1
   49624:	000d883a 	mov	r6,zero
   49628:	283ff20e 	bge	r5,zero,495f4 <__divsi3+0x1c>
   4962c:	014bc83a 	sub	r5,zero,r5
   49630:	8021003a 	cmpeq	r16,r16,zero
   49634:	003fef06 	br	495f4 <__divsi3+0x1c>

00049638 <__modsi3>:
   49638:	deffff04 	addi	sp,sp,-4
   4963c:	dfc00015 	stw	ra,0(sp)
   49640:	01800044 	movi	r6,1
   49644:	2807883a 	mov	r3,r5
   49648:	20000416 	blt	r4,zero,4965c <__modsi3+0x24>
   4964c:	28000c16 	blt	r5,zero,49680 <__modsi3+0x48>
   49650:	dfc00017 	ldw	ra,0(sp)
   49654:	dec00104 	addi	sp,sp,4
   49658:	004955c1 	jmpi	4955c <udivmodsi4>
   4965c:	0109c83a 	sub	r4,zero,r4
   49660:	28000b16 	blt	r5,zero,49690 <__modsi3+0x58>
   49664:	180b883a 	mov	r5,r3
   49668:	01800044 	movi	r6,1
   4966c:	004955c0 	call	4955c <udivmodsi4>
   49670:	0085c83a 	sub	r2,zero,r2
   49674:	dfc00017 	ldw	ra,0(sp)
   49678:	dec00104 	addi	sp,sp,4
   4967c:	f800283a 	ret
   49680:	014bc83a 	sub	r5,zero,r5
   49684:	dfc00017 	ldw	ra,0(sp)
   49688:	dec00104 	addi	sp,sp,4
   4968c:	004955c1 	jmpi	4955c <udivmodsi4>
   49690:	0147c83a 	sub	r3,zero,r5
   49694:	003ff306 	br	49664 <__modsi3+0x2c>

00049698 <__udivsi3>:
   49698:	000d883a 	mov	r6,zero
   4969c:	004955c1 	jmpi	4955c <udivmodsi4>

000496a0 <__umodsi3>:
   496a0:	01800044 	movi	r6,1
   496a4:	004955c1 	jmpi	4955c <udivmodsi4>

000496a8 <__muldi3>:
   496a8:	2011883a 	mov	r8,r4
   496ac:	427fffcc 	andi	r9,r8,65535
   496b0:	4018d43a 	srli	r12,r8,16
   496b4:	32bfffcc 	andi	r10,r6,65535
   496b8:	3016d43a 	srli	r11,r6,16
   496bc:	4a85383a 	mul	r2,r9,r10
   496c0:	6295383a 	mul	r10,r12,r10
   496c4:	4ad3383a 	mul	r9,r9,r11
   496c8:	113fffcc 	andi	r4,r2,65535
   496cc:	1004d43a 	srli	r2,r2,16
   496d0:	4a93883a 	add	r9,r9,r10
   496d4:	3807883a 	mov	r3,r7
   496d8:	1245883a 	add	r2,r2,r9
   496dc:	280f883a 	mov	r7,r5
   496e0:	180b883a 	mov	r5,r3
   496e4:	1006943a 	slli	r3,r2,16
   496e8:	defffd04 	addi	sp,sp,-12
   496ec:	dc800215 	stw	r18,8(sp)
   496f0:	1907883a 	add	r3,r3,r4
   496f4:	dc400115 	stw	r17,4(sp)
   496f8:	dc000015 	stw	r16,0(sp)
   496fc:	4165383a 	mul	r18,r8,r5
   49700:	31e3383a 	mul	r17,r6,r7
   49704:	1012d43a 	srli	r9,r2,16
   49708:	62d9383a 	mul	r12,r12,r11
   4970c:	181f883a 	mov	r15,r3
   49710:	1280022e 	bgeu	r2,r10,4971c <__muldi3+0x74>
   49714:	00800074 	movhi	r2,1
   49718:	6099883a 	add	r12,r12,r2
   4971c:	624d883a 	add	r6,r12,r9
   49720:	9187883a 	add	r3,r18,r6
   49724:	88c7883a 	add	r3,r17,r3
   49728:	7805883a 	mov	r2,r15
   4972c:	dc800217 	ldw	r18,8(sp)
   49730:	dc400117 	ldw	r17,4(sp)
   49734:	dc000017 	ldw	r16,0(sp)
   49738:	dec00304 	addi	sp,sp,12
   4973c:	f800283a 	ret

00049740 <__clzsi2>:
   49740:	00bfffd4 	movui	r2,65535
   49744:	11000e36 	bltu	r2,r4,49780 <__clzsi2+0x40>
   49748:	00803fc4 	movi	r2,255
   4974c:	01400204 	movi	r5,8
   49750:	0007883a 	mov	r3,zero
   49754:	11001036 	bltu	r2,r4,49798 <__clzsi2+0x58>
   49758:	000b883a 	mov	r5,zero
   4975c:	20c6d83a 	srl	r3,r4,r3
   49760:	008001b4 	movhi	r2,6
   49764:	1080a004 	addi	r2,r2,640
   49768:	1887883a 	add	r3,r3,r2
   4976c:	18800003 	ldbu	r2,0(r3)
   49770:	00c00804 	movi	r3,32
   49774:	2885883a 	add	r2,r5,r2
   49778:	1885c83a 	sub	r2,r3,r2
   4977c:	f800283a 	ret
   49780:	01400404 	movi	r5,16
   49784:	00804034 	movhi	r2,256
   49788:	10bfffc4 	addi	r2,r2,-1
   4978c:	2807883a 	mov	r3,r5
   49790:	113ff22e 	bgeu	r2,r4,4975c <__clzsi2+0x1c>
   49794:	01400604 	movi	r5,24
   49798:	2807883a 	mov	r3,r5
   4979c:	20c6d83a 	srl	r3,r4,r3
   497a0:	008001b4 	movhi	r2,6
   497a4:	1080a004 	addi	r2,r2,640
   497a8:	1887883a 	add	r3,r3,r2
   497ac:	18800003 	ldbu	r2,0(r3)
   497b0:	00c00804 	movi	r3,32
   497b4:	2885883a 	add	r2,r5,r2
   497b8:	1885c83a 	sub	r2,r3,r2
   497bc:	f800283a 	ret

000497c0 <__pack_d>:
   497c0:	20c00017 	ldw	r3,0(r4)
   497c4:	defffd04 	addi	sp,sp,-12
   497c8:	dc000015 	stw	r16,0(sp)
   497cc:	dc800215 	stw	r18,8(sp)
   497d0:	dc400115 	stw	r17,4(sp)
   497d4:	00800044 	movi	r2,1
   497d8:	22000317 	ldw	r8,12(r4)
   497dc:	001f883a 	mov	r15,zero
   497e0:	22400417 	ldw	r9,16(r4)
   497e4:	24000117 	ldw	r16,4(r4)
   497e8:	10c0552e 	bgeu	r2,r3,49940 <__pack_d+0x180>
   497ec:	00800104 	movi	r2,4
   497f0:	18804f26 	beq	r3,r2,49930 <__pack_d+0x170>
   497f4:	00800084 	movi	r2,2
   497f8:	18800226 	beq	r3,r2,49804 <__pack_d+0x44>
   497fc:	4244b03a 	or	r2,r8,r9
   49800:	10001a1e 	bne	r2,zero,4986c <__pack_d+0xac>
   49804:	000d883a 	mov	r6,zero
   49808:	000f883a 	mov	r7,zero
   4980c:	0011883a 	mov	r8,zero
   49810:	00800434 	movhi	r2,16
   49814:	10bfffc4 	addi	r2,r2,-1
   49818:	301d883a 	mov	r14,r6
   4981c:	3884703a 	and	r2,r7,r2
   49820:	400a953a 	slli	r5,r8,20
   49824:	79bffc2c 	andhi	r6,r15,65520
   49828:	308cb03a 	or	r6,r6,r2
   4982c:	00e00434 	movhi	r3,32784
   49830:	18ffffc4 	addi	r3,r3,-1
   49834:	800497fa 	slli	r2,r16,31
   49838:	30c6703a 	and	r3,r6,r3
   4983c:	1946b03a 	or	r3,r3,r5
   49840:	01600034 	movhi	r5,32768
   49844:	297fffc4 	addi	r5,r5,-1
   49848:	194a703a 	and	r5,r3,r5
   4984c:	288ab03a 	or	r5,r5,r2
   49850:	2807883a 	mov	r3,r5
   49854:	7005883a 	mov	r2,r14
   49858:	dc800217 	ldw	r18,8(sp)
   4985c:	dc400117 	ldw	r17,4(sp)
   49860:	dc000017 	ldw	r16,0(sp)
   49864:	dec00304 	addi	sp,sp,12
   49868:	f800283a 	ret
   4986c:	21000217 	ldw	r4,8(r4)
   49870:	00bf0084 	movi	r2,-1022
   49874:	20803f16 	blt	r4,r2,49974 <__pack_d+0x1b4>
   49878:	0080ffc4 	movi	r2,1023
   4987c:	11002c16 	blt	r2,r4,49930 <__pack_d+0x170>
   49880:	00803fc4 	movi	r2,255
   49884:	408c703a 	and	r6,r8,r2
   49888:	00802004 	movi	r2,128
   4988c:	0007883a 	mov	r3,zero
   49890:	000f883a 	mov	r7,zero
   49894:	2280ffc4 	addi	r10,r4,1023
   49898:	30801e26 	beq	r6,r2,49914 <__pack_d+0x154>
   4989c:	00801fc4 	movi	r2,127
   498a0:	4089883a 	add	r4,r8,r2
   498a4:	220d803a 	cmpltu	r6,r4,r8
   498a8:	324d883a 	add	r6,r6,r9
   498ac:	2011883a 	mov	r8,r4
   498b0:	3013883a 	mov	r9,r6
   498b4:	00880034 	movhi	r2,8192
   498b8:	10bfffc4 	addi	r2,r2,-1
   498bc:	12400d36 	bltu	r2,r9,498f4 <__pack_d+0x134>
   498c0:	4804963a 	slli	r2,r9,24
   498c4:	400cd23a 	srli	r6,r8,8
   498c8:	480ed23a 	srli	r7,r9,8
   498cc:	013fffc4 	movi	r4,-1
   498d0:	118cb03a 	or	r6,r2,r6
   498d4:	01400434 	movhi	r5,16
   498d8:	297fffc4 	addi	r5,r5,-1
   498dc:	3104703a 	and	r2,r6,r4
   498e0:	3946703a 	and	r3,r7,r5
   498e4:	5201ffcc 	andi	r8,r10,2047
   498e8:	100d883a 	mov	r6,r2
   498ec:	180f883a 	mov	r7,r3
   498f0:	003fc706 	br	49810 <__pack_d+0x50>
   498f4:	480897fa 	slli	r4,r9,31
   498f8:	4004d07a 	srli	r2,r8,1
   498fc:	4806d07a 	srli	r3,r9,1
   49900:	52800044 	addi	r10,r10,1
   49904:	2084b03a 	or	r2,r4,r2
   49908:	1011883a 	mov	r8,r2
   4990c:	1813883a 	mov	r9,r3
   49910:	003feb06 	br	498c0 <__pack_d+0x100>
   49914:	383fe11e 	bne	r7,zero,4989c <__pack_d+0xdc>
   49918:	01004004 	movi	r4,256
   4991c:	4104703a 	and	r2,r8,r4
   49920:	10c4b03a 	or	r2,r2,r3
   49924:	103fe326 	beq	r2,zero,498b4 <__pack_d+0xf4>
   49928:	3005883a 	mov	r2,r6
   4992c:	003fdc06 	br	498a0 <__pack_d+0xe0>
   49930:	000d883a 	mov	r6,zero
   49934:	000f883a 	mov	r7,zero
   49938:	0201ffc4 	movi	r8,2047
   4993c:	003fb406 	br	49810 <__pack_d+0x50>
   49940:	0005883a 	mov	r2,zero
   49944:	00c00234 	movhi	r3,8
   49948:	408cb03a 	or	r6,r8,r2
   4994c:	48ceb03a 	or	r7,r9,r3
   49950:	013fffc4 	movi	r4,-1
   49954:	01400434 	movhi	r5,16
   49958:	297fffc4 	addi	r5,r5,-1
   4995c:	3104703a 	and	r2,r6,r4
   49960:	3946703a 	and	r3,r7,r5
   49964:	100d883a 	mov	r6,r2
   49968:	180f883a 	mov	r7,r3
   4996c:	0201ffc4 	movi	r8,2047
   49970:	003fa706 	br	49810 <__pack_d+0x50>
   49974:	1109c83a 	sub	r4,r2,r4
   49978:	00800e04 	movi	r2,56
   4997c:	11004316 	blt	r2,r4,49a8c <__pack_d+0x2cc>
   49980:	21fff804 	addi	r7,r4,-32
   49984:	38004516 	blt	r7,zero,49a9c <__pack_d+0x2dc>
   49988:	49d8d83a 	srl	r12,r9,r7
   4998c:	001b883a 	mov	r13,zero
   49990:	0023883a 	mov	r17,zero
   49994:	01400044 	movi	r5,1
   49998:	0025883a 	mov	r18,zero
   4999c:	38004716 	blt	r7,zero,49abc <__pack_d+0x2fc>
   499a0:	29d6983a 	sll	r11,r5,r7
   499a4:	0015883a 	mov	r10,zero
   499a8:	00bfffc4 	movi	r2,-1
   499ac:	5089883a 	add	r4,r10,r2
   499b0:	588b883a 	add	r5,r11,r2
   499b4:	228d803a 	cmpltu	r6,r4,r10
   499b8:	314b883a 	add	r5,r6,r5
   499bc:	4104703a 	and	r2,r8,r4
   499c0:	4946703a 	and	r3,r9,r5
   499c4:	10c4b03a 	or	r2,r2,r3
   499c8:	10000226 	beq	r2,zero,499d4 <__pack_d+0x214>
   499cc:	04400044 	movi	r17,1
   499d0:	0025883a 	mov	r18,zero
   499d4:	00803fc4 	movi	r2,255
   499d8:	644eb03a 	or	r7,r12,r17
   499dc:	3892703a 	and	r9,r7,r2
   499e0:	00802004 	movi	r2,128
   499e4:	6c90b03a 	or	r8,r13,r18
   499e8:	0015883a 	mov	r10,zero
   499ec:	48801626 	beq	r9,r2,49a48 <__pack_d+0x288>
   499f0:	01001fc4 	movi	r4,127
   499f4:	3905883a 	add	r2,r7,r4
   499f8:	11cd803a 	cmpltu	r6,r2,r7
   499fc:	320d883a 	add	r6,r6,r8
   49a00:	100f883a 	mov	r7,r2
   49a04:	00840034 	movhi	r2,4096
   49a08:	10bfffc4 	addi	r2,r2,-1
   49a0c:	3011883a 	mov	r8,r6
   49a10:	0007883a 	mov	r3,zero
   49a14:	11801b36 	bltu	r2,r6,49a84 <__pack_d+0x2c4>
   49a18:	4004963a 	slli	r2,r8,24
   49a1c:	3808d23a 	srli	r4,r7,8
   49a20:	400ad23a 	srli	r5,r8,8
   49a24:	1813883a 	mov	r9,r3
   49a28:	1108b03a 	or	r4,r2,r4
   49a2c:	00bfffc4 	movi	r2,-1
   49a30:	00c00434 	movhi	r3,16
   49a34:	18ffffc4 	addi	r3,r3,-1
   49a38:	208c703a 	and	r6,r4,r2
   49a3c:	28ce703a 	and	r7,r5,r3
   49a40:	4a01ffcc 	andi	r8,r9,2047
   49a44:	003f7206 	br	49810 <__pack_d+0x50>
   49a48:	503fe91e 	bne	r10,zero,499f0 <__pack_d+0x230>
   49a4c:	01004004 	movi	r4,256
   49a50:	3904703a 	and	r2,r7,r4
   49a54:	0007883a 	mov	r3,zero
   49a58:	10c4b03a 	or	r2,r2,r3
   49a5c:	10000626 	beq	r2,zero,49a78 <__pack_d+0x2b8>
   49a60:	3a45883a 	add	r2,r7,r9
   49a64:	11cd803a 	cmpltu	r6,r2,r7
   49a68:	320d883a 	add	r6,r6,r8
   49a6c:	100f883a 	mov	r7,r2
   49a70:	3011883a 	mov	r8,r6
   49a74:	0007883a 	mov	r3,zero
   49a78:	00840034 	movhi	r2,4096
   49a7c:	10bfffc4 	addi	r2,r2,-1
   49a80:	123fe52e 	bgeu	r2,r8,49a18 <__pack_d+0x258>
   49a84:	00c00044 	movi	r3,1
   49a88:	003fe306 	br	49a18 <__pack_d+0x258>
   49a8c:	0009883a 	mov	r4,zero
   49a90:	0013883a 	mov	r9,zero
   49a94:	000b883a 	mov	r5,zero
   49a98:	003fe406 	br	49a2c <__pack_d+0x26c>
   49a9c:	4a47883a 	add	r3,r9,r9
   49aa0:	008007c4 	movi	r2,31
   49aa4:	1105c83a 	sub	r2,r2,r4
   49aa8:	1886983a 	sll	r3,r3,r2
   49aac:	4118d83a 	srl	r12,r8,r4
   49ab0:	491ad83a 	srl	r13,r9,r4
   49ab4:	1b18b03a 	or	r12,r3,r12
   49ab8:	003fb506 	br	49990 <__pack_d+0x1d0>
   49abc:	2806d07a 	srli	r3,r5,1
   49ac0:	008007c4 	movi	r2,31
   49ac4:	1105c83a 	sub	r2,r2,r4
   49ac8:	1896d83a 	srl	r11,r3,r2
   49acc:	2914983a 	sll	r10,r5,r4
   49ad0:	003fb506 	br	499a8 <__pack_d+0x1e8>

00049ad4 <__unpack_d>:
   49ad4:	20c00117 	ldw	r3,4(r4)
   49ad8:	22400017 	ldw	r9,0(r4)
   49adc:	00800434 	movhi	r2,16
   49ae0:	10bfffc4 	addi	r2,r2,-1
   49ae4:	1808d53a 	srli	r4,r3,20
   49ae8:	180cd7fa 	srli	r6,r3,31
   49aec:	1894703a 	and	r10,r3,r2
   49af0:	2201ffcc 	andi	r8,r4,2047
   49af4:	281b883a 	mov	r13,r5
   49af8:	4817883a 	mov	r11,r9
   49afc:	29800115 	stw	r6,4(r5)
   49b00:	5019883a 	mov	r12,r10
   49b04:	40001e1e 	bne	r8,zero,49b80 <__unpack_d+0xac>
   49b08:	4a84b03a 	or	r2,r9,r10
   49b0c:	10001926 	beq	r2,zero,49b74 <__unpack_d+0xa0>
   49b10:	4804d63a 	srli	r2,r9,24
   49b14:	500c923a 	slli	r6,r10,8
   49b18:	013f0084 	movi	r4,-1022
   49b1c:	00c40034 	movhi	r3,4096
   49b20:	18ffffc4 	addi	r3,r3,-1
   49b24:	118cb03a 	or	r6,r2,r6
   49b28:	008000c4 	movi	r2,3
   49b2c:	480a923a 	slli	r5,r9,8
   49b30:	68800015 	stw	r2,0(r13)
   49b34:	69000215 	stw	r4,8(r13)
   49b38:	19800b36 	bltu	r3,r6,49b68 <__unpack_d+0x94>
   49b3c:	200f883a 	mov	r7,r4
   49b40:	1811883a 	mov	r8,r3
   49b44:	2945883a 	add	r2,r5,r5
   49b48:	1149803a 	cmpltu	r4,r2,r5
   49b4c:	3187883a 	add	r3,r6,r6
   49b50:	20c9883a 	add	r4,r4,r3
   49b54:	100b883a 	mov	r5,r2
   49b58:	200d883a 	mov	r6,r4
   49b5c:	39ffffc4 	addi	r7,r7,-1
   49b60:	413ff82e 	bgeu	r8,r4,49b44 <__unpack_d+0x70>
   49b64:	69c00215 	stw	r7,8(r13)
   49b68:	69800415 	stw	r6,16(r13)
   49b6c:	69400315 	stw	r5,12(r13)
   49b70:	f800283a 	ret
   49b74:	00800084 	movi	r2,2
   49b78:	28800015 	stw	r2,0(r5)
   49b7c:	f800283a 	ret
   49b80:	0081ffc4 	movi	r2,2047
   49b84:	40800f26 	beq	r8,r2,49bc4 <__unpack_d+0xf0>
   49b88:	480cd63a 	srli	r6,r9,24
   49b8c:	5006923a 	slli	r3,r10,8
   49b90:	4804923a 	slli	r2,r9,8
   49b94:	0009883a 	mov	r4,zero
   49b98:	30c6b03a 	or	r3,r6,r3
   49b9c:	01440034 	movhi	r5,4096
   49ba0:	110cb03a 	or	r6,r2,r4
   49ba4:	423f0044 	addi	r8,r8,-1023
   49ba8:	194eb03a 	or	r7,r3,r5
   49bac:	008000c4 	movi	r2,3
   49bb0:	69c00415 	stw	r7,16(r13)
   49bb4:	6a000215 	stw	r8,8(r13)
   49bb8:	68800015 	stw	r2,0(r13)
   49bbc:	69800315 	stw	r6,12(r13)
   49bc0:	f800283a 	ret
   49bc4:	4a84b03a 	or	r2,r9,r10
   49bc8:	1000031e 	bne	r2,zero,49bd8 <__unpack_d+0x104>
   49bcc:	00800104 	movi	r2,4
   49bd0:	28800015 	stw	r2,0(r5)
   49bd4:	f800283a 	ret
   49bd8:	0009883a 	mov	r4,zero
   49bdc:	01400234 	movhi	r5,8
   49be0:	4904703a 	and	r2,r9,r4
   49be4:	5146703a 	and	r3,r10,r5
   49be8:	10c4b03a 	or	r2,r2,r3
   49bec:	10000526 	beq	r2,zero,49c04 <__unpack_d+0x130>
   49bf0:	00800044 	movi	r2,1
   49bf4:	68800015 	stw	r2,0(r13)
   49bf8:	6b000415 	stw	r12,16(r13)
   49bfc:	6ac00315 	stw	r11,12(r13)
   49c00:	f800283a 	ret
   49c04:	68000015 	stw	zero,0(r13)
   49c08:	003ffb06 	br	49bf8 <__unpack_d+0x124>

00049c0c <__fpcmp_parts_d>:
   49c0c:	21800017 	ldw	r6,0(r4)
   49c10:	00c00044 	movi	r3,1
   49c14:	19800a2e 	bgeu	r3,r6,49c40 <__fpcmp_parts_d+0x34>
   49c18:	28800017 	ldw	r2,0(r5)
   49c1c:	1880082e 	bgeu	r3,r2,49c40 <__fpcmp_parts_d+0x34>
   49c20:	00c00104 	movi	r3,4
   49c24:	30c02626 	beq	r6,r3,49cc0 <__fpcmp_parts_d+0xb4>
   49c28:	10c02226 	beq	r2,r3,49cb4 <__fpcmp_parts_d+0xa8>
   49c2c:	00c00084 	movi	r3,2
   49c30:	30c00526 	beq	r6,r3,49c48 <__fpcmp_parts_d+0x3c>
   49c34:	10c0071e 	bne	r2,r3,49c54 <__fpcmp_parts_d+0x48>
   49c38:	20800117 	ldw	r2,4(r4)
   49c3c:	1000091e 	bne	r2,zero,49c64 <__fpcmp_parts_d+0x58>
   49c40:	00800044 	movi	r2,1
   49c44:	f800283a 	ret
   49c48:	10c01a1e 	bne	r2,r3,49cb4 <__fpcmp_parts_d+0xa8>
   49c4c:	0005883a 	mov	r2,zero
   49c50:	f800283a 	ret
   49c54:	22000117 	ldw	r8,4(r4)
   49c58:	28800117 	ldw	r2,4(r5)
   49c5c:	40800326 	beq	r8,r2,49c6c <__fpcmp_parts_d+0x60>
   49c60:	403ff726 	beq	r8,zero,49c40 <__fpcmp_parts_d+0x34>
   49c64:	00bfffc4 	movi	r2,-1
   49c68:	f800283a 	ret
   49c6c:	20c00217 	ldw	r3,8(r4)
   49c70:	28800217 	ldw	r2,8(r5)
   49c74:	10fffa16 	blt	r2,r3,49c60 <__fpcmp_parts_d+0x54>
   49c78:	18800916 	blt	r3,r2,49ca0 <__fpcmp_parts_d+0x94>
   49c7c:	21c00417 	ldw	r7,16(r4)
   49c80:	28c00417 	ldw	r3,16(r5)
   49c84:	21800317 	ldw	r6,12(r4)
   49c88:	28800317 	ldw	r2,12(r5)
   49c8c:	19fff436 	bltu	r3,r7,49c60 <__fpcmp_parts_d+0x54>
   49c90:	38c00526 	beq	r7,r3,49ca8 <__fpcmp_parts_d+0x9c>
   49c94:	38c00236 	bltu	r7,r3,49ca0 <__fpcmp_parts_d+0x94>
   49c98:	19ffec1e 	bne	r3,r7,49c4c <__fpcmp_parts_d+0x40>
   49c9c:	30bfeb2e 	bgeu	r6,r2,49c4c <__fpcmp_parts_d+0x40>
   49ca0:	403fe71e 	bne	r8,zero,49c40 <__fpcmp_parts_d+0x34>
   49ca4:	003fef06 	br	49c64 <__fpcmp_parts_d+0x58>
   49ca8:	11bffa2e 	bgeu	r2,r6,49c94 <__fpcmp_parts_d+0x88>
   49cac:	403fe426 	beq	r8,zero,49c40 <__fpcmp_parts_d+0x34>
   49cb0:	003fec06 	br	49c64 <__fpcmp_parts_d+0x58>
   49cb4:	28800117 	ldw	r2,4(r5)
   49cb8:	103fe11e 	bne	r2,zero,49c40 <__fpcmp_parts_d+0x34>
   49cbc:	003fe906 	br	49c64 <__fpcmp_parts_d+0x58>
   49cc0:	11bfdd1e 	bne	r2,r6,49c38 <__fpcmp_parts_d+0x2c>
   49cc4:	28c00117 	ldw	r3,4(r5)
   49cc8:	20800117 	ldw	r2,4(r4)
   49ccc:	1885c83a 	sub	r2,r3,r2
   49cd0:	f800283a 	ret

00049cd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   49cd4:	defff804 	addi	sp,sp,-32
   49cd8:	dfc00715 	stw	ra,28(sp)
   49cdc:	df000615 	stw	fp,24(sp)
   49ce0:	df000604 	addi	fp,sp,24
   49ce4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   49ce8:	e0bffc17 	ldw	r2,-16(fp)
   49cec:	1004803a 	cmplt	r2,r2,zero
   49cf0:	1000081e 	bne	r2,zero,49d14 <close+0x40>
   49cf4:	e0bffc17 	ldw	r2,-16(fp)
   49cf8:	10800324 	muli	r2,r2,12
   49cfc:	1007883a 	mov	r3,r2
   49d00:	008001b4 	movhi	r2,6
   49d04:	1082fc04 	addi	r2,r2,3056
   49d08:	1887883a 	add	r3,r3,r2
   49d0c:	e0ffff15 	stw	r3,-4(fp)
   49d10:	00000106 	br	49d18 <close+0x44>
   49d14:	e03fff15 	stw	zero,-4(fp)
   49d18:	e0bfff17 	ldw	r2,-4(fp)
   49d1c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   49d20:	e0bffb17 	ldw	r2,-20(fp)
   49d24:	1005003a 	cmpeq	r2,r2,zero
   49d28:	10001d1e 	bne	r2,zero,49da0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   49d2c:	e0bffb17 	ldw	r2,-20(fp)
   49d30:	10800017 	ldw	r2,0(r2)
   49d34:	10800417 	ldw	r2,16(r2)
   49d38:	1005003a 	cmpeq	r2,r2,zero
   49d3c:	1000071e 	bne	r2,zero,49d5c <close+0x88>
   49d40:	e0bffb17 	ldw	r2,-20(fp)
   49d44:	10800017 	ldw	r2,0(r2)
   49d48:	10800417 	ldw	r2,16(r2)
   49d4c:	e13ffb17 	ldw	r4,-20(fp)
   49d50:	103ee83a 	callr	r2
   49d54:	e0bffe15 	stw	r2,-8(fp)
   49d58:	00000106 	br	49d60 <close+0x8c>
   49d5c:	e03ffe15 	stw	zero,-8(fp)
   49d60:	e0bffe17 	ldw	r2,-8(fp)
   49d64:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   49d68:	e13ffc17 	ldw	r4,-16(fp)
   49d6c:	004a5180 	call	4a518 <alt_release_fd>
    if (rval < 0)
   49d70:	e0bffa17 	ldw	r2,-24(fp)
   49d74:	1004403a 	cmpge	r2,r2,zero
   49d78:	1000071e 	bne	r2,zero,49d98 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   49d7c:	0049dd00 	call	49dd0 <alt_get_errno>
   49d80:	e0fffa17 	ldw	r3,-24(fp)
   49d84:	00c7c83a 	sub	r3,zero,r3
   49d88:	10c00015 	stw	r3,0(r2)
      return -1;
   49d8c:	00bfffc4 	movi	r2,-1
   49d90:	e0bffd15 	stw	r2,-12(fp)
   49d94:	00000806 	br	49db8 <close+0xe4>
    }
    return 0;
   49d98:	e03ffd15 	stw	zero,-12(fp)
   49d9c:	00000606 	br	49db8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49da0:	0049dd00 	call	49dd0 <alt_get_errno>
   49da4:	1007883a 	mov	r3,r2
   49da8:	00801444 	movi	r2,81
   49dac:	18800015 	stw	r2,0(r3)
    return -1;
   49db0:	00bfffc4 	movi	r2,-1
   49db4:	e0bffd15 	stw	r2,-12(fp)
   49db8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   49dbc:	e037883a 	mov	sp,fp
   49dc0:	dfc00117 	ldw	ra,4(sp)
   49dc4:	df000017 	ldw	fp,0(sp)
   49dc8:	dec00204 	addi	sp,sp,8
   49dcc:	f800283a 	ret

00049dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49dd0:	defffd04 	addi	sp,sp,-12
   49dd4:	dfc00215 	stw	ra,8(sp)
   49dd8:	df000115 	stw	fp,4(sp)
   49ddc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   49de0:	008001b4 	movhi	r2,6
   49de4:	10877f04 	addi	r2,r2,7676
   49de8:	10800017 	ldw	r2,0(r2)
   49dec:	1005003a 	cmpeq	r2,r2,zero
   49df0:	1000061e 	bne	r2,zero,49e0c <alt_get_errno+0x3c>
   49df4:	008001b4 	movhi	r2,6
   49df8:	10877f04 	addi	r2,r2,7676
   49dfc:	10800017 	ldw	r2,0(r2)
   49e00:	103ee83a 	callr	r2
   49e04:	e0bfff15 	stw	r2,-4(fp)
   49e08:	00000306 	br	49e18 <alt_get_errno+0x48>
   49e0c:	008001b4 	movhi	r2,6
   49e10:	10878f04 	addi	r2,r2,7740
   49e14:	e0bfff15 	stw	r2,-4(fp)
   49e18:	e0bfff17 	ldw	r2,-4(fp)
}
   49e1c:	e037883a 	mov	sp,fp
   49e20:	dfc00117 	ldw	ra,4(sp)
   49e24:	df000017 	ldw	fp,0(sp)
   49e28:	dec00204 	addi	sp,sp,8
   49e2c:	f800283a 	ret

00049e30 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   49e30:	defffc04 	addi	sp,sp,-16
   49e34:	df000315 	stw	fp,12(sp)
   49e38:	df000304 	addi	fp,sp,12
   49e3c:	e13ffd15 	stw	r4,-12(fp)
   49e40:	e17ffe15 	stw	r5,-8(fp)
   49e44:	e1bfff15 	stw	r6,-4(fp)
  return len;
   49e48:	e0bfff17 	ldw	r2,-4(fp)
}
   49e4c:	e037883a 	mov	sp,fp
   49e50:	df000017 	ldw	fp,0(sp)
   49e54:	dec00104 	addi	sp,sp,4
   49e58:	f800283a 	ret

00049e5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   49e5c:	defff904 	addi	sp,sp,-28
   49e60:	dfc00615 	stw	ra,24(sp)
   49e64:	df000515 	stw	fp,20(sp)
   49e68:	df000504 	addi	fp,sp,20
   49e6c:	e13ffc15 	stw	r4,-16(fp)
   49e70:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49e74:	e0bffc17 	ldw	r2,-16(fp)
   49e78:	1004803a 	cmplt	r2,r2,zero
   49e7c:	1000081e 	bne	r2,zero,49ea0 <fstat+0x44>
   49e80:	e0bffc17 	ldw	r2,-16(fp)
   49e84:	10800324 	muli	r2,r2,12
   49e88:	1007883a 	mov	r3,r2
   49e8c:	008001b4 	movhi	r2,6
   49e90:	1082fc04 	addi	r2,r2,3056
   49e94:	1887883a 	add	r3,r3,r2
   49e98:	e0ffff15 	stw	r3,-4(fp)
   49e9c:	00000106 	br	49ea4 <fstat+0x48>
   49ea0:	e03fff15 	stw	zero,-4(fp)
   49ea4:	e0bfff17 	ldw	r2,-4(fp)
   49ea8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   49eac:	e0bffb17 	ldw	r2,-20(fp)
   49eb0:	1005003a 	cmpeq	r2,r2,zero
   49eb4:	1000121e 	bne	r2,zero,49f00 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   49eb8:	e0bffb17 	ldw	r2,-20(fp)
   49ebc:	10800017 	ldw	r2,0(r2)
   49ec0:	10800817 	ldw	r2,32(r2)
   49ec4:	1005003a 	cmpeq	r2,r2,zero
   49ec8:	1000081e 	bne	r2,zero,49eec <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   49ecc:	e0bffb17 	ldw	r2,-20(fp)
   49ed0:	10800017 	ldw	r2,0(r2)
   49ed4:	10800817 	ldw	r2,32(r2)
   49ed8:	e13ffb17 	ldw	r4,-20(fp)
   49edc:	e17ffd17 	ldw	r5,-12(fp)
   49ee0:	103ee83a 	callr	r2
   49ee4:	e0bffe15 	stw	r2,-8(fp)
   49ee8:	00000b06 	br	49f18 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   49eec:	e0fffd17 	ldw	r3,-12(fp)
   49ef0:	00880004 	movi	r2,8192
   49ef4:	18800115 	stw	r2,4(r3)
      return 0;
   49ef8:	e03ffe15 	stw	zero,-8(fp)
   49efc:	00000606 	br	49f18 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   49f00:	0049f300 	call	49f30 <alt_get_errno>
   49f04:	1007883a 	mov	r3,r2
   49f08:	00801444 	movi	r2,81
   49f0c:	18800015 	stw	r2,0(r3)
    return -1;
   49f10:	00bfffc4 	movi	r2,-1
   49f14:	e0bffe15 	stw	r2,-8(fp)
   49f18:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   49f1c:	e037883a 	mov	sp,fp
   49f20:	dfc00117 	ldw	ra,4(sp)
   49f24:	df000017 	ldw	fp,0(sp)
   49f28:	dec00204 	addi	sp,sp,8
   49f2c:	f800283a 	ret

00049f30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   49f30:	defffd04 	addi	sp,sp,-12
   49f34:	dfc00215 	stw	ra,8(sp)
   49f38:	df000115 	stw	fp,4(sp)
   49f3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   49f40:	008001b4 	movhi	r2,6
   49f44:	10877f04 	addi	r2,r2,7676
   49f48:	10800017 	ldw	r2,0(r2)
   49f4c:	1005003a 	cmpeq	r2,r2,zero
   49f50:	1000061e 	bne	r2,zero,49f6c <alt_get_errno+0x3c>
   49f54:	008001b4 	movhi	r2,6
   49f58:	10877f04 	addi	r2,r2,7676
   49f5c:	10800017 	ldw	r2,0(r2)
   49f60:	103ee83a 	callr	r2
   49f64:	e0bfff15 	stw	r2,-4(fp)
   49f68:	00000306 	br	49f78 <alt_get_errno+0x48>
   49f6c:	008001b4 	movhi	r2,6
   49f70:	10878f04 	addi	r2,r2,7740
   49f74:	e0bfff15 	stw	r2,-4(fp)
   49f78:	e0bfff17 	ldw	r2,-4(fp)
}
   49f7c:	e037883a 	mov	sp,fp
   49f80:	dfc00117 	ldw	ra,4(sp)
   49f84:	df000017 	ldw	fp,0(sp)
   49f88:	dec00204 	addi	sp,sp,8
   49f8c:	f800283a 	ret

00049f90 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   49f90:	deffeb04 	addi	sp,sp,-84
   49f94:	dfc01415 	stw	ra,80(sp)
   49f98:	df001315 	stw	fp,76(sp)
   49f9c:	df001304 	addi	fp,sp,76
   49fa0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   49fa4:	e0bffd17 	ldw	r2,-12(fp)
   49fa8:	1004803a 	cmplt	r2,r2,zero
   49fac:	1000081e 	bne	r2,zero,49fd0 <isatty+0x40>
   49fb0:	e0bffd17 	ldw	r2,-12(fp)
   49fb4:	10800324 	muli	r2,r2,12
   49fb8:	1007883a 	mov	r3,r2
   49fbc:	008001b4 	movhi	r2,6
   49fc0:	1082fc04 	addi	r2,r2,3056
   49fc4:	1887883a 	add	r3,r3,r2
   49fc8:	e0ffff15 	stw	r3,-4(fp)
   49fcc:	00000106 	br	49fd4 <isatty+0x44>
   49fd0:	e03fff15 	stw	zero,-4(fp)
   49fd4:	e0bfff17 	ldw	r2,-4(fp)
   49fd8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   49fdc:	e0bfed17 	ldw	r2,-76(fp)
   49fe0:	1005003a 	cmpeq	r2,r2,zero
   49fe4:	10000f1e 	bne	r2,zero,4a024 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   49fe8:	e0bfed17 	ldw	r2,-76(fp)
   49fec:	10800017 	ldw	r2,0(r2)
   49ff0:	10800817 	ldw	r2,32(r2)
   49ff4:	1004c03a 	cmpne	r2,r2,zero
   49ff8:	1000031e 	bne	r2,zero,4a008 <isatty+0x78>
    {
      return 1;
   49ffc:	00800044 	movi	r2,1
   4a000:	e0bffe15 	stw	r2,-8(fp)
   4a004:	00000c06 	br	4a038 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4a008:	e17fee04 	addi	r5,fp,-72
   4a00c:	e13ffd17 	ldw	r4,-12(fp)
   4a010:	0049e5c0 	call	49e5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4a014:	e0bfef17 	ldw	r2,-68(fp)
   4a018:	10880020 	cmpeqi	r2,r2,8192
   4a01c:	e0bffe15 	stw	r2,-8(fp)
   4a020:	00000506 	br	4a038 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a024:	004a0500 	call	4a050 <alt_get_errno>
   4a028:	1007883a 	mov	r3,r2
   4a02c:	00801444 	movi	r2,81
   4a030:	18800015 	stw	r2,0(r3)
    return 0;
   4a034:	e03ffe15 	stw	zero,-8(fp)
   4a038:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4a03c:	e037883a 	mov	sp,fp
   4a040:	dfc00117 	ldw	ra,4(sp)
   4a044:	df000017 	ldw	fp,0(sp)
   4a048:	dec00204 	addi	sp,sp,8
   4a04c:	f800283a 	ret

0004a050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a050:	defffd04 	addi	sp,sp,-12
   4a054:	dfc00215 	stw	ra,8(sp)
   4a058:	df000115 	stw	fp,4(sp)
   4a05c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a060:	008001b4 	movhi	r2,6
   4a064:	10877f04 	addi	r2,r2,7676
   4a068:	10800017 	ldw	r2,0(r2)
   4a06c:	1005003a 	cmpeq	r2,r2,zero
   4a070:	1000061e 	bne	r2,zero,4a08c <alt_get_errno+0x3c>
   4a074:	008001b4 	movhi	r2,6
   4a078:	10877f04 	addi	r2,r2,7676
   4a07c:	10800017 	ldw	r2,0(r2)
   4a080:	103ee83a 	callr	r2
   4a084:	e0bfff15 	stw	r2,-4(fp)
   4a088:	00000306 	br	4a098 <alt_get_errno+0x48>
   4a08c:	008001b4 	movhi	r2,6
   4a090:	10878f04 	addi	r2,r2,7740
   4a094:	e0bfff15 	stw	r2,-4(fp)
   4a098:	e0bfff17 	ldw	r2,-4(fp)
}
   4a09c:	e037883a 	mov	sp,fp
   4a0a0:	dfc00117 	ldw	ra,4(sp)
   4a0a4:	df000017 	ldw	fp,0(sp)
   4a0a8:	dec00204 	addi	sp,sp,8
   4a0ac:	f800283a 	ret

0004a0b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4a0b0:	defffe04 	addi	sp,sp,-8
   4a0b4:	dfc00115 	stw	ra,4(sp)
   4a0b8:	df000015 	stw	fp,0(sp)
   4a0bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4a0c0:	01000174 	movhi	r4,5
   4a0c4:	2131cf04 	addi	r4,r4,-14532
   4a0c8:	014001b4 	movhi	r5,6
   4a0cc:	2940ed04 	addi	r5,r5,948
   4a0d0:	018001b4 	movhi	r6,6
   4a0d4:	31878404 	addi	r6,r6,7696
   4a0d8:	004a1300 	call	4a130 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4a0dc:	01000134 	movhi	r4,4
   4a0e0:	21000804 	addi	r4,r4,32
   4a0e4:	01400134 	movhi	r5,4
   4a0e8:	29400804 	addi	r5,r5,32
   4a0ec:	01800134 	movhi	r6,4
   4a0f0:	31806d04 	addi	r6,r6,436
   4a0f4:	004a1300 	call	4a130 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4a0f8:	010001b4 	movhi	r4,6
   4a0fc:	21000004 	addi	r4,r4,0
   4a100:	014001b4 	movhi	r5,6
   4a104:	29400004 	addi	r5,r5,0
   4a108:	018001b4 	movhi	r6,6
   4a10c:	3180ed04 	addi	r6,r6,948
   4a110:	004a1300 	call	4a130 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4a114:	004b57c0 	call	4b57c <alt_dcache_flush_all>
  alt_icache_flush_all();
   4a118:	004b7740 	call	4b774 <alt_icache_flush_all>
}
   4a11c:	e037883a 	mov	sp,fp
   4a120:	dfc00117 	ldw	ra,4(sp)
   4a124:	df000017 	ldw	fp,0(sp)
   4a128:	dec00204 	addi	sp,sp,8
   4a12c:	f800283a 	ret

0004a130 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4a130:	defffc04 	addi	sp,sp,-16
   4a134:	df000315 	stw	fp,12(sp)
   4a138:	df000304 	addi	fp,sp,12
   4a13c:	e13ffd15 	stw	r4,-12(fp)
   4a140:	e17ffe15 	stw	r5,-8(fp)
   4a144:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4a148:	e0fffe17 	ldw	r3,-8(fp)
   4a14c:	e0bffd17 	ldw	r2,-12(fp)
   4a150:	18800e26 	beq	r3,r2,4a18c <alt_load_section+0x5c>
  {
    while( to != end )
   4a154:	00000a06 	br	4a180 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4a158:	e0bffd17 	ldw	r2,-12(fp)
   4a15c:	10c00017 	ldw	r3,0(r2)
   4a160:	e0bffe17 	ldw	r2,-8(fp)
   4a164:	10c00015 	stw	r3,0(r2)
   4a168:	e0bffe17 	ldw	r2,-8(fp)
   4a16c:	10800104 	addi	r2,r2,4
   4a170:	e0bffe15 	stw	r2,-8(fp)
   4a174:	e0bffd17 	ldw	r2,-12(fp)
   4a178:	10800104 	addi	r2,r2,4
   4a17c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4a180:	e0fffe17 	ldw	r3,-8(fp)
   4a184:	e0bfff17 	ldw	r2,-4(fp)
   4a188:	18bff31e 	bne	r3,r2,4a158 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4a18c:	e037883a 	mov	sp,fp
   4a190:	df000017 	ldw	fp,0(sp)
   4a194:	dec00104 	addi	sp,sp,4
   4a198:	f800283a 	ret

0004a19c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4a19c:	defff804 	addi	sp,sp,-32
   4a1a0:	dfc00715 	stw	ra,28(sp)
   4a1a4:	df000615 	stw	fp,24(sp)
   4a1a8:	df000604 	addi	fp,sp,24
   4a1ac:	e13ffc15 	stw	r4,-16(fp)
   4a1b0:	e17ffd15 	stw	r5,-12(fp)
   4a1b4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4a1b8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a1bc:	e0bffc17 	ldw	r2,-16(fp)
   4a1c0:	1004803a 	cmplt	r2,r2,zero
   4a1c4:	1000081e 	bne	r2,zero,4a1e8 <lseek+0x4c>
   4a1c8:	e0bffc17 	ldw	r2,-16(fp)
   4a1cc:	10800324 	muli	r2,r2,12
   4a1d0:	1007883a 	mov	r3,r2
   4a1d4:	008001b4 	movhi	r2,6
   4a1d8:	1082fc04 	addi	r2,r2,3056
   4a1dc:	1887883a 	add	r3,r3,r2
   4a1e0:	e0ffff15 	stw	r3,-4(fp)
   4a1e4:	00000106 	br	4a1ec <lseek+0x50>
   4a1e8:	e03fff15 	stw	zero,-4(fp)
   4a1ec:	e0bfff17 	ldw	r2,-4(fp)
   4a1f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4a1f4:	e0bffb17 	ldw	r2,-20(fp)
   4a1f8:	1005003a 	cmpeq	r2,r2,zero
   4a1fc:	1000111e 	bne	r2,zero,4a244 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4a200:	e0bffb17 	ldw	r2,-20(fp)
   4a204:	10800017 	ldw	r2,0(r2)
   4a208:	10800717 	ldw	r2,28(r2)
   4a20c:	1005003a 	cmpeq	r2,r2,zero
   4a210:	1000091e 	bne	r2,zero,4a238 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4a214:	e0bffb17 	ldw	r2,-20(fp)
   4a218:	10800017 	ldw	r2,0(r2)
   4a21c:	10800717 	ldw	r2,28(r2)
   4a220:	e13ffb17 	ldw	r4,-20(fp)
   4a224:	e17ffd17 	ldw	r5,-12(fp)
   4a228:	e1bffe17 	ldw	r6,-8(fp)
   4a22c:	103ee83a 	callr	r2
   4a230:	e0bffa15 	stw	r2,-24(fp)
   4a234:	00000506 	br	4a24c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4a238:	00bfde84 	movi	r2,-134
   4a23c:	e0bffa15 	stw	r2,-24(fp)
   4a240:	00000206 	br	4a24c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4a244:	00bfebc4 	movi	r2,-81
   4a248:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4a24c:	e0bffa17 	ldw	r2,-24(fp)
   4a250:	1004403a 	cmpge	r2,r2,zero
   4a254:	1000071e 	bne	r2,zero,4a274 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   4a258:	004a28c0 	call	4a28c <alt_get_errno>
   4a25c:	1007883a 	mov	r3,r2
   4a260:	e0bffa17 	ldw	r2,-24(fp)
   4a264:	0085c83a 	sub	r2,zero,r2
   4a268:	18800015 	stw	r2,0(r3)
    rc = -1;
   4a26c:	00bfffc4 	movi	r2,-1
   4a270:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4a274:	e0bffa17 	ldw	r2,-24(fp)
}
   4a278:	e037883a 	mov	sp,fp
   4a27c:	dfc00117 	ldw	ra,4(sp)
   4a280:	df000017 	ldw	fp,0(sp)
   4a284:	dec00204 	addi	sp,sp,8
   4a288:	f800283a 	ret

0004a28c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a28c:	defffd04 	addi	sp,sp,-12
   4a290:	dfc00215 	stw	ra,8(sp)
   4a294:	df000115 	stw	fp,4(sp)
   4a298:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a29c:	008001b4 	movhi	r2,6
   4a2a0:	10877f04 	addi	r2,r2,7676
   4a2a4:	10800017 	ldw	r2,0(r2)
   4a2a8:	1005003a 	cmpeq	r2,r2,zero
   4a2ac:	1000061e 	bne	r2,zero,4a2c8 <alt_get_errno+0x3c>
   4a2b0:	008001b4 	movhi	r2,6
   4a2b4:	10877f04 	addi	r2,r2,7676
   4a2b8:	10800017 	ldw	r2,0(r2)
   4a2bc:	103ee83a 	callr	r2
   4a2c0:	e0bfff15 	stw	r2,-4(fp)
   4a2c4:	00000306 	br	4a2d4 <alt_get_errno+0x48>
   4a2c8:	008001b4 	movhi	r2,6
   4a2cc:	10878f04 	addi	r2,r2,7740
   4a2d0:	e0bfff15 	stw	r2,-4(fp)
   4a2d4:	e0bfff17 	ldw	r2,-4(fp)
}
   4a2d8:	e037883a 	mov	sp,fp
   4a2dc:	dfc00117 	ldw	ra,4(sp)
   4a2e0:	df000017 	ldw	fp,0(sp)
   4a2e4:	dec00204 	addi	sp,sp,8
   4a2e8:	f800283a 	ret

0004a2ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4a2ec:	defffd04 	addi	sp,sp,-12
   4a2f0:	dfc00215 	stw	ra,8(sp)
   4a2f4:	df000115 	stw	fp,4(sp)
   4a2f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4a2fc:	0009883a 	mov	r4,zero
   4a300:	004a7b40 	call	4a7b4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4a304:	004a7e80 	call	4a7e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4a308:	010001b4 	movhi	r4,6
   4a30c:	2100e304 	addi	r4,r4,908
   4a310:	014001b4 	movhi	r5,6
   4a314:	2940e304 	addi	r5,r5,908
   4a318:	018001b4 	movhi	r6,6
   4a31c:	3180e304 	addi	r6,r6,908
   4a320:	004bb340 	call	4bb34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4a324:	004b6ac0 	call	4b6ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4a328:	01000174 	movhi	r4,5
   4a32c:	212dc404 	addi	r4,r4,-18672
   4a330:	004c3300 	call	4c330 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4a334:	d1201c17 	ldw	r4,-32656(gp)
   4a338:	d1601d17 	ldw	r5,-32652(gp)
   4a33c:	d1a01e17 	ldw	r6,-32648(gp)
   4a340:	00404940 	call	40494 <main>
   4a344:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4a348:	01000044 	movi	r4,1
   4a34c:	0049cd40 	call	49cd4 <close>
  exit (result);
   4a350:	e13fff17 	ldw	r4,-4(fp)
   4a354:	004c3440 	call	4c344 <exit>

0004a358 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4a358:	defffe04 	addi	sp,sp,-8
   4a35c:	df000115 	stw	fp,4(sp)
   4a360:	df000104 	addi	fp,sp,4
   4a364:	e13fff15 	stw	r4,-4(fp)
}
   4a368:	e037883a 	mov	sp,fp
   4a36c:	df000017 	ldw	fp,0(sp)
   4a370:	dec00104 	addi	sp,sp,4
   4a374:	f800283a 	ret

0004a378 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4a378:	defffe04 	addi	sp,sp,-8
   4a37c:	df000115 	stw	fp,4(sp)
   4a380:	df000104 	addi	fp,sp,4
   4a384:	e13fff15 	stw	r4,-4(fp)
}
   4a388:	e037883a 	mov	sp,fp
   4a38c:	df000017 	ldw	fp,0(sp)
   4a390:	dec00104 	addi	sp,sp,4
   4a394:	f800283a 	ret

0004a398 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4a398:	defff704 	addi	sp,sp,-36
   4a39c:	dfc00815 	stw	ra,32(sp)
   4a3a0:	df000715 	stw	fp,28(sp)
   4a3a4:	df000704 	addi	fp,sp,28
   4a3a8:	e13ffb15 	stw	r4,-20(fp)
   4a3ac:	e17ffc15 	stw	r5,-16(fp)
   4a3b0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a3b4:	e0bffb17 	ldw	r2,-20(fp)
   4a3b8:	1004803a 	cmplt	r2,r2,zero
   4a3bc:	1000081e 	bne	r2,zero,4a3e0 <read+0x48>
   4a3c0:	e0bffb17 	ldw	r2,-20(fp)
   4a3c4:	10800324 	muli	r2,r2,12
   4a3c8:	1007883a 	mov	r3,r2
   4a3cc:	008001b4 	movhi	r2,6
   4a3d0:	1082fc04 	addi	r2,r2,3056
   4a3d4:	1887883a 	add	r3,r3,r2
   4a3d8:	e0ffff15 	stw	r3,-4(fp)
   4a3dc:	00000106 	br	4a3e4 <read+0x4c>
   4a3e0:	e03fff15 	stw	zero,-4(fp)
   4a3e4:	e0bfff17 	ldw	r2,-4(fp)
   4a3e8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a3ec:	e0bffa17 	ldw	r2,-24(fp)
   4a3f0:	1005003a 	cmpeq	r2,r2,zero
   4a3f4:	1000241e 	bne	r2,zero,4a488 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4a3f8:	e0bffa17 	ldw	r2,-24(fp)
   4a3fc:	10800217 	ldw	r2,8(r2)
   4a400:	108000cc 	andi	r2,r2,3
   4a404:	10800060 	cmpeqi	r2,r2,1
   4a408:	10001a1e 	bne	r2,zero,4a474 <read+0xdc>
   4a40c:	e0bffa17 	ldw	r2,-24(fp)
   4a410:	10800017 	ldw	r2,0(r2)
   4a414:	10800517 	ldw	r2,20(r2)
   4a418:	1005003a 	cmpeq	r2,r2,zero
   4a41c:	1000151e 	bne	r2,zero,4a474 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4a420:	e0bffa17 	ldw	r2,-24(fp)
   4a424:	10800017 	ldw	r2,0(r2)
   4a428:	10800517 	ldw	r2,20(r2)
   4a42c:	e17ffc17 	ldw	r5,-16(fp)
   4a430:	e1bffd17 	ldw	r6,-12(fp)
   4a434:	e13ffa17 	ldw	r4,-24(fp)
   4a438:	103ee83a 	callr	r2
   4a43c:	e0bff915 	stw	r2,-28(fp)
   4a440:	e0bff917 	ldw	r2,-28(fp)
   4a444:	1004403a 	cmpge	r2,r2,zero
   4a448:	1000071e 	bne	r2,zero,4a468 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   4a44c:	004a4b80 	call	4a4b8 <alt_get_errno>
   4a450:	e0fff917 	ldw	r3,-28(fp)
   4a454:	00c7c83a 	sub	r3,zero,r3
   4a458:	10c00015 	stw	r3,0(r2)
          return -1;
   4a45c:	00bfffc4 	movi	r2,-1
   4a460:	e0bffe15 	stw	r2,-8(fp)
   4a464:	00000e06 	br	4a4a0 <read+0x108>
        }
        return rval;
   4a468:	e0bff917 	ldw	r2,-28(fp)
   4a46c:	e0bffe15 	stw	r2,-8(fp)
   4a470:	00000b06 	br	4a4a0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4a474:	004a4b80 	call	4a4b8 <alt_get_errno>
   4a478:	1007883a 	mov	r3,r2
   4a47c:	00800344 	movi	r2,13
   4a480:	18800015 	stw	r2,0(r3)
   4a484:	00000406 	br	4a498 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4a488:	004a4b80 	call	4a4b8 <alt_get_errno>
   4a48c:	1007883a 	mov	r3,r2
   4a490:	00801444 	movi	r2,81
   4a494:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4a498:	00bfffc4 	movi	r2,-1
   4a49c:	e0bffe15 	stw	r2,-8(fp)
   4a4a0:	e0bffe17 	ldw	r2,-8(fp)
}
   4a4a4:	e037883a 	mov	sp,fp
   4a4a8:	dfc00117 	ldw	ra,4(sp)
   4a4ac:	df000017 	ldw	fp,0(sp)
   4a4b0:	dec00204 	addi	sp,sp,8
   4a4b4:	f800283a 	ret

0004a4b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a4b8:	defffd04 	addi	sp,sp,-12
   4a4bc:	dfc00215 	stw	ra,8(sp)
   4a4c0:	df000115 	stw	fp,4(sp)
   4a4c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a4c8:	008001b4 	movhi	r2,6
   4a4cc:	10877f04 	addi	r2,r2,7676
   4a4d0:	10800017 	ldw	r2,0(r2)
   4a4d4:	1005003a 	cmpeq	r2,r2,zero
   4a4d8:	1000061e 	bne	r2,zero,4a4f4 <alt_get_errno+0x3c>
   4a4dc:	008001b4 	movhi	r2,6
   4a4e0:	10877f04 	addi	r2,r2,7676
   4a4e4:	10800017 	ldw	r2,0(r2)
   4a4e8:	103ee83a 	callr	r2
   4a4ec:	e0bfff15 	stw	r2,-4(fp)
   4a4f0:	00000306 	br	4a500 <alt_get_errno+0x48>
   4a4f4:	008001b4 	movhi	r2,6
   4a4f8:	10878f04 	addi	r2,r2,7740
   4a4fc:	e0bfff15 	stw	r2,-4(fp)
   4a500:	e0bfff17 	ldw	r2,-4(fp)
}
   4a504:	e037883a 	mov	sp,fp
   4a508:	dfc00117 	ldw	ra,4(sp)
   4a50c:	df000017 	ldw	fp,0(sp)
   4a510:	dec00204 	addi	sp,sp,8
   4a514:	f800283a 	ret

0004a518 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4a518:	defffe04 	addi	sp,sp,-8
   4a51c:	df000115 	stw	fp,4(sp)
   4a520:	df000104 	addi	fp,sp,4
   4a524:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4a528:	e0bfff17 	ldw	r2,-4(fp)
   4a52c:	108000d0 	cmplti	r2,r2,3
   4a530:	10000d1e 	bne	r2,zero,4a568 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4a534:	e0bfff17 	ldw	r2,-4(fp)
   4a538:	00c001b4 	movhi	r3,6
   4a53c:	18c2fc04 	addi	r3,r3,3056
   4a540:	10800324 	muli	r2,r2,12
   4a544:	10c5883a 	add	r2,r2,r3
   4a548:	10800204 	addi	r2,r2,8
   4a54c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4a550:	e0bfff17 	ldw	r2,-4(fp)
   4a554:	00c001b4 	movhi	r3,6
   4a558:	18c2fc04 	addi	r3,r3,3056
   4a55c:	10800324 	muli	r2,r2,12
   4a560:	10c5883a 	add	r2,r2,r3
   4a564:	10000015 	stw	zero,0(r2)
  }
}
   4a568:	e037883a 	mov	sp,fp
   4a56c:	df000017 	ldw	fp,0(sp)
   4a570:	dec00104 	addi	sp,sp,4
   4a574:	f800283a 	ret

0004a578 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4a578:	defff804 	addi	sp,sp,-32
   4a57c:	df000715 	stw	fp,28(sp)
   4a580:	df000704 	addi	fp,sp,28
   4a584:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4a588:	0005303a 	rdctl	r2,status
   4a58c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4a590:	e0fffb17 	ldw	r3,-20(fp)
   4a594:	00bfff84 	movi	r2,-2
   4a598:	1884703a 	and	r2,r3,r2
   4a59c:	1001703a 	wrctl	status,r2
  
  return context;
   4a5a0:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4a5a4:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4a5a8:	d0a00c17 	ldw	r2,-32720(gp)
   4a5ac:	10c000c4 	addi	r3,r2,3
   4a5b0:	00bfff04 	movi	r2,-4
   4a5b4:	1884703a 	and	r2,r3,r2
   4a5b8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4a5bc:	d0e00c17 	ldw	r3,-32720(gp)
   4a5c0:	e0bffe17 	ldw	r2,-8(fp)
   4a5c4:	1887883a 	add	r3,r3,r2
   4a5c8:	008001f4 	movhi	r2,7
   4a5cc:	10a00004 	addi	r2,r2,-32768
   4a5d0:	10c0072e 	bgeu	r2,r3,4a5f0 <sbrk+0x78>
   4a5d4:	e0bffd17 	ldw	r2,-12(fp)
   4a5d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4a5dc:	e0bffa17 	ldw	r2,-24(fp)
   4a5e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4a5e4:	00bfffc4 	movi	r2,-1
   4a5e8:	e0bfff15 	stw	r2,-4(fp)
   4a5ec:	00000c06 	br	4a620 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4a5f0:	d0a00c17 	ldw	r2,-32720(gp)
   4a5f4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4a5f8:	d0e00c17 	ldw	r3,-32720(gp)
   4a5fc:	e0bffe17 	ldw	r2,-8(fp)
   4a600:	1885883a 	add	r2,r3,r2
   4a604:	d0a00c15 	stw	r2,-32720(gp)
   4a608:	e0bffd17 	ldw	r2,-12(fp)
   4a60c:	e0bff915 	stw	r2,-28(fp)
   4a610:	e0bff917 	ldw	r2,-28(fp)
   4a614:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4a618:	e0bffc17 	ldw	r2,-16(fp)
   4a61c:	e0bfff15 	stw	r2,-4(fp)
   4a620:	e0bfff17 	ldw	r2,-4(fp)
} 
   4a624:	e037883a 	mov	sp,fp
   4a628:	df000017 	ldw	fp,0(sp)
   4a62c:	dec00104 	addi	sp,sp,4
   4a630:	f800283a 	ret

0004a634 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4a634:	defff704 	addi	sp,sp,-36
   4a638:	dfc00815 	stw	ra,32(sp)
   4a63c:	df000715 	stw	fp,28(sp)
   4a640:	df000704 	addi	fp,sp,28
   4a644:	e13ffb15 	stw	r4,-20(fp)
   4a648:	e17ffc15 	stw	r5,-16(fp)
   4a64c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a650:	e0bffb17 	ldw	r2,-20(fp)
   4a654:	1004803a 	cmplt	r2,r2,zero
   4a658:	1000081e 	bne	r2,zero,4a67c <write+0x48>
   4a65c:	e0bffb17 	ldw	r2,-20(fp)
   4a660:	10800324 	muli	r2,r2,12
   4a664:	1007883a 	mov	r3,r2
   4a668:	008001b4 	movhi	r2,6
   4a66c:	1082fc04 	addi	r2,r2,3056
   4a670:	1887883a 	add	r3,r3,r2
   4a674:	e0ffff15 	stw	r3,-4(fp)
   4a678:	00000106 	br	4a680 <write+0x4c>
   4a67c:	e03fff15 	stw	zero,-4(fp)
   4a680:	e0bfff17 	ldw	r2,-4(fp)
   4a684:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4a688:	e0bffa17 	ldw	r2,-24(fp)
   4a68c:	1005003a 	cmpeq	r2,r2,zero
   4a690:	1000241e 	bne	r2,zero,4a724 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4a694:	e0bffa17 	ldw	r2,-24(fp)
   4a698:	10800217 	ldw	r2,8(r2)
   4a69c:	108000cc 	andi	r2,r2,3
   4a6a0:	1005003a 	cmpeq	r2,r2,zero
   4a6a4:	10001a1e 	bne	r2,zero,4a710 <write+0xdc>
   4a6a8:	e0bffa17 	ldw	r2,-24(fp)
   4a6ac:	10800017 	ldw	r2,0(r2)
   4a6b0:	10800617 	ldw	r2,24(r2)
   4a6b4:	1005003a 	cmpeq	r2,r2,zero
   4a6b8:	1000151e 	bne	r2,zero,4a710 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4a6bc:	e0bffa17 	ldw	r2,-24(fp)
   4a6c0:	10800017 	ldw	r2,0(r2)
   4a6c4:	10800617 	ldw	r2,24(r2)
   4a6c8:	e17ffc17 	ldw	r5,-16(fp)
   4a6cc:	e1bffd17 	ldw	r6,-12(fp)
   4a6d0:	e13ffa17 	ldw	r4,-24(fp)
   4a6d4:	103ee83a 	callr	r2
   4a6d8:	e0bff915 	stw	r2,-28(fp)
   4a6dc:	e0bff917 	ldw	r2,-28(fp)
   4a6e0:	1004403a 	cmpge	r2,r2,zero
   4a6e4:	1000071e 	bne	r2,zero,4a704 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   4a6e8:	004a7540 	call	4a754 <alt_get_errno>
   4a6ec:	e0fff917 	ldw	r3,-28(fp)
   4a6f0:	00c7c83a 	sub	r3,zero,r3
   4a6f4:	10c00015 	stw	r3,0(r2)
        return -1;
   4a6f8:	00bfffc4 	movi	r2,-1
   4a6fc:	e0bffe15 	stw	r2,-8(fp)
   4a700:	00000e06 	br	4a73c <write+0x108>
      }
      return rval;
   4a704:	e0bff917 	ldw	r2,-28(fp)
   4a708:	e0bffe15 	stw	r2,-8(fp)
   4a70c:	00000b06 	br	4a73c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4a710:	004a7540 	call	4a754 <alt_get_errno>
   4a714:	1007883a 	mov	r3,r2
   4a718:	00800344 	movi	r2,13
   4a71c:	18800015 	stw	r2,0(r3)
   4a720:	00000406 	br	4a734 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4a724:	004a7540 	call	4a754 <alt_get_errno>
   4a728:	1007883a 	mov	r3,r2
   4a72c:	00801444 	movi	r2,81
   4a730:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4a734:	00bfffc4 	movi	r2,-1
   4a738:	e0bffe15 	stw	r2,-8(fp)
   4a73c:	e0bffe17 	ldw	r2,-8(fp)
}
   4a740:	e037883a 	mov	sp,fp
   4a744:	dfc00117 	ldw	ra,4(sp)
   4a748:	df000017 	ldw	fp,0(sp)
   4a74c:	dec00204 	addi	sp,sp,8
   4a750:	f800283a 	ret

0004a754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a754:	defffd04 	addi	sp,sp,-12
   4a758:	dfc00215 	stw	ra,8(sp)
   4a75c:	df000115 	stw	fp,4(sp)
   4a760:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a764:	008001b4 	movhi	r2,6
   4a768:	10877f04 	addi	r2,r2,7676
   4a76c:	10800017 	ldw	r2,0(r2)
   4a770:	1005003a 	cmpeq	r2,r2,zero
   4a774:	1000061e 	bne	r2,zero,4a790 <alt_get_errno+0x3c>
   4a778:	008001b4 	movhi	r2,6
   4a77c:	10877f04 	addi	r2,r2,7676
   4a780:	10800017 	ldw	r2,0(r2)
   4a784:	103ee83a 	callr	r2
   4a788:	e0bfff15 	stw	r2,-4(fp)
   4a78c:	00000306 	br	4a79c <alt_get_errno+0x48>
   4a790:	008001b4 	movhi	r2,6
   4a794:	10878f04 	addi	r2,r2,7740
   4a798:	e0bfff15 	stw	r2,-4(fp)
   4a79c:	e0bfff17 	ldw	r2,-4(fp)
}
   4a7a0:	e037883a 	mov	sp,fp
   4a7a4:	dfc00117 	ldw	ra,4(sp)
   4a7a8:	df000017 	ldw	fp,0(sp)
   4a7ac:	dec00204 	addi	sp,sp,8
   4a7b0:	f800283a 	ret

0004a7b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4a7b4:	defffd04 	addi	sp,sp,-12
   4a7b8:	dfc00215 	stw	ra,8(sp)
   4a7bc:	df000115 	stw	fp,4(sp)
   4a7c0:	df000104 	addi	fp,sp,4
   4a7c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU0, cpu0);
   4a7c8:	004c0140 	call	4c014 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4a7cc:	00800044 	movi	r2,1
   4a7d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4a7d4:	e037883a 	mov	sp,fp
   4a7d8:	dfc00117 	ldw	ra,4(sp)
   4a7dc:	df000017 	ldw	fp,0(sp)
   4a7e0:	dec00204 	addi	sp,sp,8
   4a7e4:	f800283a 	ret

0004a7e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4a7e8:	defffe04 	addi	sp,sp,-8
   4a7ec:	dfc00115 	stw	ra,4(sp)
   4a7f0:	df000015 	stw	fp,0(sp)
   4a7f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
   4a7f8:	01000234 	movhi	r4,8
   4a7fc:	21040004 	addi	r4,r4,4096
   4a800:	000b883a 	mov	r5,zero
   4a804:	01800044 	movi	r6,1
   4a808:	01c0fa04 	movi	r7,1000
   4a80c:	004b3980 	call	4b398 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   4a810:	010001b4 	movhi	r4,6
   4a814:	21036604 	addi	r4,r4,3480
   4a818:	000b883a 	mov	r5,zero
   4a81c:	01800404 	movi	r6,16
   4a820:	004a9c40 	call	4a9c4 <altera_avalon_jtag_uart_init>
   4a824:	010001b4 	movhi	r4,6
   4a828:	21035c04 	addi	r4,r4,3440
   4a82c:	004a8440 	call	4a844 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
   4a830:	e037883a 	mov	sp,fp
   4a834:	dfc00117 	ldw	ra,4(sp)
   4a838:	df000017 	ldw	fp,0(sp)
   4a83c:	dec00204 	addi	sp,sp,8
   4a840:	f800283a 	ret

0004a844 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4a844:	defffd04 	addi	sp,sp,-12
   4a848:	dfc00215 	stw	ra,8(sp)
   4a84c:	df000115 	stw	fp,4(sp)
   4a850:	df000104 	addi	fp,sp,4
   4a854:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4a858:	e13fff17 	ldw	r4,-4(fp)
   4a85c:	014001b4 	movhi	r5,6
   4a860:	29477c04 	addi	r5,r5,7664
   4a864:	004b5980 	call	4b598 <alt_dev_llist_insert>
}
   4a868:	e037883a 	mov	sp,fp
   4a86c:	dfc00117 	ldw	ra,4(sp)
   4a870:	df000017 	ldw	fp,0(sp)
   4a874:	dec00204 	addi	sp,sp,8
   4a878:	f800283a 	ret

0004a87c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4a87c:	defffa04 	addi	sp,sp,-24
   4a880:	dfc00515 	stw	ra,20(sp)
   4a884:	df000415 	stw	fp,16(sp)
   4a888:	df000404 	addi	fp,sp,16
   4a88c:	e13ffd15 	stw	r4,-12(fp)
   4a890:	e17ffe15 	stw	r5,-8(fp)
   4a894:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a898:	e0bffd17 	ldw	r2,-12(fp)
   4a89c:	10800017 	ldw	r2,0(r2)
   4a8a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4a8a4:	e0bffc17 	ldw	r2,-16(fp)
   4a8a8:	11000a04 	addi	r4,r2,40
   4a8ac:	e0bffd17 	ldw	r2,-12(fp)
   4a8b0:	11c00217 	ldw	r7,8(r2)
   4a8b4:	e17ffe17 	ldw	r5,-8(fp)
   4a8b8:	e1bfff17 	ldw	r6,-4(fp)
   4a8bc:	004aec40 	call	4aec4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4a8c0:	e037883a 	mov	sp,fp
   4a8c4:	dfc00117 	ldw	ra,4(sp)
   4a8c8:	df000017 	ldw	fp,0(sp)
   4a8cc:	dec00204 	addi	sp,sp,8
   4a8d0:	f800283a 	ret

0004a8d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4a8d4:	defffa04 	addi	sp,sp,-24
   4a8d8:	dfc00515 	stw	ra,20(sp)
   4a8dc:	df000415 	stw	fp,16(sp)
   4a8e0:	df000404 	addi	fp,sp,16
   4a8e4:	e13ffd15 	stw	r4,-12(fp)
   4a8e8:	e17ffe15 	stw	r5,-8(fp)
   4a8ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a8f0:	e0bffd17 	ldw	r2,-12(fp)
   4a8f4:	10800017 	ldw	r2,0(r2)
   4a8f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4a8fc:	e0bffc17 	ldw	r2,-16(fp)
   4a900:	11000a04 	addi	r4,r2,40
   4a904:	e0bffd17 	ldw	r2,-12(fp)
   4a908:	11c00217 	ldw	r7,8(r2)
   4a90c:	e17ffe17 	ldw	r5,-8(fp)
   4a910:	e1bfff17 	ldw	r6,-4(fp)
   4a914:	004b0e80 	call	4b0e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4a918:	e037883a 	mov	sp,fp
   4a91c:	dfc00117 	ldw	ra,4(sp)
   4a920:	df000017 	ldw	fp,0(sp)
   4a924:	dec00204 	addi	sp,sp,8
   4a928:	f800283a 	ret

0004a92c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4a92c:	defffc04 	addi	sp,sp,-16
   4a930:	dfc00315 	stw	ra,12(sp)
   4a934:	df000215 	stw	fp,8(sp)
   4a938:	df000204 	addi	fp,sp,8
   4a93c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4a940:	e0bfff17 	ldw	r2,-4(fp)
   4a944:	10800017 	ldw	r2,0(r2)
   4a948:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4a94c:	e0bffe17 	ldw	r2,-8(fp)
   4a950:	11000a04 	addi	r4,r2,40
   4a954:	e0bfff17 	ldw	r2,-4(fp)
   4a958:	11400217 	ldw	r5,8(r2)
   4a95c:	004ad5c0 	call	4ad5c <altera_avalon_jtag_uart_close>
}
   4a960:	e037883a 	mov	sp,fp
   4a964:	dfc00117 	ldw	ra,4(sp)
   4a968:	df000017 	ldw	fp,0(sp)
   4a96c:	dec00204 	addi	sp,sp,8
   4a970:	f800283a 	ret

0004a974 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4a974:	defffa04 	addi	sp,sp,-24
   4a978:	dfc00515 	stw	ra,20(sp)
   4a97c:	df000415 	stw	fp,16(sp)
   4a980:	df000404 	addi	fp,sp,16
   4a984:	e13ffd15 	stw	r4,-12(fp)
   4a988:	e17ffe15 	stw	r5,-8(fp)
   4a98c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4a990:	e0bffd17 	ldw	r2,-12(fp)
   4a994:	10800017 	ldw	r2,0(r2)
   4a998:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4a99c:	e0bffc17 	ldw	r2,-16(fp)
   4a9a0:	11000a04 	addi	r4,r2,40
   4a9a4:	e17ffe17 	ldw	r5,-8(fp)
   4a9a8:	e1bfff17 	ldw	r6,-4(fp)
   4a9ac:	004add00 	call	4add0 <altera_avalon_jtag_uart_ioctl>
}
   4a9b0:	e037883a 	mov	sp,fp
   4a9b4:	dfc00117 	ldw	ra,4(sp)
   4a9b8:	df000017 	ldw	fp,0(sp)
   4a9bc:	dec00204 	addi	sp,sp,8
   4a9c0:	f800283a 	ret

0004a9c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4a9c4:	defffa04 	addi	sp,sp,-24
   4a9c8:	dfc00515 	stw	ra,20(sp)
   4a9cc:	df000415 	stw	fp,16(sp)
   4a9d0:	df000404 	addi	fp,sp,16
   4a9d4:	e13ffd15 	stw	r4,-12(fp)
   4a9d8:	e17ffe15 	stw	r5,-8(fp)
   4a9dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4a9e0:	e0fffd17 	ldw	r3,-12(fp)
   4a9e4:	00800044 	movi	r2,1
   4a9e8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4a9ec:	e0bffd17 	ldw	r2,-12(fp)
   4a9f0:	10800017 	ldw	r2,0(r2)
   4a9f4:	11000104 	addi	r4,r2,4
   4a9f8:	e0bffd17 	ldw	r2,-12(fp)
   4a9fc:	10800817 	ldw	r2,32(r2)
   4aa00:	1007883a 	mov	r3,r2
   4aa04:	2005883a 	mov	r2,r4
   4aa08:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4aa0c:	e13ffe17 	ldw	r4,-8(fp)
   4aa10:	e17fff17 	ldw	r5,-4(fp)
   4aa14:	d8000015 	stw	zero,0(sp)
   4aa18:	01800174 	movhi	r6,5
   4aa1c:	31aaa104 	addi	r6,r6,-21884
   4aa20:	e1fffd17 	ldw	r7,-12(fp)
   4aa24:	004b7a40 	call	4b7a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4aa28:	e0bffd17 	ldw	r2,-12(fp)
   4aa2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4aa30:	e0bffd17 	ldw	r2,-12(fp)
   4aa34:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4aa38:	008001b4 	movhi	r2,6
   4aa3c:	10879404 	addi	r2,r2,7760
   4aa40:	10800017 	ldw	r2,0(r2)
   4aa44:	100b883a 	mov	r5,r2
   4aa48:	01800174 	movhi	r6,5
   4aa4c:	31ab2b04 	addi	r6,r6,-21332
   4aa50:	e1fffd17 	ldw	r7,-12(fp)
   4aa54:	004b4280 	call	4b428 <alt_alarm_start>
   4aa58:	1004403a 	cmpge	r2,r2,zero
   4aa5c:	1000041e 	bne	r2,zero,4aa70 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4aa60:	e0fffd17 	ldw	r3,-12(fp)
   4aa64:	00a00034 	movhi	r2,32768
   4aa68:	10bfffc4 	addi	r2,r2,-1
   4aa6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4aa70:	e037883a 	mov	sp,fp
   4aa74:	dfc00117 	ldw	ra,4(sp)
   4aa78:	df000017 	ldw	fp,0(sp)
   4aa7c:	dec00204 	addi	sp,sp,8
   4aa80:	f800283a 	ret

0004aa84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4aa84:	defff804 	addi	sp,sp,-32
   4aa88:	df000715 	stw	fp,28(sp)
   4aa8c:	df000704 	addi	fp,sp,28
   4aa90:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4aa94:	e0bfff17 	ldw	r2,-4(fp)
   4aa98:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4aa9c:	e0bffe17 	ldw	r2,-8(fp)
   4aaa0:	10800017 	ldw	r2,0(r2)
   4aaa4:	e0bffd15 	stw	r2,-12(fp)
   4aaa8:	00000006 	br	4aaac <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4aaac:	e0bffd17 	ldw	r2,-12(fp)
   4aab0:	10800104 	addi	r2,r2,4
   4aab4:	10800037 	ldwio	r2,0(r2)
   4aab8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4aabc:	e0bffc17 	ldw	r2,-16(fp)
   4aac0:	1080c00c 	andi	r2,r2,768
   4aac4:	1005003a 	cmpeq	r2,r2,zero
   4aac8:	1000741e 	bne	r2,zero,4ac9c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4aacc:	e0bffc17 	ldw	r2,-16(fp)
   4aad0:	1080400c 	andi	r2,r2,256
   4aad4:	1005003a 	cmpeq	r2,r2,zero
   4aad8:	1000351e 	bne	r2,zero,4abb0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4aadc:	00800074 	movhi	r2,1
   4aae0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4aae4:	e0bffe17 	ldw	r2,-8(fp)
   4aae8:	10800a17 	ldw	r2,40(r2)
   4aaec:	10800044 	addi	r2,r2,1
   4aaf0:	1081ffcc 	andi	r2,r2,2047
   4aaf4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4aaf8:	e0bffe17 	ldw	r2,-8(fp)
   4aafc:	10c00b17 	ldw	r3,44(r2)
   4ab00:	e0bffa17 	ldw	r2,-24(fp)
   4ab04:	18801626 	beq	r3,r2,4ab60 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ab08:	e0bffd17 	ldw	r2,-12(fp)
   4ab0c:	10800037 	ldwio	r2,0(r2)
   4ab10:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ab14:	e0bffb17 	ldw	r2,-20(fp)
   4ab18:	10a0000c 	andi	r2,r2,32768
   4ab1c:	1005003a 	cmpeq	r2,r2,zero
   4ab20:	10000f1e 	bne	r2,zero,4ab60 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4ab24:	e0bffe17 	ldw	r2,-8(fp)
   4ab28:	10c00a17 	ldw	r3,40(r2)
   4ab2c:	e0bffb17 	ldw	r2,-20(fp)
   4ab30:	1009883a 	mov	r4,r2
   4ab34:	e0bffe17 	ldw	r2,-8(fp)
   4ab38:	1885883a 	add	r2,r3,r2
   4ab3c:	10800e04 	addi	r2,r2,56
   4ab40:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ab44:	e0bffe17 	ldw	r2,-8(fp)
   4ab48:	10800a17 	ldw	r2,40(r2)
   4ab4c:	10800044 	addi	r2,r2,1
   4ab50:	10c1ffcc 	andi	r3,r2,2047
   4ab54:	e0bffe17 	ldw	r2,-8(fp)
   4ab58:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4ab5c:	003fe106 	br	4aae4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4ab60:	e0bffb17 	ldw	r2,-20(fp)
   4ab64:	10bfffec 	andhi	r2,r2,65535
   4ab68:	1005003a 	cmpeq	r2,r2,zero
   4ab6c:	1000101e 	bne	r2,zero,4abb0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ab70:	e0bffe17 	ldw	r2,-8(fp)
   4ab74:	10c00817 	ldw	r3,32(r2)
   4ab78:	00bfff84 	movi	r2,-2
   4ab7c:	1886703a 	and	r3,r3,r2
   4ab80:	e0bffe17 	ldw	r2,-8(fp)
   4ab84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4ab88:	e0bffd17 	ldw	r2,-12(fp)
   4ab8c:	11000104 	addi	r4,r2,4
   4ab90:	e0bffe17 	ldw	r2,-8(fp)
   4ab94:	10800817 	ldw	r2,32(r2)
   4ab98:	1007883a 	mov	r3,r2
   4ab9c:	2005883a 	mov	r2,r4
   4aba0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4aba4:	e0bffd17 	ldw	r2,-12(fp)
   4aba8:	10800104 	addi	r2,r2,4
   4abac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4abb0:	e0bffc17 	ldw	r2,-16(fp)
   4abb4:	1080800c 	andi	r2,r2,512
   4abb8:	1005003a 	cmpeq	r2,r2,zero
   4abbc:	103fbb1e 	bne	r2,zero,4aaac <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4abc0:	e0bffc17 	ldw	r2,-16(fp)
   4abc4:	10bfffec 	andhi	r2,r2,65535
   4abc8:	1004d43a 	srli	r2,r2,16
   4abcc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4abd0:	00001506 	br	4ac28 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4abd4:	e13ffd17 	ldw	r4,-12(fp)
   4abd8:	e0bffe17 	ldw	r2,-8(fp)
   4abdc:	10c00d17 	ldw	r3,52(r2)
   4abe0:	e0bffe17 	ldw	r2,-8(fp)
   4abe4:	1885883a 	add	r2,r3,r2
   4abe8:	10820e04 	addi	r2,r2,2104
   4abec:	10800003 	ldbu	r2,0(r2)
   4abf0:	10c03fcc 	andi	r3,r2,255
   4abf4:	18c0201c 	xori	r3,r3,128
   4abf8:	18ffe004 	addi	r3,r3,-128
   4abfc:	2005883a 	mov	r2,r4
   4ac00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ac04:	e0bffe17 	ldw	r2,-8(fp)
   4ac08:	10800d17 	ldw	r2,52(r2)
   4ac0c:	10800044 	addi	r2,r2,1
   4ac10:	10c1ffcc 	andi	r3,r2,2047
   4ac14:	e0bffe17 	ldw	r2,-8(fp)
   4ac18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4ac1c:	e0bff917 	ldw	r2,-28(fp)
   4ac20:	10bfffc4 	addi	r2,r2,-1
   4ac24:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ac28:	e0bff917 	ldw	r2,-28(fp)
   4ac2c:	1005003a 	cmpeq	r2,r2,zero
   4ac30:	1000051e 	bne	r2,zero,4ac48 <altera_avalon_jtag_uart_irq+0x1c4>
   4ac34:	e0bffe17 	ldw	r2,-8(fp)
   4ac38:	10c00d17 	ldw	r3,52(r2)
   4ac3c:	e0bffe17 	ldw	r2,-8(fp)
   4ac40:	10800c17 	ldw	r2,48(r2)
   4ac44:	18bfe31e 	bne	r3,r2,4abd4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4ac48:	e0bff917 	ldw	r2,-28(fp)
   4ac4c:	1005003a 	cmpeq	r2,r2,zero
   4ac50:	103f961e 	bne	r2,zero,4aaac <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4ac54:	e0bffe17 	ldw	r2,-8(fp)
   4ac58:	10c00817 	ldw	r3,32(r2)
   4ac5c:	00bfff44 	movi	r2,-3
   4ac60:	1886703a 	and	r3,r3,r2
   4ac64:	e0bffe17 	ldw	r2,-8(fp)
   4ac68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4ac6c:	e0bffe17 	ldw	r2,-8(fp)
   4ac70:	10800017 	ldw	r2,0(r2)
   4ac74:	11000104 	addi	r4,r2,4
   4ac78:	e0bffe17 	ldw	r2,-8(fp)
   4ac7c:	10800817 	ldw	r2,32(r2)
   4ac80:	1007883a 	mov	r3,r2
   4ac84:	2005883a 	mov	r2,r4
   4ac88:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ac8c:	e0bffd17 	ldw	r2,-12(fp)
   4ac90:	10800104 	addi	r2,r2,4
   4ac94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4ac98:	003f8406 	br	4aaac <altera_avalon_jtag_uart_irq+0x28>
}
   4ac9c:	e037883a 	mov	sp,fp
   4aca0:	df000017 	ldw	fp,0(sp)
   4aca4:	dec00104 	addi	sp,sp,4
   4aca8:	f800283a 	ret

0004acac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4acac:	defffc04 	addi	sp,sp,-16
   4acb0:	df000315 	stw	fp,12(sp)
   4acb4:	df000304 	addi	fp,sp,12
   4acb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4acbc:	e0bfff17 	ldw	r2,-4(fp)
   4acc0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4acc4:	e0bffe17 	ldw	r2,-8(fp)
   4acc8:	10800017 	ldw	r2,0(r2)
   4accc:	10800104 	addi	r2,r2,4
   4acd0:	10800037 	ldwio	r2,0(r2)
   4acd4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4acd8:	e0bffd17 	ldw	r2,-12(fp)
   4acdc:	1081000c 	andi	r2,r2,1024
   4ace0:	1005003a 	cmpeq	r2,r2,zero
   4ace4:	10000c1e 	bne	r2,zero,4ad18 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4ace8:	e0bffe17 	ldw	r2,-8(fp)
   4acec:	10800017 	ldw	r2,0(r2)
   4acf0:	11000104 	addi	r4,r2,4
   4acf4:	e0bffe17 	ldw	r2,-8(fp)
   4acf8:	10800817 	ldw	r2,32(r2)
   4acfc:	10810014 	ori	r2,r2,1024
   4ad00:	1007883a 	mov	r3,r2
   4ad04:	2005883a 	mov	r2,r4
   4ad08:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4ad0c:	e0bffe17 	ldw	r2,-8(fp)
   4ad10:	10000915 	stw	zero,36(r2)
   4ad14:	00000a06 	br	4ad40 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4ad18:	e0bffe17 	ldw	r2,-8(fp)
   4ad1c:	10c00917 	ldw	r3,36(r2)
   4ad20:	00a00034 	movhi	r2,32768
   4ad24:	10bfff04 	addi	r2,r2,-4
   4ad28:	10c00536 	bltu	r2,r3,4ad40 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4ad2c:	e0bffe17 	ldw	r2,-8(fp)
   4ad30:	10800917 	ldw	r2,36(r2)
   4ad34:	10c00044 	addi	r3,r2,1
   4ad38:	e0bffe17 	ldw	r2,-8(fp)
   4ad3c:	10c00915 	stw	r3,36(r2)
   4ad40:	008001b4 	movhi	r2,6
   4ad44:	10879404 	addi	r2,r2,7760
   4ad48:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4ad4c:	e037883a 	mov	sp,fp
   4ad50:	df000017 	ldw	fp,0(sp)
   4ad54:	dec00104 	addi	sp,sp,4
   4ad58:	f800283a 	ret

0004ad5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4ad5c:	defffc04 	addi	sp,sp,-16
   4ad60:	df000315 	stw	fp,12(sp)
   4ad64:	df000304 	addi	fp,sp,12
   4ad68:	e13ffd15 	stw	r4,-12(fp)
   4ad6c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ad70:	00000706 	br	4ad90 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4ad74:	e0bffe17 	ldw	r2,-8(fp)
   4ad78:	1090000c 	andi	r2,r2,16384
   4ad7c:	1005003a 	cmpeq	r2,r2,zero
   4ad80:	1000031e 	bne	r2,zero,4ad90 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4ad84:	00bffd44 	movi	r2,-11
   4ad88:	e0bfff15 	stw	r2,-4(fp)
   4ad8c:	00000b06 	br	4adbc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ad90:	e0bffd17 	ldw	r2,-12(fp)
   4ad94:	10c00d17 	ldw	r3,52(r2)
   4ad98:	e0bffd17 	ldw	r2,-12(fp)
   4ad9c:	10800c17 	ldw	r2,48(r2)
   4ada0:	18800526 	beq	r3,r2,4adb8 <altera_avalon_jtag_uart_close+0x5c>
   4ada4:	e0bffd17 	ldw	r2,-12(fp)
   4ada8:	10c00917 	ldw	r3,36(r2)
   4adac:	e0bffd17 	ldw	r2,-12(fp)
   4adb0:	10800117 	ldw	r2,4(r2)
   4adb4:	18bfef36 	bltu	r3,r2,4ad74 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4adb8:	e03fff15 	stw	zero,-4(fp)
   4adbc:	e0bfff17 	ldw	r2,-4(fp)
}
   4adc0:	e037883a 	mov	sp,fp
   4adc4:	df000017 	ldw	fp,0(sp)
   4adc8:	dec00104 	addi	sp,sp,4
   4adcc:	f800283a 	ret

0004add0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4add0:	defff804 	addi	sp,sp,-32
   4add4:	df000715 	stw	fp,28(sp)
   4add8:	df000704 	addi	fp,sp,28
   4addc:	e13ffb15 	stw	r4,-20(fp)
   4ade0:	e17ffc15 	stw	r5,-16(fp)
   4ade4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4ade8:	00bff9c4 	movi	r2,-25
   4adec:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4adf0:	e0bffc17 	ldw	r2,-16(fp)
   4adf4:	e0bfff15 	stw	r2,-4(fp)
   4adf8:	e0ffff17 	ldw	r3,-4(fp)
   4adfc:	189a8060 	cmpeqi	r2,r3,27137
   4ae00:	1000041e 	bne	r2,zero,4ae14 <altera_avalon_jtag_uart_ioctl+0x44>
   4ae04:	e0ffff17 	ldw	r3,-4(fp)
   4ae08:	189a80a0 	cmpeqi	r2,r3,27138
   4ae0c:	10001b1e 	bne	r2,zero,4ae7c <altera_avalon_jtag_uart_ioctl+0xac>
   4ae10:	00002706 	br	4aeb0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4ae14:	e0bffb17 	ldw	r2,-20(fp)
   4ae18:	10c00117 	ldw	r3,4(r2)
   4ae1c:	00a00034 	movhi	r2,32768
   4ae20:	10bfffc4 	addi	r2,r2,-1
   4ae24:	18802226 	beq	r3,r2,4aeb0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4ae28:	e0bffd17 	ldw	r2,-12(fp)
   4ae2c:	10800017 	ldw	r2,0(r2)
   4ae30:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4ae34:	e0bff917 	ldw	r2,-28(fp)
   4ae38:	10800090 	cmplti	r2,r2,2
   4ae3c:	1000071e 	bne	r2,zero,4ae5c <altera_avalon_jtag_uart_ioctl+0x8c>
   4ae40:	e0fff917 	ldw	r3,-28(fp)
   4ae44:	00a00034 	movhi	r2,32768
   4ae48:	10bfffc4 	addi	r2,r2,-1
   4ae4c:	18800326 	beq	r3,r2,4ae5c <altera_avalon_jtag_uart_ioctl+0x8c>
   4ae50:	e0bff917 	ldw	r2,-28(fp)
   4ae54:	e0bffe15 	stw	r2,-8(fp)
   4ae58:	00000306 	br	4ae68 <altera_avalon_jtag_uart_ioctl+0x98>
   4ae5c:	00e00034 	movhi	r3,32768
   4ae60:	18ffff84 	addi	r3,r3,-2
   4ae64:	e0fffe15 	stw	r3,-8(fp)
   4ae68:	e0bffb17 	ldw	r2,-20(fp)
   4ae6c:	e0fffe17 	ldw	r3,-8(fp)
   4ae70:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4ae74:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4ae78:	00000d06 	br	4aeb0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4ae7c:	e0bffb17 	ldw	r2,-20(fp)
   4ae80:	10c00117 	ldw	r3,4(r2)
   4ae84:	00a00034 	movhi	r2,32768
   4ae88:	10bfffc4 	addi	r2,r2,-1
   4ae8c:	18800826 	beq	r3,r2,4aeb0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4ae90:	e13ffd17 	ldw	r4,-12(fp)
   4ae94:	e0bffb17 	ldw	r2,-20(fp)
   4ae98:	10c00917 	ldw	r3,36(r2)
   4ae9c:	e0bffb17 	ldw	r2,-20(fp)
   4aea0:	10800117 	ldw	r2,4(r2)
   4aea4:	1885803a 	cmpltu	r2,r3,r2
   4aea8:	20800015 	stw	r2,0(r4)
      rc = 0;
   4aeac:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4aeb0:	e0bffa17 	ldw	r2,-24(fp)
}
   4aeb4:	e037883a 	mov	sp,fp
   4aeb8:	df000017 	ldw	fp,0(sp)
   4aebc:	dec00104 	addi	sp,sp,4
   4aec0:	f800283a 	ret

0004aec4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4aec4:	defff204 	addi	sp,sp,-56
   4aec8:	dfc00d15 	stw	ra,52(sp)
   4aecc:	df000c15 	stw	fp,48(sp)
   4aed0:	df000c04 	addi	fp,sp,48
   4aed4:	e13ffb15 	stw	r4,-20(fp)
   4aed8:	e17ffc15 	stw	r5,-16(fp)
   4aedc:	e1bffd15 	stw	r6,-12(fp)
   4aee0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4aee4:	e0bffc17 	ldw	r2,-16(fp)
   4aee8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4aeec:	00004806 	br	4b010 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4aef0:	e0bffb17 	ldw	r2,-20(fp)
   4aef4:	10800a17 	ldw	r2,40(r2)
   4aef8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4aefc:	e0bffb17 	ldw	r2,-20(fp)
   4af00:	10800b17 	ldw	r2,44(r2)
   4af04:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4af08:	e0fff717 	ldw	r3,-36(fp)
   4af0c:	e0bff617 	ldw	r2,-40(fp)
   4af10:	18800536 	bltu	r3,r2,4af28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4af14:	e0bff717 	ldw	r2,-36(fp)
   4af18:	e0fff617 	ldw	r3,-40(fp)
   4af1c:	10c5c83a 	sub	r2,r2,r3
   4af20:	e0bff815 	stw	r2,-32(fp)
   4af24:	00000406 	br	4af38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4af28:	00820004 	movi	r2,2048
   4af2c:	e0fff617 	ldw	r3,-40(fp)
   4af30:	10c5c83a 	sub	r2,r2,r3
   4af34:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4af38:	e0bff817 	ldw	r2,-32(fp)
   4af3c:	1005003a 	cmpeq	r2,r2,zero
   4af40:	10001f1e 	bne	r2,zero,4afc0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4af44:	e0fffd17 	ldw	r3,-12(fp)
   4af48:	e0bff817 	ldw	r2,-32(fp)
   4af4c:	1880022e 	bgeu	r3,r2,4af58 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4af50:	e0bffd17 	ldw	r2,-12(fp)
   4af54:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4af58:	e0bffb17 	ldw	r2,-20(fp)
   4af5c:	10c00e04 	addi	r3,r2,56
   4af60:	e0bff617 	ldw	r2,-40(fp)
   4af64:	1887883a 	add	r3,r3,r2
   4af68:	e0bffa17 	ldw	r2,-24(fp)
   4af6c:	1009883a 	mov	r4,r2
   4af70:	180b883a 	mov	r5,r3
   4af74:	e1bff817 	ldw	r6,-32(fp)
   4af78:	00459280 	call	45928 <memcpy>
      ptr   += n;
   4af7c:	e0fff817 	ldw	r3,-32(fp)
   4af80:	e0bffa17 	ldw	r2,-24(fp)
   4af84:	10c5883a 	add	r2,r2,r3
   4af88:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4af8c:	e0fffd17 	ldw	r3,-12(fp)
   4af90:	e0bff817 	ldw	r2,-32(fp)
   4af94:	1885c83a 	sub	r2,r3,r2
   4af98:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4af9c:	e0fff617 	ldw	r3,-40(fp)
   4afa0:	e0bff817 	ldw	r2,-32(fp)
   4afa4:	1885883a 	add	r2,r3,r2
   4afa8:	10c1ffcc 	andi	r3,r2,2047
   4afac:	e0bffb17 	ldw	r2,-20(fp)
   4afb0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4afb4:	e0bffd17 	ldw	r2,-12(fp)
   4afb8:	10800048 	cmpgei	r2,r2,1
   4afbc:	103fcc1e 	bne	r2,zero,4aef0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4afc0:	e0fffa17 	ldw	r3,-24(fp)
   4afc4:	e0bffc17 	ldw	r2,-16(fp)
   4afc8:	1880141e 	bne	r3,r2,4b01c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4afcc:	e0bffe17 	ldw	r2,-8(fp)
   4afd0:	1090000c 	andi	r2,r2,16384
   4afd4:	1004c03a 	cmpne	r2,r2,zero
   4afd8:	1000101e 	bne	r2,zero,4b01c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4afdc:	e0bffb17 	ldw	r2,-20(fp)
   4afe0:	10c00a17 	ldw	r3,40(r2)
   4afe4:	e0bff717 	ldw	r2,-36(fp)
   4afe8:	1880051e 	bne	r3,r2,4b000 <altera_avalon_jtag_uart_read+0x13c>
   4afec:	e0bffb17 	ldw	r2,-20(fp)
   4aff0:	10c00917 	ldw	r3,36(r2)
   4aff4:	e0bffb17 	ldw	r2,-20(fp)
   4aff8:	10800117 	ldw	r2,4(r2)
   4affc:	18bff736 	bltu	r3,r2,4afdc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4b000:	e0bffb17 	ldw	r2,-20(fp)
   4b004:	10c00a17 	ldw	r3,40(r2)
   4b008:	e0bff717 	ldw	r2,-36(fp)
   4b00c:	18800326 	beq	r3,r2,4b01c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4b010:	e0bffd17 	ldw	r2,-12(fp)
   4b014:	10800048 	cmpgei	r2,r2,1
   4b018:	103fb51e 	bne	r2,zero,4aef0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4b01c:	e0fffa17 	ldw	r3,-24(fp)
   4b020:	e0bffc17 	ldw	r2,-16(fp)
   4b024:	18801926 	beq	r3,r2,4b08c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b028:	0005303a 	rdctl	r2,status
   4b02c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b030:	e0fff517 	ldw	r3,-44(fp)
   4b034:	00bfff84 	movi	r2,-2
   4b038:	1884703a 	and	r2,r3,r2
   4b03c:	1001703a 	wrctl	status,r2
  
  return context;
   4b040:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4b044:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b048:	e0bffb17 	ldw	r2,-20(fp)
   4b04c:	10800817 	ldw	r2,32(r2)
   4b050:	10c00054 	ori	r3,r2,1
   4b054:	e0bffb17 	ldw	r2,-20(fp)
   4b058:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b05c:	e0bffb17 	ldw	r2,-20(fp)
   4b060:	10800017 	ldw	r2,0(r2)
   4b064:	11000104 	addi	r4,r2,4
   4b068:	e0bffb17 	ldw	r2,-20(fp)
   4b06c:	10800817 	ldw	r2,32(r2)
   4b070:	1007883a 	mov	r3,r2
   4b074:	2005883a 	mov	r2,r4
   4b078:	10c00035 	stwio	r3,0(r2)
   4b07c:	e0bff917 	ldw	r2,-28(fp)
   4b080:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b084:	e0bff417 	ldw	r2,-48(fp)
   4b088:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4b08c:	e0fffa17 	ldw	r3,-24(fp)
   4b090:	e0bffc17 	ldw	r2,-16(fp)
   4b094:	18800526 	beq	r3,r2,4b0ac <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4b098:	e0fffa17 	ldw	r3,-24(fp)
   4b09c:	e0bffc17 	ldw	r2,-16(fp)
   4b0a0:	1887c83a 	sub	r3,r3,r2
   4b0a4:	e0ffff15 	stw	r3,-4(fp)
   4b0a8:	00000906 	br	4b0d0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4b0ac:	e0bffe17 	ldw	r2,-8(fp)
   4b0b0:	1090000c 	andi	r2,r2,16384
   4b0b4:	1005003a 	cmpeq	r2,r2,zero
   4b0b8:	1000031e 	bne	r2,zero,4b0c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4b0bc:	00bffd44 	movi	r2,-11
   4b0c0:	e0bfff15 	stw	r2,-4(fp)
   4b0c4:	00000206 	br	4b0d0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4b0c8:	00bffec4 	movi	r2,-5
   4b0cc:	e0bfff15 	stw	r2,-4(fp)
   4b0d0:	e0bfff17 	ldw	r2,-4(fp)
}
   4b0d4:	e037883a 	mov	sp,fp
   4b0d8:	dfc00117 	ldw	ra,4(sp)
   4b0dc:	df000017 	ldw	fp,0(sp)
   4b0e0:	dec00204 	addi	sp,sp,8
   4b0e4:	f800283a 	ret

0004b0e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4b0e8:	defff204 	addi	sp,sp,-56
   4b0ec:	dfc00d15 	stw	ra,52(sp)
   4b0f0:	df000c15 	stw	fp,48(sp)
   4b0f4:	df000c04 	addi	fp,sp,48
   4b0f8:	e13ffb15 	stw	r4,-20(fp)
   4b0fc:	e17ffc15 	stw	r5,-16(fp)
   4b100:	e1bffd15 	stw	r6,-12(fp)
   4b104:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4b108:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4b10c:	e0bffc17 	ldw	r2,-16(fp)
   4b110:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b114:	00003a06 	br	4b200 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4b118:	e0bffb17 	ldw	r2,-20(fp)
   4b11c:	10800c17 	ldw	r2,48(r2)
   4b120:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4b124:	e0bffb17 	ldw	r2,-20(fp)
   4b128:	10800d17 	ldw	r2,52(r2)
   4b12c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4b130:	e0fffa17 	ldw	r3,-24(fp)
   4b134:	e0bff917 	ldw	r2,-28(fp)
   4b138:	1880062e 	bgeu	r3,r2,4b154 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4b13c:	e0fff917 	ldw	r3,-28(fp)
   4b140:	e0bffa17 	ldw	r2,-24(fp)
   4b144:	1885c83a 	sub	r2,r3,r2
   4b148:	10bfffc4 	addi	r2,r2,-1
   4b14c:	e0bff815 	stw	r2,-32(fp)
   4b150:	00000c06 	br	4b184 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4b154:	e0bff917 	ldw	r2,-28(fp)
   4b158:	1005003a 	cmpeq	r2,r2,zero
   4b15c:	1000051e 	bne	r2,zero,4b174 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4b160:	00820004 	movi	r2,2048
   4b164:	e0fffa17 	ldw	r3,-24(fp)
   4b168:	10c5c83a 	sub	r2,r2,r3
   4b16c:	e0bff815 	stw	r2,-32(fp)
   4b170:	00000406 	br	4b184 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4b174:	0081ffc4 	movi	r2,2047
   4b178:	e0fffa17 	ldw	r3,-24(fp)
   4b17c:	10c5c83a 	sub	r2,r2,r3
   4b180:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4b184:	e0bff817 	ldw	r2,-32(fp)
   4b188:	1005003a 	cmpeq	r2,r2,zero
   4b18c:	10001f1e 	bne	r2,zero,4b20c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4b190:	e0fffd17 	ldw	r3,-12(fp)
   4b194:	e0bff817 	ldw	r2,-32(fp)
   4b198:	1880022e 	bgeu	r3,r2,4b1a4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4b19c:	e0bffd17 	ldw	r2,-12(fp)
   4b1a0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4b1a4:	e0bffb17 	ldw	r2,-20(fp)
   4b1a8:	10c20e04 	addi	r3,r2,2104
   4b1ac:	e0bffa17 	ldw	r2,-24(fp)
   4b1b0:	1885883a 	add	r2,r3,r2
   4b1b4:	e0fffc17 	ldw	r3,-16(fp)
   4b1b8:	1009883a 	mov	r4,r2
   4b1bc:	180b883a 	mov	r5,r3
   4b1c0:	e1bff817 	ldw	r6,-32(fp)
   4b1c4:	00459280 	call	45928 <memcpy>
      ptr   += n;
   4b1c8:	e0fff817 	ldw	r3,-32(fp)
   4b1cc:	e0bffc17 	ldw	r2,-16(fp)
   4b1d0:	10c5883a 	add	r2,r2,r3
   4b1d4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4b1d8:	e0fffd17 	ldw	r3,-12(fp)
   4b1dc:	e0bff817 	ldw	r2,-32(fp)
   4b1e0:	1885c83a 	sub	r2,r3,r2
   4b1e4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b1e8:	e0fffa17 	ldw	r3,-24(fp)
   4b1ec:	e0bff817 	ldw	r2,-32(fp)
   4b1f0:	1885883a 	add	r2,r3,r2
   4b1f4:	10c1ffcc 	andi	r3,r2,2047
   4b1f8:	e0bffb17 	ldw	r2,-20(fp)
   4b1fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4b200:	e0bffd17 	ldw	r2,-12(fp)
   4b204:	10800048 	cmpgei	r2,r2,1
   4b208:	103fc31e 	bne	r2,zero,4b118 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b20c:	0005303a 	rdctl	r2,status
   4b210:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b214:	e0fff517 	ldw	r3,-44(fp)
   4b218:	00bfff84 	movi	r2,-2
   4b21c:	1884703a 	and	r2,r3,r2
   4b220:	1001703a 	wrctl	status,r2
  
  return context;
   4b224:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4b228:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b22c:	e0bffb17 	ldw	r2,-20(fp)
   4b230:	10800817 	ldw	r2,32(r2)
   4b234:	10c00094 	ori	r3,r2,2
   4b238:	e0bffb17 	ldw	r2,-20(fp)
   4b23c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b240:	e0bffb17 	ldw	r2,-20(fp)
   4b244:	10800017 	ldw	r2,0(r2)
   4b248:	11000104 	addi	r4,r2,4
   4b24c:	e0bffb17 	ldw	r2,-20(fp)
   4b250:	10800817 	ldw	r2,32(r2)
   4b254:	1007883a 	mov	r3,r2
   4b258:	2005883a 	mov	r2,r4
   4b25c:	10c00035 	stwio	r3,0(r2)
   4b260:	e0bff717 	ldw	r2,-36(fp)
   4b264:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b268:	e0bff417 	ldw	r2,-48(fp)
   4b26c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4b270:	e0bffd17 	ldw	r2,-12(fp)
   4b274:	10800050 	cmplti	r2,r2,1
   4b278:	1000111e 	bne	r2,zero,4b2c0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4b27c:	e0bffe17 	ldw	r2,-8(fp)
   4b280:	1090000c 	andi	r2,r2,16384
   4b284:	1004c03a 	cmpne	r2,r2,zero
   4b288:	1000101e 	bne	r2,zero,4b2cc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4b28c:	e0bffb17 	ldw	r2,-20(fp)
   4b290:	10c00d17 	ldw	r3,52(r2)
   4b294:	e0bff917 	ldw	r2,-28(fp)
   4b298:	1880051e 	bne	r3,r2,4b2b0 <altera_avalon_jtag_uart_write+0x1c8>
   4b29c:	e0bffb17 	ldw	r2,-20(fp)
   4b2a0:	10c00917 	ldw	r3,36(r2)
   4b2a4:	e0bffb17 	ldw	r2,-20(fp)
   4b2a8:	10800117 	ldw	r2,4(r2)
   4b2ac:	18bff736 	bltu	r3,r2,4b28c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4b2b0:	e0bffb17 	ldw	r2,-20(fp)
   4b2b4:	10c00d17 	ldw	r3,52(r2)
   4b2b8:	e0bff917 	ldw	r2,-28(fp)
   4b2bc:	18800326 	beq	r3,r2,4b2cc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   4b2c0:	e0bffd17 	ldw	r2,-12(fp)
   4b2c4:	10800048 	cmpgei	r2,r2,1
   4b2c8:	103fcd1e 	bne	r2,zero,4b200 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4b2cc:	e0fffc17 	ldw	r3,-16(fp)
   4b2d0:	e0bff617 	ldw	r2,-40(fp)
   4b2d4:	18800526 	beq	r3,r2,4b2ec <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4b2d8:	e0fffc17 	ldw	r3,-16(fp)
   4b2dc:	e0bff617 	ldw	r2,-40(fp)
   4b2e0:	1887c83a 	sub	r3,r3,r2
   4b2e4:	e0ffff15 	stw	r3,-4(fp)
   4b2e8:	00000906 	br	4b310 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4b2ec:	e0bffe17 	ldw	r2,-8(fp)
   4b2f0:	1090000c 	andi	r2,r2,16384
   4b2f4:	1005003a 	cmpeq	r2,r2,zero
   4b2f8:	1000031e 	bne	r2,zero,4b308 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4b2fc:	00bffd44 	movi	r2,-11
   4b300:	e0bfff15 	stw	r2,-4(fp)
   4b304:	00000206 	br	4b310 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   4b308:	00bffec4 	movi	r2,-5
   4b30c:	e0bfff15 	stw	r2,-4(fp)
   4b310:	e0bfff17 	ldw	r2,-4(fp)
}
   4b314:	e037883a 	mov	sp,fp
   4b318:	dfc00117 	ldw	ra,4(sp)
   4b31c:	df000017 	ldw	fp,0(sp)
   4b320:	dec00204 	addi	sp,sp,8
   4b324:	f800283a 	ret

0004b328 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4b328:	defffa04 	addi	sp,sp,-24
   4b32c:	dfc00515 	stw	ra,20(sp)
   4b330:	df000415 	stw	fp,16(sp)
   4b334:	df000404 	addi	fp,sp,16
   4b338:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4b33c:	e0bfff17 	ldw	r2,-4(fp)
   4b340:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4b344:	e0bfff17 	ldw	r2,-4(fp)
   4b348:	10800104 	addi	r2,r2,4
   4b34c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b350:	0005303a 	rdctl	r2,status
   4b354:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b358:	e0fffd17 	ldw	r3,-12(fp)
   4b35c:	00bfff84 	movi	r2,-2
   4b360:	1884703a 	and	r2,r3,r2
   4b364:	1001703a 	wrctl	status,r2
  
  return context;
   4b368:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4b36c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   4b370:	004bf080 	call	4bf08 <alt_tick>
   4b374:	e0bffe17 	ldw	r2,-8(fp)
   4b378:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b37c:	e0bffc17 	ldw	r2,-16(fp)
   4b380:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4b384:	e037883a 	mov	sp,fp
   4b388:	dfc00117 	ldw	ra,4(sp)
   4b38c:	df000017 	ldw	fp,0(sp)
   4b390:	dec00204 	addi	sp,sp,8
   4b394:	f800283a 	ret

0004b398 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4b398:	defff804 	addi	sp,sp,-32
   4b39c:	dfc00715 	stw	ra,28(sp)
   4b3a0:	df000615 	stw	fp,24(sp)
   4b3a4:	df000604 	addi	fp,sp,24
   4b3a8:	e13ffc15 	stw	r4,-16(fp)
   4b3ac:	e17ffd15 	stw	r5,-12(fp)
   4b3b0:	e1bffe15 	stw	r6,-8(fp)
   4b3b4:	e1ffff15 	stw	r7,-4(fp)
   4b3b8:	e0bfff17 	ldw	r2,-4(fp)
   4b3bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4b3c0:	008001b4 	movhi	r2,6
   4b3c4:	10879404 	addi	r2,r2,7760
   4b3c8:	10800017 	ldw	r2,0(r2)
   4b3cc:	1004c03a 	cmpne	r2,r2,zero
   4b3d0:	1000041e 	bne	r2,zero,4b3e4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   4b3d4:	00c001b4 	movhi	r3,6
   4b3d8:	18c79404 	addi	r3,r3,7760
   4b3dc:	e0bffb17 	ldw	r2,-20(fp)
   4b3e0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4b3e4:	e0bffc17 	ldw	r2,-16(fp)
   4b3e8:	10800104 	addi	r2,r2,4
   4b3ec:	1007883a 	mov	r3,r2
   4b3f0:	008001c4 	movi	r2,7
   4b3f4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4b3f8:	d8000015 	stw	zero,0(sp)
   4b3fc:	e13ffd17 	ldw	r4,-12(fp)
   4b400:	e17ffe17 	ldw	r5,-8(fp)
   4b404:	01800174 	movhi	r6,5
   4b408:	31acca04 	addi	r6,r6,-19672
   4b40c:	e1fffc17 	ldw	r7,-16(fp)
   4b410:	004b7a40 	call	4b7a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4b414:	e037883a 	mov	sp,fp
   4b418:	dfc00117 	ldw	ra,4(sp)
   4b41c:	df000017 	ldw	fp,0(sp)
   4b420:	dec00204 	addi	sp,sp,8
   4b424:	f800283a 	ret

0004b428 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4b428:	defff404 	addi	sp,sp,-48
   4b42c:	df000b15 	stw	fp,44(sp)
   4b430:	df000b04 	addi	fp,sp,44
   4b434:	e13ffb15 	stw	r4,-20(fp)
   4b438:	e17ffc15 	stw	r5,-16(fp)
   4b43c:	e1bffd15 	stw	r6,-12(fp)
   4b440:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4b444:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b448:	008001b4 	movhi	r2,6
   4b44c:	10879404 	addi	r2,r2,7760
   4b450:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4b454:	1005003a 	cmpeq	r2,r2,zero
   4b458:	1000411e 	bne	r2,zero,4b560 <alt_alarm_start+0x138>
  {
    if (alarm)
   4b45c:	e0bffb17 	ldw	r2,-20(fp)
   4b460:	1005003a 	cmpeq	r2,r2,zero
   4b464:	10003b1e 	bne	r2,zero,4b554 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4b468:	e0fffb17 	ldw	r3,-20(fp)
   4b46c:	e0bffd17 	ldw	r2,-12(fp)
   4b470:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4b474:	e0fffb17 	ldw	r3,-20(fp)
   4b478:	e0bffe17 	ldw	r2,-8(fp)
   4b47c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b480:	0005303a 	rdctl	r2,status
   4b484:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b488:	e0fff817 	ldw	r3,-32(fp)
   4b48c:	00bfff84 	movi	r2,-2
   4b490:	1884703a 	and	r2,r3,r2
   4b494:	1001703a 	wrctl	status,r2
  
  return context;
   4b498:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4b49c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4b4a0:	008001b4 	movhi	r2,6
   4b4a4:	10879504 	addi	r2,r2,7764
   4b4a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4b4ac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4b4b0:	e0fffc17 	ldw	r3,-16(fp)
   4b4b4:	e0bff917 	ldw	r2,-28(fp)
   4b4b8:	1885883a 	add	r2,r3,r2
   4b4bc:	10c00044 	addi	r3,r2,1
   4b4c0:	e0bffb17 	ldw	r2,-20(fp)
   4b4c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4b4c8:	e0bffb17 	ldw	r2,-20(fp)
   4b4cc:	10c00217 	ldw	r3,8(r2)
   4b4d0:	e0bff917 	ldw	r2,-28(fp)
   4b4d4:	1880042e 	bgeu	r3,r2,4b4e8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4b4d8:	e0fffb17 	ldw	r3,-20(fp)
   4b4dc:	00800044 	movi	r2,1
   4b4e0:	18800405 	stb	r2,16(r3)
   4b4e4:	00000206 	br	4b4f0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4b4e8:	e0bffb17 	ldw	r2,-20(fp)
   4b4ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4b4f0:	e0fffb17 	ldw	r3,-20(fp)
   4b4f4:	008001b4 	movhi	r2,6
   4b4f8:	10878204 	addi	r2,r2,7688
   4b4fc:	e0bff615 	stw	r2,-40(fp)
   4b500:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b504:	e0fff717 	ldw	r3,-36(fp)
   4b508:	e0bff617 	ldw	r2,-40(fp)
   4b50c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4b510:	e0bff617 	ldw	r2,-40(fp)
   4b514:	10c00017 	ldw	r3,0(r2)
   4b518:	e0bff717 	ldw	r2,-36(fp)
   4b51c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b520:	e0bff617 	ldw	r2,-40(fp)
   4b524:	10c00017 	ldw	r3,0(r2)
   4b528:	e0bff717 	ldw	r2,-36(fp)
   4b52c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4b530:	e0fff617 	ldw	r3,-40(fp)
   4b534:	e0bff717 	ldw	r2,-36(fp)
   4b538:	18800015 	stw	r2,0(r3)
   4b53c:	e0bffa17 	ldw	r2,-24(fp)
   4b540:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b544:	e0bff517 	ldw	r2,-44(fp)
   4b548:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4b54c:	e03fff15 	stw	zero,-4(fp)
   4b550:	00000506 	br	4b568 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4b554:	00bffa84 	movi	r2,-22
   4b558:	e0bfff15 	stw	r2,-4(fp)
   4b55c:	00000206 	br	4b568 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4b560:	00bfde84 	movi	r2,-134
   4b564:	e0bfff15 	stw	r2,-4(fp)
   4b568:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4b56c:	e037883a 	mov	sp,fp
   4b570:	df000017 	ldw	fp,0(sp)
   4b574:	dec00104 	addi	sp,sp,4
   4b578:	f800283a 	ret

0004b57c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4b57c:	deffff04 	addi	sp,sp,-4
   4b580:	df000015 	stw	fp,0(sp)
   4b584:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4b588:	e037883a 	mov	sp,fp
   4b58c:	df000017 	ldw	fp,0(sp)
   4b590:	dec00104 	addi	sp,sp,4
   4b594:	f800283a 	ret

0004b598 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4b598:	defff904 	addi	sp,sp,-28
   4b59c:	dfc00615 	stw	ra,24(sp)
   4b5a0:	df000515 	stw	fp,20(sp)
   4b5a4:	df000504 	addi	fp,sp,20
   4b5a8:	e13ffd15 	stw	r4,-12(fp)
   4b5ac:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4b5b0:	e0bffd17 	ldw	r2,-12(fp)
   4b5b4:	1005003a 	cmpeq	r2,r2,zero
   4b5b8:	1000041e 	bne	r2,zero,4b5cc <alt_dev_llist_insert+0x34>
   4b5bc:	e0bffd17 	ldw	r2,-12(fp)
   4b5c0:	10800217 	ldw	r2,8(r2)
   4b5c4:	1004c03a 	cmpne	r2,r2,zero
   4b5c8:	1000071e 	bne	r2,zero,4b5e8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4b5cc:	004b64c0 	call	4b64c <alt_get_errno>
   4b5d0:	1007883a 	mov	r3,r2
   4b5d4:	00800584 	movi	r2,22
   4b5d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4b5dc:	00bffa84 	movi	r2,-22
   4b5e0:	e0bfff15 	stw	r2,-4(fp)
   4b5e4:	00001306 	br	4b634 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4b5e8:	e0fffd17 	ldw	r3,-12(fp)
   4b5ec:	e0bffe17 	ldw	r2,-8(fp)
   4b5f0:	e0bffb15 	stw	r2,-20(fp)
   4b5f4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4b5f8:	e0fffc17 	ldw	r3,-16(fp)
   4b5fc:	e0bffb17 	ldw	r2,-20(fp)
   4b600:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4b604:	e0bffb17 	ldw	r2,-20(fp)
   4b608:	10c00017 	ldw	r3,0(r2)
   4b60c:	e0bffc17 	ldw	r2,-16(fp)
   4b610:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4b614:	e0bffb17 	ldw	r2,-20(fp)
   4b618:	10c00017 	ldw	r3,0(r2)
   4b61c:	e0bffc17 	ldw	r2,-16(fp)
   4b620:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4b624:	e0fffb17 	ldw	r3,-20(fp)
   4b628:	e0bffc17 	ldw	r2,-16(fp)
   4b62c:	18800015 	stw	r2,0(r3)

  return 0;  
   4b630:	e03fff15 	stw	zero,-4(fp)
   4b634:	e0bfff17 	ldw	r2,-4(fp)
}
   4b638:	e037883a 	mov	sp,fp
   4b63c:	dfc00117 	ldw	ra,4(sp)
   4b640:	df000017 	ldw	fp,0(sp)
   4b644:	dec00204 	addi	sp,sp,8
   4b648:	f800283a 	ret

0004b64c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b64c:	defffd04 	addi	sp,sp,-12
   4b650:	dfc00215 	stw	ra,8(sp)
   4b654:	df000115 	stw	fp,4(sp)
   4b658:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4b65c:	008001b4 	movhi	r2,6
   4b660:	10877f04 	addi	r2,r2,7676
   4b664:	10800017 	ldw	r2,0(r2)
   4b668:	1005003a 	cmpeq	r2,r2,zero
   4b66c:	1000061e 	bne	r2,zero,4b688 <alt_get_errno+0x3c>
   4b670:	008001b4 	movhi	r2,6
   4b674:	10877f04 	addi	r2,r2,7676
   4b678:	10800017 	ldw	r2,0(r2)
   4b67c:	103ee83a 	callr	r2
   4b680:	e0bfff15 	stw	r2,-4(fp)
   4b684:	00000306 	br	4b694 <alt_get_errno+0x48>
   4b688:	008001b4 	movhi	r2,6
   4b68c:	10878f04 	addi	r2,r2,7740
   4b690:	e0bfff15 	stw	r2,-4(fp)
   4b694:	e0bfff17 	ldw	r2,-4(fp)
}
   4b698:	e037883a 	mov	sp,fp
   4b69c:	dfc00117 	ldw	ra,4(sp)
   4b6a0:	df000017 	ldw	fp,0(sp)
   4b6a4:	dec00204 	addi	sp,sp,8
   4b6a8:	f800283a 	ret

0004b6ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4b6ac:	defffd04 	addi	sp,sp,-12
   4b6b0:	dfc00215 	stw	ra,8(sp)
   4b6b4:	df000115 	stw	fp,4(sp)
   4b6b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4b6bc:	00bfff04 	movi	r2,-4
   4b6c0:	00c00174 	movhi	r3,5
   4b6c4:	18f1cf04 	addi	r3,r3,-14532
   4b6c8:	1885883a 	add	r2,r3,r2
   4b6cc:	e0bfff15 	stw	r2,-4(fp)
   4b6d0:	00000606 	br	4b6ec <_do_ctors+0x40>
        (*ctor) (); 
   4b6d4:	e0bfff17 	ldw	r2,-4(fp)
   4b6d8:	10800017 	ldw	r2,0(r2)
   4b6dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4b6e0:	e0bfff17 	ldw	r2,-4(fp)
   4b6e4:	10bfff04 	addi	r2,r2,-4
   4b6e8:	e0bfff15 	stw	r2,-4(fp)
   4b6ec:	e0ffff17 	ldw	r3,-4(fp)
   4b6f0:	00800174 	movhi	r2,5
   4b6f4:	10b1ce04 	addi	r2,r2,-14536
   4b6f8:	18bff62e 	bgeu	r3,r2,4b6d4 <_do_ctors+0x28>
        (*ctor) (); 
}
   4b6fc:	e037883a 	mov	sp,fp
   4b700:	dfc00117 	ldw	ra,4(sp)
   4b704:	df000017 	ldw	fp,0(sp)
   4b708:	dec00204 	addi	sp,sp,8
   4b70c:	f800283a 	ret

0004b710 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4b710:	defffd04 	addi	sp,sp,-12
   4b714:	dfc00215 	stw	ra,8(sp)
   4b718:	df000115 	stw	fp,4(sp)
   4b71c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4b720:	00bfff04 	movi	r2,-4
   4b724:	00c00174 	movhi	r3,5
   4b728:	18f1cf04 	addi	r3,r3,-14532
   4b72c:	1885883a 	add	r2,r3,r2
   4b730:	e0bfff15 	stw	r2,-4(fp)
   4b734:	00000606 	br	4b750 <_do_dtors+0x40>
        (*dtor) (); 
   4b738:	e0bfff17 	ldw	r2,-4(fp)
   4b73c:	10800017 	ldw	r2,0(r2)
   4b740:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4b744:	e0bfff17 	ldw	r2,-4(fp)
   4b748:	10bfff04 	addi	r2,r2,-4
   4b74c:	e0bfff15 	stw	r2,-4(fp)
   4b750:	e0ffff17 	ldw	r3,-4(fp)
   4b754:	00800174 	movhi	r2,5
   4b758:	10b1cf04 	addi	r2,r2,-14532
   4b75c:	18bff62e 	bgeu	r3,r2,4b738 <_do_dtors+0x28>
        (*dtor) (); 
}
   4b760:	e037883a 	mov	sp,fp
   4b764:	dfc00117 	ldw	ra,4(sp)
   4b768:	df000017 	ldw	fp,0(sp)
   4b76c:	dec00204 	addi	sp,sp,8
   4b770:	f800283a 	ret

0004b774 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4b774:	defffe04 	addi	sp,sp,-8
   4b778:	dfc00115 	stw	ra,4(sp)
   4b77c:	df000015 	stw	fp,0(sp)
   4b780:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4b784:	0009883a 	mov	r4,zero
   4b788:	01440004 	movi	r5,4096
   4b78c:	004c2a00 	call	4c2a0 <alt_icache_flush>
#endif
}
   4b790:	e037883a 	mov	sp,fp
   4b794:	dfc00117 	ldw	ra,4(sp)
   4b798:	df000017 	ldw	fp,0(sp)
   4b79c:	dec00204 	addi	sp,sp,8
   4b7a0:	f800283a 	ret

0004b7a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b7a4:	defff904 	addi	sp,sp,-28
   4b7a8:	dfc00615 	stw	ra,24(sp)
   4b7ac:	df000515 	stw	fp,20(sp)
   4b7b0:	df000504 	addi	fp,sp,20
   4b7b4:	e13ffc15 	stw	r4,-16(fp)
   4b7b8:	e17ffd15 	stw	r5,-12(fp)
   4b7bc:	e1bffe15 	stw	r6,-8(fp)
   4b7c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4b7c4:	e0800217 	ldw	r2,8(fp)
   4b7c8:	d8800015 	stw	r2,0(sp)
   4b7cc:	e13ffc17 	ldw	r4,-16(fp)
   4b7d0:	e17ffd17 	ldw	r5,-12(fp)
   4b7d4:	e1bffe17 	ldw	r6,-8(fp)
   4b7d8:	e1ffff17 	ldw	r7,-4(fp)
   4b7dc:	004b9780 	call	4b978 <alt_iic_isr_register>
}  
   4b7e0:	e037883a 	mov	sp,fp
   4b7e4:	dfc00117 	ldw	ra,4(sp)
   4b7e8:	df000017 	ldw	fp,0(sp)
   4b7ec:	dec00204 	addi	sp,sp,8
   4b7f0:	f800283a 	ret

0004b7f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4b7f4:	defff904 	addi	sp,sp,-28
   4b7f8:	df000615 	stw	fp,24(sp)
   4b7fc:	df000604 	addi	fp,sp,24
   4b800:	e13ffe15 	stw	r4,-8(fp)
   4b804:	e17fff15 	stw	r5,-4(fp)
   4b808:	e0bfff17 	ldw	r2,-4(fp)
   4b80c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b810:	0005303a 	rdctl	r2,status
   4b814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b818:	e0fffb17 	ldw	r3,-20(fp)
   4b81c:	00bfff84 	movi	r2,-2
   4b820:	1884703a 	and	r2,r3,r2
   4b824:	1001703a 	wrctl	status,r2
  
  return context;
   4b828:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b82c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4b830:	e0fffc17 	ldw	r3,-16(fp)
   4b834:	00800044 	movi	r2,1
   4b838:	10c4983a 	sll	r2,r2,r3
   4b83c:	1007883a 	mov	r3,r2
   4b840:	008001b4 	movhi	r2,6
   4b844:	10879304 	addi	r2,r2,7756
   4b848:	10800017 	ldw	r2,0(r2)
   4b84c:	1886b03a 	or	r3,r3,r2
   4b850:	008001b4 	movhi	r2,6
   4b854:	10879304 	addi	r2,r2,7756
   4b858:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b85c:	008001b4 	movhi	r2,6
   4b860:	10879304 	addi	r2,r2,7756
   4b864:	10800017 	ldw	r2,0(r2)
   4b868:	100170fa 	wrctl	ienable,r2
   4b86c:	e0bffd17 	ldw	r2,-12(fp)
   4b870:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b874:	e0bffa17 	ldw	r2,-24(fp)
   4b878:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b87c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4b880:	e037883a 	mov	sp,fp
   4b884:	df000017 	ldw	fp,0(sp)
   4b888:	dec00104 	addi	sp,sp,4
   4b88c:	f800283a 	ret

0004b890 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4b890:	defff904 	addi	sp,sp,-28
   4b894:	df000615 	stw	fp,24(sp)
   4b898:	df000604 	addi	fp,sp,24
   4b89c:	e13ffe15 	stw	r4,-8(fp)
   4b8a0:	e17fff15 	stw	r5,-4(fp)
   4b8a4:	e0bfff17 	ldw	r2,-4(fp)
   4b8a8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b8ac:	0005303a 	rdctl	r2,status
   4b8b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b8b4:	e0fffb17 	ldw	r3,-20(fp)
   4b8b8:	00bfff84 	movi	r2,-2
   4b8bc:	1884703a 	and	r2,r3,r2
   4b8c0:	1001703a 	wrctl	status,r2
  
  return context;
   4b8c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4b8c8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4b8cc:	e0fffc17 	ldw	r3,-16(fp)
   4b8d0:	00800044 	movi	r2,1
   4b8d4:	10c4983a 	sll	r2,r2,r3
   4b8d8:	0084303a 	nor	r2,zero,r2
   4b8dc:	1007883a 	mov	r3,r2
   4b8e0:	008001b4 	movhi	r2,6
   4b8e4:	10879304 	addi	r2,r2,7756
   4b8e8:	10800017 	ldw	r2,0(r2)
   4b8ec:	1886703a 	and	r3,r3,r2
   4b8f0:	008001b4 	movhi	r2,6
   4b8f4:	10879304 	addi	r2,r2,7756
   4b8f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4b8fc:	008001b4 	movhi	r2,6
   4b900:	10879304 	addi	r2,r2,7756
   4b904:	10800017 	ldw	r2,0(r2)
   4b908:	100170fa 	wrctl	ienable,r2
   4b90c:	e0bffd17 	ldw	r2,-12(fp)
   4b910:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b914:	e0bffa17 	ldw	r2,-24(fp)
   4b918:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4b91c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4b920:	e037883a 	mov	sp,fp
   4b924:	df000017 	ldw	fp,0(sp)
   4b928:	dec00104 	addi	sp,sp,4
   4b92c:	f800283a 	ret

0004b930 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4b930:	defffc04 	addi	sp,sp,-16
   4b934:	df000315 	stw	fp,12(sp)
   4b938:	df000304 	addi	fp,sp,12
   4b93c:	e13ffe15 	stw	r4,-8(fp)
   4b940:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4b944:	000530fa 	rdctl	r2,ienable
   4b948:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4b94c:	e0ffff17 	ldw	r3,-4(fp)
   4b950:	00800044 	movi	r2,1
   4b954:	10c4983a 	sll	r2,r2,r3
   4b958:	1007883a 	mov	r3,r2
   4b95c:	e0bffd17 	ldw	r2,-12(fp)
   4b960:	1884703a 	and	r2,r3,r2
   4b964:	1004c03a 	cmpne	r2,r2,zero
}
   4b968:	e037883a 	mov	sp,fp
   4b96c:	df000017 	ldw	fp,0(sp)
   4b970:	dec00104 	addi	sp,sp,4
   4b974:	f800283a 	ret

0004b978 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4b978:	defff404 	addi	sp,sp,-48
   4b97c:	dfc00b15 	stw	ra,44(sp)
   4b980:	df000a15 	stw	fp,40(sp)
   4b984:	df000a04 	addi	fp,sp,40
   4b988:	e13ffb15 	stw	r4,-20(fp)
   4b98c:	e17ffc15 	stw	r5,-16(fp)
   4b990:	e1bffd15 	stw	r6,-12(fp)
   4b994:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4b998:	00bffa84 	movi	r2,-22
   4b99c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4b9a0:	e0bffc17 	ldw	r2,-16(fp)
   4b9a4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4b9a8:	e0bff917 	ldw	r2,-28(fp)
   4b9ac:	10800808 	cmpgei	r2,r2,32
   4b9b0:	1000291e 	bne	r2,zero,4ba58 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b9b4:	0005303a 	rdctl	r2,status
   4b9b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b9bc:	e0fff717 	ldw	r3,-36(fp)
   4b9c0:	00bfff84 	movi	r2,-2
   4b9c4:	1884703a 	and	r2,r3,r2
   4b9c8:	1001703a 	wrctl	status,r2
  
  return context;
   4b9cc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4b9d0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4b9d4:	e0bff917 	ldw	r2,-28(fp)
   4b9d8:	00c001b4 	movhi	r3,6
   4b9dc:	18c7a004 	addi	r3,r3,7808
   4b9e0:	100490fa 	slli	r2,r2,3
   4b9e4:	10c7883a 	add	r3,r2,r3
   4b9e8:	e0bffd17 	ldw	r2,-12(fp)
   4b9ec:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4b9f0:	e0bff917 	ldw	r2,-28(fp)
   4b9f4:	00c001b4 	movhi	r3,6
   4b9f8:	18c7a004 	addi	r3,r3,7808
   4b9fc:	100490fa 	slli	r2,r2,3
   4ba00:	10c5883a 	add	r2,r2,r3
   4ba04:	10c00104 	addi	r3,r2,4
   4ba08:	e0bffe17 	ldw	r2,-8(fp)
   4ba0c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4ba10:	e0bffd17 	ldw	r2,-12(fp)
   4ba14:	1005003a 	cmpeq	r2,r2,zero
   4ba18:	1000051e 	bne	r2,zero,4ba30 <alt_iic_isr_register+0xb8>
   4ba1c:	e17ff917 	ldw	r5,-28(fp)
   4ba20:	e13ffb17 	ldw	r4,-20(fp)
   4ba24:	004b7f40 	call	4b7f4 <alt_ic_irq_enable>
   4ba28:	e0bfff15 	stw	r2,-4(fp)
   4ba2c:	00000406 	br	4ba40 <alt_iic_isr_register+0xc8>
   4ba30:	e17ff917 	ldw	r5,-28(fp)
   4ba34:	e13ffb17 	ldw	r4,-20(fp)
   4ba38:	004b8900 	call	4b890 <alt_ic_irq_disable>
   4ba3c:	e0bfff15 	stw	r2,-4(fp)
   4ba40:	e0bfff17 	ldw	r2,-4(fp)
   4ba44:	e0bffa15 	stw	r2,-24(fp)
   4ba48:	e0bff817 	ldw	r2,-32(fp)
   4ba4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ba50:	e0bff617 	ldw	r2,-40(fp)
   4ba54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4ba58:	e0bffa17 	ldw	r2,-24(fp)
}
   4ba5c:	e037883a 	mov	sp,fp
   4ba60:	dfc00117 	ldw	ra,4(sp)
   4ba64:	df000017 	ldw	fp,0(sp)
   4ba68:	dec00204 	addi	sp,sp,8
   4ba6c:	f800283a 	ret

0004ba70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4ba70:	defff904 	addi	sp,sp,-28
   4ba74:	dfc00615 	stw	ra,24(sp)
   4ba78:	df000515 	stw	fp,20(sp)
   4ba7c:	df000504 	addi	fp,sp,20
   4ba80:	e13ffc15 	stw	r4,-16(fp)
   4ba84:	e17ffd15 	stw	r5,-12(fp)
   4ba88:	e1bffe15 	stw	r6,-8(fp)
   4ba8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4ba90:	e13ffd17 	ldw	r4,-12(fp)
   4ba94:	e17ffe17 	ldw	r5,-8(fp)
   4ba98:	e1bfff17 	ldw	r6,-4(fp)
   4ba9c:	004bc880 	call	4bc88 <open>
   4baa0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4baa4:	e0bffb17 	ldw	r2,-20(fp)
   4baa8:	1004803a 	cmplt	r2,r2,zero
   4baac:	10001c1e 	bne	r2,zero,4bb20 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4bab0:	e0bffb17 	ldw	r2,-20(fp)
   4bab4:	00c001b4 	movhi	r3,6
   4bab8:	18c2fc04 	addi	r3,r3,3056
   4babc:	10800324 	muli	r2,r2,12
   4bac0:	10c5883a 	add	r2,r2,r3
   4bac4:	10c00017 	ldw	r3,0(r2)
   4bac8:	e0bffc17 	ldw	r2,-16(fp)
   4bacc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4bad0:	e0bffb17 	ldw	r2,-20(fp)
   4bad4:	00c001b4 	movhi	r3,6
   4bad8:	18c2fc04 	addi	r3,r3,3056
   4badc:	10800324 	muli	r2,r2,12
   4bae0:	10c5883a 	add	r2,r2,r3
   4bae4:	10800104 	addi	r2,r2,4
   4bae8:	10c00017 	ldw	r3,0(r2)
   4baec:	e0bffc17 	ldw	r2,-16(fp)
   4baf0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4baf4:	e0bffb17 	ldw	r2,-20(fp)
   4baf8:	00c001b4 	movhi	r3,6
   4bafc:	18c2fc04 	addi	r3,r3,3056
   4bb00:	10800324 	muli	r2,r2,12
   4bb04:	10c5883a 	add	r2,r2,r3
   4bb08:	10800204 	addi	r2,r2,8
   4bb0c:	10c00017 	ldw	r3,0(r2)
   4bb10:	e0bffc17 	ldw	r2,-16(fp)
   4bb14:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4bb18:	e13ffb17 	ldw	r4,-20(fp)
   4bb1c:	004a5180 	call	4a518 <alt_release_fd>
  }
} 
   4bb20:	e037883a 	mov	sp,fp
   4bb24:	dfc00117 	ldw	ra,4(sp)
   4bb28:	df000017 	ldw	fp,0(sp)
   4bb2c:	dec00204 	addi	sp,sp,8
   4bb30:	f800283a 	ret

0004bb34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4bb34:	defffb04 	addi	sp,sp,-20
   4bb38:	dfc00415 	stw	ra,16(sp)
   4bb3c:	df000315 	stw	fp,12(sp)
   4bb40:	df000304 	addi	fp,sp,12
   4bb44:	e13ffd15 	stw	r4,-12(fp)
   4bb48:	e17ffe15 	stw	r5,-8(fp)
   4bb4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4bb50:	010001b4 	movhi	r4,6
   4bb54:	2102ff04 	addi	r4,r4,3068
   4bb58:	e17ffd17 	ldw	r5,-12(fp)
   4bb5c:	01800044 	movi	r6,1
   4bb60:	01c07fc4 	movi	r7,511
   4bb64:	004ba700 	call	4ba70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4bb68:	010001b4 	movhi	r4,6
   4bb6c:	2102fc04 	addi	r4,r4,3056
   4bb70:	e17ffe17 	ldw	r5,-8(fp)
   4bb74:	000d883a 	mov	r6,zero
   4bb78:	01c07fc4 	movi	r7,511
   4bb7c:	004ba700 	call	4ba70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4bb80:	010001b4 	movhi	r4,6
   4bb84:	21030204 	addi	r4,r4,3080
   4bb88:	e17fff17 	ldw	r5,-4(fp)
   4bb8c:	01800044 	movi	r6,1
   4bb90:	01c07fc4 	movi	r7,511
   4bb94:	004ba700 	call	4ba70 <alt_open_fd>
}  
   4bb98:	e037883a 	mov	sp,fp
   4bb9c:	dfc00117 	ldw	ra,4(sp)
   4bba0:	df000017 	ldw	fp,0(sp)
   4bba4:	dec00204 	addi	sp,sp,8
   4bba8:	f800283a 	ret

0004bbac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4bbac:	defffc04 	addi	sp,sp,-16
   4bbb0:	df000315 	stw	fp,12(sp)
   4bbb4:	df000304 	addi	fp,sp,12
   4bbb8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4bbbc:	e0bffe17 	ldw	r2,-8(fp)
   4bbc0:	10800217 	ldw	r2,8(r2)
   4bbc4:	10d00034 	orhi	r3,r2,16384
   4bbc8:	e0bffe17 	ldw	r2,-8(fp)
   4bbcc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4bbd0:	e03ffd15 	stw	zero,-12(fp)
   4bbd4:	00002006 	br	4bc58 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4bbd8:	e0bffd17 	ldw	r2,-12(fp)
   4bbdc:	00c001b4 	movhi	r3,6
   4bbe0:	18c2fc04 	addi	r3,r3,3056
   4bbe4:	10800324 	muli	r2,r2,12
   4bbe8:	10c5883a 	add	r2,r2,r3
   4bbec:	10c00017 	ldw	r3,0(r2)
   4bbf0:	e0bffe17 	ldw	r2,-8(fp)
   4bbf4:	10800017 	ldw	r2,0(r2)
   4bbf8:	1880141e 	bne	r3,r2,4bc4c <alt_file_locked+0xa0>
   4bbfc:	e0bffd17 	ldw	r2,-12(fp)
   4bc00:	00c001b4 	movhi	r3,6
   4bc04:	18c2fc04 	addi	r3,r3,3056
   4bc08:	10800324 	muli	r2,r2,12
   4bc0c:	10c5883a 	add	r2,r2,r3
   4bc10:	10800204 	addi	r2,r2,8
   4bc14:	10800017 	ldw	r2,0(r2)
   4bc18:	1004403a 	cmpge	r2,r2,zero
   4bc1c:	10000b1e 	bne	r2,zero,4bc4c <alt_file_locked+0xa0>
   4bc20:	e0bffd17 	ldw	r2,-12(fp)
   4bc24:	10800324 	muli	r2,r2,12
   4bc28:	1007883a 	mov	r3,r2
   4bc2c:	008001b4 	movhi	r2,6
   4bc30:	1082fc04 	addi	r2,r2,3056
   4bc34:	1887883a 	add	r3,r3,r2
   4bc38:	e0bffe17 	ldw	r2,-8(fp)
   4bc3c:	18800326 	beq	r3,r2,4bc4c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4bc40:	00bffcc4 	movi	r2,-13
   4bc44:	e0bfff15 	stw	r2,-4(fp)
   4bc48:	00000a06 	br	4bc74 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4bc4c:	e0bffd17 	ldw	r2,-12(fp)
   4bc50:	10800044 	addi	r2,r2,1
   4bc54:	e0bffd15 	stw	r2,-12(fp)
   4bc58:	008001b4 	movhi	r2,6
   4bc5c:	10877e04 	addi	r2,r2,7672
   4bc60:	10800017 	ldw	r2,0(r2)
   4bc64:	1007883a 	mov	r3,r2
   4bc68:	e0bffd17 	ldw	r2,-12(fp)
   4bc6c:	18bfda2e 	bgeu	r3,r2,4bbd8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4bc70:	e03fff15 	stw	zero,-4(fp)
   4bc74:	e0bfff17 	ldw	r2,-4(fp)
}
   4bc78:	e037883a 	mov	sp,fp
   4bc7c:	df000017 	ldw	fp,0(sp)
   4bc80:	dec00104 	addi	sp,sp,4
   4bc84:	f800283a 	ret

0004bc88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4bc88:	defff404 	addi	sp,sp,-48
   4bc8c:	dfc00b15 	stw	ra,44(sp)
   4bc90:	df000a15 	stw	fp,40(sp)
   4bc94:	df000a04 	addi	fp,sp,40
   4bc98:	e13ffb15 	stw	r4,-20(fp)
   4bc9c:	e17ffc15 	stw	r5,-16(fp)
   4bca0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4bca4:	00bfffc4 	movi	r2,-1
   4bca8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4bcac:	00bffb44 	movi	r2,-19
   4bcb0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4bcb4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4bcb8:	e13ffb17 	ldw	r4,-20(fp)
   4bcbc:	014001b4 	movhi	r5,6
   4bcc0:	29477c04 	addi	r5,r5,7664
   4bcc4:	004c0340 	call	4c034 <alt_find_dev>
   4bcc8:	e0bffa15 	stw	r2,-24(fp)
   4bccc:	e0bffa17 	ldw	r2,-24(fp)
   4bcd0:	1004c03a 	cmpne	r2,r2,zero
   4bcd4:	1000051e 	bne	r2,zero,4bcec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4bcd8:	e13ffb17 	ldw	r4,-20(fp)
   4bcdc:	004c0c80 	call	4c0c8 <alt_find_file>
   4bce0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4bce4:	00800044 	movi	r2,1
   4bce8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4bcec:	e0bffa17 	ldw	r2,-24(fp)
   4bcf0:	1005003a 	cmpeq	r2,r2,zero
   4bcf4:	1000301e 	bne	r2,zero,4bdb8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4bcf8:	e13ffa17 	ldw	r4,-24(fp)
   4bcfc:	004c1e80 	call	4c1e8 <alt_get_fd>
   4bd00:	e0bff815 	stw	r2,-32(fp)
   4bd04:	e0bff817 	ldw	r2,-32(fp)
   4bd08:	1004403a 	cmpge	r2,r2,zero
   4bd0c:	1000031e 	bne	r2,zero,4bd1c <open+0x94>
    {
      status = index;
   4bd10:	e0bff817 	ldw	r2,-32(fp)
   4bd14:	e0bff715 	stw	r2,-36(fp)
   4bd18:	00002906 	br	4bdc0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   4bd1c:	e0bff817 	ldw	r2,-32(fp)
   4bd20:	10800324 	muli	r2,r2,12
   4bd24:	1007883a 	mov	r3,r2
   4bd28:	008001b4 	movhi	r2,6
   4bd2c:	1082fc04 	addi	r2,r2,3056
   4bd30:	1885883a 	add	r2,r3,r2
   4bd34:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4bd38:	e0fffc17 	ldw	r3,-16(fp)
   4bd3c:	00900034 	movhi	r2,16384
   4bd40:	10bfffc4 	addi	r2,r2,-1
   4bd44:	1886703a 	and	r3,r3,r2
   4bd48:	e0bff917 	ldw	r2,-28(fp)
   4bd4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4bd50:	e0bff617 	ldw	r2,-40(fp)
   4bd54:	1004c03a 	cmpne	r2,r2,zero
   4bd58:	1000061e 	bne	r2,zero,4bd74 <open+0xec>
   4bd5c:	e13ff917 	ldw	r4,-28(fp)
   4bd60:	004bbac0 	call	4bbac <alt_file_locked>
   4bd64:	e0bff715 	stw	r2,-36(fp)
   4bd68:	e0bff717 	ldw	r2,-36(fp)
   4bd6c:	1004803a 	cmplt	r2,r2,zero
   4bd70:	1000131e 	bne	r2,zero,4bdc0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4bd74:	e0bffa17 	ldw	r2,-24(fp)
   4bd78:	10800317 	ldw	r2,12(r2)
   4bd7c:	1005003a 	cmpeq	r2,r2,zero
   4bd80:	1000091e 	bne	r2,zero,4bda8 <open+0x120>
   4bd84:	e0bffa17 	ldw	r2,-24(fp)
   4bd88:	10800317 	ldw	r2,12(r2)
   4bd8c:	e13ff917 	ldw	r4,-28(fp)
   4bd90:	e17ffb17 	ldw	r5,-20(fp)
   4bd94:	e1bffc17 	ldw	r6,-16(fp)
   4bd98:	e1fffd17 	ldw	r7,-12(fp)
   4bd9c:	103ee83a 	callr	r2
   4bda0:	e0bfff15 	stw	r2,-4(fp)
   4bda4:	00000106 	br	4bdac <open+0x124>
   4bda8:	e03fff15 	stw	zero,-4(fp)
   4bdac:	e0bfff17 	ldw	r2,-4(fp)
   4bdb0:	e0bff715 	stw	r2,-36(fp)
   4bdb4:	00000206 	br	4bdc0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4bdb8:	00bffb44 	movi	r2,-19
   4bdbc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4bdc0:	e0bff717 	ldw	r2,-36(fp)
   4bdc4:	1004403a 	cmpge	r2,r2,zero
   4bdc8:	1000091e 	bne	r2,zero,4bdf0 <open+0x168>
  {
    alt_release_fd (index);  
   4bdcc:	e13ff817 	ldw	r4,-32(fp)
   4bdd0:	004a5180 	call	4a518 <alt_release_fd>
    ALT_ERRNO = -status;
   4bdd4:	004be100 	call	4be10 <alt_get_errno>
   4bdd8:	e0fff717 	ldw	r3,-36(fp)
   4bddc:	00c7c83a 	sub	r3,zero,r3
   4bde0:	10c00015 	stw	r3,0(r2)
    return -1;
   4bde4:	00bfffc4 	movi	r2,-1
   4bde8:	e0bffe15 	stw	r2,-8(fp)
   4bdec:	00000206 	br	4bdf8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   4bdf0:	e0bff817 	ldw	r2,-32(fp)
   4bdf4:	e0bffe15 	stw	r2,-8(fp)
   4bdf8:	e0bffe17 	ldw	r2,-8(fp)
}
   4bdfc:	e037883a 	mov	sp,fp
   4be00:	dfc00117 	ldw	ra,4(sp)
   4be04:	df000017 	ldw	fp,0(sp)
   4be08:	dec00204 	addi	sp,sp,8
   4be0c:	f800283a 	ret

0004be10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4be10:	defffd04 	addi	sp,sp,-12
   4be14:	dfc00215 	stw	ra,8(sp)
   4be18:	df000115 	stw	fp,4(sp)
   4be1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4be20:	008001b4 	movhi	r2,6
   4be24:	10877f04 	addi	r2,r2,7676
   4be28:	10800017 	ldw	r2,0(r2)
   4be2c:	1005003a 	cmpeq	r2,r2,zero
   4be30:	1000061e 	bne	r2,zero,4be4c <alt_get_errno+0x3c>
   4be34:	008001b4 	movhi	r2,6
   4be38:	10877f04 	addi	r2,r2,7676
   4be3c:	10800017 	ldw	r2,0(r2)
   4be40:	103ee83a 	callr	r2
   4be44:	e0bfff15 	stw	r2,-4(fp)
   4be48:	00000306 	br	4be58 <alt_get_errno+0x48>
   4be4c:	008001b4 	movhi	r2,6
   4be50:	10878f04 	addi	r2,r2,7740
   4be54:	e0bfff15 	stw	r2,-4(fp)
   4be58:	e0bfff17 	ldw	r2,-4(fp)
}
   4be5c:	e037883a 	mov	sp,fp
   4be60:	dfc00117 	ldw	ra,4(sp)
   4be64:	df000017 	ldw	fp,0(sp)
   4be68:	dec00204 	addi	sp,sp,8
   4be6c:	f800283a 	ret

0004be70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4be70:	defffa04 	addi	sp,sp,-24
   4be74:	df000515 	stw	fp,20(sp)
   4be78:	df000504 	addi	fp,sp,20
   4be7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4be80:	0005303a 	rdctl	r2,status
   4be84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4be88:	e0fffd17 	ldw	r3,-12(fp)
   4be8c:	00bfff84 	movi	r2,-2
   4be90:	1884703a 	and	r2,r3,r2
   4be94:	1001703a 	wrctl	status,r2
  
  return context;
   4be98:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4be9c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4bea0:	e0bfff17 	ldw	r2,-4(fp)
   4bea4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4bea8:	e0bffc17 	ldw	r2,-16(fp)
   4beac:	10c00017 	ldw	r3,0(r2)
   4beb0:	e0bffc17 	ldw	r2,-16(fp)
   4beb4:	10800117 	ldw	r2,4(r2)
   4beb8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4bebc:	e0bffc17 	ldw	r2,-16(fp)
   4bec0:	10c00117 	ldw	r3,4(r2)
   4bec4:	e0bffc17 	ldw	r2,-16(fp)
   4bec8:	10800017 	ldw	r2,0(r2)
   4becc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4bed0:	e0fffc17 	ldw	r3,-16(fp)
   4bed4:	e0bffc17 	ldw	r2,-16(fp)
   4bed8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4bedc:	e0fffc17 	ldw	r3,-16(fp)
   4bee0:	e0bffc17 	ldw	r2,-16(fp)
   4bee4:	18800015 	stw	r2,0(r3)
   4bee8:	e0bffe17 	ldw	r2,-8(fp)
   4beec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bef0:	e0bffb17 	ldw	r2,-20(fp)
   4bef4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4bef8:	e037883a 	mov	sp,fp
   4befc:	df000017 	ldw	fp,0(sp)
   4bf00:	dec00104 	addi	sp,sp,4
   4bf04:	f800283a 	ret

0004bf08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4bf08:	defffb04 	addi	sp,sp,-20
   4bf0c:	dfc00415 	stw	ra,16(sp)
   4bf10:	df000315 	stw	fp,12(sp)
   4bf14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4bf18:	d0a00e17 	ldw	r2,-32712(gp)
   4bf1c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4bf20:	d0a02117 	ldw	r2,-32636(gp)
   4bf24:	10800044 	addi	r2,r2,1
   4bf28:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4bf2c:	00003106 	br	4bff4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4bf30:	e0bffe17 	ldw	r2,-8(fp)
   4bf34:	10800017 	ldw	r2,0(r2)
   4bf38:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4bf3c:	e0bffe17 	ldw	r2,-8(fp)
   4bf40:	10800403 	ldbu	r2,16(r2)
   4bf44:	10803fcc 	andi	r2,r2,255
   4bf48:	1005003a 	cmpeq	r2,r2,zero
   4bf4c:	1000051e 	bne	r2,zero,4bf64 <alt_tick+0x5c>
   4bf50:	d0a02117 	ldw	r2,-32636(gp)
   4bf54:	1004c03a 	cmpne	r2,r2,zero
   4bf58:	1000021e 	bne	r2,zero,4bf64 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4bf5c:	e0bffe17 	ldw	r2,-8(fp)
   4bf60:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4bf64:	e0bffe17 	ldw	r2,-8(fp)
   4bf68:	10c00217 	ldw	r3,8(r2)
   4bf6c:	d0a02117 	ldw	r2,-32636(gp)
   4bf70:	10c01e36 	bltu	r2,r3,4bfec <alt_tick+0xe4>
   4bf74:	e0bffe17 	ldw	r2,-8(fp)
   4bf78:	10800403 	ldbu	r2,16(r2)
   4bf7c:	10803fcc 	andi	r2,r2,255
   4bf80:	1004c03a 	cmpne	r2,r2,zero
   4bf84:	1000191e 	bne	r2,zero,4bfec <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4bf88:	e0bffe17 	ldw	r2,-8(fp)
   4bf8c:	10c00317 	ldw	r3,12(r2)
   4bf90:	e0bffe17 	ldw	r2,-8(fp)
   4bf94:	11000517 	ldw	r4,20(r2)
   4bf98:	183ee83a 	callr	r3
   4bf9c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4bfa0:	e0bffd17 	ldw	r2,-12(fp)
   4bfa4:	1004c03a 	cmpne	r2,r2,zero
   4bfa8:	1000031e 	bne	r2,zero,4bfb8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4bfac:	e13ffe17 	ldw	r4,-8(fp)
   4bfb0:	004be700 	call	4be70 <alt_alarm_stop>
   4bfb4:	00000d06 	br	4bfec <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4bfb8:	e0bffe17 	ldw	r2,-8(fp)
   4bfbc:	10c00217 	ldw	r3,8(r2)
   4bfc0:	e0bffd17 	ldw	r2,-12(fp)
   4bfc4:	1887883a 	add	r3,r3,r2
   4bfc8:	e0bffe17 	ldw	r2,-8(fp)
   4bfcc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4bfd0:	e0bffe17 	ldw	r2,-8(fp)
   4bfd4:	10c00217 	ldw	r3,8(r2)
   4bfd8:	d0a02117 	ldw	r2,-32636(gp)
   4bfdc:	1880032e 	bgeu	r3,r2,4bfec <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4bfe0:	e0fffe17 	ldw	r3,-8(fp)
   4bfe4:	00800044 	movi	r2,1
   4bfe8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4bfec:	e0bfff17 	ldw	r2,-4(fp)
   4bff0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4bff4:	d0e00e04 	addi	r3,gp,-32712
   4bff8:	e0bffe17 	ldw	r2,-8(fp)
   4bffc:	10ffcc1e 	bne	r2,r3,4bf30 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4c000:	e037883a 	mov	sp,fp
   4c004:	dfc00117 	ldw	ra,4(sp)
   4c008:	df000017 	ldw	fp,0(sp)
   4c00c:	dec00204 	addi	sp,sp,8
   4c010:	f800283a 	ret

0004c014 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4c014:	deffff04 	addi	sp,sp,-4
   4c018:	df000015 	stw	fp,0(sp)
   4c01c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4c020:	000170fa 	wrctl	ienable,zero
}
   4c024:	e037883a 	mov	sp,fp
   4c028:	df000017 	ldw	fp,0(sp)
   4c02c:	dec00104 	addi	sp,sp,4
   4c030:	f800283a 	ret

0004c034 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4c034:	defff904 	addi	sp,sp,-28
   4c038:	dfc00615 	stw	ra,24(sp)
   4c03c:	df000515 	stw	fp,20(sp)
   4c040:	df000504 	addi	fp,sp,20
   4c044:	e13ffd15 	stw	r4,-12(fp)
   4c048:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4c04c:	e0bffe17 	ldw	r2,-8(fp)
   4c050:	10800017 	ldw	r2,0(r2)
   4c054:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4c058:	e13ffd17 	ldw	r4,-12(fp)
   4c05c:	00406bc0 	call	406bc <strlen>
   4c060:	10800044 	addi	r2,r2,1
   4c064:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c068:	00000d06 	br	4c0a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4c06c:	e0bffc17 	ldw	r2,-16(fp)
   4c070:	11000217 	ldw	r4,8(r2)
   4c074:	e1bffb17 	ldw	r6,-20(fp)
   4c078:	e17ffd17 	ldw	r5,-12(fp)
   4c07c:	004c37c0 	call	4c37c <memcmp>
   4c080:	1004c03a 	cmpne	r2,r2,zero
   4c084:	1000031e 	bne	r2,zero,4c094 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4c088:	e0bffc17 	ldw	r2,-16(fp)
   4c08c:	e0bfff15 	stw	r2,-4(fp)
   4c090:	00000706 	br	4c0b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4c094:	e0bffc17 	ldw	r2,-16(fp)
   4c098:	10800017 	ldw	r2,0(r2)
   4c09c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4c0a0:	e0fffe17 	ldw	r3,-8(fp)
   4c0a4:	e0bffc17 	ldw	r2,-16(fp)
   4c0a8:	10fff01e 	bne	r2,r3,4c06c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4c0ac:	e03fff15 	stw	zero,-4(fp)
   4c0b0:	e0bfff17 	ldw	r2,-4(fp)
}
   4c0b4:	e037883a 	mov	sp,fp
   4c0b8:	dfc00117 	ldw	ra,4(sp)
   4c0bc:	df000017 	ldw	fp,0(sp)
   4c0c0:	dec00204 	addi	sp,sp,8
   4c0c4:	f800283a 	ret

0004c0c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4c0c8:	defffa04 	addi	sp,sp,-24
   4c0cc:	dfc00515 	stw	ra,20(sp)
   4c0d0:	df000415 	stw	fp,16(sp)
   4c0d4:	df000404 	addi	fp,sp,16
   4c0d8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4c0dc:	008001b4 	movhi	r2,6
   4c0e0:	10877a04 	addi	r2,r2,7656
   4c0e4:	10800017 	ldw	r2,0(r2)
   4c0e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c0ec:	00003306 	br	4c1bc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4c0f0:	e0bffd17 	ldw	r2,-12(fp)
   4c0f4:	11000217 	ldw	r4,8(r2)
   4c0f8:	00406bc0 	call	406bc <strlen>
   4c0fc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4c100:	e0bffd17 	ldw	r2,-12(fp)
   4c104:	10c00217 	ldw	r3,8(r2)
   4c108:	e0bffc17 	ldw	r2,-16(fp)
   4c10c:	1885883a 	add	r2,r3,r2
   4c110:	10bfffc4 	addi	r2,r2,-1
   4c114:	10800003 	ldbu	r2,0(r2)
   4c118:	10803fcc 	andi	r2,r2,255
   4c11c:	1080201c 	xori	r2,r2,128
   4c120:	10bfe004 	addi	r2,r2,-128
   4c124:	10800bd8 	cmpnei	r2,r2,47
   4c128:	1000031e 	bne	r2,zero,4c138 <alt_find_file+0x70>
    {
      len -= 1;
   4c12c:	e0bffc17 	ldw	r2,-16(fp)
   4c130:	10bfffc4 	addi	r2,r2,-1
   4c134:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4c138:	e0bffc17 	ldw	r2,-16(fp)
   4c13c:	1007883a 	mov	r3,r2
   4c140:	e0bffe17 	ldw	r2,-8(fp)
   4c144:	1885883a 	add	r2,r3,r2
   4c148:	10800003 	ldbu	r2,0(r2)
   4c14c:	10803fcc 	andi	r2,r2,255
   4c150:	1080201c 	xori	r2,r2,128
   4c154:	10bfe004 	addi	r2,r2,-128
   4c158:	10800be0 	cmpeqi	r2,r2,47
   4c15c:	10000a1e 	bne	r2,zero,4c188 <alt_find_file+0xc0>
   4c160:	e0bffc17 	ldw	r2,-16(fp)
   4c164:	1007883a 	mov	r3,r2
   4c168:	e0bffe17 	ldw	r2,-8(fp)
   4c16c:	1885883a 	add	r2,r3,r2
   4c170:	10800003 	ldbu	r2,0(r2)
   4c174:	10803fcc 	andi	r2,r2,255
   4c178:	1080201c 	xori	r2,r2,128
   4c17c:	10bfe004 	addi	r2,r2,-128
   4c180:	1004c03a 	cmpne	r2,r2,zero
   4c184:	10000a1e 	bne	r2,zero,4c1b0 <alt_find_file+0xe8>
   4c188:	e0bffd17 	ldw	r2,-12(fp)
   4c18c:	11000217 	ldw	r4,8(r2)
   4c190:	e1bffc17 	ldw	r6,-16(fp)
   4c194:	e17ffe17 	ldw	r5,-8(fp)
   4c198:	004c37c0 	call	4c37c <memcmp>
   4c19c:	1004c03a 	cmpne	r2,r2,zero
   4c1a0:	1000031e 	bne	r2,zero,4c1b0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4c1a4:	e0bffd17 	ldw	r2,-12(fp)
   4c1a8:	e0bfff15 	stw	r2,-4(fp)
   4c1ac:	00000806 	br	4c1d0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4c1b0:	e0bffd17 	ldw	r2,-12(fp)
   4c1b4:	10800017 	ldw	r2,0(r2)
   4c1b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4c1bc:	00c001b4 	movhi	r3,6
   4c1c0:	18c77a04 	addi	r3,r3,7656
   4c1c4:	e0bffd17 	ldw	r2,-12(fp)
   4c1c8:	10ffc91e 	bne	r2,r3,4c0f0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4c1cc:	e03fff15 	stw	zero,-4(fp)
   4c1d0:	e0bfff17 	ldw	r2,-4(fp)
}
   4c1d4:	e037883a 	mov	sp,fp
   4c1d8:	dfc00117 	ldw	ra,4(sp)
   4c1dc:	df000017 	ldw	fp,0(sp)
   4c1e0:	dec00204 	addi	sp,sp,8
   4c1e4:	f800283a 	ret

0004c1e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4c1e8:	defffc04 	addi	sp,sp,-16
   4c1ec:	df000315 	stw	fp,12(sp)
   4c1f0:	df000304 	addi	fp,sp,12
   4c1f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4c1f8:	00bffa04 	movi	r2,-24
   4c1fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c200:	e03ffe15 	stw	zero,-8(fp)
   4c204:	00001e06 	br	4c280 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   4c208:	e0bffe17 	ldw	r2,-8(fp)
   4c20c:	00c001b4 	movhi	r3,6
   4c210:	18c2fc04 	addi	r3,r3,3056
   4c214:	10800324 	muli	r2,r2,12
   4c218:	10c5883a 	add	r2,r2,r3
   4c21c:	10800017 	ldw	r2,0(r2)
   4c220:	1004c03a 	cmpne	r2,r2,zero
   4c224:	1000131e 	bne	r2,zero,4c274 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   4c228:	e0bffe17 	ldw	r2,-8(fp)
   4c22c:	00c001b4 	movhi	r3,6
   4c230:	18c2fc04 	addi	r3,r3,3056
   4c234:	10800324 	muli	r2,r2,12
   4c238:	10c7883a 	add	r3,r2,r3
   4c23c:	e0bfff17 	ldw	r2,-4(fp)
   4c240:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4c244:	008001b4 	movhi	r2,6
   4c248:	10877e04 	addi	r2,r2,7672
   4c24c:	10c00017 	ldw	r3,0(r2)
   4c250:	e0bffe17 	ldw	r2,-8(fp)
   4c254:	1880040e 	bge	r3,r2,4c268 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   4c258:	00c001b4 	movhi	r3,6
   4c25c:	18c77e04 	addi	r3,r3,7672
   4c260:	e0bffe17 	ldw	r2,-8(fp)
   4c264:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4c268:	e0bffe17 	ldw	r2,-8(fp)
   4c26c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4c270:	00000606 	br	4c28c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4c274:	e0bffe17 	ldw	r2,-8(fp)
   4c278:	10800044 	addi	r2,r2,1
   4c27c:	e0bffe15 	stw	r2,-8(fp)
   4c280:	e0bffe17 	ldw	r2,-8(fp)
   4c284:	10800810 	cmplti	r2,r2,32
   4c288:	103fdf1e 	bne	r2,zero,4c208 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4c28c:	e0bffd17 	ldw	r2,-12(fp)
}
   4c290:	e037883a 	mov	sp,fp
   4c294:	df000017 	ldw	fp,0(sp)
   4c298:	dec00104 	addi	sp,sp,4
   4c29c:	f800283a 	ret

0004c2a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4c2a0:	defffb04 	addi	sp,sp,-20
   4c2a4:	df000415 	stw	fp,16(sp)
   4c2a8:	df000404 	addi	fp,sp,16
   4c2ac:	e13ffe15 	stw	r4,-8(fp)
   4c2b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4c2b4:	e0bfff17 	ldw	r2,-4(fp)
   4c2b8:	10840070 	cmpltui	r2,r2,4097
   4c2bc:	1000021e 	bne	r2,zero,4c2c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4c2c0:	00840004 	movi	r2,4096
   4c2c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4c2c8:	e0fffe17 	ldw	r3,-8(fp)
   4c2cc:	e0bfff17 	ldw	r2,-4(fp)
   4c2d0:	1885883a 	add	r2,r3,r2
   4c2d4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c2d8:	e0bffe17 	ldw	r2,-8(fp)
   4c2dc:	e0bffd15 	stw	r2,-12(fp)
   4c2e0:	00000506 	br	4c2f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4c2e4:	e0bffd17 	ldw	r2,-12(fp)
   4c2e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4c2ec:	e0bffd17 	ldw	r2,-12(fp)
   4c2f0:	10800804 	addi	r2,r2,32
   4c2f4:	e0bffd15 	stw	r2,-12(fp)
   4c2f8:	e0fffd17 	ldw	r3,-12(fp)
   4c2fc:	e0bffc17 	ldw	r2,-16(fp)
   4c300:	18bff836 	bltu	r3,r2,4c2e4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4c304:	e0bffe17 	ldw	r2,-8(fp)
   4c308:	108007cc 	andi	r2,r2,31
   4c30c:	1005003a 	cmpeq	r2,r2,zero
   4c310:	1000021e 	bne	r2,zero,4c31c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4c314:	e0bffd17 	ldw	r2,-12(fp)
   4c318:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4c31c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4c320:	e037883a 	mov	sp,fp
   4c324:	df000017 	ldw	fp,0(sp)
   4c328:	dec00104 	addi	sp,sp,4
   4c32c:	f800283a 	ret

0004c330 <atexit>:
   4c330:	200b883a 	mov	r5,r4
   4c334:	000d883a 	mov	r6,zero
   4c338:	0009883a 	mov	r4,zero
   4c33c:	000f883a 	mov	r7,zero
   4c340:	004c3f01 	jmpi	4c3f0 <__register_exitproc>

0004c344 <exit>:
   4c344:	defffe04 	addi	sp,sp,-8
   4c348:	000b883a 	mov	r5,zero
   4c34c:	dc000015 	stw	r16,0(sp)
   4c350:	dfc00115 	stw	ra,4(sp)
   4c354:	2021883a 	mov	r16,r4
   4c358:	004c5280 	call	4c528 <__call_exitprocs>
   4c35c:	008001b4 	movhi	r2,6
   4c360:	10877504 	addi	r2,r2,7636
   4c364:	11000017 	ldw	r4,0(r2)
   4c368:	20800f17 	ldw	r2,60(r4)
   4c36c:	10000126 	beq	r2,zero,4c374 <exit+0x30>
   4c370:	103ee83a 	callr	r2
   4c374:	8009883a 	mov	r4,r16
   4c378:	004c7180 	call	4c718 <_exit>

0004c37c <memcmp>:
   4c37c:	00c000c4 	movi	r3,3
   4c380:	1980032e 	bgeu	r3,r6,4c390 <memcmp+0x14>
   4c384:	2144b03a 	or	r2,r4,r5
   4c388:	10c4703a 	and	r2,r2,r3
   4c38c:	10000f26 	beq	r2,zero,4c3cc <memcmp+0x50>
   4c390:	31ffffc4 	addi	r7,r6,-1
   4c394:	3000061e 	bne	r6,zero,4c3b0 <memcmp+0x34>
   4c398:	00000a06 	br	4c3c4 <memcmp+0x48>
   4c39c:	39ffffc4 	addi	r7,r7,-1
   4c3a0:	00bfffc4 	movi	r2,-1
   4c3a4:	21000044 	addi	r4,r4,1
   4c3a8:	29400044 	addi	r5,r5,1
   4c3ac:	38800526 	beq	r7,r2,4c3c4 <memcmp+0x48>
   4c3b0:	20c00003 	ldbu	r3,0(r4)
   4c3b4:	28800003 	ldbu	r2,0(r5)
   4c3b8:	18bff826 	beq	r3,r2,4c39c <memcmp+0x20>
   4c3bc:	1885c83a 	sub	r2,r3,r2
   4c3c0:	f800283a 	ret
   4c3c4:	0005883a 	mov	r2,zero
   4c3c8:	f800283a 	ret
   4c3cc:	180f883a 	mov	r7,r3
   4c3d0:	20c00017 	ldw	r3,0(r4)
   4c3d4:	28800017 	ldw	r2,0(r5)
   4c3d8:	18bfed1e 	bne	r3,r2,4c390 <memcmp+0x14>
   4c3dc:	31bfff04 	addi	r6,r6,-4
   4c3e0:	21000104 	addi	r4,r4,4
   4c3e4:	29400104 	addi	r5,r5,4
   4c3e8:	39bff936 	bltu	r7,r6,4c3d0 <memcmp+0x54>
   4c3ec:	003fe806 	br	4c390 <memcmp+0x14>

0004c3f0 <__register_exitproc>:
   4c3f0:	defffa04 	addi	sp,sp,-24
   4c3f4:	008001b4 	movhi	r2,6
   4c3f8:	10877504 	addi	r2,r2,7636
   4c3fc:	dc000015 	stw	r16,0(sp)
   4c400:	14000017 	ldw	r16,0(r2)
   4c404:	dd000415 	stw	r20,16(sp)
   4c408:	2829883a 	mov	r20,r5
   4c40c:	81405217 	ldw	r5,328(r16)
   4c410:	dcc00315 	stw	r19,12(sp)
   4c414:	dc800215 	stw	r18,8(sp)
   4c418:	dc400115 	stw	r17,4(sp)
   4c41c:	dfc00515 	stw	ra,20(sp)
   4c420:	2023883a 	mov	r17,r4
   4c424:	3027883a 	mov	r19,r6
   4c428:	3825883a 	mov	r18,r7
   4c42c:	28002526 	beq	r5,zero,4c4c4 <__register_exitproc+0xd4>
   4c430:	29000117 	ldw	r4,4(r5)
   4c434:	008007c4 	movi	r2,31
   4c438:	11002716 	blt	r2,r4,4c4d8 <__register_exitproc+0xe8>
   4c43c:	8800101e 	bne	r17,zero,4c480 <__register_exitproc+0x90>
   4c440:	2105883a 	add	r2,r4,r4
   4c444:	1085883a 	add	r2,r2,r2
   4c448:	20c00044 	addi	r3,r4,1
   4c44c:	1145883a 	add	r2,r2,r5
   4c450:	0009883a 	mov	r4,zero
   4c454:	15000215 	stw	r20,8(r2)
   4c458:	28c00115 	stw	r3,4(r5)
   4c45c:	2005883a 	mov	r2,r4
   4c460:	dfc00517 	ldw	ra,20(sp)
   4c464:	dd000417 	ldw	r20,16(sp)
   4c468:	dcc00317 	ldw	r19,12(sp)
   4c46c:	dc800217 	ldw	r18,8(sp)
   4c470:	dc400117 	ldw	r17,4(sp)
   4c474:	dc000017 	ldw	r16,0(sp)
   4c478:	dec00604 	addi	sp,sp,24
   4c47c:	f800283a 	ret
   4c480:	29802204 	addi	r6,r5,136
   4c484:	00800044 	movi	r2,1
   4c488:	110e983a 	sll	r7,r2,r4
   4c48c:	30c04017 	ldw	r3,256(r6)
   4c490:	2105883a 	add	r2,r4,r4
   4c494:	1085883a 	add	r2,r2,r2
   4c498:	1185883a 	add	r2,r2,r6
   4c49c:	19c6b03a 	or	r3,r3,r7
   4c4a0:	14802015 	stw	r18,128(r2)
   4c4a4:	14c00015 	stw	r19,0(r2)
   4c4a8:	00800084 	movi	r2,2
   4c4ac:	30c04015 	stw	r3,256(r6)
   4c4b0:	88bfe31e 	bne	r17,r2,4c440 <__register_exitproc+0x50>
   4c4b4:	30804117 	ldw	r2,260(r6)
   4c4b8:	11c4b03a 	or	r2,r2,r7
   4c4bc:	30804115 	stw	r2,260(r6)
   4c4c0:	003fdf06 	br	4c440 <__register_exitproc+0x50>
   4c4c4:	008001b4 	movhi	r2,6
   4c4c8:	1087e004 	addi	r2,r2,8064
   4c4cc:	100b883a 	mov	r5,r2
   4c4d0:	80805215 	stw	r2,328(r16)
   4c4d4:	003fd606 	br	4c430 <__register_exitproc+0x40>
   4c4d8:	00800034 	movhi	r2,0
   4c4dc:	10800004 	addi	r2,r2,0
   4c4e0:	1000021e 	bne	r2,zero,4c4ec <__register_exitproc+0xfc>
   4c4e4:	013fffc4 	movi	r4,-1
   4c4e8:	003fdc06 	br	4c45c <__register_exitproc+0x6c>
   4c4ec:	01006404 	movi	r4,400
   4c4f0:	103ee83a 	callr	r2
   4c4f4:	1007883a 	mov	r3,r2
   4c4f8:	103ffa26 	beq	r2,zero,4c4e4 <__register_exitproc+0xf4>
   4c4fc:	80805217 	ldw	r2,328(r16)
   4c500:	180b883a 	mov	r5,r3
   4c504:	18000115 	stw	zero,4(r3)
   4c508:	18800015 	stw	r2,0(r3)
   4c50c:	80c05215 	stw	r3,328(r16)
   4c510:	18006215 	stw	zero,392(r3)
   4c514:	18006315 	stw	zero,396(r3)
   4c518:	0009883a 	mov	r4,zero
   4c51c:	883fc826 	beq	r17,zero,4c440 <__register_exitproc+0x50>
   4c520:	003fd706 	br	4c480 <__register_exitproc+0x90>

0004c524 <register_fini>:
   4c524:	f800283a 	ret

0004c528 <__call_exitprocs>:
   4c528:	008001b4 	movhi	r2,6
   4c52c:	10877504 	addi	r2,r2,7636
   4c530:	10800017 	ldw	r2,0(r2)
   4c534:	defff304 	addi	sp,sp,-52
   4c538:	df000b15 	stw	fp,44(sp)
   4c53c:	d8800115 	stw	r2,4(sp)
   4c540:	00800034 	movhi	r2,0
   4c544:	10800004 	addi	r2,r2,0
   4c548:	1005003a 	cmpeq	r2,r2,zero
   4c54c:	d8800215 	stw	r2,8(sp)
   4c550:	d8800117 	ldw	r2,4(sp)
   4c554:	dd400815 	stw	r21,32(sp)
   4c558:	dd000715 	stw	r20,28(sp)
   4c55c:	10805204 	addi	r2,r2,328
   4c560:	dfc00c15 	stw	ra,48(sp)
   4c564:	ddc00a15 	stw	r23,40(sp)
   4c568:	dd800915 	stw	r22,36(sp)
   4c56c:	dcc00615 	stw	r19,24(sp)
   4c570:	dc800515 	stw	r18,20(sp)
   4c574:	dc400415 	stw	r17,16(sp)
   4c578:	dc000315 	stw	r16,12(sp)
   4c57c:	282b883a 	mov	r21,r5
   4c580:	2039883a 	mov	fp,r4
   4c584:	d8800015 	stw	r2,0(sp)
   4c588:	2829003a 	cmpeq	r20,r5,zero
   4c58c:	d8800117 	ldw	r2,4(sp)
   4c590:	14405217 	ldw	r17,328(r2)
   4c594:	88001026 	beq	r17,zero,4c5d8 <__call_exitprocs+0xb0>
   4c598:	ddc00017 	ldw	r23,0(sp)
   4c59c:	88800117 	ldw	r2,4(r17)
   4c5a0:	8c802204 	addi	r18,r17,136
   4c5a4:	143fffc4 	addi	r16,r2,-1
   4c5a8:	80000916 	blt	r16,zero,4c5d0 <__call_exitprocs+0xa8>
   4c5ac:	05bfffc4 	movi	r22,-1
   4c5b0:	a000151e 	bne	r20,zero,4c608 <__call_exitprocs+0xe0>
   4c5b4:	8409883a 	add	r4,r16,r16
   4c5b8:	2105883a 	add	r2,r4,r4
   4c5bc:	1485883a 	add	r2,r2,r18
   4c5c0:	10c02017 	ldw	r3,128(r2)
   4c5c4:	a8c01126 	beq	r21,r3,4c60c <__call_exitprocs+0xe4>
   4c5c8:	843fffc4 	addi	r16,r16,-1
   4c5cc:	85bff81e 	bne	r16,r22,4c5b0 <__call_exitprocs+0x88>
   4c5d0:	d8800217 	ldw	r2,8(sp)
   4c5d4:	10003126 	beq	r2,zero,4c69c <__call_exitprocs+0x174>
   4c5d8:	dfc00c17 	ldw	ra,48(sp)
   4c5dc:	df000b17 	ldw	fp,44(sp)
   4c5e0:	ddc00a17 	ldw	r23,40(sp)
   4c5e4:	dd800917 	ldw	r22,36(sp)
   4c5e8:	dd400817 	ldw	r21,32(sp)
   4c5ec:	dd000717 	ldw	r20,28(sp)
   4c5f0:	dcc00617 	ldw	r19,24(sp)
   4c5f4:	dc800517 	ldw	r18,20(sp)
   4c5f8:	dc400417 	ldw	r17,16(sp)
   4c5fc:	dc000317 	ldw	r16,12(sp)
   4c600:	dec00d04 	addi	sp,sp,52
   4c604:	f800283a 	ret
   4c608:	8409883a 	add	r4,r16,r16
   4c60c:	88c00117 	ldw	r3,4(r17)
   4c610:	2105883a 	add	r2,r4,r4
   4c614:	1445883a 	add	r2,r2,r17
   4c618:	18ffffc4 	addi	r3,r3,-1
   4c61c:	11800217 	ldw	r6,8(r2)
   4c620:	1c001526 	beq	r3,r16,4c678 <__call_exitprocs+0x150>
   4c624:	10000215 	stw	zero,8(r2)
   4c628:	303fe726 	beq	r6,zero,4c5c8 <__call_exitprocs+0xa0>
   4c62c:	00c00044 	movi	r3,1
   4c630:	1c06983a 	sll	r3,r3,r16
   4c634:	90804017 	ldw	r2,256(r18)
   4c638:	8cc00117 	ldw	r19,4(r17)
   4c63c:	1884703a 	and	r2,r3,r2
   4c640:	10001426 	beq	r2,zero,4c694 <__call_exitprocs+0x16c>
   4c644:	90804117 	ldw	r2,260(r18)
   4c648:	1884703a 	and	r2,r3,r2
   4c64c:	10000c1e 	bne	r2,zero,4c680 <__call_exitprocs+0x158>
   4c650:	2105883a 	add	r2,r4,r4
   4c654:	1485883a 	add	r2,r2,r18
   4c658:	11400017 	ldw	r5,0(r2)
   4c65c:	e009883a 	mov	r4,fp
   4c660:	303ee83a 	callr	r6
   4c664:	88800117 	ldw	r2,4(r17)
   4c668:	98bfc81e 	bne	r19,r2,4c58c <__call_exitprocs+0x64>
   4c66c:	b8800017 	ldw	r2,0(r23)
   4c670:	147fd526 	beq	r2,r17,4c5c8 <__call_exitprocs+0xa0>
   4c674:	003fc506 	br	4c58c <__call_exitprocs+0x64>
   4c678:	8c000115 	stw	r16,4(r17)
   4c67c:	003fea06 	br	4c628 <__call_exitprocs+0x100>
   4c680:	2105883a 	add	r2,r4,r4
   4c684:	1485883a 	add	r2,r2,r18
   4c688:	11000017 	ldw	r4,0(r2)
   4c68c:	303ee83a 	callr	r6
   4c690:	003ff406 	br	4c664 <__call_exitprocs+0x13c>
   4c694:	303ee83a 	callr	r6
   4c698:	003ff206 	br	4c664 <__call_exitprocs+0x13c>
   4c69c:	88800117 	ldw	r2,4(r17)
   4c6a0:	1000081e 	bne	r2,zero,4c6c4 <__call_exitprocs+0x19c>
   4c6a4:	89000017 	ldw	r4,0(r17)
   4c6a8:	20000726 	beq	r4,zero,4c6c8 <__call_exitprocs+0x1a0>
   4c6ac:	b9000015 	stw	r4,0(r23)
   4c6b0:	8809883a 	mov	r4,r17
   4c6b4:	00000000 	call	0 <__alt_mem_onchip_instrucrion_memory0-0x40000>
   4c6b8:	bc400017 	ldw	r17,0(r23)
   4c6bc:	883fb71e 	bne	r17,zero,4c59c <__call_exitprocs+0x74>
   4c6c0:	003fc506 	br	4c5d8 <__call_exitprocs+0xb0>
   4c6c4:	89000017 	ldw	r4,0(r17)
   4c6c8:	882f883a 	mov	r23,r17
   4c6cc:	2023883a 	mov	r17,r4
   4c6d0:	883fb21e 	bne	r17,zero,4c59c <__call_exitprocs+0x74>
   4c6d4:	003fc006 	br	4c5d8 <__call_exitprocs+0xb0>

0004c6d8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4c6d8:	defffd04 	addi	sp,sp,-12
   4c6dc:	df000215 	stw	fp,8(sp)
   4c6e0:	df000204 	addi	fp,sp,8
   4c6e4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4c6e8:	e0bfff17 	ldw	r2,-4(fp)
   4c6ec:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4c6f0:	e0bffe17 	ldw	r2,-8(fp)
   4c6f4:	1005003a 	cmpeq	r2,r2,zero
   4c6f8:	1000021e 	bne	r2,zero,4c704 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4c6fc:	002af070 	cmpltui	zero,zero,43969
   4c700:	00000106 	br	4c708 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4c704:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4c708:	e037883a 	mov	sp,fp
   4c70c:	df000017 	ldw	fp,0(sp)
   4c710:	dec00104 	addi	sp,sp,4
   4c714:	f800283a 	ret

0004c718 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4c718:	defffd04 	addi	sp,sp,-12
   4c71c:	dfc00215 	stw	ra,8(sp)
   4c720:	df000115 	stw	fp,4(sp)
   4c724:	df000104 	addi	fp,sp,4
   4c728:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4c72c:	e13fff17 	ldw	r4,-4(fp)
   4c730:	004c6d80 	call	4c6d8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4c734:	003fff06 	br	4c734 <_exit+0x1c>
   4c738:	0004c524 	muli	zero,zero,4884
