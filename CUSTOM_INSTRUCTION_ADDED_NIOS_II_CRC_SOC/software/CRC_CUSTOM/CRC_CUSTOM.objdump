
CRC_CUSTOM.elf:     file format elf32-littlenios2
CRC_CUSTOM.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000dcfc memsz 0x0000dcfc flags r-x
    LOAD off    0x0000ed1c vaddr 0x0000dd1c paddr 0x0000f778 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x000111d4 vaddr 0x000111d4 paddr 0x000111d4 align 2**12
         filesz 0x00000000 memsz 0x000026f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d1f4  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000974  0000d3a8  0000d3a8  0000e3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0000dd1c  0000f778  0000ed1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000026f4  000111d4  000111d4  000111d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010778  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  000107a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001465  00000000  00000000  00011498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023cc4  00000000  00000000  000128fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007c26  00000000  00000000  000365c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013ec2  00000000  00000000  0003e1e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001974  00000000  00000000  000520ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000226a  00000000  00000000  00053a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bef5  00000000  00000000  00055c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00061b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00061ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006565e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00065661  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00065664  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00065665  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00065666  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006566a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006566e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00065672  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006567b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00065684  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006568d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000052  00000000  00000000  00065690  2**0
                  CONTENTS, READONLY
 29 .jdi          0000415a  00000000  00000000  000656e2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000540c9  00000000  00000000  0006983c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000d3a8 l    d  .rodata	00000000 .rodata
0000dd1c l    d  .rwdata	00000000 .rwdata
000111d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ci_crc.c
00000000 l    df *ABS*	00000000 crc.c
000002f0 l     F .text	00000094 reflect
00000000 l    df *ABS*	00000000 crc_main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000ccc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000dd1c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001028 l     F .text	00000058 __sprint_r
0000da56 l     O .rodata	00000010 blanks.3452
0000da46 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000030a4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00003258 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004c80 l     F .text	00000058 std
00004d8c l     F .text	00000008 __fp_lock
00004d94 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0000f744 l     O .rwdata	00000004 charset
0000da88 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000dbd0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009140 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000aa24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000aa84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000aab0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000abe8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ad0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000adec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000af4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b17c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f768 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b434 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e6d8 l     O .rwdata	00001060 jtag_uart
0000b548 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000b788 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000b9b0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c02c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c4b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c8dc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ca2c l     F .text	000000f8 alt_file_locked
0000ccb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00006a70 g     F .text	00000094 _mprec_log10
00006b5c g     F .text	00000088 __any_on
00008314 g     F .text	00000070 _isatty_r
0000dba8 g     O .rodata	00000028 __mprec_tinytens
0000afac g     F .text	0000006c alt_main
00000f00 g     F .text	000000a0 _puts_r
00013638 g     O .bss	00000100 alt_irq
00008384 g     F .text	00000078 _lseek_r
0000f778 g       *ABS*	00000000 __flash_rwdata_start
00009c60 g     F .text	00000088 __eqdf2
000138c8 g       *ABS*	00000000 __alt_heap_start
00000e88 g     F .text	00000044 printf
00007dcc g     F .text	00000068 __sseek
00004ce8 g     F .text	000000a4 __sinit
000059f4 g     F .text	00000084 _setlocale_r
00004de8 g     F .text	0000009c __sfmoreglue
0000b038 g     F .text	00000020 __malloc_unlock
00011200 g     O .bss	00000004 altera_avalon_timer_ts_freq
000064ec g     F .text	000000e0 memmove
00004dd8 g     F .text	00000010 _cleanup
00006be4 g     F .text	000000bc _Balloc
00009d70 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000082a0 g     F .text	00000074 _fstat_r
000111ec g     O .bss	00000004 errno
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000111f4 g     O .bss	00000004 alt_argv
00017738 g       *ABS*	00000000 _gp
0000e558 g     O .rwdata	00000180 alt_fd_list
0000ced4 g     F .text	00000094 alt_find_dev
0000644c g     F .text	000000a0 memcpy
00004dcc g     F .text	0000000c _cleanup_r
00009f08 g     F .text	000000f8 __floatsidf
0000c9b4 g     F .text	00000078 alt_io_redirect
00009e80 g     F .text	00000088 __ltdf2
0000d3a8 g       *ABS*	00000000 __DTOR_END__
00000fa0 g     F .text	00000014 puts
000069c0 g     F .text	000000b0 __ratio
0000bbc8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000ecc g     F .text	00000034 _printf_r
00000e08 g     F .text	00000008 __udivsi3
0000ac48 g     F .text	000000c4 isatty
0000dab8 g     O .rodata	000000c8 __mprec_tens
000059d0 g     F .text	00000008 __locale_charset
0000d158 g     F .text	00000090 alt_icache_flush
000111e0 g     O .bss	00000004 __malloc_top_pad
0000f740 g     O .rwdata	00000004 __mb_cur_max
000059d8 g     F .text	0000000c _localeconv_r
00007348 g     F .text	0000003c __i2b
000053b4 g     F .text	0000049c __sfvwrite_r
00007d54 g     F .text	00000070 _sbrk_r
000083fc g     F .text	00000078 _read_r
0000e11c g     O .rwdata	0000000c __lc_ctype
0000f760 g     O .rwdata	00000004 alt_max_fd
0000a724 g     F .text	00000138 __unpack_d
0000817c g     F .text	00000110 _fclose_r
00004c4c g     F .text	00000034 fflush
000111e4 g     O .bss	00000004 __malloc_max_sbrked_mem
000095d0 g     F .text	00000074 __adddf3
000068a0 g     F .text	00000120 __b2d
00008ae0 g     F .text	00000660 __umoddi3
0000ae58 g     F .text	000000f4 lseek
0000f73c g     O .rwdata	00000004 _global_impure_ptr
000076f0 g     F .text	000005f4 _realloc_r
000138c8 g       *ABS*	00000000 __bss_end
0000c7e4 g     F .text	000000f8 alt_iic_isr_register
0000cda8 g     F .text	0000010c alt_tick
00008474 g     F .text	0000066c __udivdi3
0000db80 g     O .rodata	00000028 __mprec_bigtens
000075d0 g     F .text	00000120 __s2b
0000a0d8 g     F .text	00000194 __floatunsidf
000067c0 g     F .text	00000060 __mcmp
00004db4 g     F .text	00000018 __fp_lock_all
0000c79c g     F .text	00000048 alt_ic_irq_enabled
0000cd10 g     F .text	00000098 alt_alarm_stop
00011204 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000e530 g     O .rwdata	00000028 alt_dev_null
0000c3e8 g     F .text	0000001c alt_dcache_flush_all
0000668c g     F .text	00000070 __hi0bits
0000a000 g     F .text	000000d8 __fixdfsi
0000f778 g       *ABS*	00000000 __ram_rwdata_end
0000f758 g     O .rwdata	00000008 alt_dev_list
0000b310 g     F .text	00000124 write
00000384 g     F .text	000000f8 crcSlow
0000c26c g     F .text	00000028 alt_timestamp_freq
0000dd1c g       *ABS*	00000000 __ram_rodata_end
0000ab10 g     F .text	000000d8 fstat
000074b0 g     F .text	00000120 __pow5mult
000111d4 g     O .bss	00000004 __nlocale_changed
00000e10 g     F .text	00000008 __umodsi3
000138c8 g       *ABS*	00000000 end
00011638 g     O .bss	00002000 data_buffer_region
0000b6c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d3a4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000c09c g     F .text	00000090 alt_avalon_timer_sc_init
0000a390 g     F .text	00000080 __clzsi2
0000bdec g     F .text	00000240 altera_avalon_jtag_uart_write
00004cd8 g     F .text	00000004 __sfp_lock_acquire
00006368 g     F .text	000000e4 memchr
00001080 g     F .text	00001ec4 ___vfprintf_internal_r
000050a0 g     F .text	00000314 _free_r
000030a8 g     F .text	000001b0 __call_exitprocs
000111d8 g     O .bss	00000004 __mlocale_changed
0000f74c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00011208 g     O .bss	00000004 _alt_tick_rate
00006fa8 g     F .text	0000014c __lshift
0001120c g     O .bss	00000004 _alt_nticks
0000b058 g     F .text	00000124 read
0000b4c8 g     F .text	00000080 alt_sys_init
0000d270 g     F .text	00000134 __register_exitproc
000070f4 g     F .text	00000254 __multiply
0000ba60 g     F .text	00000074 altera_avalon_jtag_uart_close
00000e18 g     F .text	00000038 __mulsi3
0000dd1c g       *ABS*	00000000 __ram_rwdata_start
0000d3a8 g       *ABS*	00000000 __ram_rodata_start
00011210 g     O .bss	00000028 __malloc_current_mallinfo
00006ca0 g     F .text	0000017c __d2b
0000b580 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d088 g     F .text	000000d0 alt_get_fd
0000a85c g     F .text	000000c8 __fpcmp_parts_d
0000810c g     F .text	00000070 _close_r
0000d1fc g     F .text	00000074 memcmp
0000b630 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000138c8 g       *ABS*	00000000 __alt_stack_base
0000b678 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002f68 g     F .text	0000013c __swsetup_r
00009a08 g     F .text	00000258 __divdf3
0000047c g     F .text	000000c4 crcInit
00004e84 g     F .text	000000f0 __sfp
00006b04 g     F .text	00000058 __copybits
0000e128 g     O .rwdata	00000408 __malloc_av_
00004ce4 g     F .text	00000004 __sinit_lock_release
00009644 g     F .text	000003c4 __muldf3
00007eb0 g     F .text	00000060 __sread
000001f0 g     F .text	00000100 crcCI
0000cf68 g     F .text	00000120 alt_find_file
0000c404 g     F .text	000000b4 alt_dev_llist_insert
0000b018 g     F .text	00000020 __malloc_lock
0000b254 g     F .text	000000bc sbrk
00004a50 g     F .text	000001fc _fflush_r
00008044 g     F .text	000000c8 _calloc_r
000111d4 g       *ABS*	00000000 __bss_start
000065cc g     F .text	00000098 memset
00000604 g     F .text	000006c8 main
000111f8 g     O .bss	00000004 alt_envp
000111e8 g     O .bss	00000004 __malloc_max_total_mem
0000b5d8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007dc4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000828c g     F .text	00000014 fclose
0000c12c g     F .text	000000a4 alt_timestamp_start
00013738 g     O .bss	00000190 _atexit0
0000349c g     F .text	000015b4 _dtoa_r
00005c28 g     F .text	00000740 _malloc_r
0000f764 g     O .rwdata	00000004 alt_errno
00005918 g     F .text	000000b8 _fwalk
00000d48 g     F .text	00000060 __divsi3
0000dbdc g     O .rodata	00000014 __thenan_df
00004f74 g     F .text	0000012c _malloc_trim_r
0000d3a8 g       *ABS*	00000000 __CTOR_END__
00007f10 g     F .text	000000bc strcmp
0000d3a8 g       *ABS*	00000000 __flash_rodata_start
0000d3a8 g       *ABS*	00000000 __DTOR_LIST__
00009ce8 g     F .text	00000088 __nedf2
0000b494 g     F .text	00000034 alt_irq_init
0000b1dc g     F .text	00000078 alt_release_fd
0000dbf0 g     O .rodata	00000100 __clz_tab
000111dc g     O .bss	00000004 _PathLocale
0000d1e8 g     F .text	00000014 atexit
00007fcc g     F .text	00000078 _write_r
00005a78 g     F .text	0000001c setlocale
0000f738 g     O .rwdata	00000004 _impure_ptr
000111f0 g     O .bss	00000004 alt_argc
000111fc g     O .bss	00000004 altera_avalon_timer_ts_base
0000c57c g     F .text	00000064 _do_dtors
00000540 g     F .text	000000c4 crcFast
00000020 g       .exceptions	00000000 alt_irq_entry
00006820 g     F .text	00000080 __ulp
00007ce4 g     F .text	00000040 __isinfd
00004d9c g     F .text	00000018 __fp_unlock_all
0000f750 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000059e4 g     F .text	00000010 localeconv
0000c1d0 g     F .text	0000009c alt_timestamp
0000c610 g     F .text	00000050 alt_ic_isr_register
0000f778 g       *ABS*	00000000 _edata
000138c8 g       *ABS*	00000000 _end
00011238 g     O .bss	00000400 crcTable
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000bad4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000c6fc g     F .text	000000a0 alt_ic_irq_disable
00007e34 g     F .text	0000007c __swrite
0000f748 g     O .rwdata	00000004 __malloc_trim_threshold
0000ceb4 g     F .text	00000020 altera_nios2_qsys_irq_init
00000e50 g     F .text	00000038 exit
00005850 g     F .text	000000c8 _fwalk_reent
00006e1c g     F .text	0000018c __mdiff
00000da8 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004cdc g     F .text	00000004 __sfp_lock_release
00007d24 g     F .text	00000030 __isnand
0000aaf0 g     F .text	00000020 _exit
0000c294 g     F .text	00000154 alt_alarm_start
0000a26c g     F .text	00000124 __muldi3
00005a94 g     F .text	00000194 __smakebuf_r
00000fb4 g     F .text	00000074 strlen
0000cb24 g     F .text	0000018c open
00009df8 g     F .text	00000088 __gedf2
0000c5e0 g     F .text	00000030 alt_icache_flush_all
0000f76c g     O .rwdata	00000004 alt_priority_mask
0000c660 g     F .text	0000009c alt_ic_irq_enable
00002f44 g     F .text	00000024 __vfprintf_internal
00009550 g     F .text	00000080 __subdf3
000066fc g     F .text	000000c4 __lo0bits
0000f770 g     O .rwdata	00000008 alt_alarm_list
0000c518 g     F .text	00000064 _do_ctors
0000a924 g     F .text	00000100 close
0000ad6c g     F .text	00000080 alt_load
0000a410 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00004ce0 g     F .text	00000004 __sinit_lock_acquire
00007384 g     F .text	0000012c __multadd
00006664 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18cd8e04 	addi	r3,r3,13880
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18cd8e04 	addi	r3,r3,13880
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d69dce14 	ori	gp,gp,30520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10847514 	ori	r2,r2,4564

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18ce3214 	ori	r3,r3,14536

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000ad6c0 	call	ad6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000afac0 	call	afac <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <crcCI>:
 * n = 6, Read  96 bits data from the custom instruction
 * n = 7, Read 128 bits data from the custom instruction*/
#define CRC_CI_MACRO(n, A)       ALT_CI_CRC_CUSTOM_0(n,A)

unsigned long crcCI(unsigned char * input_data, unsigned long input_data_length)
{
     1f0:	defffb04 	addi	sp,sp,-20
     1f4:	df000415 	stw	fp,16(sp)
     1f8:	df000404 	addi	fp,sp,16
     1fc:	e13ffe15 	stw	r4,-8(fp)
     200:	e17fff15 	stw	r5,-4(fp)
  unsigned long index;
  /* copy of the data buffer pointer so that it can advance by different widths */
  void * input_data_copy = (void *)input_data;
     204:	e0bffe17 	ldw	r2,-8(fp)
     208:	e0bffc15 	stw	r2,-16(fp)

  /* The custom instruction CRC will initialize to the inital remainder value */    
  CRC_CI_MACRO(0,0);
     20c:	0005883a 	mov	r2,zero
     210:	1005c032 	custom	0,r2,r2,zero
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
     214:	e03ffd15 	stw	zero,-12(fp)
     218:	00000906 	br	240 <crcCI+0x50>
  {
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
     21c:	e0bffc17 	ldw	r2,-16(fp)
     220:	10800017 	ldw	r2,0(r2)
     224:	1005c0f2 	custom	3,r2,r2,zero
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
     228:	e0bffc17 	ldw	r2,-16(fp)
     22c:	10800104 	addi	r2,r2,4
     230:	e0bffc15 	stw	r2,-16(fp)
  
  /* Write 32 bit data to the custom instruction.  If the buffer does not end
   * on a 32 bit boundary then the remaining data will be sent to the custom
   * instruction in the 'if' statement below.
   */
  for(index = 0; index < (input_data_length & 0xFFFFFFFC); index+=4)
     234:	e0bffd17 	ldw	r2,-12(fp)
     238:	10800104 	addi	r2,r2,4
     23c:	e0bffd15 	stw	r2,-12(fp)
     240:	e0ffff17 	ldw	r3,-4(fp)
     244:	00bfff04 	movi	r2,-4
     248:	1886703a 	and	r3,r3,r2
     24c:	e0bffd17 	ldw	r2,-12(fp)
     250:	10fff236 	bltu	r2,r3,21c <crcCI+0x2c>
    CRC_CI_MACRO(3, *(unsigned long *)input_data_copy);
    input_data_copy += 4;  /* void pointer, must move by 4 for each word */
  }

  /* Write the remainder of the buffer if it does not end on a word boundary */  
  if((input_data_length & 0x3) == 0x3)  /* 3 bytes left */
     254:	e0bfff17 	ldw	r2,-4(fp)
     258:	108000cc 	andi	r2,r2,3
     25c:	108000d8 	cmpnei	r2,r2,3
     260:	10000c1e 	bne	r2,zero,294 <crcCI+0xa4>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);
     264:	e0bffc17 	ldw	r2,-16(fp)
     268:	1080000b 	ldhu	r2,0(r2)
     26c:	10bfffcc 	andi	r2,r2,65535
     270:	1005c0b2 	custom	2,r2,r2,zero
    input_data_copy += 2;
     274:	e0bffc17 	ldw	r2,-16(fp)
     278:	10800084 	addi	r2,r2,2
     27c:	e0bffc15 	stw	r2,-16(fp)
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);
     280:	e0bffc17 	ldw	r2,-16(fp)
     284:	10800003 	ldbu	r2,0(r2)
     288:	10803fcc 	andi	r2,r2,255
     28c:	1005c072 	custom	1,r2,r2,zero
     290:	00001106 	br	2d8 <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x2) /* 2 bytes left */
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	108000cc 	andi	r2,r2,3
     29c:	10800098 	cmpnei	r2,r2,2
     2a0:	1000051e 	bne	r2,zero,2b8 <crcCI+0xc8>
  {
    CRC_CI_MACRO(2, *(unsigned short *)input_data_copy);    
     2a4:	e0bffc17 	ldw	r2,-16(fp)
     2a8:	1080000b 	ldhu	r2,0(r2)
     2ac:	10bfffcc 	andi	r2,r2,65535
     2b0:	1005c0b2 	custom	2,r2,r2,zero
     2b4:	00000806 	br	2d8 <crcCI+0xe8>
  }
  else if((input_data_length & 0x3) == 0x1) /* 1 byte left */
     2b8:	e0bfff17 	ldw	r2,-4(fp)
     2bc:	108000cc 	andi	r2,r2,3
     2c0:	10800058 	cmpnei	r2,r2,1
     2c4:	1000041e 	bne	r2,zero,2d8 <crcCI+0xe8>
  {
    CRC_CI_MACRO(1, *(unsigned char *)input_data_copy);    
     2c8:	e0bffc17 	ldw	r2,-16(fp)
     2cc:	10800003 	ldbu	r2,0(r2)
     2d0:	10803fcc 	andi	r2,r2,255
     2d4:	1005c072 	custom	1,r2,r2,zero
  
  /* There are 4 registers in the CRC custom instruction.  Since
   * this example uses CRC-32 only the first register must be read
   * in order to receive the full result.
   */
  return CRC_CI_MACRO(4, 0);
     2d8:	0005883a 	mov	r2,zero
     2dc:	1005c132 	custom	4,r2,r2,zero
}
     2e0:	e037883a 	mov	sp,fp
     2e4:	df000017 	ldw	fp,0(sp)
     2e8:	dec00104 	addi	sp,sp,4
     2ec:	f800283a 	ret

000002f0 <reflect>:
 * Returns:   The reflection of the original data.
 *
 *********************************************************************/
static unsigned long
reflect(unsigned long data, unsigned char nBits)
{
     2f0:	defffb04 	addi	sp,sp,-20
     2f4:	df000415 	stw	fp,16(sp)
     2f8:	df000404 	addi	fp,sp,16
     2fc:	e13ffe15 	stw	r4,-8(fp)
     300:	e17fff05 	stb	r5,-4(fp)
  unsigned long  reflection = 0x00000000;
     304:	e03ffd15 	stw	zero,-12(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
     308:	e03ffc05 	stb	zero,-16(fp)
     30c:	00001506 	br	364 <reflect+0x74>
  {
    /*
     * If the LSB bit is set, set the reflection of it.
     */
    if (data & 0x01)
     310:	e0bffe17 	ldw	r2,-8(fp)
     314:	1080004c 	andi	r2,r2,1
     318:	10803fcc 	andi	r2,r2,255
     31c:	1005003a 	cmpeq	r2,r2,zero
     320:	10000a1e 	bne	r2,zero,34c <reflect+0x5c>
    {
      reflection |= (1 << ((nBits - 1) - bit));
     324:	e0ffff03 	ldbu	r3,-4(fp)
     328:	e0bffc03 	ldbu	r2,-16(fp)
     32c:	1885c83a 	sub	r2,r3,r2
     330:	10ffffc4 	addi	r3,r2,-1
     334:	00800044 	movi	r2,1
     338:	10c4983a 	sll	r2,r2,r3
     33c:	1007883a 	mov	r3,r2
     340:	e0bffd17 	ldw	r2,-12(fp)
     344:	10c4b03a 	or	r2,r2,r3
     348:	e0bffd15 	stw	r2,-12(fp)
    }

    data = (data >> 1);
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	1004d07a 	srli	r2,r2,1
     354:	e0bffe15 	stw	r2,-8(fp)
  unsigned char  bit;

  /*
   * Reflect the data about the center bit.
   */
  for (bit = 0; bit < nBits; ++bit)
     358:	e0bffc03 	ldbu	r2,-16(fp)
     35c:	10800044 	addi	r2,r2,1
     360:	e0bffc05 	stb	r2,-16(fp)
     364:	e0fffc03 	ldbu	r3,-16(fp)
     368:	e0bfff03 	ldbu	r2,-4(fp)
     36c:	18bfe836 	bltu	r3,r2,310 <reflect+0x20>
    }

    data = (data >> 1);
  }

  return (reflection);
     370:	e0bffd17 	ldw	r2,-12(fp)

} /* reflect() */
     374:	e037883a 	mov	sp,fp
     378:	df000017 	ldw	fp,0(sp)
     37c:	dec00104 	addi	sp,sp,4
     380:	f800283a 	ret

00000384 <crcSlow>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcSlow(unsigned char const message[], int nBytes)
{
     384:	defff904 	addi	sp,sp,-28
     388:	dfc00615 	stw	ra,24(sp)
     38c:	df000515 	stw	fp,20(sp)
     390:	df000504 	addi	fp,sp,20
     394:	e13ffe15 	stw	r4,-8(fp)
     398:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
     39c:	00bfffc4 	movi	r2,-1
     3a0:	e0bffd15 	stw	r2,-12(fp)


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     3a4:	e03ffc15 	stw	zero,-16(fp)
     3a8:	00002806 	br	44c <crcSlow+0xc8>
    {
        /*
         * Bring the next byte into the remainder.
         */
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
     3ac:	e0bffc17 	ldw	r2,-16(fp)
     3b0:	1007883a 	mov	r3,r2
     3b4:	e0bffe17 	ldw	r2,-8(fp)
     3b8:	1885883a 	add	r2,r3,r2
     3bc:	10800003 	ldbu	r2,0(r2)
     3c0:	11003fcc 	andi	r4,r2,255
     3c4:	01400204 	movi	r5,8
     3c8:	00002f00 	call	2f0 <reflect>
     3cc:	10803fcc 	andi	r2,r2,255
     3d0:	1004963a 	slli	r2,r2,24
     3d4:	1007883a 	mov	r3,r2
     3d8:	e0bffd17 	ldw	r2,-12(fp)
     3dc:	10c4f03a 	xor	r2,r2,r3
     3e0:	e0bffd15 	stw	r2,-12(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     3e4:	00800204 	movi	r2,8
     3e8:	e0bffb05 	stb	r2,-20(fp)
     3ec:	00001106 	br	434 <crcSlow+0xb0>
        {
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
     3f0:	e0bffd17 	ldw	r2,-12(fp)
     3f4:	1004403a 	cmpge	r2,r2,zero
     3f8:	1000081e 	bne	r2,zero,41c <crcSlow+0x98>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
     3fc:	e0bffd17 	ldw	r2,-12(fp)
     400:	1085883a 	add	r2,r2,r2
     404:	1007883a 	mov	r3,r2
     408:	00813074 	movhi	r2,1217
     40c:	10876dc4 	addi	r2,r2,7607
     410:	1884f03a 	xor	r2,r3,r2
     414:	e0bffd15 	stw	r2,-12(fp)
     418:	00000306 	br	428 <crcSlow+0xa4>
            }
            else
            {
                remainder = (remainder << 1);
     41c:	e0bffd17 	ldw	r2,-12(fp)
     420:	1085883a 	add	r2,r2,r2
     424:	e0bffd15 	stw	r2,-12(fp)
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     428:	e0bffb03 	ldbu	r2,-20(fp)
     42c:	10bfffc4 	addi	r2,r2,-1
     430:	e0bffb05 	stb	r2,-20(fp)
     434:	e0bffb03 	ldbu	r2,-20(fp)
     438:	1004c03a 	cmpne	r2,r2,zero
     43c:	103fec1e 	bne	r2,zero,3f0 <crcSlow+0x6c>


    /*
     * Perform modulo-2 division, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     440:	e0bffc17 	ldw	r2,-16(fp)
     444:	10800044 	addi	r2,r2,1
     448:	e0bffc15 	stw	r2,-16(fp)
     44c:	e0fffc17 	ldw	r3,-16(fp)
     450:	e0bfff17 	ldw	r2,-4(fp)
     454:	18bfd516 	blt	r3,r2,3ac <crcSlow+0x28>
    }

    /*
     * The final remainder is the CRC result.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
     458:	e13ffd17 	ldw	r4,-12(fp)
     45c:	01400804 	movi	r5,32
     460:	00002f00 	call	2f0 <reflect>
     464:	0084303a 	nor	r2,zero,r2

}   /* crcSlow() */
     468:	e037883a 	mov	sp,fp
     46c:	dfc00117 	ldw	ra,4(sp)
     470:	df000017 	ldw	fp,0(sp)
     474:	dec00204 	addi	sp,sp,8
     478:	f800283a 	ret

0000047c <crcInit>:
 * Returns:   None defined.
 *
 *********************************************************************/
void
crcInit(void)
{
     47c:	defffc04 	addi	sp,sp,-16
     480:	df000315 	stw	fp,12(sp)
     484:	df000304 	addi	fp,sp,12


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
     488:	e03ffe15 	stw	zero,-8(fp)
     48c:	00002506 	br	524 <crcInit+0xa8>
    {
        /*
         * Start with the dividend followed by zeros.
         */
        remainder = dividend << (WIDTH - 8);
     490:	e0bffe17 	ldw	r2,-8(fp)
     494:	1004963a 	slli	r2,r2,24
     498:	e0bfff15 	stw	r2,-4(fp)

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     49c:	00800204 	movi	r2,8
     4a0:	e0bffd05 	stb	r2,-12(fp)
     4a4:	00001106 	br	4ec <crcInit+0x70>
        {
            /*
             * Try to divide the current data bit.
             */     
            if (remainder & TOPBIT)
     4a8:	e0bfff17 	ldw	r2,-4(fp)
     4ac:	1004403a 	cmpge	r2,r2,zero
     4b0:	1000081e 	bne	r2,zero,4d4 <crcInit+0x58>
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
     4b4:	e0bfff17 	ldw	r2,-4(fp)
     4b8:	1085883a 	add	r2,r2,r2
     4bc:	1007883a 	mov	r3,r2
     4c0:	00813074 	movhi	r2,1217
     4c4:	10876dc4 	addi	r2,r2,7607
     4c8:	1884f03a 	xor	r2,r3,r2
     4cc:	e0bfff15 	stw	r2,-4(fp)
     4d0:	00000306 	br	4e0 <crcInit+0x64>
            }
            else
            {
                remainder = (remainder << 1);
     4d4:	e0bfff17 	ldw	r2,-4(fp)
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	e0bfff15 	stw	r2,-4(fp)
        remainder = dividend << (WIDTH - 8);

        /*
         * Perform modulo-2 division, a bit at a time.
         */
        for (bit = 8; bit > 0; --bit)
     4e0:	e0bffd03 	ldbu	r2,-12(fp)
     4e4:	10bfffc4 	addi	r2,r2,-1
     4e8:	e0bffd05 	stb	r2,-12(fp)
     4ec:	e0bffd03 	ldbu	r2,-12(fp)
     4f0:	1004c03a 	cmpne	r2,r2,zero
     4f4:	103fec1e 	bne	r2,zero,4a8 <crcInit+0x2c>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
     4f8:	e0bffe17 	ldw	r2,-8(fp)
     4fc:	00c00074 	movhi	r3,1
     500:	18c48e04 	addi	r3,r3,4664
     504:	1085883a 	add	r2,r2,r2
     508:	1085883a 	add	r2,r2,r2
     50c:	10c7883a 	add	r3,r2,r3
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	18800015 	stw	r2,0(r3)


    /*
     * Compute the remainder of each possible dividend.
     */
    for (dividend = 0; dividend < 256; ++dividend)
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800044 	addi	r2,r2,1
     520:	e0bffe15 	stw	r2,-8(fp)
     524:	e0bffe17 	ldw	r2,-8(fp)
     528:	10804010 	cmplti	r2,r2,256
     52c:	103fd81e 	bne	r2,zero,490 <crcInit+0x14>
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
    }

}   /* crcInit() */
     530:	e037883a 	mov	sp,fp
     534:	df000017 	ldw	fp,0(sp)
     538:	dec00104 	addi	sp,sp,4
     53c:	f800283a 	ret

00000540 <crcFast>:
 * Returns:   The CRC of the message.
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
     540:	defff904 	addi	sp,sp,-28
     544:	dfc00615 	stw	ra,24(sp)
     548:	df000515 	stw	fp,20(sp)
     54c:	df000504 	addi	fp,sp,20
     550:	e13ffe15 	stw	r4,-8(fp)
     554:	e17fff15 	stw	r5,-4(fp)
    crc            remainder = INITIAL_REMAINDER;
     558:	00bfffc4 	movi	r2,-1
     55c:	e0bffd15 	stw	r2,-12(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     560:	e03ffb15 	stw	zero,-20(fp)
     564:	00001b06 	br	5d4 <crcFast+0x94>
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
     568:	e0bffb17 	ldw	r2,-20(fp)
     56c:	1007883a 	mov	r3,r2
     570:	e0bffe17 	ldw	r2,-8(fp)
     574:	1885883a 	add	r2,r3,r2
     578:	10800003 	ldbu	r2,0(r2)
     57c:	11003fcc 	andi	r4,r2,255
     580:	01400204 	movi	r5,8
     584:	00002f00 	call	2f0 <reflect>
     588:	1007883a 	mov	r3,r2
     58c:	e0bffd17 	ldw	r2,-12(fp)
     590:	1004d63a 	srli	r2,r2,24
     594:	1884f03a 	xor	r2,r3,r2
     598:	e0bffc05 	stb	r2,-16(fp)
      remainder = crcTable[data] ^ (remainder << 8);
     59c:	e0bffc03 	ldbu	r2,-16(fp)
     5a0:	00c00074 	movhi	r3,1
     5a4:	18c48e04 	addi	r3,r3,4664
     5a8:	1085883a 	add	r2,r2,r2
     5ac:	1085883a 	add	r2,r2,r2
     5b0:	10c5883a 	add	r2,r2,r3
     5b4:	10c00017 	ldw	r3,0(r2)
     5b8:	e0bffd17 	ldw	r2,-12(fp)
     5bc:	1004923a 	slli	r2,r2,8
     5c0:	1884f03a 	xor	r2,r3,r2
     5c4:	e0bffd15 	stw	r2,-12(fp)


    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
     5c8:	e0bffb17 	ldw	r2,-20(fp)
     5cc:	10800044 	addi	r2,r2,1
     5d0:	e0bffb15 	stw	r2,-20(fp)
     5d4:	e0fffb17 	ldw	r3,-20(fp)
     5d8:	e0bfff17 	ldw	r2,-4(fp)
     5dc:	18bfe216 	blt	r3,r2,568 <crcFast+0x28>
    }

    /*
     * The final remainder is the CRC.
     */
    return (REFLECT_REMAINDER(remainder) ^ FINAL_XOR_VALUE);
     5e0:	e13ffd17 	ldw	r4,-12(fp)
     5e4:	01400804 	movi	r5,32
     5e8:	00002f00 	call	2f0 <reflect>
     5ec:	0084303a 	nor	r2,zero,r2

}   /* crcFast() */
     5f0:	e037883a 	mov	sp,fp
     5f4:	dfc00117 	ldw	ra,4(sp)
     5f8:	df000017 	ldw	fp,0(sp)
     5fc:	dec00204 	addi	sp,sp,8
     600:	f800283a 	ret

00000604 <main>:




int main()
{
     604:	deff9404 	addi	sp,sp,-432
     608:	dfc06b15 	stw	ra,428(sp)
     60c:	df006a15 	stw	fp,424(sp)
     610:	dc006915 	stw	r16,420(sp)
     614:	df006904 	addi	fp,sp,420
  unsigned long buffer_counter, data_counter;
  unsigned long sw_slow_results[NUMBER_OF_BUFFERS];
  unsigned long sw_fast_results[NUMBER_OF_BUFFERS];
  unsigned long ci_results[NUMBER_OF_BUFFERS];
  unsigned char random_data = 0x5A;
     618:	00801684 	movi	r2,90
     61c:	e0bf9d05 	stb	r2,-396(fp)
  alt_u32 sw_slow_timeA, sw_slow_timeB;
  alt_u32 sw_fast_timeA, sw_fast_timeB;
  alt_u32 ci_timeA, ci_timeB;


  printf("+-----------------------------------------------------------+\n");
     620:	01000074 	movhi	r4,1
     624:	2134ea04 	addi	r4,r4,-11352
     628:	0000fa00 	call	fa0 <puts>
  printf("| Comparison between software and custom instruction CRC32  |\n");
     62c:	01000074 	movhi	r4,1
     630:	2134fa04 	addi	r4,r4,-11288
     634:	0000fa00 	call	fa0 <puts>
  printf("+-----------------------------------------------------------+\n\n\n");
     638:	01000074 	movhi	r4,1
     63c:	21350a04 	addi	r4,r4,-11224
     640:	0000fa00 	call	fa0 <puts>
  
  printf("System specification\n");
     644:	01000074 	movhi	r4,1
     648:	21351a04 	addi	r4,r4,-11160
     64c:	0000fa00 	call	fa0 <puts>
  printf("--------------------\n");
     650:	01000074 	movhi	r4,1
     654:	21352004 	addi	r4,r4,-11136
     658:	0000fa00 	call	fa0 <puts>

  printf("System clock speed = %lu MHz\n", (unsigned long)ALT_CPU_FREQ /(unsigned long)1000000);
     65c:	01000074 	movhi	r4,1
     660:	21352604 	addi	r4,r4,-11112
     664:	01401904 	movi	r5,100
     668:	0000e880 	call	e88 <printf>
  printf("Number of buffer locations = %d\n", NUMBER_OF_BUFFERS);
     66c:	01000074 	movhi	r4,1
     670:	21352e04 	addi	r4,r4,-11080
     674:	01400804 	movi	r5,32
     678:	0000e880 	call	e88 <printf>
  printf("Size of each buffer = %d bytes\n\n\n", BUFFER_SIZE);
     67c:	01000074 	movhi	r4,1
     680:	21353704 	addi	r4,r4,-11044
     684:	01404004 	movi	r5,256
     688:	0000e880 	call	e88 <printf>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
     68c:	01000074 	movhi	r4,1
     690:	21354004 	addi	r4,r4,-11008
     694:	0000fa00 	call	fa0 <puts>
  printf("-------------------------------------------------------\n");
     698:	01000074 	movhi	r4,1
     69c:	21354e04 	addi	r4,r4,-10952
     6a0:	0000fa00 	call	fa0 <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     6a4:	e03f9f15 	stw	zero,-388(fp)
     6a8:	00001f06 	br	728 <main+0x124>
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
     6ac:	e03f9e15 	stw	zero,-392(fp)
     6b0:	00001706 	br	710 <main+0x10c>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
     6b4:	e0bf9f17 	ldw	r2,-388(fp)
     6b8:	e13f9e17 	ldw	r4,-392(fp)
     6bc:	00c00074 	movhi	r3,1
     6c0:	18c58e04 	addi	r3,r3,5688
     6c4:	1004923a 	slli	r2,r2,8
     6c8:	10c5883a 	add	r2,r2,r3
     6cc:	1107883a 	add	r3,r2,r4
     6d0:	e0bf9d03 	ldbu	r2,-396(fp)
     6d4:	18800005 	stb	r2,0(r3)
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
     6d8:	e0ff9d03 	ldbu	r3,-396(fp)
     6dc:	18803fcc 	andi	r2,r3,255
     6e0:	1004d13a 	srli	r2,r2,4
     6e4:	1806913a 	slli	r3,r3,4
     6e8:	1009883a 	mov	r4,r2
     6ec:	1805883a 	mov	r2,r3
     6f0:	2084b03a 	or	r2,r4,r2
     6f4:	1007883a 	mov	r3,r2
     6f8:	e0bf9e17 	ldw	r2,-392(fp)
     6fc:	1885883a 	add	r2,r3,r2
     700:	e0bf9d05 	stb	r2,-396(fp)
  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
  {
    for(data_counter = 0; data_counter < BUFFER_SIZE; data_counter++)
     704:	e0bf9e17 	ldw	r2,-392(fp)
     708:	10800044 	addi	r2,r2,1
     70c:	e0bf9e15 	stw	r2,-392(fp)
     710:	e0bf9e17 	ldw	r2,-392(fp)
     714:	10804030 	cmpltui	r2,r2,256
     718:	103fe61e 	bne	r2,zero,6b4 <main+0xb0>


  /* Initializing the data buffers */
  printf("Initializing all of the buffers with pseudo-random data\n");
  printf("-------------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     71c:	e0bf9f17 	ldw	r2,-388(fp)
     720:	10800044 	addi	r2,r2,1
     724:	e0bf9f15 	stw	r2,-388(fp)
     728:	e0bf9f17 	ldw	r2,-388(fp)
     72c:	10800830 	cmpltui	r2,r2,32
     730:	103fde1e 	bne	r2,zero,6ac <main+0xa8>
    {
      data_buffer_region[buffer_counter][data_counter] = random_data;
      random_data = (random_data >> 4) + (random_data << 4) + (data_counter & 0xFF);
    }
  }
  printf("Initialization completed\n\n\n");
     734:	01000074 	movhi	r4,1
     738:	21355c04 	addi	r4,r4,-10896
     73c:	0000fa00 	call	fa0 <puts>


  if(alt_timestamp_start() < 0) // starts the timestamp timer
     740:	000c12c0 	call	c12c <alt_timestamp_start>
     744:	1004403a 	cmpge	r2,r2,zero
     748:	1000051e 	bne	r2,zero,760 <main+0x15c>
  {
    printf("Please add the high resolution timer to the timestamp timer setting in the syslib properties page.\n");
     74c:	01000074 	movhi	r4,1
     750:	21356304 	addi	r4,r4,-10868
     754:	0000fa00 	call	fa0 <puts>
    exit(1);
     758:	01000044 	movi	r4,1
     75c:	0000e500 	call	e50 <exit>
  }


  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
     760:	01000074 	movhi	r4,1
     764:	21357c04 	addi	r4,r4,-10768
     768:	0000fa00 	call	fa0 <puts>
  printf("------------------------\n");
     76c:	01000074 	movhi	r4,1
     770:	21358304 	addi	r4,r4,-10740
     774:	0000fa00 	call	fa0 <puts>
  sw_slow_timeA = alt_timestamp();
     778:	000c1d00 	call	c1d0 <alt_timestamp>
     77c:	e0bf9c15 	stw	r2,-400(fp)

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     780:	e03f9f15 	stw	zero,-388(fp)
     784:	00001406 	br	7d8 <main+0x1d4>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
     788:	e43f9f17 	ldw	r16,-388(fp)
     78c:	e0bf9f17 	ldw	r2,-388(fp)
     790:	1004923a 	slli	r2,r2,8
     794:	1007883a 	mov	r3,r2
     798:	00800074 	movhi	r2,1
     79c:	10858e04 	addi	r2,r2,5688
     7a0:	1885883a 	add	r2,r3,r2
     7a4:	1009883a 	mov	r4,r2
     7a8:	01404004 	movi	r5,256
     7ac:	00003840 	call	384 <crcSlow>
     7b0:	1007883a 	mov	r3,r2
     7b4:	8405883a 	add	r2,r16,r16
     7b8:	1085883a 	add	r2,r2,r2
     7bc:	e13f9704 	addi	r4,fp,-420
     7c0:	1105883a 	add	r2,r2,r4
     7c4:	10800904 	addi	r2,r2,36
     7c8:	10c00015 	stw	r3,0(r2)
  /* Slow software CRC based on a modulo 2 division implementation */
  printf("Running the software CRC\n");
  printf("------------------------\n");
  sw_slow_timeA = alt_timestamp();

  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     7cc:	e0bf9f17 	ldw	r2,-388(fp)
     7d0:	10800044 	addi	r2,r2,1
     7d4:	e0bf9f15 	stw	r2,-388(fp)
     7d8:	e0bf9f17 	ldw	r2,-388(fp)
     7dc:	10800830 	cmpltui	r2,r2,32
     7e0:	103fe91e 	bne	r2,zero,788 <main+0x184>
  {
    sw_slow_results[buffer_counter] = crcSlow(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_slow_timeB = alt_timestamp();
     7e4:	000c1d00 	call	c1d0 <alt_timestamp>
     7e8:	e0bf9b15 	stw	r2,-404(fp)

  printf("Completed\n\n\n");
     7ec:	01000074 	movhi	r4,1
     7f0:	21358a04 	addi	r4,r4,-10712
     7f4:	0000fa00 	call	fa0 <puts>


  /* Fast software CRC based on a lookup table implementation */
  crcInit();
     7f8:	000047c0 	call	47c <crcInit>
  printf("Running the optimized software CRC\n");
     7fc:	01000074 	movhi	r4,1
     800:	21358d04 	addi	r4,r4,-10700
     804:	0000fa00 	call	fa0 <puts>
  printf("----------------------------------\n");
     808:	01000074 	movhi	r4,1
     80c:	21359604 	addi	r4,r4,-10664
     810:	0000fa00 	call	fa0 <puts>
  sw_fast_timeA = alt_timestamp();
     814:	000c1d00 	call	c1d0 <alt_timestamp>
     818:	e0bf9a15 	stw	r2,-408(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     81c:	e03f9f15 	stw	zero,-388(fp)
     820:	00001406 	br	874 <main+0x270>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
     824:	e43f9f17 	ldw	r16,-388(fp)
     828:	e0bf9f17 	ldw	r2,-388(fp)
     82c:	1004923a 	slli	r2,r2,8
     830:	1007883a 	mov	r3,r2
     834:	00800074 	movhi	r2,1
     838:	10858e04 	addi	r2,r2,5688
     83c:	1885883a 	add	r2,r3,r2
     840:	1009883a 	mov	r4,r2
     844:	01404004 	movi	r5,256
     848:	00005400 	call	540 <crcFast>
     84c:	1007883a 	mov	r3,r2
     850:	8405883a 	add	r2,r16,r16
     854:	1085883a 	add	r2,r2,r2
     858:	e17f9704 	addi	r5,fp,-420
     85c:	1145883a 	add	r2,r2,r5
     860:	10802904 	addi	r2,r2,164
     864:	10c00015 	stw	r3,0(r2)
  /* Fast software CRC based on a lookup table implementation */
  crcInit();
  printf("Running the optimized software CRC\n");
  printf("----------------------------------\n");
  sw_fast_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     868:	e0bf9f17 	ldw	r2,-388(fp)
     86c:	10800044 	addi	r2,r2,1
     870:	e0bf9f15 	stw	r2,-388(fp)
     874:	e0bf9f17 	ldw	r2,-388(fp)
     878:	10800830 	cmpltui	r2,r2,32
     87c:	103fe91e 	bne	r2,zero,824 <main+0x220>
  {
    sw_fast_results[buffer_counter] = crcFast(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
 sw_fast_timeB = alt_timestamp();
     880:	000c1d00 	call	c1d0 <alt_timestamp>
     884:	e0bf9915 	stw	r2,-412(fp)
  printf("Completed\n\n\n");
     888:	01000074 	movhi	r4,1
     88c:	21358a04 	addi	r4,r4,-10712
     890:	0000fa00 	call	fa0 <puts>


  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
     894:	01000074 	movhi	r4,1
     898:	21359f04 	addi	r4,r4,-10628
     89c:	0000fa00 	call	fa0 <puts>
  printf("----------------------------------\n");
     8a0:	01000074 	movhi	r4,1
     8a4:	21359604 	addi	r4,r4,-10664
     8a8:	0000fa00 	call	fa0 <puts>
 ci_timeA = alt_timestamp();
     8ac:	000c1d00 	call	c1d0 <alt_timestamp>
     8b0:	e0bf9815 	stw	r2,-416(fp)
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     8b4:	e03f9f15 	stw	zero,-388(fp)
     8b8:	00001406 	br	90c <main+0x308>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
     8bc:	e43f9f17 	ldw	r16,-388(fp)
     8c0:	e0bf9f17 	ldw	r2,-388(fp)
     8c4:	1004923a 	slli	r2,r2,8
     8c8:	1007883a 	mov	r3,r2
     8cc:	00800074 	movhi	r2,1
     8d0:	10858e04 	addi	r2,r2,5688
     8d4:	1885883a 	add	r2,r3,r2
     8d8:	1009883a 	mov	r4,r2
     8dc:	01404004 	movi	r5,256
     8e0:	00001f00 	call	1f0 <crcCI>
     8e4:	1007883a 	mov	r3,r2
     8e8:	8405883a 	add	r2,r16,r16
     8ec:	1085883a 	add	r2,r2,r2
     8f0:	e13f9704 	addi	r4,fp,-420
     8f4:	1105883a 	add	r2,r2,r4
     8f8:	10804904 	addi	r2,r2,292
     8fc:	10c00015 	stw	r3,0(r2)

  /* Custom instruction CRC */
  printf("Running the custom instruction CRC\n");
  printf("----------------------------------\n");
 ci_timeA = alt_timestamp();
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     900:	e0bf9f17 	ldw	r2,-388(fp)
     904:	10800044 	addi	r2,r2,1
     908:	e0bf9f15 	stw	r2,-388(fp)
     90c:	e0bf9f17 	ldw	r2,-388(fp)
     910:	10800830 	cmpltui	r2,r2,32
     914:	103fe91e 	bne	r2,zero,8bc <main+0x2b8>
  {
    ci_results[buffer_counter] = crcCI(data_buffer_region[buffer_counter], BUFFER_SIZE);
  }
  ci_timeB = alt_timestamp();
     918:	000c1d00 	call	c1d0 <alt_timestamp>
     91c:	e0bf9715 	stw	r2,-420(fp)
  printf("Completed\n\n\n");
     920:	01000074 	movhi	r4,1
     924:	21358a04 	addi	r4,r4,-10712
     928:	0000fa00 	call	fa0 <puts>

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
     92c:	01000074 	movhi	r4,1
     930:	2135a804 	addi	r4,r4,-10592
     934:	0000fa00 	call	fa0 <puts>
  printf("----------------------------------------------------\n");
     938:	01000074 	movhi	r4,1
     93c:	2135b504 	addi	r4,r4,-10540
     940:	0000fa00 	call	fa0 <puts>
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     944:	e03f9f15 	stw	zero,-388(fp)
     948:	00004006 	br	a4c <main+0x448>
  {
    /* Test every combination of results to make sure they are consistant */
    if((sw_slow_results[buffer_counter] != ci_results[buffer_counter]) | 
     94c:	e0bf9f17 	ldw	r2,-388(fp)
     950:	1085883a 	add	r2,r2,r2
     954:	1085883a 	add	r2,r2,r2
     958:	e17f9704 	addi	r5,fp,-420
     95c:	1145883a 	add	r2,r2,r5
     960:	10800904 	addi	r2,r2,36
     964:	10c00017 	ldw	r3,0(r2)
     968:	e0bf9f17 	ldw	r2,-388(fp)
     96c:	1085883a 	add	r2,r2,r2
     970:	1085883a 	add	r2,r2,r2
     974:	e13f9704 	addi	r4,fp,-420
     978:	1105883a 	add	r2,r2,r4
     97c:	10804904 	addi	r2,r2,292
     980:	10800017 	ldw	r2,0(r2)
     984:	1884c03a 	cmpne	r2,r3,r2
     988:	1009883a 	mov	r4,r2
     98c:	e0bf9f17 	ldw	r2,-388(fp)
     990:	1085883a 	add	r2,r2,r2
     994:	1085883a 	add	r2,r2,r2
     998:	e17f9704 	addi	r5,fp,-420
     99c:	1145883a 	add	r2,r2,r5
     9a0:	10802904 	addi	r2,r2,164
     9a4:	10c00017 	ldw	r3,0(r2)
     9a8:	e0bf9f17 	ldw	r2,-388(fp)
     9ac:	1085883a 	add	r2,r2,r2
     9b0:	1085883a 	add	r2,r2,r2
     9b4:	e17f9704 	addi	r5,fp,-420
     9b8:	1145883a 	add	r2,r2,r5
     9bc:	10804904 	addi	r2,r2,292
     9c0:	10800017 	ldw	r2,0(r2)
     9c4:	1884c03a 	cmpne	r2,r3,r2
     9c8:	2084b03a 	or	r2,r4,r2
     9cc:	10803fcc 	andi	r2,r2,255
     9d0:	1005003a 	cmpeq	r2,r2,zero
     9d4:	10001a1e 	bne	r2,zero,a40 <main+0x43c>
       (sw_fast_results[buffer_counter] != ci_results[buffer_counter]))
    {
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
     9d8:	e0bf9f17 	ldw	r2,-388(fp)
     9dc:	1085883a 	add	r2,r2,r2
     9e0:	1085883a 	add	r2,r2,r2
     9e4:	e0ff9704 	addi	r3,fp,-420
     9e8:	10c5883a 	add	r2,r2,r3
     9ec:	10800904 	addi	r2,r2,36
     9f0:	11400017 	ldw	r5,0(r2)
     9f4:	e0bf9f17 	ldw	r2,-388(fp)
     9f8:	1085883a 	add	r2,r2,r2
     9fc:	1085883a 	add	r2,r2,r2
     a00:	e13f9704 	addi	r4,fp,-420
     a04:	1105883a 	add	r2,r2,r4
     a08:	10802904 	addi	r2,r2,164
     a0c:	11800017 	ldw	r6,0(r2)
     a10:	e0bf9f17 	ldw	r2,-388(fp)
     a14:	1085883a 	add	r2,r2,r2
     a18:	1085883a 	add	r2,r2,r2
     a1c:	e0ff9704 	addi	r3,fp,-420
     a20:	10c5883a 	add	r2,r2,r3
     a24:	10804904 	addi	r2,r2,292
     a28:	11c00017 	ldw	r7,0(r2)
     a2c:	01000074 	movhi	r4,1
     a30:	2135c304 	addi	r4,r4,-10484
     a34:	0000e880 	call	e88 <printf>
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
     a38:	01000044 	movi	r4,1
     a3c:	0000e500 	call	e50 <exit>
  printf("Completed\n\n\n");

  /* Validation of results */  
  printf("Validating the CRC results from all implementations\n");
  printf("----------------------------------------------------\n");
  for(buffer_counter = 0; buffer_counter < NUMBER_OF_BUFFERS; buffer_counter++)
     a40:	e0bf9f17 	ldw	r2,-388(fp)
     a44:	10800044 	addi	r2,r2,1
     a48:	e0bf9f15 	stw	r2,-388(fp)
     a4c:	e0bf9f17 	ldw	r2,-388(fp)
     a50:	10800830 	cmpltui	r2,r2,32
     a54:	103fbd1e 	bne	r2,zero,94c <main+0x348>
      printf("FAILURE!  Software CRC = 0x%lx, Optimized Software CRC = 0x%lx, Custom Instruction CRC = 0x%lx,\n",
      sw_slow_results[buffer_counter], sw_fast_results[buffer_counter], ci_results[buffer_counter]);       
      exit(1);     
    }
  }
  printf("All CRC implementations produced the same results\n\n\n");
     a58:	01000074 	movhi	r4,1
     a5c:	2135dc04 	addi	r4,r4,-10384
     a60:	0000fa00 	call	fa0 <puts>


  // Report processing times
  printf("Processing time for each implementation\n");
     a64:	01000074 	movhi	r4,1
     a68:	2135e904 	addi	r4,r4,-10332
     a6c:	0000fa00 	call	fa0 <puts>
  printf("---------------------------------------\n");
     a70:	01000074 	movhi	r4,1
     a74:	2135f304 	addi	r4,r4,-10292
     a78:	0000fa00 	call	fa0 <puts>
  printf("Software CRC = %.2lu ms\n", 1000*((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)alt_timestamp_freq()));
     a7c:	e0ff9b17 	ldw	r3,-404(fp)
     a80:	e0bf9c17 	ldw	r2,-400(fp)
     a84:	1889c83a 	sub	r4,r3,r2
     a88:	0140fa04 	movi	r5,1000
     a8c:	0000e180 	call	e18 <__mulsi3>
     a90:	1021883a 	mov	r16,r2
     a94:	000c26c0 	call	c26c <alt_timestamp_freq>
     a98:	100b883a 	mov	r5,r2
     a9c:	8009883a 	mov	r4,r16
     aa0:	0000e080 	call	e08 <__udivsi3>
     aa4:	100b883a 	mov	r5,r2
     aa8:	01000074 	movhi	r4,1
     aac:	2135fd04 	addi	r4,r4,-10252
     ab0:	0000e880 	call	e88 <printf>
  printf("Optimized software CRC = %.2lu ms\n", 1000*((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)alt_timestamp_freq()));
     ab4:	e0ff9917 	ldw	r3,-412(fp)
     ab8:	e0bf9a17 	ldw	r2,-408(fp)
     abc:	1889c83a 	sub	r4,r3,r2
     ac0:	0140fa04 	movi	r5,1000
     ac4:	0000e180 	call	e18 <__mulsi3>
     ac8:	1021883a 	mov	r16,r2
     acc:	000c26c0 	call	c26c <alt_timestamp_freq>
     ad0:	100b883a 	mov	r5,r2
     ad4:	8009883a 	mov	r4,r16
     ad8:	0000e080 	call	e08 <__udivsi3>
     adc:	100b883a 	mov	r5,r2
     ae0:	01000074 	movhi	r4,1
     ae4:	21360404 	addi	r4,r4,-10224
     ae8:	0000e880 	call	e88 <printf>
  printf("Custom instruction CRC = %.2lu ms\n\n\n", 1000*((unsigned long)(ci_timeB-ci_timeA))/((unsigned long)alt_timestamp_freq()));
     aec:	e0ff9717 	ldw	r3,-420(fp)
     af0:	e0bf9817 	ldw	r2,-416(fp)
     af4:	1889c83a 	sub	r4,r3,r2
     af8:	0140fa04 	movi	r5,1000
     afc:	0000e180 	call	e18 <__mulsi3>
     b00:	1021883a 	mov	r16,r2
     b04:	000c26c0 	call	c26c <alt_timestamp_freq>
     b08:	100b883a 	mov	r5,r2
     b0c:	8009883a 	mov	r4,r16
     b10:	0000e080 	call	e08 <__udivsi3>
     b14:	100b883a 	mov	r5,r2
     b18:	01000074 	movhi	r4,1
     b1c:	21360d04 	addi	r4,r4,-10188
     b20:	0000e880 	call	e88 <printf>

  printf("Processing throughput for each implementation\n"); // throughput = total bits / (time(s) * 1000000)
     b24:	01000074 	movhi	r4,1
     b28:	21361704 	addi	r4,r4,-10148
     b2c:	0000fa00 	call	fa0 <puts>
  printf("---------------------------------------------\n");
     b30:	01000074 	movhi	r4,1
     b34:	21362304 	addi	r4,r4,-10100
     b38:	0000fa00 	call	fa0 <puts>
  printf("Software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(sw_slow_timeB-sw_slow_timeA)/((unsigned long)alt_timestamp_freq())));
     b3c:	e0ff9b17 	ldw	r3,-404(fp)
     b40:	e0bf9c17 	ldw	r2,-400(fp)
     b44:	1889c83a 	sub	r4,r3,r2
     b48:	014003f4 	movhi	r5,15
     b4c:	29509004 	addi	r5,r5,16960
     b50:	0000e180 	call	e18 <__mulsi3>
     b54:	1021883a 	mov	r16,r2
     b58:	000c26c0 	call	c26c <alt_timestamp_freq>
     b5c:	100b883a 	mov	r5,r2
     b60:	8009883a 	mov	r4,r16
     b64:	0000e080 	call	e08 <__udivsi3>
     b68:	100b883a 	mov	r5,r2
     b6c:	01000074 	movhi	r4,1
     b70:	0000e080 	call	e08 <__udivsi3>
     b74:	100b883a 	mov	r5,r2
     b78:	01000074 	movhi	r4,1
     b7c:	21362f04 	addi	r4,r4,-10052
     b80:	0000e880 	call	e88 <printf>
  printf("Optimized software CRC = %.2lu Mbps\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(sw_fast_timeB-sw_fast_timeA)/((unsigned long)alt_timestamp_freq())));
     b84:	e0ff9917 	ldw	r3,-412(fp)
     b88:	e0bf9a17 	ldw	r2,-408(fp)
     b8c:	1889c83a 	sub	r4,r3,r2
     b90:	014003f4 	movhi	r5,15
     b94:	29509004 	addi	r5,r5,16960
     b98:	0000e180 	call	e18 <__mulsi3>
     b9c:	1021883a 	mov	r16,r2
     ba0:	000c26c0 	call	c26c <alt_timestamp_freq>
     ba4:	100b883a 	mov	r5,r2
     ba8:	8009883a 	mov	r4,r16
     bac:	0000e080 	call	e08 <__udivsi3>
     bb0:	100b883a 	mov	r5,r2
     bb4:	01000074 	movhi	r4,1
     bb8:	0000e080 	call	e08 <__udivsi3>
     bbc:	100b883a 	mov	r5,r2
     bc0:	01000074 	movhi	r4,1
     bc4:	21363604 	addi	r4,r4,-10024
     bc8:	0000e880 	call	e88 <printf>
  printf("Custom instruction CRC = %.2lu Mbps\n\n\n", (8 * NUMBER_OF_BUFFERS * BUFFER_SIZE)/(1000000*(unsigned long)(ci_timeB-ci_timeA)/((unsigned long)alt_timestamp_freq())));
     bcc:	e0ff9717 	ldw	r3,-420(fp)
     bd0:	e0bf9817 	ldw	r2,-416(fp)
     bd4:	1889c83a 	sub	r4,r3,r2
     bd8:	014003f4 	movhi	r5,15
     bdc:	29509004 	addi	r5,r5,16960
     be0:	0000e180 	call	e18 <__mulsi3>
     be4:	1021883a 	mov	r16,r2
     be8:	000c26c0 	call	c26c <alt_timestamp_freq>
     bec:	100b883a 	mov	r5,r2
     bf0:	8009883a 	mov	r4,r16
     bf4:	0000e080 	call	e08 <__udivsi3>
     bf8:	100b883a 	mov	r5,r2
     bfc:	01000074 	movhi	r4,1
     c00:	0000e080 	call	e08 <__udivsi3>
     c04:	100b883a 	mov	r5,r2
     c08:	01000074 	movhi	r4,1
     c0c:	21364004 	addi	r4,r4,-9984
     c10:	0000e880 	call	e88 <printf>

  printf("Speedup ratio\n");
     c14:	01000074 	movhi	r4,1
     c18:	21364a04 	addi	r4,r4,-9944
     c1c:	0000fa00 	call	fa0 <puts>
  printf("-------------\n");
     c20:	01000074 	movhi	r4,1
     c24:	21364e04 	addi	r4,r4,-9928
     c28:	0000fa00 	call	fa0 <puts>
  printf("Custom instruction CRC vs software CRC = %lu\n", ((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)(ci_timeB-ci_timeA)));
     c2c:	e0ff9b17 	ldw	r3,-404(fp)
     c30:	e0bf9c17 	ldw	r2,-400(fp)
     c34:	1889c83a 	sub	r4,r3,r2
     c38:	e0ff9717 	ldw	r3,-420(fp)
     c3c:	e0bf9817 	ldw	r2,-416(fp)
     c40:	188bc83a 	sub	r5,r3,r2
     c44:	0000e080 	call	e08 <__udivsi3>
     c48:	100b883a 	mov	r5,r2
     c4c:	01000074 	movhi	r4,1
     c50:	21365204 	addi	r4,r4,-9912
     c54:	0000e880 	call	e88 <printf>
  printf("Custom instruction CRC vs optimized software CRC = %lu\n", ((unsigned long)(sw_fast_timeB-sw_fast_timeA))/((unsigned long)(ci_timeB-ci_timeA)));
     c58:	e0ff9917 	ldw	r3,-412(fp)
     c5c:	e0bf9a17 	ldw	r2,-408(fp)
     c60:	1889c83a 	sub	r4,r3,r2
     c64:	e0ff9717 	ldw	r3,-420(fp)
     c68:	e0bf9817 	ldw	r2,-416(fp)
     c6c:	188bc83a 	sub	r5,r3,r2
     c70:	0000e080 	call	e08 <__udivsi3>
     c74:	100b883a 	mov	r5,r2
     c78:	01000074 	movhi	r4,1
     c7c:	21365e04 	addi	r4,r4,-9864
     c80:	0000e880 	call	e88 <printf>
  printf("Optimized software CRC vs software CRC= %lu\n", ((unsigned long)(sw_slow_timeB-sw_slow_timeA))/((unsigned long)(sw_fast_timeB-sw_fast_timeA)));
     c84:	e0ff9b17 	ldw	r3,-404(fp)
     c88:	e0bf9c17 	ldw	r2,-400(fp)
     c8c:	1889c83a 	sub	r4,r3,r2
     c90:	e0ff9917 	ldw	r3,-412(fp)
     c94:	e0bf9a17 	ldw	r2,-408(fp)
     c98:	188bc83a 	sub	r5,r3,r2
     c9c:	0000e080 	call	e08 <__udivsi3>
     ca0:	100b883a 	mov	r5,r2
     ca4:	01000074 	movhi	r4,1
     ca8:	21366c04 	addi	r4,r4,-9808
     cac:	0000e880 	call	e88 <printf>
  return 0;
     cb0:	0005883a 	mov	r2,zero
}
     cb4:	e037883a 	mov	sp,fp
     cb8:	dfc00217 	ldw	ra,8(sp)
     cbc:	df000117 	ldw	fp,4(sp)
     cc0:	dc000017 	ldw	r16,0(sp)
     cc4:	dec00304 	addi	sp,sp,12
     cc8:	f800283a 	ret

00000ccc <udivmodsi4>:
     ccc:	29001b2e 	bgeu	r5,r4,d3c <udivmodsi4+0x70>
     cd0:	28001a16 	blt	r5,zero,d3c <udivmodsi4+0x70>
     cd4:	00800044 	movi	r2,1
     cd8:	0007883a 	mov	r3,zero
     cdc:	01c007c4 	movi	r7,31
     ce0:	00000306 	br	cf0 <udivmodsi4+0x24>
     ce4:	19c01326 	beq	r3,r7,d34 <udivmodsi4+0x68>
     ce8:	18c00044 	addi	r3,r3,1
     cec:	28000416 	blt	r5,zero,d00 <udivmodsi4+0x34>
     cf0:	294b883a 	add	r5,r5,r5
     cf4:	1085883a 	add	r2,r2,r2
     cf8:	293ffa36 	bltu	r5,r4,ce4 <udivmodsi4+0x18>
     cfc:	10000d26 	beq	r2,zero,d34 <udivmodsi4+0x68>
     d00:	0007883a 	mov	r3,zero
     d04:	21400236 	bltu	r4,r5,d10 <udivmodsi4+0x44>
     d08:	2149c83a 	sub	r4,r4,r5
     d0c:	1886b03a 	or	r3,r3,r2
     d10:	1004d07a 	srli	r2,r2,1
     d14:	280ad07a 	srli	r5,r5,1
     d18:	103ffa1e 	bne	r2,zero,d04 <udivmodsi4+0x38>
     d1c:	30000226 	beq	r6,zero,d28 <udivmodsi4+0x5c>
     d20:	2005883a 	mov	r2,r4
     d24:	f800283a 	ret
     d28:	1809883a 	mov	r4,r3
     d2c:	2005883a 	mov	r2,r4
     d30:	f800283a 	ret
     d34:	0007883a 	mov	r3,zero
     d38:	003ff806 	br	d1c <udivmodsi4+0x50>
     d3c:	00800044 	movi	r2,1
     d40:	0007883a 	mov	r3,zero
     d44:	003fef06 	br	d04 <udivmodsi4+0x38>

00000d48 <__divsi3>:
     d48:	defffe04 	addi	sp,sp,-8
     d4c:	dc000015 	stw	r16,0(sp)
     d50:	dfc00115 	stw	ra,4(sp)
     d54:	0021883a 	mov	r16,zero
     d58:	20000c16 	blt	r4,zero,d8c <__divsi3+0x44>
     d5c:	000d883a 	mov	r6,zero
     d60:	28000e16 	blt	r5,zero,d9c <__divsi3+0x54>
     d64:	0000ccc0 	call	ccc <udivmodsi4>
     d68:	1007883a 	mov	r3,r2
     d6c:	8005003a 	cmpeq	r2,r16,zero
     d70:	1000011e 	bne	r2,zero,d78 <__divsi3+0x30>
     d74:	00c7c83a 	sub	r3,zero,r3
     d78:	1805883a 	mov	r2,r3
     d7c:	dfc00117 	ldw	ra,4(sp)
     d80:	dc000017 	ldw	r16,0(sp)
     d84:	dec00204 	addi	sp,sp,8
     d88:	f800283a 	ret
     d8c:	0109c83a 	sub	r4,zero,r4
     d90:	04000044 	movi	r16,1
     d94:	000d883a 	mov	r6,zero
     d98:	283ff20e 	bge	r5,zero,d64 <__divsi3+0x1c>
     d9c:	014bc83a 	sub	r5,zero,r5
     da0:	8021003a 	cmpeq	r16,r16,zero
     da4:	003fef06 	br	d64 <__divsi3+0x1c>

00000da8 <__modsi3>:
     da8:	deffff04 	addi	sp,sp,-4
     dac:	dfc00015 	stw	ra,0(sp)
     db0:	01800044 	movi	r6,1
     db4:	2807883a 	mov	r3,r5
     db8:	20000416 	blt	r4,zero,dcc <__modsi3+0x24>
     dbc:	28000c16 	blt	r5,zero,df0 <__modsi3+0x48>
     dc0:	dfc00017 	ldw	ra,0(sp)
     dc4:	dec00104 	addi	sp,sp,4
     dc8:	0000ccc1 	jmpi	ccc <udivmodsi4>
     dcc:	0109c83a 	sub	r4,zero,r4
     dd0:	28000b16 	blt	r5,zero,e00 <__modsi3+0x58>
     dd4:	180b883a 	mov	r5,r3
     dd8:	01800044 	movi	r6,1
     ddc:	0000ccc0 	call	ccc <udivmodsi4>
     de0:	0085c83a 	sub	r2,zero,r2
     de4:	dfc00017 	ldw	ra,0(sp)
     de8:	dec00104 	addi	sp,sp,4
     dec:	f800283a 	ret
     df0:	014bc83a 	sub	r5,zero,r5
     df4:	dfc00017 	ldw	ra,0(sp)
     df8:	dec00104 	addi	sp,sp,4
     dfc:	0000ccc1 	jmpi	ccc <udivmodsi4>
     e00:	0147c83a 	sub	r3,zero,r5
     e04:	003ff306 	br	dd4 <__modsi3+0x2c>

00000e08 <__udivsi3>:
     e08:	000d883a 	mov	r6,zero
     e0c:	0000ccc1 	jmpi	ccc <udivmodsi4>

00000e10 <__umodsi3>:
     e10:	01800044 	movi	r6,1
     e14:	0000ccc1 	jmpi	ccc <udivmodsi4>

00000e18 <__mulsi3>:
     e18:	20000a26 	beq	r4,zero,e44 <__mulsi3+0x2c>
     e1c:	0007883a 	mov	r3,zero
     e20:	2080004c 	andi	r2,r4,1
     e24:	1005003a 	cmpeq	r2,r2,zero
     e28:	2008d07a 	srli	r4,r4,1
     e2c:	1000011e 	bne	r2,zero,e34 <__mulsi3+0x1c>
     e30:	1947883a 	add	r3,r3,r5
     e34:	294b883a 	add	r5,r5,r5
     e38:	203ff91e 	bne	r4,zero,e20 <__mulsi3+0x8>
     e3c:	1805883a 	mov	r2,r3
     e40:	f800283a 	ret
     e44:	0007883a 	mov	r3,zero
     e48:	1805883a 	mov	r2,r3
     e4c:	f800283a 	ret

00000e50 <exit>:
     e50:	defffe04 	addi	sp,sp,-8
     e54:	000b883a 	mov	r5,zero
     e58:	dc000015 	stw	r16,0(sp)
     e5c:	dfc00115 	stw	ra,4(sp)
     e60:	2021883a 	mov	r16,r4
     e64:	00030a80 	call	30a8 <__call_exitprocs>
     e68:	00800074 	movhi	r2,1
     e6c:	10bdcf04 	addi	r2,r2,-2244
     e70:	11000017 	ldw	r4,0(r2)
     e74:	20800f17 	ldw	r2,60(r4)
     e78:	10000126 	beq	r2,zero,e80 <exit+0x30>
     e7c:	103ee83a 	callr	r2
     e80:	8009883a 	mov	r4,r16
     e84:	000aaf00 	call	aaf0 <_exit>

00000e88 <printf>:
     e88:	defffb04 	addi	sp,sp,-20
     e8c:	dfc00115 	stw	ra,4(sp)
     e90:	d9400215 	stw	r5,8(sp)
     e94:	d9800315 	stw	r6,12(sp)
     e98:	d9c00415 	stw	r7,16(sp)
     e9c:	00800074 	movhi	r2,1
     ea0:	10bdce04 	addi	r2,r2,-2248
     ea4:	10c00017 	ldw	r3,0(r2)
     ea8:	200b883a 	mov	r5,r4
     eac:	d8800204 	addi	r2,sp,8
     eb0:	19000217 	ldw	r4,8(r3)
     eb4:	100d883a 	mov	r6,r2
     eb8:	d8800015 	stw	r2,0(sp)
     ebc:	0002f440 	call	2f44 <__vfprintf_internal>
     ec0:	dfc00117 	ldw	ra,4(sp)
     ec4:	dec00504 	addi	sp,sp,20
     ec8:	f800283a 	ret

00000ecc <_printf_r>:
     ecc:	defffc04 	addi	sp,sp,-16
     ed0:	dfc00115 	stw	ra,4(sp)
     ed4:	d9800215 	stw	r6,8(sp)
     ed8:	d9c00315 	stw	r7,12(sp)
     edc:	280d883a 	mov	r6,r5
     ee0:	21400217 	ldw	r5,8(r4)
     ee4:	d8c00204 	addi	r3,sp,8
     ee8:	180f883a 	mov	r7,r3
     eec:	d8c00015 	stw	r3,0(sp)
     ef0:	00010800 	call	1080 <___vfprintf_internal_r>
     ef4:	dfc00117 	ldw	ra,4(sp)
     ef8:	dec00404 	addi	sp,sp,16
     efc:	f800283a 	ret

00000f00 <_puts_r>:
     f00:	defff604 	addi	sp,sp,-40
     f04:	dc400715 	stw	r17,28(sp)
     f08:	2023883a 	mov	r17,r4
     f0c:	2809883a 	mov	r4,r5
     f10:	dfc00915 	stw	ra,36(sp)
     f14:	dcc00815 	stw	r19,32(sp)
     f18:	2827883a 	mov	r19,r5
     f1c:	0000fb40 	call	fb4 <strlen>
     f20:	89400217 	ldw	r5,8(r17)
     f24:	00c00074 	movhi	r3,1
     f28:	18f67904 	addi	r3,r3,-9756
     f2c:	01c00044 	movi	r7,1
     f30:	12000044 	addi	r8,r2,1
     f34:	d8c00515 	stw	r3,20(sp)
     f38:	d9c00615 	stw	r7,24(sp)
     f3c:	d8c00304 	addi	r3,sp,12
     f40:	01c00084 	movi	r7,2
     f44:	8809883a 	mov	r4,r17
     f48:	d80d883a 	mov	r6,sp
     f4c:	d8c00015 	stw	r3,0(sp)
     f50:	dcc00315 	stw	r19,12(sp)
     f54:	da000215 	stw	r8,8(sp)
     f58:	d9c00115 	stw	r7,4(sp)
     f5c:	d8800415 	stw	r2,16(sp)
     f60:	00053b40 	call	53b4 <__sfvwrite_r>
     f64:	00ffffc4 	movi	r3,-1
     f68:	10000626 	beq	r2,zero,f84 <_puts_r+0x84>
     f6c:	1805883a 	mov	r2,r3
     f70:	dfc00917 	ldw	ra,36(sp)
     f74:	dcc00817 	ldw	r19,32(sp)
     f78:	dc400717 	ldw	r17,28(sp)
     f7c:	dec00a04 	addi	sp,sp,40
     f80:	f800283a 	ret
     f84:	00c00284 	movi	r3,10
     f88:	1805883a 	mov	r2,r3
     f8c:	dfc00917 	ldw	ra,36(sp)
     f90:	dcc00817 	ldw	r19,32(sp)
     f94:	dc400717 	ldw	r17,28(sp)
     f98:	dec00a04 	addi	sp,sp,40
     f9c:	f800283a 	ret

00000fa0 <puts>:
     fa0:	00800074 	movhi	r2,1
     fa4:	10bdce04 	addi	r2,r2,-2248
     fa8:	200b883a 	mov	r5,r4
     fac:	11000017 	ldw	r4,0(r2)
     fb0:	0000f001 	jmpi	f00 <_puts_r>

00000fb4 <strlen>:
     fb4:	208000cc 	andi	r2,r4,3
     fb8:	2011883a 	mov	r8,r4
     fbc:	1000161e 	bne	r2,zero,1018 <strlen+0x64>
     fc0:	20c00017 	ldw	r3,0(r4)
     fc4:	017fbff4 	movhi	r5,65279
     fc8:	297fbfc4 	addi	r5,r5,-257
     fcc:	01e02074 	movhi	r7,32897
     fd0:	39e02004 	addi	r7,r7,-32640
     fd4:	1945883a 	add	r2,r3,r5
     fd8:	11c4703a 	and	r2,r2,r7
     fdc:	00c6303a 	nor	r3,zero,r3
     fe0:	1886703a 	and	r3,r3,r2
     fe4:	18000c1e 	bne	r3,zero,1018 <strlen+0x64>
     fe8:	280d883a 	mov	r6,r5
     fec:	380b883a 	mov	r5,r7
     ff0:	21000104 	addi	r4,r4,4
     ff4:	20800017 	ldw	r2,0(r4)
     ff8:	1187883a 	add	r3,r2,r6
     ffc:	1946703a 	and	r3,r3,r5
    1000:	0084303a 	nor	r2,zero,r2
    1004:	10c4703a 	and	r2,r2,r3
    1008:	103ff926 	beq	r2,zero,ff0 <strlen+0x3c>
    100c:	20800007 	ldb	r2,0(r4)
    1010:	10000326 	beq	r2,zero,1020 <strlen+0x6c>
    1014:	21000044 	addi	r4,r4,1
    1018:	20800007 	ldb	r2,0(r4)
    101c:	103ffd1e 	bne	r2,zero,1014 <strlen+0x60>
    1020:	2205c83a 	sub	r2,r4,r8
    1024:	f800283a 	ret

00001028 <__sprint_r>:
    1028:	30800217 	ldw	r2,8(r6)
    102c:	defffe04 	addi	sp,sp,-8
    1030:	dc000015 	stw	r16,0(sp)
    1034:	dfc00115 	stw	ra,4(sp)
    1038:	3021883a 	mov	r16,r6
    103c:	0007883a 	mov	r3,zero
    1040:	1000061e 	bne	r2,zero,105c <__sprint_r+0x34>
    1044:	1805883a 	mov	r2,r3
    1048:	30000115 	stw	zero,4(r6)
    104c:	dfc00117 	ldw	ra,4(sp)
    1050:	dc000017 	ldw	r16,0(sp)
    1054:	dec00204 	addi	sp,sp,8
    1058:	f800283a 	ret
    105c:	00053b40 	call	53b4 <__sfvwrite_r>
    1060:	1007883a 	mov	r3,r2
    1064:	1805883a 	mov	r2,r3
    1068:	80000115 	stw	zero,4(r16)
    106c:	80000215 	stw	zero,8(r16)
    1070:	dfc00117 	ldw	ra,4(sp)
    1074:	dc000017 	ldw	r16,0(sp)
    1078:	dec00204 	addi	sp,sp,8
    107c:	f800283a 	ret

00001080 <___vfprintf_internal_r>:
    1080:	defea404 	addi	sp,sp,-1392
    1084:	dd815815 	stw	r22,1376(sp)
    1088:	dc015215 	stw	r16,1352(sp)
    108c:	d9c15115 	stw	r7,1348(sp)
    1090:	dfc15b15 	stw	ra,1388(sp)
    1094:	df015a15 	stw	fp,1384(sp)
    1098:	ddc15915 	stw	r23,1380(sp)
    109c:	dd415715 	stw	r21,1372(sp)
    10a0:	dd015615 	stw	r20,1368(sp)
    10a4:	dcc15515 	stw	r19,1364(sp)
    10a8:	dc815415 	stw	r18,1360(sp)
    10ac:	dc415315 	stw	r17,1356(sp)
    10b0:	282d883a 	mov	r22,r5
    10b4:	3021883a 	mov	r16,r6
    10b8:	d9014f15 	stw	r4,1340(sp)
    10bc:	00059d80 	call	59d8 <_localeconv_r>
    10c0:	10800017 	ldw	r2,0(r2)
    10c4:	d9c15117 	ldw	r7,1348(sp)
    10c8:	d8814915 	stw	r2,1316(sp)
    10cc:	d8814f17 	ldw	r2,1340(sp)
    10d0:	10000226 	beq	r2,zero,10dc <___vfprintf_internal_r+0x5c>
    10d4:	10800e17 	ldw	r2,56(r2)
    10d8:	10020d26 	beq	r2,zero,1910 <___vfprintf_internal_r+0x890>
    10dc:	b080030b 	ldhu	r2,12(r22)
    10e0:	1080020c 	andi	r2,r2,8
    10e4:	10020e26 	beq	r2,zero,1920 <___vfprintf_internal_r+0x8a0>
    10e8:	b0800417 	ldw	r2,16(r22)
    10ec:	10020c26 	beq	r2,zero,1920 <___vfprintf_internal_r+0x8a0>
    10f0:	b200030b 	ldhu	r8,12(r22)
    10f4:	00800284 	movi	r2,10
    10f8:	40c0068c 	andi	r3,r8,26
    10fc:	18802f1e 	bne	r3,r2,11bc <___vfprintf_internal_r+0x13c>
    1100:	b080038f 	ldh	r2,14(r22)
    1104:	10002d16 	blt	r2,zero,11bc <___vfprintf_internal_r+0x13c>
    1108:	b240038b 	ldhu	r9,14(r22)
    110c:	b2800717 	ldw	r10,28(r22)
    1110:	b2c00917 	ldw	r11,36(r22)
    1114:	d9014f17 	ldw	r4,1340(sp)
    1118:	dc402904 	addi	r17,sp,164
    111c:	d8804004 	addi	r2,sp,256
    1120:	00c10004 	movi	r3,1024
    1124:	423fff4c 	andi	r8,r8,65533
    1128:	800d883a 	mov	r6,r16
    112c:	880b883a 	mov	r5,r17
    1130:	da002c0d 	sth	r8,176(sp)
    1134:	da402c8d 	sth	r9,178(sp)
    1138:	da803015 	stw	r10,192(sp)
    113c:	dac03215 	stw	r11,200(sp)
    1140:	d8802d15 	stw	r2,180(sp)
    1144:	d8c02e15 	stw	r3,184(sp)
    1148:	d8802915 	stw	r2,164(sp)
    114c:	d8c02b15 	stw	r3,172(sp)
    1150:	d8002f15 	stw	zero,188(sp)
    1154:	00010800 	call	1080 <___vfprintf_internal_r>
    1158:	d8814b15 	stw	r2,1324(sp)
    115c:	10000416 	blt	r2,zero,1170 <___vfprintf_internal_r+0xf0>
    1160:	d9014f17 	ldw	r4,1340(sp)
    1164:	880b883a 	mov	r5,r17
    1168:	0004a500 	call	4a50 <_fflush_r>
    116c:	1002321e 	bne	r2,zero,1a38 <___vfprintf_internal_r+0x9b8>
    1170:	d8802c0b 	ldhu	r2,176(sp)
    1174:	1080100c 	andi	r2,r2,64
    1178:	10000326 	beq	r2,zero,1188 <___vfprintf_internal_r+0x108>
    117c:	b080030b 	ldhu	r2,12(r22)
    1180:	10801014 	ori	r2,r2,64
    1184:	b080030d 	sth	r2,12(r22)
    1188:	d8814b17 	ldw	r2,1324(sp)
    118c:	dfc15b17 	ldw	ra,1388(sp)
    1190:	df015a17 	ldw	fp,1384(sp)
    1194:	ddc15917 	ldw	r23,1380(sp)
    1198:	dd815817 	ldw	r22,1376(sp)
    119c:	dd415717 	ldw	r21,1372(sp)
    11a0:	dd015617 	ldw	r20,1368(sp)
    11a4:	dcc15517 	ldw	r19,1364(sp)
    11a8:	dc815417 	ldw	r18,1360(sp)
    11ac:	dc415317 	ldw	r17,1356(sp)
    11b0:	dc015217 	ldw	r16,1352(sp)
    11b4:	dec15c04 	addi	sp,sp,1392
    11b8:	f800283a 	ret
    11bc:	0005883a 	mov	r2,zero
    11c0:	0007883a 	mov	r3,zero
    11c4:	dd401904 	addi	r21,sp,100
    11c8:	d8814215 	stw	r2,1288(sp)
    11cc:	802f883a 	mov	r23,r16
    11d0:	d8c14315 	stw	r3,1292(sp)
    11d4:	d8014b15 	stw	zero,1324(sp)
    11d8:	d8014815 	stw	zero,1312(sp)
    11dc:	d8014415 	stw	zero,1296(sp)
    11e0:	d8014715 	stw	zero,1308(sp)
    11e4:	dd400c15 	stw	r21,48(sp)
    11e8:	d8000e15 	stw	zero,56(sp)
    11ec:	d8000d15 	stw	zero,52(sp)
    11f0:	b8800007 	ldb	r2,0(r23)
    11f4:	10001926 	beq	r2,zero,125c <___vfprintf_internal_r+0x1dc>
    11f8:	00c00944 	movi	r3,37
    11fc:	10c01726 	beq	r2,r3,125c <___vfprintf_internal_r+0x1dc>
    1200:	b821883a 	mov	r16,r23
    1204:	00000106 	br	120c <___vfprintf_internal_r+0x18c>
    1208:	10c00326 	beq	r2,r3,1218 <___vfprintf_internal_r+0x198>
    120c:	84000044 	addi	r16,r16,1
    1210:	80800007 	ldb	r2,0(r16)
    1214:	103ffc1e 	bne	r2,zero,1208 <___vfprintf_internal_r+0x188>
    1218:	85e7c83a 	sub	r19,r16,r23
    121c:	98000e26 	beq	r19,zero,1258 <___vfprintf_internal_r+0x1d8>
    1220:	dc800e17 	ldw	r18,56(sp)
    1224:	dc400d17 	ldw	r17,52(sp)
    1228:	008001c4 	movi	r2,7
    122c:	94e5883a 	add	r18,r18,r19
    1230:	8c400044 	addi	r17,r17,1
    1234:	adc00015 	stw	r23,0(r21)
    1238:	dc800e15 	stw	r18,56(sp)
    123c:	acc00115 	stw	r19,4(r21)
    1240:	dc400d15 	stw	r17,52(sp)
    1244:	14428b16 	blt	r2,r17,1c74 <___vfprintf_internal_r+0xbf4>
    1248:	ad400204 	addi	r21,r21,8
    124c:	d9014b17 	ldw	r4,1324(sp)
    1250:	24c9883a 	add	r4,r4,r19
    1254:	d9014b15 	stw	r4,1324(sp)
    1258:	802f883a 	mov	r23,r16
    125c:	b8800007 	ldb	r2,0(r23)
    1260:	10013c26 	beq	r2,zero,1754 <___vfprintf_internal_r+0x6d4>
    1264:	bdc00044 	addi	r23,r23,1
    1268:	d8000405 	stb	zero,16(sp)
    126c:	b8c00007 	ldb	r3,0(r23)
    1270:	04ffffc4 	movi	r19,-1
    1274:	d8014c15 	stw	zero,1328(sp)
    1278:	d8014a15 	stw	zero,1320(sp)
    127c:	d8c14d15 	stw	r3,1332(sp)
    1280:	bdc00044 	addi	r23,r23,1
    1284:	d9414d17 	ldw	r5,1332(sp)
    1288:	00801604 	movi	r2,88
    128c:	28fff804 	addi	r3,r5,-32
    1290:	10c06036 	bltu	r2,r3,1414 <___vfprintf_internal_r+0x394>
    1294:	18c5883a 	add	r2,r3,r3
    1298:	1085883a 	add	r2,r2,r2
    129c:	00c00034 	movhi	r3,0
    12a0:	18c4ac04 	addi	r3,r3,4784
    12a4:	10c5883a 	add	r2,r2,r3
    12a8:	11000017 	ldw	r4,0(r2)
    12ac:	2000683a 	jmp	r4
    12b0:	00002224 	muli	zero,zero,136
    12b4:	00001414 	movui	zero,80
    12b8:	00001414 	movui	zero,80
    12bc:	00002210 	cmplti	zero,zero,136
    12c0:	00001414 	movui	zero,80
    12c4:	00001414 	movui	zero,80
    12c8:	00001414 	movui	zero,80
    12cc:	00001414 	movui	zero,80
    12d0:	00001414 	movui	zero,80
    12d4:	00001414 	movui	zero,80
    12d8:	00001ff0 	cmpltui	zero,zero,127
    12dc:	00002200 	call	220 <crcCI+0x30>
    12e0:	00001414 	movui	zero,80
    12e4:	00002008 	cmpgei	zero,zero,128
    12e8:	000022a8 	cmpgeui	zero,zero,138
    12ec:	00001414 	movui	zero,80
    12f0:	00002294 	movui	zero,138
    12f4:	00002250 	cmplti	zero,zero,137
    12f8:	00002250 	cmplti	zero,zero,137
    12fc:	00002250 	cmplti	zero,zero,137
    1300:	00002250 	cmplti	zero,zero,137
    1304:	00002250 	cmplti	zero,zero,137
    1308:	00002250 	cmplti	zero,zero,137
    130c:	00002250 	cmplti	zero,zero,137
    1310:	00002250 	cmplti	zero,zero,137
    1314:	00002250 	cmplti	zero,zero,137
    1318:	00001414 	movui	zero,80
    131c:	00001414 	movui	zero,80
    1320:	00001414 	movui	zero,80
    1324:	00001414 	movui	zero,80
    1328:	00001414 	movui	zero,80
    132c:	00001414 	movui	zero,80
    1330:	00001414 	movui	zero,80
    1334:	00001414 	movui	zero,80
    1338:	00001414 	movui	zero,80
    133c:	00001414 	movui	zero,80
    1340:	00001a6c 	andhi	zero,zero,105
    1344:	000020d8 	cmpnei	zero,zero,131
    1348:	00001414 	movui	zero,80
    134c:	000020d8 	cmpnei	zero,zero,131
    1350:	00001414 	movui	zero,80
    1354:	00001414 	movui	zero,80
    1358:	00001414 	movui	zero,80
    135c:	00001414 	movui	zero,80
    1360:	0000223c 	xorhi	zero,zero,136
    1364:	00001414 	movui	zero,80
    1368:	00001414 	movui	zero,80
    136c:	00001b20 	cmpeqi	zero,zero,108
    1370:	00001414 	movui	zero,80
    1374:	00001414 	movui	zero,80
    1378:	00001414 	movui	zero,80
    137c:	00001414 	movui	zero,80
    1380:	00001414 	movui	zero,80
    1384:	00001b6c 	andhi	zero,zero,109
    1388:	00001414 	movui	zero,80
    138c:	00001414 	movui	zero,80
    1390:	0000218c 	andi	zero,zero,134
    1394:	00001414 	movui	zero,80
    1398:	00001414 	movui	zero,80
    139c:	00001414 	movui	zero,80
    13a0:	00001414 	movui	zero,80
    13a4:	00001414 	movui	zero,80
    13a8:	00001414 	movui	zero,80
    13ac:	00001414 	movui	zero,80
    13b0:	00001414 	movui	zero,80
    13b4:	00001414 	movui	zero,80
    13b8:	00001414 	movui	zero,80
    13bc:	00002160 	cmpeqi	zero,zero,133
    13c0:	00001a78 	rdprs	zero,zero,105
    13c4:	000020d8 	cmpnei	zero,zero,131
    13c8:	000020d8 	cmpnei	zero,zero,131
    13cc:	000020d8 	cmpnei	zero,zero,131
    13d0:	000020c4 	movi	zero,131
    13d4:	00001a78 	rdprs	zero,zero,105
    13d8:	00001414 	movui	zero,80
    13dc:	00001414 	movui	zero,80
    13e0:	0000204c 	andi	zero,zero,129
    13e4:	00001414 	movui	zero,80
    13e8:	0000201c 	xori	zero,zero,128
    13ec:	00001b2c 	andhi	zero,zero,108
    13f0:	0000207c 	xorhi	zero,zero,129
    13f4:	00002068 	cmpgeui	zero,zero,129
    13f8:	00001414 	movui	zero,80
    13fc:	00002310 	cmplti	zero,zero,140
    1400:	00001414 	movui	zero,80
    1404:	00001b78 	rdprs	zero,zero,109
    1408:	00001414 	movui	zero,80
    140c:	00001414 	movui	zero,80
    1410:	000021f0 	cmpltui	zero,zero,135
    1414:	d9014d17 	ldw	r4,1332(sp)
    1418:	2000ce26 	beq	r4,zero,1754 <___vfprintf_internal_r+0x6d4>
    141c:	01400044 	movi	r5,1
    1420:	d9800f04 	addi	r6,sp,60
    1424:	d9c14015 	stw	r7,1280(sp)
    1428:	d9414515 	stw	r5,1300(sp)
    142c:	d9814115 	stw	r6,1284(sp)
    1430:	280f883a 	mov	r7,r5
    1434:	d9000f05 	stb	r4,60(sp)
    1438:	d8000405 	stb	zero,16(sp)
    143c:	d8014615 	stw	zero,1304(sp)
    1440:	d8c14c17 	ldw	r3,1328(sp)
    1444:	1880008c 	andi	r2,r3,2
    1448:	1005003a 	cmpeq	r2,r2,zero
    144c:	d8815015 	stw	r2,1344(sp)
    1450:	1000031e 	bne	r2,zero,1460 <___vfprintf_internal_r+0x3e0>
    1454:	d9014517 	ldw	r4,1300(sp)
    1458:	21000084 	addi	r4,r4,2
    145c:	d9014515 	stw	r4,1300(sp)
    1460:	d9414c17 	ldw	r5,1328(sp)
    1464:	2940210c 	andi	r5,r5,132
    1468:	d9414e15 	stw	r5,1336(sp)
    146c:	28002d1e 	bne	r5,zero,1524 <___vfprintf_internal_r+0x4a4>
    1470:	d9814a17 	ldw	r6,1320(sp)
    1474:	d8814517 	ldw	r2,1300(sp)
    1478:	30a1c83a 	sub	r16,r6,r2
    147c:	0400290e 	bge	zero,r16,1524 <___vfprintf_internal_r+0x4a4>
    1480:	00800404 	movi	r2,16
    1484:	14045e0e 	bge	r2,r16,2600 <___vfprintf_internal_r+0x1580>
    1488:	dc800e17 	ldw	r18,56(sp)
    148c:	dc400d17 	ldw	r17,52(sp)
    1490:	1027883a 	mov	r19,r2
    1494:	07000074 	movhi	fp,1
    1498:	e7369584 	addi	fp,fp,-9642
    149c:	050001c4 	movi	r20,7
    14a0:	00000306 	br	14b0 <___vfprintf_internal_r+0x430>
    14a4:	843ffc04 	addi	r16,r16,-16
    14a8:	ad400204 	addi	r21,r21,8
    14ac:	9c00130e 	bge	r19,r16,14fc <___vfprintf_internal_r+0x47c>
    14b0:	94800404 	addi	r18,r18,16
    14b4:	8c400044 	addi	r17,r17,1
    14b8:	af000015 	stw	fp,0(r21)
    14bc:	acc00115 	stw	r19,4(r21)
    14c0:	dc800e15 	stw	r18,56(sp)
    14c4:	dc400d15 	stw	r17,52(sp)
    14c8:	a47ff60e 	bge	r20,r17,14a4 <___vfprintf_internal_r+0x424>
    14cc:	d9014f17 	ldw	r4,1340(sp)
    14d0:	b00b883a 	mov	r5,r22
    14d4:	d9800c04 	addi	r6,sp,48
    14d8:	d9c15115 	stw	r7,1348(sp)
    14dc:	00010280 	call	1028 <__sprint_r>
    14e0:	d9c15117 	ldw	r7,1348(sp)
    14e4:	10009e1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    14e8:	843ffc04 	addi	r16,r16,-16
    14ec:	dc800e17 	ldw	r18,56(sp)
    14f0:	dc400d17 	ldw	r17,52(sp)
    14f4:	dd401904 	addi	r21,sp,100
    14f8:	9c3fed16 	blt	r19,r16,14b0 <___vfprintf_internal_r+0x430>
    14fc:	9425883a 	add	r18,r18,r16
    1500:	8c400044 	addi	r17,r17,1
    1504:	008001c4 	movi	r2,7
    1508:	af000015 	stw	fp,0(r21)
    150c:	ac000115 	stw	r16,4(r21)
    1510:	dc800e15 	stw	r18,56(sp)
    1514:	dc400d15 	stw	r17,52(sp)
    1518:	1441f516 	blt	r2,r17,1cf0 <___vfprintf_internal_r+0xc70>
    151c:	ad400204 	addi	r21,r21,8
    1520:	00000206 	br	152c <___vfprintf_internal_r+0x4ac>
    1524:	dc800e17 	ldw	r18,56(sp)
    1528:	dc400d17 	ldw	r17,52(sp)
    152c:	d8800407 	ldb	r2,16(sp)
    1530:	10000b26 	beq	r2,zero,1560 <___vfprintf_internal_r+0x4e0>
    1534:	00800044 	movi	r2,1
    1538:	94800044 	addi	r18,r18,1
    153c:	8c400044 	addi	r17,r17,1
    1540:	a8800115 	stw	r2,4(r21)
    1544:	d8c00404 	addi	r3,sp,16
    1548:	008001c4 	movi	r2,7
    154c:	a8c00015 	stw	r3,0(r21)
    1550:	dc800e15 	stw	r18,56(sp)
    1554:	dc400d15 	stw	r17,52(sp)
    1558:	1441da16 	blt	r2,r17,1cc4 <___vfprintf_internal_r+0xc44>
    155c:	ad400204 	addi	r21,r21,8
    1560:	d9015017 	ldw	r4,1344(sp)
    1564:	20000b1e 	bne	r4,zero,1594 <___vfprintf_internal_r+0x514>
    1568:	d8800444 	addi	r2,sp,17
    156c:	94800084 	addi	r18,r18,2
    1570:	8c400044 	addi	r17,r17,1
    1574:	a8800015 	stw	r2,0(r21)
    1578:	00c00084 	movi	r3,2
    157c:	008001c4 	movi	r2,7
    1580:	a8c00115 	stw	r3,4(r21)
    1584:	dc800e15 	stw	r18,56(sp)
    1588:	dc400d15 	stw	r17,52(sp)
    158c:	1441c216 	blt	r2,r17,1c98 <___vfprintf_internal_r+0xc18>
    1590:	ad400204 	addi	r21,r21,8
    1594:	d9414e17 	ldw	r5,1336(sp)
    1598:	00802004 	movi	r2,128
    159c:	2880b126 	beq	r5,r2,1864 <___vfprintf_internal_r+0x7e4>
    15a0:	d8c14617 	ldw	r3,1304(sp)
    15a4:	19e1c83a 	sub	r16,r3,r7
    15a8:	0400260e 	bge	zero,r16,1644 <___vfprintf_internal_r+0x5c4>
    15ac:	00800404 	movi	r2,16
    15b0:	1403cf0e 	bge	r2,r16,24f0 <___vfprintf_internal_r+0x1470>
    15b4:	1027883a 	mov	r19,r2
    15b8:	07000074 	movhi	fp,1
    15bc:	e7369184 	addi	fp,fp,-9658
    15c0:	050001c4 	movi	r20,7
    15c4:	00000306 	br	15d4 <___vfprintf_internal_r+0x554>
    15c8:	843ffc04 	addi	r16,r16,-16
    15cc:	ad400204 	addi	r21,r21,8
    15d0:	9c00130e 	bge	r19,r16,1620 <___vfprintf_internal_r+0x5a0>
    15d4:	94800404 	addi	r18,r18,16
    15d8:	8c400044 	addi	r17,r17,1
    15dc:	af000015 	stw	fp,0(r21)
    15e0:	acc00115 	stw	r19,4(r21)
    15e4:	dc800e15 	stw	r18,56(sp)
    15e8:	dc400d15 	stw	r17,52(sp)
    15ec:	a47ff60e 	bge	r20,r17,15c8 <___vfprintf_internal_r+0x548>
    15f0:	d9014f17 	ldw	r4,1340(sp)
    15f4:	b00b883a 	mov	r5,r22
    15f8:	d9800c04 	addi	r6,sp,48
    15fc:	d9c15115 	stw	r7,1348(sp)
    1600:	00010280 	call	1028 <__sprint_r>
    1604:	d9c15117 	ldw	r7,1348(sp)
    1608:	1000551e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    160c:	843ffc04 	addi	r16,r16,-16
    1610:	dc800e17 	ldw	r18,56(sp)
    1614:	dc400d17 	ldw	r17,52(sp)
    1618:	dd401904 	addi	r21,sp,100
    161c:	9c3fed16 	blt	r19,r16,15d4 <___vfprintf_internal_r+0x554>
    1620:	9425883a 	add	r18,r18,r16
    1624:	8c400044 	addi	r17,r17,1
    1628:	008001c4 	movi	r2,7
    162c:	af000015 	stw	fp,0(r21)
    1630:	ac000115 	stw	r16,4(r21)
    1634:	dc800e15 	stw	r18,56(sp)
    1638:	dc400d15 	stw	r17,52(sp)
    163c:	14418216 	blt	r2,r17,1c48 <___vfprintf_internal_r+0xbc8>
    1640:	ad400204 	addi	r21,r21,8
    1644:	d9014c17 	ldw	r4,1328(sp)
    1648:	2080400c 	andi	r2,r4,256
    164c:	10004a1e 	bne	r2,zero,1778 <___vfprintf_internal_r+0x6f8>
    1650:	d9414117 	ldw	r5,1284(sp)
    1654:	91e5883a 	add	r18,r18,r7
    1658:	8c400044 	addi	r17,r17,1
    165c:	008001c4 	movi	r2,7
    1660:	a9400015 	stw	r5,0(r21)
    1664:	a9c00115 	stw	r7,4(r21)
    1668:	dc800e15 	stw	r18,56(sp)
    166c:	dc400d15 	stw	r17,52(sp)
    1670:	14416716 	blt	r2,r17,1c10 <___vfprintf_internal_r+0xb90>
    1674:	a8c00204 	addi	r3,r21,8
    1678:	d9814c17 	ldw	r6,1328(sp)
    167c:	3080010c 	andi	r2,r6,4
    1680:	10002826 	beq	r2,zero,1724 <___vfprintf_internal_r+0x6a4>
    1684:	d8814a17 	ldw	r2,1320(sp)
    1688:	d9014517 	ldw	r4,1300(sp)
    168c:	1121c83a 	sub	r16,r2,r4
    1690:	0400240e 	bge	zero,r16,1724 <___vfprintf_internal_r+0x6a4>
    1694:	00800404 	movi	r2,16
    1698:	1404550e 	bge	r2,r16,27f0 <___vfprintf_internal_r+0x1770>
    169c:	dc400d17 	ldw	r17,52(sp)
    16a0:	1027883a 	mov	r19,r2
    16a4:	07000074 	movhi	fp,1
    16a8:	e7369584 	addi	fp,fp,-9642
    16ac:	050001c4 	movi	r20,7
    16b0:	00000306 	br	16c0 <___vfprintf_internal_r+0x640>
    16b4:	843ffc04 	addi	r16,r16,-16
    16b8:	18c00204 	addi	r3,r3,8
    16bc:	9c00110e 	bge	r19,r16,1704 <___vfprintf_internal_r+0x684>
    16c0:	94800404 	addi	r18,r18,16
    16c4:	8c400044 	addi	r17,r17,1
    16c8:	1f000015 	stw	fp,0(r3)
    16cc:	1cc00115 	stw	r19,4(r3)
    16d0:	dc800e15 	stw	r18,56(sp)
    16d4:	dc400d15 	stw	r17,52(sp)
    16d8:	a47ff60e 	bge	r20,r17,16b4 <___vfprintf_internal_r+0x634>
    16dc:	d9014f17 	ldw	r4,1340(sp)
    16e0:	b00b883a 	mov	r5,r22
    16e4:	d9800c04 	addi	r6,sp,48
    16e8:	00010280 	call	1028 <__sprint_r>
    16ec:	10001c1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    16f0:	843ffc04 	addi	r16,r16,-16
    16f4:	dc800e17 	ldw	r18,56(sp)
    16f8:	dc400d17 	ldw	r17,52(sp)
    16fc:	d8c01904 	addi	r3,sp,100
    1700:	9c3fef16 	blt	r19,r16,16c0 <___vfprintf_internal_r+0x640>
    1704:	9425883a 	add	r18,r18,r16
    1708:	8c400044 	addi	r17,r17,1
    170c:	008001c4 	movi	r2,7
    1710:	1f000015 	stw	fp,0(r3)
    1714:	1c000115 	stw	r16,4(r3)
    1718:	dc800e15 	stw	r18,56(sp)
    171c:	dc400d15 	stw	r17,52(sp)
    1720:	1440cb16 	blt	r2,r17,1a50 <___vfprintf_internal_r+0x9d0>
    1724:	d8814a17 	ldw	r2,1320(sp)
    1728:	d9414517 	ldw	r5,1300(sp)
    172c:	1140010e 	bge	r2,r5,1734 <___vfprintf_internal_r+0x6b4>
    1730:	2805883a 	mov	r2,r5
    1734:	d9814b17 	ldw	r6,1324(sp)
    1738:	308d883a 	add	r6,r6,r2
    173c:	d9814b15 	stw	r6,1324(sp)
    1740:	90013b1e 	bne	r18,zero,1c30 <___vfprintf_internal_r+0xbb0>
    1744:	d9c14017 	ldw	r7,1280(sp)
    1748:	dd401904 	addi	r21,sp,100
    174c:	d8000d15 	stw	zero,52(sp)
    1750:	003ea706 	br	11f0 <___vfprintf_internal_r+0x170>
    1754:	d8800e17 	ldw	r2,56(sp)
    1758:	1005451e 	bne	r2,zero,2c70 <___vfprintf_internal_r+0x1bf0>
    175c:	d8000d15 	stw	zero,52(sp)
    1760:	b080030b 	ldhu	r2,12(r22)
    1764:	1080100c 	andi	r2,r2,64
    1768:	103e8726 	beq	r2,zero,1188 <___vfprintf_internal_r+0x108>
    176c:	00bfffc4 	movi	r2,-1
    1770:	d8814b15 	stw	r2,1324(sp)
    1774:	003e8406 	br	1188 <___vfprintf_internal_r+0x108>
    1778:	d9814d17 	ldw	r6,1332(sp)
    177c:	00801944 	movi	r2,101
    1780:	11806e16 	blt	r2,r6,193c <___vfprintf_internal_r+0x8bc>
    1784:	d9414717 	ldw	r5,1308(sp)
    1788:	00c00044 	movi	r3,1
    178c:	1943490e 	bge	r3,r5,24b4 <___vfprintf_internal_r+0x1434>
    1790:	d8814117 	ldw	r2,1284(sp)
    1794:	94800044 	addi	r18,r18,1
    1798:	8c400044 	addi	r17,r17,1
    179c:	a8800015 	stw	r2,0(r21)
    17a0:	008001c4 	movi	r2,7
    17a4:	a8c00115 	stw	r3,4(r21)
    17a8:	dc800e15 	stw	r18,56(sp)
    17ac:	dc400d15 	stw	r17,52(sp)
    17b0:	1441ca16 	blt	r2,r17,1edc <___vfprintf_internal_r+0xe5c>
    17b4:	a8c00204 	addi	r3,r21,8
    17b8:	d9014917 	ldw	r4,1316(sp)
    17bc:	00800044 	movi	r2,1
    17c0:	94800044 	addi	r18,r18,1
    17c4:	8c400044 	addi	r17,r17,1
    17c8:	18800115 	stw	r2,4(r3)
    17cc:	008001c4 	movi	r2,7
    17d0:	19000015 	stw	r4,0(r3)
    17d4:	dc800e15 	stw	r18,56(sp)
    17d8:	dc400d15 	stw	r17,52(sp)
    17dc:	1441b616 	blt	r2,r17,1eb8 <___vfprintf_internal_r+0xe38>
    17e0:	1cc00204 	addi	r19,r3,8
    17e4:	d9014217 	ldw	r4,1288(sp)
    17e8:	d9414317 	ldw	r5,1292(sp)
    17ec:	000d883a 	mov	r6,zero
    17f0:	000f883a 	mov	r7,zero
    17f4:	0009ce80 	call	9ce8 <__nedf2>
    17f8:	10017426 	beq	r2,zero,1dcc <___vfprintf_internal_r+0xd4c>
    17fc:	d9414717 	ldw	r5,1308(sp)
    1800:	d9814117 	ldw	r6,1284(sp)
    1804:	8c400044 	addi	r17,r17,1
    1808:	2c85883a 	add	r2,r5,r18
    180c:	14bfffc4 	addi	r18,r2,-1
    1810:	28bfffc4 	addi	r2,r5,-1
    1814:	30c00044 	addi	r3,r6,1
    1818:	98800115 	stw	r2,4(r19)
    181c:	008001c4 	movi	r2,7
    1820:	98c00015 	stw	r3,0(r19)
    1824:	dc800e15 	stw	r18,56(sp)
    1828:	dc400d15 	stw	r17,52(sp)
    182c:	14418e16 	blt	r2,r17,1e68 <___vfprintf_internal_r+0xde8>
    1830:	9cc00204 	addi	r19,r19,8
    1834:	d9414817 	ldw	r5,1312(sp)
    1838:	d8800804 	addi	r2,sp,32
    183c:	8c400044 	addi	r17,r17,1
    1840:	9165883a 	add	r18,r18,r5
    1844:	98800015 	stw	r2,0(r19)
    1848:	008001c4 	movi	r2,7
    184c:	99400115 	stw	r5,4(r19)
    1850:	dc800e15 	stw	r18,56(sp)
    1854:	dc400d15 	stw	r17,52(sp)
    1858:	1440ed16 	blt	r2,r17,1c10 <___vfprintf_internal_r+0xb90>
    185c:	98c00204 	addi	r3,r19,8
    1860:	003f8506 	br	1678 <___vfprintf_internal_r+0x5f8>
    1864:	d9814a17 	ldw	r6,1320(sp)
    1868:	d8814517 	ldw	r2,1300(sp)
    186c:	30a1c83a 	sub	r16,r6,r2
    1870:	043f4b0e 	bge	zero,r16,15a0 <___vfprintf_internal_r+0x520>
    1874:	00800404 	movi	r2,16
    1878:	14043a0e 	bge	r2,r16,2964 <___vfprintf_internal_r+0x18e4>
    187c:	1027883a 	mov	r19,r2
    1880:	07000074 	movhi	fp,1
    1884:	e7369184 	addi	fp,fp,-9658
    1888:	050001c4 	movi	r20,7
    188c:	00000306 	br	189c <___vfprintf_internal_r+0x81c>
    1890:	843ffc04 	addi	r16,r16,-16
    1894:	ad400204 	addi	r21,r21,8
    1898:	9c00130e 	bge	r19,r16,18e8 <___vfprintf_internal_r+0x868>
    189c:	94800404 	addi	r18,r18,16
    18a0:	8c400044 	addi	r17,r17,1
    18a4:	af000015 	stw	fp,0(r21)
    18a8:	acc00115 	stw	r19,4(r21)
    18ac:	dc800e15 	stw	r18,56(sp)
    18b0:	dc400d15 	stw	r17,52(sp)
    18b4:	a47ff60e 	bge	r20,r17,1890 <___vfprintf_internal_r+0x810>
    18b8:	d9014f17 	ldw	r4,1340(sp)
    18bc:	b00b883a 	mov	r5,r22
    18c0:	d9800c04 	addi	r6,sp,48
    18c4:	d9c15115 	stw	r7,1348(sp)
    18c8:	00010280 	call	1028 <__sprint_r>
    18cc:	d9c15117 	ldw	r7,1348(sp)
    18d0:	103fa31e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    18d4:	843ffc04 	addi	r16,r16,-16
    18d8:	dc800e17 	ldw	r18,56(sp)
    18dc:	dc400d17 	ldw	r17,52(sp)
    18e0:	dd401904 	addi	r21,sp,100
    18e4:	9c3fed16 	blt	r19,r16,189c <___vfprintf_internal_r+0x81c>
    18e8:	9425883a 	add	r18,r18,r16
    18ec:	8c400044 	addi	r17,r17,1
    18f0:	008001c4 	movi	r2,7
    18f4:	af000015 	stw	fp,0(r21)
    18f8:	ac000115 	stw	r16,4(r21)
    18fc:	dc800e15 	stw	r18,56(sp)
    1900:	dc400d15 	stw	r17,52(sp)
    1904:	14416116 	blt	r2,r17,1e8c <___vfprintf_internal_r+0xe0c>
    1908:	ad400204 	addi	r21,r21,8
    190c:	003f2406 	br	15a0 <___vfprintf_internal_r+0x520>
    1910:	d9014f17 	ldw	r4,1340(sp)
    1914:	0004ce80 	call	4ce8 <__sinit>
    1918:	d9c15117 	ldw	r7,1348(sp)
    191c:	003def06 	br	10dc <___vfprintf_internal_r+0x5c>
    1920:	d9014f17 	ldw	r4,1340(sp)
    1924:	b00b883a 	mov	r5,r22
    1928:	d9c15115 	stw	r7,1348(sp)
    192c:	0002f680 	call	2f68 <__swsetup_r>
    1930:	d9c15117 	ldw	r7,1348(sp)
    1934:	103dee26 	beq	r2,zero,10f0 <___vfprintf_internal_r+0x70>
    1938:	003f8c06 	br	176c <___vfprintf_internal_r+0x6ec>
    193c:	d9014217 	ldw	r4,1288(sp)
    1940:	d9414317 	ldw	r5,1292(sp)
    1944:	000d883a 	mov	r6,zero
    1948:	000f883a 	mov	r7,zero
    194c:	0009c600 	call	9c60 <__eqdf2>
    1950:	1000f21e 	bne	r2,zero,1d1c <___vfprintf_internal_r+0xc9c>
    1954:	00800074 	movhi	r2,1
    1958:	10b69104 	addi	r2,r2,-9660
    195c:	94800044 	addi	r18,r18,1
    1960:	8c400044 	addi	r17,r17,1
    1964:	a8800015 	stw	r2,0(r21)
    1968:	00c00044 	movi	r3,1
    196c:	008001c4 	movi	r2,7
    1970:	a8c00115 	stw	r3,4(r21)
    1974:	dc800e15 	stw	r18,56(sp)
    1978:	dc400d15 	stw	r17,52(sp)
    197c:	14430016 	blt	r2,r17,2580 <___vfprintf_internal_r+0x1500>
    1980:	a8c00204 	addi	r3,r21,8
    1984:	d8800517 	ldw	r2,20(sp)
    1988:	d9014717 	ldw	r4,1308(sp)
    198c:	11015c0e 	bge	r2,r4,1f00 <___vfprintf_internal_r+0xe80>
    1990:	dc400d17 	ldw	r17,52(sp)
    1994:	d9814917 	ldw	r6,1316(sp)
    1998:	00800044 	movi	r2,1
    199c:	94800044 	addi	r18,r18,1
    19a0:	8c400044 	addi	r17,r17,1
    19a4:	18800115 	stw	r2,4(r3)
    19a8:	008001c4 	movi	r2,7
    19ac:	19800015 	stw	r6,0(r3)
    19b0:	dc800e15 	stw	r18,56(sp)
    19b4:	dc400d15 	stw	r17,52(sp)
    19b8:	14431616 	blt	r2,r17,2614 <___vfprintf_internal_r+0x1594>
    19bc:	18c00204 	addi	r3,r3,8
    19c0:	d8814717 	ldw	r2,1308(sp)
    19c4:	143fffc4 	addi	r16,r2,-1
    19c8:	043f2b0e 	bge	zero,r16,1678 <___vfprintf_internal_r+0x5f8>
    19cc:	00800404 	movi	r2,16
    19d0:	1402a80e 	bge	r2,r16,2474 <___vfprintf_internal_r+0x13f4>
    19d4:	dc400d17 	ldw	r17,52(sp)
    19d8:	1027883a 	mov	r19,r2
    19dc:	07000074 	movhi	fp,1
    19e0:	e7369184 	addi	fp,fp,-9658
    19e4:	050001c4 	movi	r20,7
    19e8:	00000306 	br	19f8 <___vfprintf_internal_r+0x978>
    19ec:	18c00204 	addi	r3,r3,8
    19f0:	843ffc04 	addi	r16,r16,-16
    19f4:	9c02a20e 	bge	r19,r16,2480 <___vfprintf_internal_r+0x1400>
    19f8:	94800404 	addi	r18,r18,16
    19fc:	8c400044 	addi	r17,r17,1
    1a00:	1f000015 	stw	fp,0(r3)
    1a04:	1cc00115 	stw	r19,4(r3)
    1a08:	dc800e15 	stw	r18,56(sp)
    1a0c:	dc400d15 	stw	r17,52(sp)
    1a10:	a47ff60e 	bge	r20,r17,19ec <___vfprintf_internal_r+0x96c>
    1a14:	d9014f17 	ldw	r4,1340(sp)
    1a18:	b00b883a 	mov	r5,r22
    1a1c:	d9800c04 	addi	r6,sp,48
    1a20:	00010280 	call	1028 <__sprint_r>
    1a24:	103f4e1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1a28:	dc800e17 	ldw	r18,56(sp)
    1a2c:	dc400d17 	ldw	r17,52(sp)
    1a30:	d8c01904 	addi	r3,sp,100
    1a34:	003fee06 	br	19f0 <___vfprintf_internal_r+0x970>
    1a38:	d8802c0b 	ldhu	r2,176(sp)
    1a3c:	00ffffc4 	movi	r3,-1
    1a40:	d8c14b15 	stw	r3,1324(sp)
    1a44:	1080100c 	andi	r2,r2,64
    1a48:	103dcc1e 	bne	r2,zero,117c <___vfprintf_internal_r+0xfc>
    1a4c:	003dce06 	br	1188 <___vfprintf_internal_r+0x108>
    1a50:	d9014f17 	ldw	r4,1340(sp)
    1a54:	b00b883a 	mov	r5,r22
    1a58:	d9800c04 	addi	r6,sp,48
    1a5c:	00010280 	call	1028 <__sprint_r>
    1a60:	103f3f1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1a64:	dc800e17 	ldw	r18,56(sp)
    1a68:	003f2e06 	br	1724 <___vfprintf_internal_r+0x6a4>
    1a6c:	d9414c17 	ldw	r5,1328(sp)
    1a70:	29400414 	ori	r5,r5,16
    1a74:	d9414c15 	stw	r5,1328(sp)
    1a78:	d9814c17 	ldw	r6,1328(sp)
    1a7c:	3080080c 	andi	r2,r6,32
    1a80:	10014f1e 	bne	r2,zero,1fc0 <___vfprintf_internal_r+0xf40>
    1a84:	d8c14c17 	ldw	r3,1328(sp)
    1a88:	1880040c 	andi	r2,r3,16
    1a8c:	1002f01e 	bne	r2,zero,2650 <___vfprintf_internal_r+0x15d0>
    1a90:	d9014c17 	ldw	r4,1328(sp)
    1a94:	2080100c 	andi	r2,r4,64
    1a98:	1002ed26 	beq	r2,zero,2650 <___vfprintf_internal_r+0x15d0>
    1a9c:	3880000f 	ldh	r2,0(r7)
    1aa0:	39c00104 	addi	r7,r7,4
    1aa4:	d9c14015 	stw	r7,1280(sp)
    1aa8:	1023d7fa 	srai	r17,r2,31
    1aac:	1021883a 	mov	r16,r2
    1ab0:	88037816 	blt	r17,zero,2894 <___vfprintf_internal_r+0x1814>
    1ab4:	01000044 	movi	r4,1
    1ab8:	98000416 	blt	r19,zero,1acc <___vfprintf_internal_r+0xa4c>
    1abc:	d8c14c17 	ldw	r3,1328(sp)
    1ac0:	00bfdfc4 	movi	r2,-129
    1ac4:	1886703a 	and	r3,r3,r2
    1ac8:	d8c14c15 	stw	r3,1328(sp)
    1acc:	8444b03a 	or	r2,r16,r17
    1ad0:	10022c1e 	bne	r2,zero,2384 <___vfprintf_internal_r+0x1304>
    1ad4:	98022b1e 	bne	r19,zero,2384 <___vfprintf_internal_r+0x1304>
    1ad8:	20803fcc 	andi	r2,r4,255
    1adc:	1002a126 	beq	r2,zero,2564 <___vfprintf_internal_r+0x14e4>
    1ae0:	d8c01904 	addi	r3,sp,100
    1ae4:	dd000f04 	addi	r20,sp,60
    1ae8:	d8c14115 	stw	r3,1284(sp)
    1aec:	d8c14117 	ldw	r3,1284(sp)
    1af0:	dcc14515 	stw	r19,1300(sp)
    1af4:	a0c5c83a 	sub	r2,r20,r3
    1af8:	11c00a04 	addi	r7,r2,40
    1afc:	99c0010e 	bge	r19,r7,1b04 <___vfprintf_internal_r+0xa84>
    1b00:	d9c14515 	stw	r7,1300(sp)
    1b04:	dcc14615 	stw	r19,1304(sp)
    1b08:	d8800407 	ldb	r2,16(sp)
    1b0c:	103e4c26 	beq	r2,zero,1440 <___vfprintf_internal_r+0x3c0>
    1b10:	d8814517 	ldw	r2,1300(sp)
    1b14:	10800044 	addi	r2,r2,1
    1b18:	d8814515 	stw	r2,1300(sp)
    1b1c:	003e4806 	br	1440 <___vfprintf_internal_r+0x3c0>
    1b20:	d9814c17 	ldw	r6,1328(sp)
    1b24:	31800414 	ori	r6,r6,16
    1b28:	d9814c15 	stw	r6,1328(sp)
    1b2c:	d8c14c17 	ldw	r3,1328(sp)
    1b30:	1880080c 	andi	r2,r3,32
    1b34:	1001271e 	bne	r2,zero,1fd4 <___vfprintf_internal_r+0xf54>
    1b38:	d9414c17 	ldw	r5,1328(sp)
    1b3c:	2880040c 	andi	r2,r5,16
    1b40:	1002bc1e 	bne	r2,zero,2634 <___vfprintf_internal_r+0x15b4>
    1b44:	d9814c17 	ldw	r6,1328(sp)
    1b48:	3080100c 	andi	r2,r6,64
    1b4c:	1002b926 	beq	r2,zero,2634 <___vfprintf_internal_r+0x15b4>
    1b50:	3c00000b 	ldhu	r16,0(r7)
    1b54:	0009883a 	mov	r4,zero
    1b58:	39c00104 	addi	r7,r7,4
    1b5c:	0023883a 	mov	r17,zero
    1b60:	d9c14015 	stw	r7,1280(sp)
    1b64:	d8000405 	stb	zero,16(sp)
    1b68:	003fd306 	br	1ab8 <___vfprintf_internal_r+0xa38>
    1b6c:	d9014c17 	ldw	r4,1328(sp)
    1b70:	21000414 	ori	r4,r4,16
    1b74:	d9014c15 	stw	r4,1328(sp)
    1b78:	d9414c17 	ldw	r5,1328(sp)
    1b7c:	2880080c 	andi	r2,r5,32
    1b80:	1001081e 	bne	r2,zero,1fa4 <___vfprintf_internal_r+0xf24>
    1b84:	d8c14c17 	ldw	r3,1328(sp)
    1b88:	1880040c 	andi	r2,r3,16
    1b8c:	1002b61e 	bne	r2,zero,2668 <___vfprintf_internal_r+0x15e8>
    1b90:	d9014c17 	ldw	r4,1328(sp)
    1b94:	2080100c 	andi	r2,r4,64
    1b98:	1002b326 	beq	r2,zero,2668 <___vfprintf_internal_r+0x15e8>
    1b9c:	3c00000b 	ldhu	r16,0(r7)
    1ba0:	01000044 	movi	r4,1
    1ba4:	39c00104 	addi	r7,r7,4
    1ba8:	0023883a 	mov	r17,zero
    1bac:	d9c14015 	stw	r7,1280(sp)
    1bb0:	d8000405 	stb	zero,16(sp)
    1bb4:	003fc006 	br	1ab8 <___vfprintf_internal_r+0xa38>
    1bb8:	d9014f17 	ldw	r4,1340(sp)
    1bbc:	b00b883a 	mov	r5,r22
    1bc0:	d9800c04 	addi	r6,sp,48
    1bc4:	00010280 	call	1028 <__sprint_r>
    1bc8:	103ee51e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1bcc:	dc800e17 	ldw	r18,56(sp)
    1bd0:	d8c01904 	addi	r3,sp,100
    1bd4:	d9814c17 	ldw	r6,1328(sp)
    1bd8:	3080004c 	andi	r2,r6,1
    1bdc:	1005003a 	cmpeq	r2,r2,zero
    1be0:	103ea51e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x5f8>
    1be4:	00800044 	movi	r2,1
    1be8:	dc400d17 	ldw	r17,52(sp)
    1bec:	18800115 	stw	r2,4(r3)
    1bf0:	d8814917 	ldw	r2,1316(sp)
    1bf4:	94800044 	addi	r18,r18,1
    1bf8:	8c400044 	addi	r17,r17,1
    1bfc:	18800015 	stw	r2,0(r3)
    1c00:	008001c4 	movi	r2,7
    1c04:	dc800e15 	stw	r18,56(sp)
    1c08:	dc400d15 	stw	r17,52(sp)
    1c0c:	1442240e 	bge	r2,r17,24a0 <___vfprintf_internal_r+0x1420>
    1c10:	d9014f17 	ldw	r4,1340(sp)
    1c14:	b00b883a 	mov	r5,r22
    1c18:	d9800c04 	addi	r6,sp,48
    1c1c:	00010280 	call	1028 <__sprint_r>
    1c20:	103ecf1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1c24:	dc800e17 	ldw	r18,56(sp)
    1c28:	d8c01904 	addi	r3,sp,100
    1c2c:	003e9206 	br	1678 <___vfprintf_internal_r+0x5f8>
    1c30:	d9014f17 	ldw	r4,1340(sp)
    1c34:	b00b883a 	mov	r5,r22
    1c38:	d9800c04 	addi	r6,sp,48
    1c3c:	00010280 	call	1028 <__sprint_r>
    1c40:	103ec026 	beq	r2,zero,1744 <___vfprintf_internal_r+0x6c4>
    1c44:	003ec606 	br	1760 <___vfprintf_internal_r+0x6e0>
    1c48:	d9014f17 	ldw	r4,1340(sp)
    1c4c:	b00b883a 	mov	r5,r22
    1c50:	d9800c04 	addi	r6,sp,48
    1c54:	d9c15115 	stw	r7,1348(sp)
    1c58:	00010280 	call	1028 <__sprint_r>
    1c5c:	d9c15117 	ldw	r7,1348(sp)
    1c60:	103ebf1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1c64:	dc800e17 	ldw	r18,56(sp)
    1c68:	dc400d17 	ldw	r17,52(sp)
    1c6c:	dd401904 	addi	r21,sp,100
    1c70:	003e7406 	br	1644 <___vfprintf_internal_r+0x5c4>
    1c74:	d9014f17 	ldw	r4,1340(sp)
    1c78:	b00b883a 	mov	r5,r22
    1c7c:	d9800c04 	addi	r6,sp,48
    1c80:	d9c15115 	stw	r7,1348(sp)
    1c84:	00010280 	call	1028 <__sprint_r>
    1c88:	d9c15117 	ldw	r7,1348(sp)
    1c8c:	103eb41e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1c90:	dd401904 	addi	r21,sp,100
    1c94:	003d6d06 	br	124c <___vfprintf_internal_r+0x1cc>
    1c98:	d9014f17 	ldw	r4,1340(sp)
    1c9c:	b00b883a 	mov	r5,r22
    1ca0:	d9800c04 	addi	r6,sp,48
    1ca4:	d9c15115 	stw	r7,1348(sp)
    1ca8:	00010280 	call	1028 <__sprint_r>
    1cac:	d9c15117 	ldw	r7,1348(sp)
    1cb0:	103eab1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1cb4:	dc800e17 	ldw	r18,56(sp)
    1cb8:	dc400d17 	ldw	r17,52(sp)
    1cbc:	dd401904 	addi	r21,sp,100
    1cc0:	003e3406 	br	1594 <___vfprintf_internal_r+0x514>
    1cc4:	d9014f17 	ldw	r4,1340(sp)
    1cc8:	b00b883a 	mov	r5,r22
    1ccc:	d9800c04 	addi	r6,sp,48
    1cd0:	d9c15115 	stw	r7,1348(sp)
    1cd4:	00010280 	call	1028 <__sprint_r>
    1cd8:	d9c15117 	ldw	r7,1348(sp)
    1cdc:	103ea01e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1ce0:	dc800e17 	ldw	r18,56(sp)
    1ce4:	dc400d17 	ldw	r17,52(sp)
    1ce8:	dd401904 	addi	r21,sp,100
    1cec:	003e1c06 	br	1560 <___vfprintf_internal_r+0x4e0>
    1cf0:	d9014f17 	ldw	r4,1340(sp)
    1cf4:	b00b883a 	mov	r5,r22
    1cf8:	d9800c04 	addi	r6,sp,48
    1cfc:	d9c15115 	stw	r7,1348(sp)
    1d00:	00010280 	call	1028 <__sprint_r>
    1d04:	d9c15117 	ldw	r7,1348(sp)
    1d08:	103e951e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1d0c:	dc800e17 	ldw	r18,56(sp)
    1d10:	dc400d17 	ldw	r17,52(sp)
    1d14:	dd401904 	addi	r21,sp,100
    1d18:	003e0406 	br	152c <___vfprintf_internal_r+0x4ac>
    1d1c:	d9000517 	ldw	r4,20(sp)
    1d20:	0102580e 	bge	zero,r4,2684 <___vfprintf_internal_r+0x1604>
    1d24:	d9814717 	ldw	r6,1308(sp)
    1d28:	21807a16 	blt	r4,r6,1f14 <___vfprintf_internal_r+0xe94>
    1d2c:	d8814117 	ldw	r2,1284(sp)
    1d30:	91a5883a 	add	r18,r18,r6
    1d34:	8c400044 	addi	r17,r17,1
    1d38:	a8800015 	stw	r2,0(r21)
    1d3c:	008001c4 	movi	r2,7
    1d40:	a9800115 	stw	r6,4(r21)
    1d44:	dc800e15 	stw	r18,56(sp)
    1d48:	dc400d15 	stw	r17,52(sp)
    1d4c:	1442fc16 	blt	r2,r17,2940 <___vfprintf_internal_r+0x18c0>
    1d50:	a8c00204 	addi	r3,r21,8
    1d54:	d9414717 	ldw	r5,1308(sp)
    1d58:	2161c83a 	sub	r16,r4,r5
    1d5c:	043f9d0e 	bge	zero,r16,1bd4 <___vfprintf_internal_r+0xb54>
    1d60:	00800404 	movi	r2,16
    1d64:	1402190e 	bge	r2,r16,25cc <___vfprintf_internal_r+0x154c>
    1d68:	dc400d17 	ldw	r17,52(sp)
    1d6c:	1027883a 	mov	r19,r2
    1d70:	07000074 	movhi	fp,1
    1d74:	e7369184 	addi	fp,fp,-9658
    1d78:	050001c4 	movi	r20,7
    1d7c:	00000306 	br	1d8c <___vfprintf_internal_r+0xd0c>
    1d80:	18c00204 	addi	r3,r3,8
    1d84:	843ffc04 	addi	r16,r16,-16
    1d88:	9c02130e 	bge	r19,r16,25d8 <___vfprintf_internal_r+0x1558>
    1d8c:	94800404 	addi	r18,r18,16
    1d90:	8c400044 	addi	r17,r17,1
    1d94:	1f000015 	stw	fp,0(r3)
    1d98:	1cc00115 	stw	r19,4(r3)
    1d9c:	dc800e15 	stw	r18,56(sp)
    1da0:	dc400d15 	stw	r17,52(sp)
    1da4:	a47ff60e 	bge	r20,r17,1d80 <___vfprintf_internal_r+0xd00>
    1da8:	d9014f17 	ldw	r4,1340(sp)
    1dac:	b00b883a 	mov	r5,r22
    1db0:	d9800c04 	addi	r6,sp,48
    1db4:	00010280 	call	1028 <__sprint_r>
    1db8:	103e691e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1dbc:	dc800e17 	ldw	r18,56(sp)
    1dc0:	dc400d17 	ldw	r17,52(sp)
    1dc4:	d8c01904 	addi	r3,sp,100
    1dc8:	003fee06 	br	1d84 <___vfprintf_internal_r+0xd04>
    1dcc:	d8814717 	ldw	r2,1308(sp)
    1dd0:	143fffc4 	addi	r16,r2,-1
    1dd4:	043e970e 	bge	zero,r16,1834 <___vfprintf_internal_r+0x7b4>
    1dd8:	00800404 	movi	r2,16
    1ddc:	1400180e 	bge	r2,r16,1e40 <___vfprintf_internal_r+0xdc0>
    1de0:	1029883a 	mov	r20,r2
    1de4:	07000074 	movhi	fp,1
    1de8:	e7369184 	addi	fp,fp,-9658
    1dec:	054001c4 	movi	r21,7
    1df0:	00000306 	br	1e00 <___vfprintf_internal_r+0xd80>
    1df4:	9cc00204 	addi	r19,r19,8
    1df8:	843ffc04 	addi	r16,r16,-16
    1dfc:	a400120e 	bge	r20,r16,1e48 <___vfprintf_internal_r+0xdc8>
    1e00:	94800404 	addi	r18,r18,16
    1e04:	8c400044 	addi	r17,r17,1
    1e08:	9f000015 	stw	fp,0(r19)
    1e0c:	9d000115 	stw	r20,4(r19)
    1e10:	dc800e15 	stw	r18,56(sp)
    1e14:	dc400d15 	stw	r17,52(sp)
    1e18:	ac7ff60e 	bge	r21,r17,1df4 <___vfprintf_internal_r+0xd74>
    1e1c:	d9014f17 	ldw	r4,1340(sp)
    1e20:	b00b883a 	mov	r5,r22
    1e24:	d9800c04 	addi	r6,sp,48
    1e28:	00010280 	call	1028 <__sprint_r>
    1e2c:	103e4c1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1e30:	dc800e17 	ldw	r18,56(sp)
    1e34:	dc400d17 	ldw	r17,52(sp)
    1e38:	dcc01904 	addi	r19,sp,100
    1e3c:	003fee06 	br	1df8 <___vfprintf_internal_r+0xd78>
    1e40:	07000074 	movhi	fp,1
    1e44:	e7369184 	addi	fp,fp,-9658
    1e48:	9425883a 	add	r18,r18,r16
    1e4c:	8c400044 	addi	r17,r17,1
    1e50:	008001c4 	movi	r2,7
    1e54:	9f000015 	stw	fp,0(r19)
    1e58:	9c000115 	stw	r16,4(r19)
    1e5c:	dc800e15 	stw	r18,56(sp)
    1e60:	dc400d15 	stw	r17,52(sp)
    1e64:	147e720e 	bge	r2,r17,1830 <___vfprintf_internal_r+0x7b0>
    1e68:	d9014f17 	ldw	r4,1340(sp)
    1e6c:	b00b883a 	mov	r5,r22
    1e70:	d9800c04 	addi	r6,sp,48
    1e74:	00010280 	call	1028 <__sprint_r>
    1e78:	103e391e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1e7c:	dc800e17 	ldw	r18,56(sp)
    1e80:	dc400d17 	ldw	r17,52(sp)
    1e84:	dcc01904 	addi	r19,sp,100
    1e88:	003e6a06 	br	1834 <___vfprintf_internal_r+0x7b4>
    1e8c:	d9014f17 	ldw	r4,1340(sp)
    1e90:	b00b883a 	mov	r5,r22
    1e94:	d9800c04 	addi	r6,sp,48
    1e98:	d9c15115 	stw	r7,1348(sp)
    1e9c:	00010280 	call	1028 <__sprint_r>
    1ea0:	d9c15117 	ldw	r7,1348(sp)
    1ea4:	103e2e1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1ea8:	dc800e17 	ldw	r18,56(sp)
    1eac:	dc400d17 	ldw	r17,52(sp)
    1eb0:	dd401904 	addi	r21,sp,100
    1eb4:	003dba06 	br	15a0 <___vfprintf_internal_r+0x520>
    1eb8:	d9014f17 	ldw	r4,1340(sp)
    1ebc:	b00b883a 	mov	r5,r22
    1ec0:	d9800c04 	addi	r6,sp,48
    1ec4:	00010280 	call	1028 <__sprint_r>
    1ec8:	103e251e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1ecc:	dc800e17 	ldw	r18,56(sp)
    1ed0:	dc400d17 	ldw	r17,52(sp)
    1ed4:	dcc01904 	addi	r19,sp,100
    1ed8:	003e4206 	br	17e4 <___vfprintf_internal_r+0x764>
    1edc:	d9014f17 	ldw	r4,1340(sp)
    1ee0:	b00b883a 	mov	r5,r22
    1ee4:	d9800c04 	addi	r6,sp,48
    1ee8:	00010280 	call	1028 <__sprint_r>
    1eec:	103e1c1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    1ef0:	dc800e17 	ldw	r18,56(sp)
    1ef4:	dc400d17 	ldw	r17,52(sp)
    1ef8:	d8c01904 	addi	r3,sp,100
    1efc:	003e2e06 	br	17b8 <___vfprintf_internal_r+0x738>
    1f00:	d9414c17 	ldw	r5,1328(sp)
    1f04:	2880004c 	andi	r2,r5,1
    1f08:	1005003a 	cmpeq	r2,r2,zero
    1f0c:	103dda1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x5f8>
    1f10:	003e9f06 	br	1990 <___vfprintf_internal_r+0x910>
    1f14:	d8c14117 	ldw	r3,1284(sp)
    1f18:	9125883a 	add	r18,r18,r4
    1f1c:	8c400044 	addi	r17,r17,1
    1f20:	008001c4 	movi	r2,7
    1f24:	a8c00015 	stw	r3,0(r21)
    1f28:	a9000115 	stw	r4,4(r21)
    1f2c:	dc800e15 	stw	r18,56(sp)
    1f30:	dc400d15 	stw	r17,52(sp)
    1f34:	14426c16 	blt	r2,r17,28e8 <___vfprintf_internal_r+0x1868>
    1f38:	a8c00204 	addi	r3,r21,8
    1f3c:	d9414917 	ldw	r5,1316(sp)
    1f40:	00800044 	movi	r2,1
    1f44:	94800044 	addi	r18,r18,1
    1f48:	8c400044 	addi	r17,r17,1
    1f4c:	18800115 	stw	r2,4(r3)
    1f50:	008001c4 	movi	r2,7
    1f54:	19400015 	stw	r5,0(r3)
    1f58:	dc800e15 	stw	r18,56(sp)
    1f5c:	dc400d15 	stw	r17,52(sp)
    1f60:	2021883a 	mov	r16,r4
    1f64:	14425616 	blt	r2,r17,28c0 <___vfprintf_internal_r+0x1840>
    1f68:	19400204 	addi	r5,r3,8
    1f6c:	d9814717 	ldw	r6,1308(sp)
    1f70:	8c400044 	addi	r17,r17,1
    1f74:	dc400d15 	stw	r17,52(sp)
    1f78:	3107c83a 	sub	r3,r6,r4
    1f7c:	d9014117 	ldw	r4,1284(sp)
    1f80:	90e5883a 	add	r18,r18,r3
    1f84:	28c00115 	stw	r3,4(r5)
    1f88:	8105883a 	add	r2,r16,r4
    1f8c:	28800015 	stw	r2,0(r5)
    1f90:	008001c4 	movi	r2,7
    1f94:	dc800e15 	stw	r18,56(sp)
    1f98:	147f1d16 	blt	r2,r17,1c10 <___vfprintf_internal_r+0xb90>
    1f9c:	28c00204 	addi	r3,r5,8
    1fa0:	003db506 	br	1678 <___vfprintf_internal_r+0x5f8>
    1fa4:	3c000017 	ldw	r16,0(r7)
    1fa8:	3c400117 	ldw	r17,4(r7)
    1fac:	39800204 	addi	r6,r7,8
    1fb0:	01000044 	movi	r4,1
    1fb4:	d9814015 	stw	r6,1280(sp)
    1fb8:	d8000405 	stb	zero,16(sp)
    1fbc:	003ebe06 	br	1ab8 <___vfprintf_internal_r+0xa38>
    1fc0:	3c000017 	ldw	r16,0(r7)
    1fc4:	3c400117 	ldw	r17,4(r7)
    1fc8:	38800204 	addi	r2,r7,8
    1fcc:	d8814015 	stw	r2,1280(sp)
    1fd0:	003eb706 	br	1ab0 <___vfprintf_internal_r+0xa30>
    1fd4:	3c000017 	ldw	r16,0(r7)
    1fd8:	3c400117 	ldw	r17,4(r7)
    1fdc:	39000204 	addi	r4,r7,8
    1fe0:	d9014015 	stw	r4,1280(sp)
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	d8000405 	stb	zero,16(sp)
    1fec:	003eb206 	br	1ab8 <___vfprintf_internal_r+0xa38>
    1ff0:	38c00017 	ldw	r3,0(r7)
    1ff4:	39c00104 	addi	r7,r7,4
    1ff8:	d8c14a15 	stw	r3,1320(sp)
    1ffc:	1800d70e 	bge	r3,zero,235c <___vfprintf_internal_r+0x12dc>
    2000:	00c7c83a 	sub	r3,zero,r3
    2004:	d8c14a15 	stw	r3,1320(sp)
    2008:	d9014c17 	ldw	r4,1328(sp)
    200c:	b8c00007 	ldb	r3,0(r23)
    2010:	21000114 	ori	r4,r4,4
    2014:	d9014c15 	stw	r4,1328(sp)
    2018:	003c9806 	br	127c <___vfprintf_internal_r+0x1fc>
    201c:	d9814c17 	ldw	r6,1328(sp)
    2020:	3080080c 	andi	r2,r6,32
    2024:	1001f626 	beq	r2,zero,2800 <___vfprintf_internal_r+0x1780>
    2028:	d9014b17 	ldw	r4,1324(sp)
    202c:	38800017 	ldw	r2,0(r7)
    2030:	39c00104 	addi	r7,r7,4
    2034:	d9c14015 	stw	r7,1280(sp)
    2038:	2007d7fa 	srai	r3,r4,31
    203c:	d9c14017 	ldw	r7,1280(sp)
    2040:	11000015 	stw	r4,0(r2)
    2044:	10c00115 	stw	r3,4(r2)
    2048:	003c6906 	br	11f0 <___vfprintf_internal_r+0x170>
    204c:	b8c00007 	ldb	r3,0(r23)
    2050:	00801b04 	movi	r2,108
    2054:	18825526 	beq	r3,r2,29ac <___vfprintf_internal_r+0x192c>
    2058:	d9414c17 	ldw	r5,1328(sp)
    205c:	29400414 	ori	r5,r5,16
    2060:	d9414c15 	stw	r5,1328(sp)
    2064:	003c8506 	br	127c <___vfprintf_internal_r+0x1fc>
    2068:	d9814c17 	ldw	r6,1328(sp)
    206c:	b8c00007 	ldb	r3,0(r23)
    2070:	31800814 	ori	r6,r6,32
    2074:	d9814c15 	stw	r6,1328(sp)
    2078:	003c8006 	br	127c <___vfprintf_internal_r+0x1fc>
    207c:	d8814c17 	ldw	r2,1328(sp)
    2080:	3c000017 	ldw	r16,0(r7)
    2084:	00c01e04 	movi	r3,120
    2088:	10800094 	ori	r2,r2,2
    208c:	d8814c15 	stw	r2,1328(sp)
    2090:	39c00104 	addi	r7,r7,4
    2094:	01400074 	movhi	r5,1
    2098:	29767a04 	addi	r5,r5,-9752
    209c:	00800c04 	movi	r2,48
    20a0:	0023883a 	mov	r17,zero
    20a4:	01000084 	movi	r4,2
    20a8:	d9c14015 	stw	r7,1280(sp)
    20ac:	d8c14d15 	stw	r3,1332(sp)
    20b0:	d9414415 	stw	r5,1296(sp)
    20b4:	d8800445 	stb	r2,17(sp)
    20b8:	d8c00485 	stb	r3,18(sp)
    20bc:	d8000405 	stb	zero,16(sp)
    20c0:	003e7d06 	br	1ab8 <___vfprintf_internal_r+0xa38>
    20c4:	d8814c17 	ldw	r2,1328(sp)
    20c8:	b8c00007 	ldb	r3,0(r23)
    20cc:	10801014 	ori	r2,r2,64
    20d0:	d8814c15 	stw	r2,1328(sp)
    20d4:	003c6906 	br	127c <___vfprintf_internal_r+0x1fc>
    20d8:	d9414c17 	ldw	r5,1328(sp)
    20dc:	2880020c 	andi	r2,r5,8
    20e0:	1001e526 	beq	r2,zero,2878 <___vfprintf_internal_r+0x17f8>
    20e4:	39800017 	ldw	r6,0(r7)
    20e8:	38800204 	addi	r2,r7,8
    20ec:	d8814015 	stw	r2,1280(sp)
    20f0:	d9814215 	stw	r6,1288(sp)
    20f4:	39c00117 	ldw	r7,4(r7)
    20f8:	d9c14315 	stw	r7,1292(sp)
    20fc:	d9014217 	ldw	r4,1288(sp)
    2100:	d9414317 	ldw	r5,1292(sp)
    2104:	0007ce40 	call	7ce4 <__isinfd>
    2108:	10021d26 	beq	r2,zero,2980 <___vfprintf_internal_r+0x1900>
    210c:	d9014217 	ldw	r4,1288(sp)
    2110:	d9414317 	ldw	r5,1292(sp)
    2114:	000d883a 	mov	r6,zero
    2118:	000f883a 	mov	r7,zero
    211c:	0009e800 	call	9e80 <__ltdf2>
    2120:	1002d016 	blt	r2,zero,2c64 <___vfprintf_internal_r+0x1be4>
    2124:	d9414d17 	ldw	r5,1332(sp)
    2128:	008011c4 	movi	r2,71
    212c:	11421016 	blt	r2,r5,2970 <___vfprintf_internal_r+0x18f0>
    2130:	01800074 	movhi	r6,1
    2134:	31b67f04 	addi	r6,r6,-9732
    2138:	d9814115 	stw	r6,1284(sp)
    213c:	d9014c17 	ldw	r4,1328(sp)
    2140:	00c000c4 	movi	r3,3
    2144:	00bfdfc4 	movi	r2,-129
    2148:	2088703a 	and	r4,r4,r2
    214c:	180f883a 	mov	r7,r3
    2150:	d8c14515 	stw	r3,1300(sp)
    2154:	d9014c15 	stw	r4,1328(sp)
    2158:	d8014615 	stw	zero,1304(sp)
    215c:	003e6a06 	br	1b08 <___vfprintf_internal_r+0xa88>
    2160:	38800017 	ldw	r2,0(r7)
    2164:	00c00044 	movi	r3,1
    2168:	39c00104 	addi	r7,r7,4
    216c:	d9c14015 	stw	r7,1280(sp)
    2170:	d9000f04 	addi	r4,sp,60
    2174:	180f883a 	mov	r7,r3
    2178:	d8c14515 	stw	r3,1300(sp)
    217c:	d9014115 	stw	r4,1284(sp)
    2180:	d8800f05 	stb	r2,60(sp)
    2184:	d8000405 	stb	zero,16(sp)
    2188:	003cac06 	br	143c <___vfprintf_internal_r+0x3bc>
    218c:	01400074 	movhi	r5,1
    2190:	29768504 	addi	r5,r5,-9708
    2194:	d9414415 	stw	r5,1296(sp)
    2198:	d9814c17 	ldw	r6,1328(sp)
    219c:	3080080c 	andi	r2,r6,32
    21a0:	1000ff26 	beq	r2,zero,25a0 <___vfprintf_internal_r+0x1520>
    21a4:	3c000017 	ldw	r16,0(r7)
    21a8:	3c400117 	ldw	r17,4(r7)
    21ac:	38800204 	addi	r2,r7,8
    21b0:	d8814015 	stw	r2,1280(sp)
    21b4:	d9414c17 	ldw	r5,1328(sp)
    21b8:	2880004c 	andi	r2,r5,1
    21bc:	1005003a 	cmpeq	r2,r2,zero
    21c0:	1000b91e 	bne	r2,zero,24a8 <___vfprintf_internal_r+0x1428>
    21c4:	8444b03a 	or	r2,r16,r17
    21c8:	1000b726 	beq	r2,zero,24a8 <___vfprintf_internal_r+0x1428>
    21cc:	d9814d17 	ldw	r6,1332(sp)
    21d0:	29400094 	ori	r5,r5,2
    21d4:	00800c04 	movi	r2,48
    21d8:	01000084 	movi	r4,2
    21dc:	d9414c15 	stw	r5,1328(sp)
    21e0:	d8800445 	stb	r2,17(sp)
    21e4:	d9800485 	stb	r6,18(sp)
    21e8:	d8000405 	stb	zero,16(sp)
    21ec:	003e3206 	br	1ab8 <___vfprintf_internal_r+0xa38>
    21f0:	01800074 	movhi	r6,1
    21f4:	31b67a04 	addi	r6,r6,-9752
    21f8:	d9814415 	stw	r6,1296(sp)
    21fc:	003fe606 	br	2198 <___vfprintf_internal_r+0x1118>
    2200:	00800ac4 	movi	r2,43
    2204:	d8800405 	stb	r2,16(sp)
    2208:	b8c00007 	ldb	r3,0(r23)
    220c:	003c1b06 	br	127c <___vfprintf_internal_r+0x1fc>
    2210:	d8814c17 	ldw	r2,1328(sp)
    2214:	b8c00007 	ldb	r3,0(r23)
    2218:	10800054 	ori	r2,r2,1
    221c:	d8814c15 	stw	r2,1328(sp)
    2220:	003c1606 	br	127c <___vfprintf_internal_r+0x1fc>
    2224:	d8800407 	ldb	r2,16(sp)
    2228:	10004c1e 	bne	r2,zero,235c <___vfprintf_internal_r+0x12dc>
    222c:	00800804 	movi	r2,32
    2230:	d8800405 	stb	r2,16(sp)
    2234:	b8c00007 	ldb	r3,0(r23)
    2238:	003c1006 	br	127c <___vfprintf_internal_r+0x1fc>
    223c:	d9814c17 	ldw	r6,1328(sp)
    2240:	b8c00007 	ldb	r3,0(r23)
    2244:	31800214 	ori	r6,r6,8
    2248:	d9814c15 	stw	r6,1328(sp)
    224c:	003c0b06 	br	127c <___vfprintf_internal_r+0x1fc>
    2250:	0009883a 	mov	r4,zero
    2254:	04000244 	movi	r16,9
    2258:	01400284 	movi	r5,10
    225c:	d9c15115 	stw	r7,1348(sp)
    2260:	0000e180 	call	e18 <__mulsi3>
    2264:	b9000007 	ldb	r4,0(r23)
    2268:	d8c14d17 	ldw	r3,1332(sp)
    226c:	bdc00044 	addi	r23,r23,1
    2270:	d9014d15 	stw	r4,1332(sp)
    2274:	d9414d17 	ldw	r5,1332(sp)
    2278:	1885883a 	add	r2,r3,r2
    227c:	113ff404 	addi	r4,r2,-48
    2280:	28bff404 	addi	r2,r5,-48
    2284:	d9c15117 	ldw	r7,1348(sp)
    2288:	80bff32e 	bgeu	r16,r2,2258 <___vfprintf_internal_r+0x11d8>
    228c:	d9014a15 	stw	r4,1320(sp)
    2290:	003bfc06 	br	1284 <___vfprintf_internal_r+0x204>
    2294:	d8814c17 	ldw	r2,1328(sp)
    2298:	b8c00007 	ldb	r3,0(r23)
    229c:	10802014 	ori	r2,r2,128
    22a0:	d8814c15 	stw	r2,1328(sp)
    22a4:	003bf506 	br	127c <___vfprintf_internal_r+0x1fc>
    22a8:	b8c00007 	ldb	r3,0(r23)
    22ac:	00800a84 	movi	r2,42
    22b0:	bdc00044 	addi	r23,r23,1
    22b4:	18831826 	beq	r3,r2,2f18 <___vfprintf_internal_r+0x1e98>
    22b8:	d8c14d15 	stw	r3,1332(sp)
    22bc:	18bff404 	addi	r2,r3,-48
    22c0:	00c00244 	movi	r3,9
    22c4:	18827b36 	bltu	r3,r2,2cb4 <___vfprintf_internal_r+0x1c34>
    22c8:	1821883a 	mov	r16,r3
    22cc:	0009883a 	mov	r4,zero
    22d0:	01400284 	movi	r5,10
    22d4:	d9c15115 	stw	r7,1348(sp)
    22d8:	0000e180 	call	e18 <__mulsi3>
    22dc:	d9414d17 	ldw	r5,1332(sp)
    22e0:	b9800007 	ldb	r6,0(r23)
    22e4:	d9c15117 	ldw	r7,1348(sp)
    22e8:	1145883a 	add	r2,r2,r5
    22ec:	113ff404 	addi	r4,r2,-48
    22f0:	30bff404 	addi	r2,r6,-48
    22f4:	d9814d15 	stw	r6,1332(sp)
    22f8:	bdc00044 	addi	r23,r23,1
    22fc:	80bff42e 	bgeu	r16,r2,22d0 <___vfprintf_internal_r+0x1250>
    2300:	2027883a 	mov	r19,r4
    2304:	203bdf0e 	bge	r4,zero,1284 <___vfprintf_internal_r+0x204>
    2308:	04ffffc4 	movi	r19,-1
    230c:	003bdd06 	br	1284 <___vfprintf_internal_r+0x204>
    2310:	d8000405 	stb	zero,16(sp)
    2314:	39800017 	ldw	r6,0(r7)
    2318:	39c00104 	addi	r7,r7,4
    231c:	d9c14015 	stw	r7,1280(sp)
    2320:	d9814115 	stw	r6,1284(sp)
    2324:	3001c926 	beq	r6,zero,2a4c <___vfprintf_internal_r+0x19cc>
    2328:	98000e16 	blt	r19,zero,2364 <___vfprintf_internal_r+0x12e4>
    232c:	d9014117 	ldw	r4,1284(sp)
    2330:	000b883a 	mov	r5,zero
    2334:	980d883a 	mov	r6,r19
    2338:	00063680 	call	6368 <memchr>
    233c:	10025926 	beq	r2,zero,2ca4 <___vfprintf_internal_r+0x1c24>
    2340:	d8c14117 	ldw	r3,1284(sp)
    2344:	10cfc83a 	sub	r7,r2,r3
    2348:	99c19e16 	blt	r19,r7,29c4 <___vfprintf_internal_r+0x1944>
    234c:	d9c14515 	stw	r7,1300(sp)
    2350:	38000916 	blt	r7,zero,2378 <___vfprintf_internal_r+0x12f8>
    2354:	d8014615 	stw	zero,1304(sp)
    2358:	003deb06 	br	1b08 <___vfprintf_internal_r+0xa88>
    235c:	b8c00007 	ldb	r3,0(r23)
    2360:	003bc606 	br	127c <___vfprintf_internal_r+0x1fc>
    2364:	d9014117 	ldw	r4,1284(sp)
    2368:	0000fb40 	call	fb4 <strlen>
    236c:	d8814515 	stw	r2,1300(sp)
    2370:	100f883a 	mov	r7,r2
    2374:	103ff70e 	bge	r2,zero,2354 <___vfprintf_internal_r+0x12d4>
    2378:	d8014515 	stw	zero,1300(sp)
    237c:	d8014615 	stw	zero,1304(sp)
    2380:	003de106 	br	1b08 <___vfprintf_internal_r+0xa88>
    2384:	20c03fcc 	andi	r3,r4,255
    2388:	00800044 	movi	r2,1
    238c:	18802d26 	beq	r3,r2,2444 <___vfprintf_internal_r+0x13c4>
    2390:	18800e36 	bltu	r3,r2,23cc <___vfprintf_internal_r+0x134c>
    2394:	00800084 	movi	r2,2
    2398:	1880fa26 	beq	r3,r2,2784 <___vfprintf_internal_r+0x1704>
    239c:	01000074 	movhi	r4,1
    23a0:	21368a04 	addi	r4,r4,-9688
    23a4:	0000fb40 	call	fb4 <strlen>
    23a8:	100f883a 	mov	r7,r2
    23ac:	dcc14515 	stw	r19,1300(sp)
    23b0:	9880010e 	bge	r19,r2,23b8 <___vfprintf_internal_r+0x1338>
    23b4:	d8814515 	stw	r2,1300(sp)
    23b8:	00800074 	movhi	r2,1
    23bc:	10b68a04 	addi	r2,r2,-9688
    23c0:	dcc14615 	stw	r19,1304(sp)
    23c4:	d8814115 	stw	r2,1284(sp)
    23c8:	003dcf06 	br	1b08 <___vfprintf_internal_r+0xa88>
    23cc:	d9401904 	addi	r5,sp,100
    23d0:	dd000f04 	addi	r20,sp,60
    23d4:	d9414115 	stw	r5,1284(sp)
    23d8:	880a977a 	slli	r5,r17,29
    23dc:	d9814117 	ldw	r6,1284(sp)
    23e0:	8004d0fa 	srli	r2,r16,3
    23e4:	8806d0fa 	srli	r3,r17,3
    23e8:	810001cc 	andi	r4,r16,7
    23ec:	2884b03a 	or	r2,r5,r2
    23f0:	31bfffc4 	addi	r6,r6,-1
    23f4:	21000c04 	addi	r4,r4,48
    23f8:	d9814115 	stw	r6,1284(sp)
    23fc:	10cab03a 	or	r5,r2,r3
    2400:	31000005 	stb	r4,0(r6)
    2404:	1021883a 	mov	r16,r2
    2408:	1823883a 	mov	r17,r3
    240c:	283ff21e 	bne	r5,zero,23d8 <___vfprintf_internal_r+0x1358>
    2410:	d8c14c17 	ldw	r3,1328(sp)
    2414:	1880004c 	andi	r2,r3,1
    2418:	1005003a 	cmpeq	r2,r2,zero
    241c:	103db31e 	bne	r2,zero,1aec <___vfprintf_internal_r+0xa6c>
    2420:	20803fcc 	andi	r2,r4,255
    2424:	1080201c 	xori	r2,r2,128
    2428:	10bfe004 	addi	r2,r2,-128
    242c:	00c00c04 	movi	r3,48
    2430:	10fdae26 	beq	r2,r3,1aec <___vfprintf_internal_r+0xa6c>
    2434:	31bfffc4 	addi	r6,r6,-1
    2438:	d9814115 	stw	r6,1284(sp)
    243c:	30c00005 	stb	r3,0(r6)
    2440:	003daa06 	br	1aec <___vfprintf_internal_r+0xa6c>
    2444:	88800068 	cmpgeui	r2,r17,1
    2448:	10002c1e 	bne	r2,zero,24fc <___vfprintf_internal_r+0x147c>
    244c:	8800021e 	bne	r17,zero,2458 <___vfprintf_internal_r+0x13d8>
    2450:	00800244 	movi	r2,9
    2454:	14002936 	bltu	r2,r16,24fc <___vfprintf_internal_r+0x147c>
    2458:	d90018c4 	addi	r4,sp,99
    245c:	dd000f04 	addi	r20,sp,60
    2460:	d9014115 	stw	r4,1284(sp)
    2464:	d9014117 	ldw	r4,1284(sp)
    2468:	80800c04 	addi	r2,r16,48
    246c:	20800005 	stb	r2,0(r4)
    2470:	003d9e06 	br	1aec <___vfprintf_internal_r+0xa6c>
    2474:	dc400d17 	ldw	r17,52(sp)
    2478:	07000074 	movhi	fp,1
    247c:	e7369184 	addi	fp,fp,-9658
    2480:	9425883a 	add	r18,r18,r16
    2484:	8c400044 	addi	r17,r17,1
    2488:	008001c4 	movi	r2,7
    248c:	1f000015 	stw	fp,0(r3)
    2490:	1c000115 	stw	r16,4(r3)
    2494:	dc800e15 	stw	r18,56(sp)
    2498:	dc400d15 	stw	r17,52(sp)
    249c:	147ddc16 	blt	r2,r17,1c10 <___vfprintf_internal_r+0xb90>
    24a0:	18c00204 	addi	r3,r3,8
    24a4:	003c7406 	br	1678 <___vfprintf_internal_r+0x5f8>
    24a8:	01000084 	movi	r4,2
    24ac:	d8000405 	stb	zero,16(sp)
    24b0:	003d8106 	br	1ab8 <___vfprintf_internal_r+0xa38>
    24b4:	d9814c17 	ldw	r6,1328(sp)
    24b8:	30c4703a 	and	r2,r6,r3
    24bc:	1005003a 	cmpeq	r2,r2,zero
    24c0:	103cb326 	beq	r2,zero,1790 <___vfprintf_internal_r+0x710>
    24c4:	d9014117 	ldw	r4,1284(sp)
    24c8:	94800044 	addi	r18,r18,1
    24cc:	8c400044 	addi	r17,r17,1
    24d0:	008001c4 	movi	r2,7
    24d4:	a9000015 	stw	r4,0(r21)
    24d8:	a8c00115 	stw	r3,4(r21)
    24dc:	dc800e15 	stw	r18,56(sp)
    24e0:	dc400d15 	stw	r17,52(sp)
    24e4:	147e6016 	blt	r2,r17,1e68 <___vfprintf_internal_r+0xde8>
    24e8:	acc00204 	addi	r19,r21,8
    24ec:	003cd106 	br	1834 <___vfprintf_internal_r+0x7b4>
    24f0:	07000074 	movhi	fp,1
    24f4:	e7369184 	addi	fp,fp,-9658
    24f8:	003c4906 	br	1620 <___vfprintf_internal_r+0x5a0>
    24fc:	dd000f04 	addi	r20,sp,60
    2500:	dc801904 	addi	r18,sp,100
    2504:	8009883a 	mov	r4,r16
    2508:	880b883a 	mov	r5,r17
    250c:	01800284 	movi	r6,10
    2510:	000f883a 	mov	r7,zero
    2514:	0008ae00 	call	8ae0 <__umoddi3>
    2518:	12000c04 	addi	r8,r2,48
    251c:	94bfffc4 	addi	r18,r18,-1
    2520:	8009883a 	mov	r4,r16
    2524:	880b883a 	mov	r5,r17
    2528:	01800284 	movi	r6,10
    252c:	000f883a 	mov	r7,zero
    2530:	92000005 	stb	r8,0(r18)
    2534:	00084740 	call	8474 <__udivdi3>
    2538:	1009883a 	mov	r4,r2
    253c:	1021883a 	mov	r16,r2
    2540:	18800068 	cmpgeui	r2,r3,1
    2544:	1823883a 	mov	r17,r3
    2548:	103fee1e 	bne	r2,zero,2504 <___vfprintf_internal_r+0x1484>
    254c:	1800021e 	bne	r3,zero,2558 <___vfprintf_internal_r+0x14d8>
    2550:	00800244 	movi	r2,9
    2554:	113feb36 	bltu	r2,r4,2504 <___vfprintf_internal_r+0x1484>
    2558:	94bfffc4 	addi	r18,r18,-1
    255c:	dc814115 	stw	r18,1284(sp)
    2560:	003fc006 	br	2464 <___vfprintf_internal_r+0x13e4>
    2564:	d9014c17 	ldw	r4,1328(sp)
    2568:	2080004c 	andi	r2,r4,1
    256c:	10009a1e 	bne	r2,zero,27d8 <___vfprintf_internal_r+0x1758>
    2570:	d9401904 	addi	r5,sp,100
    2574:	dd000f04 	addi	r20,sp,60
    2578:	d9414115 	stw	r5,1284(sp)
    257c:	003d5b06 	br	1aec <___vfprintf_internal_r+0xa6c>
    2580:	d9014f17 	ldw	r4,1340(sp)
    2584:	b00b883a 	mov	r5,r22
    2588:	d9800c04 	addi	r6,sp,48
    258c:	00010280 	call	1028 <__sprint_r>
    2590:	103c731e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    2594:	dc800e17 	ldw	r18,56(sp)
    2598:	d8c01904 	addi	r3,sp,100
    259c:	003cf906 	br	1984 <___vfprintf_internal_r+0x904>
    25a0:	d8c14c17 	ldw	r3,1328(sp)
    25a4:	1880040c 	andi	r2,r3,16
    25a8:	1000711e 	bne	r2,zero,2770 <___vfprintf_internal_r+0x16f0>
    25ac:	d9014c17 	ldw	r4,1328(sp)
    25b0:	2080100c 	andi	r2,r4,64
    25b4:	10006e26 	beq	r2,zero,2770 <___vfprintf_internal_r+0x16f0>
    25b8:	3c00000b 	ldhu	r16,0(r7)
    25bc:	0023883a 	mov	r17,zero
    25c0:	39c00104 	addi	r7,r7,4
    25c4:	d9c14015 	stw	r7,1280(sp)
    25c8:	003efa06 	br	21b4 <___vfprintf_internal_r+0x1134>
    25cc:	dc400d17 	ldw	r17,52(sp)
    25d0:	07000074 	movhi	fp,1
    25d4:	e7369184 	addi	fp,fp,-9658
    25d8:	9425883a 	add	r18,r18,r16
    25dc:	8c400044 	addi	r17,r17,1
    25e0:	008001c4 	movi	r2,7
    25e4:	1f000015 	stw	fp,0(r3)
    25e8:	1c000115 	stw	r16,4(r3)
    25ec:	dc800e15 	stw	r18,56(sp)
    25f0:	dc400d15 	stw	r17,52(sp)
    25f4:	147d7016 	blt	r2,r17,1bb8 <___vfprintf_internal_r+0xb38>
    25f8:	18c00204 	addi	r3,r3,8
    25fc:	003d7506 	br	1bd4 <___vfprintf_internal_r+0xb54>
    2600:	dc800e17 	ldw	r18,56(sp)
    2604:	dc400d17 	ldw	r17,52(sp)
    2608:	07000074 	movhi	fp,1
    260c:	e7369584 	addi	fp,fp,-9642
    2610:	003bba06 	br	14fc <___vfprintf_internal_r+0x47c>
    2614:	d9014f17 	ldw	r4,1340(sp)
    2618:	b00b883a 	mov	r5,r22
    261c:	d9800c04 	addi	r6,sp,48
    2620:	00010280 	call	1028 <__sprint_r>
    2624:	103c4e1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    2628:	dc800e17 	ldw	r18,56(sp)
    262c:	d8c01904 	addi	r3,sp,100
    2630:	003ce306 	br	19c0 <___vfprintf_internal_r+0x940>
    2634:	3c000017 	ldw	r16,0(r7)
    2638:	0009883a 	mov	r4,zero
    263c:	39c00104 	addi	r7,r7,4
    2640:	0023883a 	mov	r17,zero
    2644:	d9c14015 	stw	r7,1280(sp)
    2648:	d8000405 	stb	zero,16(sp)
    264c:	003d1a06 	br	1ab8 <___vfprintf_internal_r+0xa38>
    2650:	38800017 	ldw	r2,0(r7)
    2654:	39c00104 	addi	r7,r7,4
    2658:	d9c14015 	stw	r7,1280(sp)
    265c:	1023d7fa 	srai	r17,r2,31
    2660:	1021883a 	mov	r16,r2
    2664:	003d1206 	br	1ab0 <___vfprintf_internal_r+0xa30>
    2668:	3c000017 	ldw	r16,0(r7)
    266c:	01000044 	movi	r4,1
    2670:	39c00104 	addi	r7,r7,4
    2674:	0023883a 	mov	r17,zero
    2678:	d9c14015 	stw	r7,1280(sp)
    267c:	d8000405 	stb	zero,16(sp)
    2680:	003d0d06 	br	1ab8 <___vfprintf_internal_r+0xa38>
    2684:	00800074 	movhi	r2,1
    2688:	10b69104 	addi	r2,r2,-9660
    268c:	94800044 	addi	r18,r18,1
    2690:	8c400044 	addi	r17,r17,1
    2694:	a8800015 	stw	r2,0(r21)
    2698:	00c00044 	movi	r3,1
    269c:	008001c4 	movi	r2,7
    26a0:	a8c00115 	stw	r3,4(r21)
    26a4:	dc800e15 	stw	r18,56(sp)
    26a8:	dc400d15 	stw	r17,52(sp)
    26ac:	1440ca16 	blt	r2,r17,29d8 <___vfprintf_internal_r+0x1958>
    26b0:	a8c00204 	addi	r3,r21,8
    26b4:	2000061e 	bne	r4,zero,26d0 <___vfprintf_internal_r+0x1650>
    26b8:	d9414717 	ldw	r5,1308(sp)
    26bc:	2800041e 	bne	r5,zero,26d0 <___vfprintf_internal_r+0x1650>
    26c0:	d9814c17 	ldw	r6,1328(sp)
    26c4:	3080004c 	andi	r2,r6,1
    26c8:	1005003a 	cmpeq	r2,r2,zero
    26cc:	103bea1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x5f8>
    26d0:	00800044 	movi	r2,1
    26d4:	dc400d17 	ldw	r17,52(sp)
    26d8:	18800115 	stw	r2,4(r3)
    26dc:	d8814917 	ldw	r2,1316(sp)
    26e0:	94800044 	addi	r18,r18,1
    26e4:	8c400044 	addi	r17,r17,1
    26e8:	18800015 	stw	r2,0(r3)
    26ec:	008001c4 	movi	r2,7
    26f0:	dc800e15 	stw	r18,56(sp)
    26f4:	dc400d15 	stw	r17,52(sp)
    26f8:	1440ca16 	blt	r2,r17,2a24 <___vfprintf_internal_r+0x19a4>
    26fc:	18c00204 	addi	r3,r3,8
    2700:	0121c83a 	sub	r16,zero,r4
    2704:	0400500e 	bge	zero,r16,2848 <___vfprintf_internal_r+0x17c8>
    2708:	00800404 	movi	r2,16
    270c:	1400800e 	bge	r2,r16,2910 <___vfprintf_internal_r+0x1890>
    2710:	1027883a 	mov	r19,r2
    2714:	07000074 	movhi	fp,1
    2718:	e7369184 	addi	fp,fp,-9658
    271c:	050001c4 	movi	r20,7
    2720:	00000306 	br	2730 <___vfprintf_internal_r+0x16b0>
    2724:	18c00204 	addi	r3,r3,8
    2728:	843ffc04 	addi	r16,r16,-16
    272c:	9c007a0e 	bge	r19,r16,2918 <___vfprintf_internal_r+0x1898>
    2730:	94800404 	addi	r18,r18,16
    2734:	8c400044 	addi	r17,r17,1
    2738:	1f000015 	stw	fp,0(r3)
    273c:	1cc00115 	stw	r19,4(r3)
    2740:	dc800e15 	stw	r18,56(sp)
    2744:	dc400d15 	stw	r17,52(sp)
    2748:	a47ff60e 	bge	r20,r17,2724 <___vfprintf_internal_r+0x16a4>
    274c:	d9014f17 	ldw	r4,1340(sp)
    2750:	b00b883a 	mov	r5,r22
    2754:	d9800c04 	addi	r6,sp,48
    2758:	00010280 	call	1028 <__sprint_r>
    275c:	103c001e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    2760:	dc800e17 	ldw	r18,56(sp)
    2764:	dc400d17 	ldw	r17,52(sp)
    2768:	d8c01904 	addi	r3,sp,100
    276c:	003fee06 	br	2728 <___vfprintf_internal_r+0x16a8>
    2770:	3c000017 	ldw	r16,0(r7)
    2774:	0023883a 	mov	r17,zero
    2778:	39c00104 	addi	r7,r7,4
    277c:	d9c14015 	stw	r7,1280(sp)
    2780:	003e8c06 	br	21b4 <___vfprintf_internal_r+0x1134>
    2784:	d9401904 	addi	r5,sp,100
    2788:	dd000f04 	addi	r20,sp,60
    278c:	d9414115 	stw	r5,1284(sp)
    2790:	d9814417 	ldw	r6,1296(sp)
    2794:	880a973a 	slli	r5,r17,28
    2798:	8004d13a 	srli	r2,r16,4
    279c:	810003cc 	andi	r4,r16,15
    27a0:	3109883a 	add	r4,r6,r4
    27a4:	2884b03a 	or	r2,r5,r2
    27a8:	21400003 	ldbu	r5,0(r4)
    27ac:	d9014117 	ldw	r4,1284(sp)
    27b0:	8806d13a 	srli	r3,r17,4
    27b4:	1021883a 	mov	r16,r2
    27b8:	213fffc4 	addi	r4,r4,-1
    27bc:	d9014115 	stw	r4,1284(sp)
    27c0:	d9814117 	ldw	r6,1284(sp)
    27c4:	10c8b03a 	or	r4,r2,r3
    27c8:	1823883a 	mov	r17,r3
    27cc:	31400005 	stb	r5,0(r6)
    27d0:	203fef1e 	bne	r4,zero,2790 <___vfprintf_internal_r+0x1710>
    27d4:	003cc506 	br	1aec <___vfprintf_internal_r+0xa6c>
    27d8:	00800c04 	movi	r2,48
    27dc:	d98018c4 	addi	r6,sp,99
    27e0:	dd000f04 	addi	r20,sp,60
    27e4:	d88018c5 	stb	r2,99(sp)
    27e8:	d9814115 	stw	r6,1284(sp)
    27ec:	003cbf06 	br	1aec <___vfprintf_internal_r+0xa6c>
    27f0:	dc400d17 	ldw	r17,52(sp)
    27f4:	07000074 	movhi	fp,1
    27f8:	e7369584 	addi	fp,fp,-9642
    27fc:	003bc106 	br	1704 <___vfprintf_internal_r+0x684>
    2800:	d9414c17 	ldw	r5,1328(sp)
    2804:	2880040c 	andi	r2,r5,16
    2808:	10007c26 	beq	r2,zero,29fc <___vfprintf_internal_r+0x197c>
    280c:	38800017 	ldw	r2,0(r7)
    2810:	39c00104 	addi	r7,r7,4
    2814:	d9c14015 	stw	r7,1280(sp)
    2818:	d9814b17 	ldw	r6,1324(sp)
    281c:	d9c14017 	ldw	r7,1280(sp)
    2820:	11800015 	stw	r6,0(r2)
    2824:	003a7206 	br	11f0 <___vfprintf_internal_r+0x170>
    2828:	d9014f17 	ldw	r4,1340(sp)
    282c:	b00b883a 	mov	r5,r22
    2830:	d9800c04 	addi	r6,sp,48
    2834:	00010280 	call	1028 <__sprint_r>
    2838:	103bc91e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    283c:	dc800e17 	ldw	r18,56(sp)
    2840:	dc400d17 	ldw	r17,52(sp)
    2844:	d8c01904 	addi	r3,sp,100
    2848:	d9014717 	ldw	r4,1308(sp)
    284c:	d9414117 	ldw	r5,1284(sp)
    2850:	8c400044 	addi	r17,r17,1
    2854:	9125883a 	add	r18,r18,r4
    2858:	008001c4 	movi	r2,7
    285c:	19400015 	stw	r5,0(r3)
    2860:	19000115 	stw	r4,4(r3)
    2864:	dc800e15 	stw	r18,56(sp)
    2868:	dc400d15 	stw	r17,52(sp)
    286c:	147ce816 	blt	r2,r17,1c10 <___vfprintf_internal_r+0xb90>
    2870:	18c00204 	addi	r3,r3,8
    2874:	003b8006 	br	1678 <___vfprintf_internal_r+0x5f8>
    2878:	38c00017 	ldw	r3,0(r7)
    287c:	39000204 	addi	r4,r7,8
    2880:	d9014015 	stw	r4,1280(sp)
    2884:	d8c14215 	stw	r3,1288(sp)
    2888:	39c00117 	ldw	r7,4(r7)
    288c:	d9c14315 	stw	r7,1292(sp)
    2890:	003e1a06 	br	20fc <___vfprintf_internal_r+0x107c>
    2894:	0005883a 	mov	r2,zero
    2898:	1409c83a 	sub	r4,r2,r16
    289c:	1105803a 	cmpltu	r2,r2,r4
    28a0:	044bc83a 	sub	r5,zero,r17
    28a4:	2885c83a 	sub	r2,r5,r2
    28a8:	2021883a 	mov	r16,r4
    28ac:	1023883a 	mov	r17,r2
    28b0:	01000044 	movi	r4,1
    28b4:	00800b44 	movi	r2,45
    28b8:	d8800405 	stb	r2,16(sp)
    28bc:	003c7e06 	br	1ab8 <___vfprintf_internal_r+0xa38>
    28c0:	d9014f17 	ldw	r4,1340(sp)
    28c4:	b00b883a 	mov	r5,r22
    28c8:	d9800c04 	addi	r6,sp,48
    28cc:	00010280 	call	1028 <__sprint_r>
    28d0:	103ba31e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    28d4:	dc800e17 	ldw	r18,56(sp)
    28d8:	dc400d17 	ldw	r17,52(sp)
    28dc:	d9000517 	ldw	r4,20(sp)
    28e0:	d9401904 	addi	r5,sp,100
    28e4:	003da106 	br	1f6c <___vfprintf_internal_r+0xeec>
    28e8:	d9014f17 	ldw	r4,1340(sp)
    28ec:	b00b883a 	mov	r5,r22
    28f0:	d9800c04 	addi	r6,sp,48
    28f4:	00010280 	call	1028 <__sprint_r>
    28f8:	103b991e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    28fc:	dc800e17 	ldw	r18,56(sp)
    2900:	dc400d17 	ldw	r17,52(sp)
    2904:	d9000517 	ldw	r4,20(sp)
    2908:	d8c01904 	addi	r3,sp,100
    290c:	003d8b06 	br	1f3c <___vfprintf_internal_r+0xebc>
    2910:	07000074 	movhi	fp,1
    2914:	e7369184 	addi	fp,fp,-9658
    2918:	9425883a 	add	r18,r18,r16
    291c:	8c400044 	addi	r17,r17,1
    2920:	008001c4 	movi	r2,7
    2924:	1f000015 	stw	fp,0(r3)
    2928:	1c000115 	stw	r16,4(r3)
    292c:	dc800e15 	stw	r18,56(sp)
    2930:	dc400d15 	stw	r17,52(sp)
    2934:	147fbc16 	blt	r2,r17,2828 <___vfprintf_internal_r+0x17a8>
    2938:	18c00204 	addi	r3,r3,8
    293c:	003fc206 	br	2848 <___vfprintf_internal_r+0x17c8>
    2940:	d9014f17 	ldw	r4,1340(sp)
    2944:	b00b883a 	mov	r5,r22
    2948:	d9800c04 	addi	r6,sp,48
    294c:	00010280 	call	1028 <__sprint_r>
    2950:	103b831e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    2954:	dc800e17 	ldw	r18,56(sp)
    2958:	d9000517 	ldw	r4,20(sp)
    295c:	d8c01904 	addi	r3,sp,100
    2960:	003cfc06 	br	1d54 <___vfprintf_internal_r+0xcd4>
    2964:	07000074 	movhi	fp,1
    2968:	e7369184 	addi	fp,fp,-9658
    296c:	003bde06 	br	18e8 <___vfprintf_internal_r+0x868>
    2970:	00800074 	movhi	r2,1
    2974:	10b68004 	addi	r2,r2,-9728
    2978:	d8814115 	stw	r2,1284(sp)
    297c:	003def06 	br	213c <___vfprintf_internal_r+0x10bc>
    2980:	d9014217 	ldw	r4,1288(sp)
    2984:	d9414317 	ldw	r5,1292(sp)
    2988:	0007d240 	call	7d24 <__isnand>
    298c:	10003926 	beq	r2,zero,2a74 <___vfprintf_internal_r+0x19f4>
    2990:	d9414d17 	ldw	r5,1332(sp)
    2994:	008011c4 	movi	r2,71
    2998:	1140ce16 	blt	r2,r5,2cd4 <___vfprintf_internal_r+0x1c54>
    299c:	01800074 	movhi	r6,1
    29a0:	31b68104 	addi	r6,r6,-9724
    29a4:	d9814115 	stw	r6,1284(sp)
    29a8:	003de406 	br	213c <___vfprintf_internal_r+0x10bc>
    29ac:	d9014c17 	ldw	r4,1328(sp)
    29b0:	bdc00044 	addi	r23,r23,1
    29b4:	b8c00007 	ldb	r3,0(r23)
    29b8:	21000814 	ori	r4,r4,32
    29bc:	d9014c15 	stw	r4,1328(sp)
    29c0:	003a2e06 	br	127c <___vfprintf_internal_r+0x1fc>
    29c4:	dcc14515 	stw	r19,1300(sp)
    29c8:	98011016 	blt	r19,zero,2e0c <___vfprintf_internal_r+0x1d8c>
    29cc:	980f883a 	mov	r7,r19
    29d0:	d8014615 	stw	zero,1304(sp)
    29d4:	003c4c06 	br	1b08 <___vfprintf_internal_r+0xa88>
    29d8:	d9014f17 	ldw	r4,1340(sp)
    29dc:	b00b883a 	mov	r5,r22
    29e0:	d9800c04 	addi	r6,sp,48
    29e4:	00010280 	call	1028 <__sprint_r>
    29e8:	103b5d1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    29ec:	dc800e17 	ldw	r18,56(sp)
    29f0:	d9000517 	ldw	r4,20(sp)
    29f4:	d8c01904 	addi	r3,sp,100
    29f8:	003f2e06 	br	26b4 <___vfprintf_internal_r+0x1634>
    29fc:	d8c14c17 	ldw	r3,1328(sp)
    2a00:	1880100c 	andi	r2,r3,64
    2a04:	1000a026 	beq	r2,zero,2c88 <___vfprintf_internal_r+0x1c08>
    2a08:	38800017 	ldw	r2,0(r7)
    2a0c:	39c00104 	addi	r7,r7,4
    2a10:	d9c14015 	stw	r7,1280(sp)
    2a14:	d9014b17 	ldw	r4,1324(sp)
    2a18:	d9c14017 	ldw	r7,1280(sp)
    2a1c:	1100000d 	sth	r4,0(r2)
    2a20:	0039f306 	br	11f0 <___vfprintf_internal_r+0x170>
    2a24:	d9014f17 	ldw	r4,1340(sp)
    2a28:	b00b883a 	mov	r5,r22
    2a2c:	d9800c04 	addi	r6,sp,48
    2a30:	00010280 	call	1028 <__sprint_r>
    2a34:	103b4a1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    2a38:	dc800e17 	ldw	r18,56(sp)
    2a3c:	dc400d17 	ldw	r17,52(sp)
    2a40:	d9000517 	ldw	r4,20(sp)
    2a44:	d8c01904 	addi	r3,sp,100
    2a48:	003f2d06 	br	2700 <___vfprintf_internal_r+0x1680>
    2a4c:	00800184 	movi	r2,6
    2a50:	14c09a36 	bltu	r2,r19,2cbc <___vfprintf_internal_r+0x1c3c>
    2a54:	dcc14515 	stw	r19,1300(sp)
    2a58:	9800010e 	bge	r19,zero,2a60 <___vfprintf_internal_r+0x19e0>
    2a5c:	d8014515 	stw	zero,1300(sp)
    2a60:	00800074 	movhi	r2,1
    2a64:	10b68304 	addi	r2,r2,-9716
    2a68:	980f883a 	mov	r7,r19
    2a6c:	d8814115 	stw	r2,1284(sp)
    2a70:	003a7206 	br	143c <___vfprintf_internal_r+0x3bc>
    2a74:	00bfffc4 	movi	r2,-1
    2a78:	9880e226 	beq	r19,r2,2e04 <___vfprintf_internal_r+0x1d84>
    2a7c:	d9414d17 	ldw	r5,1332(sp)
    2a80:	008019c4 	movi	r2,103
    2a84:	2880dc26 	beq	r5,r2,2df8 <___vfprintf_internal_r+0x1d78>
    2a88:	008011c4 	movi	r2,71
    2a8c:	2880da26 	beq	r5,r2,2df8 <___vfprintf_internal_r+0x1d78>
    2a90:	d9414c17 	ldw	r5,1328(sp)
    2a94:	d9014317 	ldw	r4,1292(sp)
    2a98:	d9814217 	ldw	r6,1288(sp)
    2a9c:	29404014 	ori	r5,r5,256
    2aa0:	d9414c15 	stw	r5,1328(sp)
    2aa4:	2000cc16 	blt	r4,zero,2dd8 <___vfprintf_internal_r+0x1d58>
    2aa8:	3021883a 	mov	r16,r6
    2aac:	2023883a 	mov	r17,r4
    2ab0:	0039883a 	mov	fp,zero
    2ab4:	d9414d17 	ldw	r5,1332(sp)
    2ab8:	00801984 	movi	r2,102
    2abc:	2880b726 	beq	r5,r2,2d9c <___vfprintf_internal_r+0x1d1c>
    2ac0:	00801184 	movi	r2,70
    2ac4:	2880b526 	beq	r5,r2,2d9c <___vfprintf_internal_r+0x1d1c>
    2ac8:	00801944 	movi	r2,101
    2acc:	2880c826 	beq	r5,r2,2df0 <___vfprintf_internal_r+0x1d70>
    2ad0:	00801144 	movi	r2,69
    2ad4:	2880c626 	beq	r5,r2,2df0 <___vfprintf_internal_r+0x1d70>
    2ad8:	9829883a 	mov	r20,r19
    2adc:	d9014f17 	ldw	r4,1340(sp)
    2ae0:	d8800504 	addi	r2,sp,20
    2ae4:	880d883a 	mov	r6,r17
    2ae8:	d8800115 	stw	r2,4(sp)
    2aec:	d8c00604 	addi	r3,sp,24
    2af0:	d8800704 	addi	r2,sp,28
    2af4:	800b883a 	mov	r5,r16
    2af8:	01c00084 	movi	r7,2
    2afc:	d8c00215 	stw	r3,8(sp)
    2b00:	d8800315 	stw	r2,12(sp)
    2b04:	dd000015 	stw	r20,0(sp)
    2b08:	000349c0 	call	349c <_dtoa_r>
    2b0c:	d9814d17 	ldw	r6,1332(sp)
    2b10:	d8814115 	stw	r2,1284(sp)
    2b14:	008019c4 	movi	r2,103
    2b18:	30809526 	beq	r6,r2,2d70 <___vfprintf_internal_r+0x1cf0>
    2b1c:	d8c14d17 	ldw	r3,1332(sp)
    2b20:	008011c4 	movi	r2,71
    2b24:	18809226 	beq	r3,r2,2d70 <___vfprintf_internal_r+0x1cf0>
    2b28:	d9414117 	ldw	r5,1284(sp)
    2b2c:	d9814d17 	ldw	r6,1332(sp)
    2b30:	00801984 	movi	r2,102
    2b34:	2d25883a 	add	r18,r5,r20
    2b38:	30808626 	beq	r6,r2,2d54 <___vfprintf_internal_r+0x1cd4>
    2b3c:	00801184 	movi	r2,70
    2b40:	30808426 	beq	r6,r2,2d54 <___vfprintf_internal_r+0x1cd4>
    2b44:	000d883a 	mov	r6,zero
    2b48:	000f883a 	mov	r7,zero
    2b4c:	880b883a 	mov	r5,r17
    2b50:	8009883a 	mov	r4,r16
    2b54:	0009c600 	call	9c60 <__eqdf2>
    2b58:	1000751e 	bne	r2,zero,2d30 <___vfprintf_internal_r+0x1cb0>
    2b5c:	9005883a 	mov	r2,r18
    2b60:	dc800715 	stw	r18,28(sp)
    2b64:	d9014117 	ldw	r4,1284(sp)
    2b68:	d9414d17 	ldw	r5,1332(sp)
    2b6c:	00c019c4 	movi	r3,103
    2b70:	1125c83a 	sub	r18,r2,r4
    2b74:	28c06826 	beq	r5,r3,2d18 <___vfprintf_internal_r+0x1c98>
    2b78:	008011c4 	movi	r2,71
    2b7c:	28806626 	beq	r5,r2,2d18 <___vfprintf_internal_r+0x1c98>
    2b80:	d9000517 	ldw	r4,20(sp)
    2b84:	d8c14d17 	ldw	r3,1332(sp)
    2b88:	00801944 	movi	r2,101
    2b8c:	10c05516 	blt	r2,r3,2ce4 <___vfprintf_internal_r+0x1c64>
    2b90:	213fffc4 	addi	r4,r4,-1
    2b94:	d9000515 	stw	r4,20(sp)
    2b98:	d8c00805 	stb	r3,32(sp)
    2b9c:	2021883a 	mov	r16,r4
    2ba0:	2000c116 	blt	r4,zero,2ea8 <___vfprintf_internal_r+0x1e28>
    2ba4:	00800ac4 	movi	r2,43
    2ba8:	d8800845 	stb	r2,33(sp)
    2bac:	00800244 	movi	r2,9
    2bb0:	1400af0e 	bge	r2,r16,2e70 <___vfprintf_internal_r+0x1df0>
    2bb4:	1027883a 	mov	r19,r2
    2bb8:	dc400b84 	addi	r17,sp,46
    2bbc:	8009883a 	mov	r4,r16
    2bc0:	01400284 	movi	r5,10
    2bc4:	0000da80 	call	da8 <__modsi3>
    2bc8:	10800c04 	addi	r2,r2,48
    2bcc:	8c7fffc4 	addi	r17,r17,-1
    2bd0:	8009883a 	mov	r4,r16
    2bd4:	01400284 	movi	r5,10
    2bd8:	88800005 	stb	r2,0(r17)
    2bdc:	0000d480 	call	d48 <__divsi3>
    2be0:	1021883a 	mov	r16,r2
    2be4:	98bff516 	blt	r19,r2,2bbc <___vfprintf_internal_r+0x1b3c>
    2be8:	10c00c04 	addi	r3,r2,48
    2bec:	d88009c4 	addi	r2,sp,39
    2bf0:	108001c4 	addi	r2,r2,7
    2bf4:	897fffc4 	addi	r5,r17,-1
    2bf8:	88ffffc5 	stb	r3,-1(r17)
    2bfc:	2880a72e 	bgeu	r5,r2,2e9c <___vfprintf_internal_r+0x1e1c>
    2c00:	1009883a 	mov	r4,r2
    2c04:	d9800804 	addi	r6,sp,32
    2c08:	d8c00884 	addi	r3,sp,34
    2c0c:	28800003 	ldbu	r2,0(r5)
    2c10:	29400044 	addi	r5,r5,1
    2c14:	18800005 	stb	r2,0(r3)
    2c18:	18c00044 	addi	r3,r3,1
    2c1c:	293ffb36 	bltu	r5,r4,2c0c <___vfprintf_internal_r+0x1b8c>
    2c20:	1987c83a 	sub	r3,r3,r6
    2c24:	00800044 	movi	r2,1
    2c28:	d8c14815 	stw	r3,1312(sp)
    2c2c:	90cf883a 	add	r7,r18,r3
    2c30:	1480960e 	bge	r2,r18,2e8c <___vfprintf_internal_r+0x1e0c>
    2c34:	39c00044 	addi	r7,r7,1
    2c38:	d9c14515 	stw	r7,1300(sp)
    2c3c:	38003416 	blt	r7,zero,2d10 <___vfprintf_internal_r+0x1c90>
    2c40:	e0803fcc 	andi	r2,fp,255
    2c44:	1080201c 	xori	r2,r2,128
    2c48:	10bfe004 	addi	r2,r2,-128
    2c4c:	10004e26 	beq	r2,zero,2d88 <___vfprintf_internal_r+0x1d08>
    2c50:	00800b44 	movi	r2,45
    2c54:	dc814715 	stw	r18,1308(sp)
    2c58:	d8014615 	stw	zero,1304(sp)
    2c5c:	d8800405 	stb	r2,16(sp)
    2c60:	003bab06 	br	1b10 <___vfprintf_internal_r+0xa90>
    2c64:	00800b44 	movi	r2,45
    2c68:	d8800405 	stb	r2,16(sp)
    2c6c:	003d2d06 	br	2124 <___vfprintf_internal_r+0x10a4>
    2c70:	d9014f17 	ldw	r4,1340(sp)
    2c74:	b00b883a 	mov	r5,r22
    2c78:	d9800c04 	addi	r6,sp,48
    2c7c:	00010280 	call	1028 <__sprint_r>
    2c80:	103ab71e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x6e0>
    2c84:	003ab506 	br	175c <___vfprintf_internal_r+0x6dc>
    2c88:	38800017 	ldw	r2,0(r7)
    2c8c:	39c00104 	addi	r7,r7,4
    2c90:	d9c14015 	stw	r7,1280(sp)
    2c94:	d9414b17 	ldw	r5,1324(sp)
    2c98:	d9c14017 	ldw	r7,1280(sp)
    2c9c:	11400015 	stw	r5,0(r2)
    2ca0:	00395306 	br	11f0 <___vfprintf_internal_r+0x170>
    2ca4:	980f883a 	mov	r7,r19
    2ca8:	dcc14515 	stw	r19,1300(sp)
    2cac:	d8014615 	stw	zero,1304(sp)
    2cb0:	003b9506 	br	1b08 <___vfprintf_internal_r+0xa88>
    2cb4:	0027883a 	mov	r19,zero
    2cb8:	00397206 	br	1284 <___vfprintf_internal_r+0x204>
    2cbc:	00c00074 	movhi	r3,1
    2cc0:	18f68304 	addi	r3,r3,-9716
    2cc4:	100f883a 	mov	r7,r2
    2cc8:	d8814515 	stw	r2,1300(sp)
    2ccc:	d8c14115 	stw	r3,1284(sp)
    2cd0:	0039da06 	br	143c <___vfprintf_internal_r+0x3bc>
    2cd4:	00800074 	movhi	r2,1
    2cd8:	10b68204 	addi	r2,r2,-9720
    2cdc:	d8814115 	stw	r2,1284(sp)
    2ce0:	003d1606 	br	213c <___vfprintf_internal_r+0x10bc>
    2ce4:	d9414d17 	ldw	r5,1332(sp)
    2ce8:	00801984 	movi	r2,102
    2cec:	28804926 	beq	r5,r2,2e14 <___vfprintf_internal_r+0x1d94>
    2cf0:	200f883a 	mov	r7,r4
    2cf4:	24805716 	blt	r4,r18,2e54 <___vfprintf_internal_r+0x1dd4>
    2cf8:	d9414c17 	ldw	r5,1328(sp)
    2cfc:	2880004c 	andi	r2,r5,1
    2d00:	10000126 	beq	r2,zero,2d08 <___vfprintf_internal_r+0x1c88>
    2d04:	21c00044 	addi	r7,r4,1
    2d08:	d9c14515 	stw	r7,1300(sp)
    2d0c:	383fcc0e 	bge	r7,zero,2c40 <___vfprintf_internal_r+0x1bc0>
    2d10:	d8014515 	stw	zero,1300(sp)
    2d14:	003fca06 	br	2c40 <___vfprintf_internal_r+0x1bc0>
    2d18:	d9000517 	ldw	r4,20(sp)
    2d1c:	00bfff04 	movi	r2,-4
    2d20:	1100480e 	bge	r2,r4,2e44 <___vfprintf_internal_r+0x1dc4>
    2d24:	99004716 	blt	r19,r4,2e44 <___vfprintf_internal_r+0x1dc4>
    2d28:	d8c14d15 	stw	r3,1332(sp)
    2d2c:	003ff006 	br	2cf0 <___vfprintf_internal_r+0x1c70>
    2d30:	d8800717 	ldw	r2,28(sp)
    2d34:	14bf8b2e 	bgeu	r2,r18,2b64 <___vfprintf_internal_r+0x1ae4>
    2d38:	9007883a 	mov	r3,r18
    2d3c:	01000c04 	movi	r4,48
    2d40:	11000005 	stb	r4,0(r2)
    2d44:	10800044 	addi	r2,r2,1
    2d48:	d8800715 	stw	r2,28(sp)
    2d4c:	18bffc1e 	bne	r3,r2,2d40 <___vfprintf_internal_r+0x1cc0>
    2d50:	003f8406 	br	2b64 <___vfprintf_internal_r+0x1ae4>
    2d54:	d8814117 	ldw	r2,1284(sp)
    2d58:	10c00007 	ldb	r3,0(r2)
    2d5c:	00800c04 	movi	r2,48
    2d60:	18805b26 	beq	r3,r2,2ed0 <___vfprintf_internal_r+0x1e50>
    2d64:	d9000517 	ldw	r4,20(sp)
    2d68:	9125883a 	add	r18,r18,r4
    2d6c:	003f7506 	br	2b44 <___vfprintf_internal_r+0x1ac4>
    2d70:	d9014c17 	ldw	r4,1328(sp)
    2d74:	2080004c 	andi	r2,r4,1
    2d78:	1005003a 	cmpeq	r2,r2,zero
    2d7c:	103f6a26 	beq	r2,zero,2b28 <___vfprintf_internal_r+0x1aa8>
    2d80:	d8800717 	ldw	r2,28(sp)
    2d84:	003f7706 	br	2b64 <___vfprintf_internal_r+0x1ae4>
    2d88:	d9c14515 	stw	r7,1300(sp)
    2d8c:	38004d16 	blt	r7,zero,2ec4 <___vfprintf_internal_r+0x1e44>
    2d90:	dc814715 	stw	r18,1308(sp)
    2d94:	d8014615 	stw	zero,1304(sp)
    2d98:	003b5b06 	br	1b08 <___vfprintf_internal_r+0xa88>
    2d9c:	d9014f17 	ldw	r4,1340(sp)
    2da0:	d8800504 	addi	r2,sp,20
    2da4:	d8800115 	stw	r2,4(sp)
    2da8:	d8c00604 	addi	r3,sp,24
    2dac:	d8800704 	addi	r2,sp,28
    2db0:	800b883a 	mov	r5,r16
    2db4:	880d883a 	mov	r6,r17
    2db8:	01c000c4 	movi	r7,3
    2dbc:	d8c00215 	stw	r3,8(sp)
    2dc0:	d8800315 	stw	r2,12(sp)
    2dc4:	dcc00015 	stw	r19,0(sp)
    2dc8:	9829883a 	mov	r20,r19
    2dcc:	000349c0 	call	349c <_dtoa_r>
    2dd0:	d8814115 	stw	r2,1284(sp)
    2dd4:	003f5106 	br	2b1c <___vfprintf_internal_r+0x1a9c>
    2dd8:	d8c14217 	ldw	r3,1288(sp)
    2ddc:	d9014317 	ldw	r4,1292(sp)
    2de0:	07000b44 	movi	fp,45
    2de4:	1821883a 	mov	r16,r3
    2de8:	2460003c 	xorhi	r17,r4,32768
    2dec:	003f3106 	br	2ab4 <___vfprintf_internal_r+0x1a34>
    2df0:	9d000044 	addi	r20,r19,1
    2df4:	003f3906 	br	2adc <___vfprintf_internal_r+0x1a5c>
    2df8:	983f251e 	bne	r19,zero,2a90 <___vfprintf_internal_r+0x1a10>
    2dfc:	04c00044 	movi	r19,1
    2e00:	003f2306 	br	2a90 <___vfprintf_internal_r+0x1a10>
    2e04:	04c00184 	movi	r19,6
    2e08:	003f2106 	br	2a90 <___vfprintf_internal_r+0x1a10>
    2e0c:	d8014515 	stw	zero,1300(sp)
    2e10:	003eee06 	br	29cc <___vfprintf_internal_r+0x194c>
    2e14:	200f883a 	mov	r7,r4
    2e18:	0100370e 	bge	zero,r4,2ef8 <___vfprintf_internal_r+0x1e78>
    2e1c:	9800031e 	bne	r19,zero,2e2c <___vfprintf_internal_r+0x1dac>
    2e20:	d9814c17 	ldw	r6,1328(sp)
    2e24:	3080004c 	andi	r2,r6,1
    2e28:	103fb726 	beq	r2,zero,2d08 <___vfprintf_internal_r+0x1c88>
    2e2c:	20800044 	addi	r2,r4,1
    2e30:	98a7883a 	add	r19,r19,r2
    2e34:	dcc14515 	stw	r19,1300(sp)
    2e38:	980f883a 	mov	r7,r19
    2e3c:	983f800e 	bge	r19,zero,2c40 <___vfprintf_internal_r+0x1bc0>
    2e40:	003fb306 	br	2d10 <___vfprintf_internal_r+0x1c90>
    2e44:	d9814d17 	ldw	r6,1332(sp)
    2e48:	31bfff84 	addi	r6,r6,-2
    2e4c:	d9814d15 	stw	r6,1332(sp)
    2e50:	003f4c06 	br	2b84 <___vfprintf_internal_r+0x1b04>
    2e54:	0100180e 	bge	zero,r4,2eb8 <___vfprintf_internal_r+0x1e38>
    2e58:	00800044 	movi	r2,1
    2e5c:	1485883a 	add	r2,r2,r18
    2e60:	d8814515 	stw	r2,1300(sp)
    2e64:	100f883a 	mov	r7,r2
    2e68:	103f750e 	bge	r2,zero,2c40 <___vfprintf_internal_r+0x1bc0>
    2e6c:	003fa806 	br	2d10 <___vfprintf_internal_r+0x1c90>
    2e70:	80c00c04 	addi	r3,r16,48
    2e74:	00800c04 	movi	r2,48
    2e78:	d8c008c5 	stb	r3,35(sp)
    2e7c:	d9800804 	addi	r6,sp,32
    2e80:	d8c00904 	addi	r3,sp,36
    2e84:	d8800885 	stb	r2,34(sp)
    2e88:	003f6506 	br	2c20 <___vfprintf_internal_r+0x1ba0>
    2e8c:	d9014c17 	ldw	r4,1328(sp)
    2e90:	2084703a 	and	r2,r4,r2
    2e94:	103f9c26 	beq	r2,zero,2d08 <___vfprintf_internal_r+0x1c88>
    2e98:	003f6606 	br	2c34 <___vfprintf_internal_r+0x1bb4>
    2e9c:	d9800804 	addi	r6,sp,32
    2ea0:	d8c00884 	addi	r3,sp,34
    2ea4:	003f5e06 	br	2c20 <___vfprintf_internal_r+0x1ba0>
    2ea8:	00800b44 	movi	r2,45
    2eac:	0121c83a 	sub	r16,zero,r4
    2eb0:	d8800845 	stb	r2,33(sp)
    2eb4:	003f3d06 	br	2bac <___vfprintf_internal_r+0x1b2c>
    2eb8:	00800084 	movi	r2,2
    2ebc:	1105c83a 	sub	r2,r2,r4
    2ec0:	003fe606 	br	2e5c <___vfprintf_internal_r+0x1ddc>
    2ec4:	d8014515 	stw	zero,1300(sp)
    2ec8:	dc814715 	stw	r18,1308(sp)
    2ecc:	003fb106 	br	2d94 <___vfprintf_internal_r+0x1d14>
    2ed0:	000d883a 	mov	r6,zero
    2ed4:	000f883a 	mov	r7,zero
    2ed8:	8009883a 	mov	r4,r16
    2edc:	880b883a 	mov	r5,r17
    2ee0:	0009ce80 	call	9ce8 <__nedf2>
    2ee4:	103f9f26 	beq	r2,zero,2d64 <___vfprintf_internal_r+0x1ce4>
    2ee8:	00800044 	movi	r2,1
    2eec:	1509c83a 	sub	r4,r2,r20
    2ef0:	d9000515 	stw	r4,20(sp)
    2ef4:	003f9b06 	br	2d64 <___vfprintf_internal_r+0x1ce4>
    2ef8:	98000d1e 	bne	r19,zero,2f30 <___vfprintf_internal_r+0x1eb0>
    2efc:	d8c14c17 	ldw	r3,1328(sp)
    2f00:	1880004c 	andi	r2,r3,1
    2f04:	10000a1e 	bne	r2,zero,2f30 <___vfprintf_internal_r+0x1eb0>
    2f08:	01000044 	movi	r4,1
    2f0c:	200f883a 	mov	r7,r4
    2f10:	d9014515 	stw	r4,1300(sp)
    2f14:	003f4a06 	br	2c40 <___vfprintf_internal_r+0x1bc0>
    2f18:	3cc00017 	ldw	r19,0(r7)
    2f1c:	39c00104 	addi	r7,r7,4
    2f20:	983d0e0e 	bge	r19,zero,235c <___vfprintf_internal_r+0x12dc>
    2f24:	b8c00007 	ldb	r3,0(r23)
    2f28:	04ffffc4 	movi	r19,-1
    2f2c:	0038d306 	br	127c <___vfprintf_internal_r+0x1fc>
    2f30:	9cc00084 	addi	r19,r19,2
    2f34:	dcc14515 	stw	r19,1300(sp)
    2f38:	980f883a 	mov	r7,r19
    2f3c:	983f400e 	bge	r19,zero,2c40 <___vfprintf_internal_r+0x1bc0>
    2f40:	003f7306 	br	2d10 <___vfprintf_internal_r+0x1c90>

00002f44 <__vfprintf_internal>:
    2f44:	00800074 	movhi	r2,1
    2f48:	10bdce04 	addi	r2,r2,-2248
    2f4c:	2013883a 	mov	r9,r4
    2f50:	11000017 	ldw	r4,0(r2)
    2f54:	2805883a 	mov	r2,r5
    2f58:	300f883a 	mov	r7,r6
    2f5c:	480b883a 	mov	r5,r9
    2f60:	100d883a 	mov	r6,r2
    2f64:	00010801 	jmpi	1080 <___vfprintf_internal_r>

00002f68 <__swsetup_r>:
    2f68:	00800074 	movhi	r2,1
    2f6c:	10bdce04 	addi	r2,r2,-2248
    2f70:	10c00017 	ldw	r3,0(r2)
    2f74:	defffd04 	addi	sp,sp,-12
    2f78:	dc400115 	stw	r17,4(sp)
    2f7c:	dc000015 	stw	r16,0(sp)
    2f80:	dfc00215 	stw	ra,8(sp)
    2f84:	2023883a 	mov	r17,r4
    2f88:	2821883a 	mov	r16,r5
    2f8c:	18000226 	beq	r3,zero,2f98 <__swsetup_r+0x30>
    2f90:	18800e17 	ldw	r2,56(r3)
    2f94:	10001f26 	beq	r2,zero,3014 <__swsetup_r+0xac>
    2f98:	8100030b 	ldhu	r4,12(r16)
    2f9c:	2080020c 	andi	r2,r4,8
    2fa0:	10002826 	beq	r2,zero,3044 <__swsetup_r+0xdc>
    2fa4:	81400417 	ldw	r5,16(r16)
    2fa8:	28001d26 	beq	r5,zero,3020 <__swsetup_r+0xb8>
    2fac:	2080004c 	andi	r2,r4,1
    2fb0:	1005003a 	cmpeq	r2,r2,zero
    2fb4:	10000b26 	beq	r2,zero,2fe4 <__swsetup_r+0x7c>
    2fb8:	2080008c 	andi	r2,r4,2
    2fbc:	10001226 	beq	r2,zero,3008 <__swsetup_r+0xa0>
    2fc0:	0005883a 	mov	r2,zero
    2fc4:	80800215 	stw	r2,8(r16)
    2fc8:	28000b26 	beq	r5,zero,2ff8 <__swsetup_r+0x90>
    2fcc:	0005883a 	mov	r2,zero
    2fd0:	dfc00217 	ldw	ra,8(sp)
    2fd4:	dc400117 	ldw	r17,4(sp)
    2fd8:	dc000017 	ldw	r16,0(sp)
    2fdc:	dec00304 	addi	sp,sp,12
    2fe0:	f800283a 	ret
    2fe4:	80800517 	ldw	r2,20(r16)
    2fe8:	80000215 	stw	zero,8(r16)
    2fec:	0085c83a 	sub	r2,zero,r2
    2ff0:	80800615 	stw	r2,24(r16)
    2ff4:	283ff51e 	bne	r5,zero,2fcc <__swsetup_r+0x64>
    2ff8:	2080200c 	andi	r2,r4,128
    2ffc:	103ff326 	beq	r2,zero,2fcc <__swsetup_r+0x64>
    3000:	00bfffc4 	movi	r2,-1
    3004:	003ff206 	br	2fd0 <__swsetup_r+0x68>
    3008:	80800517 	ldw	r2,20(r16)
    300c:	80800215 	stw	r2,8(r16)
    3010:	003fed06 	br	2fc8 <__swsetup_r+0x60>
    3014:	1809883a 	mov	r4,r3
    3018:	0004ce80 	call	4ce8 <__sinit>
    301c:	003fde06 	br	2f98 <__swsetup_r+0x30>
    3020:	20c0a00c 	andi	r3,r4,640
    3024:	00808004 	movi	r2,512
    3028:	18bfe026 	beq	r3,r2,2fac <__swsetup_r+0x44>
    302c:	8809883a 	mov	r4,r17
    3030:	800b883a 	mov	r5,r16
    3034:	0005a940 	call	5a94 <__smakebuf_r>
    3038:	8100030b 	ldhu	r4,12(r16)
    303c:	81400417 	ldw	r5,16(r16)
    3040:	003fda06 	br	2fac <__swsetup_r+0x44>
    3044:	2080040c 	andi	r2,r4,16
    3048:	103fed26 	beq	r2,zero,3000 <__swsetup_r+0x98>
    304c:	2080010c 	andi	r2,r4,4
    3050:	10001226 	beq	r2,zero,309c <__swsetup_r+0x134>
    3054:	81400c17 	ldw	r5,48(r16)
    3058:	28000526 	beq	r5,zero,3070 <__swsetup_r+0x108>
    305c:	80801004 	addi	r2,r16,64
    3060:	28800226 	beq	r5,r2,306c <__swsetup_r+0x104>
    3064:	8809883a 	mov	r4,r17
    3068:	00050a00 	call	50a0 <_free_r>
    306c:	80000c15 	stw	zero,48(r16)
    3070:	8080030b 	ldhu	r2,12(r16)
    3074:	81400417 	ldw	r5,16(r16)
    3078:	80000115 	stw	zero,4(r16)
    307c:	10bff6cc 	andi	r2,r2,65499
    3080:	8080030d 	sth	r2,12(r16)
    3084:	81400015 	stw	r5,0(r16)
    3088:	8080030b 	ldhu	r2,12(r16)
    308c:	10800214 	ori	r2,r2,8
    3090:	113fffcc 	andi	r4,r2,65535
    3094:	8080030d 	sth	r2,12(r16)
    3098:	003fc306 	br	2fa8 <__swsetup_r+0x40>
    309c:	81400417 	ldw	r5,16(r16)
    30a0:	003ff906 	br	3088 <__swsetup_r+0x120>

000030a4 <register_fini>:
    30a4:	f800283a 	ret

000030a8 <__call_exitprocs>:
    30a8:	00800074 	movhi	r2,1
    30ac:	10bdcf04 	addi	r2,r2,-2244
    30b0:	10800017 	ldw	r2,0(r2)
    30b4:	defff304 	addi	sp,sp,-52
    30b8:	df000b15 	stw	fp,44(sp)
    30bc:	d8800115 	stw	r2,4(sp)
    30c0:	00800034 	movhi	r2,0
    30c4:	10800004 	addi	r2,r2,0
    30c8:	1005003a 	cmpeq	r2,r2,zero
    30cc:	d8800215 	stw	r2,8(sp)
    30d0:	d8800117 	ldw	r2,4(sp)
    30d4:	dd400815 	stw	r21,32(sp)
    30d8:	dd000715 	stw	r20,28(sp)
    30dc:	10805204 	addi	r2,r2,328
    30e0:	dfc00c15 	stw	ra,48(sp)
    30e4:	ddc00a15 	stw	r23,40(sp)
    30e8:	dd800915 	stw	r22,36(sp)
    30ec:	dcc00615 	stw	r19,24(sp)
    30f0:	dc800515 	stw	r18,20(sp)
    30f4:	dc400415 	stw	r17,16(sp)
    30f8:	dc000315 	stw	r16,12(sp)
    30fc:	282b883a 	mov	r21,r5
    3100:	2039883a 	mov	fp,r4
    3104:	d8800015 	stw	r2,0(sp)
    3108:	2829003a 	cmpeq	r20,r5,zero
    310c:	d8800117 	ldw	r2,4(sp)
    3110:	14405217 	ldw	r17,328(r2)
    3114:	88001026 	beq	r17,zero,3158 <__call_exitprocs+0xb0>
    3118:	ddc00017 	ldw	r23,0(sp)
    311c:	88800117 	ldw	r2,4(r17)
    3120:	8c802204 	addi	r18,r17,136
    3124:	143fffc4 	addi	r16,r2,-1
    3128:	80000916 	blt	r16,zero,3150 <__call_exitprocs+0xa8>
    312c:	05bfffc4 	movi	r22,-1
    3130:	a000151e 	bne	r20,zero,3188 <__call_exitprocs+0xe0>
    3134:	8409883a 	add	r4,r16,r16
    3138:	2105883a 	add	r2,r4,r4
    313c:	1485883a 	add	r2,r2,r18
    3140:	10c02017 	ldw	r3,128(r2)
    3144:	a8c01126 	beq	r21,r3,318c <__call_exitprocs+0xe4>
    3148:	843fffc4 	addi	r16,r16,-1
    314c:	85bff81e 	bne	r16,r22,3130 <__call_exitprocs+0x88>
    3150:	d8800217 	ldw	r2,8(sp)
    3154:	10003126 	beq	r2,zero,321c <__call_exitprocs+0x174>
    3158:	dfc00c17 	ldw	ra,48(sp)
    315c:	df000b17 	ldw	fp,44(sp)
    3160:	ddc00a17 	ldw	r23,40(sp)
    3164:	dd800917 	ldw	r22,36(sp)
    3168:	dd400817 	ldw	r21,32(sp)
    316c:	dd000717 	ldw	r20,28(sp)
    3170:	dcc00617 	ldw	r19,24(sp)
    3174:	dc800517 	ldw	r18,20(sp)
    3178:	dc400417 	ldw	r17,16(sp)
    317c:	dc000317 	ldw	r16,12(sp)
    3180:	dec00d04 	addi	sp,sp,52
    3184:	f800283a 	ret
    3188:	8409883a 	add	r4,r16,r16
    318c:	88c00117 	ldw	r3,4(r17)
    3190:	2105883a 	add	r2,r4,r4
    3194:	1445883a 	add	r2,r2,r17
    3198:	18ffffc4 	addi	r3,r3,-1
    319c:	11800217 	ldw	r6,8(r2)
    31a0:	1c001526 	beq	r3,r16,31f8 <__call_exitprocs+0x150>
    31a4:	10000215 	stw	zero,8(r2)
    31a8:	303fe726 	beq	r6,zero,3148 <__call_exitprocs+0xa0>
    31ac:	00c00044 	movi	r3,1
    31b0:	1c06983a 	sll	r3,r3,r16
    31b4:	90804017 	ldw	r2,256(r18)
    31b8:	8cc00117 	ldw	r19,4(r17)
    31bc:	1884703a 	and	r2,r3,r2
    31c0:	10001426 	beq	r2,zero,3214 <__call_exitprocs+0x16c>
    31c4:	90804117 	ldw	r2,260(r18)
    31c8:	1884703a 	and	r2,r3,r2
    31cc:	10000c1e 	bne	r2,zero,3200 <__call_exitprocs+0x158>
    31d0:	2105883a 	add	r2,r4,r4
    31d4:	1485883a 	add	r2,r2,r18
    31d8:	11400017 	ldw	r5,0(r2)
    31dc:	e009883a 	mov	r4,fp
    31e0:	303ee83a 	callr	r6
    31e4:	88800117 	ldw	r2,4(r17)
    31e8:	98bfc81e 	bne	r19,r2,310c <__call_exitprocs+0x64>
    31ec:	b8800017 	ldw	r2,0(r23)
    31f0:	147fd526 	beq	r2,r17,3148 <__call_exitprocs+0xa0>
    31f4:	003fc506 	br	310c <__call_exitprocs+0x64>
    31f8:	8c000115 	stw	r16,4(r17)
    31fc:	003fea06 	br	31a8 <__call_exitprocs+0x100>
    3200:	2105883a 	add	r2,r4,r4
    3204:	1485883a 	add	r2,r2,r18
    3208:	11000017 	ldw	r4,0(r2)
    320c:	303ee83a 	callr	r6
    3210:	003ff406 	br	31e4 <__call_exitprocs+0x13c>
    3214:	303ee83a 	callr	r6
    3218:	003ff206 	br	31e4 <__call_exitprocs+0x13c>
    321c:	88800117 	ldw	r2,4(r17)
    3220:	1000081e 	bne	r2,zero,3244 <__call_exitprocs+0x19c>
    3224:	89000017 	ldw	r4,0(r17)
    3228:	20000726 	beq	r4,zero,3248 <__call_exitprocs+0x1a0>
    322c:	b9000015 	stw	r4,0(r23)
    3230:	8809883a 	mov	r4,r17
    3234:	00000000 	call	0 <__alt_mem_sdram_controller>
    3238:	bc400017 	ldw	r17,0(r23)
    323c:	883fb71e 	bne	r17,zero,311c <__call_exitprocs+0x74>
    3240:	003fc506 	br	3158 <__call_exitprocs+0xb0>
    3244:	89000017 	ldw	r4,0(r17)
    3248:	882f883a 	mov	r23,r17
    324c:	2023883a 	mov	r17,r4
    3250:	883fb21e 	bne	r17,zero,311c <__call_exitprocs+0x74>
    3254:	003fc006 	br	3158 <__call_exitprocs+0xb0>

00003258 <quorem>:
    3258:	28c00417 	ldw	r3,16(r5)
    325c:	20800417 	ldw	r2,16(r4)
    3260:	defff104 	addi	sp,sp,-60
    3264:	dfc00e15 	stw	ra,56(sp)
    3268:	df000d15 	stw	fp,52(sp)
    326c:	ddc00c15 	stw	r23,48(sp)
    3270:	dd800b15 	stw	r22,44(sp)
    3274:	dd400a15 	stw	r21,40(sp)
    3278:	dd000915 	stw	r20,36(sp)
    327c:	dcc00815 	stw	r19,32(sp)
    3280:	dc800715 	stw	r18,28(sp)
    3284:	dc400615 	stw	r17,24(sp)
    3288:	dc000515 	stw	r16,20(sp)
    328c:	d9000315 	stw	r4,12(sp)
    3290:	d9400415 	stw	r5,16(sp)
    3294:	10c07f16 	blt	r2,r3,3494 <quorem+0x23c>
    3298:	1d3fffc4 	addi	r20,r3,-1
    329c:	d8c00417 	ldw	r3,16(sp)
    32a0:	d9000317 	ldw	r4,12(sp)
    32a4:	a505883a 	add	r2,r20,r20
    32a8:	1085883a 	add	r2,r2,r2
    32ac:	1cc00504 	addi	r19,r3,20
    32b0:	25c00504 	addi	r23,r4,20
    32b4:	98ad883a 	add	r22,r19,r2
    32b8:	15c7883a 	add	r3,r2,r23
    32bc:	b1400017 	ldw	r5,0(r22)
    32c0:	19000017 	ldw	r4,0(r3)
    32c4:	d8c00015 	stw	r3,0(sp)
    32c8:	29400044 	addi	r5,r5,1
    32cc:	d9000215 	stw	r4,8(sp)
    32d0:	0000e080 	call	e08 <__udivsi3>
    32d4:	1039883a 	mov	fp,r2
    32d8:	10003d1e 	bne	r2,zero,33d0 <quorem+0x178>
    32dc:	d9400417 	ldw	r5,16(sp)
    32e0:	d9000317 	ldw	r4,12(sp)
    32e4:	00067c00 	call	67c0 <__mcmp>
    32e8:	10002c16 	blt	r2,zero,339c <quorem+0x144>
    32ec:	e7000044 	addi	fp,fp,1
    32f0:	b80f883a 	mov	r7,r23
    32f4:	0011883a 	mov	r8,zero
    32f8:	0009883a 	mov	r4,zero
    32fc:	99400017 	ldw	r5,0(r19)
    3300:	38c00017 	ldw	r3,0(r7)
    3304:	9cc00104 	addi	r19,r19,4
    3308:	28bfffcc 	andi	r2,r5,65535
    330c:	2085883a 	add	r2,r4,r2
    3310:	11bfffcc 	andi	r6,r2,65535
    3314:	193fffcc 	andi	r4,r3,65535
    3318:	1004d43a 	srli	r2,r2,16
    331c:	280ad43a 	srli	r5,r5,16
    3320:	2189c83a 	sub	r4,r4,r6
    3324:	2209883a 	add	r4,r4,r8
    3328:	1806d43a 	srli	r3,r3,16
    332c:	288b883a 	add	r5,r5,r2
    3330:	200dd43a 	srai	r6,r4,16
    3334:	28bfffcc 	andi	r2,r5,65535
    3338:	1887c83a 	sub	r3,r3,r2
    333c:	1987883a 	add	r3,r3,r6
    3340:	3900000d 	sth	r4,0(r7)
    3344:	38c0008d 	sth	r3,2(r7)
    3348:	2808d43a 	srli	r4,r5,16
    334c:	39c00104 	addi	r7,r7,4
    3350:	1811d43a 	srai	r8,r3,16
    3354:	b4ffe92e 	bgeu	r22,r19,32fc <quorem+0xa4>
    3358:	a505883a 	add	r2,r20,r20
    335c:	1085883a 	add	r2,r2,r2
    3360:	b885883a 	add	r2,r23,r2
    3364:	10c00017 	ldw	r3,0(r2)
    3368:	18000c1e 	bne	r3,zero,339c <quorem+0x144>
    336c:	113fff04 	addi	r4,r2,-4
    3370:	b900082e 	bgeu	r23,r4,3394 <quorem+0x13c>
    3374:	10bfff17 	ldw	r2,-4(r2)
    3378:	10000326 	beq	r2,zero,3388 <quorem+0x130>
    337c:	00000506 	br	3394 <quorem+0x13c>
    3380:	20800017 	ldw	r2,0(r4)
    3384:	1000031e 	bne	r2,zero,3394 <quorem+0x13c>
    3388:	213fff04 	addi	r4,r4,-4
    338c:	a53fffc4 	addi	r20,r20,-1
    3390:	b93ffb36 	bltu	r23,r4,3380 <quorem+0x128>
    3394:	d9000317 	ldw	r4,12(sp)
    3398:	25000415 	stw	r20,16(r4)
    339c:	e005883a 	mov	r2,fp
    33a0:	dfc00e17 	ldw	ra,56(sp)
    33a4:	df000d17 	ldw	fp,52(sp)
    33a8:	ddc00c17 	ldw	r23,48(sp)
    33ac:	dd800b17 	ldw	r22,44(sp)
    33b0:	dd400a17 	ldw	r21,40(sp)
    33b4:	dd000917 	ldw	r20,36(sp)
    33b8:	dcc00817 	ldw	r19,32(sp)
    33bc:	dc800717 	ldw	r18,28(sp)
    33c0:	dc400617 	ldw	r17,24(sp)
    33c4:	dc000517 	ldw	r16,20(sp)
    33c8:	dec00f04 	addi	sp,sp,60
    33cc:	f800283a 	ret
    33d0:	b823883a 	mov	r17,r23
    33d4:	9825883a 	mov	r18,r19
    33d8:	d8000115 	stw	zero,4(sp)
    33dc:	002b883a 	mov	r21,zero
    33e0:	94000017 	ldw	r16,0(r18)
    33e4:	e009883a 	mov	r4,fp
    33e8:	94800104 	addi	r18,r18,4
    33ec:	817fffcc 	andi	r5,r16,65535
    33f0:	0000e180 	call	e18 <__mulsi3>
    33f4:	800ad43a 	srli	r5,r16,16
    33f8:	e009883a 	mov	r4,fp
    33fc:	a8a1883a 	add	r16,r21,r2
    3400:	0000e180 	call	e18 <__mulsi3>
    3404:	89000017 	ldw	r4,0(r17)
    3408:	80ffffcc 	andi	r3,r16,65535
    340c:	8020d43a 	srli	r16,r16,16
    3410:	217fffcc 	andi	r5,r4,65535
    3414:	28cbc83a 	sub	r5,r5,r3
    3418:	d8c00117 	ldw	r3,4(sp)
    341c:	2008d43a 	srli	r4,r4,16
    3420:	1405883a 	add	r2,r2,r16
    3424:	28cb883a 	add	r5,r5,r3
    3428:	280dd43a 	srai	r6,r5,16
    342c:	10ffffcc 	andi	r3,r2,65535
    3430:	20c9c83a 	sub	r4,r4,r3
    3434:	2189883a 	add	r4,r4,r6
    3438:	8900008d 	sth	r4,2(r17)
    343c:	2009d43a 	srai	r4,r4,16
    3440:	8940000d 	sth	r5,0(r17)
    3444:	102ad43a 	srli	r21,r2,16
    3448:	8c400104 	addi	r17,r17,4
    344c:	d9000115 	stw	r4,4(sp)
    3450:	b4bfe32e 	bgeu	r22,r18,33e0 <quorem+0x188>
    3454:	d9000217 	ldw	r4,8(sp)
    3458:	203fa01e 	bne	r4,zero,32dc <quorem+0x84>
    345c:	d8800017 	ldw	r2,0(sp)
    3460:	10ffff04 	addi	r3,r2,-4
    3464:	b8c0082e 	bgeu	r23,r3,3488 <quorem+0x230>
    3468:	10bfff17 	ldw	r2,-4(r2)
    346c:	10000326 	beq	r2,zero,347c <quorem+0x224>
    3470:	00000506 	br	3488 <quorem+0x230>
    3474:	18800017 	ldw	r2,0(r3)
    3478:	1000031e 	bne	r2,zero,3488 <quorem+0x230>
    347c:	18ffff04 	addi	r3,r3,-4
    3480:	a53fffc4 	addi	r20,r20,-1
    3484:	b8fffb36 	bltu	r23,r3,3474 <quorem+0x21c>
    3488:	d8c00317 	ldw	r3,12(sp)
    348c:	1d000415 	stw	r20,16(r3)
    3490:	003f9206 	br	32dc <quorem+0x84>
    3494:	0005883a 	mov	r2,zero
    3498:	003fc106 	br	33a0 <quorem+0x148>

0000349c <_dtoa_r>:
    349c:	22001017 	ldw	r8,64(r4)
    34a0:	deffda04 	addi	sp,sp,-152
    34a4:	dd402115 	stw	r21,132(sp)
    34a8:	dd002015 	stw	r20,128(sp)
    34ac:	dc801e15 	stw	r18,120(sp)
    34b0:	dc401d15 	stw	r17,116(sp)
    34b4:	dfc02515 	stw	ra,148(sp)
    34b8:	df002415 	stw	fp,144(sp)
    34bc:	ddc02315 	stw	r23,140(sp)
    34c0:	dd802215 	stw	r22,136(sp)
    34c4:	dcc01f15 	stw	r19,124(sp)
    34c8:	dc001c15 	stw	r16,112(sp)
    34cc:	d9001615 	stw	r4,88(sp)
    34d0:	3023883a 	mov	r17,r6
    34d4:	2829883a 	mov	r20,r5
    34d8:	d9c01715 	stw	r7,92(sp)
    34dc:	dc802817 	ldw	r18,160(sp)
    34e0:	302b883a 	mov	r21,r6
    34e4:	40000a26 	beq	r8,zero,3510 <_dtoa_r+0x74>
    34e8:	20801117 	ldw	r2,68(r4)
    34ec:	400b883a 	mov	r5,r8
    34f0:	40800115 	stw	r2,4(r8)
    34f4:	20c01117 	ldw	r3,68(r4)
    34f8:	00800044 	movi	r2,1
    34fc:	10c4983a 	sll	r2,r2,r3
    3500:	40800215 	stw	r2,8(r8)
    3504:	00066640 	call	6664 <_Bfree>
    3508:	d8c01617 	ldw	r3,88(sp)
    350c:	18001015 	stw	zero,64(r3)
    3510:	8800a316 	blt	r17,zero,37a0 <_dtoa_r+0x304>
    3514:	90000015 	stw	zero,0(r18)
    3518:	a8dffc2c 	andhi	r3,r21,32752
    351c:	009ffc34 	movhi	r2,32752
    3520:	18809126 	beq	r3,r2,3768 <_dtoa_r+0x2cc>
    3524:	000d883a 	mov	r6,zero
    3528:	000f883a 	mov	r7,zero
    352c:	a009883a 	mov	r4,r20
    3530:	a80b883a 	mov	r5,r21
    3534:	dd001215 	stw	r20,72(sp)
    3538:	dd401315 	stw	r21,76(sp)
    353c:	0009ce80 	call	9ce8 <__nedf2>
    3540:	1000171e 	bne	r2,zero,35a0 <_dtoa_r+0x104>
    3544:	d9802717 	ldw	r6,156(sp)
    3548:	00800044 	movi	r2,1
    354c:	30800015 	stw	r2,0(r6)
    3550:	d8802917 	ldw	r2,164(sp)
    3554:	10029b26 	beq	r2,zero,3fc4 <_dtoa_r+0xb28>
    3558:	d9002917 	ldw	r4,164(sp)
    355c:	00800074 	movhi	r2,1
    3560:	10b69144 	addi	r2,r2,-9659
    3564:	10ffffc4 	addi	r3,r2,-1
    3568:	20800015 	stw	r2,0(r4)
    356c:	1805883a 	mov	r2,r3
    3570:	dfc02517 	ldw	ra,148(sp)
    3574:	df002417 	ldw	fp,144(sp)
    3578:	ddc02317 	ldw	r23,140(sp)
    357c:	dd802217 	ldw	r22,136(sp)
    3580:	dd402117 	ldw	r21,132(sp)
    3584:	dd002017 	ldw	r20,128(sp)
    3588:	dcc01f17 	ldw	r19,124(sp)
    358c:	dc801e17 	ldw	r18,120(sp)
    3590:	dc401d17 	ldw	r17,116(sp)
    3594:	dc001c17 	ldw	r16,112(sp)
    3598:	dec02604 	addi	sp,sp,152
    359c:	f800283a 	ret
    35a0:	d9001617 	ldw	r4,88(sp)
    35a4:	d9401217 	ldw	r5,72(sp)
    35a8:	d8800104 	addi	r2,sp,4
    35ac:	a80d883a 	mov	r6,r21
    35b0:	d9c00204 	addi	r7,sp,8
    35b4:	d8800015 	stw	r2,0(sp)
    35b8:	0006ca00 	call	6ca0 <__d2b>
    35bc:	d8800715 	stw	r2,28(sp)
    35c0:	a804d53a 	srli	r2,r21,20
    35c4:	1101ffcc 	andi	r4,r2,2047
    35c8:	20008626 	beq	r4,zero,37e4 <_dtoa_r+0x348>
    35cc:	d8c01217 	ldw	r3,72(sp)
    35d0:	00800434 	movhi	r2,16
    35d4:	10bfffc4 	addi	r2,r2,-1
    35d8:	ddc00117 	ldw	r23,4(sp)
    35dc:	a884703a 	and	r2,r21,r2
    35e0:	1811883a 	mov	r8,r3
    35e4:	124ffc34 	orhi	r9,r2,16368
    35e8:	25bf0044 	addi	r22,r4,-1023
    35ec:	d8000815 	stw	zero,32(sp)
    35f0:	0005883a 	mov	r2,zero
    35f4:	00cffe34 	movhi	r3,16376
    35f8:	480b883a 	mov	r5,r9
    35fc:	4009883a 	mov	r4,r8
    3600:	180f883a 	mov	r7,r3
    3604:	100d883a 	mov	r6,r2
    3608:	00095500 	call	9550 <__subdf3>
    360c:	0218dbf4 	movhi	r8,25455
    3610:	4210d844 	addi	r8,r8,17249
    3614:	024ff4f4 	movhi	r9,16339
    3618:	4a61e9c4 	addi	r9,r9,-30809
    361c:	480f883a 	mov	r7,r9
    3620:	400d883a 	mov	r6,r8
    3624:	180b883a 	mov	r5,r3
    3628:	1009883a 	mov	r4,r2
    362c:	00096440 	call	9644 <__muldf3>
    3630:	0222d874 	movhi	r8,35681
    3634:	42322cc4 	addi	r8,r8,-14157
    3638:	024ff1f4 	movhi	r9,16327
    363c:	4a628a04 	addi	r9,r9,-30168
    3640:	480f883a 	mov	r7,r9
    3644:	400d883a 	mov	r6,r8
    3648:	180b883a 	mov	r5,r3
    364c:	1009883a 	mov	r4,r2
    3650:	00095d00 	call	95d0 <__adddf3>
    3654:	b009883a 	mov	r4,r22
    3658:	1021883a 	mov	r16,r2
    365c:	1823883a 	mov	r17,r3
    3660:	0009f080 	call	9f08 <__floatsidf>
    3664:	021427f4 	movhi	r8,20639
    3668:	421e7ec4 	addi	r8,r8,31227
    366c:	024ff4f4 	movhi	r9,16339
    3670:	4a5104c4 	addi	r9,r9,17427
    3674:	480f883a 	mov	r7,r9
    3678:	400d883a 	mov	r6,r8
    367c:	180b883a 	mov	r5,r3
    3680:	1009883a 	mov	r4,r2
    3684:	00096440 	call	9644 <__muldf3>
    3688:	180f883a 	mov	r7,r3
    368c:	880b883a 	mov	r5,r17
    3690:	100d883a 	mov	r6,r2
    3694:	8009883a 	mov	r4,r16
    3698:	00095d00 	call	95d0 <__adddf3>
    369c:	1009883a 	mov	r4,r2
    36a0:	180b883a 	mov	r5,r3
    36a4:	1021883a 	mov	r16,r2
    36a8:	1823883a 	mov	r17,r3
    36ac:	000a0000 	call	a000 <__fixdfsi>
    36b0:	000d883a 	mov	r6,zero
    36b4:	000f883a 	mov	r7,zero
    36b8:	8009883a 	mov	r4,r16
    36bc:	880b883a 	mov	r5,r17
    36c0:	d8800d15 	stw	r2,52(sp)
    36c4:	0009e800 	call	9e80 <__ltdf2>
    36c8:	10031716 	blt	r2,zero,4328 <_dtoa_r+0xe8c>
    36cc:	d8c00d17 	ldw	r3,52(sp)
    36d0:	00800584 	movi	r2,22
    36d4:	10c1482e 	bgeu	r2,r3,3bf8 <_dtoa_r+0x75c>
    36d8:	01000044 	movi	r4,1
    36dc:	d9000c15 	stw	r4,48(sp)
    36e0:	bd85c83a 	sub	r2,r23,r22
    36e4:	11bfffc4 	addi	r6,r2,-1
    36e8:	30030b16 	blt	r6,zero,4318 <_dtoa_r+0xe7c>
    36ec:	d9800a15 	stw	r6,40(sp)
    36f0:	d8001115 	stw	zero,68(sp)
    36f4:	d8c00d17 	ldw	r3,52(sp)
    36f8:	1802ff16 	blt	r3,zero,42f8 <_dtoa_r+0xe5c>
    36fc:	d9000a17 	ldw	r4,40(sp)
    3700:	d8c00915 	stw	r3,36(sp)
    3704:	d8001015 	stw	zero,64(sp)
    3708:	20c9883a 	add	r4,r4,r3
    370c:	d9000a15 	stw	r4,40(sp)
    3710:	d9001717 	ldw	r4,92(sp)
    3714:	00800244 	movi	r2,9
    3718:	11004636 	bltu	r2,r4,3834 <_dtoa_r+0x398>
    371c:	00800144 	movi	r2,5
    3720:	11020416 	blt	r2,r4,3f34 <_dtoa_r+0xa98>
    3724:	04400044 	movi	r17,1
    3728:	d8c01717 	ldw	r3,92(sp)
    372c:	00800144 	movi	r2,5
    3730:	10c1ed36 	bltu	r2,r3,3ee8 <_dtoa_r+0xa4c>
    3734:	18c5883a 	add	r2,r3,r3
    3738:	1085883a 	add	r2,r2,r2
    373c:	00c00034 	movhi	r3,0
    3740:	18cdd404 	addi	r3,r3,14160
    3744:	10c5883a 	add	r2,r2,r3
    3748:	11000017 	ldw	r4,0(r2)
    374c:	2000683a 	jmp	r4
    3750:	0000383c 	xorhi	zero,zero,224
    3754:	0000383c 	xorhi	zero,zero,224
    3758:	0000423c 	xorhi	zero,zero,264
    375c:	00004214 	movui	zero,264
    3760:	00004258 	cmpnei	zero,zero,265
    3764:	00004264 	muli	zero,zero,265
    3768:	d9002717 	ldw	r4,156(sp)
    376c:	0089c3c4 	movi	r2,9999
    3770:	20800015 	stw	r2,0(r4)
    3774:	a0001026 	beq	r20,zero,37b8 <_dtoa_r+0x31c>
    3778:	00c00074 	movhi	r3,1
    377c:	18f69d04 	addi	r3,r3,-9612
    3780:	d9802917 	ldw	r6,164(sp)
    3784:	303f7926 	beq	r6,zero,356c <_dtoa_r+0xd0>
    3788:	188000c7 	ldb	r2,3(r3)
    378c:	190000c4 	addi	r4,r3,3
    3790:	1000101e 	bne	r2,zero,37d4 <_dtoa_r+0x338>
    3794:	d8802917 	ldw	r2,164(sp)
    3798:	11000015 	stw	r4,0(r2)
    379c:	003f7306 	br	356c <_dtoa_r+0xd0>
    37a0:	00a00034 	movhi	r2,32768
    37a4:	10bfffc4 	addi	r2,r2,-1
    37a8:	00c00044 	movi	r3,1
    37ac:	88aa703a 	and	r21,r17,r2
    37b0:	90c00015 	stw	r3,0(r18)
    37b4:	003f5806 	br	3518 <_dtoa_r+0x7c>
    37b8:	00800434 	movhi	r2,16
    37bc:	10bfffc4 	addi	r2,r2,-1
    37c0:	a884703a 	and	r2,r21,r2
    37c4:	103fec1e 	bne	r2,zero,3778 <_dtoa_r+0x2dc>
    37c8:	00c00074 	movhi	r3,1
    37cc:	18f69a04 	addi	r3,r3,-9624
    37d0:	003feb06 	br	3780 <_dtoa_r+0x2e4>
    37d4:	d8802917 	ldw	r2,164(sp)
    37d8:	19000204 	addi	r4,r3,8
    37dc:	11000015 	stw	r4,0(r2)
    37e0:	003f6206 	br	356c <_dtoa_r+0xd0>
    37e4:	ddc00117 	ldw	r23,4(sp)
    37e8:	d8800217 	ldw	r2,8(sp)
    37ec:	01000804 	movi	r4,32
    37f0:	b8c10c84 	addi	r3,r23,1074
    37f4:	18a3883a 	add	r17,r3,r2
    37f8:	2441b80e 	bge	r4,r17,3edc <_dtoa_r+0xa40>
    37fc:	00c01004 	movi	r3,64
    3800:	1c47c83a 	sub	r3,r3,r17
    3804:	88bff804 	addi	r2,r17,-32
    3808:	a8c6983a 	sll	r3,r21,r3
    380c:	a084d83a 	srl	r2,r20,r2
    3810:	1888b03a 	or	r4,r3,r2
    3814:	000a0d80 	call	a0d8 <__floatunsidf>
    3818:	1011883a 	mov	r8,r2
    381c:	00bf8434 	movhi	r2,65040
    3820:	01000044 	movi	r4,1
    3824:	10d3883a 	add	r9,r2,r3
    3828:	8dbef344 	addi	r22,r17,-1075
    382c:	d9000815 	stw	r4,32(sp)
    3830:	003f6f06 	br	35f0 <_dtoa_r+0x154>
    3834:	d8001715 	stw	zero,92(sp)
    3838:	04400044 	movi	r17,1
    383c:	00bfffc4 	movi	r2,-1
    3840:	00c00044 	movi	r3,1
    3844:	d8800e15 	stw	r2,56(sp)
    3848:	d8002615 	stw	zero,152(sp)
    384c:	d8800f15 	stw	r2,60(sp)
    3850:	d8c00b15 	stw	r3,44(sp)
    3854:	1021883a 	mov	r16,r2
    3858:	d8801617 	ldw	r2,88(sp)
    385c:	10001115 	stw	zero,68(r2)
    3860:	d8801617 	ldw	r2,88(sp)
    3864:	11401117 	ldw	r5,68(r2)
    3868:	1009883a 	mov	r4,r2
    386c:	0006be40 	call	6be4 <_Balloc>
    3870:	d8c01617 	ldw	r3,88(sp)
    3874:	d8800515 	stw	r2,20(sp)
    3878:	18801015 	stw	r2,64(r3)
    387c:	00800384 	movi	r2,14
    3880:	14006836 	bltu	r2,r16,3a24 <_dtoa_r+0x588>
    3884:	8805003a 	cmpeq	r2,r17,zero
    3888:	1000661e 	bne	r2,zero,3a24 <_dtoa_r+0x588>
    388c:	d9000d17 	ldw	r4,52(sp)
    3890:	0102300e 	bge	zero,r4,4154 <_dtoa_r+0xcb8>
    3894:	208003cc 	andi	r2,r4,15
    3898:	100490fa 	slli	r2,r2,3
    389c:	2025d13a 	srai	r18,r4,4
    38a0:	00c00074 	movhi	r3,1
    38a4:	18f6ae04 	addi	r3,r3,-9544
    38a8:	10c5883a 	add	r2,r2,r3
    38ac:	90c0040c 	andi	r3,r18,16
    38b0:	14000017 	ldw	r16,0(r2)
    38b4:	14400117 	ldw	r17,4(r2)
    38b8:	18036a1e 	bne	r3,zero,4664 <_dtoa_r+0x11c8>
    38bc:	05800084 	movi	r22,2
    38c0:	90001026 	beq	r18,zero,3904 <_dtoa_r+0x468>
    38c4:	04c00074 	movhi	r19,1
    38c8:	9cf6e004 	addi	r19,r19,-9344
    38cc:	9080004c 	andi	r2,r18,1
    38d0:	1005003a 	cmpeq	r2,r2,zero
    38d4:	1000081e 	bne	r2,zero,38f8 <_dtoa_r+0x45c>
    38d8:	99800017 	ldw	r6,0(r19)
    38dc:	99c00117 	ldw	r7,4(r19)
    38e0:	880b883a 	mov	r5,r17
    38e4:	8009883a 	mov	r4,r16
    38e8:	00096440 	call	9644 <__muldf3>
    38ec:	1021883a 	mov	r16,r2
    38f0:	b5800044 	addi	r22,r22,1
    38f4:	1823883a 	mov	r17,r3
    38f8:	9025d07a 	srai	r18,r18,1
    38fc:	9cc00204 	addi	r19,r19,8
    3900:	903ff21e 	bne	r18,zero,38cc <_dtoa_r+0x430>
    3904:	a80b883a 	mov	r5,r21
    3908:	a009883a 	mov	r4,r20
    390c:	880f883a 	mov	r7,r17
    3910:	800d883a 	mov	r6,r16
    3914:	0009a080 	call	9a08 <__divdf3>
    3918:	1029883a 	mov	r20,r2
    391c:	182b883a 	mov	r21,r3
    3920:	d8c00c17 	ldw	r3,48(sp)
    3924:	1805003a 	cmpeq	r2,r3,zero
    3928:	1000081e 	bne	r2,zero,394c <_dtoa_r+0x4b0>
    392c:	0005883a 	mov	r2,zero
    3930:	00cffc34 	movhi	r3,16368
    3934:	180f883a 	mov	r7,r3
    3938:	a009883a 	mov	r4,r20
    393c:	a80b883a 	mov	r5,r21
    3940:	100d883a 	mov	r6,r2
    3944:	0009e800 	call	9e80 <__ltdf2>
    3948:	1003fe16 	blt	r2,zero,4944 <_dtoa_r+0x14a8>
    394c:	b009883a 	mov	r4,r22
    3950:	0009f080 	call	9f08 <__floatsidf>
    3954:	180b883a 	mov	r5,r3
    3958:	1009883a 	mov	r4,r2
    395c:	a00d883a 	mov	r6,r20
    3960:	a80f883a 	mov	r7,r21
    3964:	00096440 	call	9644 <__muldf3>
    3968:	0011883a 	mov	r8,zero
    396c:	02500734 	movhi	r9,16412
    3970:	1009883a 	mov	r4,r2
    3974:	180b883a 	mov	r5,r3
    3978:	480f883a 	mov	r7,r9
    397c:	400d883a 	mov	r6,r8
    3980:	00095d00 	call	95d0 <__adddf3>
    3984:	d9000f17 	ldw	r4,60(sp)
    3988:	102d883a 	mov	r22,r2
    398c:	00bf3034 	movhi	r2,64704
    3990:	18b9883a 	add	fp,r3,r2
    3994:	e02f883a 	mov	r23,fp
    3998:	20028f1e 	bne	r4,zero,43d8 <_dtoa_r+0xf3c>
    399c:	0005883a 	mov	r2,zero
    39a0:	00d00534 	movhi	r3,16404
    39a4:	a009883a 	mov	r4,r20
    39a8:	a80b883a 	mov	r5,r21
    39ac:	180f883a 	mov	r7,r3
    39b0:	100d883a 	mov	r6,r2
    39b4:	00095500 	call	9550 <__subdf3>
    39b8:	1009883a 	mov	r4,r2
    39bc:	e00f883a 	mov	r7,fp
    39c0:	180b883a 	mov	r5,r3
    39c4:	b00d883a 	mov	r6,r22
    39c8:	1025883a 	mov	r18,r2
    39cc:	1827883a 	mov	r19,r3
    39d0:	0009d700 	call	9d70 <__gtdf2>
    39d4:	00834f16 	blt	zero,r2,4714 <_dtoa_r+0x1278>
    39d8:	e0e0003c 	xorhi	r3,fp,32768
    39dc:	9009883a 	mov	r4,r18
    39e0:	980b883a 	mov	r5,r19
    39e4:	180f883a 	mov	r7,r3
    39e8:	b00d883a 	mov	r6,r22
    39ec:	0009e800 	call	9e80 <__ltdf2>
    39f0:	1000080e 	bge	r2,zero,3a14 <_dtoa_r+0x578>
    39f4:	0027883a 	mov	r19,zero
    39f8:	0025883a 	mov	r18,zero
    39fc:	d8802617 	ldw	r2,152(sp)
    3a00:	df000517 	ldw	fp,20(sp)
    3a04:	d8000615 	stw	zero,24(sp)
    3a08:	0084303a 	nor	r2,zero,r2
    3a0c:	d8800d15 	stw	r2,52(sp)
    3a10:	00019b06 	br	4080 <_dtoa_r+0xbe4>
    3a14:	d9801217 	ldw	r6,72(sp)
    3a18:	d8801317 	ldw	r2,76(sp)
    3a1c:	3029883a 	mov	r20,r6
    3a20:	102b883a 	mov	r21,r2
    3a24:	d8c00217 	ldw	r3,8(sp)
    3a28:	18008516 	blt	r3,zero,3c40 <_dtoa_r+0x7a4>
    3a2c:	d9000d17 	ldw	r4,52(sp)
    3a30:	00800384 	movi	r2,14
    3a34:	11008216 	blt	r2,r4,3c40 <_dtoa_r+0x7a4>
    3a38:	200490fa 	slli	r2,r4,3
    3a3c:	d9802617 	ldw	r6,152(sp)
    3a40:	00c00074 	movhi	r3,1
    3a44:	18f6ae04 	addi	r3,r3,-9544
    3a48:	10c5883a 	add	r2,r2,r3
    3a4c:	14800017 	ldw	r18,0(r2)
    3a50:	14c00117 	ldw	r19,4(r2)
    3a54:	30031e16 	blt	r6,zero,46d0 <_dtoa_r+0x1234>
    3a58:	d9000517 	ldw	r4,20(sp)
    3a5c:	d8c00f17 	ldw	r3,60(sp)
    3a60:	a823883a 	mov	r17,r21
    3a64:	a021883a 	mov	r16,r20
    3a68:	192b883a 	add	r21,r3,r4
    3a6c:	2039883a 	mov	fp,r4
    3a70:	00000f06 	br	3ab0 <_dtoa_r+0x614>
    3a74:	0005883a 	mov	r2,zero
    3a78:	00d00934 	movhi	r3,16420
    3a7c:	5009883a 	mov	r4,r10
    3a80:	580b883a 	mov	r5,r11
    3a84:	180f883a 	mov	r7,r3
    3a88:	100d883a 	mov	r6,r2
    3a8c:	00096440 	call	9644 <__muldf3>
    3a90:	180b883a 	mov	r5,r3
    3a94:	000d883a 	mov	r6,zero
    3a98:	000f883a 	mov	r7,zero
    3a9c:	1009883a 	mov	r4,r2
    3aa0:	1021883a 	mov	r16,r2
    3aa4:	1823883a 	mov	r17,r3
    3aa8:	0009ce80 	call	9ce8 <__nedf2>
    3aac:	10004526 	beq	r2,zero,3bc4 <_dtoa_r+0x728>
    3ab0:	900d883a 	mov	r6,r18
    3ab4:	980f883a 	mov	r7,r19
    3ab8:	8009883a 	mov	r4,r16
    3abc:	880b883a 	mov	r5,r17
    3ac0:	0009a080 	call	9a08 <__divdf3>
    3ac4:	180b883a 	mov	r5,r3
    3ac8:	1009883a 	mov	r4,r2
    3acc:	000a0000 	call	a000 <__fixdfsi>
    3ad0:	1009883a 	mov	r4,r2
    3ad4:	1029883a 	mov	r20,r2
    3ad8:	0009f080 	call	9f08 <__floatsidf>
    3adc:	180f883a 	mov	r7,r3
    3ae0:	9009883a 	mov	r4,r18
    3ae4:	980b883a 	mov	r5,r19
    3ae8:	100d883a 	mov	r6,r2
    3aec:	00096440 	call	9644 <__muldf3>
    3af0:	180f883a 	mov	r7,r3
    3af4:	880b883a 	mov	r5,r17
    3af8:	8009883a 	mov	r4,r16
    3afc:	100d883a 	mov	r6,r2
    3b00:	00095500 	call	9550 <__subdf3>
    3b04:	1015883a 	mov	r10,r2
    3b08:	a0800c04 	addi	r2,r20,48
    3b0c:	e0800005 	stb	r2,0(fp)
    3b10:	e7000044 	addi	fp,fp,1
    3b14:	1817883a 	mov	r11,r3
    3b18:	e57fd61e 	bne	fp,r21,3a74 <_dtoa_r+0x5d8>
    3b1c:	500d883a 	mov	r6,r10
    3b20:	180f883a 	mov	r7,r3
    3b24:	5009883a 	mov	r4,r10
    3b28:	180b883a 	mov	r5,r3
    3b2c:	00095d00 	call	95d0 <__adddf3>
    3b30:	100d883a 	mov	r6,r2
    3b34:	9009883a 	mov	r4,r18
    3b38:	980b883a 	mov	r5,r19
    3b3c:	180f883a 	mov	r7,r3
    3b40:	1021883a 	mov	r16,r2
    3b44:	1823883a 	mov	r17,r3
    3b48:	0009e800 	call	9e80 <__ltdf2>
    3b4c:	10000816 	blt	r2,zero,3b70 <_dtoa_r+0x6d4>
    3b50:	980b883a 	mov	r5,r19
    3b54:	800d883a 	mov	r6,r16
    3b58:	880f883a 	mov	r7,r17
    3b5c:	9009883a 	mov	r4,r18
    3b60:	0009c600 	call	9c60 <__eqdf2>
    3b64:	1000171e 	bne	r2,zero,3bc4 <_dtoa_r+0x728>
    3b68:	a080004c 	andi	r2,r20,1
    3b6c:	10001526 	beq	r2,zero,3bc4 <_dtoa_r+0x728>
    3b70:	d8800d17 	ldw	r2,52(sp)
    3b74:	d8800415 	stw	r2,16(sp)
    3b78:	e009883a 	mov	r4,fp
    3b7c:	213fffc4 	addi	r4,r4,-1
    3b80:	20c00007 	ldb	r3,0(r4)
    3b84:	00800e44 	movi	r2,57
    3b88:	1880081e 	bne	r3,r2,3bac <_dtoa_r+0x710>
    3b8c:	d8800517 	ldw	r2,20(sp)
    3b90:	113ffa1e 	bne	r2,r4,3b7c <_dtoa_r+0x6e0>
    3b94:	d8c00417 	ldw	r3,16(sp)
    3b98:	d9800517 	ldw	r6,20(sp)
    3b9c:	00800c04 	movi	r2,48
    3ba0:	18c00044 	addi	r3,r3,1
    3ba4:	d8c00415 	stw	r3,16(sp)
    3ba8:	30800005 	stb	r2,0(r6)
    3bac:	20800003 	ldbu	r2,0(r4)
    3bb0:	d8c00417 	ldw	r3,16(sp)
    3bb4:	27000044 	addi	fp,r4,1
    3bb8:	10800044 	addi	r2,r2,1
    3bbc:	d8c00d15 	stw	r3,52(sp)
    3bc0:	20800005 	stb	r2,0(r4)
    3bc4:	d9001617 	ldw	r4,88(sp)
    3bc8:	d9400717 	ldw	r5,28(sp)
    3bcc:	00066640 	call	6664 <_Bfree>
    3bd0:	e0000005 	stb	zero,0(fp)
    3bd4:	d9800d17 	ldw	r6,52(sp)
    3bd8:	d8c02717 	ldw	r3,156(sp)
    3bdc:	d9002917 	ldw	r4,164(sp)
    3be0:	30800044 	addi	r2,r6,1
    3be4:	18800015 	stw	r2,0(r3)
    3be8:	20029c26 	beq	r4,zero,465c <_dtoa_r+0x11c0>
    3bec:	d8c00517 	ldw	r3,20(sp)
    3bf0:	27000015 	stw	fp,0(r4)
    3bf4:	003e5d06 	br	356c <_dtoa_r+0xd0>
    3bf8:	d9800d17 	ldw	r6,52(sp)
    3bfc:	00c00074 	movhi	r3,1
    3c00:	18f6ae04 	addi	r3,r3,-9544
    3c04:	d9001217 	ldw	r4,72(sp)
    3c08:	300490fa 	slli	r2,r6,3
    3c0c:	d9401317 	ldw	r5,76(sp)
    3c10:	10c5883a 	add	r2,r2,r3
    3c14:	12000017 	ldw	r8,0(r2)
    3c18:	12400117 	ldw	r9,4(r2)
    3c1c:	400d883a 	mov	r6,r8
    3c20:	480f883a 	mov	r7,r9
    3c24:	0009e800 	call	9e80 <__ltdf2>
    3c28:	1000030e 	bge	r2,zero,3c38 <_dtoa_r+0x79c>
    3c2c:	d8800d17 	ldw	r2,52(sp)
    3c30:	10bfffc4 	addi	r2,r2,-1
    3c34:	d8800d15 	stw	r2,52(sp)
    3c38:	d8000c15 	stw	zero,48(sp)
    3c3c:	003ea806 	br	36e0 <_dtoa_r+0x244>
    3c40:	d9000b17 	ldw	r4,44(sp)
    3c44:	202cc03a 	cmpne	r22,r4,zero
    3c48:	b000c71e 	bne	r22,zero,3f68 <_dtoa_r+0xacc>
    3c4c:	dc001117 	ldw	r16,68(sp)
    3c50:	dc801017 	ldw	r18,64(sp)
    3c54:	0027883a 	mov	r19,zero
    3c58:	04000b0e 	bge	zero,r16,3c88 <_dtoa_r+0x7ec>
    3c5c:	d8c00a17 	ldw	r3,40(sp)
    3c60:	00c0090e 	bge	zero,r3,3c88 <_dtoa_r+0x7ec>
    3c64:	8005883a 	mov	r2,r16
    3c68:	1c011316 	blt	r3,r16,40b8 <_dtoa_r+0xc1c>
    3c6c:	d9000a17 	ldw	r4,40(sp)
    3c70:	d9801117 	ldw	r6,68(sp)
    3c74:	80a1c83a 	sub	r16,r16,r2
    3c78:	2089c83a 	sub	r4,r4,r2
    3c7c:	308dc83a 	sub	r6,r6,r2
    3c80:	d9000a15 	stw	r4,40(sp)
    3c84:	d9801115 	stw	r6,68(sp)
    3c88:	d8801017 	ldw	r2,64(sp)
    3c8c:	0080150e 	bge	zero,r2,3ce4 <_dtoa_r+0x848>
    3c90:	d8c00b17 	ldw	r3,44(sp)
    3c94:	1805003a 	cmpeq	r2,r3,zero
    3c98:	1001c91e 	bne	r2,zero,43c0 <_dtoa_r+0xf24>
    3c9c:	04800e0e 	bge	zero,r18,3cd8 <_dtoa_r+0x83c>
    3ca0:	d9001617 	ldw	r4,88(sp)
    3ca4:	980b883a 	mov	r5,r19
    3ca8:	900d883a 	mov	r6,r18
    3cac:	00074b00 	call	74b0 <__pow5mult>
    3cb0:	d9001617 	ldw	r4,88(sp)
    3cb4:	d9800717 	ldw	r6,28(sp)
    3cb8:	100b883a 	mov	r5,r2
    3cbc:	1027883a 	mov	r19,r2
    3cc0:	00070f40 	call	70f4 <__multiply>
    3cc4:	d9001617 	ldw	r4,88(sp)
    3cc8:	d9400717 	ldw	r5,28(sp)
    3ccc:	1023883a 	mov	r17,r2
    3cd0:	00066640 	call	6664 <_Bfree>
    3cd4:	dc400715 	stw	r17,28(sp)
    3cd8:	d9001017 	ldw	r4,64(sp)
    3cdc:	248dc83a 	sub	r6,r4,r18
    3ce0:	30010e1e 	bne	r6,zero,411c <_dtoa_r+0xc80>
    3ce4:	d9001617 	ldw	r4,88(sp)
    3ce8:	04400044 	movi	r17,1
    3cec:	880b883a 	mov	r5,r17
    3cf0:	00073480 	call	7348 <__i2b>
    3cf4:	d9800917 	ldw	r6,36(sp)
    3cf8:	1025883a 	mov	r18,r2
    3cfc:	0180040e 	bge	zero,r6,3d10 <_dtoa_r+0x874>
    3d00:	d9001617 	ldw	r4,88(sp)
    3d04:	100b883a 	mov	r5,r2
    3d08:	00074b00 	call	74b0 <__pow5mult>
    3d0c:	1025883a 	mov	r18,r2
    3d10:	d8801717 	ldw	r2,92(sp)
    3d14:	8880f30e 	bge	r17,r2,40e4 <_dtoa_r+0xc48>
    3d18:	0023883a 	mov	r17,zero
    3d1c:	d9800917 	ldw	r6,36(sp)
    3d20:	30019e1e 	bne	r6,zero,439c <_dtoa_r+0xf00>
    3d24:	00c00044 	movi	r3,1
    3d28:	d9000a17 	ldw	r4,40(sp)
    3d2c:	20c5883a 	add	r2,r4,r3
    3d30:	10c007cc 	andi	r3,r2,31
    3d34:	1800841e 	bne	r3,zero,3f48 <_dtoa_r+0xaac>
    3d38:	00800704 	movi	r2,28
    3d3c:	d9000a17 	ldw	r4,40(sp)
    3d40:	d9801117 	ldw	r6,68(sp)
    3d44:	80a1883a 	add	r16,r16,r2
    3d48:	2089883a 	add	r4,r4,r2
    3d4c:	308d883a 	add	r6,r6,r2
    3d50:	d9000a15 	stw	r4,40(sp)
    3d54:	d9801115 	stw	r6,68(sp)
    3d58:	d8801117 	ldw	r2,68(sp)
    3d5c:	0080050e 	bge	zero,r2,3d74 <_dtoa_r+0x8d8>
    3d60:	d9400717 	ldw	r5,28(sp)
    3d64:	d9001617 	ldw	r4,88(sp)
    3d68:	100d883a 	mov	r6,r2
    3d6c:	0006fa80 	call	6fa8 <__lshift>
    3d70:	d8800715 	stw	r2,28(sp)
    3d74:	d8c00a17 	ldw	r3,40(sp)
    3d78:	00c0050e 	bge	zero,r3,3d90 <_dtoa_r+0x8f4>
    3d7c:	d9001617 	ldw	r4,88(sp)
    3d80:	900b883a 	mov	r5,r18
    3d84:	180d883a 	mov	r6,r3
    3d88:	0006fa80 	call	6fa8 <__lshift>
    3d8c:	1025883a 	mov	r18,r2
    3d90:	d9000c17 	ldw	r4,48(sp)
    3d94:	2005003a 	cmpeq	r2,r4,zero
    3d98:	10016f26 	beq	r2,zero,4358 <_dtoa_r+0xebc>
    3d9c:	d9000f17 	ldw	r4,60(sp)
    3da0:	0102170e 	bge	zero,r4,4600 <_dtoa_r+0x1164>
    3da4:	d9800b17 	ldw	r6,44(sp)
    3da8:	3005003a 	cmpeq	r2,r6,zero
    3dac:	1000881e 	bne	r2,zero,3fd0 <_dtoa_r+0xb34>
    3db0:	0400050e 	bge	zero,r16,3dc8 <_dtoa_r+0x92c>
    3db4:	d9001617 	ldw	r4,88(sp)
    3db8:	980b883a 	mov	r5,r19
    3dbc:	800d883a 	mov	r6,r16
    3dc0:	0006fa80 	call	6fa8 <__lshift>
    3dc4:	1027883a 	mov	r19,r2
    3dc8:	8804c03a 	cmpne	r2,r17,zero
    3dcc:	1002541e 	bne	r2,zero,4720 <_dtoa_r+0x1284>
    3dd0:	980b883a 	mov	r5,r19
    3dd4:	dd800517 	ldw	r22,20(sp)
    3dd8:	dcc00615 	stw	r19,24(sp)
    3ddc:	a700004c 	andi	fp,r20,1
    3de0:	2827883a 	mov	r19,r5
    3de4:	d9000717 	ldw	r4,28(sp)
    3de8:	900b883a 	mov	r5,r18
    3dec:	00032580 	call	3258 <quorem>
    3df0:	d9000717 	ldw	r4,28(sp)
    3df4:	d9400617 	ldw	r5,24(sp)
    3df8:	1023883a 	mov	r17,r2
    3dfc:	8dc00c04 	addi	r23,r17,48
    3e00:	00067c00 	call	67c0 <__mcmp>
    3e04:	d9001617 	ldw	r4,88(sp)
    3e08:	900b883a 	mov	r5,r18
    3e0c:	980d883a 	mov	r6,r19
    3e10:	1029883a 	mov	r20,r2
    3e14:	0006e1c0 	call	6e1c <__mdiff>
    3e18:	102b883a 	mov	r21,r2
    3e1c:	10800317 	ldw	r2,12(r2)
    3e20:	1001281e 	bne	r2,zero,42c4 <_dtoa_r+0xe28>
    3e24:	d9000717 	ldw	r4,28(sp)
    3e28:	a80b883a 	mov	r5,r21
    3e2c:	00067c00 	call	67c0 <__mcmp>
    3e30:	d9001617 	ldw	r4,88(sp)
    3e34:	1021883a 	mov	r16,r2
    3e38:	a80b883a 	mov	r5,r21
    3e3c:	00066640 	call	6664 <_Bfree>
    3e40:	8000041e 	bne	r16,zero,3e54 <_dtoa_r+0x9b8>
    3e44:	d8801717 	ldw	r2,92(sp)
    3e48:	1000021e 	bne	r2,zero,3e54 <_dtoa_r+0x9b8>
    3e4c:	e004c03a 	cmpne	r2,fp,zero
    3e50:	10011726 	beq	r2,zero,42b0 <_dtoa_r+0xe14>
    3e54:	a0010616 	blt	r20,zero,4270 <_dtoa_r+0xdd4>
    3e58:	a000041e 	bne	r20,zero,3e6c <_dtoa_r+0x9d0>
    3e5c:	d8c01717 	ldw	r3,92(sp)
    3e60:	1800021e 	bne	r3,zero,3e6c <_dtoa_r+0x9d0>
    3e64:	e004c03a 	cmpne	r2,fp,zero
    3e68:	10010126 	beq	r2,zero,4270 <_dtoa_r+0xdd4>
    3e6c:	04023d16 	blt	zero,r16,4764 <_dtoa_r+0x12c8>
    3e70:	b5c00005 	stb	r23,0(r22)
    3e74:	d9800517 	ldw	r6,20(sp)
    3e78:	d9000f17 	ldw	r4,60(sp)
    3e7c:	b5800044 	addi	r22,r22,1
    3e80:	3105883a 	add	r2,r6,r4
    3e84:	b0806526 	beq	r22,r2,401c <_dtoa_r+0xb80>
    3e88:	d9400717 	ldw	r5,28(sp)
    3e8c:	d9001617 	ldw	r4,88(sp)
    3e90:	01800284 	movi	r6,10
    3e94:	000f883a 	mov	r7,zero
    3e98:	00073840 	call	7384 <__multadd>
    3e9c:	d8800715 	stw	r2,28(sp)
    3ea0:	d8800617 	ldw	r2,24(sp)
    3ea4:	14c10c26 	beq	r2,r19,42d8 <_dtoa_r+0xe3c>
    3ea8:	d9400617 	ldw	r5,24(sp)
    3eac:	d9001617 	ldw	r4,88(sp)
    3eb0:	01800284 	movi	r6,10
    3eb4:	000f883a 	mov	r7,zero
    3eb8:	00073840 	call	7384 <__multadd>
    3ebc:	d9001617 	ldw	r4,88(sp)
    3ec0:	980b883a 	mov	r5,r19
    3ec4:	01800284 	movi	r6,10
    3ec8:	000f883a 	mov	r7,zero
    3ecc:	d8800615 	stw	r2,24(sp)
    3ed0:	00073840 	call	7384 <__multadd>
    3ed4:	1027883a 	mov	r19,r2
    3ed8:	003fc206 	br	3de4 <_dtoa_r+0x948>
    3edc:	2445c83a 	sub	r2,r4,r17
    3ee0:	a088983a 	sll	r4,r20,r2
    3ee4:	003e4b06 	br	3814 <_dtoa_r+0x378>
    3ee8:	01bfffc4 	movi	r6,-1
    3eec:	00800044 	movi	r2,1
    3ef0:	d9800e15 	stw	r6,56(sp)
    3ef4:	d9800f15 	stw	r6,60(sp)
    3ef8:	d8800b15 	stw	r2,44(sp)
    3efc:	d8c01617 	ldw	r3,88(sp)
    3f00:	008005c4 	movi	r2,23
    3f04:	18001115 	stw	zero,68(r3)
    3f08:	1580082e 	bgeu	r2,r22,3f2c <_dtoa_r+0xa90>
    3f0c:	00c00104 	movi	r3,4
    3f10:	0009883a 	mov	r4,zero
    3f14:	18c7883a 	add	r3,r3,r3
    3f18:	18800504 	addi	r2,r3,20
    3f1c:	21000044 	addi	r4,r4,1
    3f20:	b0bffc2e 	bgeu	r22,r2,3f14 <_dtoa_r+0xa78>
    3f24:	d9801617 	ldw	r6,88(sp)
    3f28:	31001115 	stw	r4,68(r6)
    3f2c:	dc000f17 	ldw	r16,60(sp)
    3f30:	003e4b06 	br	3860 <_dtoa_r+0x3c4>
    3f34:	d9801717 	ldw	r6,92(sp)
    3f38:	0023883a 	mov	r17,zero
    3f3c:	31bfff04 	addi	r6,r6,-4
    3f40:	d9801715 	stw	r6,92(sp)
    3f44:	003df806 	br	3728 <_dtoa_r+0x28c>
    3f48:	00800804 	movi	r2,32
    3f4c:	10c9c83a 	sub	r4,r2,r3
    3f50:	00c00104 	movi	r3,4
    3f54:	19005a16 	blt	r3,r4,40c0 <_dtoa_r+0xc24>
    3f58:	008000c4 	movi	r2,3
    3f5c:	113f7e16 	blt	r2,r4,3d58 <_dtoa_r+0x8bc>
    3f60:	20800704 	addi	r2,r4,28
    3f64:	003f7506 	br	3d3c <_dtoa_r+0x8a0>
    3f68:	d9801717 	ldw	r6,92(sp)
    3f6c:	00800044 	movi	r2,1
    3f70:	1180a10e 	bge	r2,r6,41f8 <_dtoa_r+0xd5c>
    3f74:	d9800f17 	ldw	r6,60(sp)
    3f78:	d8c01017 	ldw	r3,64(sp)
    3f7c:	30bfffc4 	addi	r2,r6,-1
    3f80:	1881c616 	blt	r3,r2,469c <_dtoa_r+0x1200>
    3f84:	18a5c83a 	sub	r18,r3,r2
    3f88:	d8800f17 	ldw	r2,60(sp)
    3f8c:	10026216 	blt	r2,zero,4918 <_dtoa_r+0x147c>
    3f90:	dc001117 	ldw	r16,68(sp)
    3f94:	1007883a 	mov	r3,r2
    3f98:	d9800a17 	ldw	r6,40(sp)
    3f9c:	d8801117 	ldw	r2,68(sp)
    3fa0:	d9001617 	ldw	r4,88(sp)
    3fa4:	30cd883a 	add	r6,r6,r3
    3fa8:	10c5883a 	add	r2,r2,r3
    3fac:	01400044 	movi	r5,1
    3fb0:	d9800a15 	stw	r6,40(sp)
    3fb4:	d8801115 	stw	r2,68(sp)
    3fb8:	00073480 	call	7348 <__i2b>
    3fbc:	1027883a 	mov	r19,r2
    3fc0:	003f2506 	br	3c58 <_dtoa_r+0x7bc>
    3fc4:	00c00074 	movhi	r3,1
    3fc8:	18f69104 	addi	r3,r3,-9660
    3fcc:	003d6706 	br	356c <_dtoa_r+0xd0>
    3fd0:	dd800517 	ldw	r22,20(sp)
    3fd4:	04000044 	movi	r16,1
    3fd8:	00000706 	br	3ff8 <_dtoa_r+0xb5c>
    3fdc:	d9400717 	ldw	r5,28(sp)
    3fe0:	d9001617 	ldw	r4,88(sp)
    3fe4:	01800284 	movi	r6,10
    3fe8:	000f883a 	mov	r7,zero
    3fec:	00073840 	call	7384 <__multadd>
    3ff0:	d8800715 	stw	r2,28(sp)
    3ff4:	84000044 	addi	r16,r16,1
    3ff8:	d9000717 	ldw	r4,28(sp)
    3ffc:	900b883a 	mov	r5,r18
    4000:	00032580 	call	3258 <quorem>
    4004:	15c00c04 	addi	r23,r2,48
    4008:	b5c00005 	stb	r23,0(r22)
    400c:	d8c00f17 	ldw	r3,60(sp)
    4010:	b5800044 	addi	r22,r22,1
    4014:	80fff116 	blt	r16,r3,3fdc <_dtoa_r+0xb40>
    4018:	d8000615 	stw	zero,24(sp)
    401c:	d9400717 	ldw	r5,28(sp)
    4020:	d9001617 	ldw	r4,88(sp)
    4024:	01800044 	movi	r6,1
    4028:	0006fa80 	call	6fa8 <__lshift>
    402c:	1009883a 	mov	r4,r2
    4030:	900b883a 	mov	r5,r18
    4034:	d8800715 	stw	r2,28(sp)
    4038:	00067c00 	call	67c0 <__mcmp>
    403c:	00803c0e 	bge	zero,r2,4130 <_dtoa_r+0xc94>
    4040:	b009883a 	mov	r4,r22
    4044:	213fffc4 	addi	r4,r4,-1
    4048:	21400003 	ldbu	r5,0(r4)
    404c:	00800e44 	movi	r2,57
    4050:	28c03fcc 	andi	r3,r5,255
    4054:	18c0201c 	xori	r3,r3,128
    4058:	18ffe004 	addi	r3,r3,-128
    405c:	1881981e 	bne	r3,r2,46c0 <_dtoa_r+0x1224>
    4060:	d9800517 	ldw	r6,20(sp)
    4064:	21bff71e 	bne	r4,r6,4044 <_dtoa_r+0xba8>
    4068:	d8800d17 	ldw	r2,52(sp)
    406c:	37000044 	addi	fp,r6,1
    4070:	10800044 	addi	r2,r2,1
    4074:	d8800d15 	stw	r2,52(sp)
    4078:	00800c44 	movi	r2,49
    407c:	30800005 	stb	r2,0(r6)
    4080:	d9001617 	ldw	r4,88(sp)
    4084:	900b883a 	mov	r5,r18
    4088:	00066640 	call	6664 <_Bfree>
    408c:	983ecd26 	beq	r19,zero,3bc4 <_dtoa_r+0x728>
    4090:	d8c00617 	ldw	r3,24(sp)
    4094:	18000426 	beq	r3,zero,40a8 <_dtoa_r+0xc0c>
    4098:	1cc00326 	beq	r3,r19,40a8 <_dtoa_r+0xc0c>
    409c:	d9001617 	ldw	r4,88(sp)
    40a0:	180b883a 	mov	r5,r3
    40a4:	00066640 	call	6664 <_Bfree>
    40a8:	d9001617 	ldw	r4,88(sp)
    40ac:	980b883a 	mov	r5,r19
    40b0:	00066640 	call	6664 <_Bfree>
    40b4:	003ec306 	br	3bc4 <_dtoa_r+0x728>
    40b8:	1805883a 	mov	r2,r3
    40bc:	003eeb06 	br	3c6c <_dtoa_r+0x7d0>
    40c0:	d9800a17 	ldw	r6,40(sp)
    40c4:	d8c01117 	ldw	r3,68(sp)
    40c8:	20bfff04 	addi	r2,r4,-4
    40cc:	308d883a 	add	r6,r6,r2
    40d0:	1887883a 	add	r3,r3,r2
    40d4:	80a1883a 	add	r16,r16,r2
    40d8:	d9800a15 	stw	r6,40(sp)
    40dc:	d8c01115 	stw	r3,68(sp)
    40e0:	003f1d06 	br	3d58 <_dtoa_r+0x8bc>
    40e4:	a03f0c1e 	bne	r20,zero,3d18 <_dtoa_r+0x87c>
    40e8:	00800434 	movhi	r2,16
    40ec:	10bfffc4 	addi	r2,r2,-1
    40f0:	a884703a 	and	r2,r21,r2
    40f4:	103f081e 	bne	r2,zero,3d18 <_dtoa_r+0x87c>
    40f8:	a89ffc2c 	andhi	r2,r21,32752
    40fc:	103f0626 	beq	r2,zero,3d18 <_dtoa_r+0x87c>
    4100:	d8c01117 	ldw	r3,68(sp)
    4104:	d9000a17 	ldw	r4,40(sp)
    4108:	18c00044 	addi	r3,r3,1
    410c:	21000044 	addi	r4,r4,1
    4110:	d8c01115 	stw	r3,68(sp)
    4114:	d9000a15 	stw	r4,40(sp)
    4118:	003f0006 	br	3d1c <_dtoa_r+0x880>
    411c:	d9400717 	ldw	r5,28(sp)
    4120:	d9001617 	ldw	r4,88(sp)
    4124:	00074b00 	call	74b0 <__pow5mult>
    4128:	d8800715 	stw	r2,28(sp)
    412c:	003eed06 	br	3ce4 <_dtoa_r+0x848>
    4130:	1000021e 	bne	r2,zero,413c <_dtoa_r+0xca0>
    4134:	b880004c 	andi	r2,r23,1
    4138:	103fc11e 	bne	r2,zero,4040 <_dtoa_r+0xba4>
    413c:	b5bfffc4 	addi	r22,r22,-1
    4140:	b0c00007 	ldb	r3,0(r22)
    4144:	00800c04 	movi	r2,48
    4148:	18bffc26 	beq	r3,r2,413c <_dtoa_r+0xca0>
    414c:	b7000044 	addi	fp,r22,1
    4150:	003fcb06 	br	4080 <_dtoa_r+0xbe4>
    4154:	d9800d17 	ldw	r6,52(sp)
    4158:	018fc83a 	sub	r7,zero,r6
    415c:	3801f726 	beq	r7,zero,493c <_dtoa_r+0x14a0>
    4160:	398003cc 	andi	r6,r7,15
    4164:	300c90fa 	slli	r6,r6,3
    4168:	01400074 	movhi	r5,1
    416c:	2976ae04 	addi	r5,r5,-9544
    4170:	d9001217 	ldw	r4,72(sp)
    4174:	314d883a 	add	r6,r6,r5
    4178:	30c00117 	ldw	r3,4(r6)
    417c:	30800017 	ldw	r2,0(r6)
    4180:	d9401317 	ldw	r5,76(sp)
    4184:	3821d13a 	srai	r16,r7,4
    4188:	100d883a 	mov	r6,r2
    418c:	180f883a 	mov	r7,r3
    4190:	00096440 	call	9644 <__muldf3>
    4194:	1011883a 	mov	r8,r2
    4198:	1813883a 	mov	r9,r3
    419c:	1029883a 	mov	r20,r2
    41a0:	182b883a 	mov	r21,r3
    41a4:	8001e526 	beq	r16,zero,493c <_dtoa_r+0x14a0>
    41a8:	05800084 	movi	r22,2
    41ac:	04400074 	movhi	r17,1
    41b0:	8c76e004 	addi	r17,r17,-9344
    41b4:	8080004c 	andi	r2,r16,1
    41b8:	1005003a 	cmpeq	r2,r2,zero
    41bc:	1000081e 	bne	r2,zero,41e0 <_dtoa_r+0xd44>
    41c0:	89800017 	ldw	r6,0(r17)
    41c4:	89c00117 	ldw	r7,4(r17)
    41c8:	480b883a 	mov	r5,r9
    41cc:	4009883a 	mov	r4,r8
    41d0:	00096440 	call	9644 <__muldf3>
    41d4:	1011883a 	mov	r8,r2
    41d8:	b5800044 	addi	r22,r22,1
    41dc:	1813883a 	mov	r9,r3
    41e0:	8021d07a 	srai	r16,r16,1
    41e4:	8c400204 	addi	r17,r17,8
    41e8:	803ff21e 	bne	r16,zero,41b4 <_dtoa_r+0xd18>
    41ec:	4029883a 	mov	r20,r8
    41f0:	482b883a 	mov	r21,r9
    41f4:	003dca06 	br	3920 <_dtoa_r+0x484>
    41f8:	d9000817 	ldw	r4,32(sp)
    41fc:	2005003a 	cmpeq	r2,r4,zero
    4200:	1001f61e 	bne	r2,zero,49dc <_dtoa_r+0x1540>
    4204:	dc001117 	ldw	r16,68(sp)
    4208:	dc801017 	ldw	r18,64(sp)
    420c:	18c10cc4 	addi	r3,r3,1075
    4210:	003f6106 	br	3f98 <_dtoa_r+0xafc>
    4214:	d8000b15 	stw	zero,44(sp)
    4218:	d9802617 	ldw	r6,152(sp)
    421c:	d8c00d17 	ldw	r3,52(sp)
    4220:	30800044 	addi	r2,r6,1
    4224:	18ad883a 	add	r22,r3,r2
    4228:	b13fffc4 	addi	r4,r22,-1
    422c:	d9000e15 	stw	r4,56(sp)
    4230:	0581f60e 	bge	zero,r22,4a0c <_dtoa_r+0x1570>
    4234:	dd800f15 	stw	r22,60(sp)
    4238:	003f3006 	br	3efc <_dtoa_r+0xa60>
    423c:	d8000b15 	stw	zero,44(sp)
    4240:	d9002617 	ldw	r4,152(sp)
    4244:	0101eb0e 	bge	zero,r4,49f4 <_dtoa_r+0x1558>
    4248:	202d883a 	mov	r22,r4
    424c:	d9000e15 	stw	r4,56(sp)
    4250:	d9000f15 	stw	r4,60(sp)
    4254:	003f2906 	br	3efc <_dtoa_r+0xa60>
    4258:	01800044 	movi	r6,1
    425c:	d9800b15 	stw	r6,44(sp)
    4260:	003ff706 	br	4240 <_dtoa_r+0xda4>
    4264:	01000044 	movi	r4,1
    4268:	d9000b15 	stw	r4,44(sp)
    426c:	003fea06 	br	4218 <_dtoa_r+0xd7c>
    4270:	04000c0e 	bge	zero,r16,42a4 <_dtoa_r+0xe08>
    4274:	d9400717 	ldw	r5,28(sp)
    4278:	d9001617 	ldw	r4,88(sp)
    427c:	01800044 	movi	r6,1
    4280:	0006fa80 	call	6fa8 <__lshift>
    4284:	1009883a 	mov	r4,r2
    4288:	900b883a 	mov	r5,r18
    428c:	d8800715 	stw	r2,28(sp)
    4290:	00067c00 	call	67c0 <__mcmp>
    4294:	0081e00e 	bge	zero,r2,4a18 <_dtoa_r+0x157c>
    4298:	bdc00044 	addi	r23,r23,1
    429c:	00800e84 	movi	r2,58
    42a0:	b881a226 	beq	r23,r2,492c <_dtoa_r+0x1490>
    42a4:	b7000044 	addi	fp,r22,1
    42a8:	b5c00005 	stb	r23,0(r22)
    42ac:	003f7406 	br	4080 <_dtoa_r+0xbe4>
    42b0:	00800e44 	movi	r2,57
    42b4:	b8819d26 	beq	r23,r2,492c <_dtoa_r+0x1490>
    42b8:	053ffa0e 	bge	zero,r20,42a4 <_dtoa_r+0xe08>
    42bc:	8dc00c44 	addi	r23,r17,49
    42c0:	003ff806 	br	42a4 <_dtoa_r+0xe08>
    42c4:	d9001617 	ldw	r4,88(sp)
    42c8:	a80b883a 	mov	r5,r21
    42cc:	04000044 	movi	r16,1
    42d0:	00066640 	call	6664 <_Bfree>
    42d4:	003edf06 	br	3e54 <_dtoa_r+0x9b8>
    42d8:	d9001617 	ldw	r4,88(sp)
    42dc:	980b883a 	mov	r5,r19
    42e0:	01800284 	movi	r6,10
    42e4:	000f883a 	mov	r7,zero
    42e8:	00073840 	call	7384 <__multadd>
    42ec:	1027883a 	mov	r19,r2
    42f0:	d8800615 	stw	r2,24(sp)
    42f4:	003ebb06 	br	3de4 <_dtoa_r+0x948>
    42f8:	d9801117 	ldw	r6,68(sp)
    42fc:	d8800d17 	ldw	r2,52(sp)
    4300:	d8000915 	stw	zero,36(sp)
    4304:	308dc83a 	sub	r6,r6,r2
    4308:	0087c83a 	sub	r3,zero,r2
    430c:	d9801115 	stw	r6,68(sp)
    4310:	d8c01015 	stw	r3,64(sp)
    4314:	003cfe06 	br	3710 <_dtoa_r+0x274>
    4318:	018dc83a 	sub	r6,zero,r6
    431c:	d9801115 	stw	r6,68(sp)
    4320:	d8000a15 	stw	zero,40(sp)
    4324:	003cf306 	br	36f4 <_dtoa_r+0x258>
    4328:	d9000d17 	ldw	r4,52(sp)
    432c:	0009f080 	call	9f08 <__floatsidf>
    4330:	880b883a 	mov	r5,r17
    4334:	8009883a 	mov	r4,r16
    4338:	180f883a 	mov	r7,r3
    433c:	100d883a 	mov	r6,r2
    4340:	0009ce80 	call	9ce8 <__nedf2>
    4344:	103ce126 	beq	r2,zero,36cc <_dtoa_r+0x230>
    4348:	d9800d17 	ldw	r6,52(sp)
    434c:	31bfffc4 	addi	r6,r6,-1
    4350:	d9800d15 	stw	r6,52(sp)
    4354:	003cdd06 	br	36cc <_dtoa_r+0x230>
    4358:	d9000717 	ldw	r4,28(sp)
    435c:	900b883a 	mov	r5,r18
    4360:	00067c00 	call	67c0 <__mcmp>
    4364:	103e8d0e 	bge	r2,zero,3d9c <_dtoa_r+0x900>
    4368:	d9400717 	ldw	r5,28(sp)
    436c:	d9001617 	ldw	r4,88(sp)
    4370:	01800284 	movi	r6,10
    4374:	000f883a 	mov	r7,zero
    4378:	00073840 	call	7384 <__multadd>
    437c:	d9800d17 	ldw	r6,52(sp)
    4380:	d8800715 	stw	r2,28(sp)
    4384:	31bfffc4 	addi	r6,r6,-1
    4388:	d9800d15 	stw	r6,52(sp)
    438c:	b001a71e 	bne	r22,zero,4a2c <_dtoa_r+0x1590>
    4390:	d8800e17 	ldw	r2,56(sp)
    4394:	d8800f15 	stw	r2,60(sp)
    4398:	003e8006 	br	3d9c <_dtoa_r+0x900>
    439c:	90800417 	ldw	r2,16(r18)
    43a0:	1085883a 	add	r2,r2,r2
    43a4:	1085883a 	add	r2,r2,r2
    43a8:	1485883a 	add	r2,r2,r18
    43ac:	11000417 	ldw	r4,16(r2)
    43b0:	000668c0 	call	668c <__hi0bits>
    43b4:	00c00804 	movi	r3,32
    43b8:	1887c83a 	sub	r3,r3,r2
    43bc:	003e5a06 	br	3d28 <_dtoa_r+0x88c>
    43c0:	d9400717 	ldw	r5,28(sp)
    43c4:	d9801017 	ldw	r6,64(sp)
    43c8:	d9001617 	ldw	r4,88(sp)
    43cc:	00074b00 	call	74b0 <__pow5mult>
    43d0:	d8800715 	stw	r2,28(sp)
    43d4:	003e4306 	br	3ce4 <_dtoa_r+0x848>
    43d8:	d9800f17 	ldw	r6,60(sp)
    43dc:	d8800d17 	ldw	r2,52(sp)
    43e0:	d9800315 	stw	r6,12(sp)
    43e4:	d8800415 	stw	r2,16(sp)
    43e8:	d8c00b17 	ldw	r3,44(sp)
    43ec:	1805003a 	cmpeq	r2,r3,zero
    43f0:	1000e21e 	bne	r2,zero,477c <_dtoa_r+0x12e0>
    43f4:	d9000317 	ldw	r4,12(sp)
    43f8:	0005883a 	mov	r2,zero
    43fc:	00cff834 	movhi	r3,16352
    4400:	200c90fa 	slli	r6,r4,3
    4404:	01000074 	movhi	r4,1
    4408:	2136ae04 	addi	r4,r4,-9544
    440c:	180b883a 	mov	r5,r3
    4410:	310d883a 	add	r6,r6,r4
    4414:	327fff17 	ldw	r9,-4(r6)
    4418:	323ffe17 	ldw	r8,-8(r6)
    441c:	1009883a 	mov	r4,r2
    4420:	480f883a 	mov	r7,r9
    4424:	400d883a 	mov	r6,r8
    4428:	0009a080 	call	9a08 <__divdf3>
    442c:	180b883a 	mov	r5,r3
    4430:	b00d883a 	mov	r6,r22
    4434:	b80f883a 	mov	r7,r23
    4438:	1009883a 	mov	r4,r2
    443c:	00095500 	call	9550 <__subdf3>
    4440:	a80b883a 	mov	r5,r21
    4444:	a009883a 	mov	r4,r20
    4448:	d8c01915 	stw	r3,100(sp)
    444c:	d8801815 	stw	r2,96(sp)
    4450:	000a0000 	call	a000 <__fixdfsi>
    4454:	1009883a 	mov	r4,r2
    4458:	1027883a 	mov	r19,r2
    445c:	0009f080 	call	9f08 <__floatsidf>
    4460:	a80b883a 	mov	r5,r21
    4464:	a009883a 	mov	r4,r20
    4468:	180f883a 	mov	r7,r3
    446c:	100d883a 	mov	r6,r2
    4470:	00095500 	call	9550 <__subdf3>
    4474:	d9801817 	ldw	r6,96(sp)
    4478:	1823883a 	mov	r17,r3
    447c:	d8801415 	stw	r2,80(sp)
    4480:	302d883a 	mov	r22,r6
    4484:	d9800517 	ldw	r6,20(sp)
    4488:	9cc00c04 	addi	r19,r19,48
    448c:	dc401515 	stw	r17,84(sp)
    4490:	d8c01917 	ldw	r3,100(sp)
    4494:	34c00005 	stb	r19,0(r6)
    4498:	d8800517 	ldw	r2,20(sp)
    449c:	d9401917 	ldw	r5,100(sp)
    44a0:	d9801417 	ldw	r6,80(sp)
    44a4:	b009883a 	mov	r4,r22
    44a8:	880f883a 	mov	r7,r17
    44ac:	182f883a 	mov	r23,r3
    44b0:	17000044 	addi	fp,r2,1
    44b4:	0009d700 	call	9d70 <__gtdf2>
    44b8:	00804e16 	blt	zero,r2,45f4 <_dtoa_r+0x1158>
    44bc:	d9801417 	ldw	r6,80(sp)
    44c0:	0005883a 	mov	r2,zero
    44c4:	00cffc34 	movhi	r3,16368
    44c8:	180b883a 	mov	r5,r3
    44cc:	880f883a 	mov	r7,r17
    44d0:	1009883a 	mov	r4,r2
    44d4:	00095500 	call	9550 <__subdf3>
    44d8:	d9401917 	ldw	r5,100(sp)
    44dc:	180f883a 	mov	r7,r3
    44e0:	b009883a 	mov	r4,r22
    44e4:	100d883a 	mov	r6,r2
    44e8:	0009d700 	call	9d70 <__gtdf2>
    44ec:	00bda216 	blt	zero,r2,3b78 <_dtoa_r+0x6dc>
    44f0:	d8c00317 	ldw	r3,12(sp)
    44f4:	00800044 	movi	r2,1
    44f8:	10c01216 	blt	r2,r3,4544 <_dtoa_r+0x10a8>
    44fc:	003d4506 	br	3a14 <_dtoa_r+0x578>
    4500:	d9801417 	ldw	r6,80(sp)
    4504:	0005883a 	mov	r2,zero
    4508:	00cffc34 	movhi	r3,16368
    450c:	180b883a 	mov	r5,r3
    4510:	880f883a 	mov	r7,r17
    4514:	1009883a 	mov	r4,r2
    4518:	00095500 	call	9550 <__subdf3>
    451c:	d9c01b17 	ldw	r7,108(sp)
    4520:	180b883a 	mov	r5,r3
    4524:	1009883a 	mov	r4,r2
    4528:	b00d883a 	mov	r6,r22
    452c:	0009e800 	call	9e80 <__ltdf2>
    4530:	103d9116 	blt	r2,zero,3b78 <_dtoa_r+0x6dc>
    4534:	d9800517 	ldw	r6,20(sp)
    4538:	d9000317 	ldw	r4,12(sp)
    453c:	3105883a 	add	r2,r6,r4
    4540:	e0bd3426 	beq	fp,r2,3a14 <_dtoa_r+0x578>
    4544:	04500934 	movhi	r17,16420
    4548:	0021883a 	mov	r16,zero
    454c:	b80b883a 	mov	r5,r23
    4550:	b009883a 	mov	r4,r22
    4554:	800d883a 	mov	r6,r16
    4558:	880f883a 	mov	r7,r17
    455c:	00096440 	call	9644 <__muldf3>
    4560:	d9401517 	ldw	r5,84(sp)
    4564:	d9001417 	ldw	r4,80(sp)
    4568:	880f883a 	mov	r7,r17
    456c:	000d883a 	mov	r6,zero
    4570:	d8801a15 	stw	r2,104(sp)
    4574:	d8c01b15 	stw	r3,108(sp)
    4578:	00096440 	call	9644 <__muldf3>
    457c:	180b883a 	mov	r5,r3
    4580:	1009883a 	mov	r4,r2
    4584:	1823883a 	mov	r17,r3
    4588:	1021883a 	mov	r16,r2
    458c:	000a0000 	call	a000 <__fixdfsi>
    4590:	1009883a 	mov	r4,r2
    4594:	102b883a 	mov	r21,r2
    4598:	0009f080 	call	9f08 <__floatsidf>
    459c:	880b883a 	mov	r5,r17
    45a0:	8009883a 	mov	r4,r16
    45a4:	180f883a 	mov	r7,r3
    45a8:	100d883a 	mov	r6,r2
    45ac:	00095500 	call	9550 <__subdf3>
    45b0:	1021883a 	mov	r16,r2
    45b4:	d9001b17 	ldw	r4,108(sp)
    45b8:	1823883a 	mov	r17,r3
    45bc:	dc001415 	stw	r16,80(sp)
    45c0:	ad400c04 	addi	r21,r21,48
    45c4:	dc401515 	stw	r17,84(sp)
    45c8:	d8801a17 	ldw	r2,104(sp)
    45cc:	e5400005 	stb	r21,0(fp)
    45d0:	202f883a 	mov	r23,r4
    45d4:	d9c01b17 	ldw	r7,108(sp)
    45d8:	d9001417 	ldw	r4,80(sp)
    45dc:	880b883a 	mov	r5,r17
    45e0:	100d883a 	mov	r6,r2
    45e4:	102d883a 	mov	r22,r2
    45e8:	e7000044 	addi	fp,fp,1
    45ec:	0009e800 	call	9e80 <__ltdf2>
    45f0:	103fc30e 	bge	r2,zero,4500 <_dtoa_r+0x1064>
    45f4:	d9000417 	ldw	r4,16(sp)
    45f8:	d9000d15 	stw	r4,52(sp)
    45fc:	003d7106 	br	3bc4 <_dtoa_r+0x728>
    4600:	d9801717 	ldw	r6,92(sp)
    4604:	00800084 	movi	r2,2
    4608:	11bde60e 	bge	r2,r6,3da4 <_dtoa_r+0x908>
    460c:	203cfb1e 	bne	r4,zero,39fc <_dtoa_r+0x560>
    4610:	d9001617 	ldw	r4,88(sp)
    4614:	900b883a 	mov	r5,r18
    4618:	01800144 	movi	r6,5
    461c:	000f883a 	mov	r7,zero
    4620:	00073840 	call	7384 <__multadd>
    4624:	d9000717 	ldw	r4,28(sp)
    4628:	100b883a 	mov	r5,r2
    462c:	1025883a 	mov	r18,r2
    4630:	00067c00 	call	67c0 <__mcmp>
    4634:	00bcf10e 	bge	zero,r2,39fc <_dtoa_r+0x560>
    4638:	d8c00d17 	ldw	r3,52(sp)
    463c:	d9000517 	ldw	r4,20(sp)
    4640:	d8000615 	stw	zero,24(sp)
    4644:	18c00044 	addi	r3,r3,1
    4648:	d8c00d15 	stw	r3,52(sp)
    464c:	00800c44 	movi	r2,49
    4650:	27000044 	addi	fp,r4,1
    4654:	20800005 	stb	r2,0(r4)
    4658:	003e8906 	br	4080 <_dtoa_r+0xbe4>
    465c:	d8c00517 	ldw	r3,20(sp)
    4660:	003bc206 	br	356c <_dtoa_r+0xd0>
    4664:	01800074 	movhi	r6,1
    4668:	31b6e004 	addi	r6,r6,-9344
    466c:	30c00917 	ldw	r3,36(r6)
    4670:	30800817 	ldw	r2,32(r6)
    4674:	d9001217 	ldw	r4,72(sp)
    4678:	d9401317 	ldw	r5,76(sp)
    467c:	180f883a 	mov	r7,r3
    4680:	100d883a 	mov	r6,r2
    4684:	0009a080 	call	9a08 <__divdf3>
    4688:	948003cc 	andi	r18,r18,15
    468c:	058000c4 	movi	r22,3
    4690:	1029883a 	mov	r20,r2
    4694:	182b883a 	mov	r21,r3
    4698:	003c8906 	br	38c0 <_dtoa_r+0x424>
    469c:	d9001017 	ldw	r4,64(sp)
    46a0:	d9800917 	ldw	r6,36(sp)
    46a4:	0025883a 	mov	r18,zero
    46a8:	1105c83a 	sub	r2,r2,r4
    46ac:	2089883a 	add	r4,r4,r2
    46b0:	308d883a 	add	r6,r6,r2
    46b4:	d9001015 	stw	r4,64(sp)
    46b8:	d9800915 	stw	r6,36(sp)
    46bc:	003e3206 	br	3f88 <_dtoa_r+0xaec>
    46c0:	28800044 	addi	r2,r5,1
    46c4:	27000044 	addi	fp,r4,1
    46c8:	20800005 	stb	r2,0(r4)
    46cc:	003e6c06 	br	4080 <_dtoa_r+0xbe4>
    46d0:	d8800f17 	ldw	r2,60(sp)
    46d4:	00bce016 	blt	zero,r2,3a58 <_dtoa_r+0x5bc>
    46d8:	d9800f17 	ldw	r6,60(sp)
    46dc:	303cc51e 	bne	r6,zero,39f4 <_dtoa_r+0x558>
    46e0:	0005883a 	mov	r2,zero
    46e4:	00d00534 	movhi	r3,16404
    46e8:	980b883a 	mov	r5,r19
    46ec:	180f883a 	mov	r7,r3
    46f0:	9009883a 	mov	r4,r18
    46f4:	100d883a 	mov	r6,r2
    46f8:	00096440 	call	9644 <__muldf3>
    46fc:	180b883a 	mov	r5,r3
    4700:	a80f883a 	mov	r7,r21
    4704:	1009883a 	mov	r4,r2
    4708:	a00d883a 	mov	r6,r20
    470c:	0009df80 	call	9df8 <__gedf2>
    4710:	103cb80e 	bge	r2,zero,39f4 <_dtoa_r+0x558>
    4714:	0027883a 	mov	r19,zero
    4718:	0025883a 	mov	r18,zero
    471c:	003fc606 	br	4638 <_dtoa_r+0x119c>
    4720:	99400117 	ldw	r5,4(r19)
    4724:	d9001617 	ldw	r4,88(sp)
    4728:	0006be40 	call	6be4 <_Balloc>
    472c:	99800417 	ldw	r6,16(r19)
    4730:	11000304 	addi	r4,r2,12
    4734:	99400304 	addi	r5,r19,12
    4738:	318d883a 	add	r6,r6,r6
    473c:	318d883a 	add	r6,r6,r6
    4740:	31800204 	addi	r6,r6,8
    4744:	1023883a 	mov	r17,r2
    4748:	000644c0 	call	644c <memcpy>
    474c:	d9001617 	ldw	r4,88(sp)
    4750:	880b883a 	mov	r5,r17
    4754:	01800044 	movi	r6,1
    4758:	0006fa80 	call	6fa8 <__lshift>
    475c:	100b883a 	mov	r5,r2
    4760:	003d9c06 	br	3dd4 <_dtoa_r+0x938>
    4764:	00800e44 	movi	r2,57
    4768:	b8807026 	beq	r23,r2,492c <_dtoa_r+0x1490>
    476c:	b8800044 	addi	r2,r23,1
    4770:	b7000044 	addi	fp,r22,1
    4774:	b0800005 	stb	r2,0(r22)
    4778:	003e4106 	br	4080 <_dtoa_r+0xbe4>
    477c:	d8800317 	ldw	r2,12(sp)
    4780:	01800074 	movhi	r6,1
    4784:	31b6ae04 	addi	r6,r6,-9544
    4788:	b009883a 	mov	r4,r22
    478c:	100e90fa 	slli	r7,r2,3
    4790:	b80b883a 	mov	r5,r23
    4794:	398f883a 	add	r7,r7,r6
    4798:	38bffe17 	ldw	r2,-8(r7)
    479c:	d9800517 	ldw	r6,20(sp)
    47a0:	38ffff17 	ldw	r3,-4(r7)
    47a4:	37000044 	addi	fp,r6,1
    47a8:	180f883a 	mov	r7,r3
    47ac:	100d883a 	mov	r6,r2
    47b0:	00096440 	call	9644 <__muldf3>
    47b4:	a80b883a 	mov	r5,r21
    47b8:	a009883a 	mov	r4,r20
    47bc:	182f883a 	mov	r23,r3
    47c0:	102d883a 	mov	r22,r2
    47c4:	000a0000 	call	a000 <__fixdfsi>
    47c8:	1009883a 	mov	r4,r2
    47cc:	1027883a 	mov	r19,r2
    47d0:	0009f080 	call	9f08 <__floatsidf>
    47d4:	a80b883a 	mov	r5,r21
    47d8:	a009883a 	mov	r4,r20
    47dc:	180f883a 	mov	r7,r3
    47e0:	100d883a 	mov	r6,r2
    47e4:	00095500 	call	9550 <__subdf3>
    47e8:	180b883a 	mov	r5,r3
    47ec:	d8c00517 	ldw	r3,20(sp)
    47f0:	9cc00c04 	addi	r19,r19,48
    47f4:	1009883a 	mov	r4,r2
    47f8:	1cc00005 	stb	r19,0(r3)
    47fc:	2021883a 	mov	r16,r4
    4800:	d9000317 	ldw	r4,12(sp)
    4804:	00800044 	movi	r2,1
    4808:	2823883a 	mov	r17,r5
    480c:	20802226 	beq	r4,r2,4898 <_dtoa_r+0x13fc>
    4810:	1029883a 	mov	r20,r2
    4814:	0005883a 	mov	r2,zero
    4818:	00d00934 	movhi	r3,16420
    481c:	180f883a 	mov	r7,r3
    4820:	100d883a 	mov	r6,r2
    4824:	880b883a 	mov	r5,r17
    4828:	8009883a 	mov	r4,r16
    482c:	00096440 	call	9644 <__muldf3>
    4830:	180b883a 	mov	r5,r3
    4834:	1009883a 	mov	r4,r2
    4838:	1823883a 	mov	r17,r3
    483c:	1021883a 	mov	r16,r2
    4840:	000a0000 	call	a000 <__fixdfsi>
    4844:	1009883a 	mov	r4,r2
    4848:	102b883a 	mov	r21,r2
    484c:	0009f080 	call	9f08 <__floatsidf>
    4850:	880b883a 	mov	r5,r17
    4854:	8009883a 	mov	r4,r16
    4858:	180f883a 	mov	r7,r3
    485c:	100d883a 	mov	r6,r2
    4860:	00095500 	call	9550 <__subdf3>
    4864:	180b883a 	mov	r5,r3
    4868:	d8c00517 	ldw	r3,20(sp)
    486c:	1009883a 	mov	r4,r2
    4870:	ad400c04 	addi	r21,r21,48
    4874:	1d05883a 	add	r2,r3,r20
    4878:	15400005 	stb	r21,0(r2)
    487c:	2021883a 	mov	r16,r4
    4880:	d9000317 	ldw	r4,12(sp)
    4884:	a5000044 	addi	r20,r20,1
    4888:	2823883a 	mov	r17,r5
    488c:	a13fe11e 	bne	r20,r4,4814 <_dtoa_r+0x1378>
    4890:	e505883a 	add	r2,fp,r20
    4894:	173fffc4 	addi	fp,r2,-1
    4898:	0025883a 	mov	r18,zero
    489c:	04cff834 	movhi	r19,16352
    48a0:	b009883a 	mov	r4,r22
    48a4:	b80b883a 	mov	r5,r23
    48a8:	900d883a 	mov	r6,r18
    48ac:	980f883a 	mov	r7,r19
    48b0:	00095d00 	call	95d0 <__adddf3>
    48b4:	180b883a 	mov	r5,r3
    48b8:	1009883a 	mov	r4,r2
    48bc:	800d883a 	mov	r6,r16
    48c0:	880f883a 	mov	r7,r17
    48c4:	0009e800 	call	9e80 <__ltdf2>
    48c8:	103cab16 	blt	r2,zero,3b78 <_dtoa_r+0x6dc>
    48cc:	0009883a 	mov	r4,zero
    48d0:	980b883a 	mov	r5,r19
    48d4:	b80f883a 	mov	r7,r23
    48d8:	b00d883a 	mov	r6,r22
    48dc:	00095500 	call	9550 <__subdf3>
    48e0:	180b883a 	mov	r5,r3
    48e4:	880f883a 	mov	r7,r17
    48e8:	1009883a 	mov	r4,r2
    48ec:	800d883a 	mov	r6,r16
    48f0:	0009d700 	call	9d70 <__gtdf2>
    48f4:	00bc470e 	bge	zero,r2,3a14 <_dtoa_r+0x578>
    48f8:	00c00c04 	movi	r3,48
    48fc:	e73fffc4 	addi	fp,fp,-1
    4900:	e0800007 	ldb	r2,0(fp)
    4904:	10fffd26 	beq	r2,r3,48fc <_dtoa_r+0x1460>
    4908:	d9800417 	ldw	r6,16(sp)
    490c:	e7000044 	addi	fp,fp,1
    4910:	d9800d15 	stw	r6,52(sp)
    4914:	003cab06 	br	3bc4 <_dtoa_r+0x728>
    4918:	d8c00f17 	ldw	r3,60(sp)
    491c:	d9001117 	ldw	r4,68(sp)
    4920:	20e1c83a 	sub	r16,r4,r3
    4924:	0007883a 	mov	r3,zero
    4928:	003d9b06 	br	3f98 <_dtoa_r+0xafc>
    492c:	00800e44 	movi	r2,57
    4930:	b0800005 	stb	r2,0(r22)
    4934:	b5800044 	addi	r22,r22,1
    4938:	003dc106 	br	4040 <_dtoa_r+0xba4>
    493c:	05800084 	movi	r22,2
    4940:	003bf706 	br	3920 <_dtoa_r+0x484>
    4944:	d9000f17 	ldw	r4,60(sp)
    4948:	013c000e 	bge	zero,r4,394c <_dtoa_r+0x4b0>
    494c:	d9800e17 	ldw	r6,56(sp)
    4950:	01bc300e 	bge	zero,r6,3a14 <_dtoa_r+0x578>
    4954:	0005883a 	mov	r2,zero
    4958:	00d00934 	movhi	r3,16420
    495c:	a80b883a 	mov	r5,r21
    4960:	180f883a 	mov	r7,r3
    4964:	a009883a 	mov	r4,r20
    4968:	100d883a 	mov	r6,r2
    496c:	00096440 	call	9644 <__muldf3>
    4970:	b1000044 	addi	r4,r22,1
    4974:	1021883a 	mov	r16,r2
    4978:	1823883a 	mov	r17,r3
    497c:	0009f080 	call	9f08 <__floatsidf>
    4980:	880b883a 	mov	r5,r17
    4984:	8009883a 	mov	r4,r16
    4988:	180f883a 	mov	r7,r3
    498c:	100d883a 	mov	r6,r2
    4990:	00096440 	call	9644 <__muldf3>
    4994:	0011883a 	mov	r8,zero
    4998:	02500734 	movhi	r9,16412
    499c:	180b883a 	mov	r5,r3
    49a0:	480f883a 	mov	r7,r9
    49a4:	1009883a 	mov	r4,r2
    49a8:	400d883a 	mov	r6,r8
    49ac:	00095d00 	call	95d0 <__adddf3>
    49b0:	102d883a 	mov	r22,r2
    49b4:	00bf3034 	movhi	r2,64704
    49b8:	10ef883a 	add	r23,r2,r3
    49bc:	d8800d17 	ldw	r2,52(sp)
    49c0:	d8c00e17 	ldw	r3,56(sp)
    49c4:	8029883a 	mov	r20,r16
    49c8:	10bfffc4 	addi	r2,r2,-1
    49cc:	882b883a 	mov	r21,r17
    49d0:	d8800415 	stw	r2,16(sp)
    49d4:	d8c00315 	stw	r3,12(sp)
    49d8:	003e8306 	br	43e8 <_dtoa_r+0xf4c>
    49dc:	d8800117 	ldw	r2,4(sp)
    49e0:	dc001117 	ldw	r16,68(sp)
    49e4:	dc801017 	ldw	r18,64(sp)
    49e8:	00c00d84 	movi	r3,54
    49ec:	1887c83a 	sub	r3,r3,r2
    49f0:	003d6906 	br	3f98 <_dtoa_r+0xafc>
    49f4:	01800044 	movi	r6,1
    49f8:	3021883a 	mov	r16,r6
    49fc:	d9800f15 	stw	r6,60(sp)
    4a00:	d9802615 	stw	r6,152(sp)
    4a04:	d9800e15 	stw	r6,56(sp)
    4a08:	003b9306 	br	3858 <_dtoa_r+0x3bc>
    4a0c:	b021883a 	mov	r16,r22
    4a10:	dd800f15 	stw	r22,60(sp)
    4a14:	003b9006 	br	3858 <_dtoa_r+0x3bc>
    4a18:	103e221e 	bne	r2,zero,42a4 <_dtoa_r+0xe08>
    4a1c:	b880004c 	andi	r2,r23,1
    4a20:	1005003a 	cmpeq	r2,r2,zero
    4a24:	103e1f1e 	bne	r2,zero,42a4 <_dtoa_r+0xe08>
    4a28:	003e1b06 	br	4298 <_dtoa_r+0xdfc>
    4a2c:	d9001617 	ldw	r4,88(sp)
    4a30:	980b883a 	mov	r5,r19
    4a34:	01800284 	movi	r6,10
    4a38:	000f883a 	mov	r7,zero
    4a3c:	00073840 	call	7384 <__multadd>
    4a40:	d8c00e17 	ldw	r3,56(sp)
    4a44:	1027883a 	mov	r19,r2
    4a48:	d8c00f15 	stw	r3,60(sp)
    4a4c:	003cd306 	br	3d9c <_dtoa_r+0x900>

00004a50 <_fflush_r>:
    4a50:	defffb04 	addi	sp,sp,-20
    4a54:	dcc00315 	stw	r19,12(sp)
    4a58:	dc800215 	stw	r18,8(sp)
    4a5c:	dfc00415 	stw	ra,16(sp)
    4a60:	dc400115 	stw	r17,4(sp)
    4a64:	dc000015 	stw	r16,0(sp)
    4a68:	2027883a 	mov	r19,r4
    4a6c:	2825883a 	mov	r18,r5
    4a70:	20000226 	beq	r4,zero,4a7c <_fflush_r+0x2c>
    4a74:	20800e17 	ldw	r2,56(r4)
    4a78:	10005626 	beq	r2,zero,4bd4 <_fflush_r+0x184>
    4a7c:	9100030b 	ldhu	r4,12(r18)
    4a80:	20ffffcc 	andi	r3,r4,65535
    4a84:	18e0001c 	xori	r3,r3,32768
    4a88:	18e00004 	addi	r3,r3,-32768
    4a8c:	1880020c 	andi	r2,r3,8
    4a90:	1000261e 	bne	r2,zero,4b2c <_fflush_r+0xdc>
    4a94:	90c00117 	ldw	r3,4(r18)
    4a98:	20820014 	ori	r2,r4,2048
    4a9c:	9080030d 	sth	r2,12(r18)
    4aa0:	1009883a 	mov	r4,r2
    4aa4:	00c0400e 	bge	zero,r3,4ba8 <_fflush_r+0x158>
    4aa8:	92000a17 	ldw	r8,40(r18)
    4aac:	40004026 	beq	r8,zero,4bb0 <_fflush_r+0x160>
    4ab0:	2084000c 	andi	r2,r4,4096
    4ab4:	10005326 	beq	r2,zero,4c04 <_fflush_r+0x1b4>
    4ab8:	94001417 	ldw	r16,80(r18)
    4abc:	9080030b 	ldhu	r2,12(r18)
    4ac0:	1080010c 	andi	r2,r2,4
    4ac4:	1000481e 	bne	r2,zero,4be8 <_fflush_r+0x198>
    4ac8:	91400717 	ldw	r5,28(r18)
    4acc:	9809883a 	mov	r4,r19
    4ad0:	800d883a 	mov	r6,r16
    4ad4:	000f883a 	mov	r7,zero
    4ad8:	403ee83a 	callr	r8
    4adc:	8080261e 	bne	r16,r2,4b78 <_fflush_r+0x128>
    4ae0:	9080030b 	ldhu	r2,12(r18)
    4ae4:	91000417 	ldw	r4,16(r18)
    4ae8:	90000115 	stw	zero,4(r18)
    4aec:	10bdffcc 	andi	r2,r2,63487
    4af0:	10ffffcc 	andi	r3,r2,65535
    4af4:	18c4000c 	andi	r3,r3,4096
    4af8:	9080030d 	sth	r2,12(r18)
    4afc:	91000015 	stw	r4,0(r18)
    4b00:	18002b26 	beq	r3,zero,4bb0 <_fflush_r+0x160>
    4b04:	0007883a 	mov	r3,zero
    4b08:	1805883a 	mov	r2,r3
    4b0c:	94001415 	stw	r16,80(r18)
    4b10:	dfc00417 	ldw	ra,16(sp)
    4b14:	dcc00317 	ldw	r19,12(sp)
    4b18:	dc800217 	ldw	r18,8(sp)
    4b1c:	dc400117 	ldw	r17,4(sp)
    4b20:	dc000017 	ldw	r16,0(sp)
    4b24:	dec00504 	addi	sp,sp,20
    4b28:	f800283a 	ret
    4b2c:	94400417 	ldw	r17,16(r18)
    4b30:	88001f26 	beq	r17,zero,4bb0 <_fflush_r+0x160>
    4b34:	90800017 	ldw	r2,0(r18)
    4b38:	18c000cc 	andi	r3,r3,3
    4b3c:	94400015 	stw	r17,0(r18)
    4b40:	1461c83a 	sub	r16,r2,r17
    4b44:	18002526 	beq	r3,zero,4bdc <_fflush_r+0x18c>
    4b48:	0005883a 	mov	r2,zero
    4b4c:	90800215 	stw	r2,8(r18)
    4b50:	0400170e 	bge	zero,r16,4bb0 <_fflush_r+0x160>
    4b54:	90c00917 	ldw	r3,36(r18)
    4b58:	91400717 	ldw	r5,28(r18)
    4b5c:	880d883a 	mov	r6,r17
    4b60:	800f883a 	mov	r7,r16
    4b64:	9809883a 	mov	r4,r19
    4b68:	183ee83a 	callr	r3
    4b6c:	88a3883a 	add	r17,r17,r2
    4b70:	80a1c83a 	sub	r16,r16,r2
    4b74:	00bff616 	blt	zero,r2,4b50 <_fflush_r+0x100>
    4b78:	9080030b 	ldhu	r2,12(r18)
    4b7c:	00ffffc4 	movi	r3,-1
    4b80:	10801014 	ori	r2,r2,64
    4b84:	9080030d 	sth	r2,12(r18)
    4b88:	1805883a 	mov	r2,r3
    4b8c:	dfc00417 	ldw	ra,16(sp)
    4b90:	dcc00317 	ldw	r19,12(sp)
    4b94:	dc800217 	ldw	r18,8(sp)
    4b98:	dc400117 	ldw	r17,4(sp)
    4b9c:	dc000017 	ldw	r16,0(sp)
    4ba0:	dec00504 	addi	sp,sp,20
    4ba4:	f800283a 	ret
    4ba8:	90800f17 	ldw	r2,60(r18)
    4bac:	00bfbe16 	blt	zero,r2,4aa8 <_fflush_r+0x58>
    4bb0:	0007883a 	mov	r3,zero
    4bb4:	1805883a 	mov	r2,r3
    4bb8:	dfc00417 	ldw	ra,16(sp)
    4bbc:	dcc00317 	ldw	r19,12(sp)
    4bc0:	dc800217 	ldw	r18,8(sp)
    4bc4:	dc400117 	ldw	r17,4(sp)
    4bc8:	dc000017 	ldw	r16,0(sp)
    4bcc:	dec00504 	addi	sp,sp,20
    4bd0:	f800283a 	ret
    4bd4:	0004ce80 	call	4ce8 <__sinit>
    4bd8:	003fa806 	br	4a7c <_fflush_r+0x2c>
    4bdc:	90800517 	ldw	r2,20(r18)
    4be0:	90800215 	stw	r2,8(r18)
    4be4:	003fda06 	br	4b50 <_fflush_r+0x100>
    4be8:	90800117 	ldw	r2,4(r18)
    4bec:	90c00c17 	ldw	r3,48(r18)
    4bf0:	80a1c83a 	sub	r16,r16,r2
    4bf4:	183fb426 	beq	r3,zero,4ac8 <_fflush_r+0x78>
    4bf8:	90800f17 	ldw	r2,60(r18)
    4bfc:	80a1c83a 	sub	r16,r16,r2
    4c00:	003fb106 	br	4ac8 <_fflush_r+0x78>
    4c04:	91400717 	ldw	r5,28(r18)
    4c08:	9809883a 	mov	r4,r19
    4c0c:	000d883a 	mov	r6,zero
    4c10:	01c00044 	movi	r7,1
    4c14:	403ee83a 	callr	r8
    4c18:	1021883a 	mov	r16,r2
    4c1c:	00bfffc4 	movi	r2,-1
    4c20:	80800226 	beq	r16,r2,4c2c <_fflush_r+0x1dc>
    4c24:	92000a17 	ldw	r8,40(r18)
    4c28:	003fa406 	br	4abc <_fflush_r+0x6c>
    4c2c:	98c00017 	ldw	r3,0(r19)
    4c30:	00800744 	movi	r2,29
    4c34:	18bfde26 	beq	r3,r2,4bb0 <_fflush_r+0x160>
    4c38:	9080030b 	ldhu	r2,12(r18)
    4c3c:	8007883a 	mov	r3,r16
    4c40:	10801014 	ori	r2,r2,64
    4c44:	9080030d 	sth	r2,12(r18)
    4c48:	003fcf06 	br	4b88 <_fflush_r+0x138>

00004c4c <fflush>:
    4c4c:	01400034 	movhi	r5,0
    4c50:	29529404 	addi	r5,r5,19024
    4c54:	2007883a 	mov	r3,r4
    4c58:	20000526 	beq	r4,zero,4c70 <fflush+0x24>
    4c5c:	00800074 	movhi	r2,1
    4c60:	10bdce04 	addi	r2,r2,-2248
    4c64:	11000017 	ldw	r4,0(r2)
    4c68:	180b883a 	mov	r5,r3
    4c6c:	0004a501 	jmpi	4a50 <_fflush_r>
    4c70:	00800074 	movhi	r2,1
    4c74:	10bdcf04 	addi	r2,r2,-2244
    4c78:	11000017 	ldw	r4,0(r2)
    4c7c:	00058501 	jmpi	5850 <_fwalk_reent>

00004c80 <std>:
    4c80:	00800034 	movhi	r2,0
    4c84:	109f7104 	addi	r2,r2,32196
    4c88:	20800b15 	stw	r2,44(r4)
    4c8c:	00800034 	movhi	r2,0
    4c90:	109fac04 	addi	r2,r2,32432
    4c94:	20800815 	stw	r2,32(r4)
    4c98:	00c00034 	movhi	r3,0
    4c9c:	18df8d04 	addi	r3,r3,32308
    4ca0:	00800034 	movhi	r2,0
    4ca4:	109f7304 	addi	r2,r2,32204
    4ca8:	2140030d 	sth	r5,12(r4)
    4cac:	2180038d 	sth	r6,14(r4)
    4cb0:	20c00915 	stw	r3,36(r4)
    4cb4:	20800a15 	stw	r2,40(r4)
    4cb8:	20000015 	stw	zero,0(r4)
    4cbc:	20000115 	stw	zero,4(r4)
    4cc0:	20000215 	stw	zero,8(r4)
    4cc4:	20000415 	stw	zero,16(r4)
    4cc8:	20000515 	stw	zero,20(r4)
    4ccc:	20000615 	stw	zero,24(r4)
    4cd0:	21000715 	stw	r4,28(r4)
    4cd4:	f800283a 	ret

00004cd8 <__sfp_lock_acquire>:
    4cd8:	f800283a 	ret

00004cdc <__sfp_lock_release>:
    4cdc:	f800283a 	ret

00004ce0 <__sinit_lock_acquire>:
    4ce0:	f800283a 	ret

00004ce4 <__sinit_lock_release>:
    4ce4:	f800283a 	ret

00004ce8 <__sinit>:
    4ce8:	20800e17 	ldw	r2,56(r4)
    4cec:	defffd04 	addi	sp,sp,-12
    4cf0:	dc400115 	stw	r17,4(sp)
    4cf4:	dc000015 	stw	r16,0(sp)
    4cf8:	dfc00215 	stw	ra,8(sp)
    4cfc:	04400044 	movi	r17,1
    4d00:	01400104 	movi	r5,4
    4d04:	000d883a 	mov	r6,zero
    4d08:	2021883a 	mov	r16,r4
    4d0c:	2200bb04 	addi	r8,r4,748
    4d10:	200f883a 	mov	r7,r4
    4d14:	10000526 	beq	r2,zero,4d2c <__sinit+0x44>
    4d18:	dfc00217 	ldw	ra,8(sp)
    4d1c:	dc400117 	ldw	r17,4(sp)
    4d20:	dc000017 	ldw	r16,0(sp)
    4d24:	dec00304 	addi	sp,sp,12
    4d28:	f800283a 	ret
    4d2c:	21000117 	ldw	r4,4(r4)
    4d30:	00800034 	movhi	r2,0
    4d34:	10937304 	addi	r2,r2,19916
    4d38:	00c000c4 	movi	r3,3
    4d3c:	80800f15 	stw	r2,60(r16)
    4d40:	80c0b915 	stw	r3,740(r16)
    4d44:	8200ba15 	stw	r8,744(r16)
    4d48:	84400e15 	stw	r17,56(r16)
    4d4c:	8000b815 	stw	zero,736(r16)
    4d50:	0004c800 	call	4c80 <std>
    4d54:	81000217 	ldw	r4,8(r16)
    4d58:	880d883a 	mov	r6,r17
    4d5c:	800f883a 	mov	r7,r16
    4d60:	01400284 	movi	r5,10
    4d64:	0004c800 	call	4c80 <std>
    4d68:	81000317 	ldw	r4,12(r16)
    4d6c:	800f883a 	mov	r7,r16
    4d70:	01400484 	movi	r5,18
    4d74:	01800084 	movi	r6,2
    4d78:	dfc00217 	ldw	ra,8(sp)
    4d7c:	dc400117 	ldw	r17,4(sp)
    4d80:	dc000017 	ldw	r16,0(sp)
    4d84:	dec00304 	addi	sp,sp,12
    4d88:	0004c801 	jmpi	4c80 <std>

00004d8c <__fp_lock>:
    4d8c:	0005883a 	mov	r2,zero
    4d90:	f800283a 	ret

00004d94 <__fp_unlock>:
    4d94:	0005883a 	mov	r2,zero
    4d98:	f800283a 	ret

00004d9c <__fp_unlock_all>:
    4d9c:	00800074 	movhi	r2,1
    4da0:	10bdce04 	addi	r2,r2,-2248
    4da4:	11000017 	ldw	r4,0(r2)
    4da8:	01400034 	movhi	r5,0
    4dac:	29536504 	addi	r5,r5,19860
    4db0:	00059181 	jmpi	5918 <_fwalk>

00004db4 <__fp_lock_all>:
    4db4:	00800074 	movhi	r2,1
    4db8:	10bdce04 	addi	r2,r2,-2248
    4dbc:	11000017 	ldw	r4,0(r2)
    4dc0:	01400034 	movhi	r5,0
    4dc4:	29536304 	addi	r5,r5,19852
    4dc8:	00059181 	jmpi	5918 <_fwalk>

00004dcc <_cleanup_r>:
    4dcc:	01400074 	movhi	r5,1
    4dd0:	2960a304 	addi	r5,r5,-32116
    4dd4:	00059181 	jmpi	5918 <_fwalk>

00004dd8 <_cleanup>:
    4dd8:	00800074 	movhi	r2,1
    4ddc:	10bdcf04 	addi	r2,r2,-2244
    4de0:	11000017 	ldw	r4,0(r2)
    4de4:	0004dcc1 	jmpi	4dcc <_cleanup_r>

00004de8 <__sfmoreglue>:
    4de8:	defffc04 	addi	sp,sp,-16
    4dec:	dc000015 	stw	r16,0(sp)
    4df0:	2821883a 	mov	r16,r5
    4df4:	dc400115 	stw	r17,4(sp)
    4df8:	01401704 	movi	r5,92
    4dfc:	2023883a 	mov	r17,r4
    4e00:	8009883a 	mov	r4,r16
    4e04:	dfc00315 	stw	ra,12(sp)
    4e08:	dcc00215 	stw	r19,8(sp)
    4e0c:	0000e180 	call	e18 <__mulsi3>
    4e10:	11400304 	addi	r5,r2,12
    4e14:	8809883a 	mov	r4,r17
    4e18:	1027883a 	mov	r19,r2
    4e1c:	0005c280 	call	5c28 <_malloc_r>
    4e20:	10c00304 	addi	r3,r2,12
    4e24:	1023883a 	mov	r17,r2
    4e28:	1809883a 	mov	r4,r3
    4e2c:	980d883a 	mov	r6,r19
    4e30:	000b883a 	mov	r5,zero
    4e34:	10000b26 	beq	r2,zero,4e64 <__sfmoreglue+0x7c>
    4e38:	14000115 	stw	r16,4(r2)
    4e3c:	10c00215 	stw	r3,8(r2)
    4e40:	10000015 	stw	zero,0(r2)
    4e44:	00065cc0 	call	65cc <memset>
    4e48:	8805883a 	mov	r2,r17
    4e4c:	dfc00317 	ldw	ra,12(sp)
    4e50:	dcc00217 	ldw	r19,8(sp)
    4e54:	dc400117 	ldw	r17,4(sp)
    4e58:	dc000017 	ldw	r16,0(sp)
    4e5c:	dec00404 	addi	sp,sp,16
    4e60:	f800283a 	ret
    4e64:	0023883a 	mov	r17,zero
    4e68:	8805883a 	mov	r2,r17
    4e6c:	dfc00317 	ldw	ra,12(sp)
    4e70:	dcc00217 	ldw	r19,8(sp)
    4e74:	dc400117 	ldw	r17,4(sp)
    4e78:	dc000017 	ldw	r16,0(sp)
    4e7c:	dec00404 	addi	sp,sp,16
    4e80:	f800283a 	ret

00004e84 <__sfp>:
    4e84:	defffd04 	addi	sp,sp,-12
    4e88:	00800074 	movhi	r2,1
    4e8c:	10bdcf04 	addi	r2,r2,-2244
    4e90:	dc000015 	stw	r16,0(sp)
    4e94:	14000017 	ldw	r16,0(r2)
    4e98:	dc400115 	stw	r17,4(sp)
    4e9c:	dfc00215 	stw	ra,8(sp)
    4ea0:	80800e17 	ldw	r2,56(r16)
    4ea4:	2023883a 	mov	r17,r4
    4ea8:	10002626 	beq	r2,zero,4f44 <__sfp+0xc0>
    4eac:	8400b804 	addi	r16,r16,736
    4eb0:	80800117 	ldw	r2,4(r16)
    4eb4:	81000217 	ldw	r4,8(r16)
    4eb8:	10ffffc4 	addi	r3,r2,-1
    4ebc:	18000916 	blt	r3,zero,4ee4 <__sfp+0x60>
    4ec0:	2080030f 	ldh	r2,12(r4)
    4ec4:	10000b26 	beq	r2,zero,4ef4 <__sfp+0x70>
    4ec8:	017fffc4 	movi	r5,-1
    4ecc:	00000206 	br	4ed8 <__sfp+0x54>
    4ed0:	2080030f 	ldh	r2,12(r4)
    4ed4:	10000726 	beq	r2,zero,4ef4 <__sfp+0x70>
    4ed8:	18ffffc4 	addi	r3,r3,-1
    4edc:	21001704 	addi	r4,r4,92
    4ee0:	197ffb1e 	bne	r3,r5,4ed0 <__sfp+0x4c>
    4ee4:	80800017 	ldw	r2,0(r16)
    4ee8:	10001926 	beq	r2,zero,4f50 <__sfp+0xcc>
    4eec:	1021883a 	mov	r16,r2
    4ef0:	003fef06 	br	4eb0 <__sfp+0x2c>
    4ef4:	00bfffc4 	movi	r2,-1
    4ef8:	00c00044 	movi	r3,1
    4efc:	2080038d 	sth	r2,14(r4)
    4f00:	20c0030d 	sth	r3,12(r4)
    4f04:	20000015 	stw	zero,0(r4)
    4f08:	20000215 	stw	zero,8(r4)
    4f0c:	20000115 	stw	zero,4(r4)
    4f10:	20000415 	stw	zero,16(r4)
    4f14:	20000515 	stw	zero,20(r4)
    4f18:	20000615 	stw	zero,24(r4)
    4f1c:	20000c15 	stw	zero,48(r4)
    4f20:	20000d15 	stw	zero,52(r4)
    4f24:	20001115 	stw	zero,68(r4)
    4f28:	20001215 	stw	zero,72(r4)
    4f2c:	2005883a 	mov	r2,r4
    4f30:	dfc00217 	ldw	ra,8(sp)
    4f34:	dc400117 	ldw	r17,4(sp)
    4f38:	dc000017 	ldw	r16,0(sp)
    4f3c:	dec00304 	addi	sp,sp,12
    4f40:	f800283a 	ret
    4f44:	8009883a 	mov	r4,r16
    4f48:	0004ce80 	call	4ce8 <__sinit>
    4f4c:	003fd706 	br	4eac <__sfp+0x28>
    4f50:	8809883a 	mov	r4,r17
    4f54:	01400104 	movi	r5,4
    4f58:	0004de80 	call	4de8 <__sfmoreglue>
    4f5c:	80800015 	stw	r2,0(r16)
    4f60:	103fe21e 	bne	r2,zero,4eec <__sfp+0x68>
    4f64:	00800304 	movi	r2,12
    4f68:	0009883a 	mov	r4,zero
    4f6c:	88800015 	stw	r2,0(r17)
    4f70:	003fee06 	br	4f2c <__sfp+0xa8>

00004f74 <_malloc_trim_r>:
    4f74:	defffb04 	addi	sp,sp,-20
    4f78:	dcc00315 	stw	r19,12(sp)
    4f7c:	04c00074 	movhi	r19,1
    4f80:	9cf84a04 	addi	r19,r19,-7896
    4f84:	dc800215 	stw	r18,8(sp)
    4f88:	dc400115 	stw	r17,4(sp)
    4f8c:	dc000015 	stw	r16,0(sp)
    4f90:	2823883a 	mov	r17,r5
    4f94:	2025883a 	mov	r18,r4
    4f98:	dfc00415 	stw	ra,16(sp)
    4f9c:	000b0180 	call	b018 <__malloc_lock>
    4fa0:	98800217 	ldw	r2,8(r19)
    4fa4:	9009883a 	mov	r4,r18
    4fa8:	000b883a 	mov	r5,zero
    4fac:	10c00117 	ldw	r3,4(r2)
    4fb0:	00bfff04 	movi	r2,-4
    4fb4:	18a0703a 	and	r16,r3,r2
    4fb8:	8463c83a 	sub	r17,r16,r17
    4fbc:	8c43fbc4 	addi	r17,r17,4079
    4fc0:	8822d33a 	srli	r17,r17,12
    4fc4:	0083ffc4 	movi	r2,4095
    4fc8:	8c7fffc4 	addi	r17,r17,-1
    4fcc:	8822933a 	slli	r17,r17,12
    4fd0:	1440060e 	bge	r2,r17,4fec <_malloc_trim_r+0x78>
    4fd4:	0007d540 	call	7d54 <_sbrk_r>
    4fd8:	98c00217 	ldw	r3,8(r19)
    4fdc:	9009883a 	mov	r4,r18
    4fe0:	044bc83a 	sub	r5,zero,r17
    4fe4:	80c7883a 	add	r3,r16,r3
    4fe8:	10c00926 	beq	r2,r3,5010 <_malloc_trim_r+0x9c>
    4fec:	000b0380 	call	b038 <__malloc_unlock>
    4ff0:	0005883a 	mov	r2,zero
    4ff4:	dfc00417 	ldw	ra,16(sp)
    4ff8:	dcc00317 	ldw	r19,12(sp)
    4ffc:	dc800217 	ldw	r18,8(sp)
    5000:	dc400117 	ldw	r17,4(sp)
    5004:	dc000017 	ldw	r16,0(sp)
    5008:	dec00504 	addi	sp,sp,20
    500c:	f800283a 	ret
    5010:	9009883a 	mov	r4,r18
    5014:	0007d540 	call	7d54 <_sbrk_r>
    5018:	844dc83a 	sub	r6,r16,r17
    501c:	00ffffc4 	movi	r3,-1
    5020:	9009883a 	mov	r4,r18
    5024:	000b883a 	mov	r5,zero
    5028:	01c00074 	movhi	r7,1
    502c:	39c48404 	addi	r7,r7,4624
    5030:	31800054 	ori	r6,r6,1
    5034:	10c00926 	beq	r2,r3,505c <_malloc_trim_r+0xe8>
    5038:	38800017 	ldw	r2,0(r7)
    503c:	98c00217 	ldw	r3,8(r19)
    5040:	9009883a 	mov	r4,r18
    5044:	1445c83a 	sub	r2,r2,r17
    5048:	38800015 	stw	r2,0(r7)
    504c:	19800115 	stw	r6,4(r3)
    5050:	000b0380 	call	b038 <__malloc_unlock>
    5054:	00800044 	movi	r2,1
    5058:	003fe606 	br	4ff4 <_malloc_trim_r+0x80>
    505c:	0007d540 	call	7d54 <_sbrk_r>
    5060:	99800217 	ldw	r6,8(r19)
    5064:	100f883a 	mov	r7,r2
    5068:	9009883a 	mov	r4,r18
    506c:	1187c83a 	sub	r3,r2,r6
    5070:	008003c4 	movi	r2,15
    5074:	19400054 	ori	r5,r3,1
    5078:	10ffdc0e 	bge	r2,r3,4fec <_malloc_trim_r+0x78>
    507c:	00800074 	movhi	r2,1
    5080:	10bdd304 	addi	r2,r2,-2228
    5084:	10c00017 	ldw	r3,0(r2)
    5088:	00800074 	movhi	r2,1
    508c:	10848404 	addi	r2,r2,4624
    5090:	31400115 	stw	r5,4(r6)
    5094:	38c7c83a 	sub	r3,r7,r3
    5098:	10c00015 	stw	r3,0(r2)
    509c:	003fd306 	br	4fec <_malloc_trim_r+0x78>

000050a0 <_free_r>:
    50a0:	defffd04 	addi	sp,sp,-12
    50a4:	dc400115 	stw	r17,4(sp)
    50a8:	dc000015 	stw	r16,0(sp)
    50ac:	dfc00215 	stw	ra,8(sp)
    50b0:	2821883a 	mov	r16,r5
    50b4:	2023883a 	mov	r17,r4
    50b8:	28005a26 	beq	r5,zero,5224 <_free_r+0x184>
    50bc:	000b0180 	call	b018 <__malloc_lock>
    50c0:	823ffe04 	addi	r8,r16,-8
    50c4:	41400117 	ldw	r5,4(r8)
    50c8:	00bfff84 	movi	r2,-2
    50cc:	02800074 	movhi	r10,1
    50d0:	52b84a04 	addi	r10,r10,-7896
    50d4:	288e703a 	and	r7,r5,r2
    50d8:	41cd883a 	add	r6,r8,r7
    50dc:	30c00117 	ldw	r3,4(r6)
    50e0:	51000217 	ldw	r4,8(r10)
    50e4:	00bfff04 	movi	r2,-4
    50e8:	1892703a 	and	r9,r3,r2
    50ec:	5017883a 	mov	r11,r10
    50f0:	31006726 	beq	r6,r4,5290 <_free_r+0x1f0>
    50f4:	2880004c 	andi	r2,r5,1
    50f8:	1005003a 	cmpeq	r2,r2,zero
    50fc:	32400115 	stw	r9,4(r6)
    5100:	10001a1e 	bne	r2,zero,516c <_free_r+0xcc>
    5104:	000b883a 	mov	r5,zero
    5108:	3247883a 	add	r3,r6,r9
    510c:	18800117 	ldw	r2,4(r3)
    5110:	1080004c 	andi	r2,r2,1
    5114:	1000231e 	bne	r2,zero,51a4 <_free_r+0x104>
    5118:	280ac03a 	cmpne	r5,r5,zero
    511c:	3a4f883a 	add	r7,r7,r9
    5120:	2800451e 	bne	r5,zero,5238 <_free_r+0x198>
    5124:	31000217 	ldw	r4,8(r6)
    5128:	00800074 	movhi	r2,1
    512c:	10b84c04 	addi	r2,r2,-7888
    5130:	20807b26 	beq	r4,r2,5320 <_free_r+0x280>
    5134:	30800317 	ldw	r2,12(r6)
    5138:	3a07883a 	add	r3,r7,r8
    513c:	19c00015 	stw	r7,0(r3)
    5140:	11000215 	stw	r4,8(r2)
    5144:	20800315 	stw	r2,12(r4)
    5148:	38800054 	ori	r2,r7,1
    514c:	40800115 	stw	r2,4(r8)
    5150:	28001a26 	beq	r5,zero,51bc <_free_r+0x11c>
    5154:	8809883a 	mov	r4,r17
    5158:	dfc00217 	ldw	ra,8(sp)
    515c:	dc400117 	ldw	r17,4(sp)
    5160:	dc000017 	ldw	r16,0(sp)
    5164:	dec00304 	addi	sp,sp,12
    5168:	000b0381 	jmpi	b038 <__malloc_unlock>
    516c:	80bffe17 	ldw	r2,-8(r16)
    5170:	50c00204 	addi	r3,r10,8
    5174:	4091c83a 	sub	r8,r8,r2
    5178:	41000217 	ldw	r4,8(r8)
    517c:	388f883a 	add	r7,r7,r2
    5180:	20c06126 	beq	r4,r3,5308 <_free_r+0x268>
    5184:	40800317 	ldw	r2,12(r8)
    5188:	3247883a 	add	r3,r6,r9
    518c:	000b883a 	mov	r5,zero
    5190:	11000215 	stw	r4,8(r2)
    5194:	20800315 	stw	r2,12(r4)
    5198:	18800117 	ldw	r2,4(r3)
    519c:	1080004c 	andi	r2,r2,1
    51a0:	103fdd26 	beq	r2,zero,5118 <_free_r+0x78>
    51a4:	38800054 	ori	r2,r7,1
    51a8:	3a07883a 	add	r3,r7,r8
    51ac:	280ac03a 	cmpne	r5,r5,zero
    51b0:	40800115 	stw	r2,4(r8)
    51b4:	19c00015 	stw	r7,0(r3)
    51b8:	283fe61e 	bne	r5,zero,5154 <_free_r+0xb4>
    51bc:	00807fc4 	movi	r2,511
    51c0:	11c01f2e 	bgeu	r2,r7,5240 <_free_r+0x1a0>
    51c4:	3806d27a 	srli	r3,r7,9
    51c8:	1800481e 	bne	r3,zero,52ec <_free_r+0x24c>
    51cc:	3804d0fa 	srli	r2,r7,3
    51d0:	100690fa 	slli	r3,r2,3
    51d4:	1acd883a 	add	r6,r3,r11
    51d8:	31400217 	ldw	r5,8(r6)
    51dc:	31405926 	beq	r6,r5,5344 <_free_r+0x2a4>
    51e0:	28800117 	ldw	r2,4(r5)
    51e4:	00ffff04 	movi	r3,-4
    51e8:	10c4703a 	and	r2,r2,r3
    51ec:	3880022e 	bgeu	r7,r2,51f8 <_free_r+0x158>
    51f0:	29400217 	ldw	r5,8(r5)
    51f4:	317ffa1e 	bne	r6,r5,51e0 <_free_r+0x140>
    51f8:	29800317 	ldw	r6,12(r5)
    51fc:	41800315 	stw	r6,12(r8)
    5200:	41400215 	stw	r5,8(r8)
    5204:	8809883a 	mov	r4,r17
    5208:	2a000315 	stw	r8,12(r5)
    520c:	32000215 	stw	r8,8(r6)
    5210:	dfc00217 	ldw	ra,8(sp)
    5214:	dc400117 	ldw	r17,4(sp)
    5218:	dc000017 	ldw	r16,0(sp)
    521c:	dec00304 	addi	sp,sp,12
    5220:	000b0381 	jmpi	b038 <__malloc_unlock>
    5224:	dfc00217 	ldw	ra,8(sp)
    5228:	dc400117 	ldw	r17,4(sp)
    522c:	dc000017 	ldw	r16,0(sp)
    5230:	dec00304 	addi	sp,sp,12
    5234:	f800283a 	ret
    5238:	31000217 	ldw	r4,8(r6)
    523c:	003fbd06 	br	5134 <_free_r+0x94>
    5240:	3806d0fa 	srli	r3,r7,3
    5244:	00800044 	movi	r2,1
    5248:	51400117 	ldw	r5,4(r10)
    524c:	180890fa 	slli	r4,r3,3
    5250:	1807d0ba 	srai	r3,r3,2
    5254:	22c9883a 	add	r4,r4,r11
    5258:	21800217 	ldw	r6,8(r4)
    525c:	10c4983a 	sll	r2,r2,r3
    5260:	41000315 	stw	r4,12(r8)
    5264:	41800215 	stw	r6,8(r8)
    5268:	288ab03a 	or	r5,r5,r2
    526c:	22000215 	stw	r8,8(r4)
    5270:	8809883a 	mov	r4,r17
    5274:	51400115 	stw	r5,4(r10)
    5278:	32000315 	stw	r8,12(r6)
    527c:	dfc00217 	ldw	ra,8(sp)
    5280:	dc400117 	ldw	r17,4(sp)
    5284:	dc000017 	ldw	r16,0(sp)
    5288:	dec00304 	addi	sp,sp,12
    528c:	000b0381 	jmpi	b038 <__malloc_unlock>
    5290:	2880004c 	andi	r2,r5,1
    5294:	3a4d883a 	add	r6,r7,r9
    5298:	1000071e 	bne	r2,zero,52b8 <_free_r+0x218>
    529c:	80bffe17 	ldw	r2,-8(r16)
    52a0:	4091c83a 	sub	r8,r8,r2
    52a4:	41000317 	ldw	r4,12(r8)
    52a8:	40c00217 	ldw	r3,8(r8)
    52ac:	308d883a 	add	r6,r6,r2
    52b0:	20c00215 	stw	r3,8(r4)
    52b4:	19000315 	stw	r4,12(r3)
    52b8:	00800074 	movhi	r2,1
    52bc:	10bdd204 	addi	r2,r2,-2232
    52c0:	11000017 	ldw	r4,0(r2)
    52c4:	30c00054 	ori	r3,r6,1
    52c8:	52000215 	stw	r8,8(r10)
    52cc:	40c00115 	stw	r3,4(r8)
    52d0:	313fa036 	bltu	r6,r4,5154 <_free_r+0xb4>
    52d4:	00800074 	movhi	r2,1
    52d8:	10847804 	addi	r2,r2,4576
    52dc:	11400017 	ldw	r5,0(r2)
    52e0:	8809883a 	mov	r4,r17
    52e4:	0004f740 	call	4f74 <_malloc_trim_r>
    52e8:	003f9a06 	br	5154 <_free_r+0xb4>
    52ec:	00800104 	movi	r2,4
    52f0:	10c0072e 	bgeu	r2,r3,5310 <_free_r+0x270>
    52f4:	00800504 	movi	r2,20
    52f8:	10c01936 	bltu	r2,r3,5360 <_free_r+0x2c0>
    52fc:	188016c4 	addi	r2,r3,91
    5300:	100690fa 	slli	r3,r2,3
    5304:	003fb306 	br	51d4 <_free_r+0x134>
    5308:	01400044 	movi	r5,1
    530c:	003f7e06 	br	5108 <_free_r+0x68>
    5310:	3804d1ba 	srli	r2,r7,6
    5314:	10800e04 	addi	r2,r2,56
    5318:	100690fa 	slli	r3,r2,3
    531c:	003fad06 	br	51d4 <_free_r+0x134>
    5320:	22000315 	stw	r8,12(r4)
    5324:	22000215 	stw	r8,8(r4)
    5328:	3a05883a 	add	r2,r7,r8
    532c:	38c00054 	ori	r3,r7,1
    5330:	11c00015 	stw	r7,0(r2)
    5334:	41000215 	stw	r4,8(r8)
    5338:	40c00115 	stw	r3,4(r8)
    533c:	41000315 	stw	r4,12(r8)
    5340:	003f8406 	br	5154 <_free_r+0xb4>
    5344:	1005d0ba 	srai	r2,r2,2
    5348:	00c00044 	movi	r3,1
    534c:	51000117 	ldw	r4,4(r10)
    5350:	1886983a 	sll	r3,r3,r2
    5354:	20c8b03a 	or	r4,r4,r3
    5358:	51000115 	stw	r4,4(r10)
    535c:	003fa706 	br	51fc <_free_r+0x15c>
    5360:	00801504 	movi	r2,84
    5364:	10c00436 	bltu	r2,r3,5378 <_free_r+0x2d8>
    5368:	3804d33a 	srli	r2,r7,12
    536c:	10801b84 	addi	r2,r2,110
    5370:	100690fa 	slli	r3,r2,3
    5374:	003f9706 	br	51d4 <_free_r+0x134>
    5378:	00805504 	movi	r2,340
    537c:	10c00436 	bltu	r2,r3,5390 <_free_r+0x2f0>
    5380:	3804d3fa 	srli	r2,r7,15
    5384:	10801dc4 	addi	r2,r2,119
    5388:	100690fa 	slli	r3,r2,3
    538c:	003f9106 	br	51d4 <_free_r+0x134>
    5390:	00815504 	movi	r2,1364
    5394:	10c0032e 	bgeu	r2,r3,53a4 <_free_r+0x304>
    5398:	00801f84 	movi	r2,126
    539c:	00c0fc04 	movi	r3,1008
    53a0:	003f8c06 	br	51d4 <_free_r+0x134>
    53a4:	3804d4ba 	srli	r2,r7,18
    53a8:	10801f04 	addi	r2,r2,124
    53ac:	100690fa 	slli	r3,r2,3
    53b0:	003f8806 	br	51d4 <_free_r+0x134>

000053b4 <__sfvwrite_r>:
    53b4:	30800217 	ldw	r2,8(r6)
    53b8:	defff504 	addi	sp,sp,-44
    53bc:	df000915 	stw	fp,36(sp)
    53c0:	dd800715 	stw	r22,28(sp)
    53c4:	dc800315 	stw	r18,12(sp)
    53c8:	dfc00a15 	stw	ra,40(sp)
    53cc:	ddc00815 	stw	r23,32(sp)
    53d0:	dd400615 	stw	r21,24(sp)
    53d4:	dd000515 	stw	r20,20(sp)
    53d8:	dcc00415 	stw	r19,16(sp)
    53dc:	dc400215 	stw	r17,8(sp)
    53e0:	dc000115 	stw	r16,4(sp)
    53e4:	302d883a 	mov	r22,r6
    53e8:	2039883a 	mov	fp,r4
    53ec:	2825883a 	mov	r18,r5
    53f0:	10001c26 	beq	r2,zero,5464 <__sfvwrite_r+0xb0>
    53f4:	29c0030b 	ldhu	r7,12(r5)
    53f8:	3880020c 	andi	r2,r7,8
    53fc:	10002726 	beq	r2,zero,549c <__sfvwrite_r+0xe8>
    5400:	28800417 	ldw	r2,16(r5)
    5404:	10002526 	beq	r2,zero,549c <__sfvwrite_r+0xe8>
    5408:	3880008c 	andi	r2,r7,2
    540c:	b5400017 	ldw	r21,0(r22)
    5410:	10002826 	beq	r2,zero,54b4 <__sfvwrite_r+0x100>
    5414:	0021883a 	mov	r16,zero
    5418:	0023883a 	mov	r17,zero
    541c:	880d883a 	mov	r6,r17
    5420:	e009883a 	mov	r4,fp
    5424:	00810004 	movi	r2,1024
    5428:	80006e26 	beq	r16,zero,55e4 <__sfvwrite_r+0x230>
    542c:	800f883a 	mov	r7,r16
    5430:	91400717 	ldw	r5,28(r18)
    5434:	1400012e 	bgeu	r2,r16,543c <__sfvwrite_r+0x88>
    5438:	100f883a 	mov	r7,r2
    543c:	90c00917 	ldw	r3,36(r18)
    5440:	183ee83a 	callr	r3
    5444:	1007883a 	mov	r3,r2
    5448:	80a1c83a 	sub	r16,r16,r2
    544c:	88a3883a 	add	r17,r17,r2
    5450:	00806d0e 	bge	zero,r2,5608 <__sfvwrite_r+0x254>
    5454:	b0800217 	ldw	r2,8(r22)
    5458:	10c5c83a 	sub	r2,r2,r3
    545c:	b0800215 	stw	r2,8(r22)
    5460:	103fee1e 	bne	r2,zero,541c <__sfvwrite_r+0x68>
    5464:	0009883a 	mov	r4,zero
    5468:	2005883a 	mov	r2,r4
    546c:	dfc00a17 	ldw	ra,40(sp)
    5470:	df000917 	ldw	fp,36(sp)
    5474:	ddc00817 	ldw	r23,32(sp)
    5478:	dd800717 	ldw	r22,28(sp)
    547c:	dd400617 	ldw	r21,24(sp)
    5480:	dd000517 	ldw	r20,20(sp)
    5484:	dcc00417 	ldw	r19,16(sp)
    5488:	dc800317 	ldw	r18,12(sp)
    548c:	dc400217 	ldw	r17,8(sp)
    5490:	dc000117 	ldw	r16,4(sp)
    5494:	dec00b04 	addi	sp,sp,44
    5498:	f800283a 	ret
    549c:	0002f680 	call	2f68 <__swsetup_r>
    54a0:	1000e41e 	bne	r2,zero,5834 <__sfvwrite_r+0x480>
    54a4:	91c0030b 	ldhu	r7,12(r18)
    54a8:	b5400017 	ldw	r21,0(r22)
    54ac:	3880008c 	andi	r2,r7,2
    54b0:	103fd81e 	bne	r2,zero,5414 <__sfvwrite_r+0x60>
    54b4:	3880004c 	andi	r2,r7,1
    54b8:	1005003a 	cmpeq	r2,r2,zero
    54bc:	10005726 	beq	r2,zero,561c <__sfvwrite_r+0x268>
    54c0:	0029883a 	mov	r20,zero
    54c4:	002f883a 	mov	r23,zero
    54c8:	a0004226 	beq	r20,zero,55d4 <__sfvwrite_r+0x220>
    54cc:	3880800c 	andi	r2,r7,512
    54d0:	94000217 	ldw	r16,8(r18)
    54d4:	10008b26 	beq	r2,zero,5704 <__sfvwrite_r+0x350>
    54d8:	800d883a 	mov	r6,r16
    54dc:	a400a536 	bltu	r20,r16,5774 <__sfvwrite_r+0x3c0>
    54e0:	3881200c 	andi	r2,r7,1152
    54e4:	10002726 	beq	r2,zero,5584 <__sfvwrite_r+0x1d0>
    54e8:	90800517 	ldw	r2,20(r18)
    54ec:	92000417 	ldw	r8,16(r18)
    54f0:	91400017 	ldw	r5,0(r18)
    54f4:	1087883a 	add	r3,r2,r2
    54f8:	1887883a 	add	r3,r3,r2
    54fc:	1808d7fa 	srli	r4,r3,31
    5500:	2a21c83a 	sub	r16,r5,r8
    5504:	80800044 	addi	r2,r16,1
    5508:	20c9883a 	add	r4,r4,r3
    550c:	2027d07a 	srai	r19,r4,1
    5510:	a085883a 	add	r2,r20,r2
    5514:	980d883a 	mov	r6,r19
    5518:	9880022e 	bgeu	r19,r2,5524 <__sfvwrite_r+0x170>
    551c:	1027883a 	mov	r19,r2
    5520:	100d883a 	mov	r6,r2
    5524:	3881000c 	andi	r2,r7,1024
    5528:	1000b826 	beq	r2,zero,580c <__sfvwrite_r+0x458>
    552c:	300b883a 	mov	r5,r6
    5530:	e009883a 	mov	r4,fp
    5534:	0005c280 	call	5c28 <_malloc_r>
    5538:	10003126 	beq	r2,zero,5600 <__sfvwrite_r+0x24c>
    553c:	91400417 	ldw	r5,16(r18)
    5540:	1009883a 	mov	r4,r2
    5544:	800d883a 	mov	r6,r16
    5548:	1023883a 	mov	r17,r2
    554c:	000644c0 	call	644c <memcpy>
    5550:	90c0030b 	ldhu	r3,12(r18)
    5554:	00beffc4 	movi	r2,-1025
    5558:	1886703a 	and	r3,r3,r2
    555c:	18c02014 	ori	r3,r3,128
    5560:	90c0030d 	sth	r3,12(r18)
    5564:	9c07c83a 	sub	r3,r19,r16
    5568:	8c05883a 	add	r2,r17,r16
    556c:	a00d883a 	mov	r6,r20
    5570:	a021883a 	mov	r16,r20
    5574:	90800015 	stw	r2,0(r18)
    5578:	90c00215 	stw	r3,8(r18)
    557c:	94400415 	stw	r17,16(r18)
    5580:	94c00515 	stw	r19,20(r18)
    5584:	91000017 	ldw	r4,0(r18)
    5588:	b80b883a 	mov	r5,r23
    558c:	a023883a 	mov	r17,r20
    5590:	00064ec0 	call	64ec <memmove>
    5594:	90c00217 	ldw	r3,8(r18)
    5598:	90800017 	ldw	r2,0(r18)
    559c:	a027883a 	mov	r19,r20
    55a0:	1c07c83a 	sub	r3,r3,r16
    55a4:	1405883a 	add	r2,r2,r16
    55a8:	90c00215 	stw	r3,8(r18)
    55ac:	a021883a 	mov	r16,r20
    55b0:	90800015 	stw	r2,0(r18)
    55b4:	b0800217 	ldw	r2,8(r22)
    55b8:	1405c83a 	sub	r2,r2,r16
    55bc:	b0800215 	stw	r2,8(r22)
    55c0:	103fa826 	beq	r2,zero,5464 <__sfvwrite_r+0xb0>
    55c4:	a469c83a 	sub	r20,r20,r17
    55c8:	91c0030b 	ldhu	r7,12(r18)
    55cc:	bcef883a 	add	r23,r23,r19
    55d0:	a03fbe1e 	bne	r20,zero,54cc <__sfvwrite_r+0x118>
    55d4:	adc00017 	ldw	r23,0(r21)
    55d8:	ad000117 	ldw	r20,4(r21)
    55dc:	ad400204 	addi	r21,r21,8
    55e0:	003fb906 	br	54c8 <__sfvwrite_r+0x114>
    55e4:	ac400017 	ldw	r17,0(r21)
    55e8:	ac000117 	ldw	r16,4(r21)
    55ec:	ad400204 	addi	r21,r21,8
    55f0:	003f8a06 	br	541c <__sfvwrite_r+0x68>
    55f4:	91400417 	ldw	r5,16(r18)
    55f8:	e009883a 	mov	r4,fp
    55fc:	00050a00 	call	50a0 <_free_r>
    5600:	00800304 	movi	r2,12
    5604:	e0800015 	stw	r2,0(fp)
    5608:	9080030b 	ldhu	r2,12(r18)
    560c:	013fffc4 	movi	r4,-1
    5610:	10801014 	ori	r2,r2,64
    5614:	9080030d 	sth	r2,12(r18)
    5618:	003f9306 	br	5468 <__sfvwrite_r+0xb4>
    561c:	0027883a 	mov	r19,zero
    5620:	002f883a 	mov	r23,zero
    5624:	d8000015 	stw	zero,0(sp)
    5628:	0029883a 	mov	r20,zero
    562c:	98001e26 	beq	r19,zero,56a8 <__sfvwrite_r+0x2f4>
    5630:	d8c00017 	ldw	r3,0(sp)
    5634:	1804c03a 	cmpne	r2,r3,zero
    5638:	10005e26 	beq	r2,zero,57b4 <__sfvwrite_r+0x400>
    563c:	9821883a 	mov	r16,r19
    5640:	a4c0012e 	bgeu	r20,r19,5648 <__sfvwrite_r+0x294>
    5644:	a021883a 	mov	r16,r20
    5648:	91000017 	ldw	r4,0(r18)
    564c:	90800417 	ldw	r2,16(r18)
    5650:	91800217 	ldw	r6,8(r18)
    5654:	91c00517 	ldw	r7,20(r18)
    5658:	1100022e 	bgeu	r2,r4,5664 <__sfvwrite_r+0x2b0>
    565c:	31e3883a 	add	r17,r6,r7
    5660:	8c001616 	blt	r17,r16,56bc <__sfvwrite_r+0x308>
    5664:	81c03816 	blt	r16,r7,5748 <__sfvwrite_r+0x394>
    5668:	90c00917 	ldw	r3,36(r18)
    566c:	91400717 	ldw	r5,28(r18)
    5670:	e009883a 	mov	r4,fp
    5674:	b80d883a 	mov	r6,r23
    5678:	183ee83a 	callr	r3
    567c:	1023883a 	mov	r17,r2
    5680:	00bfe10e 	bge	zero,r2,5608 <__sfvwrite_r+0x254>
    5684:	a469c83a 	sub	r20,r20,r17
    5688:	a0001826 	beq	r20,zero,56ec <__sfvwrite_r+0x338>
    568c:	b0800217 	ldw	r2,8(r22)
    5690:	1445c83a 	sub	r2,r2,r17
    5694:	b0800215 	stw	r2,8(r22)
    5698:	103f7226 	beq	r2,zero,5464 <__sfvwrite_r+0xb0>
    569c:	9c67c83a 	sub	r19,r19,r17
    56a0:	bc6f883a 	add	r23,r23,r17
    56a4:	983fe21e 	bne	r19,zero,5630 <__sfvwrite_r+0x27c>
    56a8:	adc00017 	ldw	r23,0(r21)
    56ac:	acc00117 	ldw	r19,4(r21)
    56b0:	ad400204 	addi	r21,r21,8
    56b4:	d8000015 	stw	zero,0(sp)
    56b8:	003fdc06 	br	562c <__sfvwrite_r+0x278>
    56bc:	b80b883a 	mov	r5,r23
    56c0:	880d883a 	mov	r6,r17
    56c4:	00064ec0 	call	64ec <memmove>
    56c8:	90c00017 	ldw	r3,0(r18)
    56cc:	e009883a 	mov	r4,fp
    56d0:	900b883a 	mov	r5,r18
    56d4:	1c47883a 	add	r3,r3,r17
    56d8:	90c00015 	stw	r3,0(r18)
    56dc:	0004a500 	call	4a50 <_fflush_r>
    56e0:	103fc91e 	bne	r2,zero,5608 <__sfvwrite_r+0x254>
    56e4:	a469c83a 	sub	r20,r20,r17
    56e8:	a03fe81e 	bne	r20,zero,568c <__sfvwrite_r+0x2d8>
    56ec:	e009883a 	mov	r4,fp
    56f0:	900b883a 	mov	r5,r18
    56f4:	0004a500 	call	4a50 <_fflush_r>
    56f8:	103fc31e 	bne	r2,zero,5608 <__sfvwrite_r+0x254>
    56fc:	d8000015 	stw	zero,0(sp)
    5700:	003fe206 	br	568c <__sfvwrite_r+0x2d8>
    5704:	91000017 	ldw	r4,0(r18)
    5708:	90800417 	ldw	r2,16(r18)
    570c:	1100022e 	bgeu	r2,r4,5718 <__sfvwrite_r+0x364>
    5710:	8023883a 	mov	r17,r16
    5714:	85003136 	bltu	r16,r20,57dc <__sfvwrite_r+0x428>
    5718:	91c00517 	ldw	r7,20(r18)
    571c:	a1c01836 	bltu	r20,r7,5780 <__sfvwrite_r+0x3cc>
    5720:	90c00917 	ldw	r3,36(r18)
    5724:	91400717 	ldw	r5,28(r18)
    5728:	e009883a 	mov	r4,fp
    572c:	b80d883a 	mov	r6,r23
    5730:	183ee83a 	callr	r3
    5734:	1021883a 	mov	r16,r2
    5738:	00bfb30e 	bge	zero,r2,5608 <__sfvwrite_r+0x254>
    573c:	1023883a 	mov	r17,r2
    5740:	1027883a 	mov	r19,r2
    5744:	003f9b06 	br	55b4 <__sfvwrite_r+0x200>
    5748:	b80b883a 	mov	r5,r23
    574c:	800d883a 	mov	r6,r16
    5750:	00064ec0 	call	64ec <memmove>
    5754:	90c00217 	ldw	r3,8(r18)
    5758:	90800017 	ldw	r2,0(r18)
    575c:	8023883a 	mov	r17,r16
    5760:	1c07c83a 	sub	r3,r3,r16
    5764:	1405883a 	add	r2,r2,r16
    5768:	90c00215 	stw	r3,8(r18)
    576c:	90800015 	stw	r2,0(r18)
    5770:	003fc406 	br	5684 <__sfvwrite_r+0x2d0>
    5774:	a00d883a 	mov	r6,r20
    5778:	a021883a 	mov	r16,r20
    577c:	003f8106 	br	5584 <__sfvwrite_r+0x1d0>
    5780:	b80b883a 	mov	r5,r23
    5784:	a00d883a 	mov	r6,r20
    5788:	00064ec0 	call	64ec <memmove>
    578c:	90c00217 	ldw	r3,8(r18)
    5790:	90800017 	ldw	r2,0(r18)
    5794:	a021883a 	mov	r16,r20
    5798:	1d07c83a 	sub	r3,r3,r20
    579c:	1505883a 	add	r2,r2,r20
    57a0:	a023883a 	mov	r17,r20
    57a4:	a027883a 	mov	r19,r20
    57a8:	90c00215 	stw	r3,8(r18)
    57ac:	90800015 	stw	r2,0(r18)
    57b0:	003f8006 	br	55b4 <__sfvwrite_r+0x200>
    57b4:	b809883a 	mov	r4,r23
    57b8:	01400284 	movi	r5,10
    57bc:	980d883a 	mov	r6,r19
    57c0:	00063680 	call	6368 <memchr>
    57c4:	10001726 	beq	r2,zero,5824 <__sfvwrite_r+0x470>
    57c8:	15c5c83a 	sub	r2,r2,r23
    57cc:	15000044 	addi	r20,r2,1
    57d0:	00800044 	movi	r2,1
    57d4:	d8800015 	stw	r2,0(sp)
    57d8:	003f9806 	br	563c <__sfvwrite_r+0x288>
    57dc:	b80b883a 	mov	r5,r23
    57e0:	800d883a 	mov	r6,r16
    57e4:	00064ec0 	call	64ec <memmove>
    57e8:	90c00017 	ldw	r3,0(r18)
    57ec:	e009883a 	mov	r4,fp
    57f0:	900b883a 	mov	r5,r18
    57f4:	1c07883a 	add	r3,r3,r16
    57f8:	90c00015 	stw	r3,0(r18)
    57fc:	8027883a 	mov	r19,r16
    5800:	0004a500 	call	4a50 <_fflush_r>
    5804:	103f6b26 	beq	r2,zero,55b4 <__sfvwrite_r+0x200>
    5808:	003f7f06 	br	5608 <__sfvwrite_r+0x254>
    580c:	400b883a 	mov	r5,r8
    5810:	e009883a 	mov	r4,fp
    5814:	00076f00 	call	76f0 <_realloc_r>
    5818:	103f7626 	beq	r2,zero,55f4 <__sfvwrite_r+0x240>
    581c:	1023883a 	mov	r17,r2
    5820:	003f5006 	br	5564 <__sfvwrite_r+0x1b0>
    5824:	00c00044 	movi	r3,1
    5828:	9d000044 	addi	r20,r19,1
    582c:	d8c00015 	stw	r3,0(sp)
    5830:	003f8206 	br	563c <__sfvwrite_r+0x288>
    5834:	9080030b 	ldhu	r2,12(r18)
    5838:	00c00244 	movi	r3,9
    583c:	013fffc4 	movi	r4,-1
    5840:	10801014 	ori	r2,r2,64
    5844:	9080030d 	sth	r2,12(r18)
    5848:	e0c00015 	stw	r3,0(fp)
    584c:	003f0606 	br	5468 <__sfvwrite_r+0xb4>

00005850 <_fwalk_reent>:
    5850:	defff704 	addi	sp,sp,-36
    5854:	dcc00315 	stw	r19,12(sp)
    5858:	24c0b804 	addi	r19,r4,736
    585c:	dd800615 	stw	r22,24(sp)
    5860:	dd400515 	stw	r21,20(sp)
    5864:	dfc00815 	stw	ra,32(sp)
    5868:	ddc00715 	stw	r23,28(sp)
    586c:	dd000415 	stw	r20,16(sp)
    5870:	dc800215 	stw	r18,8(sp)
    5874:	dc400115 	stw	r17,4(sp)
    5878:	dc000015 	stw	r16,0(sp)
    587c:	202b883a 	mov	r21,r4
    5880:	282d883a 	mov	r22,r5
    5884:	0004cd80 	call	4cd8 <__sfp_lock_acquire>
    5888:	98002126 	beq	r19,zero,5910 <_fwalk_reent+0xc0>
    588c:	002f883a 	mov	r23,zero
    5890:	9c800117 	ldw	r18,4(r19)
    5894:	9c000217 	ldw	r16,8(r19)
    5898:	90bfffc4 	addi	r2,r18,-1
    589c:	10000d16 	blt	r2,zero,58d4 <_fwalk_reent+0x84>
    58a0:	0023883a 	mov	r17,zero
    58a4:	053fffc4 	movi	r20,-1
    58a8:	8080030f 	ldh	r2,12(r16)
    58ac:	8c400044 	addi	r17,r17,1
    58b0:	10000626 	beq	r2,zero,58cc <_fwalk_reent+0x7c>
    58b4:	8080038f 	ldh	r2,14(r16)
    58b8:	800b883a 	mov	r5,r16
    58bc:	a809883a 	mov	r4,r21
    58c0:	15000226 	beq	r2,r20,58cc <_fwalk_reent+0x7c>
    58c4:	b03ee83a 	callr	r22
    58c8:	b8aeb03a 	or	r23,r23,r2
    58cc:	84001704 	addi	r16,r16,92
    58d0:	947ff51e 	bne	r18,r17,58a8 <_fwalk_reent+0x58>
    58d4:	9cc00017 	ldw	r19,0(r19)
    58d8:	983fed1e 	bne	r19,zero,5890 <_fwalk_reent+0x40>
    58dc:	0004cdc0 	call	4cdc <__sfp_lock_release>
    58e0:	b805883a 	mov	r2,r23
    58e4:	dfc00817 	ldw	ra,32(sp)
    58e8:	ddc00717 	ldw	r23,28(sp)
    58ec:	dd800617 	ldw	r22,24(sp)
    58f0:	dd400517 	ldw	r21,20(sp)
    58f4:	dd000417 	ldw	r20,16(sp)
    58f8:	dcc00317 	ldw	r19,12(sp)
    58fc:	dc800217 	ldw	r18,8(sp)
    5900:	dc400117 	ldw	r17,4(sp)
    5904:	dc000017 	ldw	r16,0(sp)
    5908:	dec00904 	addi	sp,sp,36
    590c:	f800283a 	ret
    5910:	002f883a 	mov	r23,zero
    5914:	003ff106 	br	58dc <_fwalk_reent+0x8c>

00005918 <_fwalk>:
    5918:	defff804 	addi	sp,sp,-32
    591c:	dcc00315 	stw	r19,12(sp)
    5920:	24c0b804 	addi	r19,r4,736
    5924:	dd400515 	stw	r21,20(sp)
    5928:	dfc00715 	stw	ra,28(sp)
    592c:	dd800615 	stw	r22,24(sp)
    5930:	dd000415 	stw	r20,16(sp)
    5934:	dc800215 	stw	r18,8(sp)
    5938:	dc400115 	stw	r17,4(sp)
    593c:	dc000015 	stw	r16,0(sp)
    5940:	282b883a 	mov	r21,r5
    5944:	0004cd80 	call	4cd8 <__sfp_lock_acquire>
    5948:	98001f26 	beq	r19,zero,59c8 <_fwalk+0xb0>
    594c:	002d883a 	mov	r22,zero
    5950:	9c800117 	ldw	r18,4(r19)
    5954:	9c000217 	ldw	r16,8(r19)
    5958:	90bfffc4 	addi	r2,r18,-1
    595c:	10000c16 	blt	r2,zero,5990 <_fwalk+0x78>
    5960:	0023883a 	mov	r17,zero
    5964:	053fffc4 	movi	r20,-1
    5968:	8080030f 	ldh	r2,12(r16)
    596c:	8c400044 	addi	r17,r17,1
    5970:	10000526 	beq	r2,zero,5988 <_fwalk+0x70>
    5974:	8080038f 	ldh	r2,14(r16)
    5978:	8009883a 	mov	r4,r16
    597c:	15000226 	beq	r2,r20,5988 <_fwalk+0x70>
    5980:	a83ee83a 	callr	r21
    5984:	b0acb03a 	or	r22,r22,r2
    5988:	84001704 	addi	r16,r16,92
    598c:	947ff61e 	bne	r18,r17,5968 <_fwalk+0x50>
    5990:	9cc00017 	ldw	r19,0(r19)
    5994:	983fee1e 	bne	r19,zero,5950 <_fwalk+0x38>
    5998:	0004cdc0 	call	4cdc <__sfp_lock_release>
    599c:	b005883a 	mov	r2,r22
    59a0:	dfc00717 	ldw	ra,28(sp)
    59a4:	dd800617 	ldw	r22,24(sp)
    59a8:	dd400517 	ldw	r21,20(sp)
    59ac:	dd000417 	ldw	r20,16(sp)
    59b0:	dcc00317 	ldw	r19,12(sp)
    59b4:	dc800217 	ldw	r18,8(sp)
    59b8:	dc400117 	ldw	r17,4(sp)
    59bc:	dc000017 	ldw	r16,0(sp)
    59c0:	dec00804 	addi	sp,sp,32
    59c4:	f800283a 	ret
    59c8:	002d883a 	mov	r22,zero
    59cc:	003ff206 	br	5998 <_fwalk+0x80>

000059d0 <__locale_charset>:
    59d0:	d0a00317 	ldw	r2,-32756(gp)
    59d4:	f800283a 	ret

000059d8 <_localeconv_r>:
    59d8:	00800074 	movhi	r2,1
    59dc:	10b6a204 	addi	r2,r2,-9592
    59e0:	f800283a 	ret

000059e4 <localeconv>:
    59e4:	00800074 	movhi	r2,1
    59e8:	10bdce04 	addi	r2,r2,-2248
    59ec:	11000017 	ldw	r4,0(r2)
    59f0:	00059d81 	jmpi	59d8 <_localeconv_r>

000059f4 <_setlocale_r>:
    59f4:	defffc04 	addi	sp,sp,-16
    59f8:	00c00074 	movhi	r3,1
    59fc:	18f67804 	addi	r3,r3,-9760
    5a00:	dc800215 	stw	r18,8(sp)
    5a04:	dc400115 	stw	r17,4(sp)
    5a08:	dc000015 	stw	r16,0(sp)
    5a0c:	2023883a 	mov	r17,r4
    5a10:	2825883a 	mov	r18,r5
    5a14:	dfc00315 	stw	ra,12(sp)
    5a18:	3021883a 	mov	r16,r6
    5a1c:	3009883a 	mov	r4,r6
    5a20:	180b883a 	mov	r5,r3
    5a24:	30000926 	beq	r6,zero,5a4c <_setlocale_r+0x58>
    5a28:	0007f100 	call	7f10 <strcmp>
    5a2c:	8009883a 	mov	r4,r16
    5a30:	01400074 	movhi	r5,1
    5a34:	29768904 	addi	r5,r5,-9692
    5a38:	10000b1e 	bne	r2,zero,5a68 <_setlocale_r+0x74>
    5a3c:	8c000d15 	stw	r16,52(r17)
    5a40:	8c800c15 	stw	r18,48(r17)
    5a44:	00c00074 	movhi	r3,1
    5a48:	18f67804 	addi	r3,r3,-9760
    5a4c:	1805883a 	mov	r2,r3
    5a50:	dfc00317 	ldw	ra,12(sp)
    5a54:	dc800217 	ldw	r18,8(sp)
    5a58:	dc400117 	ldw	r17,4(sp)
    5a5c:	dc000017 	ldw	r16,0(sp)
    5a60:	dec00404 	addi	sp,sp,16
    5a64:	f800283a 	ret
    5a68:	0007f100 	call	7f10 <strcmp>
    5a6c:	0007883a 	mov	r3,zero
    5a70:	103ff226 	beq	r2,zero,5a3c <_setlocale_r+0x48>
    5a74:	003ff506 	br	5a4c <_setlocale_r+0x58>

00005a78 <setlocale>:
    5a78:	01800074 	movhi	r6,1
    5a7c:	31bdce04 	addi	r6,r6,-2248
    5a80:	2007883a 	mov	r3,r4
    5a84:	31000017 	ldw	r4,0(r6)
    5a88:	280d883a 	mov	r6,r5
    5a8c:	180b883a 	mov	r5,r3
    5a90:	00059f41 	jmpi	59f4 <_setlocale_r>

00005a94 <__smakebuf_r>:
    5a94:	2880030b 	ldhu	r2,12(r5)
    5a98:	deffed04 	addi	sp,sp,-76
    5a9c:	dc401015 	stw	r17,64(sp)
    5aa0:	1080008c 	andi	r2,r2,2
    5aa4:	dc000f15 	stw	r16,60(sp)
    5aa8:	dfc01215 	stw	ra,72(sp)
    5aac:	dc801115 	stw	r18,68(sp)
    5ab0:	2821883a 	mov	r16,r5
    5ab4:	2023883a 	mov	r17,r4
    5ab8:	10000b26 	beq	r2,zero,5ae8 <__smakebuf_r+0x54>
    5abc:	28c010c4 	addi	r3,r5,67
    5ac0:	00800044 	movi	r2,1
    5ac4:	28800515 	stw	r2,20(r5)
    5ac8:	28c00415 	stw	r3,16(r5)
    5acc:	28c00015 	stw	r3,0(r5)
    5ad0:	dfc01217 	ldw	ra,72(sp)
    5ad4:	dc801117 	ldw	r18,68(sp)
    5ad8:	dc401017 	ldw	r17,64(sp)
    5adc:	dc000f17 	ldw	r16,60(sp)
    5ae0:	dec01304 	addi	sp,sp,76
    5ae4:	f800283a 	ret
    5ae8:	2940038f 	ldh	r5,14(r5)
    5aec:	28002116 	blt	r5,zero,5b74 <__smakebuf_r+0xe0>
    5af0:	d80d883a 	mov	r6,sp
    5af4:	00082a00 	call	82a0 <_fstat_r>
    5af8:	10001e16 	blt	r2,zero,5b74 <__smakebuf_r+0xe0>
    5afc:	d8800117 	ldw	r2,4(sp)
    5b00:	00e00014 	movui	r3,32768
    5b04:	113c000c 	andi	r4,r2,61440
    5b08:	20c03126 	beq	r4,r3,5bd0 <__smakebuf_r+0x13c>
    5b0c:	8080030b 	ldhu	r2,12(r16)
    5b10:	00c80004 	movi	r3,8192
    5b14:	10820014 	ori	r2,r2,2048
    5b18:	8080030d 	sth	r2,12(r16)
    5b1c:	20c01e26 	beq	r4,r3,5b98 <__smakebuf_r+0x104>
    5b20:	04810004 	movi	r18,1024
    5b24:	8809883a 	mov	r4,r17
    5b28:	900b883a 	mov	r5,r18
    5b2c:	0005c280 	call	5c28 <_malloc_r>
    5b30:	1009883a 	mov	r4,r2
    5b34:	10003126 	beq	r2,zero,5bfc <__smakebuf_r+0x168>
    5b38:	80c0030b 	ldhu	r3,12(r16)
    5b3c:	00800034 	movhi	r2,0
    5b40:	10937304 	addi	r2,r2,19916
    5b44:	88800f15 	stw	r2,60(r17)
    5b48:	18c02014 	ori	r3,r3,128
    5b4c:	84800515 	stw	r18,20(r16)
    5b50:	80c0030d 	sth	r3,12(r16)
    5b54:	81000415 	stw	r4,16(r16)
    5b58:	81000015 	stw	r4,0(r16)
    5b5c:	dfc01217 	ldw	ra,72(sp)
    5b60:	dc801117 	ldw	r18,68(sp)
    5b64:	dc401017 	ldw	r17,64(sp)
    5b68:	dc000f17 	ldw	r16,60(sp)
    5b6c:	dec01304 	addi	sp,sp,76
    5b70:	f800283a 	ret
    5b74:	80c0030b 	ldhu	r3,12(r16)
    5b78:	1880200c 	andi	r2,r3,128
    5b7c:	10000426 	beq	r2,zero,5b90 <__smakebuf_r+0xfc>
    5b80:	04801004 	movi	r18,64
    5b84:	18820014 	ori	r2,r3,2048
    5b88:	8080030d 	sth	r2,12(r16)
    5b8c:	003fe506 	br	5b24 <__smakebuf_r+0x90>
    5b90:	04810004 	movi	r18,1024
    5b94:	003ffb06 	br	5b84 <__smakebuf_r+0xf0>
    5b98:	8140038f 	ldh	r5,14(r16)
    5b9c:	8809883a 	mov	r4,r17
    5ba0:	00083140 	call	8314 <_isatty_r>
    5ba4:	103fde26 	beq	r2,zero,5b20 <__smakebuf_r+0x8c>
    5ba8:	8080030b 	ldhu	r2,12(r16)
    5bac:	80c010c4 	addi	r3,r16,67
    5bb0:	04810004 	movi	r18,1024
    5bb4:	10800054 	ori	r2,r2,1
    5bb8:	8080030d 	sth	r2,12(r16)
    5bbc:	00800044 	movi	r2,1
    5bc0:	80c00415 	stw	r3,16(r16)
    5bc4:	80800515 	stw	r2,20(r16)
    5bc8:	80c00015 	stw	r3,0(r16)
    5bcc:	003fd506 	br	5b24 <__smakebuf_r+0x90>
    5bd0:	80c00a17 	ldw	r3,40(r16)
    5bd4:	00800034 	movhi	r2,0
    5bd8:	109f7304 	addi	r2,r2,32204
    5bdc:	18bfcb1e 	bne	r3,r2,5b0c <__smakebuf_r+0x78>
    5be0:	8080030b 	ldhu	r2,12(r16)
    5be4:	00c10004 	movi	r3,1024
    5be8:	1825883a 	mov	r18,r3
    5bec:	10c4b03a 	or	r2,r2,r3
    5bf0:	8080030d 	sth	r2,12(r16)
    5bf4:	80c01315 	stw	r3,76(r16)
    5bf8:	003fca06 	br	5b24 <__smakebuf_r+0x90>
    5bfc:	8100030b 	ldhu	r4,12(r16)
    5c00:	2080800c 	andi	r2,r4,512
    5c04:	103fb21e 	bne	r2,zero,5ad0 <__smakebuf_r+0x3c>
    5c08:	80c010c4 	addi	r3,r16,67
    5c0c:	21000094 	ori	r4,r4,2
    5c10:	00800044 	movi	r2,1
    5c14:	80800515 	stw	r2,20(r16)
    5c18:	8100030d 	sth	r4,12(r16)
    5c1c:	80c00415 	stw	r3,16(r16)
    5c20:	80c00015 	stw	r3,0(r16)
    5c24:	003faa06 	br	5ad0 <__smakebuf_r+0x3c>

00005c28 <_malloc_r>:
    5c28:	defff604 	addi	sp,sp,-40
    5c2c:	28c002c4 	addi	r3,r5,11
    5c30:	00800584 	movi	r2,22
    5c34:	dc800215 	stw	r18,8(sp)
    5c38:	dfc00915 	stw	ra,36(sp)
    5c3c:	df000815 	stw	fp,32(sp)
    5c40:	ddc00715 	stw	r23,28(sp)
    5c44:	dd800615 	stw	r22,24(sp)
    5c48:	dd400515 	stw	r21,20(sp)
    5c4c:	dd000415 	stw	r20,16(sp)
    5c50:	dcc00315 	stw	r19,12(sp)
    5c54:	dc400115 	stw	r17,4(sp)
    5c58:	dc000015 	stw	r16,0(sp)
    5c5c:	2025883a 	mov	r18,r4
    5c60:	10c01236 	bltu	r2,r3,5cac <_malloc_r+0x84>
    5c64:	04400404 	movi	r17,16
    5c68:	8940142e 	bgeu	r17,r5,5cbc <_malloc_r+0x94>
    5c6c:	00800304 	movi	r2,12
    5c70:	0007883a 	mov	r3,zero
    5c74:	90800015 	stw	r2,0(r18)
    5c78:	1805883a 	mov	r2,r3
    5c7c:	dfc00917 	ldw	ra,36(sp)
    5c80:	df000817 	ldw	fp,32(sp)
    5c84:	ddc00717 	ldw	r23,28(sp)
    5c88:	dd800617 	ldw	r22,24(sp)
    5c8c:	dd400517 	ldw	r21,20(sp)
    5c90:	dd000417 	ldw	r20,16(sp)
    5c94:	dcc00317 	ldw	r19,12(sp)
    5c98:	dc800217 	ldw	r18,8(sp)
    5c9c:	dc400117 	ldw	r17,4(sp)
    5ca0:	dc000017 	ldw	r16,0(sp)
    5ca4:	dec00a04 	addi	sp,sp,40
    5ca8:	f800283a 	ret
    5cac:	00bffe04 	movi	r2,-8
    5cb0:	18a2703a 	and	r17,r3,r2
    5cb4:	883fed16 	blt	r17,zero,5c6c <_malloc_r+0x44>
    5cb8:	897fec36 	bltu	r17,r5,5c6c <_malloc_r+0x44>
    5cbc:	9009883a 	mov	r4,r18
    5cc0:	000b0180 	call	b018 <__malloc_lock>
    5cc4:	00807dc4 	movi	r2,503
    5cc8:	14402b2e 	bgeu	r2,r17,5d78 <_malloc_r+0x150>
    5ccc:	8806d27a 	srli	r3,r17,9
    5cd0:	18003f1e 	bne	r3,zero,5dd0 <_malloc_r+0x1a8>
    5cd4:	880cd0fa 	srli	r6,r17,3
    5cd8:	300490fa 	slli	r2,r6,3
    5cdc:	02c00074 	movhi	r11,1
    5ce0:	5af84a04 	addi	r11,r11,-7896
    5ce4:	12cb883a 	add	r5,r2,r11
    5ce8:	2c000317 	ldw	r16,12(r5)
    5cec:	580f883a 	mov	r7,r11
    5cf0:	2c00041e 	bne	r5,r16,5d04 <_malloc_r+0xdc>
    5cf4:	00000a06 	br	5d20 <_malloc_r+0xf8>
    5cf8:	1800860e 	bge	r3,zero,5f14 <_malloc_r+0x2ec>
    5cfc:	84000317 	ldw	r16,12(r16)
    5d00:	2c000726 	beq	r5,r16,5d20 <_malloc_r+0xf8>
    5d04:	80800117 	ldw	r2,4(r16)
    5d08:	00ffff04 	movi	r3,-4
    5d0c:	10c8703a 	and	r4,r2,r3
    5d10:	2447c83a 	sub	r3,r4,r17
    5d14:	008003c4 	movi	r2,15
    5d18:	10fff70e 	bge	r2,r3,5cf8 <_malloc_r+0xd0>
    5d1c:	31bfffc4 	addi	r6,r6,-1
    5d20:	32400044 	addi	r9,r6,1
    5d24:	02800074 	movhi	r10,1
    5d28:	52b84c04 	addi	r10,r10,-7888
    5d2c:	54000217 	ldw	r16,8(r10)
    5d30:	8280a026 	beq	r16,r10,5fb4 <_malloc_r+0x38c>
    5d34:	80800117 	ldw	r2,4(r16)
    5d38:	00ffff04 	movi	r3,-4
    5d3c:	10ca703a 	and	r5,r2,r3
    5d40:	2c4dc83a 	sub	r6,r5,r17
    5d44:	008003c4 	movi	r2,15
    5d48:	11808316 	blt	r2,r6,5f58 <_malloc_r+0x330>
    5d4c:	52800315 	stw	r10,12(r10)
    5d50:	52800215 	stw	r10,8(r10)
    5d54:	30002916 	blt	r6,zero,5dfc <_malloc_r+0x1d4>
    5d58:	8147883a 	add	r3,r16,r5
    5d5c:	18800117 	ldw	r2,4(r3)
    5d60:	9009883a 	mov	r4,r18
    5d64:	10800054 	ori	r2,r2,1
    5d68:	18800115 	stw	r2,4(r3)
    5d6c:	000b0380 	call	b038 <__malloc_unlock>
    5d70:	80c00204 	addi	r3,r16,8
    5d74:	003fc006 	br	5c78 <_malloc_r+0x50>
    5d78:	02c00074 	movhi	r11,1
    5d7c:	5af84a04 	addi	r11,r11,-7896
    5d80:	8ac5883a 	add	r2,r17,r11
    5d84:	14000317 	ldw	r16,12(r2)
    5d88:	580f883a 	mov	r7,r11
    5d8c:	8806d0fa 	srli	r3,r17,3
    5d90:	14006c26 	beq	r2,r16,5f44 <_malloc_r+0x31c>
    5d94:	80c00117 	ldw	r3,4(r16)
    5d98:	00bfff04 	movi	r2,-4
    5d9c:	81800317 	ldw	r6,12(r16)
    5da0:	1886703a 	and	r3,r3,r2
    5da4:	80c7883a 	add	r3,r16,r3
    5da8:	18800117 	ldw	r2,4(r3)
    5dac:	81400217 	ldw	r5,8(r16)
    5db0:	9009883a 	mov	r4,r18
    5db4:	10800054 	ori	r2,r2,1
    5db8:	18800115 	stw	r2,4(r3)
    5dbc:	31400215 	stw	r5,8(r6)
    5dc0:	29800315 	stw	r6,12(r5)
    5dc4:	000b0380 	call	b038 <__malloc_unlock>
    5dc8:	80c00204 	addi	r3,r16,8
    5dcc:	003faa06 	br	5c78 <_malloc_r+0x50>
    5dd0:	00800104 	movi	r2,4
    5dd4:	10c0052e 	bgeu	r2,r3,5dec <_malloc_r+0x1c4>
    5dd8:	00800504 	movi	r2,20
    5ddc:	10c07836 	bltu	r2,r3,5fc0 <_malloc_r+0x398>
    5de0:	198016c4 	addi	r6,r3,91
    5de4:	300490fa 	slli	r2,r6,3
    5de8:	003fbc06 	br	5cdc <_malloc_r+0xb4>
    5dec:	8804d1ba 	srli	r2,r17,6
    5df0:	11800e04 	addi	r6,r2,56
    5df4:	300490fa 	slli	r2,r6,3
    5df8:	003fb806 	br	5cdc <_malloc_r+0xb4>
    5dfc:	00807fc4 	movi	r2,511
    5e00:	1140bb36 	bltu	r2,r5,60f0 <_malloc_r+0x4c8>
    5e04:	2806d0fa 	srli	r3,r5,3
    5e08:	573ffe04 	addi	fp,r10,-8
    5e0c:	00800044 	movi	r2,1
    5e10:	180890fa 	slli	r4,r3,3
    5e14:	1807d0ba 	srai	r3,r3,2
    5e18:	e1c00117 	ldw	r7,4(fp)
    5e1c:	5909883a 	add	r4,r11,r4
    5e20:	21400217 	ldw	r5,8(r4)
    5e24:	10c4983a 	sll	r2,r2,r3
    5e28:	81000315 	stw	r4,12(r16)
    5e2c:	81400215 	stw	r5,8(r16)
    5e30:	388eb03a 	or	r7,r7,r2
    5e34:	2c000315 	stw	r16,12(r5)
    5e38:	24000215 	stw	r16,8(r4)
    5e3c:	e1c00115 	stw	r7,4(fp)
    5e40:	4807883a 	mov	r3,r9
    5e44:	4800cd16 	blt	r9,zero,617c <_malloc_r+0x554>
    5e48:	1807d0ba 	srai	r3,r3,2
    5e4c:	00800044 	movi	r2,1
    5e50:	10c8983a 	sll	r4,r2,r3
    5e54:	39004436 	bltu	r7,r4,5f68 <_malloc_r+0x340>
    5e58:	21c4703a 	and	r2,r4,r7
    5e5c:	10000a1e 	bne	r2,zero,5e88 <_malloc_r+0x260>
    5e60:	2109883a 	add	r4,r4,r4
    5e64:	00bfff04 	movi	r2,-4
    5e68:	4884703a 	and	r2,r9,r2
    5e6c:	3906703a 	and	r3,r7,r4
    5e70:	12400104 	addi	r9,r2,4
    5e74:	1800041e 	bne	r3,zero,5e88 <_malloc_r+0x260>
    5e78:	2109883a 	add	r4,r4,r4
    5e7c:	3904703a 	and	r2,r7,r4
    5e80:	4a400104 	addi	r9,r9,4
    5e84:	103ffc26 	beq	r2,zero,5e78 <_malloc_r+0x250>
    5e88:	480490fa 	slli	r2,r9,3
    5e8c:	4819883a 	mov	r12,r9
    5e90:	023fff04 	movi	r8,-4
    5e94:	589b883a 	add	r13,r11,r2
    5e98:	6807883a 	mov	r3,r13
    5e9c:	014003c4 	movi	r5,15
    5ea0:	1c000317 	ldw	r16,12(r3)
    5ea4:	1c00041e 	bne	r3,r16,5eb8 <_malloc_r+0x290>
    5ea8:	0000a706 	br	6148 <_malloc_r+0x520>
    5eac:	3000ab0e 	bge	r6,zero,615c <_malloc_r+0x534>
    5eb0:	84000317 	ldw	r16,12(r16)
    5eb4:	1c00a426 	beq	r3,r16,6148 <_malloc_r+0x520>
    5eb8:	80800117 	ldw	r2,4(r16)
    5ebc:	1204703a 	and	r2,r2,r8
    5ec0:	144dc83a 	sub	r6,r2,r17
    5ec4:	29bff90e 	bge	r5,r6,5eac <_malloc_r+0x284>
    5ec8:	81000317 	ldw	r4,12(r16)
    5ecc:	80c00217 	ldw	r3,8(r16)
    5ed0:	89400054 	ori	r5,r17,1
    5ed4:	8445883a 	add	r2,r16,r17
    5ed8:	20c00215 	stw	r3,8(r4)
    5edc:	19000315 	stw	r4,12(r3)
    5ee0:	81400115 	stw	r5,4(r16)
    5ee4:	1187883a 	add	r3,r2,r6
    5ee8:	31000054 	ori	r4,r6,1
    5eec:	50800315 	stw	r2,12(r10)
    5ef0:	50800215 	stw	r2,8(r10)
    5ef4:	19800015 	stw	r6,0(r3)
    5ef8:	11000115 	stw	r4,4(r2)
    5efc:	12800215 	stw	r10,8(r2)
    5f00:	12800315 	stw	r10,12(r2)
    5f04:	9009883a 	mov	r4,r18
    5f08:	000b0380 	call	b038 <__malloc_unlock>
    5f0c:	80c00204 	addi	r3,r16,8
    5f10:	003f5906 	br	5c78 <_malloc_r+0x50>
    5f14:	8109883a 	add	r4,r16,r4
    5f18:	20800117 	ldw	r2,4(r4)
    5f1c:	80c00217 	ldw	r3,8(r16)
    5f20:	81400317 	ldw	r5,12(r16)
    5f24:	10800054 	ori	r2,r2,1
    5f28:	20800115 	stw	r2,4(r4)
    5f2c:	28c00215 	stw	r3,8(r5)
    5f30:	19400315 	stw	r5,12(r3)
    5f34:	9009883a 	mov	r4,r18
    5f38:	000b0380 	call	b038 <__malloc_unlock>
    5f3c:	80c00204 	addi	r3,r16,8
    5f40:	003f4d06 	br	5c78 <_malloc_r+0x50>
    5f44:	80800204 	addi	r2,r16,8
    5f48:	14000317 	ldw	r16,12(r2)
    5f4c:	143f911e 	bne	r2,r16,5d94 <_malloc_r+0x16c>
    5f50:	1a400084 	addi	r9,r3,2
    5f54:	003f7306 	br	5d24 <_malloc_r+0xfc>
    5f58:	88c00054 	ori	r3,r17,1
    5f5c:	8445883a 	add	r2,r16,r17
    5f60:	80c00115 	stw	r3,4(r16)
    5f64:	003fdf06 	br	5ee4 <_malloc_r+0x2bc>
    5f68:	e4000217 	ldw	r16,8(fp)
    5f6c:	00bfff04 	movi	r2,-4
    5f70:	80c00117 	ldw	r3,4(r16)
    5f74:	802d883a 	mov	r22,r16
    5f78:	18aa703a 	and	r21,r3,r2
    5f7c:	ac401636 	bltu	r21,r17,5fd8 <_malloc_r+0x3b0>
    5f80:	ac49c83a 	sub	r4,r21,r17
    5f84:	008003c4 	movi	r2,15
    5f88:	1100130e 	bge	r2,r4,5fd8 <_malloc_r+0x3b0>
    5f8c:	88800054 	ori	r2,r17,1
    5f90:	8447883a 	add	r3,r16,r17
    5f94:	80800115 	stw	r2,4(r16)
    5f98:	20800054 	ori	r2,r4,1
    5f9c:	18800115 	stw	r2,4(r3)
    5fa0:	e0c00215 	stw	r3,8(fp)
    5fa4:	9009883a 	mov	r4,r18
    5fa8:	000b0380 	call	b038 <__malloc_unlock>
    5fac:	80c00204 	addi	r3,r16,8
    5fb0:	003f3106 	br	5c78 <_malloc_r+0x50>
    5fb4:	39c00117 	ldw	r7,4(r7)
    5fb8:	573ffe04 	addi	fp,r10,-8
    5fbc:	003fa006 	br	5e40 <_malloc_r+0x218>
    5fc0:	00801504 	movi	r2,84
    5fc4:	10c06736 	bltu	r2,r3,6164 <_malloc_r+0x53c>
    5fc8:	8804d33a 	srli	r2,r17,12
    5fcc:	11801b84 	addi	r6,r2,110
    5fd0:	300490fa 	slli	r2,r6,3
    5fd4:	003f4106 	br	5cdc <_malloc_r+0xb4>
    5fd8:	d0a6aa17 	ldw	r2,-25944(gp)
    5fdc:	d0e00517 	ldw	r3,-32748(gp)
    5fe0:	053fffc4 	movi	r20,-1
    5fe4:	10800404 	addi	r2,r2,16
    5fe8:	88a7883a 	add	r19,r17,r2
    5fec:	1d000326 	beq	r3,r20,5ffc <_malloc_r+0x3d4>
    5ff0:	98c3ffc4 	addi	r3,r19,4095
    5ff4:	00bc0004 	movi	r2,-4096
    5ff8:	18a6703a 	and	r19,r3,r2
    5ffc:	9009883a 	mov	r4,r18
    6000:	980b883a 	mov	r5,r19
    6004:	0007d540 	call	7d54 <_sbrk_r>
    6008:	1009883a 	mov	r4,r2
    600c:	15000426 	beq	r2,r20,6020 <_malloc_r+0x3f8>
    6010:	854b883a 	add	r5,r16,r21
    6014:	1029883a 	mov	r20,r2
    6018:	11405a2e 	bgeu	r2,r5,6184 <_malloc_r+0x55c>
    601c:	87000c26 	beq	r16,fp,6050 <_malloc_r+0x428>
    6020:	e4000217 	ldw	r16,8(fp)
    6024:	80c00117 	ldw	r3,4(r16)
    6028:	00bfff04 	movi	r2,-4
    602c:	1884703a 	and	r2,r3,r2
    6030:	14400336 	bltu	r2,r17,6040 <_malloc_r+0x418>
    6034:	1449c83a 	sub	r4,r2,r17
    6038:	008003c4 	movi	r2,15
    603c:	113fd316 	blt	r2,r4,5f8c <_malloc_r+0x364>
    6040:	9009883a 	mov	r4,r18
    6044:	000b0380 	call	b038 <__malloc_unlock>
    6048:	0007883a 	mov	r3,zero
    604c:	003f0a06 	br	5c78 <_malloc_r+0x50>
    6050:	05c00074 	movhi	r23,1
    6054:	bdc48404 	addi	r23,r23,4624
    6058:	b8800017 	ldw	r2,0(r23)
    605c:	988d883a 	add	r6,r19,r2
    6060:	b9800015 	stw	r6,0(r23)
    6064:	d0e00517 	ldw	r3,-32748(gp)
    6068:	00bfffc4 	movi	r2,-1
    606c:	18808e26 	beq	r3,r2,62a8 <_malloc_r+0x680>
    6070:	2145c83a 	sub	r2,r4,r5
    6074:	3085883a 	add	r2,r6,r2
    6078:	b8800015 	stw	r2,0(r23)
    607c:	20c001cc 	andi	r3,r4,7
    6080:	18005f1e 	bne	r3,zero,6200 <_malloc_r+0x5d8>
    6084:	000b883a 	mov	r5,zero
    6088:	a4c5883a 	add	r2,r20,r19
    608c:	1083ffcc 	andi	r2,r2,4095
    6090:	00c40004 	movi	r3,4096
    6094:	1887c83a 	sub	r3,r3,r2
    6098:	28e7883a 	add	r19,r5,r3
    609c:	9009883a 	mov	r4,r18
    60a0:	980b883a 	mov	r5,r19
    60a4:	0007d540 	call	7d54 <_sbrk_r>
    60a8:	1007883a 	mov	r3,r2
    60ac:	00bfffc4 	movi	r2,-1
    60b0:	18807a26 	beq	r3,r2,629c <_malloc_r+0x674>
    60b4:	1d05c83a 	sub	r2,r3,r20
    60b8:	9885883a 	add	r2,r19,r2
    60bc:	10c00054 	ori	r3,r2,1
    60c0:	b8800017 	ldw	r2,0(r23)
    60c4:	a021883a 	mov	r16,r20
    60c8:	a0c00115 	stw	r3,4(r20)
    60cc:	9885883a 	add	r2,r19,r2
    60d0:	b8800015 	stw	r2,0(r23)
    60d4:	e5000215 	stw	r20,8(fp)
    60d8:	b7003626 	beq	r22,fp,61b4 <_malloc_r+0x58c>
    60dc:	018003c4 	movi	r6,15
    60e0:	35404b36 	bltu	r6,r21,6210 <_malloc_r+0x5e8>
    60e4:	00800044 	movi	r2,1
    60e8:	a0800115 	stw	r2,4(r20)
    60ec:	003fcd06 	br	6024 <_malloc_r+0x3fc>
    60f0:	2808d27a 	srli	r4,r5,9
    60f4:	2000371e 	bne	r4,zero,61d4 <_malloc_r+0x5ac>
    60f8:	2808d0fa 	srli	r4,r5,3
    60fc:	200690fa 	slli	r3,r4,3
    6100:	1ad1883a 	add	r8,r3,r11
    6104:	41800217 	ldw	r6,8(r8)
    6108:	41805b26 	beq	r8,r6,6278 <_malloc_r+0x650>
    610c:	30800117 	ldw	r2,4(r6)
    6110:	00ffff04 	movi	r3,-4
    6114:	10c4703a 	and	r2,r2,r3
    6118:	2880022e 	bgeu	r5,r2,6124 <_malloc_r+0x4fc>
    611c:	31800217 	ldw	r6,8(r6)
    6120:	41bffa1e 	bne	r8,r6,610c <_malloc_r+0x4e4>
    6124:	32000317 	ldw	r8,12(r6)
    6128:	39c00117 	ldw	r7,4(r7)
    612c:	82000315 	stw	r8,12(r16)
    6130:	81800215 	stw	r6,8(r16)
    6134:	07000074 	movhi	fp,1
    6138:	e7384a04 	addi	fp,fp,-7896
    613c:	34000315 	stw	r16,12(r6)
    6140:	44000215 	stw	r16,8(r8)
    6144:	003f3e06 	br	5e40 <_malloc_r+0x218>
    6148:	63000044 	addi	r12,r12,1
    614c:	608000cc 	andi	r2,r12,3
    6150:	10005d26 	beq	r2,zero,62c8 <_malloc_r+0x6a0>
    6154:	18c00204 	addi	r3,r3,8
    6158:	003f5106 	br	5ea0 <_malloc_r+0x278>
    615c:	8089883a 	add	r4,r16,r2
    6160:	003f6d06 	br	5f18 <_malloc_r+0x2f0>
    6164:	00805504 	movi	r2,340
    6168:	10c02036 	bltu	r2,r3,61ec <_malloc_r+0x5c4>
    616c:	8804d3fa 	srli	r2,r17,15
    6170:	11801dc4 	addi	r6,r2,119
    6174:	300490fa 	slli	r2,r6,3
    6178:	003ed806 	br	5cdc <_malloc_r+0xb4>
    617c:	48c000c4 	addi	r3,r9,3
    6180:	003f3106 	br	5e48 <_malloc_r+0x220>
    6184:	05c00074 	movhi	r23,1
    6188:	bdc48404 	addi	r23,r23,4624
    618c:	b8800017 	ldw	r2,0(r23)
    6190:	988d883a 	add	r6,r19,r2
    6194:	b9800015 	stw	r6,0(r23)
    6198:	293fb21e 	bne	r5,r4,6064 <_malloc_r+0x43c>
    619c:	2083ffcc 	andi	r2,r4,4095
    61a0:	103fb01e 	bne	r2,zero,6064 <_malloc_r+0x43c>
    61a4:	e4000217 	ldw	r16,8(fp)
    61a8:	9d45883a 	add	r2,r19,r21
    61ac:	10800054 	ori	r2,r2,1
    61b0:	80800115 	stw	r2,4(r16)
    61b4:	b8c00017 	ldw	r3,0(r23)
    61b8:	d0a6ab17 	ldw	r2,-25940(gp)
    61bc:	10c0012e 	bgeu	r2,r3,61c4 <_malloc_r+0x59c>
    61c0:	d0e6ab15 	stw	r3,-25940(gp)
    61c4:	d0a6ac17 	ldw	r2,-25936(gp)
    61c8:	10ff962e 	bgeu	r2,r3,6024 <_malloc_r+0x3fc>
    61cc:	d0e6ac15 	stw	r3,-25936(gp)
    61d0:	003f9406 	br	6024 <_malloc_r+0x3fc>
    61d4:	00800104 	movi	r2,4
    61d8:	11001e36 	bltu	r2,r4,6254 <_malloc_r+0x62c>
    61dc:	2804d1ba 	srli	r2,r5,6
    61e0:	11000e04 	addi	r4,r2,56
    61e4:	200690fa 	slli	r3,r4,3
    61e8:	003fc506 	br	6100 <_malloc_r+0x4d8>
    61ec:	00815504 	movi	r2,1364
    61f0:	10c01d2e 	bgeu	r2,r3,6268 <_malloc_r+0x640>
    61f4:	01801f84 	movi	r6,126
    61f8:	0080fc04 	movi	r2,1008
    61fc:	003eb706 	br	5cdc <_malloc_r+0xb4>
    6200:	00800204 	movi	r2,8
    6204:	10cbc83a 	sub	r5,r2,r3
    6208:	2169883a 	add	r20,r4,r5
    620c:	003f9e06 	br	6088 <_malloc_r+0x460>
    6210:	00bffe04 	movi	r2,-8
    6214:	a93ffd04 	addi	r4,r21,-12
    6218:	2088703a 	and	r4,r4,r2
    621c:	b10b883a 	add	r5,r22,r4
    6220:	00c00144 	movi	r3,5
    6224:	28c00215 	stw	r3,8(r5)
    6228:	28c00115 	stw	r3,4(r5)
    622c:	b0800117 	ldw	r2,4(r22)
    6230:	1080004c 	andi	r2,r2,1
    6234:	2084b03a 	or	r2,r4,r2
    6238:	b0800115 	stw	r2,4(r22)
    623c:	313fdd2e 	bgeu	r6,r4,61b4 <_malloc_r+0x58c>
    6240:	b1400204 	addi	r5,r22,8
    6244:	9009883a 	mov	r4,r18
    6248:	00050a00 	call	50a0 <_free_r>
    624c:	e4000217 	ldw	r16,8(fp)
    6250:	003fd806 	br	61b4 <_malloc_r+0x58c>
    6254:	00800504 	movi	r2,20
    6258:	11001536 	bltu	r2,r4,62b0 <_malloc_r+0x688>
    625c:	210016c4 	addi	r4,r4,91
    6260:	200690fa 	slli	r3,r4,3
    6264:	003fa606 	br	6100 <_malloc_r+0x4d8>
    6268:	8804d4ba 	srli	r2,r17,18
    626c:	11801f04 	addi	r6,r2,124
    6270:	300490fa 	slli	r2,r6,3
    6274:	003e9906 	br	5cdc <_malloc_r+0xb4>
    6278:	2009d0ba 	srai	r4,r4,2
    627c:	01400074 	movhi	r5,1
    6280:	29784a04 	addi	r5,r5,-7896
    6284:	00c00044 	movi	r3,1
    6288:	28800117 	ldw	r2,4(r5)
    628c:	1906983a 	sll	r3,r3,r4
    6290:	10c4b03a 	or	r2,r2,r3
    6294:	28800115 	stw	r2,4(r5)
    6298:	003fa306 	br	6128 <_malloc_r+0x500>
    629c:	0027883a 	mov	r19,zero
    62a0:	00c00044 	movi	r3,1
    62a4:	003f8606 	br	60c0 <_malloc_r+0x498>
    62a8:	d1200515 	stw	r4,-32748(gp)
    62ac:	003f7306 	br	607c <_malloc_r+0x454>
    62b0:	00801504 	movi	r2,84
    62b4:	11001936 	bltu	r2,r4,631c <_malloc_r+0x6f4>
    62b8:	2804d33a 	srli	r2,r5,12
    62bc:	11001b84 	addi	r4,r2,110
    62c0:	200690fa 	slli	r3,r4,3
    62c4:	003f8e06 	br	6100 <_malloc_r+0x4d8>
    62c8:	480b883a 	mov	r5,r9
    62cc:	6807883a 	mov	r3,r13
    62d0:	288000cc 	andi	r2,r5,3
    62d4:	18fffe04 	addi	r3,r3,-8
    62d8:	297fffc4 	addi	r5,r5,-1
    62dc:	10001526 	beq	r2,zero,6334 <_malloc_r+0x70c>
    62e0:	18800217 	ldw	r2,8(r3)
    62e4:	10fffa26 	beq	r2,r3,62d0 <_malloc_r+0x6a8>
    62e8:	2109883a 	add	r4,r4,r4
    62ec:	393f1e36 	bltu	r7,r4,5f68 <_malloc_r+0x340>
    62f0:	203f1d26 	beq	r4,zero,5f68 <_malloc_r+0x340>
    62f4:	21c4703a 	and	r2,r4,r7
    62f8:	10000226 	beq	r2,zero,6304 <_malloc_r+0x6dc>
    62fc:	6013883a 	mov	r9,r12
    6300:	003ee106 	br	5e88 <_malloc_r+0x260>
    6304:	2109883a 	add	r4,r4,r4
    6308:	3904703a 	and	r2,r7,r4
    630c:	63000104 	addi	r12,r12,4
    6310:	103ffc26 	beq	r2,zero,6304 <_malloc_r+0x6dc>
    6314:	6013883a 	mov	r9,r12
    6318:	003edb06 	br	5e88 <_malloc_r+0x260>
    631c:	00805504 	movi	r2,340
    6320:	11000836 	bltu	r2,r4,6344 <_malloc_r+0x71c>
    6324:	2804d3fa 	srli	r2,r5,15
    6328:	11001dc4 	addi	r4,r2,119
    632c:	200690fa 	slli	r3,r4,3
    6330:	003f7306 	br	6100 <_malloc_r+0x4d8>
    6334:	0104303a 	nor	r2,zero,r4
    6338:	388e703a 	and	r7,r7,r2
    633c:	e1c00115 	stw	r7,4(fp)
    6340:	003fe906 	br	62e8 <_malloc_r+0x6c0>
    6344:	00815504 	movi	r2,1364
    6348:	1100032e 	bgeu	r2,r4,6358 <_malloc_r+0x730>
    634c:	01001f84 	movi	r4,126
    6350:	00c0fc04 	movi	r3,1008
    6354:	003f6a06 	br	6100 <_malloc_r+0x4d8>
    6358:	2804d4ba 	srli	r2,r5,18
    635c:	11001f04 	addi	r4,r2,124
    6360:	200690fa 	slli	r3,r4,3
    6364:	003f6606 	br	6100 <_malloc_r+0x4d8>

00006368 <memchr>:
    6368:	008000c4 	movi	r2,3
    636c:	29403fcc 	andi	r5,r5,255
    6370:	2007883a 	mov	r3,r4
    6374:	1180022e 	bgeu	r2,r6,6380 <memchr+0x18>
    6378:	2084703a 	and	r2,r4,r2
    637c:	10000b26 	beq	r2,zero,63ac <memchr+0x44>
    6380:	313fffc4 	addi	r4,r6,-1
    6384:	3000051e 	bne	r6,zero,639c <memchr+0x34>
    6388:	00002c06 	br	643c <memchr+0xd4>
    638c:	213fffc4 	addi	r4,r4,-1
    6390:	00bfffc4 	movi	r2,-1
    6394:	18c00044 	addi	r3,r3,1
    6398:	20802826 	beq	r4,r2,643c <memchr+0xd4>
    639c:	18800003 	ldbu	r2,0(r3)
    63a0:	28bffa1e 	bne	r5,r2,638c <memchr+0x24>
    63a4:	1805883a 	mov	r2,r3
    63a8:	f800283a 	ret
    63ac:	0011883a 	mov	r8,zero
    63b0:	0007883a 	mov	r3,zero
    63b4:	01c00104 	movi	r7,4
    63b8:	4004923a 	slli	r2,r8,8
    63bc:	18c00044 	addi	r3,r3,1
    63c0:	1151883a 	add	r8,r2,r5
    63c4:	19fffc1e 	bne	r3,r7,63b8 <memchr+0x50>
    63c8:	02bfbff4 	movhi	r10,65279
    63cc:	52bfbfc4 	addi	r10,r10,-257
    63d0:	02602074 	movhi	r9,32897
    63d4:	4a602004 	addi	r9,r9,-32640
    63d8:	02c000c4 	movi	r11,3
    63dc:	20800017 	ldw	r2,0(r4)
    63e0:	31bfff04 	addi	r6,r6,-4
    63e4:	200f883a 	mov	r7,r4
    63e8:	1204f03a 	xor	r2,r2,r8
    63ec:	1287883a 	add	r3,r2,r10
    63f0:	1a46703a 	and	r3,r3,r9
    63f4:	0084303a 	nor	r2,zero,r2
    63f8:	10c4703a 	and	r2,r2,r3
    63fc:	10000b26 	beq	r2,zero,642c <memchr+0xc4>
    6400:	20800003 	ldbu	r2,0(r4)
    6404:	28800f26 	beq	r5,r2,6444 <memchr+0xdc>
    6408:	20800043 	ldbu	r2,1(r4)
    640c:	21c00044 	addi	r7,r4,1
    6410:	28800c26 	beq	r5,r2,6444 <memchr+0xdc>
    6414:	20800083 	ldbu	r2,2(r4)
    6418:	21c00084 	addi	r7,r4,2
    641c:	28800926 	beq	r5,r2,6444 <memchr+0xdc>
    6420:	208000c3 	ldbu	r2,3(r4)
    6424:	21c000c4 	addi	r7,r4,3
    6428:	28800626 	beq	r5,r2,6444 <memchr+0xdc>
    642c:	21000104 	addi	r4,r4,4
    6430:	59bfea36 	bltu	r11,r6,63dc <memchr+0x74>
    6434:	2007883a 	mov	r3,r4
    6438:	003fd106 	br	6380 <memchr+0x18>
    643c:	0005883a 	mov	r2,zero
    6440:	f800283a 	ret
    6444:	3805883a 	mov	r2,r7
    6448:	f800283a 	ret

0000644c <memcpy>:
    644c:	01c003c4 	movi	r7,15
    6450:	2007883a 	mov	r3,r4
    6454:	3980032e 	bgeu	r7,r6,6464 <memcpy+0x18>
    6458:	2904b03a 	or	r2,r5,r4
    645c:	108000cc 	andi	r2,r2,3
    6460:	10000926 	beq	r2,zero,6488 <memcpy+0x3c>
    6464:	30000626 	beq	r6,zero,6480 <memcpy+0x34>
    6468:	30cd883a 	add	r6,r6,r3
    646c:	28800003 	ldbu	r2,0(r5)
    6470:	29400044 	addi	r5,r5,1
    6474:	18800005 	stb	r2,0(r3)
    6478:	18c00044 	addi	r3,r3,1
    647c:	30fffb1e 	bne	r6,r3,646c <memcpy+0x20>
    6480:	2005883a 	mov	r2,r4
    6484:	f800283a 	ret
    6488:	3811883a 	mov	r8,r7
    648c:	200f883a 	mov	r7,r4
    6490:	28c00017 	ldw	r3,0(r5)
    6494:	31bffc04 	addi	r6,r6,-16
    6498:	38c00015 	stw	r3,0(r7)
    649c:	28800117 	ldw	r2,4(r5)
    64a0:	38800115 	stw	r2,4(r7)
    64a4:	28c00217 	ldw	r3,8(r5)
    64a8:	38c00215 	stw	r3,8(r7)
    64ac:	28800317 	ldw	r2,12(r5)
    64b0:	29400404 	addi	r5,r5,16
    64b4:	38800315 	stw	r2,12(r7)
    64b8:	39c00404 	addi	r7,r7,16
    64bc:	41bff436 	bltu	r8,r6,6490 <memcpy+0x44>
    64c0:	008000c4 	movi	r2,3
    64c4:	1180072e 	bgeu	r2,r6,64e4 <memcpy+0x98>
    64c8:	1007883a 	mov	r3,r2
    64cc:	28800017 	ldw	r2,0(r5)
    64d0:	31bfff04 	addi	r6,r6,-4
    64d4:	29400104 	addi	r5,r5,4
    64d8:	38800015 	stw	r2,0(r7)
    64dc:	39c00104 	addi	r7,r7,4
    64e0:	19bffa36 	bltu	r3,r6,64cc <memcpy+0x80>
    64e4:	3807883a 	mov	r3,r7
    64e8:	003fde06 	br	6464 <memcpy+0x18>

000064ec <memmove>:
    64ec:	2807883a 	mov	r3,r5
    64f0:	2011883a 	mov	r8,r4
    64f4:	29000c2e 	bgeu	r5,r4,6528 <memmove+0x3c>
    64f8:	298f883a 	add	r7,r5,r6
    64fc:	21c00a2e 	bgeu	r4,r7,6528 <memmove+0x3c>
    6500:	30000726 	beq	r6,zero,6520 <memmove+0x34>
    6504:	2187883a 	add	r3,r4,r6
    6508:	198dc83a 	sub	r6,r3,r6
    650c:	39ffffc4 	addi	r7,r7,-1
    6510:	38800003 	ldbu	r2,0(r7)
    6514:	18ffffc4 	addi	r3,r3,-1
    6518:	18800005 	stb	r2,0(r3)
    651c:	19bffb1e 	bne	r3,r6,650c <memmove+0x20>
    6520:	2005883a 	mov	r2,r4
    6524:	f800283a 	ret
    6528:	01c003c4 	movi	r7,15
    652c:	39800a36 	bltu	r7,r6,6558 <memmove+0x6c>
    6530:	303ffb26 	beq	r6,zero,6520 <memmove+0x34>
    6534:	400f883a 	mov	r7,r8
    6538:	320d883a 	add	r6,r6,r8
    653c:	28800003 	ldbu	r2,0(r5)
    6540:	29400044 	addi	r5,r5,1
    6544:	38800005 	stb	r2,0(r7)
    6548:	39c00044 	addi	r7,r7,1
    654c:	39bffb1e 	bne	r7,r6,653c <memmove+0x50>
    6550:	2005883a 	mov	r2,r4
    6554:	f800283a 	ret
    6558:	1904b03a 	or	r2,r3,r4
    655c:	108000cc 	andi	r2,r2,3
    6560:	103ff31e 	bne	r2,zero,6530 <memmove+0x44>
    6564:	3811883a 	mov	r8,r7
    6568:	180b883a 	mov	r5,r3
    656c:	200f883a 	mov	r7,r4
    6570:	28c00017 	ldw	r3,0(r5)
    6574:	31bffc04 	addi	r6,r6,-16
    6578:	38c00015 	stw	r3,0(r7)
    657c:	28800117 	ldw	r2,4(r5)
    6580:	38800115 	stw	r2,4(r7)
    6584:	28c00217 	ldw	r3,8(r5)
    6588:	38c00215 	stw	r3,8(r7)
    658c:	28800317 	ldw	r2,12(r5)
    6590:	29400404 	addi	r5,r5,16
    6594:	38800315 	stw	r2,12(r7)
    6598:	39c00404 	addi	r7,r7,16
    659c:	41bff436 	bltu	r8,r6,6570 <memmove+0x84>
    65a0:	008000c4 	movi	r2,3
    65a4:	1180072e 	bgeu	r2,r6,65c4 <memmove+0xd8>
    65a8:	1007883a 	mov	r3,r2
    65ac:	28800017 	ldw	r2,0(r5)
    65b0:	31bfff04 	addi	r6,r6,-4
    65b4:	29400104 	addi	r5,r5,4
    65b8:	38800015 	stw	r2,0(r7)
    65bc:	39c00104 	addi	r7,r7,4
    65c0:	19bffa36 	bltu	r3,r6,65ac <memmove+0xc0>
    65c4:	3811883a 	mov	r8,r7
    65c8:	003fd906 	br	6530 <memmove+0x44>

000065cc <memset>:
    65cc:	008000c4 	movi	r2,3
    65d0:	29403fcc 	andi	r5,r5,255
    65d4:	2007883a 	mov	r3,r4
    65d8:	1180022e 	bgeu	r2,r6,65e4 <memset+0x18>
    65dc:	2084703a 	and	r2,r4,r2
    65e0:	10000826 	beq	r2,zero,6604 <memset+0x38>
    65e4:	30000526 	beq	r6,zero,65fc <memset+0x30>
    65e8:	2805883a 	mov	r2,r5
    65ec:	30cd883a 	add	r6,r6,r3
    65f0:	18800005 	stb	r2,0(r3)
    65f4:	18c00044 	addi	r3,r3,1
    65f8:	19bffd1e 	bne	r3,r6,65f0 <memset+0x24>
    65fc:	2005883a 	mov	r2,r4
    6600:	f800283a 	ret
    6604:	2804923a 	slli	r2,r5,8
    6608:	020003c4 	movi	r8,15
    660c:	200f883a 	mov	r7,r4
    6610:	2884b03a 	or	r2,r5,r2
    6614:	1006943a 	slli	r3,r2,16
    6618:	10c6b03a 	or	r3,r2,r3
    661c:	41800a2e 	bgeu	r8,r6,6648 <memset+0x7c>
    6620:	4005883a 	mov	r2,r8
    6624:	31bffc04 	addi	r6,r6,-16
    6628:	38c00015 	stw	r3,0(r7)
    662c:	38c00115 	stw	r3,4(r7)
    6630:	38c00215 	stw	r3,8(r7)
    6634:	38c00315 	stw	r3,12(r7)
    6638:	39c00404 	addi	r7,r7,16
    663c:	11bff936 	bltu	r2,r6,6624 <memset+0x58>
    6640:	008000c4 	movi	r2,3
    6644:	1180052e 	bgeu	r2,r6,665c <memset+0x90>
    6648:	31bfff04 	addi	r6,r6,-4
    664c:	008000c4 	movi	r2,3
    6650:	38c00015 	stw	r3,0(r7)
    6654:	39c00104 	addi	r7,r7,4
    6658:	11bffb36 	bltu	r2,r6,6648 <memset+0x7c>
    665c:	3807883a 	mov	r3,r7
    6660:	003fe006 	br	65e4 <memset+0x18>

00006664 <_Bfree>:
    6664:	28000826 	beq	r5,zero,6688 <_Bfree+0x24>
    6668:	28800117 	ldw	r2,4(r5)
    666c:	21001317 	ldw	r4,76(r4)
    6670:	1085883a 	add	r2,r2,r2
    6674:	1085883a 	add	r2,r2,r2
    6678:	1105883a 	add	r2,r2,r4
    667c:	10c00017 	ldw	r3,0(r2)
    6680:	28c00015 	stw	r3,0(r5)
    6684:	11400015 	stw	r5,0(r2)
    6688:	f800283a 	ret

0000668c <__hi0bits>:
    668c:	20bfffec 	andhi	r2,r4,65535
    6690:	10001426 	beq	r2,zero,66e4 <__hi0bits+0x58>
    6694:	0007883a 	mov	r3,zero
    6698:	20bfc02c 	andhi	r2,r4,65280
    669c:	1000021e 	bne	r2,zero,66a8 <__hi0bits+0x1c>
    66a0:	2008923a 	slli	r4,r4,8
    66a4:	18c00204 	addi	r3,r3,8
    66a8:	20bc002c 	andhi	r2,r4,61440
    66ac:	1000021e 	bne	r2,zero,66b8 <__hi0bits+0x2c>
    66b0:	2008913a 	slli	r4,r4,4
    66b4:	18c00104 	addi	r3,r3,4
    66b8:	20b0002c 	andhi	r2,r4,49152
    66bc:	1000031e 	bne	r2,zero,66cc <__hi0bits+0x40>
    66c0:	2105883a 	add	r2,r4,r4
    66c4:	18c00084 	addi	r3,r3,2
    66c8:	1089883a 	add	r4,r2,r2
    66cc:	20000316 	blt	r4,zero,66dc <__hi0bits+0x50>
    66d0:	2090002c 	andhi	r2,r4,16384
    66d4:	10000626 	beq	r2,zero,66f0 <__hi0bits+0x64>
    66d8:	18c00044 	addi	r3,r3,1
    66dc:	1805883a 	mov	r2,r3
    66e0:	f800283a 	ret
    66e4:	2008943a 	slli	r4,r4,16
    66e8:	00c00404 	movi	r3,16
    66ec:	003fea06 	br	6698 <__hi0bits+0xc>
    66f0:	00c00804 	movi	r3,32
    66f4:	1805883a 	mov	r2,r3
    66f8:	f800283a 	ret

000066fc <__lo0bits>:
    66fc:	20c00017 	ldw	r3,0(r4)
    6700:	188001cc 	andi	r2,r3,7
    6704:	10000a26 	beq	r2,zero,6730 <__lo0bits+0x34>
    6708:	1880004c 	andi	r2,r3,1
    670c:	1005003a 	cmpeq	r2,r2,zero
    6710:	10002126 	beq	r2,zero,6798 <__lo0bits+0x9c>
    6714:	1880008c 	andi	r2,r3,2
    6718:	1000251e 	bne	r2,zero,67b0 <__lo0bits+0xb4>
    671c:	1804d0ba 	srli	r2,r3,2
    6720:	01400084 	movi	r5,2
    6724:	20800015 	stw	r2,0(r4)
    6728:	2805883a 	mov	r2,r5
    672c:	f800283a 	ret
    6730:	18bfffcc 	andi	r2,r3,65535
    6734:	10001526 	beq	r2,zero,678c <__lo0bits+0x90>
    6738:	000b883a 	mov	r5,zero
    673c:	18803fcc 	andi	r2,r3,255
    6740:	1000021e 	bne	r2,zero,674c <__lo0bits+0x50>
    6744:	1806d23a 	srli	r3,r3,8
    6748:	29400204 	addi	r5,r5,8
    674c:	188003cc 	andi	r2,r3,15
    6750:	1000021e 	bne	r2,zero,675c <__lo0bits+0x60>
    6754:	1806d13a 	srli	r3,r3,4
    6758:	29400104 	addi	r5,r5,4
    675c:	188000cc 	andi	r2,r3,3
    6760:	1000021e 	bne	r2,zero,676c <__lo0bits+0x70>
    6764:	1806d0ba 	srli	r3,r3,2
    6768:	29400084 	addi	r5,r5,2
    676c:	1880004c 	andi	r2,r3,1
    6770:	1000031e 	bne	r2,zero,6780 <__lo0bits+0x84>
    6774:	1806d07a 	srli	r3,r3,1
    6778:	18000a26 	beq	r3,zero,67a4 <__lo0bits+0xa8>
    677c:	29400044 	addi	r5,r5,1
    6780:	2805883a 	mov	r2,r5
    6784:	20c00015 	stw	r3,0(r4)
    6788:	f800283a 	ret
    678c:	1806d43a 	srli	r3,r3,16
    6790:	01400404 	movi	r5,16
    6794:	003fe906 	br	673c <__lo0bits+0x40>
    6798:	000b883a 	mov	r5,zero
    679c:	2805883a 	mov	r2,r5
    67a0:	f800283a 	ret
    67a4:	01400804 	movi	r5,32
    67a8:	2805883a 	mov	r2,r5
    67ac:	f800283a 	ret
    67b0:	1804d07a 	srli	r2,r3,1
    67b4:	01400044 	movi	r5,1
    67b8:	20800015 	stw	r2,0(r4)
    67bc:	003fda06 	br	6728 <__lo0bits+0x2c>

000067c0 <__mcmp>:
    67c0:	20800417 	ldw	r2,16(r4)
    67c4:	28c00417 	ldw	r3,16(r5)
    67c8:	10cfc83a 	sub	r7,r2,r3
    67cc:	38000c1e 	bne	r7,zero,6800 <__mcmp+0x40>
    67d0:	18c5883a 	add	r2,r3,r3
    67d4:	1085883a 	add	r2,r2,r2
    67d8:	10c00504 	addi	r3,r2,20
    67dc:	21000504 	addi	r4,r4,20
    67e0:	28cb883a 	add	r5,r5,r3
    67e4:	2085883a 	add	r2,r4,r2
    67e8:	10bfff04 	addi	r2,r2,-4
    67ec:	297fff04 	addi	r5,r5,-4
    67f0:	11800017 	ldw	r6,0(r2)
    67f4:	28c00017 	ldw	r3,0(r5)
    67f8:	30c0031e 	bne	r6,r3,6808 <__mcmp+0x48>
    67fc:	20bffa36 	bltu	r4,r2,67e8 <__mcmp+0x28>
    6800:	3805883a 	mov	r2,r7
    6804:	f800283a 	ret
    6808:	30c00336 	bltu	r6,r3,6818 <__mcmp+0x58>
    680c:	01c00044 	movi	r7,1
    6810:	3805883a 	mov	r2,r7
    6814:	f800283a 	ret
    6818:	01ffffc4 	movi	r7,-1
    681c:	003ff806 	br	6800 <__mcmp+0x40>

00006820 <__ulp>:
    6820:	295ffc2c 	andhi	r5,r5,32752
    6824:	013f3034 	movhi	r4,64704
    6828:	290b883a 	add	r5,r5,r4
    682c:	0145c83a 	sub	r2,zero,r5
    6830:	1007d53a 	srai	r3,r2,20
    6834:	000d883a 	mov	r6,zero
    6838:	0140040e 	bge	zero,r5,684c <__ulp+0x2c>
    683c:	280f883a 	mov	r7,r5
    6840:	3807883a 	mov	r3,r7
    6844:	3005883a 	mov	r2,r6
    6848:	f800283a 	ret
    684c:	008004c4 	movi	r2,19
    6850:	193ffb04 	addi	r4,r3,-20
    6854:	10c00c0e 	bge	r2,r3,6888 <__ulp+0x68>
    6858:	008007c4 	movi	r2,31
    685c:	1107c83a 	sub	r3,r2,r4
    6860:	00800784 	movi	r2,30
    6864:	01400044 	movi	r5,1
    6868:	11000216 	blt	r2,r4,6874 <__ulp+0x54>
    686c:	00800044 	movi	r2,1
    6870:	10ca983a 	sll	r5,r2,r3
    6874:	000f883a 	mov	r7,zero
    6878:	280d883a 	mov	r6,r5
    687c:	3807883a 	mov	r3,r7
    6880:	3005883a 	mov	r2,r6
    6884:	f800283a 	ret
    6888:	00800234 	movhi	r2,8
    688c:	10cfd83a 	sra	r7,r2,r3
    6890:	000d883a 	mov	r6,zero
    6894:	3005883a 	mov	r2,r6
    6898:	3807883a 	mov	r3,r7
    689c:	f800283a 	ret

000068a0 <__b2d>:
    68a0:	20800417 	ldw	r2,16(r4)
    68a4:	defff904 	addi	sp,sp,-28
    68a8:	dd000415 	stw	r20,16(sp)
    68ac:	1085883a 	add	r2,r2,r2
    68b0:	25000504 	addi	r20,r4,20
    68b4:	1085883a 	add	r2,r2,r2
    68b8:	dc000015 	stw	r16,0(sp)
    68bc:	a0a1883a 	add	r16,r20,r2
    68c0:	dd400515 	stw	r21,20(sp)
    68c4:	857fff17 	ldw	r21,-4(r16)
    68c8:	dc400115 	stw	r17,4(sp)
    68cc:	dfc00615 	stw	ra,24(sp)
    68d0:	a809883a 	mov	r4,r21
    68d4:	2823883a 	mov	r17,r5
    68d8:	dcc00315 	stw	r19,12(sp)
    68dc:	dc800215 	stw	r18,8(sp)
    68e0:	000668c0 	call	668c <__hi0bits>
    68e4:	100b883a 	mov	r5,r2
    68e8:	00800804 	movi	r2,32
    68ec:	1145c83a 	sub	r2,r2,r5
    68f0:	88800015 	stw	r2,0(r17)
    68f4:	00800284 	movi	r2,10
    68f8:	80ffff04 	addi	r3,r16,-4
    68fc:	11401416 	blt	r2,r5,6950 <__b2d+0xb0>
    6900:	008002c4 	movi	r2,11
    6904:	1149c83a 	sub	r4,r2,r5
    6908:	a0c02736 	bltu	r20,r3,69a8 <__b2d+0x108>
    690c:	000d883a 	mov	r6,zero
    6910:	28800544 	addi	r2,r5,21
    6914:	a906d83a 	srl	r3,r21,r4
    6918:	a884983a 	sll	r2,r21,r2
    691c:	1ccffc34 	orhi	r19,r3,16368
    6920:	11a4b03a 	or	r18,r2,r6
    6924:	9005883a 	mov	r2,r18
    6928:	9807883a 	mov	r3,r19
    692c:	dfc00617 	ldw	ra,24(sp)
    6930:	dd400517 	ldw	r21,20(sp)
    6934:	dd000417 	ldw	r20,16(sp)
    6938:	dcc00317 	ldw	r19,12(sp)
    693c:	dc800217 	ldw	r18,8(sp)
    6940:	dc400117 	ldw	r17,4(sp)
    6944:	dc000017 	ldw	r16,0(sp)
    6948:	dec00704 	addi	sp,sp,28
    694c:	f800283a 	ret
    6950:	a0c00e36 	bltu	r20,r3,698c <__b2d+0xec>
    6954:	293ffd44 	addi	r4,r5,-11
    6958:	000d883a 	mov	r6,zero
    695c:	20000f26 	beq	r4,zero,699c <__b2d+0xfc>
    6960:	00800804 	movi	r2,32
    6964:	110bc83a 	sub	r5,r2,r4
    6968:	a0c01236 	bltu	r20,r3,69b4 <__b2d+0x114>
    696c:	000f883a 	mov	r7,zero
    6970:	a904983a 	sll	r2,r21,r4
    6974:	3146d83a 	srl	r3,r6,r5
    6978:	3108983a 	sll	r4,r6,r4
    697c:	108ffc34 	orhi	r2,r2,16368
    6980:	18a6b03a 	or	r19,r3,r2
    6984:	3924b03a 	or	r18,r7,r4
    6988:	003fe606 	br	6924 <__b2d+0x84>
    698c:	293ffd44 	addi	r4,r5,-11
    6990:	81bffe17 	ldw	r6,-8(r16)
    6994:	80fffe04 	addi	r3,r16,-8
    6998:	203ff11e 	bne	r4,zero,6960 <__b2d+0xc0>
    699c:	accffc34 	orhi	r19,r21,16368
    69a0:	3025883a 	mov	r18,r6
    69a4:	003fdf06 	br	6924 <__b2d+0x84>
    69a8:	18bfff17 	ldw	r2,-4(r3)
    69ac:	110cd83a 	srl	r6,r2,r4
    69b0:	003fd706 	br	6910 <__b2d+0x70>
    69b4:	18bfff17 	ldw	r2,-4(r3)
    69b8:	114ed83a 	srl	r7,r2,r5
    69bc:	003fec06 	br	6970 <__b2d+0xd0>

000069c0 <__ratio>:
    69c0:	defff904 	addi	sp,sp,-28
    69c4:	dc400215 	stw	r17,8(sp)
    69c8:	2823883a 	mov	r17,r5
    69cc:	d80b883a 	mov	r5,sp
    69d0:	dfc00615 	stw	ra,24(sp)
    69d4:	dd000515 	stw	r20,20(sp)
    69d8:	dcc00415 	stw	r19,16(sp)
    69dc:	dc800315 	stw	r18,12(sp)
    69e0:	2025883a 	mov	r18,r4
    69e4:	00068a00 	call	68a0 <__b2d>
    69e8:	8809883a 	mov	r4,r17
    69ec:	d9400104 	addi	r5,sp,4
    69f0:	1027883a 	mov	r19,r2
    69f4:	1829883a 	mov	r20,r3
    69f8:	00068a00 	call	68a0 <__b2d>
    69fc:	89000417 	ldw	r4,16(r17)
    6a00:	91c00417 	ldw	r7,16(r18)
    6a04:	d9800117 	ldw	r6,4(sp)
    6a08:	180b883a 	mov	r5,r3
    6a0c:	390fc83a 	sub	r7,r7,r4
    6a10:	1009883a 	mov	r4,r2
    6a14:	d8800017 	ldw	r2,0(sp)
    6a18:	380e917a 	slli	r7,r7,5
    6a1c:	2011883a 	mov	r8,r4
    6a20:	1185c83a 	sub	r2,r2,r6
    6a24:	11c5883a 	add	r2,r2,r7
    6a28:	1006953a 	slli	r3,r2,20
    6a2c:	2813883a 	mov	r9,r5
    6a30:	00800d0e 	bge	zero,r2,6a68 <__ratio+0xa8>
    6a34:	1d29883a 	add	r20,r3,r20
    6a38:	a00b883a 	mov	r5,r20
    6a3c:	480f883a 	mov	r7,r9
    6a40:	9809883a 	mov	r4,r19
    6a44:	400d883a 	mov	r6,r8
    6a48:	0009a080 	call	9a08 <__divdf3>
    6a4c:	dfc00617 	ldw	ra,24(sp)
    6a50:	dd000517 	ldw	r20,20(sp)
    6a54:	dcc00417 	ldw	r19,16(sp)
    6a58:	dc800317 	ldw	r18,12(sp)
    6a5c:	dc400217 	ldw	r17,8(sp)
    6a60:	dec00704 	addi	sp,sp,28
    6a64:	f800283a 	ret
    6a68:	28d3c83a 	sub	r9,r5,r3
    6a6c:	003ff206 	br	6a38 <__ratio+0x78>

00006a70 <_mprec_log10>:
    6a70:	defffe04 	addi	sp,sp,-8
    6a74:	008005c4 	movi	r2,23
    6a78:	dc000015 	stw	r16,0(sp)
    6a7c:	dfc00115 	stw	ra,4(sp)
    6a80:	2021883a 	mov	r16,r4
    6a84:	11000c16 	blt	r2,r4,6ab8 <_mprec_log10+0x48>
    6a88:	200490fa 	slli	r2,r4,3
    6a8c:	00c00074 	movhi	r3,1
    6a90:	18f6ae04 	addi	r3,r3,-9544
    6a94:	10c5883a 	add	r2,r2,r3
    6a98:	12400117 	ldw	r9,4(r2)
    6a9c:	12000017 	ldw	r8,0(r2)
    6aa0:	4807883a 	mov	r3,r9
    6aa4:	4005883a 	mov	r2,r8
    6aa8:	dfc00117 	ldw	ra,4(sp)
    6aac:	dc000017 	ldw	r16,0(sp)
    6ab0:	dec00204 	addi	sp,sp,8
    6ab4:	f800283a 	ret
    6ab8:	0011883a 	mov	r8,zero
    6abc:	024ffc34 	movhi	r9,16368
    6ac0:	0005883a 	mov	r2,zero
    6ac4:	00d00934 	movhi	r3,16420
    6ac8:	480b883a 	mov	r5,r9
    6acc:	4009883a 	mov	r4,r8
    6ad0:	180f883a 	mov	r7,r3
    6ad4:	100d883a 	mov	r6,r2
    6ad8:	00096440 	call	9644 <__muldf3>
    6adc:	843fffc4 	addi	r16,r16,-1
    6ae0:	1011883a 	mov	r8,r2
    6ae4:	1813883a 	mov	r9,r3
    6ae8:	803ff51e 	bne	r16,zero,6ac0 <_mprec_log10+0x50>
    6aec:	4005883a 	mov	r2,r8
    6af0:	4807883a 	mov	r3,r9
    6af4:	dfc00117 	ldw	ra,4(sp)
    6af8:	dc000017 	ldw	r16,0(sp)
    6afc:	dec00204 	addi	sp,sp,8
    6b00:	f800283a 	ret

00006b04 <__copybits>:
    6b04:	297fffc4 	addi	r5,r5,-1
    6b08:	30800417 	ldw	r2,16(r6)
    6b0c:	280bd17a 	srai	r5,r5,5
    6b10:	31800504 	addi	r6,r6,20
    6b14:	1085883a 	add	r2,r2,r2
    6b18:	294b883a 	add	r5,r5,r5
    6b1c:	294b883a 	add	r5,r5,r5
    6b20:	1085883a 	add	r2,r2,r2
    6b24:	290b883a 	add	r5,r5,r4
    6b28:	3087883a 	add	r3,r6,r2
    6b2c:	29400104 	addi	r5,r5,4
    6b30:	30c0052e 	bgeu	r6,r3,6b48 <__copybits+0x44>
    6b34:	30800017 	ldw	r2,0(r6)
    6b38:	31800104 	addi	r6,r6,4
    6b3c:	20800015 	stw	r2,0(r4)
    6b40:	21000104 	addi	r4,r4,4
    6b44:	30fffb36 	bltu	r6,r3,6b34 <__copybits+0x30>
    6b48:	2140032e 	bgeu	r4,r5,6b58 <__copybits+0x54>
    6b4c:	20000015 	stw	zero,0(r4)
    6b50:	21000104 	addi	r4,r4,4
    6b54:	217ffd36 	bltu	r4,r5,6b4c <__copybits+0x48>
    6b58:	f800283a 	ret

00006b5c <__any_on>:
    6b5c:	20800417 	ldw	r2,16(r4)
    6b60:	2807d17a 	srai	r3,r5,5
    6b64:	21000504 	addi	r4,r4,20
    6b68:	10c00d0e 	bge	r2,r3,6ba0 <__any_on+0x44>
    6b6c:	1085883a 	add	r2,r2,r2
    6b70:	1085883a 	add	r2,r2,r2
    6b74:	208d883a 	add	r6,r4,r2
    6b78:	2180182e 	bgeu	r4,r6,6bdc <__any_on+0x80>
    6b7c:	30bfff17 	ldw	r2,-4(r6)
    6b80:	30ffff04 	addi	r3,r6,-4
    6b84:	1000041e 	bne	r2,zero,6b98 <__any_on+0x3c>
    6b88:	20c0142e 	bgeu	r4,r3,6bdc <__any_on+0x80>
    6b8c:	18ffff04 	addi	r3,r3,-4
    6b90:	18800017 	ldw	r2,0(r3)
    6b94:	103ffc26 	beq	r2,zero,6b88 <__any_on+0x2c>
    6b98:	00800044 	movi	r2,1
    6b9c:	f800283a 	ret
    6ba0:	18800a0e 	bge	r3,r2,6bcc <__any_on+0x70>
    6ba4:	294007cc 	andi	r5,r5,31
    6ba8:	28000826 	beq	r5,zero,6bcc <__any_on+0x70>
    6bac:	18c5883a 	add	r2,r3,r3
    6bb0:	1085883a 	add	r2,r2,r2
    6bb4:	208d883a 	add	r6,r4,r2
    6bb8:	30c00017 	ldw	r3,0(r6)
    6bbc:	1944d83a 	srl	r2,r3,r5
    6bc0:	1144983a 	sll	r2,r2,r5
    6bc4:	18bff41e 	bne	r3,r2,6b98 <__any_on+0x3c>
    6bc8:	003feb06 	br	6b78 <__any_on+0x1c>
    6bcc:	18c5883a 	add	r2,r3,r3
    6bd0:	1085883a 	add	r2,r2,r2
    6bd4:	208d883a 	add	r6,r4,r2
    6bd8:	003fe706 	br	6b78 <__any_on+0x1c>
    6bdc:	0005883a 	mov	r2,zero
    6be0:	f800283a 	ret

00006be4 <_Balloc>:
    6be4:	20c01317 	ldw	r3,76(r4)
    6be8:	defffb04 	addi	sp,sp,-20
    6bec:	dcc00315 	stw	r19,12(sp)
    6bf0:	dc800215 	stw	r18,8(sp)
    6bf4:	dfc00415 	stw	ra,16(sp)
    6bf8:	2825883a 	mov	r18,r5
    6bfc:	dc400115 	stw	r17,4(sp)
    6c00:	dc000015 	stw	r16,0(sp)
    6c04:	2027883a 	mov	r19,r4
    6c08:	01800404 	movi	r6,16
    6c0c:	01400104 	movi	r5,4
    6c10:	18001726 	beq	r3,zero,6c70 <_Balloc+0x8c>
    6c14:	01400044 	movi	r5,1
    6c18:	9485883a 	add	r2,r18,r18
    6c1c:	2ca2983a 	sll	r17,r5,r18
    6c20:	1085883a 	add	r2,r2,r2
    6c24:	10c7883a 	add	r3,r2,r3
    6c28:	1c000017 	ldw	r16,0(r3)
    6c2c:	8c4d883a 	add	r6,r17,r17
    6c30:	318d883a 	add	r6,r6,r6
    6c34:	9809883a 	mov	r4,r19
    6c38:	31800504 	addi	r6,r6,20
    6c3c:	80001226 	beq	r16,zero,6c88 <_Balloc+0xa4>
    6c40:	80800017 	ldw	r2,0(r16)
    6c44:	18800015 	stw	r2,0(r3)
    6c48:	80000415 	stw	zero,16(r16)
    6c4c:	80000315 	stw	zero,12(r16)
    6c50:	8005883a 	mov	r2,r16
    6c54:	dfc00417 	ldw	ra,16(sp)
    6c58:	dcc00317 	ldw	r19,12(sp)
    6c5c:	dc800217 	ldw	r18,8(sp)
    6c60:	dc400117 	ldw	r17,4(sp)
    6c64:	dc000017 	ldw	r16,0(sp)
    6c68:	dec00504 	addi	sp,sp,20
    6c6c:	f800283a 	ret
    6c70:	00080440 	call	8044 <_calloc_r>
    6c74:	1007883a 	mov	r3,r2
    6c78:	0021883a 	mov	r16,zero
    6c7c:	98801315 	stw	r2,76(r19)
    6c80:	103fe41e 	bne	r2,zero,6c14 <_Balloc+0x30>
    6c84:	003ff206 	br	6c50 <_Balloc+0x6c>
    6c88:	00080440 	call	8044 <_calloc_r>
    6c8c:	103ff026 	beq	r2,zero,6c50 <_Balloc+0x6c>
    6c90:	1021883a 	mov	r16,r2
    6c94:	14800115 	stw	r18,4(r2)
    6c98:	14400215 	stw	r17,8(r2)
    6c9c:	003fea06 	br	6c48 <_Balloc+0x64>

00006ca0 <__d2b>:
    6ca0:	defff504 	addi	sp,sp,-44
    6ca4:	dcc00515 	stw	r19,20(sp)
    6ca8:	04c00044 	movi	r19,1
    6cac:	dc000215 	stw	r16,8(sp)
    6cb0:	2821883a 	mov	r16,r5
    6cb4:	980b883a 	mov	r5,r19
    6cb8:	ddc00915 	stw	r23,36(sp)
    6cbc:	dd800815 	stw	r22,32(sp)
    6cc0:	dd400715 	stw	r21,28(sp)
    6cc4:	dd000615 	stw	r20,24(sp)
    6cc8:	dc800415 	stw	r18,16(sp)
    6ccc:	dc400315 	stw	r17,12(sp)
    6cd0:	dfc00a15 	stw	ra,40(sp)
    6cd4:	3023883a 	mov	r17,r6
    6cd8:	382d883a 	mov	r22,r7
    6cdc:	ddc00b17 	ldw	r23,44(sp)
    6ce0:	0006be40 	call	6be4 <_Balloc>
    6ce4:	1025883a 	mov	r18,r2
    6ce8:	00a00034 	movhi	r2,32768
    6cec:	10bfffc4 	addi	r2,r2,-1
    6cf0:	8888703a 	and	r4,r17,r2
    6cf4:	202ad53a 	srli	r21,r4,20
    6cf8:	00800434 	movhi	r2,16
    6cfc:	10bfffc4 	addi	r2,r2,-1
    6d00:	8886703a 	and	r3,r17,r2
    6d04:	a829003a 	cmpeq	r20,r21,zero
    6d08:	800b883a 	mov	r5,r16
    6d0c:	d8c00115 	stw	r3,4(sp)
    6d10:	94000504 	addi	r16,r18,20
    6d14:	a000021e 	bne	r20,zero,6d20 <__d2b+0x80>
    6d18:	18c00434 	orhi	r3,r3,16
    6d1c:	d8c00115 	stw	r3,4(sp)
    6d20:	28002726 	beq	r5,zero,6dc0 <__d2b+0x120>
    6d24:	d809883a 	mov	r4,sp
    6d28:	d9400015 	stw	r5,0(sp)
    6d2c:	00066fc0 	call	66fc <__lo0bits>
    6d30:	100d883a 	mov	r6,r2
    6d34:	10003526 	beq	r2,zero,6e0c <__d2b+0x16c>
    6d38:	d8c00117 	ldw	r3,4(sp)
    6d3c:	00800804 	movi	r2,32
    6d40:	1185c83a 	sub	r2,r2,r6
    6d44:	d9000017 	ldw	r4,0(sp)
    6d48:	1886983a 	sll	r3,r3,r2
    6d4c:	1906b03a 	or	r3,r3,r4
    6d50:	90c00515 	stw	r3,20(r18)
    6d54:	d8c00117 	ldw	r3,4(sp)
    6d58:	1986d83a 	srl	r3,r3,r6
    6d5c:	d8c00115 	stw	r3,4(sp)
    6d60:	180b003a 	cmpeq	r5,r3,zero
    6d64:	00800084 	movi	r2,2
    6d68:	114bc83a 	sub	r5,r2,r5
    6d6c:	80c00115 	stw	r3,4(r16)
    6d70:	91400415 	stw	r5,16(r18)
    6d74:	a0001a1e 	bne	r20,zero,6de0 <__d2b+0x140>
    6d78:	3545883a 	add	r2,r6,r21
    6d7c:	10bef344 	addi	r2,r2,-1075
    6d80:	00c00d44 	movi	r3,53
    6d84:	b0800015 	stw	r2,0(r22)
    6d88:	1987c83a 	sub	r3,r3,r6
    6d8c:	b8c00015 	stw	r3,0(r23)
    6d90:	9005883a 	mov	r2,r18
    6d94:	dfc00a17 	ldw	ra,40(sp)
    6d98:	ddc00917 	ldw	r23,36(sp)
    6d9c:	dd800817 	ldw	r22,32(sp)
    6da0:	dd400717 	ldw	r21,28(sp)
    6da4:	dd000617 	ldw	r20,24(sp)
    6da8:	dcc00517 	ldw	r19,20(sp)
    6dac:	dc800417 	ldw	r18,16(sp)
    6db0:	dc400317 	ldw	r17,12(sp)
    6db4:	dc000217 	ldw	r16,8(sp)
    6db8:	dec00b04 	addi	sp,sp,44
    6dbc:	f800283a 	ret
    6dc0:	d9000104 	addi	r4,sp,4
    6dc4:	00066fc0 	call	66fc <__lo0bits>
    6dc8:	11800804 	addi	r6,r2,32
    6dcc:	d8800117 	ldw	r2,4(sp)
    6dd0:	94c00415 	stw	r19,16(r18)
    6dd4:	980b883a 	mov	r5,r19
    6dd8:	90800515 	stw	r2,20(r18)
    6ddc:	a03fe626 	beq	r20,zero,6d78 <__d2b+0xd8>
    6de0:	2945883a 	add	r2,r5,r5
    6de4:	1085883a 	add	r2,r2,r2
    6de8:	1405883a 	add	r2,r2,r16
    6dec:	113fff17 	ldw	r4,-4(r2)
    6df0:	30fef384 	addi	r3,r6,-1074
    6df4:	2820917a 	slli	r16,r5,5
    6df8:	b0c00015 	stw	r3,0(r22)
    6dfc:	000668c0 	call	668c <__hi0bits>
    6e00:	80a1c83a 	sub	r16,r16,r2
    6e04:	bc000015 	stw	r16,0(r23)
    6e08:	003fe106 	br	6d90 <__d2b+0xf0>
    6e0c:	d8800017 	ldw	r2,0(sp)
    6e10:	90800515 	stw	r2,20(r18)
    6e14:	d8c00117 	ldw	r3,4(sp)
    6e18:	003fd106 	br	6d60 <__d2b+0xc0>

00006e1c <__mdiff>:
    6e1c:	defffb04 	addi	sp,sp,-20
    6e20:	dc000015 	stw	r16,0(sp)
    6e24:	2821883a 	mov	r16,r5
    6e28:	dc800215 	stw	r18,8(sp)
    6e2c:	300b883a 	mov	r5,r6
    6e30:	2025883a 	mov	r18,r4
    6e34:	8009883a 	mov	r4,r16
    6e38:	dc400115 	stw	r17,4(sp)
    6e3c:	dfc00415 	stw	ra,16(sp)
    6e40:	dcc00315 	stw	r19,12(sp)
    6e44:	3023883a 	mov	r17,r6
    6e48:	00067c00 	call	67c0 <__mcmp>
    6e4c:	10004226 	beq	r2,zero,6f58 <__mdiff+0x13c>
    6e50:	10005016 	blt	r2,zero,6f94 <__mdiff+0x178>
    6e54:	0027883a 	mov	r19,zero
    6e58:	81400117 	ldw	r5,4(r16)
    6e5c:	9009883a 	mov	r4,r18
    6e60:	0006be40 	call	6be4 <_Balloc>
    6e64:	1019883a 	mov	r12,r2
    6e68:	82800417 	ldw	r10,16(r16)
    6e6c:	88800417 	ldw	r2,16(r17)
    6e70:	81800504 	addi	r6,r16,20
    6e74:	5287883a 	add	r3,r10,r10
    6e78:	1085883a 	add	r2,r2,r2
    6e7c:	18c7883a 	add	r3,r3,r3
    6e80:	1085883a 	add	r2,r2,r2
    6e84:	8a000504 	addi	r8,r17,20
    6e88:	64c00315 	stw	r19,12(r12)
    6e8c:	30db883a 	add	r13,r6,r3
    6e90:	4097883a 	add	r11,r8,r2
    6e94:	61c00504 	addi	r7,r12,20
    6e98:	0013883a 	mov	r9,zero
    6e9c:	31000017 	ldw	r4,0(r6)
    6ea0:	41400017 	ldw	r5,0(r8)
    6ea4:	42000104 	addi	r8,r8,4
    6ea8:	20bfffcc 	andi	r2,r4,65535
    6eac:	28ffffcc 	andi	r3,r5,65535
    6eb0:	10c5c83a 	sub	r2,r2,r3
    6eb4:	1245883a 	add	r2,r2,r9
    6eb8:	2008d43a 	srli	r4,r4,16
    6ebc:	280ad43a 	srli	r5,r5,16
    6ec0:	1007d43a 	srai	r3,r2,16
    6ec4:	3880000d 	sth	r2,0(r7)
    6ec8:	2149c83a 	sub	r4,r4,r5
    6ecc:	20c9883a 	add	r4,r4,r3
    6ed0:	3900008d 	sth	r4,2(r7)
    6ed4:	31800104 	addi	r6,r6,4
    6ed8:	39c00104 	addi	r7,r7,4
    6edc:	2013d43a 	srai	r9,r4,16
    6ee0:	42ffee36 	bltu	r8,r11,6e9c <__mdiff+0x80>
    6ee4:	33400c2e 	bgeu	r6,r13,6f18 <__mdiff+0xfc>
    6ee8:	30800017 	ldw	r2,0(r6)
    6eec:	31800104 	addi	r6,r6,4
    6ef0:	10ffffcc 	andi	r3,r2,65535
    6ef4:	1a47883a 	add	r3,r3,r9
    6ef8:	1004d43a 	srli	r2,r2,16
    6efc:	1809d43a 	srai	r4,r3,16
    6f00:	38c0000d 	sth	r3,0(r7)
    6f04:	1105883a 	add	r2,r2,r4
    6f08:	3880008d 	sth	r2,2(r7)
    6f0c:	1013d43a 	srai	r9,r2,16
    6f10:	39c00104 	addi	r7,r7,4
    6f14:	337ff436 	bltu	r6,r13,6ee8 <__mdiff+0xcc>
    6f18:	38bfff17 	ldw	r2,-4(r7)
    6f1c:	38ffff04 	addi	r3,r7,-4
    6f20:	1000041e 	bne	r2,zero,6f34 <__mdiff+0x118>
    6f24:	18ffff04 	addi	r3,r3,-4
    6f28:	18800017 	ldw	r2,0(r3)
    6f2c:	52bfffc4 	addi	r10,r10,-1
    6f30:	103ffc26 	beq	r2,zero,6f24 <__mdiff+0x108>
    6f34:	6005883a 	mov	r2,r12
    6f38:	62800415 	stw	r10,16(r12)
    6f3c:	dfc00417 	ldw	ra,16(sp)
    6f40:	dcc00317 	ldw	r19,12(sp)
    6f44:	dc800217 	ldw	r18,8(sp)
    6f48:	dc400117 	ldw	r17,4(sp)
    6f4c:	dc000017 	ldw	r16,0(sp)
    6f50:	dec00504 	addi	sp,sp,20
    6f54:	f800283a 	ret
    6f58:	9009883a 	mov	r4,r18
    6f5c:	000b883a 	mov	r5,zero
    6f60:	0006be40 	call	6be4 <_Balloc>
    6f64:	1019883a 	mov	r12,r2
    6f68:	00800044 	movi	r2,1
    6f6c:	60800415 	stw	r2,16(r12)
    6f70:	6005883a 	mov	r2,r12
    6f74:	60000515 	stw	zero,20(r12)
    6f78:	dfc00417 	ldw	ra,16(sp)
    6f7c:	dcc00317 	ldw	r19,12(sp)
    6f80:	dc800217 	ldw	r18,8(sp)
    6f84:	dc400117 	ldw	r17,4(sp)
    6f88:	dc000017 	ldw	r16,0(sp)
    6f8c:	dec00504 	addi	sp,sp,20
    6f90:	f800283a 	ret
    6f94:	880d883a 	mov	r6,r17
    6f98:	04c00044 	movi	r19,1
    6f9c:	8023883a 	mov	r17,r16
    6fa0:	3021883a 	mov	r16,r6
    6fa4:	003fac06 	br	6e58 <__mdiff+0x3c>

00006fa8 <__lshift>:
    6fa8:	defff904 	addi	sp,sp,-28
    6fac:	28800417 	ldw	r2,16(r5)
    6fb0:	dc000015 	stw	r16,0(sp)
    6fb4:	3021d17a 	srai	r16,r6,5
    6fb8:	28c00217 	ldw	r3,8(r5)
    6fbc:	10800044 	addi	r2,r2,1
    6fc0:	dc400115 	stw	r17,4(sp)
    6fc4:	80a3883a 	add	r17,r16,r2
    6fc8:	dd400515 	stw	r21,20(sp)
    6fcc:	dd000415 	stw	r20,16(sp)
    6fd0:	dc800215 	stw	r18,8(sp)
    6fd4:	dfc00615 	stw	ra,24(sp)
    6fd8:	2825883a 	mov	r18,r5
    6fdc:	dcc00315 	stw	r19,12(sp)
    6fe0:	3029883a 	mov	r20,r6
    6fe4:	202b883a 	mov	r21,r4
    6fe8:	29400117 	ldw	r5,4(r5)
    6fec:	1c40030e 	bge	r3,r17,6ffc <__lshift+0x54>
    6ff0:	18c7883a 	add	r3,r3,r3
    6ff4:	29400044 	addi	r5,r5,1
    6ff8:	1c7ffd16 	blt	r3,r17,6ff0 <__lshift+0x48>
    6ffc:	a809883a 	mov	r4,r21
    7000:	0006be40 	call	6be4 <_Balloc>
    7004:	1027883a 	mov	r19,r2
    7008:	11400504 	addi	r5,r2,20
    700c:	0400090e 	bge	zero,r16,7034 <__lshift+0x8c>
    7010:	2805883a 	mov	r2,r5
    7014:	0007883a 	mov	r3,zero
    7018:	18c00044 	addi	r3,r3,1
    701c:	10000015 	stw	zero,0(r2)
    7020:	10800104 	addi	r2,r2,4
    7024:	80fffc1e 	bne	r16,r3,7018 <__lshift+0x70>
    7028:	8405883a 	add	r2,r16,r16
    702c:	1085883a 	add	r2,r2,r2
    7030:	288b883a 	add	r5,r5,r2
    7034:	90800417 	ldw	r2,16(r18)
    7038:	91000504 	addi	r4,r18,20
    703c:	a18007cc 	andi	r6,r20,31
    7040:	1085883a 	add	r2,r2,r2
    7044:	1085883a 	add	r2,r2,r2
    7048:	208f883a 	add	r7,r4,r2
    704c:	30001e26 	beq	r6,zero,70c8 <__lshift+0x120>
    7050:	00800804 	movi	r2,32
    7054:	1191c83a 	sub	r8,r2,r6
    7058:	0007883a 	mov	r3,zero
    705c:	20800017 	ldw	r2,0(r4)
    7060:	1184983a 	sll	r2,r2,r6
    7064:	1884b03a 	or	r2,r3,r2
    7068:	28800015 	stw	r2,0(r5)
    706c:	20c00017 	ldw	r3,0(r4)
    7070:	21000104 	addi	r4,r4,4
    7074:	29400104 	addi	r5,r5,4
    7078:	1a06d83a 	srl	r3,r3,r8
    707c:	21fff736 	bltu	r4,r7,705c <__lshift+0xb4>
    7080:	28c00015 	stw	r3,0(r5)
    7084:	18000126 	beq	r3,zero,708c <__lshift+0xe4>
    7088:	8c400044 	addi	r17,r17,1
    708c:	88bfffc4 	addi	r2,r17,-1
    7090:	98800415 	stw	r2,16(r19)
    7094:	a809883a 	mov	r4,r21
    7098:	900b883a 	mov	r5,r18
    709c:	00066640 	call	6664 <_Bfree>
    70a0:	9805883a 	mov	r2,r19
    70a4:	dfc00617 	ldw	ra,24(sp)
    70a8:	dd400517 	ldw	r21,20(sp)
    70ac:	dd000417 	ldw	r20,16(sp)
    70b0:	dcc00317 	ldw	r19,12(sp)
    70b4:	dc800217 	ldw	r18,8(sp)
    70b8:	dc400117 	ldw	r17,4(sp)
    70bc:	dc000017 	ldw	r16,0(sp)
    70c0:	dec00704 	addi	sp,sp,28
    70c4:	f800283a 	ret
    70c8:	20800017 	ldw	r2,0(r4)
    70cc:	21000104 	addi	r4,r4,4
    70d0:	28800015 	stw	r2,0(r5)
    70d4:	29400104 	addi	r5,r5,4
    70d8:	21ffec2e 	bgeu	r4,r7,708c <__lshift+0xe4>
    70dc:	20800017 	ldw	r2,0(r4)
    70e0:	21000104 	addi	r4,r4,4
    70e4:	28800015 	stw	r2,0(r5)
    70e8:	29400104 	addi	r5,r5,4
    70ec:	21fff636 	bltu	r4,r7,70c8 <__lshift+0x120>
    70f0:	003fe606 	br	708c <__lshift+0xe4>

000070f4 <__multiply>:
    70f4:	defff004 	addi	sp,sp,-64
    70f8:	dc800815 	stw	r18,32(sp)
    70fc:	dc400715 	stw	r17,28(sp)
    7100:	2c800417 	ldw	r18,16(r5)
    7104:	34400417 	ldw	r17,16(r6)
    7108:	dcc00915 	stw	r19,36(sp)
    710c:	dc000615 	stw	r16,24(sp)
    7110:	dfc00f15 	stw	ra,60(sp)
    7114:	df000e15 	stw	fp,56(sp)
    7118:	ddc00d15 	stw	r23,52(sp)
    711c:	dd800c15 	stw	r22,48(sp)
    7120:	dd400b15 	stw	r21,44(sp)
    7124:	dd000a15 	stw	r20,40(sp)
    7128:	2821883a 	mov	r16,r5
    712c:	3027883a 	mov	r19,r6
    7130:	9440040e 	bge	r18,r17,7144 <__multiply+0x50>
    7134:	8825883a 	mov	r18,r17
    7138:	2c400417 	ldw	r17,16(r5)
    713c:	2827883a 	mov	r19,r5
    7140:	3021883a 	mov	r16,r6
    7144:	80800217 	ldw	r2,8(r16)
    7148:	9447883a 	add	r3,r18,r17
    714c:	d8c00415 	stw	r3,16(sp)
    7150:	81400117 	ldw	r5,4(r16)
    7154:	10c0010e 	bge	r2,r3,715c <__multiply+0x68>
    7158:	29400044 	addi	r5,r5,1
    715c:	0006be40 	call	6be4 <_Balloc>
    7160:	d8800515 	stw	r2,20(sp)
    7164:	d9000417 	ldw	r4,16(sp)
    7168:	d8c00517 	ldw	r3,20(sp)
    716c:	2105883a 	add	r2,r4,r4
    7170:	1085883a 	add	r2,r2,r2
    7174:	19000504 	addi	r4,r3,20
    7178:	2085883a 	add	r2,r4,r2
    717c:	d8800315 	stw	r2,12(sp)
    7180:	2080052e 	bgeu	r4,r2,7198 <__multiply+0xa4>
    7184:	2005883a 	mov	r2,r4
    7188:	d8c00317 	ldw	r3,12(sp)
    718c:	10000015 	stw	zero,0(r2)
    7190:	10800104 	addi	r2,r2,4
    7194:	10fffc36 	bltu	r2,r3,7188 <__multiply+0x94>
    7198:	8c45883a 	add	r2,r17,r17
    719c:	9487883a 	add	r3,r18,r18
    71a0:	9dc00504 	addi	r23,r19,20
    71a4:	1085883a 	add	r2,r2,r2
    71a8:	84000504 	addi	r16,r16,20
    71ac:	18c7883a 	add	r3,r3,r3
    71b0:	b885883a 	add	r2,r23,r2
    71b4:	dc000015 	stw	r16,0(sp)
    71b8:	d8800215 	stw	r2,8(sp)
    71bc:	80f9883a 	add	fp,r16,r3
    71c0:	b880432e 	bgeu	r23,r2,72d0 <__multiply+0x1dc>
    71c4:	d9000115 	stw	r4,4(sp)
    71c8:	b9000017 	ldw	r4,0(r23)
    71cc:	253fffcc 	andi	r20,r4,65535
    71d0:	a0001a26 	beq	r20,zero,723c <__multiply+0x148>
    71d4:	dcc00017 	ldw	r19,0(sp)
    71d8:	dc800117 	ldw	r18,4(sp)
    71dc:	002b883a 	mov	r21,zero
    71e0:	9c400017 	ldw	r17,0(r19)
    71e4:	94000017 	ldw	r16,0(r18)
    71e8:	a009883a 	mov	r4,r20
    71ec:	897fffcc 	andi	r5,r17,65535
    71f0:	0000e180 	call	e18 <__mulsi3>
    71f4:	880ad43a 	srli	r5,r17,16
    71f8:	80ffffcc 	andi	r3,r16,65535
    71fc:	a8c7883a 	add	r3,r21,r3
    7200:	a009883a 	mov	r4,r20
    7204:	10e3883a 	add	r17,r2,r3
    7208:	8020d43a 	srli	r16,r16,16
    720c:	0000e180 	call	e18 <__mulsi3>
    7210:	8806d43a 	srli	r3,r17,16
    7214:	1405883a 	add	r2,r2,r16
    7218:	9cc00104 	addi	r19,r19,4
    721c:	1887883a 	add	r3,r3,r2
    7220:	90c0008d 	sth	r3,2(r18)
    7224:	9440000d 	sth	r17,0(r18)
    7228:	182ad43a 	srli	r21,r3,16
    722c:	94800104 	addi	r18,r18,4
    7230:	9f3feb36 	bltu	r19,fp,71e0 <__multiply+0xec>
    7234:	95400015 	stw	r21,0(r18)
    7238:	b9000017 	ldw	r4,0(r23)
    723c:	202ad43a 	srli	r21,r4,16
    7240:	a8001c26 	beq	r21,zero,72b4 <__multiply+0x1c0>
    7244:	d9000117 	ldw	r4,4(sp)
    7248:	dd000017 	ldw	r20,0(sp)
    724c:	002d883a 	mov	r22,zero
    7250:	24c00017 	ldw	r19,0(r4)
    7254:	2025883a 	mov	r18,r4
    7258:	9823883a 	mov	r17,r19
    725c:	a4000017 	ldw	r16,0(r20)
    7260:	a809883a 	mov	r4,r21
    7264:	a5000104 	addi	r20,r20,4
    7268:	817fffcc 	andi	r5,r16,65535
    726c:	0000e180 	call	e18 <__mulsi3>
    7270:	8806d43a 	srli	r3,r17,16
    7274:	800ad43a 	srli	r5,r16,16
    7278:	94c0000d 	sth	r19,0(r18)
    727c:	b0c7883a 	add	r3,r22,r3
    7280:	10e1883a 	add	r16,r2,r3
    7284:	9400008d 	sth	r16,2(r18)
    7288:	a809883a 	mov	r4,r21
    728c:	94800104 	addi	r18,r18,4
    7290:	0000e180 	call	e18 <__mulsi3>
    7294:	94400017 	ldw	r17,0(r18)
    7298:	8020d43a 	srli	r16,r16,16
    729c:	88ffffcc 	andi	r3,r17,65535
    72a0:	10c5883a 	add	r2,r2,r3
    72a4:	80a7883a 	add	r19,r16,r2
    72a8:	982cd43a 	srli	r22,r19,16
    72ac:	a73feb36 	bltu	r20,fp,725c <__multiply+0x168>
    72b0:	94c00015 	stw	r19,0(r18)
    72b4:	d8800217 	ldw	r2,8(sp)
    72b8:	bdc00104 	addi	r23,r23,4
    72bc:	b880042e 	bgeu	r23,r2,72d0 <__multiply+0x1dc>
    72c0:	d8c00117 	ldw	r3,4(sp)
    72c4:	18c00104 	addi	r3,r3,4
    72c8:	d8c00115 	stw	r3,4(sp)
    72cc:	003fbe06 	br	71c8 <__multiply+0xd4>
    72d0:	d9000417 	ldw	r4,16(sp)
    72d4:	01000c0e 	bge	zero,r4,7308 <__multiply+0x214>
    72d8:	d8c00317 	ldw	r3,12(sp)
    72dc:	18bfff17 	ldw	r2,-4(r3)
    72e0:	18ffff04 	addi	r3,r3,-4
    72e4:	10000326 	beq	r2,zero,72f4 <__multiply+0x200>
    72e8:	00000706 	br	7308 <__multiply+0x214>
    72ec:	18800017 	ldw	r2,0(r3)
    72f0:	1000051e 	bne	r2,zero,7308 <__multiply+0x214>
    72f4:	d9000417 	ldw	r4,16(sp)
    72f8:	18ffff04 	addi	r3,r3,-4
    72fc:	213fffc4 	addi	r4,r4,-1
    7300:	d9000415 	stw	r4,16(sp)
    7304:	203ff91e 	bne	r4,zero,72ec <__multiply+0x1f8>
    7308:	d8800417 	ldw	r2,16(sp)
    730c:	d8c00517 	ldw	r3,20(sp)
    7310:	18800415 	stw	r2,16(r3)
    7314:	1805883a 	mov	r2,r3
    7318:	dfc00f17 	ldw	ra,60(sp)
    731c:	df000e17 	ldw	fp,56(sp)
    7320:	ddc00d17 	ldw	r23,52(sp)
    7324:	dd800c17 	ldw	r22,48(sp)
    7328:	dd400b17 	ldw	r21,44(sp)
    732c:	dd000a17 	ldw	r20,40(sp)
    7330:	dcc00917 	ldw	r19,36(sp)
    7334:	dc800817 	ldw	r18,32(sp)
    7338:	dc400717 	ldw	r17,28(sp)
    733c:	dc000617 	ldw	r16,24(sp)
    7340:	dec01004 	addi	sp,sp,64
    7344:	f800283a 	ret

00007348 <__i2b>:
    7348:	defffd04 	addi	sp,sp,-12
    734c:	dc000015 	stw	r16,0(sp)
    7350:	04000044 	movi	r16,1
    7354:	dc800115 	stw	r18,4(sp)
    7358:	2825883a 	mov	r18,r5
    735c:	800b883a 	mov	r5,r16
    7360:	dfc00215 	stw	ra,8(sp)
    7364:	0006be40 	call	6be4 <_Balloc>
    7368:	14000415 	stw	r16,16(r2)
    736c:	14800515 	stw	r18,20(r2)
    7370:	dfc00217 	ldw	ra,8(sp)
    7374:	dc800117 	ldw	r18,4(sp)
    7378:	dc000017 	ldw	r16,0(sp)
    737c:	dec00304 	addi	sp,sp,12
    7380:	f800283a 	ret

00007384 <__multadd>:
    7384:	defff604 	addi	sp,sp,-40
    7388:	dd800615 	stw	r22,24(sp)
    738c:	2d800417 	ldw	r22,16(r5)
    7390:	df000815 	stw	fp,32(sp)
    7394:	ddc00715 	stw	r23,28(sp)
    7398:	dd400515 	stw	r21,20(sp)
    739c:	dd000415 	stw	r20,16(sp)
    73a0:	dcc00315 	stw	r19,12(sp)
    73a4:	dc800215 	stw	r18,8(sp)
    73a8:	dfc00915 	stw	ra,36(sp)
    73ac:	dc400115 	stw	r17,4(sp)
    73b0:	dc000015 	stw	r16,0(sp)
    73b4:	282f883a 	mov	r23,r5
    73b8:	2039883a 	mov	fp,r4
    73bc:	302b883a 	mov	r21,r6
    73c0:	3829883a 	mov	r20,r7
    73c4:	2c800504 	addi	r18,r5,20
    73c8:	0027883a 	mov	r19,zero
    73cc:	94400017 	ldw	r17,0(r18)
    73d0:	a80b883a 	mov	r5,r21
    73d4:	9cc00044 	addi	r19,r19,1
    73d8:	893fffcc 	andi	r4,r17,65535
    73dc:	0000e180 	call	e18 <__mulsi3>
    73e0:	8808d43a 	srli	r4,r17,16
    73e4:	1521883a 	add	r16,r2,r20
    73e8:	a80b883a 	mov	r5,r21
    73ec:	0000e180 	call	e18 <__mulsi3>
    73f0:	8008d43a 	srli	r4,r16,16
    73f4:	843fffcc 	andi	r16,r16,65535
    73f8:	1105883a 	add	r2,r2,r4
    73fc:	1006943a 	slli	r3,r2,16
    7400:	1028d43a 	srli	r20,r2,16
    7404:	1c07883a 	add	r3,r3,r16
    7408:	90c00015 	stw	r3,0(r18)
    740c:	94800104 	addi	r18,r18,4
    7410:	9dbfee16 	blt	r19,r22,73cc <__multadd+0x48>
    7414:	a0000826 	beq	r20,zero,7438 <__multadd+0xb4>
    7418:	b8800217 	ldw	r2,8(r23)
    741c:	b080130e 	bge	r22,r2,746c <__multadd+0xe8>
    7420:	b585883a 	add	r2,r22,r22
    7424:	1085883a 	add	r2,r2,r2
    7428:	15c5883a 	add	r2,r2,r23
    742c:	b0c00044 	addi	r3,r22,1
    7430:	15000515 	stw	r20,20(r2)
    7434:	b8c00415 	stw	r3,16(r23)
    7438:	b805883a 	mov	r2,r23
    743c:	dfc00917 	ldw	ra,36(sp)
    7440:	df000817 	ldw	fp,32(sp)
    7444:	ddc00717 	ldw	r23,28(sp)
    7448:	dd800617 	ldw	r22,24(sp)
    744c:	dd400517 	ldw	r21,20(sp)
    7450:	dd000417 	ldw	r20,16(sp)
    7454:	dcc00317 	ldw	r19,12(sp)
    7458:	dc800217 	ldw	r18,8(sp)
    745c:	dc400117 	ldw	r17,4(sp)
    7460:	dc000017 	ldw	r16,0(sp)
    7464:	dec00a04 	addi	sp,sp,40
    7468:	f800283a 	ret
    746c:	b9400117 	ldw	r5,4(r23)
    7470:	e009883a 	mov	r4,fp
    7474:	29400044 	addi	r5,r5,1
    7478:	0006be40 	call	6be4 <_Balloc>
    747c:	b9800417 	ldw	r6,16(r23)
    7480:	b9400304 	addi	r5,r23,12
    7484:	11000304 	addi	r4,r2,12
    7488:	318d883a 	add	r6,r6,r6
    748c:	318d883a 	add	r6,r6,r6
    7490:	31800204 	addi	r6,r6,8
    7494:	1023883a 	mov	r17,r2
    7498:	000644c0 	call	644c <memcpy>
    749c:	b80b883a 	mov	r5,r23
    74a0:	e009883a 	mov	r4,fp
    74a4:	00066640 	call	6664 <_Bfree>
    74a8:	882f883a 	mov	r23,r17
    74ac:	003fdc06 	br	7420 <__multadd+0x9c>

000074b0 <__pow5mult>:
    74b0:	defffa04 	addi	sp,sp,-24
    74b4:	308000cc 	andi	r2,r6,3
    74b8:	dd000415 	stw	r20,16(sp)
    74bc:	dcc00315 	stw	r19,12(sp)
    74c0:	dc000015 	stw	r16,0(sp)
    74c4:	dfc00515 	stw	ra,20(sp)
    74c8:	dc800215 	stw	r18,8(sp)
    74cc:	dc400115 	stw	r17,4(sp)
    74d0:	3021883a 	mov	r16,r6
    74d4:	2027883a 	mov	r19,r4
    74d8:	2829883a 	mov	r20,r5
    74dc:	10002b1e 	bne	r2,zero,758c <__pow5mult+0xdc>
    74e0:	8025d0ba 	srai	r18,r16,2
    74e4:	90001b26 	beq	r18,zero,7554 <__pow5mult+0xa4>
    74e8:	9c001217 	ldw	r16,72(r19)
    74ec:	8000081e 	bne	r16,zero,7510 <__pow5mult+0x60>
    74f0:	00003006 	br	75b4 <__pow5mult+0x104>
    74f4:	800b883a 	mov	r5,r16
    74f8:	800d883a 	mov	r6,r16
    74fc:	9809883a 	mov	r4,r19
    7500:	90001426 	beq	r18,zero,7554 <__pow5mult+0xa4>
    7504:	80800017 	ldw	r2,0(r16)
    7508:	10001b26 	beq	r2,zero,7578 <__pow5mult+0xc8>
    750c:	1021883a 	mov	r16,r2
    7510:	9080004c 	andi	r2,r18,1
    7514:	1005003a 	cmpeq	r2,r2,zero
    7518:	9025d07a 	srai	r18,r18,1
    751c:	800d883a 	mov	r6,r16
    7520:	9809883a 	mov	r4,r19
    7524:	a00b883a 	mov	r5,r20
    7528:	103ff21e 	bne	r2,zero,74f4 <__pow5mult+0x44>
    752c:	00070f40 	call	70f4 <__multiply>
    7530:	a00b883a 	mov	r5,r20
    7534:	9809883a 	mov	r4,r19
    7538:	1023883a 	mov	r17,r2
    753c:	00066640 	call	6664 <_Bfree>
    7540:	8829883a 	mov	r20,r17
    7544:	800b883a 	mov	r5,r16
    7548:	800d883a 	mov	r6,r16
    754c:	9809883a 	mov	r4,r19
    7550:	903fec1e 	bne	r18,zero,7504 <__pow5mult+0x54>
    7554:	a005883a 	mov	r2,r20
    7558:	dfc00517 	ldw	ra,20(sp)
    755c:	dd000417 	ldw	r20,16(sp)
    7560:	dcc00317 	ldw	r19,12(sp)
    7564:	dc800217 	ldw	r18,8(sp)
    7568:	dc400117 	ldw	r17,4(sp)
    756c:	dc000017 	ldw	r16,0(sp)
    7570:	dec00604 	addi	sp,sp,24
    7574:	f800283a 	ret
    7578:	00070f40 	call	70f4 <__multiply>
    757c:	80800015 	stw	r2,0(r16)
    7580:	1021883a 	mov	r16,r2
    7584:	10000015 	stw	zero,0(r2)
    7588:	003fe106 	br	7510 <__pow5mult+0x60>
    758c:	1085883a 	add	r2,r2,r2
    7590:	00c00074 	movhi	r3,1
    7594:	18f6f404 	addi	r3,r3,-9264
    7598:	1085883a 	add	r2,r2,r2
    759c:	10c5883a 	add	r2,r2,r3
    75a0:	11bfff17 	ldw	r6,-4(r2)
    75a4:	000f883a 	mov	r7,zero
    75a8:	00073840 	call	7384 <__multadd>
    75ac:	1029883a 	mov	r20,r2
    75b0:	003fcb06 	br	74e0 <__pow5mult+0x30>
    75b4:	9809883a 	mov	r4,r19
    75b8:	01409c44 	movi	r5,625
    75bc:	00073480 	call	7348 <__i2b>
    75c0:	98801215 	stw	r2,72(r19)
    75c4:	1021883a 	mov	r16,r2
    75c8:	10000015 	stw	zero,0(r2)
    75cc:	003fd006 	br	7510 <__pow5mult+0x60>

000075d0 <__s2b>:
    75d0:	defff904 	addi	sp,sp,-28
    75d4:	dcc00315 	stw	r19,12(sp)
    75d8:	dc800215 	stw	r18,8(sp)
    75dc:	2827883a 	mov	r19,r5
    75e0:	2025883a 	mov	r18,r4
    75e4:	01400244 	movi	r5,9
    75e8:	39000204 	addi	r4,r7,8
    75ec:	dd000415 	stw	r20,16(sp)
    75f0:	dc400115 	stw	r17,4(sp)
    75f4:	dfc00615 	stw	ra,24(sp)
    75f8:	dd400515 	stw	r21,20(sp)
    75fc:	dc000015 	stw	r16,0(sp)
    7600:	3829883a 	mov	r20,r7
    7604:	3023883a 	mov	r17,r6
    7608:	0000d480 	call	d48 <__divsi3>
    760c:	00c00044 	movi	r3,1
    7610:	1880350e 	bge	r3,r2,76e8 <__s2b+0x118>
    7614:	000b883a 	mov	r5,zero
    7618:	18c7883a 	add	r3,r3,r3
    761c:	29400044 	addi	r5,r5,1
    7620:	18bffd16 	blt	r3,r2,7618 <__s2b+0x48>
    7624:	9009883a 	mov	r4,r18
    7628:	0006be40 	call	6be4 <_Balloc>
    762c:	1011883a 	mov	r8,r2
    7630:	d8800717 	ldw	r2,28(sp)
    7634:	00c00044 	movi	r3,1
    7638:	01800244 	movi	r6,9
    763c:	40800515 	stw	r2,20(r8)
    7640:	40c00415 	stw	r3,16(r8)
    7644:	3440260e 	bge	r6,r17,76e0 <__s2b+0x110>
    7648:	3021883a 	mov	r16,r6
    764c:	99ab883a 	add	r21,r19,r6
    7650:	9c05883a 	add	r2,r19,r16
    7654:	11c00007 	ldb	r7,0(r2)
    7658:	400b883a 	mov	r5,r8
    765c:	9009883a 	mov	r4,r18
    7660:	39fff404 	addi	r7,r7,-48
    7664:	01800284 	movi	r6,10
    7668:	00073840 	call	7384 <__multadd>
    766c:	84000044 	addi	r16,r16,1
    7670:	1011883a 	mov	r8,r2
    7674:	8c3ff61e 	bne	r17,r16,7650 <__s2b+0x80>
    7678:	ac45883a 	add	r2,r21,r17
    767c:	117ffe04 	addi	r5,r2,-8
    7680:	880d883a 	mov	r6,r17
    7684:	35000c0e 	bge	r6,r20,76b8 <__s2b+0xe8>
    7688:	a185c83a 	sub	r2,r20,r6
    768c:	2821883a 	mov	r16,r5
    7690:	28a3883a 	add	r17,r5,r2
    7694:	81c00007 	ldb	r7,0(r16)
    7698:	400b883a 	mov	r5,r8
    769c:	9009883a 	mov	r4,r18
    76a0:	39fff404 	addi	r7,r7,-48
    76a4:	01800284 	movi	r6,10
    76a8:	00073840 	call	7384 <__multadd>
    76ac:	84000044 	addi	r16,r16,1
    76b0:	1011883a 	mov	r8,r2
    76b4:	847ff71e 	bne	r16,r17,7694 <__s2b+0xc4>
    76b8:	4005883a 	mov	r2,r8
    76bc:	dfc00617 	ldw	ra,24(sp)
    76c0:	dd400517 	ldw	r21,20(sp)
    76c4:	dd000417 	ldw	r20,16(sp)
    76c8:	dcc00317 	ldw	r19,12(sp)
    76cc:	dc800217 	ldw	r18,8(sp)
    76d0:	dc400117 	ldw	r17,4(sp)
    76d4:	dc000017 	ldw	r16,0(sp)
    76d8:	dec00704 	addi	sp,sp,28
    76dc:	f800283a 	ret
    76e0:	99400284 	addi	r5,r19,10
    76e4:	003fe706 	br	7684 <__s2b+0xb4>
    76e8:	000b883a 	mov	r5,zero
    76ec:	003fcd06 	br	7624 <__s2b+0x54>

000076f0 <_realloc_r>:
    76f0:	defff404 	addi	sp,sp,-48
    76f4:	dd800815 	stw	r22,32(sp)
    76f8:	dc800415 	stw	r18,16(sp)
    76fc:	dc400315 	stw	r17,12(sp)
    7700:	dfc00b15 	stw	ra,44(sp)
    7704:	df000a15 	stw	fp,40(sp)
    7708:	ddc00915 	stw	r23,36(sp)
    770c:	dd400715 	stw	r21,28(sp)
    7710:	dd000615 	stw	r20,24(sp)
    7714:	dcc00515 	stw	r19,20(sp)
    7718:	dc000215 	stw	r16,8(sp)
    771c:	2825883a 	mov	r18,r5
    7720:	3023883a 	mov	r17,r6
    7724:	202d883a 	mov	r22,r4
    7728:	2800c926 	beq	r5,zero,7a50 <_realloc_r+0x360>
    772c:	000b0180 	call	b018 <__malloc_lock>
    7730:	943ffe04 	addi	r16,r18,-8
    7734:	88c002c4 	addi	r3,r17,11
    7738:	00800584 	movi	r2,22
    773c:	82000117 	ldw	r8,4(r16)
    7740:	10c01b2e 	bgeu	r2,r3,77b0 <_realloc_r+0xc0>
    7744:	00bffe04 	movi	r2,-8
    7748:	188e703a 	and	r7,r3,r2
    774c:	3839883a 	mov	fp,r7
    7750:	38001a16 	blt	r7,zero,77bc <_realloc_r+0xcc>
    7754:	e4401936 	bltu	fp,r17,77bc <_realloc_r+0xcc>
    7758:	013fff04 	movi	r4,-4
    775c:	4126703a 	and	r19,r8,r4
    7760:	99c02616 	blt	r19,r7,77fc <_realloc_r+0x10c>
    7764:	802b883a 	mov	r21,r16
    7768:	9829883a 	mov	r20,r19
    776c:	84000204 	addi	r16,r16,8
    7770:	a80f883a 	mov	r7,r21
    7774:	a70dc83a 	sub	r6,r20,fp
    7778:	008003c4 	movi	r2,15
    777c:	1180c136 	bltu	r2,r6,7a84 <_realloc_r+0x394>
    7780:	38800117 	ldw	r2,4(r7)
    7784:	a549883a 	add	r4,r20,r21
    7788:	1080004c 	andi	r2,r2,1
    778c:	a084b03a 	or	r2,r20,r2
    7790:	38800115 	stw	r2,4(r7)
    7794:	20c00117 	ldw	r3,4(r4)
    7798:	18c00054 	ori	r3,r3,1
    779c:	20c00115 	stw	r3,4(r4)
    77a0:	b009883a 	mov	r4,r22
    77a4:	000b0380 	call	b038 <__malloc_unlock>
    77a8:	8023883a 	mov	r17,r16
    77ac:	00000606 	br	77c8 <_realloc_r+0xd8>
    77b0:	01c00404 	movi	r7,16
    77b4:	3839883a 	mov	fp,r7
    77b8:	e47fe72e 	bgeu	fp,r17,7758 <_realloc_r+0x68>
    77bc:	00800304 	movi	r2,12
    77c0:	0023883a 	mov	r17,zero
    77c4:	b0800015 	stw	r2,0(r22)
    77c8:	8805883a 	mov	r2,r17
    77cc:	dfc00b17 	ldw	ra,44(sp)
    77d0:	df000a17 	ldw	fp,40(sp)
    77d4:	ddc00917 	ldw	r23,36(sp)
    77d8:	dd800817 	ldw	r22,32(sp)
    77dc:	dd400717 	ldw	r21,28(sp)
    77e0:	dd000617 	ldw	r20,24(sp)
    77e4:	dcc00517 	ldw	r19,20(sp)
    77e8:	dc800417 	ldw	r18,16(sp)
    77ec:	dc400317 	ldw	r17,12(sp)
    77f0:	dc000217 	ldw	r16,8(sp)
    77f4:	dec00c04 	addi	sp,sp,48
    77f8:	f800283a 	ret
    77fc:	00800074 	movhi	r2,1
    7800:	10b84a04 	addi	r2,r2,-7896
    7804:	12400217 	ldw	r9,8(r2)
    7808:	84cd883a 	add	r6,r16,r19
    780c:	802b883a 	mov	r21,r16
    7810:	3240b926 	beq	r6,r9,7af8 <_realloc_r+0x408>
    7814:	31400117 	ldw	r5,4(r6)
    7818:	00bfff84 	movi	r2,-2
    781c:	2884703a 	and	r2,r5,r2
    7820:	1185883a 	add	r2,r2,r6
    7824:	10c00117 	ldw	r3,4(r2)
    7828:	18c0004c 	andi	r3,r3,1
    782c:	1807003a 	cmpeq	r3,r3,zero
    7830:	1800a326 	beq	r3,zero,7ac0 <_realloc_r+0x3d0>
    7834:	2908703a 	and	r4,r5,r4
    7838:	9929883a 	add	r20,r19,r4
    783c:	a1c0a30e 	bge	r20,r7,7acc <_realloc_r+0x3dc>
    7840:	4080004c 	andi	r2,r8,1
    7844:	1000551e 	bne	r2,zero,799c <_realloc_r+0x2ac>
    7848:	80800017 	ldw	r2,0(r16)
    784c:	80afc83a 	sub	r23,r16,r2
    7850:	b8c00117 	ldw	r3,4(r23)
    7854:	00bfff04 	movi	r2,-4
    7858:	1884703a 	and	r2,r3,r2
    785c:	30002e26 	beq	r6,zero,7918 <_realloc_r+0x228>
    7860:	3240b926 	beq	r6,r9,7b48 <_realloc_r+0x458>
    7864:	98a9883a 	add	r20,r19,r2
    7868:	2509883a 	add	r4,r4,r20
    786c:	d9000015 	stw	r4,0(sp)
    7870:	21c02a16 	blt	r4,r7,791c <_realloc_r+0x22c>
    7874:	30800317 	ldw	r2,12(r6)
    7878:	30c00217 	ldw	r3,8(r6)
    787c:	01400904 	movi	r5,36
    7880:	99bfff04 	addi	r6,r19,-4
    7884:	18800315 	stw	r2,12(r3)
    7888:	10c00215 	stw	r3,8(r2)
    788c:	b9000317 	ldw	r4,12(r23)
    7890:	b8800217 	ldw	r2,8(r23)
    7894:	b82b883a 	mov	r21,r23
    7898:	bc000204 	addi	r16,r23,8
    789c:	20800215 	stw	r2,8(r4)
    78a0:	11000315 	stw	r4,12(r2)
    78a4:	2980e436 	bltu	r5,r6,7c38 <_realloc_r+0x548>
    78a8:	008004c4 	movi	r2,19
    78ac:	9009883a 	mov	r4,r18
    78b0:	8011883a 	mov	r8,r16
    78b4:	11800f2e 	bgeu	r2,r6,78f4 <_realloc_r+0x204>
    78b8:	90800017 	ldw	r2,0(r18)
    78bc:	ba000404 	addi	r8,r23,16
    78c0:	91000204 	addi	r4,r18,8
    78c4:	b8800215 	stw	r2,8(r23)
    78c8:	90c00117 	ldw	r3,4(r18)
    78cc:	008006c4 	movi	r2,27
    78d0:	b8c00315 	stw	r3,12(r23)
    78d4:	1180072e 	bgeu	r2,r6,78f4 <_realloc_r+0x204>
    78d8:	90c00217 	ldw	r3,8(r18)
    78dc:	ba000604 	addi	r8,r23,24
    78e0:	91000404 	addi	r4,r18,16
    78e4:	b8c00415 	stw	r3,16(r23)
    78e8:	90800317 	ldw	r2,12(r18)
    78ec:	b8800515 	stw	r2,20(r23)
    78f0:	3140e726 	beq	r6,r5,7c90 <_realloc_r+0x5a0>
    78f4:	20800017 	ldw	r2,0(r4)
    78f8:	dd000017 	ldw	r20,0(sp)
    78fc:	b80f883a 	mov	r7,r23
    7900:	40800015 	stw	r2,0(r8)
    7904:	20c00117 	ldw	r3,4(r4)
    7908:	40c00115 	stw	r3,4(r8)
    790c:	20800217 	ldw	r2,8(r4)
    7910:	40800215 	stw	r2,8(r8)
    7914:	003f9706 	br	7774 <_realloc_r+0x84>
    7918:	98a9883a 	add	r20,r19,r2
    791c:	a1c01f16 	blt	r20,r7,799c <_realloc_r+0x2ac>
    7920:	b8c00317 	ldw	r3,12(r23)
    7924:	b8800217 	ldw	r2,8(r23)
    7928:	99bfff04 	addi	r6,r19,-4
    792c:	01400904 	movi	r5,36
    7930:	b82b883a 	mov	r21,r23
    7934:	18800215 	stw	r2,8(r3)
    7938:	10c00315 	stw	r3,12(r2)
    793c:	bc000204 	addi	r16,r23,8
    7940:	2980c336 	bltu	r5,r6,7c50 <_realloc_r+0x560>
    7944:	008004c4 	movi	r2,19
    7948:	9009883a 	mov	r4,r18
    794c:	8011883a 	mov	r8,r16
    7950:	11800f2e 	bgeu	r2,r6,7990 <_realloc_r+0x2a0>
    7954:	90800017 	ldw	r2,0(r18)
    7958:	ba000404 	addi	r8,r23,16
    795c:	91000204 	addi	r4,r18,8
    7960:	b8800215 	stw	r2,8(r23)
    7964:	90c00117 	ldw	r3,4(r18)
    7968:	008006c4 	movi	r2,27
    796c:	b8c00315 	stw	r3,12(r23)
    7970:	1180072e 	bgeu	r2,r6,7990 <_realloc_r+0x2a0>
    7974:	90c00217 	ldw	r3,8(r18)
    7978:	ba000604 	addi	r8,r23,24
    797c:	91000404 	addi	r4,r18,16
    7980:	b8c00415 	stw	r3,16(r23)
    7984:	90800317 	ldw	r2,12(r18)
    7988:	b8800515 	stw	r2,20(r23)
    798c:	3140c726 	beq	r6,r5,7cac <_realloc_r+0x5bc>
    7990:	20800017 	ldw	r2,0(r4)
    7994:	b80f883a 	mov	r7,r23
    7998:	003fd906 	br	7900 <_realloc_r+0x210>
    799c:	880b883a 	mov	r5,r17
    79a0:	b009883a 	mov	r4,r22
    79a4:	0005c280 	call	5c28 <_malloc_r>
    79a8:	1023883a 	mov	r17,r2
    79ac:	10002526 	beq	r2,zero,7a44 <_realloc_r+0x354>
    79b0:	80800117 	ldw	r2,4(r16)
    79b4:	00ffff84 	movi	r3,-2
    79b8:	893ffe04 	addi	r4,r17,-8
    79bc:	10c4703a 	and	r2,r2,r3
    79c0:	8085883a 	add	r2,r16,r2
    79c4:	20809526 	beq	r4,r2,7c1c <_realloc_r+0x52c>
    79c8:	99bfff04 	addi	r6,r19,-4
    79cc:	01c00904 	movi	r7,36
    79d0:	39804536 	bltu	r7,r6,7ae8 <_realloc_r+0x3f8>
    79d4:	008004c4 	movi	r2,19
    79d8:	9009883a 	mov	r4,r18
    79dc:	880b883a 	mov	r5,r17
    79e0:	11800f2e 	bgeu	r2,r6,7a20 <_realloc_r+0x330>
    79e4:	90800017 	ldw	r2,0(r18)
    79e8:	89400204 	addi	r5,r17,8
    79ec:	91000204 	addi	r4,r18,8
    79f0:	88800015 	stw	r2,0(r17)
    79f4:	90c00117 	ldw	r3,4(r18)
    79f8:	008006c4 	movi	r2,27
    79fc:	88c00115 	stw	r3,4(r17)
    7a00:	1180072e 	bgeu	r2,r6,7a20 <_realloc_r+0x330>
    7a04:	90c00217 	ldw	r3,8(r18)
    7a08:	89400404 	addi	r5,r17,16
    7a0c:	91000404 	addi	r4,r18,16
    7a10:	88c00215 	stw	r3,8(r17)
    7a14:	90800317 	ldw	r2,12(r18)
    7a18:	88800315 	stw	r2,12(r17)
    7a1c:	31c09126 	beq	r6,r7,7c64 <_realloc_r+0x574>
    7a20:	20800017 	ldw	r2,0(r4)
    7a24:	28800015 	stw	r2,0(r5)
    7a28:	20c00117 	ldw	r3,4(r4)
    7a2c:	28c00115 	stw	r3,4(r5)
    7a30:	20800217 	ldw	r2,8(r4)
    7a34:	28800215 	stw	r2,8(r5)
    7a38:	900b883a 	mov	r5,r18
    7a3c:	b009883a 	mov	r4,r22
    7a40:	00050a00 	call	50a0 <_free_r>
    7a44:	b009883a 	mov	r4,r22
    7a48:	000b0380 	call	b038 <__malloc_unlock>
    7a4c:	003f5e06 	br	77c8 <_realloc_r+0xd8>
    7a50:	300b883a 	mov	r5,r6
    7a54:	dfc00b17 	ldw	ra,44(sp)
    7a58:	df000a17 	ldw	fp,40(sp)
    7a5c:	ddc00917 	ldw	r23,36(sp)
    7a60:	dd800817 	ldw	r22,32(sp)
    7a64:	dd400717 	ldw	r21,28(sp)
    7a68:	dd000617 	ldw	r20,24(sp)
    7a6c:	dcc00517 	ldw	r19,20(sp)
    7a70:	dc800417 	ldw	r18,16(sp)
    7a74:	dc400317 	ldw	r17,12(sp)
    7a78:	dc000217 	ldw	r16,8(sp)
    7a7c:	dec00c04 	addi	sp,sp,48
    7a80:	0005c281 	jmpi	5c28 <_malloc_r>
    7a84:	38800117 	ldw	r2,4(r7)
    7a88:	e54b883a 	add	r5,fp,r21
    7a8c:	31000054 	ori	r4,r6,1
    7a90:	1080004c 	andi	r2,r2,1
    7a94:	1704b03a 	or	r2,r2,fp
    7a98:	38800115 	stw	r2,4(r7)
    7a9c:	29000115 	stw	r4,4(r5)
    7aa0:	2987883a 	add	r3,r5,r6
    7aa4:	18800117 	ldw	r2,4(r3)
    7aa8:	29400204 	addi	r5,r5,8
    7aac:	b009883a 	mov	r4,r22
    7ab0:	10800054 	ori	r2,r2,1
    7ab4:	18800115 	stw	r2,4(r3)
    7ab8:	00050a00 	call	50a0 <_free_r>
    7abc:	003f3806 	br	77a0 <_realloc_r+0xb0>
    7ac0:	000d883a 	mov	r6,zero
    7ac4:	0009883a 	mov	r4,zero
    7ac8:	003f5d06 	br	7840 <_realloc_r+0x150>
    7acc:	30c00217 	ldw	r3,8(r6)
    7ad0:	30800317 	ldw	r2,12(r6)
    7ad4:	800f883a 	mov	r7,r16
    7ad8:	84000204 	addi	r16,r16,8
    7adc:	10c00215 	stw	r3,8(r2)
    7ae0:	18800315 	stw	r2,12(r3)
    7ae4:	003f2306 	br	7774 <_realloc_r+0x84>
    7ae8:	8809883a 	mov	r4,r17
    7aec:	900b883a 	mov	r5,r18
    7af0:	00064ec0 	call	64ec <memmove>
    7af4:	003fd006 	br	7a38 <_realloc_r+0x348>
    7af8:	30800117 	ldw	r2,4(r6)
    7afc:	e0c00404 	addi	r3,fp,16
    7b00:	1108703a 	and	r4,r2,r4
    7b04:	9905883a 	add	r2,r19,r4
    7b08:	10ff4d16 	blt	r2,r3,7840 <_realloc_r+0x150>
    7b0c:	1705c83a 	sub	r2,r2,fp
    7b10:	870b883a 	add	r5,r16,fp
    7b14:	10800054 	ori	r2,r2,1
    7b18:	28800115 	stw	r2,4(r5)
    7b1c:	80c00117 	ldw	r3,4(r16)
    7b20:	00800074 	movhi	r2,1
    7b24:	10b84a04 	addi	r2,r2,-7896
    7b28:	b009883a 	mov	r4,r22
    7b2c:	18c0004c 	andi	r3,r3,1
    7b30:	e0c6b03a 	or	r3,fp,r3
    7b34:	11400215 	stw	r5,8(r2)
    7b38:	80c00115 	stw	r3,4(r16)
    7b3c:	000b0380 	call	b038 <__malloc_unlock>
    7b40:	84400204 	addi	r17,r16,8
    7b44:	003f2006 	br	77c8 <_realloc_r+0xd8>
    7b48:	98a9883a 	add	r20,r19,r2
    7b4c:	2509883a 	add	r4,r4,r20
    7b50:	e0800404 	addi	r2,fp,16
    7b54:	d9000115 	stw	r4,4(sp)
    7b58:	20bf7016 	blt	r4,r2,791c <_realloc_r+0x22c>
    7b5c:	b8c00317 	ldw	r3,12(r23)
    7b60:	b8800217 	ldw	r2,8(r23)
    7b64:	99bfff04 	addi	r6,r19,-4
    7b68:	01400904 	movi	r5,36
    7b6c:	18800215 	stw	r2,8(r3)
    7b70:	10c00315 	stw	r3,12(r2)
    7b74:	bc400204 	addi	r17,r23,8
    7b78:	29804136 	bltu	r5,r6,7c80 <_realloc_r+0x590>
    7b7c:	008004c4 	movi	r2,19
    7b80:	9009883a 	mov	r4,r18
    7b84:	880f883a 	mov	r7,r17
    7b88:	11800f2e 	bgeu	r2,r6,7bc8 <_realloc_r+0x4d8>
    7b8c:	90800017 	ldw	r2,0(r18)
    7b90:	b9c00404 	addi	r7,r23,16
    7b94:	91000204 	addi	r4,r18,8
    7b98:	b8800215 	stw	r2,8(r23)
    7b9c:	90c00117 	ldw	r3,4(r18)
    7ba0:	008006c4 	movi	r2,27
    7ba4:	b8c00315 	stw	r3,12(r23)
    7ba8:	1180072e 	bgeu	r2,r6,7bc8 <_realloc_r+0x4d8>
    7bac:	90c00217 	ldw	r3,8(r18)
    7bb0:	b9c00604 	addi	r7,r23,24
    7bb4:	91000404 	addi	r4,r18,16
    7bb8:	b8c00415 	stw	r3,16(r23)
    7bbc:	90800317 	ldw	r2,12(r18)
    7bc0:	b8800515 	stw	r2,20(r23)
    7bc4:	31404026 	beq	r6,r5,7cc8 <_realloc_r+0x5d8>
    7bc8:	20800017 	ldw	r2,0(r4)
    7bcc:	38800015 	stw	r2,0(r7)
    7bd0:	20c00117 	ldw	r3,4(r4)
    7bd4:	38c00115 	stw	r3,4(r7)
    7bd8:	20800217 	ldw	r2,8(r4)
    7bdc:	38800215 	stw	r2,8(r7)
    7be0:	d8c00117 	ldw	r3,4(sp)
    7be4:	bf0b883a 	add	r5,r23,fp
    7be8:	b009883a 	mov	r4,r22
    7bec:	1f05c83a 	sub	r2,r3,fp
    7bf0:	10800054 	ori	r2,r2,1
    7bf4:	28800115 	stw	r2,4(r5)
    7bf8:	b8c00117 	ldw	r3,4(r23)
    7bfc:	00800074 	movhi	r2,1
    7c00:	10b84a04 	addi	r2,r2,-7896
    7c04:	11400215 	stw	r5,8(r2)
    7c08:	18c0004c 	andi	r3,r3,1
    7c0c:	e0c6b03a 	or	r3,fp,r3
    7c10:	b8c00115 	stw	r3,4(r23)
    7c14:	000b0380 	call	b038 <__malloc_unlock>
    7c18:	003eeb06 	br	77c8 <_realloc_r+0xd8>
    7c1c:	20800117 	ldw	r2,4(r4)
    7c20:	00ffff04 	movi	r3,-4
    7c24:	800f883a 	mov	r7,r16
    7c28:	10c4703a 	and	r2,r2,r3
    7c2c:	98a9883a 	add	r20,r19,r2
    7c30:	84000204 	addi	r16,r16,8
    7c34:	003ecf06 	br	7774 <_realloc_r+0x84>
    7c38:	900b883a 	mov	r5,r18
    7c3c:	8009883a 	mov	r4,r16
    7c40:	00064ec0 	call	64ec <memmove>
    7c44:	dd000017 	ldw	r20,0(sp)
    7c48:	b80f883a 	mov	r7,r23
    7c4c:	003ec906 	br	7774 <_realloc_r+0x84>
    7c50:	900b883a 	mov	r5,r18
    7c54:	8009883a 	mov	r4,r16
    7c58:	00064ec0 	call	64ec <memmove>
    7c5c:	b80f883a 	mov	r7,r23
    7c60:	003ec406 	br	7774 <_realloc_r+0x84>
    7c64:	90c00417 	ldw	r3,16(r18)
    7c68:	89400604 	addi	r5,r17,24
    7c6c:	91000604 	addi	r4,r18,24
    7c70:	88c00415 	stw	r3,16(r17)
    7c74:	90800517 	ldw	r2,20(r18)
    7c78:	88800515 	stw	r2,20(r17)
    7c7c:	003f6806 	br	7a20 <_realloc_r+0x330>
    7c80:	900b883a 	mov	r5,r18
    7c84:	8809883a 	mov	r4,r17
    7c88:	00064ec0 	call	64ec <memmove>
    7c8c:	003fd406 	br	7be0 <_realloc_r+0x4f0>
    7c90:	90c00417 	ldw	r3,16(r18)
    7c94:	91000604 	addi	r4,r18,24
    7c98:	ba000804 	addi	r8,r23,32
    7c9c:	b8c00615 	stw	r3,24(r23)
    7ca0:	90800517 	ldw	r2,20(r18)
    7ca4:	b8800715 	stw	r2,28(r23)
    7ca8:	003f1206 	br	78f4 <_realloc_r+0x204>
    7cac:	90c00417 	ldw	r3,16(r18)
    7cb0:	91000604 	addi	r4,r18,24
    7cb4:	ba000804 	addi	r8,r23,32
    7cb8:	b8c00615 	stw	r3,24(r23)
    7cbc:	90800517 	ldw	r2,20(r18)
    7cc0:	b8800715 	stw	r2,28(r23)
    7cc4:	003f3206 	br	7990 <_realloc_r+0x2a0>
    7cc8:	90c00417 	ldw	r3,16(r18)
    7ccc:	91000604 	addi	r4,r18,24
    7cd0:	b9c00804 	addi	r7,r23,32
    7cd4:	b8c00615 	stw	r3,24(r23)
    7cd8:	90800517 	ldw	r2,20(r18)
    7cdc:	b8800715 	stw	r2,28(r23)
    7ce0:	003fb906 	br	7bc8 <_realloc_r+0x4d8>

00007ce4 <__isinfd>:
    7ce4:	200d883a 	mov	r6,r4
    7ce8:	0109c83a 	sub	r4,zero,r4
    7cec:	2188b03a 	or	r4,r4,r6
    7cf0:	2008d7fa 	srli	r4,r4,31
    7cf4:	00a00034 	movhi	r2,32768
    7cf8:	10bfffc4 	addi	r2,r2,-1
    7cfc:	1144703a 	and	r2,r2,r5
    7d00:	2088b03a 	or	r4,r4,r2
    7d04:	009ffc34 	movhi	r2,32752
    7d08:	1105c83a 	sub	r2,r2,r4
    7d0c:	0087c83a 	sub	r3,zero,r2
    7d10:	10c4b03a 	or	r2,r2,r3
    7d14:	1004d7fa 	srli	r2,r2,31
    7d18:	00c00044 	movi	r3,1
    7d1c:	1885c83a 	sub	r2,r3,r2
    7d20:	f800283a 	ret

00007d24 <__isnand>:
    7d24:	200d883a 	mov	r6,r4
    7d28:	0109c83a 	sub	r4,zero,r4
    7d2c:	2188b03a 	or	r4,r4,r6
    7d30:	2008d7fa 	srli	r4,r4,31
    7d34:	00a00034 	movhi	r2,32768
    7d38:	10bfffc4 	addi	r2,r2,-1
    7d3c:	1144703a 	and	r2,r2,r5
    7d40:	2088b03a 	or	r4,r4,r2
    7d44:	009ffc34 	movhi	r2,32752
    7d48:	1105c83a 	sub	r2,r2,r4
    7d4c:	1004d7fa 	srli	r2,r2,31
    7d50:	f800283a 	ret

00007d54 <_sbrk_r>:
    7d54:	defffd04 	addi	sp,sp,-12
    7d58:	dc000015 	stw	r16,0(sp)
    7d5c:	04000074 	movhi	r16,1
    7d60:	84047b04 	addi	r16,r16,4588
    7d64:	dc400115 	stw	r17,4(sp)
    7d68:	80000015 	stw	zero,0(r16)
    7d6c:	2023883a 	mov	r17,r4
    7d70:	2809883a 	mov	r4,r5
    7d74:	dfc00215 	stw	ra,8(sp)
    7d78:	000b2540 	call	b254 <sbrk>
    7d7c:	1007883a 	mov	r3,r2
    7d80:	00bfffc4 	movi	r2,-1
    7d84:	18800626 	beq	r3,r2,7da0 <_sbrk_r+0x4c>
    7d88:	1805883a 	mov	r2,r3
    7d8c:	dfc00217 	ldw	ra,8(sp)
    7d90:	dc400117 	ldw	r17,4(sp)
    7d94:	dc000017 	ldw	r16,0(sp)
    7d98:	dec00304 	addi	sp,sp,12
    7d9c:	f800283a 	ret
    7da0:	80800017 	ldw	r2,0(r16)
    7da4:	103ff826 	beq	r2,zero,7d88 <_sbrk_r+0x34>
    7da8:	88800015 	stw	r2,0(r17)
    7dac:	1805883a 	mov	r2,r3
    7db0:	dfc00217 	ldw	ra,8(sp)
    7db4:	dc400117 	ldw	r17,4(sp)
    7db8:	dc000017 	ldw	r16,0(sp)
    7dbc:	dec00304 	addi	sp,sp,12
    7dc0:	f800283a 	ret

00007dc4 <__sclose>:
    7dc4:	2940038f 	ldh	r5,14(r5)
    7dc8:	000810c1 	jmpi	810c <_close_r>

00007dcc <__sseek>:
    7dcc:	defffe04 	addi	sp,sp,-8
    7dd0:	dc000015 	stw	r16,0(sp)
    7dd4:	2821883a 	mov	r16,r5
    7dd8:	2940038f 	ldh	r5,14(r5)
    7ddc:	dfc00115 	stw	ra,4(sp)
    7de0:	00083840 	call	8384 <_lseek_r>
    7de4:	1007883a 	mov	r3,r2
    7de8:	00bfffc4 	movi	r2,-1
    7dec:	18800926 	beq	r3,r2,7e14 <__sseek+0x48>
    7df0:	8080030b 	ldhu	r2,12(r16)
    7df4:	80c01415 	stw	r3,80(r16)
    7df8:	10840014 	ori	r2,r2,4096
    7dfc:	8080030d 	sth	r2,12(r16)
    7e00:	1805883a 	mov	r2,r3
    7e04:	dfc00117 	ldw	ra,4(sp)
    7e08:	dc000017 	ldw	r16,0(sp)
    7e0c:	dec00204 	addi	sp,sp,8
    7e10:	f800283a 	ret
    7e14:	8080030b 	ldhu	r2,12(r16)
    7e18:	10bbffcc 	andi	r2,r2,61439
    7e1c:	8080030d 	sth	r2,12(r16)
    7e20:	1805883a 	mov	r2,r3
    7e24:	dfc00117 	ldw	ra,4(sp)
    7e28:	dc000017 	ldw	r16,0(sp)
    7e2c:	dec00204 	addi	sp,sp,8
    7e30:	f800283a 	ret

00007e34 <__swrite>:
    7e34:	2880030b 	ldhu	r2,12(r5)
    7e38:	defffb04 	addi	sp,sp,-20
    7e3c:	dcc00315 	stw	r19,12(sp)
    7e40:	1080400c 	andi	r2,r2,256
    7e44:	dc800215 	stw	r18,8(sp)
    7e48:	dc400115 	stw	r17,4(sp)
    7e4c:	dc000015 	stw	r16,0(sp)
    7e50:	3027883a 	mov	r19,r6
    7e54:	3825883a 	mov	r18,r7
    7e58:	dfc00415 	stw	ra,16(sp)
    7e5c:	2821883a 	mov	r16,r5
    7e60:	000d883a 	mov	r6,zero
    7e64:	01c00084 	movi	r7,2
    7e68:	2023883a 	mov	r17,r4
    7e6c:	10000226 	beq	r2,zero,7e78 <__swrite+0x44>
    7e70:	2940038f 	ldh	r5,14(r5)
    7e74:	00083840 	call	8384 <_lseek_r>
    7e78:	8080030b 	ldhu	r2,12(r16)
    7e7c:	8140038f 	ldh	r5,14(r16)
    7e80:	8809883a 	mov	r4,r17
    7e84:	10bbffcc 	andi	r2,r2,61439
    7e88:	980d883a 	mov	r6,r19
    7e8c:	900f883a 	mov	r7,r18
    7e90:	8080030d 	sth	r2,12(r16)
    7e94:	dfc00417 	ldw	ra,16(sp)
    7e98:	dcc00317 	ldw	r19,12(sp)
    7e9c:	dc800217 	ldw	r18,8(sp)
    7ea0:	dc400117 	ldw	r17,4(sp)
    7ea4:	dc000017 	ldw	r16,0(sp)
    7ea8:	dec00504 	addi	sp,sp,20
    7eac:	0007fcc1 	jmpi	7fcc <_write_r>

00007eb0 <__sread>:
    7eb0:	defffe04 	addi	sp,sp,-8
    7eb4:	dc000015 	stw	r16,0(sp)
    7eb8:	2821883a 	mov	r16,r5
    7ebc:	2940038f 	ldh	r5,14(r5)
    7ec0:	dfc00115 	stw	ra,4(sp)
    7ec4:	00083fc0 	call	83fc <_read_r>
    7ec8:	1007883a 	mov	r3,r2
    7ecc:	10000816 	blt	r2,zero,7ef0 <__sread+0x40>
    7ed0:	80801417 	ldw	r2,80(r16)
    7ed4:	10c5883a 	add	r2,r2,r3
    7ed8:	80801415 	stw	r2,80(r16)
    7edc:	1805883a 	mov	r2,r3
    7ee0:	dfc00117 	ldw	ra,4(sp)
    7ee4:	dc000017 	ldw	r16,0(sp)
    7ee8:	dec00204 	addi	sp,sp,8
    7eec:	f800283a 	ret
    7ef0:	8080030b 	ldhu	r2,12(r16)
    7ef4:	10bbffcc 	andi	r2,r2,61439
    7ef8:	8080030d 	sth	r2,12(r16)
    7efc:	1805883a 	mov	r2,r3
    7f00:	dfc00117 	ldw	ra,4(sp)
    7f04:	dc000017 	ldw	r16,0(sp)
    7f08:	dec00204 	addi	sp,sp,8
    7f0c:	f800283a 	ret

00007f10 <strcmp>:
    7f10:	2144b03a 	or	r2,r4,r5
    7f14:	108000cc 	andi	r2,r2,3
    7f18:	10001d1e 	bne	r2,zero,7f90 <strcmp+0x80>
    7f1c:	200f883a 	mov	r7,r4
    7f20:	28800017 	ldw	r2,0(r5)
    7f24:	21000017 	ldw	r4,0(r4)
    7f28:	280d883a 	mov	r6,r5
    7f2c:	2080161e 	bne	r4,r2,7f88 <strcmp+0x78>
    7f30:	023fbff4 	movhi	r8,65279
    7f34:	423fbfc4 	addi	r8,r8,-257
    7f38:	2207883a 	add	r3,r4,r8
    7f3c:	01602074 	movhi	r5,32897
    7f40:	29602004 	addi	r5,r5,-32640
    7f44:	1946703a 	and	r3,r3,r5
    7f48:	0104303a 	nor	r2,zero,r4
    7f4c:	10c4703a 	and	r2,r2,r3
    7f50:	10001c1e 	bne	r2,zero,7fc4 <strcmp+0xb4>
    7f54:	4013883a 	mov	r9,r8
    7f58:	2811883a 	mov	r8,r5
    7f5c:	00000106 	br	7f64 <strcmp+0x54>
    7f60:	1800181e 	bne	r3,zero,7fc4 <strcmp+0xb4>
    7f64:	39c00104 	addi	r7,r7,4
    7f68:	39000017 	ldw	r4,0(r7)
    7f6c:	31800104 	addi	r6,r6,4
    7f70:	31400017 	ldw	r5,0(r6)
    7f74:	2245883a 	add	r2,r4,r9
    7f78:	1204703a 	and	r2,r2,r8
    7f7c:	0106303a 	nor	r3,zero,r4
    7f80:	1886703a 	and	r3,r3,r2
    7f84:	217ff626 	beq	r4,r5,7f60 <strcmp+0x50>
    7f88:	3809883a 	mov	r4,r7
    7f8c:	300b883a 	mov	r5,r6
    7f90:	20c00007 	ldb	r3,0(r4)
    7f94:	1800051e 	bne	r3,zero,7fac <strcmp+0x9c>
    7f98:	00000606 	br	7fb4 <strcmp+0xa4>
    7f9c:	21000044 	addi	r4,r4,1
    7fa0:	20c00007 	ldb	r3,0(r4)
    7fa4:	29400044 	addi	r5,r5,1
    7fa8:	18000226 	beq	r3,zero,7fb4 <strcmp+0xa4>
    7fac:	28800007 	ldb	r2,0(r5)
    7fb0:	18bffa26 	beq	r3,r2,7f9c <strcmp+0x8c>
    7fb4:	20c00003 	ldbu	r3,0(r4)
    7fb8:	28800003 	ldbu	r2,0(r5)
    7fbc:	1885c83a 	sub	r2,r3,r2
    7fc0:	f800283a 	ret
    7fc4:	0005883a 	mov	r2,zero
    7fc8:	f800283a 	ret

00007fcc <_write_r>:
    7fcc:	defffd04 	addi	sp,sp,-12
    7fd0:	dc000015 	stw	r16,0(sp)
    7fd4:	04000074 	movhi	r16,1
    7fd8:	84047b04 	addi	r16,r16,4588
    7fdc:	dc400115 	stw	r17,4(sp)
    7fe0:	80000015 	stw	zero,0(r16)
    7fe4:	2023883a 	mov	r17,r4
    7fe8:	2809883a 	mov	r4,r5
    7fec:	300b883a 	mov	r5,r6
    7ff0:	380d883a 	mov	r6,r7
    7ff4:	dfc00215 	stw	ra,8(sp)
    7ff8:	000b3100 	call	b310 <write>
    7ffc:	1007883a 	mov	r3,r2
    8000:	00bfffc4 	movi	r2,-1
    8004:	18800626 	beq	r3,r2,8020 <_write_r+0x54>
    8008:	1805883a 	mov	r2,r3
    800c:	dfc00217 	ldw	ra,8(sp)
    8010:	dc400117 	ldw	r17,4(sp)
    8014:	dc000017 	ldw	r16,0(sp)
    8018:	dec00304 	addi	sp,sp,12
    801c:	f800283a 	ret
    8020:	80800017 	ldw	r2,0(r16)
    8024:	103ff826 	beq	r2,zero,8008 <_write_r+0x3c>
    8028:	88800015 	stw	r2,0(r17)
    802c:	1805883a 	mov	r2,r3
    8030:	dfc00217 	ldw	ra,8(sp)
    8034:	dc400117 	ldw	r17,4(sp)
    8038:	dc000017 	ldw	r16,0(sp)
    803c:	dec00304 	addi	sp,sp,12
    8040:	f800283a 	ret

00008044 <_calloc_r>:
    8044:	defffe04 	addi	sp,sp,-8
    8048:	dc400015 	stw	r17,0(sp)
    804c:	2023883a 	mov	r17,r4
    8050:	2809883a 	mov	r4,r5
    8054:	300b883a 	mov	r5,r6
    8058:	dfc00115 	stw	ra,4(sp)
    805c:	0000e180 	call	e18 <__mulsi3>
    8060:	100b883a 	mov	r5,r2
    8064:	8809883a 	mov	r4,r17
    8068:	0005c280 	call	5c28 <_malloc_r>
    806c:	1023883a 	mov	r17,r2
    8070:	01c00904 	movi	r7,36
    8074:	10000d26 	beq	r2,zero,80ac <_calloc_r+0x68>
    8078:	10ffff17 	ldw	r3,-4(r2)
    807c:	1009883a 	mov	r4,r2
    8080:	00bfff04 	movi	r2,-4
    8084:	1886703a 	and	r3,r3,r2
    8088:	1887883a 	add	r3,r3,r2
    808c:	180d883a 	mov	r6,r3
    8090:	000b883a 	mov	r5,zero
    8094:	38c01736 	bltu	r7,r3,80f4 <_calloc_r+0xb0>
    8098:	008004c4 	movi	r2,19
    809c:	10c00836 	bltu	r2,r3,80c0 <_calloc_r+0x7c>
    80a0:	20000215 	stw	zero,8(r4)
    80a4:	20000015 	stw	zero,0(r4)
    80a8:	20000115 	stw	zero,4(r4)
    80ac:	8805883a 	mov	r2,r17
    80b0:	dfc00117 	ldw	ra,4(sp)
    80b4:	dc400017 	ldw	r17,0(sp)
    80b8:	dec00204 	addi	sp,sp,8
    80bc:	f800283a 	ret
    80c0:	008006c4 	movi	r2,27
    80c4:	88000015 	stw	zero,0(r17)
    80c8:	88000115 	stw	zero,4(r17)
    80cc:	89000204 	addi	r4,r17,8
    80d0:	10fff32e 	bgeu	r2,r3,80a0 <_calloc_r+0x5c>
    80d4:	88000215 	stw	zero,8(r17)
    80d8:	88000315 	stw	zero,12(r17)
    80dc:	89000404 	addi	r4,r17,16
    80e0:	19ffef1e 	bne	r3,r7,80a0 <_calloc_r+0x5c>
    80e4:	89000604 	addi	r4,r17,24
    80e8:	88000415 	stw	zero,16(r17)
    80ec:	88000515 	stw	zero,20(r17)
    80f0:	003feb06 	br	80a0 <_calloc_r+0x5c>
    80f4:	00065cc0 	call	65cc <memset>
    80f8:	8805883a 	mov	r2,r17
    80fc:	dfc00117 	ldw	ra,4(sp)
    8100:	dc400017 	ldw	r17,0(sp)
    8104:	dec00204 	addi	sp,sp,8
    8108:	f800283a 	ret

0000810c <_close_r>:
    810c:	defffd04 	addi	sp,sp,-12
    8110:	dc000015 	stw	r16,0(sp)
    8114:	04000074 	movhi	r16,1
    8118:	84047b04 	addi	r16,r16,4588
    811c:	dc400115 	stw	r17,4(sp)
    8120:	80000015 	stw	zero,0(r16)
    8124:	2023883a 	mov	r17,r4
    8128:	2809883a 	mov	r4,r5
    812c:	dfc00215 	stw	ra,8(sp)
    8130:	000a9240 	call	a924 <close>
    8134:	1007883a 	mov	r3,r2
    8138:	00bfffc4 	movi	r2,-1
    813c:	18800626 	beq	r3,r2,8158 <_close_r+0x4c>
    8140:	1805883a 	mov	r2,r3
    8144:	dfc00217 	ldw	ra,8(sp)
    8148:	dc400117 	ldw	r17,4(sp)
    814c:	dc000017 	ldw	r16,0(sp)
    8150:	dec00304 	addi	sp,sp,12
    8154:	f800283a 	ret
    8158:	80800017 	ldw	r2,0(r16)
    815c:	103ff826 	beq	r2,zero,8140 <_close_r+0x34>
    8160:	88800015 	stw	r2,0(r17)
    8164:	1805883a 	mov	r2,r3
    8168:	dfc00217 	ldw	ra,8(sp)
    816c:	dc400117 	ldw	r17,4(sp)
    8170:	dc000017 	ldw	r16,0(sp)
    8174:	dec00304 	addi	sp,sp,12
    8178:	f800283a 	ret

0000817c <_fclose_r>:
    817c:	defffc04 	addi	sp,sp,-16
    8180:	dc400115 	stw	r17,4(sp)
    8184:	dc000015 	stw	r16,0(sp)
    8188:	dfc00315 	stw	ra,12(sp)
    818c:	dc800215 	stw	r18,8(sp)
    8190:	2821883a 	mov	r16,r5
    8194:	2023883a 	mov	r17,r4
    8198:	28002926 	beq	r5,zero,8240 <_fclose_r+0xc4>
    819c:	0004cd80 	call	4cd8 <__sfp_lock_acquire>
    81a0:	88000226 	beq	r17,zero,81ac <_fclose_r+0x30>
    81a4:	88800e17 	ldw	r2,56(r17)
    81a8:	10002d26 	beq	r2,zero,8260 <_fclose_r+0xe4>
    81ac:	8080030f 	ldh	r2,12(r16)
    81b0:	10002226 	beq	r2,zero,823c <_fclose_r+0xc0>
    81b4:	8809883a 	mov	r4,r17
    81b8:	800b883a 	mov	r5,r16
    81bc:	0004a500 	call	4a50 <_fflush_r>
    81c0:	1025883a 	mov	r18,r2
    81c4:	80800b17 	ldw	r2,44(r16)
    81c8:	10000426 	beq	r2,zero,81dc <_fclose_r+0x60>
    81cc:	81400717 	ldw	r5,28(r16)
    81d0:	8809883a 	mov	r4,r17
    81d4:	103ee83a 	callr	r2
    81d8:	10002a16 	blt	r2,zero,8284 <_fclose_r+0x108>
    81dc:	8080030b 	ldhu	r2,12(r16)
    81e0:	1080200c 	andi	r2,r2,128
    81e4:	1000231e 	bne	r2,zero,8274 <_fclose_r+0xf8>
    81e8:	81400c17 	ldw	r5,48(r16)
    81ec:	28000526 	beq	r5,zero,8204 <_fclose_r+0x88>
    81f0:	80801004 	addi	r2,r16,64
    81f4:	28800226 	beq	r5,r2,8200 <_fclose_r+0x84>
    81f8:	8809883a 	mov	r4,r17
    81fc:	00050a00 	call	50a0 <_free_r>
    8200:	80000c15 	stw	zero,48(r16)
    8204:	81401117 	ldw	r5,68(r16)
    8208:	28000326 	beq	r5,zero,8218 <_fclose_r+0x9c>
    820c:	8809883a 	mov	r4,r17
    8210:	00050a00 	call	50a0 <_free_r>
    8214:	80001115 	stw	zero,68(r16)
    8218:	8000030d 	sth	zero,12(r16)
    821c:	0004cdc0 	call	4cdc <__sfp_lock_release>
    8220:	9005883a 	mov	r2,r18
    8224:	dfc00317 	ldw	ra,12(sp)
    8228:	dc800217 	ldw	r18,8(sp)
    822c:	dc400117 	ldw	r17,4(sp)
    8230:	dc000017 	ldw	r16,0(sp)
    8234:	dec00404 	addi	sp,sp,16
    8238:	f800283a 	ret
    823c:	0004cdc0 	call	4cdc <__sfp_lock_release>
    8240:	0025883a 	mov	r18,zero
    8244:	9005883a 	mov	r2,r18
    8248:	dfc00317 	ldw	ra,12(sp)
    824c:	dc800217 	ldw	r18,8(sp)
    8250:	dc400117 	ldw	r17,4(sp)
    8254:	dc000017 	ldw	r16,0(sp)
    8258:	dec00404 	addi	sp,sp,16
    825c:	f800283a 	ret
    8260:	8809883a 	mov	r4,r17
    8264:	0004ce80 	call	4ce8 <__sinit>
    8268:	8080030f 	ldh	r2,12(r16)
    826c:	103fd11e 	bne	r2,zero,81b4 <_fclose_r+0x38>
    8270:	003ff206 	br	823c <_fclose_r+0xc0>
    8274:	81400417 	ldw	r5,16(r16)
    8278:	8809883a 	mov	r4,r17
    827c:	00050a00 	call	50a0 <_free_r>
    8280:	003fd906 	br	81e8 <_fclose_r+0x6c>
    8284:	04bfffc4 	movi	r18,-1
    8288:	003fd406 	br	81dc <_fclose_r+0x60>

0000828c <fclose>:
    828c:	00800074 	movhi	r2,1
    8290:	10bdce04 	addi	r2,r2,-2248
    8294:	200b883a 	mov	r5,r4
    8298:	11000017 	ldw	r4,0(r2)
    829c:	000817c1 	jmpi	817c <_fclose_r>

000082a0 <_fstat_r>:
    82a0:	defffd04 	addi	sp,sp,-12
    82a4:	dc000015 	stw	r16,0(sp)
    82a8:	04000074 	movhi	r16,1
    82ac:	84047b04 	addi	r16,r16,4588
    82b0:	dc400115 	stw	r17,4(sp)
    82b4:	80000015 	stw	zero,0(r16)
    82b8:	2023883a 	mov	r17,r4
    82bc:	2809883a 	mov	r4,r5
    82c0:	300b883a 	mov	r5,r6
    82c4:	dfc00215 	stw	ra,8(sp)
    82c8:	000ab100 	call	ab10 <fstat>
    82cc:	1007883a 	mov	r3,r2
    82d0:	00bfffc4 	movi	r2,-1
    82d4:	18800626 	beq	r3,r2,82f0 <_fstat_r+0x50>
    82d8:	1805883a 	mov	r2,r3
    82dc:	dfc00217 	ldw	ra,8(sp)
    82e0:	dc400117 	ldw	r17,4(sp)
    82e4:	dc000017 	ldw	r16,0(sp)
    82e8:	dec00304 	addi	sp,sp,12
    82ec:	f800283a 	ret
    82f0:	80800017 	ldw	r2,0(r16)
    82f4:	103ff826 	beq	r2,zero,82d8 <_fstat_r+0x38>
    82f8:	88800015 	stw	r2,0(r17)
    82fc:	1805883a 	mov	r2,r3
    8300:	dfc00217 	ldw	ra,8(sp)
    8304:	dc400117 	ldw	r17,4(sp)
    8308:	dc000017 	ldw	r16,0(sp)
    830c:	dec00304 	addi	sp,sp,12
    8310:	f800283a 	ret

00008314 <_isatty_r>:
    8314:	defffd04 	addi	sp,sp,-12
    8318:	dc000015 	stw	r16,0(sp)
    831c:	04000074 	movhi	r16,1
    8320:	84047b04 	addi	r16,r16,4588
    8324:	dc400115 	stw	r17,4(sp)
    8328:	80000015 	stw	zero,0(r16)
    832c:	2023883a 	mov	r17,r4
    8330:	2809883a 	mov	r4,r5
    8334:	dfc00215 	stw	ra,8(sp)
    8338:	000ac480 	call	ac48 <isatty>
    833c:	1007883a 	mov	r3,r2
    8340:	00bfffc4 	movi	r2,-1
    8344:	18800626 	beq	r3,r2,8360 <_isatty_r+0x4c>
    8348:	1805883a 	mov	r2,r3
    834c:	dfc00217 	ldw	ra,8(sp)
    8350:	dc400117 	ldw	r17,4(sp)
    8354:	dc000017 	ldw	r16,0(sp)
    8358:	dec00304 	addi	sp,sp,12
    835c:	f800283a 	ret
    8360:	80800017 	ldw	r2,0(r16)
    8364:	103ff826 	beq	r2,zero,8348 <_isatty_r+0x34>
    8368:	88800015 	stw	r2,0(r17)
    836c:	1805883a 	mov	r2,r3
    8370:	dfc00217 	ldw	ra,8(sp)
    8374:	dc400117 	ldw	r17,4(sp)
    8378:	dc000017 	ldw	r16,0(sp)
    837c:	dec00304 	addi	sp,sp,12
    8380:	f800283a 	ret

00008384 <_lseek_r>:
    8384:	defffd04 	addi	sp,sp,-12
    8388:	dc000015 	stw	r16,0(sp)
    838c:	04000074 	movhi	r16,1
    8390:	84047b04 	addi	r16,r16,4588
    8394:	dc400115 	stw	r17,4(sp)
    8398:	80000015 	stw	zero,0(r16)
    839c:	2023883a 	mov	r17,r4
    83a0:	2809883a 	mov	r4,r5
    83a4:	300b883a 	mov	r5,r6
    83a8:	380d883a 	mov	r6,r7
    83ac:	dfc00215 	stw	ra,8(sp)
    83b0:	000ae580 	call	ae58 <lseek>
    83b4:	1007883a 	mov	r3,r2
    83b8:	00bfffc4 	movi	r2,-1
    83bc:	18800626 	beq	r3,r2,83d8 <_lseek_r+0x54>
    83c0:	1805883a 	mov	r2,r3
    83c4:	dfc00217 	ldw	ra,8(sp)
    83c8:	dc400117 	ldw	r17,4(sp)
    83cc:	dc000017 	ldw	r16,0(sp)
    83d0:	dec00304 	addi	sp,sp,12
    83d4:	f800283a 	ret
    83d8:	80800017 	ldw	r2,0(r16)
    83dc:	103ff826 	beq	r2,zero,83c0 <_lseek_r+0x3c>
    83e0:	88800015 	stw	r2,0(r17)
    83e4:	1805883a 	mov	r2,r3
    83e8:	dfc00217 	ldw	ra,8(sp)
    83ec:	dc400117 	ldw	r17,4(sp)
    83f0:	dc000017 	ldw	r16,0(sp)
    83f4:	dec00304 	addi	sp,sp,12
    83f8:	f800283a 	ret

000083fc <_read_r>:
    83fc:	defffd04 	addi	sp,sp,-12
    8400:	dc000015 	stw	r16,0(sp)
    8404:	04000074 	movhi	r16,1
    8408:	84047b04 	addi	r16,r16,4588
    840c:	dc400115 	stw	r17,4(sp)
    8410:	80000015 	stw	zero,0(r16)
    8414:	2023883a 	mov	r17,r4
    8418:	2809883a 	mov	r4,r5
    841c:	300b883a 	mov	r5,r6
    8420:	380d883a 	mov	r6,r7
    8424:	dfc00215 	stw	ra,8(sp)
    8428:	000b0580 	call	b058 <read>
    842c:	1007883a 	mov	r3,r2
    8430:	00bfffc4 	movi	r2,-1
    8434:	18800626 	beq	r3,r2,8450 <_read_r+0x54>
    8438:	1805883a 	mov	r2,r3
    843c:	dfc00217 	ldw	ra,8(sp)
    8440:	dc400117 	ldw	r17,4(sp)
    8444:	dc000017 	ldw	r16,0(sp)
    8448:	dec00304 	addi	sp,sp,12
    844c:	f800283a 	ret
    8450:	80800017 	ldw	r2,0(r16)
    8454:	103ff826 	beq	r2,zero,8438 <_read_r+0x3c>
    8458:	88800015 	stw	r2,0(r17)
    845c:	1805883a 	mov	r2,r3
    8460:	dfc00217 	ldw	ra,8(sp)
    8464:	dc400117 	ldw	r17,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00304 	addi	sp,sp,12
    8470:	f800283a 	ret

00008474 <__udivdi3>:
    8474:	defff104 	addi	sp,sp,-60
    8478:	0015883a 	mov	r10,zero
    847c:	2005883a 	mov	r2,r4
    8480:	3011883a 	mov	r8,r6
    8484:	df000d15 	stw	fp,52(sp)
    8488:	dd400a15 	stw	r21,40(sp)
    848c:	dcc00815 	stw	r19,32(sp)
    8490:	dfc00e15 	stw	ra,56(sp)
    8494:	ddc00c15 	stw	r23,48(sp)
    8498:	dd800b15 	stw	r22,44(sp)
    849c:	dd000915 	stw	r20,36(sp)
    84a0:	dc800715 	stw	r18,28(sp)
    84a4:	dc400615 	stw	r17,24(sp)
    84a8:	dc000515 	stw	r16,20(sp)
    84ac:	da800315 	stw	r10,12(sp)
    84b0:	4027883a 	mov	r19,r8
    84b4:	1039883a 	mov	fp,r2
    84b8:	282b883a 	mov	r21,r5
    84bc:	da800415 	stw	r10,16(sp)
    84c0:	3800401e 	bne	r7,zero,85c4 <__udivdi3+0x150>
    84c4:	2a006536 	bltu	r5,r8,865c <__udivdi3+0x1e8>
    84c8:	4000b526 	beq	r8,zero,87a0 <__udivdi3+0x32c>
    84cc:	00bfffd4 	movui	r2,65535
    84d0:	14c0ad36 	bltu	r2,r19,8788 <__udivdi3+0x314>
    84d4:	00803fc4 	movi	r2,255
    84d8:	14c15e36 	bltu	r2,r19,8a54 <__udivdi3+0x5e0>
    84dc:	000b883a 	mov	r5,zero
    84e0:	0005883a 	mov	r2,zero
    84e4:	9884d83a 	srl	r2,r19,r2
    84e8:	01000074 	movhi	r4,1
    84ec:	2136fc04 	addi	r4,r4,-9232
    84f0:	01800804 	movi	r6,32
    84f4:	1105883a 	add	r2,r2,r4
    84f8:	10c00003 	ldbu	r3,0(r2)
    84fc:	28c7883a 	add	r3,r5,r3
    8500:	30e9c83a 	sub	r20,r6,r3
    8504:	a0010a1e 	bne	r20,zero,8930 <__udivdi3+0x4bc>
    8508:	982ed43a 	srli	r23,r19,16
    850c:	acebc83a 	sub	r21,r21,r19
    8510:	9dbfffcc 	andi	r22,r19,65535
    8514:	05000044 	movi	r20,1
    8518:	a809883a 	mov	r4,r21
    851c:	b80b883a 	mov	r5,r23
    8520:	0000e080 	call	e08 <__udivsi3>
    8524:	100b883a 	mov	r5,r2
    8528:	b009883a 	mov	r4,r22
    852c:	1021883a 	mov	r16,r2
    8530:	0000e180 	call	e18 <__mulsi3>
    8534:	a809883a 	mov	r4,r21
    8538:	b80b883a 	mov	r5,r23
    853c:	1023883a 	mov	r17,r2
    8540:	0000e100 	call	e10 <__umodsi3>
    8544:	1004943a 	slli	r2,r2,16
    8548:	e006d43a 	srli	r3,fp,16
    854c:	10c4b03a 	or	r2,r2,r3
    8550:	1440042e 	bgeu	r2,r17,8564 <__udivdi3+0xf0>
    8554:	14c5883a 	add	r2,r2,r19
    8558:	843fffc4 	addi	r16,r16,-1
    855c:	14c00136 	bltu	r2,r19,8564 <__udivdi3+0xf0>
    8560:	14415c36 	bltu	r2,r17,8ad4 <__udivdi3+0x660>
    8564:	1463c83a 	sub	r17,r2,r17
    8568:	8809883a 	mov	r4,r17
    856c:	b80b883a 	mov	r5,r23
    8570:	0000e080 	call	e08 <__udivsi3>
    8574:	100b883a 	mov	r5,r2
    8578:	b009883a 	mov	r4,r22
    857c:	102b883a 	mov	r21,r2
    8580:	0000e180 	call	e18 <__mulsi3>
    8584:	8809883a 	mov	r4,r17
    8588:	b80b883a 	mov	r5,r23
    858c:	1025883a 	mov	r18,r2
    8590:	0000e100 	call	e10 <__umodsi3>
    8594:	1004943a 	slli	r2,r2,16
    8598:	e0ffffcc 	andi	r3,fp,65535
    859c:	10c4b03a 	or	r2,r2,r3
    85a0:	1480042e 	bgeu	r2,r18,85b4 <__udivdi3+0x140>
    85a4:	9885883a 	add	r2,r19,r2
    85a8:	ad7fffc4 	addi	r21,r21,-1
    85ac:	14c00136 	bltu	r2,r19,85b4 <__udivdi3+0x140>
    85b0:	14813c36 	bltu	r2,r18,8aa4 <__udivdi3+0x630>
    85b4:	8004943a 	slli	r2,r16,16
    85b8:	a009883a 	mov	r4,r20
    85bc:	a884b03a 	or	r2,r21,r2
    85c0:	00001506 	br	8618 <__udivdi3+0x1a4>
    85c4:	380d883a 	mov	r6,r7
    85c8:	29c06c36 	bltu	r5,r7,877c <__udivdi3+0x308>
    85cc:	00bfffd4 	movui	r2,65535
    85d0:	11c06436 	bltu	r2,r7,8764 <__udivdi3+0x2f0>
    85d4:	00803fc4 	movi	r2,255
    85d8:	11c11836 	bltu	r2,r7,8a3c <__udivdi3+0x5c8>
    85dc:	000b883a 	mov	r5,zero
    85e0:	0005883a 	mov	r2,zero
    85e4:	3084d83a 	srl	r2,r6,r2
    85e8:	01000074 	movhi	r4,1
    85ec:	2136fc04 	addi	r4,r4,-9232
    85f0:	01c00804 	movi	r7,32
    85f4:	1105883a 	add	r2,r2,r4
    85f8:	10c00003 	ldbu	r3,0(r2)
    85fc:	28c7883a 	add	r3,r5,r3
    8600:	38edc83a 	sub	r22,r7,r3
    8604:	b000731e 	bne	r22,zero,87d4 <__udivdi3+0x360>
    8608:	35400136 	bltu	r6,r21,8610 <__udivdi3+0x19c>
    860c:	e4c05b36 	bltu	fp,r19,877c <__udivdi3+0x308>
    8610:	00800044 	movi	r2,1
    8614:	0009883a 	mov	r4,zero
    8618:	d8800315 	stw	r2,12(sp)
    861c:	d9400317 	ldw	r5,12(sp)
    8620:	2007883a 	mov	r3,r4
    8624:	d9000415 	stw	r4,16(sp)
    8628:	2805883a 	mov	r2,r5
    862c:	dfc00e17 	ldw	ra,56(sp)
    8630:	df000d17 	ldw	fp,52(sp)
    8634:	ddc00c17 	ldw	r23,48(sp)
    8638:	dd800b17 	ldw	r22,44(sp)
    863c:	dd400a17 	ldw	r21,40(sp)
    8640:	dd000917 	ldw	r20,36(sp)
    8644:	dcc00817 	ldw	r19,32(sp)
    8648:	dc800717 	ldw	r18,28(sp)
    864c:	dc400617 	ldw	r17,24(sp)
    8650:	dc000517 	ldw	r16,20(sp)
    8654:	dec00f04 	addi	sp,sp,60
    8658:	f800283a 	ret
    865c:	00bfffd4 	movui	r2,65535
    8660:	12005636 	bltu	r2,r8,87bc <__udivdi3+0x348>
    8664:	00803fc4 	movi	r2,255
    8668:	12010036 	bltu	r2,r8,8a6c <__udivdi3+0x5f8>
    866c:	000b883a 	mov	r5,zero
    8670:	0005883a 	mov	r2,zero
    8674:	9884d83a 	srl	r2,r19,r2
    8678:	01000074 	movhi	r4,1
    867c:	2136fc04 	addi	r4,r4,-9232
    8680:	01800804 	movi	r6,32
    8684:	1105883a 	add	r2,r2,r4
    8688:	10c00003 	ldbu	r3,0(r2)
    868c:	28c7883a 	add	r3,r5,r3
    8690:	30cbc83a 	sub	r5,r6,r3
    8694:	28000626 	beq	r5,zero,86b0 <__udivdi3+0x23c>
    8698:	3145c83a 	sub	r2,r6,r5
    869c:	e084d83a 	srl	r2,fp,r2
    86a0:	a946983a 	sll	r3,r21,r5
    86a4:	e178983a 	sll	fp,fp,r5
    86a8:	9966983a 	sll	r19,r19,r5
    86ac:	18aab03a 	or	r21,r3,r2
    86b0:	982ed43a 	srli	r23,r19,16
    86b4:	a809883a 	mov	r4,r21
    86b8:	9cbfffcc 	andi	r18,r19,65535
    86bc:	b80b883a 	mov	r5,r23
    86c0:	0000e080 	call	e08 <__udivsi3>
    86c4:	100b883a 	mov	r5,r2
    86c8:	9009883a 	mov	r4,r18
    86cc:	1021883a 	mov	r16,r2
    86d0:	0000e180 	call	e18 <__mulsi3>
    86d4:	a809883a 	mov	r4,r21
    86d8:	b80b883a 	mov	r5,r23
    86dc:	1023883a 	mov	r17,r2
    86e0:	0000e100 	call	e10 <__umodsi3>
    86e4:	1004943a 	slli	r2,r2,16
    86e8:	e006d43a 	srli	r3,fp,16
    86ec:	10c4b03a 	or	r2,r2,r3
    86f0:	1440042e 	bgeu	r2,r17,8704 <__udivdi3+0x290>
    86f4:	14c5883a 	add	r2,r2,r19
    86f8:	843fffc4 	addi	r16,r16,-1
    86fc:	14c00136 	bltu	r2,r19,8704 <__udivdi3+0x290>
    8700:	1440ea36 	bltu	r2,r17,8aac <__udivdi3+0x638>
    8704:	1463c83a 	sub	r17,r2,r17
    8708:	8809883a 	mov	r4,r17
    870c:	b80b883a 	mov	r5,r23
    8710:	0000e080 	call	e08 <__udivsi3>
    8714:	100b883a 	mov	r5,r2
    8718:	9009883a 	mov	r4,r18
    871c:	102b883a 	mov	r21,r2
    8720:	0000e180 	call	e18 <__mulsi3>
    8724:	8809883a 	mov	r4,r17
    8728:	b80b883a 	mov	r5,r23
    872c:	1025883a 	mov	r18,r2
    8730:	0000e100 	call	e10 <__umodsi3>
    8734:	1004943a 	slli	r2,r2,16
    8738:	e0ffffcc 	andi	r3,fp,65535
    873c:	10c4b03a 	or	r2,r2,r3
    8740:	1480042e 	bgeu	r2,r18,8754 <__udivdi3+0x2e0>
    8744:	9885883a 	add	r2,r19,r2
    8748:	ad7fffc4 	addi	r21,r21,-1
    874c:	14c00136 	bltu	r2,r19,8754 <__udivdi3+0x2e0>
    8750:	1480d936 	bltu	r2,r18,8ab8 <__udivdi3+0x644>
    8754:	8004943a 	slli	r2,r16,16
    8758:	0009883a 	mov	r4,zero
    875c:	a884b03a 	or	r2,r21,r2
    8760:	003fad06 	br	8618 <__udivdi3+0x1a4>
    8764:	00804034 	movhi	r2,256
    8768:	10bfffc4 	addi	r2,r2,-1
    876c:	11c0b636 	bltu	r2,r7,8a48 <__udivdi3+0x5d4>
    8770:	01400404 	movi	r5,16
    8774:	2805883a 	mov	r2,r5
    8778:	003f9a06 	br	85e4 <__udivdi3+0x170>
    877c:	0005883a 	mov	r2,zero
    8780:	0009883a 	mov	r4,zero
    8784:	003fa406 	br	8618 <__udivdi3+0x1a4>
    8788:	00804034 	movhi	r2,256
    878c:	10bfffc4 	addi	r2,r2,-1
    8790:	14c0b336 	bltu	r2,r19,8a60 <__udivdi3+0x5ec>
    8794:	01400404 	movi	r5,16
    8798:	2805883a 	mov	r2,r5
    879c:	003f5106 	br	84e4 <__udivdi3+0x70>
    87a0:	01000044 	movi	r4,1
    87a4:	000b883a 	mov	r5,zero
    87a8:	0000e080 	call	e08 <__udivsi3>
    87ac:	1027883a 	mov	r19,r2
    87b0:	00bfffd4 	movui	r2,65535
    87b4:	14fff436 	bltu	r2,r19,8788 <__udivdi3+0x314>
    87b8:	003f4606 	br	84d4 <__udivdi3+0x60>
    87bc:	00804034 	movhi	r2,256
    87c0:	10bfffc4 	addi	r2,r2,-1
    87c4:	1200ac36 	bltu	r2,r8,8a78 <__udivdi3+0x604>
    87c8:	01400404 	movi	r5,16
    87cc:	2805883a 	mov	r2,r5
    87d0:	003fa806 	br	8674 <__udivdi3+0x200>
    87d4:	3d85c83a 	sub	r2,r7,r22
    87d8:	3588983a 	sll	r4,r6,r22
    87dc:	9886d83a 	srl	r3,r19,r2
    87e0:	a8a2d83a 	srl	r17,r21,r2
    87e4:	e084d83a 	srl	r2,fp,r2
    87e8:	20eeb03a 	or	r23,r4,r3
    87ec:	b824d43a 	srli	r18,r23,16
    87f0:	ad86983a 	sll	r3,r21,r22
    87f4:	8809883a 	mov	r4,r17
    87f8:	900b883a 	mov	r5,r18
    87fc:	1886b03a 	or	r3,r3,r2
    8800:	d8c00115 	stw	r3,4(sp)
    8804:	bc3fffcc 	andi	r16,r23,65535
    8808:	0000e080 	call	e08 <__udivsi3>
    880c:	100b883a 	mov	r5,r2
    8810:	8009883a 	mov	r4,r16
    8814:	1029883a 	mov	r20,r2
    8818:	0000e180 	call	e18 <__mulsi3>
    881c:	900b883a 	mov	r5,r18
    8820:	8809883a 	mov	r4,r17
    8824:	102b883a 	mov	r21,r2
    8828:	0000e100 	call	e10 <__umodsi3>
    882c:	d9400117 	ldw	r5,4(sp)
    8830:	1004943a 	slli	r2,r2,16
    8834:	9da6983a 	sll	r19,r19,r22
    8838:	2806d43a 	srli	r3,r5,16
    883c:	10c4b03a 	or	r2,r2,r3
    8840:	1540032e 	bgeu	r2,r21,8850 <__udivdi3+0x3dc>
    8844:	15c5883a 	add	r2,r2,r23
    8848:	a53fffc4 	addi	r20,r20,-1
    884c:	15c0912e 	bgeu	r2,r23,8a94 <__udivdi3+0x620>
    8850:	1563c83a 	sub	r17,r2,r21
    8854:	8809883a 	mov	r4,r17
    8858:	900b883a 	mov	r5,r18
    885c:	0000e080 	call	e08 <__udivsi3>
    8860:	100b883a 	mov	r5,r2
    8864:	8009883a 	mov	r4,r16
    8868:	102b883a 	mov	r21,r2
    886c:	0000e180 	call	e18 <__mulsi3>
    8870:	8809883a 	mov	r4,r17
    8874:	900b883a 	mov	r5,r18
    8878:	1021883a 	mov	r16,r2
    887c:	0000e100 	call	e10 <__umodsi3>
    8880:	da800117 	ldw	r10,4(sp)
    8884:	1004943a 	slli	r2,r2,16
    8888:	50ffffcc 	andi	r3,r10,65535
    888c:	10c6b03a 	or	r3,r2,r3
    8890:	1c00032e 	bgeu	r3,r16,88a0 <__udivdi3+0x42c>
    8894:	1dc7883a 	add	r3,r3,r23
    8898:	ad7fffc4 	addi	r21,r21,-1
    889c:	1dc0792e 	bgeu	r3,r23,8a84 <__udivdi3+0x610>
    88a0:	a004943a 	slli	r2,r20,16
    88a4:	982ed43a 	srli	r23,r19,16
    88a8:	9cffffcc 	andi	r19,r19,65535
    88ac:	a8a4b03a 	or	r18,r21,r2
    88b0:	947fffcc 	andi	r17,r18,65535
    88b4:	902ad43a 	srli	r21,r18,16
    88b8:	8809883a 	mov	r4,r17
    88bc:	980b883a 	mov	r5,r19
    88c0:	1c21c83a 	sub	r16,r3,r16
    88c4:	0000e180 	call	e18 <__mulsi3>
    88c8:	8809883a 	mov	r4,r17
    88cc:	b80b883a 	mov	r5,r23
    88d0:	1029883a 	mov	r20,r2
    88d4:	0000e180 	call	e18 <__mulsi3>
    88d8:	980b883a 	mov	r5,r19
    88dc:	a809883a 	mov	r4,r21
    88e0:	1023883a 	mov	r17,r2
    88e4:	0000e180 	call	e18 <__mulsi3>
    88e8:	a809883a 	mov	r4,r21
    88ec:	b80b883a 	mov	r5,r23
    88f0:	1027883a 	mov	r19,r2
    88f4:	0000e180 	call	e18 <__mulsi3>
    88f8:	1009883a 	mov	r4,r2
    88fc:	a004d43a 	srli	r2,r20,16
    8900:	8ce3883a 	add	r17,r17,r19
    8904:	1447883a 	add	r3,r2,r17
    8908:	1cc0022e 	bgeu	r3,r19,8914 <__udivdi3+0x4a0>
    890c:	00800074 	movhi	r2,1
    8910:	2089883a 	add	r4,r4,r2
    8914:	1804d43a 	srli	r2,r3,16
    8918:	2085883a 	add	r2,r4,r2
    891c:	80804436 	bltu	r16,r2,8a30 <__udivdi3+0x5bc>
    8920:	80803e26 	beq	r16,r2,8a1c <__udivdi3+0x5a8>
    8924:	9005883a 	mov	r2,r18
    8928:	0009883a 	mov	r4,zero
    892c:	003f3a06 	br	8618 <__udivdi3+0x1a4>
    8930:	9d26983a 	sll	r19,r19,r20
    8934:	3505c83a 	sub	r2,r6,r20
    8938:	a8a2d83a 	srl	r17,r21,r2
    893c:	982ed43a 	srli	r23,r19,16
    8940:	e084d83a 	srl	r2,fp,r2
    8944:	ad06983a 	sll	r3,r21,r20
    8948:	8809883a 	mov	r4,r17
    894c:	b80b883a 	mov	r5,r23
    8950:	1886b03a 	or	r3,r3,r2
    8954:	d8c00015 	stw	r3,0(sp)
    8958:	9dbfffcc 	andi	r22,r19,65535
    895c:	0000e080 	call	e08 <__udivsi3>
    8960:	100b883a 	mov	r5,r2
    8964:	b009883a 	mov	r4,r22
    8968:	d8800215 	stw	r2,8(sp)
    896c:	0000e180 	call	e18 <__mulsi3>
    8970:	8809883a 	mov	r4,r17
    8974:	b80b883a 	mov	r5,r23
    8978:	102b883a 	mov	r21,r2
    897c:	0000e100 	call	e10 <__umodsi3>
    8980:	d9000017 	ldw	r4,0(sp)
    8984:	1004943a 	slli	r2,r2,16
    8988:	2006d43a 	srli	r3,r4,16
    898c:	10c4b03a 	or	r2,r2,r3
    8990:	1540052e 	bgeu	r2,r21,89a8 <__udivdi3+0x534>
    8994:	d9400217 	ldw	r5,8(sp)
    8998:	14c5883a 	add	r2,r2,r19
    899c:	297fffc4 	addi	r5,r5,-1
    89a0:	d9400215 	stw	r5,8(sp)
    89a4:	14c0462e 	bgeu	r2,r19,8ac0 <__udivdi3+0x64c>
    89a8:	1563c83a 	sub	r17,r2,r21
    89ac:	8809883a 	mov	r4,r17
    89b0:	b80b883a 	mov	r5,r23
    89b4:	0000e080 	call	e08 <__udivsi3>
    89b8:	100b883a 	mov	r5,r2
    89bc:	b009883a 	mov	r4,r22
    89c0:	1025883a 	mov	r18,r2
    89c4:	0000e180 	call	e18 <__mulsi3>
    89c8:	8809883a 	mov	r4,r17
    89cc:	b80b883a 	mov	r5,r23
    89d0:	1021883a 	mov	r16,r2
    89d4:	0000e100 	call	e10 <__umodsi3>
    89d8:	da800017 	ldw	r10,0(sp)
    89dc:	1004943a 	slli	r2,r2,16
    89e0:	50ffffcc 	andi	r3,r10,65535
    89e4:	10c6b03a 	or	r3,r2,r3
    89e8:	1c00062e 	bgeu	r3,r16,8a04 <__udivdi3+0x590>
    89ec:	1cc7883a 	add	r3,r3,r19
    89f0:	94bfffc4 	addi	r18,r18,-1
    89f4:	1cc00336 	bltu	r3,r19,8a04 <__udivdi3+0x590>
    89f8:	1c00022e 	bgeu	r3,r16,8a04 <__udivdi3+0x590>
    89fc:	94bfffc4 	addi	r18,r18,-1
    8a00:	1cc7883a 	add	r3,r3,r19
    8a04:	d9000217 	ldw	r4,8(sp)
    8a08:	e538983a 	sll	fp,fp,r20
    8a0c:	1c2bc83a 	sub	r21,r3,r16
    8a10:	2004943a 	slli	r2,r4,16
    8a14:	90a8b03a 	or	r20,r18,r2
    8a18:	003ebf06 	br	8518 <__udivdi3+0xa4>
    8a1c:	1804943a 	slli	r2,r3,16
    8a20:	e588983a 	sll	r4,fp,r22
    8a24:	a0ffffcc 	andi	r3,r20,65535
    8a28:	10c5883a 	add	r2,r2,r3
    8a2c:	20bfbd2e 	bgeu	r4,r2,8924 <__udivdi3+0x4b0>
    8a30:	90bfffc4 	addi	r2,r18,-1
    8a34:	0009883a 	mov	r4,zero
    8a38:	003ef706 	br	8618 <__udivdi3+0x1a4>
    8a3c:	01400204 	movi	r5,8
    8a40:	2805883a 	mov	r2,r5
    8a44:	003ee706 	br	85e4 <__udivdi3+0x170>
    8a48:	01400604 	movi	r5,24
    8a4c:	2805883a 	mov	r2,r5
    8a50:	003ee406 	br	85e4 <__udivdi3+0x170>
    8a54:	01400204 	movi	r5,8
    8a58:	2805883a 	mov	r2,r5
    8a5c:	003ea106 	br	84e4 <__udivdi3+0x70>
    8a60:	01400604 	movi	r5,24
    8a64:	2805883a 	mov	r2,r5
    8a68:	003e9e06 	br	84e4 <__udivdi3+0x70>
    8a6c:	01400204 	movi	r5,8
    8a70:	2805883a 	mov	r2,r5
    8a74:	003eff06 	br	8674 <__udivdi3+0x200>
    8a78:	01400604 	movi	r5,24
    8a7c:	2805883a 	mov	r2,r5
    8a80:	003efc06 	br	8674 <__udivdi3+0x200>
    8a84:	1c3f862e 	bgeu	r3,r16,88a0 <__udivdi3+0x42c>
    8a88:	1dc7883a 	add	r3,r3,r23
    8a8c:	ad7fffc4 	addi	r21,r21,-1
    8a90:	003f8306 	br	88a0 <__udivdi3+0x42c>
    8a94:	157f6e2e 	bgeu	r2,r21,8850 <__udivdi3+0x3dc>
    8a98:	a53fffc4 	addi	r20,r20,-1
    8a9c:	15c5883a 	add	r2,r2,r23
    8aa0:	003f6b06 	br	8850 <__udivdi3+0x3dc>
    8aa4:	ad7fffc4 	addi	r21,r21,-1
    8aa8:	003ec206 	br	85b4 <__udivdi3+0x140>
    8aac:	843fffc4 	addi	r16,r16,-1
    8ab0:	14c5883a 	add	r2,r2,r19
    8ab4:	003f1306 	br	8704 <__udivdi3+0x290>
    8ab8:	ad7fffc4 	addi	r21,r21,-1
    8abc:	003f2506 	br	8754 <__udivdi3+0x2e0>
    8ac0:	157fb92e 	bgeu	r2,r21,89a8 <__udivdi3+0x534>
    8ac4:	297fffc4 	addi	r5,r5,-1
    8ac8:	14c5883a 	add	r2,r2,r19
    8acc:	d9400215 	stw	r5,8(sp)
    8ad0:	003fb506 	br	89a8 <__udivdi3+0x534>
    8ad4:	843fffc4 	addi	r16,r16,-1
    8ad8:	14c5883a 	add	r2,r2,r19
    8adc:	003ea106 	br	8564 <__udivdi3+0xf0>

00008ae0 <__umoddi3>:
    8ae0:	defff004 	addi	sp,sp,-64
    8ae4:	3011883a 	mov	r8,r6
    8ae8:	000d883a 	mov	r6,zero
    8aec:	dd400b15 	stw	r21,44(sp)
    8af0:	dcc00915 	stw	r19,36(sp)
    8af4:	dc000615 	stw	r16,24(sp)
    8af8:	dfc00f15 	stw	ra,60(sp)
    8afc:	df000e15 	stw	fp,56(sp)
    8b00:	ddc00d15 	stw	r23,52(sp)
    8b04:	dd800c15 	stw	r22,48(sp)
    8b08:	dd000a15 	stw	r20,40(sp)
    8b0c:	dc800815 	stw	r18,32(sp)
    8b10:	dc400715 	stw	r17,28(sp)
    8b14:	2817883a 	mov	r11,r5
    8b18:	d9800415 	stw	r6,16(sp)
    8b1c:	4027883a 	mov	r19,r8
    8b20:	d9800515 	stw	r6,20(sp)
    8b24:	2021883a 	mov	r16,r4
    8b28:	282b883a 	mov	r21,r5
    8b2c:	38002c1e 	bne	r7,zero,8be0 <__umoddi3+0x100>
    8b30:	2a005636 	bltu	r5,r8,8c8c <__umoddi3+0x1ac>
    8b34:	40009a26 	beq	r8,zero,8da0 <__umoddi3+0x2c0>
    8b38:	00bfffd4 	movui	r2,65535
    8b3c:	14c09236 	bltu	r2,r19,8d88 <__umoddi3+0x2a8>
    8b40:	00803fc4 	movi	r2,255
    8b44:	14c15c36 	bltu	r2,r19,90b8 <__umoddi3+0x5d8>
    8b48:	000b883a 	mov	r5,zero
    8b4c:	0005883a 	mov	r2,zero
    8b50:	9884d83a 	srl	r2,r19,r2
    8b54:	01000074 	movhi	r4,1
    8b58:	2136fc04 	addi	r4,r4,-9232
    8b5c:	01800804 	movi	r6,32
    8b60:	1105883a 	add	r2,r2,r4
    8b64:	10c00003 	ldbu	r3,0(r2)
    8b68:	28c7883a 	add	r3,r5,r3
    8b6c:	30e5c83a 	sub	r18,r6,r3
    8b70:	9000a41e 	bne	r18,zero,8e04 <__umoddi3+0x324>
    8b74:	982ed43a 	srli	r23,r19,16
    8b78:	acebc83a 	sub	r21,r21,r19
    8b7c:	9d3fffcc 	andi	r20,r19,65535
    8b80:	002d883a 	mov	r22,zero
    8b84:	a809883a 	mov	r4,r21
    8b88:	b80b883a 	mov	r5,r23
    8b8c:	0000e080 	call	e08 <__udivsi3>
    8b90:	100b883a 	mov	r5,r2
    8b94:	a009883a 	mov	r4,r20
    8b98:	0000e180 	call	e18 <__mulsi3>
    8b9c:	a809883a 	mov	r4,r21
    8ba0:	b80b883a 	mov	r5,r23
    8ba4:	1023883a 	mov	r17,r2
    8ba8:	0000e100 	call	e10 <__umodsi3>
    8bac:	1004943a 	slli	r2,r2,16
    8bb0:	8006d43a 	srli	r3,r16,16
    8bb4:	10c4b03a 	or	r2,r2,r3
    8bb8:	1440032e 	bgeu	r2,r17,8bc8 <__umoddi3+0xe8>
    8bbc:	14c5883a 	add	r2,r2,r19
    8bc0:	14c00136 	bltu	r2,r19,8bc8 <__umoddi3+0xe8>
    8bc4:	14415836 	bltu	r2,r17,9128 <__umoddi3+0x648>
    8bc8:	1463c83a 	sub	r17,r2,r17
    8bcc:	8809883a 	mov	r4,r17
    8bd0:	b80b883a 	mov	r5,r23
    8bd4:	0000e080 	call	e08 <__udivsi3>
    8bd8:	a009883a 	mov	r4,r20
    8bdc:	00005306 	br	8d2c <__umoddi3+0x24c>
    8be0:	380d883a 	mov	r6,r7
    8be4:	29c0132e 	bgeu	r5,r7,8c34 <__umoddi3+0x154>
    8be8:	d9000415 	stw	r4,16(sp)
    8bec:	d9400515 	stw	r5,20(sp)
    8bf0:	d9400417 	ldw	r5,16(sp)
    8bf4:	5813883a 	mov	r9,r11
    8bf8:	2811883a 	mov	r8,r5
    8bfc:	4005883a 	mov	r2,r8
    8c00:	4807883a 	mov	r3,r9
    8c04:	dfc00f17 	ldw	ra,60(sp)
    8c08:	df000e17 	ldw	fp,56(sp)
    8c0c:	ddc00d17 	ldw	r23,52(sp)
    8c10:	dd800c17 	ldw	r22,48(sp)
    8c14:	dd400b17 	ldw	r21,44(sp)
    8c18:	dd000a17 	ldw	r20,40(sp)
    8c1c:	dcc00917 	ldw	r19,36(sp)
    8c20:	dc800817 	ldw	r18,32(sp)
    8c24:	dc400717 	ldw	r17,28(sp)
    8c28:	dc000617 	ldw	r16,24(sp)
    8c2c:	dec01004 	addi	sp,sp,64
    8c30:	f800283a 	ret
    8c34:	00bfffd4 	movui	r2,65535
    8c38:	11c06636 	bltu	r2,r7,8dd4 <__umoddi3+0x2f4>
    8c3c:	00803fc4 	movi	r2,255
    8c40:	11c12036 	bltu	r2,r7,90c4 <__umoddi3+0x5e4>
    8c44:	000b883a 	mov	r5,zero
    8c48:	0005883a 	mov	r2,zero
    8c4c:	3084d83a 	srl	r2,r6,r2
    8c50:	01000074 	movhi	r4,1
    8c54:	2136fc04 	addi	r4,r4,-9232
    8c58:	01c00804 	movi	r7,32
    8c5c:	1105883a 	add	r2,r2,r4
    8c60:	10c00003 	ldbu	r3,0(r2)
    8c64:	28c7883a 	add	r3,r5,r3
    8c68:	38e5c83a 	sub	r18,r7,r3
    8c6c:	9000941e 	bne	r18,zero,8ec0 <__umoddi3+0x3e0>
    8c70:	35405e36 	bltu	r6,r21,8dec <__umoddi3+0x30c>
    8c74:	84c05d2e 	bgeu	r16,r19,8dec <__umoddi3+0x30c>
    8c78:	8011883a 	mov	r8,r16
    8c7c:	a813883a 	mov	r9,r21
    8c80:	dc000415 	stw	r16,16(sp)
    8c84:	dd400515 	stw	r21,20(sp)
    8c88:	003fdc06 	br	8bfc <__umoddi3+0x11c>
    8c8c:	00bfffd4 	movui	r2,65535
    8c90:	12004a36 	bltu	r2,r8,8dbc <__umoddi3+0x2dc>
    8c94:	00803fc4 	movi	r2,255
    8c98:	12010d36 	bltu	r2,r8,90d0 <__umoddi3+0x5f0>
    8c9c:	000b883a 	mov	r5,zero
    8ca0:	0005883a 	mov	r2,zero
    8ca4:	9884d83a 	srl	r2,r19,r2
    8ca8:	01000074 	movhi	r4,1
    8cac:	2136fc04 	addi	r4,r4,-9232
    8cb0:	01800804 	movi	r6,32
    8cb4:	1105883a 	add	r2,r2,r4
    8cb8:	10c00003 	ldbu	r3,0(r2)
    8cbc:	28c7883a 	add	r3,r5,r3
    8cc0:	30c7c83a 	sub	r3,r6,r3
    8cc4:	1800dc1e 	bne	r3,zero,9038 <__umoddi3+0x558>
    8cc8:	002d883a 	mov	r22,zero
    8ccc:	982ed43a 	srli	r23,r19,16
    8cd0:	a809883a 	mov	r4,r21
    8cd4:	9cbfffcc 	andi	r18,r19,65535
    8cd8:	b80b883a 	mov	r5,r23
    8cdc:	0000e080 	call	e08 <__udivsi3>
    8ce0:	100b883a 	mov	r5,r2
    8ce4:	9009883a 	mov	r4,r18
    8ce8:	0000e180 	call	e18 <__mulsi3>
    8cec:	a809883a 	mov	r4,r21
    8cf0:	b80b883a 	mov	r5,r23
    8cf4:	1023883a 	mov	r17,r2
    8cf8:	0000e100 	call	e10 <__umodsi3>
    8cfc:	1004943a 	slli	r2,r2,16
    8d00:	8006d43a 	srli	r3,r16,16
    8d04:	10c4b03a 	or	r2,r2,r3
    8d08:	1440032e 	bgeu	r2,r17,8d18 <__umoddi3+0x238>
    8d0c:	14c5883a 	add	r2,r2,r19
    8d10:	14c00136 	bltu	r2,r19,8d18 <__umoddi3+0x238>
    8d14:	14410236 	bltu	r2,r17,9120 <__umoddi3+0x640>
    8d18:	1463c83a 	sub	r17,r2,r17
    8d1c:	8809883a 	mov	r4,r17
    8d20:	b80b883a 	mov	r5,r23
    8d24:	0000e080 	call	e08 <__udivsi3>
    8d28:	9009883a 	mov	r4,r18
    8d2c:	100b883a 	mov	r5,r2
    8d30:	0000e180 	call	e18 <__mulsi3>
    8d34:	8809883a 	mov	r4,r17
    8d38:	b80b883a 	mov	r5,r23
    8d3c:	102b883a 	mov	r21,r2
    8d40:	0000e100 	call	e10 <__umodsi3>
    8d44:	1004943a 	slli	r2,r2,16
    8d48:	80ffffcc 	andi	r3,r16,65535
    8d4c:	10c4b03a 	or	r2,r2,r3
    8d50:	1540042e 	bgeu	r2,r21,8d64 <__umoddi3+0x284>
    8d54:	14c5883a 	add	r2,r2,r19
    8d58:	14c00236 	bltu	r2,r19,8d64 <__umoddi3+0x284>
    8d5c:	1540012e 	bgeu	r2,r21,8d64 <__umoddi3+0x284>
    8d60:	14c5883a 	add	r2,r2,r19
    8d64:	1545c83a 	sub	r2,r2,r21
    8d68:	1584d83a 	srl	r2,r2,r22
    8d6c:	0013883a 	mov	r9,zero
    8d70:	d8800415 	stw	r2,16(sp)
    8d74:	d8c00417 	ldw	r3,16(sp)
    8d78:	0005883a 	mov	r2,zero
    8d7c:	d8800515 	stw	r2,20(sp)
    8d80:	1811883a 	mov	r8,r3
    8d84:	003f9d06 	br	8bfc <__umoddi3+0x11c>
    8d88:	00804034 	movhi	r2,256
    8d8c:	10bfffc4 	addi	r2,r2,-1
    8d90:	14c0c636 	bltu	r2,r19,90ac <__umoddi3+0x5cc>
    8d94:	01400404 	movi	r5,16
    8d98:	2805883a 	mov	r2,r5
    8d9c:	003f6c06 	br	8b50 <__umoddi3+0x70>
    8da0:	01000044 	movi	r4,1
    8da4:	000b883a 	mov	r5,zero
    8da8:	0000e080 	call	e08 <__udivsi3>
    8dac:	1027883a 	mov	r19,r2
    8db0:	00bfffd4 	movui	r2,65535
    8db4:	14fff436 	bltu	r2,r19,8d88 <__umoddi3+0x2a8>
    8db8:	003f6106 	br	8b40 <__umoddi3+0x60>
    8dbc:	00804034 	movhi	r2,256
    8dc0:	10bfffc4 	addi	r2,r2,-1
    8dc4:	1200c536 	bltu	r2,r8,90dc <__umoddi3+0x5fc>
    8dc8:	01400404 	movi	r5,16
    8dcc:	2805883a 	mov	r2,r5
    8dd0:	003fb406 	br	8ca4 <__umoddi3+0x1c4>
    8dd4:	00804034 	movhi	r2,256
    8dd8:	10bfffc4 	addi	r2,r2,-1
    8ddc:	11c0c236 	bltu	r2,r7,90e8 <__umoddi3+0x608>
    8de0:	01400404 	movi	r5,16
    8de4:	2805883a 	mov	r2,r5
    8de8:	003f9806 	br	8c4c <__umoddi3+0x16c>
    8dec:	84c9c83a 	sub	r4,r16,r19
    8df0:	8105803a 	cmpltu	r2,r16,r4
    8df4:	a987c83a 	sub	r3,r21,r6
    8df8:	18abc83a 	sub	r21,r3,r2
    8dfc:	2021883a 	mov	r16,r4
    8e00:	003f9d06 	br	8c78 <__umoddi3+0x198>
    8e04:	9ca6983a 	sll	r19,r19,r18
    8e08:	3485c83a 	sub	r2,r6,r18
    8e0c:	a8a2d83a 	srl	r17,r21,r2
    8e10:	982ed43a 	srli	r23,r19,16
    8e14:	ac86983a 	sll	r3,r21,r18
    8e18:	8084d83a 	srl	r2,r16,r2
    8e1c:	8809883a 	mov	r4,r17
    8e20:	b80b883a 	mov	r5,r23
    8e24:	18b8b03a 	or	fp,r3,r2
    8e28:	9d3fffcc 	andi	r20,r19,65535
    8e2c:	0000e080 	call	e08 <__udivsi3>
    8e30:	100b883a 	mov	r5,r2
    8e34:	a009883a 	mov	r4,r20
    8e38:	0000e180 	call	e18 <__mulsi3>
    8e3c:	8809883a 	mov	r4,r17
    8e40:	b80b883a 	mov	r5,r23
    8e44:	102b883a 	mov	r21,r2
    8e48:	0000e100 	call	e10 <__umodsi3>
    8e4c:	1004943a 	slli	r2,r2,16
    8e50:	e006d43a 	srli	r3,fp,16
    8e54:	902d883a 	mov	r22,r18
    8e58:	10c4b03a 	or	r2,r2,r3
    8e5c:	1540022e 	bgeu	r2,r21,8e68 <__umoddi3+0x388>
    8e60:	14c5883a 	add	r2,r2,r19
    8e64:	14c0ab2e 	bgeu	r2,r19,9114 <__umoddi3+0x634>
    8e68:	1563c83a 	sub	r17,r2,r21
    8e6c:	8809883a 	mov	r4,r17
    8e70:	b80b883a 	mov	r5,r23
    8e74:	0000e080 	call	e08 <__udivsi3>
    8e78:	100b883a 	mov	r5,r2
    8e7c:	a009883a 	mov	r4,r20
    8e80:	0000e180 	call	e18 <__mulsi3>
    8e84:	8809883a 	mov	r4,r17
    8e88:	b80b883a 	mov	r5,r23
    8e8c:	102b883a 	mov	r21,r2
    8e90:	0000e100 	call	e10 <__umodsi3>
    8e94:	1004943a 	slli	r2,r2,16
    8e98:	e0ffffcc 	andi	r3,fp,65535
    8e9c:	10c4b03a 	or	r2,r2,r3
    8ea0:	1540042e 	bgeu	r2,r21,8eb4 <__umoddi3+0x3d4>
    8ea4:	14c5883a 	add	r2,r2,r19
    8ea8:	14c00236 	bltu	r2,r19,8eb4 <__umoddi3+0x3d4>
    8eac:	1540012e 	bgeu	r2,r21,8eb4 <__umoddi3+0x3d4>
    8eb0:	14c5883a 	add	r2,r2,r19
    8eb4:	84a0983a 	sll	r16,r16,r18
    8eb8:	156bc83a 	sub	r21,r2,r21
    8ebc:	003f3106 	br	8b84 <__umoddi3+0xa4>
    8ec0:	3c8fc83a 	sub	r7,r7,r18
    8ec4:	3486983a 	sll	r3,r6,r18
    8ec8:	99c4d83a 	srl	r2,r19,r7
    8ecc:	a9e2d83a 	srl	r17,r21,r7
    8ed0:	ac8c983a 	sll	r6,r21,r18
    8ed4:	18acb03a 	or	r22,r3,r2
    8ed8:	b02ed43a 	srli	r23,r22,16
    8edc:	81c4d83a 	srl	r2,r16,r7
    8ee0:	8809883a 	mov	r4,r17
    8ee4:	b80b883a 	mov	r5,r23
    8ee8:	308cb03a 	or	r6,r6,r2
    8eec:	d9c00315 	stw	r7,12(sp)
    8ef0:	d9800215 	stw	r6,8(sp)
    8ef4:	b53fffcc 	andi	r20,r22,65535
    8ef8:	0000e080 	call	e08 <__udivsi3>
    8efc:	100b883a 	mov	r5,r2
    8f00:	a009883a 	mov	r4,r20
    8f04:	1039883a 	mov	fp,r2
    8f08:	0000e180 	call	e18 <__mulsi3>
    8f0c:	8809883a 	mov	r4,r17
    8f10:	b80b883a 	mov	r5,r23
    8f14:	102b883a 	mov	r21,r2
    8f18:	0000e100 	call	e10 <__umodsi3>
    8f1c:	d9000217 	ldw	r4,8(sp)
    8f20:	1004943a 	slli	r2,r2,16
    8f24:	9ca6983a 	sll	r19,r19,r18
    8f28:	2006d43a 	srli	r3,r4,16
    8f2c:	84a0983a 	sll	r16,r16,r18
    8f30:	dcc00015 	stw	r19,0(sp)
    8f34:	10c4b03a 	or	r2,r2,r3
    8f38:	dc000115 	stw	r16,4(sp)
    8f3c:	1540032e 	bgeu	r2,r21,8f4c <__umoddi3+0x46c>
    8f40:	1585883a 	add	r2,r2,r22
    8f44:	e73fffc4 	addi	fp,fp,-1
    8f48:	15806e2e 	bgeu	r2,r22,9104 <__umoddi3+0x624>
    8f4c:	1563c83a 	sub	r17,r2,r21
    8f50:	8809883a 	mov	r4,r17
    8f54:	b80b883a 	mov	r5,r23
    8f58:	0000e080 	call	e08 <__udivsi3>
    8f5c:	100b883a 	mov	r5,r2
    8f60:	a009883a 	mov	r4,r20
    8f64:	1021883a 	mov	r16,r2
    8f68:	0000e180 	call	e18 <__mulsi3>
    8f6c:	b80b883a 	mov	r5,r23
    8f70:	8809883a 	mov	r4,r17
    8f74:	1029883a 	mov	r20,r2
    8f78:	0000e100 	call	e10 <__umodsi3>
    8f7c:	d9400217 	ldw	r5,8(sp)
    8f80:	1004943a 	slli	r2,r2,16
    8f84:	28ffffcc 	andi	r3,r5,65535
    8f88:	10c4b03a 	or	r2,r2,r3
    8f8c:	1500032e 	bgeu	r2,r20,8f9c <__umoddi3+0x4bc>
    8f90:	1585883a 	add	r2,r2,r22
    8f94:	843fffc4 	addi	r16,r16,-1
    8f98:	1580562e 	bgeu	r2,r22,90f4 <__umoddi3+0x614>
    8f9c:	d9800017 	ldw	r6,0(sp)
    8fa0:	e022943a 	slli	r17,fp,16
    8fa4:	302ed43a 	srli	r23,r6,16
    8fa8:	8462b03a 	or	r17,r16,r17
    8fac:	34ffffcc 	andi	r19,r6,65535
    8fb0:	882ad43a 	srli	r21,r17,16
    8fb4:	8c7fffcc 	andi	r17,r17,65535
    8fb8:	8809883a 	mov	r4,r17
    8fbc:	980b883a 	mov	r5,r19
    8fc0:	1521c83a 	sub	r16,r2,r20
    8fc4:	0000e180 	call	e18 <__mulsi3>
    8fc8:	8809883a 	mov	r4,r17
    8fcc:	b80b883a 	mov	r5,r23
    8fd0:	1029883a 	mov	r20,r2
    8fd4:	0000e180 	call	e18 <__mulsi3>
    8fd8:	980b883a 	mov	r5,r19
    8fdc:	a809883a 	mov	r4,r21
    8fe0:	1023883a 	mov	r17,r2
    8fe4:	0000e180 	call	e18 <__mulsi3>
    8fe8:	a809883a 	mov	r4,r21
    8fec:	b80b883a 	mov	r5,r23
    8ff0:	1027883a 	mov	r19,r2
    8ff4:	0000e180 	call	e18 <__mulsi3>
    8ff8:	100b883a 	mov	r5,r2
    8ffc:	a004d43a 	srli	r2,r20,16
    9000:	8ce3883a 	add	r17,r17,r19
    9004:	1449883a 	add	r4,r2,r17
    9008:	24c0022e 	bgeu	r4,r19,9014 <__umoddi3+0x534>
    900c:	00800074 	movhi	r2,1
    9010:	288b883a 	add	r5,r5,r2
    9014:	2004d43a 	srli	r2,r4,16
    9018:	2008943a 	slli	r4,r4,16
    901c:	a0ffffcc 	andi	r3,r20,65535
    9020:	288d883a 	add	r6,r5,r2
    9024:	20c9883a 	add	r4,r4,r3
    9028:	81800b36 	bltu	r16,r6,9058 <__umoddi3+0x578>
    902c:	81804026 	beq	r16,r6,9130 <__umoddi3+0x650>
    9030:	818dc83a 	sub	r6,r16,r6
    9034:	00000f06 	br	9074 <__umoddi3+0x594>
    9038:	30c5c83a 	sub	r2,r6,r3
    903c:	182d883a 	mov	r22,r3
    9040:	8084d83a 	srl	r2,r16,r2
    9044:	a8c6983a 	sll	r3,r21,r3
    9048:	9da6983a 	sll	r19,r19,r22
    904c:	85a0983a 	sll	r16,r16,r22
    9050:	18aab03a 	or	r21,r3,r2
    9054:	003f1d06 	br	8ccc <__umoddi3+0x1ec>
    9058:	d8c00017 	ldw	r3,0(sp)
    905c:	20c5c83a 	sub	r2,r4,r3
    9060:	2089803a 	cmpltu	r4,r4,r2
    9064:	3587c83a 	sub	r3,r6,r22
    9068:	1907c83a 	sub	r3,r3,r4
    906c:	80cdc83a 	sub	r6,r16,r3
    9070:	1009883a 	mov	r4,r2
    9074:	d9400117 	ldw	r5,4(sp)
    9078:	2905c83a 	sub	r2,r5,r4
    907c:	2887803a 	cmpltu	r3,r5,r2
    9080:	30c7c83a 	sub	r3,r6,r3
    9084:	d9800317 	ldw	r6,12(sp)
    9088:	1484d83a 	srl	r2,r2,r18
    908c:	1988983a 	sll	r4,r3,r6
    9090:	1c86d83a 	srl	r3,r3,r18
    9094:	2088b03a 	or	r4,r4,r2
    9098:	2011883a 	mov	r8,r4
    909c:	1813883a 	mov	r9,r3
    90a0:	d9000415 	stw	r4,16(sp)
    90a4:	d8c00515 	stw	r3,20(sp)
    90a8:	003ed406 	br	8bfc <__umoddi3+0x11c>
    90ac:	01400604 	movi	r5,24
    90b0:	2805883a 	mov	r2,r5
    90b4:	003ea606 	br	8b50 <__umoddi3+0x70>
    90b8:	01400204 	movi	r5,8
    90bc:	2805883a 	mov	r2,r5
    90c0:	003ea306 	br	8b50 <__umoddi3+0x70>
    90c4:	01400204 	movi	r5,8
    90c8:	2805883a 	mov	r2,r5
    90cc:	003edf06 	br	8c4c <__umoddi3+0x16c>
    90d0:	01400204 	movi	r5,8
    90d4:	2805883a 	mov	r2,r5
    90d8:	003ef206 	br	8ca4 <__umoddi3+0x1c4>
    90dc:	01400604 	movi	r5,24
    90e0:	2805883a 	mov	r2,r5
    90e4:	003eef06 	br	8ca4 <__umoddi3+0x1c4>
    90e8:	01400604 	movi	r5,24
    90ec:	2805883a 	mov	r2,r5
    90f0:	003ed606 	br	8c4c <__umoddi3+0x16c>
    90f4:	153fa92e 	bgeu	r2,r20,8f9c <__umoddi3+0x4bc>
    90f8:	843fffc4 	addi	r16,r16,-1
    90fc:	1585883a 	add	r2,r2,r22
    9100:	003fa606 	br	8f9c <__umoddi3+0x4bc>
    9104:	157f912e 	bgeu	r2,r21,8f4c <__umoddi3+0x46c>
    9108:	e73fffc4 	addi	fp,fp,-1
    910c:	1585883a 	add	r2,r2,r22
    9110:	003f8e06 	br	8f4c <__umoddi3+0x46c>
    9114:	157f542e 	bgeu	r2,r21,8e68 <__umoddi3+0x388>
    9118:	14c5883a 	add	r2,r2,r19
    911c:	003f5206 	br	8e68 <__umoddi3+0x388>
    9120:	14c5883a 	add	r2,r2,r19
    9124:	003efc06 	br	8d18 <__umoddi3+0x238>
    9128:	14c5883a 	add	r2,r2,r19
    912c:	003ea606 	br	8bc8 <__umoddi3+0xe8>
    9130:	d8800117 	ldw	r2,4(sp)
    9134:	113fc836 	bltu	r2,r4,9058 <__umoddi3+0x578>
    9138:	000d883a 	mov	r6,zero
    913c:	003fcd06 	br	9074 <__umoddi3+0x594>

00009140 <_fpadd_parts>:
    9140:	defff804 	addi	sp,sp,-32
    9144:	dcc00315 	stw	r19,12(sp)
    9148:	2027883a 	mov	r19,r4
    914c:	21000017 	ldw	r4,0(r4)
    9150:	00c00044 	movi	r3,1
    9154:	dd400515 	stw	r21,20(sp)
    9158:	dd000415 	stw	r20,16(sp)
    915c:	ddc00715 	stw	r23,28(sp)
    9160:	dd800615 	stw	r22,24(sp)
    9164:	dc800215 	stw	r18,8(sp)
    9168:	dc400115 	stw	r17,4(sp)
    916c:	dc000015 	stw	r16,0(sp)
    9170:	282b883a 	mov	r21,r5
    9174:	3029883a 	mov	r20,r6
    9178:	1900632e 	bgeu	r3,r4,9308 <_fpadd_parts+0x1c8>
    917c:	28800017 	ldw	r2,0(r5)
    9180:	1880812e 	bgeu	r3,r2,9388 <_fpadd_parts+0x248>
    9184:	00c00104 	movi	r3,4
    9188:	20c0dc26 	beq	r4,r3,94fc <_fpadd_parts+0x3bc>
    918c:	10c07e26 	beq	r2,r3,9388 <_fpadd_parts+0x248>
    9190:	00c00084 	movi	r3,2
    9194:	10c06726 	beq	r2,r3,9334 <_fpadd_parts+0x1f4>
    9198:	20c07b26 	beq	r4,r3,9388 <_fpadd_parts+0x248>
    919c:	9dc00217 	ldw	r23,8(r19)
    91a0:	28c00217 	ldw	r3,8(r5)
    91a4:	9c400317 	ldw	r17,12(r19)
    91a8:	2bc00317 	ldw	r15,12(r5)
    91ac:	b8cdc83a 	sub	r6,r23,r3
    91b0:	9c800417 	ldw	r18,16(r19)
    91b4:	2c000417 	ldw	r16,16(r5)
    91b8:	3009883a 	mov	r4,r6
    91bc:	30009716 	blt	r6,zero,941c <_fpadd_parts+0x2dc>
    91c0:	00800fc4 	movi	r2,63
    91c4:	11806b16 	blt	r2,r6,9374 <_fpadd_parts+0x234>
    91c8:	0100a40e 	bge	zero,r4,945c <_fpadd_parts+0x31c>
    91cc:	35bff804 	addi	r22,r6,-32
    91d0:	b000bc16 	blt	r22,zero,94c4 <_fpadd_parts+0x384>
    91d4:	8596d83a 	srl	r11,r16,r22
    91d8:	0019883a 	mov	r12,zero
    91dc:	0013883a 	mov	r9,zero
    91e0:	01000044 	movi	r4,1
    91e4:	0015883a 	mov	r10,zero
    91e8:	b000be16 	blt	r22,zero,94e4 <_fpadd_parts+0x3a4>
    91ec:	2590983a 	sll	r8,r4,r22
    91f0:	000f883a 	mov	r7,zero
    91f4:	00bfffc4 	movi	r2,-1
    91f8:	3889883a 	add	r4,r7,r2
    91fc:	408b883a 	add	r5,r8,r2
    9200:	21cd803a 	cmpltu	r6,r4,r7
    9204:	314b883a 	add	r5,r6,r5
    9208:	7904703a 	and	r2,r15,r4
    920c:	8146703a 	and	r3,r16,r5
    9210:	10c4b03a 	or	r2,r2,r3
    9214:	10000226 	beq	r2,zero,9220 <_fpadd_parts+0xe0>
    9218:	02400044 	movi	r9,1
    921c:	0015883a 	mov	r10,zero
    9220:	5a5eb03a 	or	r15,r11,r9
    9224:	62a0b03a 	or	r16,r12,r10
    9228:	99400117 	ldw	r5,4(r19)
    922c:	a8800117 	ldw	r2,4(r21)
    9230:	28806e26 	beq	r5,r2,93ec <_fpadd_parts+0x2ac>
    9234:	28006626 	beq	r5,zero,93d0 <_fpadd_parts+0x290>
    9238:	7c45c83a 	sub	r2,r15,r17
    923c:	7889803a 	cmpltu	r4,r15,r2
    9240:	8487c83a 	sub	r3,r16,r18
    9244:	1909c83a 	sub	r4,r3,r4
    9248:	100d883a 	mov	r6,r2
    924c:	200f883a 	mov	r7,r4
    9250:	38007716 	blt	r7,zero,9430 <_fpadd_parts+0x2f0>
    9254:	a5c00215 	stw	r23,8(r20)
    9258:	a1c00415 	stw	r7,16(r20)
    925c:	a0000115 	stw	zero,4(r20)
    9260:	a1800315 	stw	r6,12(r20)
    9264:	a2000317 	ldw	r8,12(r20)
    9268:	a2400417 	ldw	r9,16(r20)
    926c:	00bfffc4 	movi	r2,-1
    9270:	408b883a 	add	r5,r8,r2
    9274:	2a09803a 	cmpltu	r4,r5,r8
    9278:	488d883a 	add	r6,r9,r2
    927c:	01c40034 	movhi	r7,4096
    9280:	39ffffc4 	addi	r7,r7,-1
    9284:	218d883a 	add	r6,r4,r6
    9288:	39801736 	bltu	r7,r6,92e8 <_fpadd_parts+0x1a8>
    928c:	31c06526 	beq	r6,r7,9424 <_fpadd_parts+0x2e4>
    9290:	a3000217 	ldw	r12,8(r20)
    9294:	4209883a 	add	r4,r8,r8
    9298:	00bfffc4 	movi	r2,-1
    929c:	220f803a 	cmpltu	r7,r4,r8
    92a0:	4a4b883a 	add	r5,r9,r9
    92a4:	394f883a 	add	r7,r7,r5
    92a8:	2095883a 	add	r10,r4,r2
    92ac:	3897883a 	add	r11,r7,r2
    92b0:	510d803a 	cmpltu	r6,r10,r4
    92b4:	6099883a 	add	r12,r12,r2
    92b8:	32d7883a 	add	r11,r6,r11
    92bc:	00840034 	movhi	r2,4096
    92c0:	10bfffc4 	addi	r2,r2,-1
    92c4:	2011883a 	mov	r8,r4
    92c8:	3813883a 	mov	r9,r7
    92cc:	a1000315 	stw	r4,12(r20)
    92d0:	a1c00415 	stw	r7,16(r20)
    92d4:	a3000215 	stw	r12,8(r20)
    92d8:	12c00336 	bltu	r2,r11,92e8 <_fpadd_parts+0x1a8>
    92dc:	58bfed1e 	bne	r11,r2,9294 <_fpadd_parts+0x154>
    92e0:	00bfff84 	movi	r2,-2
    92e4:	12bfeb2e 	bgeu	r2,r10,9294 <_fpadd_parts+0x154>
    92e8:	a2800417 	ldw	r10,16(r20)
    92ec:	008000c4 	movi	r2,3
    92f0:	00c80034 	movhi	r3,8192
    92f4:	18ffffc4 	addi	r3,r3,-1
    92f8:	a2400317 	ldw	r9,12(r20)
    92fc:	a0800015 	stw	r2,0(r20)
    9300:	1a802336 	bltu	r3,r10,9390 <_fpadd_parts+0x250>
    9304:	a027883a 	mov	r19,r20
    9308:	9805883a 	mov	r2,r19
    930c:	ddc00717 	ldw	r23,28(sp)
    9310:	dd800617 	ldw	r22,24(sp)
    9314:	dd400517 	ldw	r21,20(sp)
    9318:	dd000417 	ldw	r20,16(sp)
    931c:	dcc00317 	ldw	r19,12(sp)
    9320:	dc800217 	ldw	r18,8(sp)
    9324:	dc400117 	ldw	r17,4(sp)
    9328:	dc000017 	ldw	r16,0(sp)
    932c:	dec00804 	addi	sp,sp,32
    9330:	f800283a 	ret
    9334:	20fff41e 	bne	r4,r3,9308 <_fpadd_parts+0x1c8>
    9338:	31000015 	stw	r4,0(r6)
    933c:	98800117 	ldw	r2,4(r19)
    9340:	30800115 	stw	r2,4(r6)
    9344:	98c00217 	ldw	r3,8(r19)
    9348:	30c00215 	stw	r3,8(r6)
    934c:	98800317 	ldw	r2,12(r19)
    9350:	30800315 	stw	r2,12(r6)
    9354:	98c00417 	ldw	r3,16(r19)
    9358:	30c00415 	stw	r3,16(r6)
    935c:	98800117 	ldw	r2,4(r19)
    9360:	28c00117 	ldw	r3,4(r5)
    9364:	3027883a 	mov	r19,r6
    9368:	10c4703a 	and	r2,r2,r3
    936c:	30800115 	stw	r2,4(r6)
    9370:	003fe506 	br	9308 <_fpadd_parts+0x1c8>
    9374:	1dc02616 	blt	r3,r23,9410 <_fpadd_parts+0x2d0>
    9378:	0023883a 	mov	r17,zero
    937c:	182f883a 	mov	r23,r3
    9380:	0025883a 	mov	r18,zero
    9384:	003fa806 	br	9228 <_fpadd_parts+0xe8>
    9388:	a827883a 	mov	r19,r21
    938c:	003fde06 	br	9308 <_fpadd_parts+0x1c8>
    9390:	01800044 	movi	r6,1
    9394:	500497fa 	slli	r2,r10,31
    9398:	4808d07a 	srli	r4,r9,1
    939c:	518ad83a 	srl	r5,r10,r6
    93a0:	a2000217 	ldw	r8,8(r20)
    93a4:	1108b03a 	or	r4,r2,r4
    93a8:	0007883a 	mov	r3,zero
    93ac:	4984703a 	and	r2,r9,r6
    93b0:	208cb03a 	or	r6,r4,r2
    93b4:	28ceb03a 	or	r7,r5,r3
    93b8:	42000044 	addi	r8,r8,1
    93bc:	a027883a 	mov	r19,r20
    93c0:	a1c00415 	stw	r7,16(r20)
    93c4:	a2000215 	stw	r8,8(r20)
    93c8:	a1800315 	stw	r6,12(r20)
    93cc:	003fce06 	br	9308 <_fpadd_parts+0x1c8>
    93d0:	8bc5c83a 	sub	r2,r17,r15
    93d4:	8889803a 	cmpltu	r4,r17,r2
    93d8:	9407c83a 	sub	r3,r18,r16
    93dc:	1909c83a 	sub	r4,r3,r4
    93e0:	100d883a 	mov	r6,r2
    93e4:	200f883a 	mov	r7,r4
    93e8:	003f9906 	br	9250 <_fpadd_parts+0x110>
    93ec:	7c45883a 	add	r2,r15,r17
    93f0:	13c9803a 	cmpltu	r4,r2,r15
    93f4:	8487883a 	add	r3,r16,r18
    93f8:	20c9883a 	add	r4,r4,r3
    93fc:	a1400115 	stw	r5,4(r20)
    9400:	a5c00215 	stw	r23,8(r20)
    9404:	a0800315 	stw	r2,12(r20)
    9408:	a1000415 	stw	r4,16(r20)
    940c:	003fb606 	br	92e8 <_fpadd_parts+0x1a8>
    9410:	001f883a 	mov	r15,zero
    9414:	0021883a 	mov	r16,zero
    9418:	003f8306 	br	9228 <_fpadd_parts+0xe8>
    941c:	018dc83a 	sub	r6,zero,r6
    9420:	003f6706 	br	91c0 <_fpadd_parts+0x80>
    9424:	00bfff84 	movi	r2,-2
    9428:	117faf36 	bltu	r2,r5,92e8 <_fpadd_parts+0x1a8>
    942c:	003f9806 	br	9290 <_fpadd_parts+0x150>
    9430:	0005883a 	mov	r2,zero
    9434:	1189c83a 	sub	r4,r2,r6
    9438:	1105803a 	cmpltu	r2,r2,r4
    943c:	01cbc83a 	sub	r5,zero,r7
    9440:	2885c83a 	sub	r2,r5,r2
    9444:	01800044 	movi	r6,1
    9448:	a1800115 	stw	r6,4(r20)
    944c:	a5c00215 	stw	r23,8(r20)
    9450:	a1000315 	stw	r4,12(r20)
    9454:	a0800415 	stw	r2,16(r20)
    9458:	003f8206 	br	9264 <_fpadd_parts+0x124>
    945c:	203f7226 	beq	r4,zero,9228 <_fpadd_parts+0xe8>
    9460:	35bff804 	addi	r22,r6,-32
    9464:	b9af883a 	add	r23,r23,r6
    9468:	b0003116 	blt	r22,zero,9530 <_fpadd_parts+0x3f0>
    946c:	959ad83a 	srl	r13,r18,r22
    9470:	001d883a 	mov	r14,zero
    9474:	000f883a 	mov	r7,zero
    9478:	01000044 	movi	r4,1
    947c:	0011883a 	mov	r8,zero
    9480:	b0002516 	blt	r22,zero,9518 <_fpadd_parts+0x3d8>
    9484:	2594983a 	sll	r10,r4,r22
    9488:	0013883a 	mov	r9,zero
    948c:	00bfffc4 	movi	r2,-1
    9490:	4889883a 	add	r4,r9,r2
    9494:	508b883a 	add	r5,r10,r2
    9498:	224d803a 	cmpltu	r6,r4,r9
    949c:	314b883a 	add	r5,r6,r5
    94a0:	8904703a 	and	r2,r17,r4
    94a4:	9146703a 	and	r3,r18,r5
    94a8:	10c4b03a 	or	r2,r2,r3
    94ac:	10000226 	beq	r2,zero,94b8 <_fpadd_parts+0x378>
    94b0:	01c00044 	movi	r7,1
    94b4:	0011883a 	mov	r8,zero
    94b8:	69e2b03a 	or	r17,r13,r7
    94bc:	7224b03a 	or	r18,r14,r8
    94c0:	003f5906 	br	9228 <_fpadd_parts+0xe8>
    94c4:	8407883a 	add	r3,r16,r16
    94c8:	008007c4 	movi	r2,31
    94cc:	1185c83a 	sub	r2,r2,r6
    94d0:	1886983a 	sll	r3,r3,r2
    94d4:	7996d83a 	srl	r11,r15,r6
    94d8:	8198d83a 	srl	r12,r16,r6
    94dc:	1ad6b03a 	or	r11,r3,r11
    94e0:	003f3e06 	br	91dc <_fpadd_parts+0x9c>
    94e4:	2006d07a 	srli	r3,r4,1
    94e8:	008007c4 	movi	r2,31
    94ec:	1185c83a 	sub	r2,r2,r6
    94f0:	1890d83a 	srl	r8,r3,r2
    94f4:	218e983a 	sll	r7,r4,r6
    94f8:	003f3e06 	br	91f4 <_fpadd_parts+0xb4>
    94fc:	113f821e 	bne	r2,r4,9308 <_fpadd_parts+0x1c8>
    9500:	28c00117 	ldw	r3,4(r5)
    9504:	98800117 	ldw	r2,4(r19)
    9508:	10ff7f26 	beq	r2,r3,9308 <_fpadd_parts+0x1c8>
    950c:	04c00074 	movhi	r19,1
    9510:	9cf6f704 	addi	r19,r19,-9252
    9514:	003f7c06 	br	9308 <_fpadd_parts+0x1c8>
    9518:	2006d07a 	srli	r3,r4,1
    951c:	008007c4 	movi	r2,31
    9520:	1185c83a 	sub	r2,r2,r6
    9524:	1894d83a 	srl	r10,r3,r2
    9528:	2192983a 	sll	r9,r4,r6
    952c:	003fd706 	br	948c <_fpadd_parts+0x34c>
    9530:	9487883a 	add	r3,r18,r18
    9534:	008007c4 	movi	r2,31
    9538:	1185c83a 	sub	r2,r2,r6
    953c:	1886983a 	sll	r3,r3,r2
    9540:	899ad83a 	srl	r13,r17,r6
    9544:	919cd83a 	srl	r14,r18,r6
    9548:	1b5ab03a 	or	r13,r3,r13
    954c:	003fc906 	br	9474 <_fpadd_parts+0x334>

00009550 <__subdf3>:
    9550:	deffea04 	addi	sp,sp,-88
    9554:	dcc01415 	stw	r19,80(sp)
    9558:	dcc00404 	addi	r19,sp,16
    955c:	2011883a 	mov	r8,r4
    9560:	2813883a 	mov	r9,r5
    9564:	dc401315 	stw	r17,76(sp)
    9568:	d809883a 	mov	r4,sp
    956c:	980b883a 	mov	r5,r19
    9570:	dc400904 	addi	r17,sp,36
    9574:	dfc01515 	stw	ra,84(sp)
    9578:	da400115 	stw	r9,4(sp)
    957c:	d9c00315 	stw	r7,12(sp)
    9580:	da000015 	stw	r8,0(sp)
    9584:	d9800215 	stw	r6,8(sp)
    9588:	000a7240 	call	a724 <__unpack_d>
    958c:	d9000204 	addi	r4,sp,8
    9590:	880b883a 	mov	r5,r17
    9594:	000a7240 	call	a724 <__unpack_d>
    9598:	d8800a17 	ldw	r2,40(sp)
    959c:	880b883a 	mov	r5,r17
    95a0:	9809883a 	mov	r4,r19
    95a4:	d9800e04 	addi	r6,sp,56
    95a8:	1080005c 	xori	r2,r2,1
    95ac:	d8800a15 	stw	r2,40(sp)
    95b0:	00091400 	call	9140 <_fpadd_parts>
    95b4:	1009883a 	mov	r4,r2
    95b8:	000a4100 	call	a410 <__pack_d>
    95bc:	dfc01517 	ldw	ra,84(sp)
    95c0:	dcc01417 	ldw	r19,80(sp)
    95c4:	dc401317 	ldw	r17,76(sp)
    95c8:	dec01604 	addi	sp,sp,88
    95cc:	f800283a 	ret

000095d0 <__adddf3>:
    95d0:	deffea04 	addi	sp,sp,-88
    95d4:	dcc01415 	stw	r19,80(sp)
    95d8:	dcc00404 	addi	r19,sp,16
    95dc:	2011883a 	mov	r8,r4
    95e0:	2813883a 	mov	r9,r5
    95e4:	dc401315 	stw	r17,76(sp)
    95e8:	d809883a 	mov	r4,sp
    95ec:	980b883a 	mov	r5,r19
    95f0:	dc400904 	addi	r17,sp,36
    95f4:	dfc01515 	stw	ra,84(sp)
    95f8:	da400115 	stw	r9,4(sp)
    95fc:	d9c00315 	stw	r7,12(sp)
    9600:	da000015 	stw	r8,0(sp)
    9604:	d9800215 	stw	r6,8(sp)
    9608:	000a7240 	call	a724 <__unpack_d>
    960c:	d9000204 	addi	r4,sp,8
    9610:	880b883a 	mov	r5,r17
    9614:	000a7240 	call	a724 <__unpack_d>
    9618:	d9800e04 	addi	r6,sp,56
    961c:	9809883a 	mov	r4,r19
    9620:	880b883a 	mov	r5,r17
    9624:	00091400 	call	9140 <_fpadd_parts>
    9628:	1009883a 	mov	r4,r2
    962c:	000a4100 	call	a410 <__pack_d>
    9630:	dfc01517 	ldw	ra,84(sp)
    9634:	dcc01417 	ldw	r19,80(sp)
    9638:	dc401317 	ldw	r17,76(sp)
    963c:	dec01604 	addi	sp,sp,88
    9640:	f800283a 	ret

00009644 <__muldf3>:
    9644:	deffe004 	addi	sp,sp,-128
    9648:	dc401815 	stw	r17,96(sp)
    964c:	dc400404 	addi	r17,sp,16
    9650:	2011883a 	mov	r8,r4
    9654:	2813883a 	mov	r9,r5
    9658:	dc001715 	stw	r16,92(sp)
    965c:	d809883a 	mov	r4,sp
    9660:	880b883a 	mov	r5,r17
    9664:	dc000904 	addi	r16,sp,36
    9668:	dfc01f15 	stw	ra,124(sp)
    966c:	da400115 	stw	r9,4(sp)
    9670:	d9c00315 	stw	r7,12(sp)
    9674:	da000015 	stw	r8,0(sp)
    9678:	d9800215 	stw	r6,8(sp)
    967c:	ddc01e15 	stw	r23,120(sp)
    9680:	dd801d15 	stw	r22,116(sp)
    9684:	dd401c15 	stw	r21,112(sp)
    9688:	dd001b15 	stw	r20,108(sp)
    968c:	dcc01a15 	stw	r19,104(sp)
    9690:	dc801915 	stw	r18,100(sp)
    9694:	000a7240 	call	a724 <__unpack_d>
    9698:	d9000204 	addi	r4,sp,8
    969c:	800b883a 	mov	r5,r16
    96a0:	000a7240 	call	a724 <__unpack_d>
    96a4:	d9000417 	ldw	r4,16(sp)
    96a8:	00800044 	movi	r2,1
    96ac:	1100102e 	bgeu	r2,r4,96f0 <__muldf3+0xac>
    96b0:	d8c00917 	ldw	r3,36(sp)
    96b4:	10c0062e 	bgeu	r2,r3,96d0 <__muldf3+0x8c>
    96b8:	00800104 	movi	r2,4
    96bc:	20800a26 	beq	r4,r2,96e8 <__muldf3+0xa4>
    96c0:	1880cc26 	beq	r3,r2,99f4 <__muldf3+0x3b0>
    96c4:	00800084 	movi	r2,2
    96c8:	20800926 	beq	r4,r2,96f0 <__muldf3+0xac>
    96cc:	1880191e 	bne	r3,r2,9734 <__muldf3+0xf0>
    96d0:	d8c00a17 	ldw	r3,40(sp)
    96d4:	d8800517 	ldw	r2,20(sp)
    96d8:	8009883a 	mov	r4,r16
    96dc:	10c4c03a 	cmpne	r2,r2,r3
    96e0:	d8800a15 	stw	r2,40(sp)
    96e4:	00000706 	br	9704 <__muldf3+0xc0>
    96e8:	00800084 	movi	r2,2
    96ec:	1880c326 	beq	r3,r2,99fc <__muldf3+0x3b8>
    96f0:	d8800517 	ldw	r2,20(sp)
    96f4:	d8c00a17 	ldw	r3,40(sp)
    96f8:	8809883a 	mov	r4,r17
    96fc:	10c4c03a 	cmpne	r2,r2,r3
    9700:	d8800515 	stw	r2,20(sp)
    9704:	000a4100 	call	a410 <__pack_d>
    9708:	dfc01f17 	ldw	ra,124(sp)
    970c:	ddc01e17 	ldw	r23,120(sp)
    9710:	dd801d17 	ldw	r22,116(sp)
    9714:	dd401c17 	ldw	r21,112(sp)
    9718:	dd001b17 	ldw	r20,108(sp)
    971c:	dcc01a17 	ldw	r19,104(sp)
    9720:	dc801917 	ldw	r18,100(sp)
    9724:	dc401817 	ldw	r17,96(sp)
    9728:	dc001717 	ldw	r16,92(sp)
    972c:	dec02004 	addi	sp,sp,128
    9730:	f800283a 	ret
    9734:	dd800717 	ldw	r22,28(sp)
    9738:	dc800c17 	ldw	r18,48(sp)
    973c:	002b883a 	mov	r21,zero
    9740:	0023883a 	mov	r17,zero
    9744:	a80b883a 	mov	r5,r21
    9748:	b00d883a 	mov	r6,r22
    974c:	880f883a 	mov	r7,r17
    9750:	ddc00817 	ldw	r23,32(sp)
    9754:	dcc00d17 	ldw	r19,52(sp)
    9758:	9009883a 	mov	r4,r18
    975c:	000a26c0 	call	a26c <__muldi3>
    9760:	001b883a 	mov	r13,zero
    9764:	680f883a 	mov	r7,r13
    9768:	b009883a 	mov	r4,r22
    976c:	000b883a 	mov	r5,zero
    9770:	980d883a 	mov	r6,r19
    9774:	b82d883a 	mov	r22,r23
    9778:	002f883a 	mov	r23,zero
    977c:	db401615 	stw	r13,88(sp)
    9780:	d8801315 	stw	r2,76(sp)
    9784:	d8c01415 	stw	r3,80(sp)
    9788:	dcc01515 	stw	r19,84(sp)
    978c:	000a26c0 	call	a26c <__muldi3>
    9790:	b00d883a 	mov	r6,r22
    9794:	000b883a 	mov	r5,zero
    9798:	9009883a 	mov	r4,r18
    979c:	b80f883a 	mov	r7,r23
    97a0:	1021883a 	mov	r16,r2
    97a4:	1823883a 	mov	r17,r3
    97a8:	000a26c0 	call	a26c <__muldi3>
    97ac:	8085883a 	add	r2,r16,r2
    97b0:	140d803a 	cmpltu	r6,r2,r16
    97b4:	88c7883a 	add	r3,r17,r3
    97b8:	30cd883a 	add	r6,r6,r3
    97bc:	1029883a 	mov	r20,r2
    97c0:	302b883a 	mov	r21,r6
    97c4:	da801317 	ldw	r10,76(sp)
    97c8:	dac01417 	ldw	r11,80(sp)
    97cc:	db001517 	ldw	r12,84(sp)
    97d0:	db401617 	ldw	r13,88(sp)
    97d4:	3440612e 	bgeu	r6,r17,995c <__muldf3+0x318>
    97d8:	0009883a 	mov	r4,zero
    97dc:	5105883a 	add	r2,r10,r4
    97e0:	128d803a 	cmpltu	r6,r2,r10
    97e4:	5d07883a 	add	r3,r11,r20
    97e8:	30cd883a 	add	r6,r6,r3
    97ec:	0021883a 	mov	r16,zero
    97f0:	04400044 	movi	r17,1
    97f4:	1025883a 	mov	r18,r2
    97f8:	3027883a 	mov	r19,r6
    97fc:	32c06236 	bltu	r6,r11,9988 <__muldf3+0x344>
    9800:	59807a26 	beq	r11,r6,99ec <__muldf3+0x3a8>
    9804:	680b883a 	mov	r5,r13
    9808:	b80f883a 	mov	r7,r23
    980c:	6009883a 	mov	r4,r12
    9810:	b00d883a 	mov	r6,r22
    9814:	000a26c0 	call	a26c <__muldi3>
    9818:	1009883a 	mov	r4,r2
    981c:	000f883a 	mov	r7,zero
    9820:	1545883a 	add	r2,r2,r21
    9824:	1111803a 	cmpltu	r8,r2,r4
    9828:	19c7883a 	add	r3,r3,r7
    982c:	40c7883a 	add	r3,r8,r3
    9830:	88cb883a 	add	r5,r17,r3
    9834:	d8c00617 	ldw	r3,24(sp)
    9838:	8089883a 	add	r4,r16,r2
    983c:	d8800b17 	ldw	r2,44(sp)
    9840:	18c00104 	addi	r3,r3,4
    9844:	240d803a 	cmpltu	r6,r4,r16
    9848:	10c7883a 	add	r3,r2,r3
    984c:	2013883a 	mov	r9,r4
    9850:	d8800a17 	ldw	r2,40(sp)
    9854:	d9000517 	ldw	r4,20(sp)
    9858:	314d883a 	add	r6,r6,r5
    985c:	3015883a 	mov	r10,r6
    9860:	2088c03a 	cmpne	r4,r4,r2
    9864:	00880034 	movhi	r2,8192
    9868:	10bfffc4 	addi	r2,r2,-1
    986c:	d9000f15 	stw	r4,60(sp)
    9870:	d8c01015 	stw	r3,64(sp)
    9874:	1180162e 	bgeu	r2,r6,98d0 <__muldf3+0x28c>
    9878:	1811883a 	mov	r8,r3
    987c:	101f883a 	mov	r15,r2
    9880:	980497fa 	slli	r2,r19,31
    9884:	9016d07a 	srli	r11,r18,1
    9888:	500697fa 	slli	r3,r10,31
    988c:	480cd07a 	srli	r6,r9,1
    9890:	500ed07a 	srli	r7,r10,1
    9894:	12d6b03a 	or	r11,r2,r11
    9898:	00800044 	movi	r2,1
    989c:	198cb03a 	or	r6,r3,r6
    98a0:	4888703a 	and	r4,r9,r2
    98a4:	9818d07a 	srli	r12,r19,1
    98a8:	001b883a 	mov	r13,zero
    98ac:	03a00034 	movhi	r14,32768
    98b0:	3013883a 	mov	r9,r6
    98b4:	3815883a 	mov	r10,r7
    98b8:	4091883a 	add	r8,r8,r2
    98bc:	20000226 	beq	r4,zero,98c8 <__muldf3+0x284>
    98c0:	5b64b03a 	or	r18,r11,r13
    98c4:	63a6b03a 	or	r19,r12,r14
    98c8:	7abfed36 	bltu	r15,r10,9880 <__muldf3+0x23c>
    98cc:	da001015 	stw	r8,64(sp)
    98d0:	00840034 	movhi	r2,4096
    98d4:	10bfffc4 	addi	r2,r2,-1
    98d8:	12801436 	bltu	r2,r10,992c <__muldf3+0x2e8>
    98dc:	da001017 	ldw	r8,64(sp)
    98e0:	101f883a 	mov	r15,r2
    98e4:	4a45883a 	add	r2,r9,r9
    98e8:	124d803a 	cmpltu	r6,r2,r9
    98ec:	5287883a 	add	r3,r10,r10
    98f0:	9497883a 	add	r11,r18,r18
    98f4:	5c8f803a 	cmpltu	r7,r11,r18
    98f8:	9cd9883a 	add	r12,r19,r19
    98fc:	01000044 	movi	r4,1
    9900:	30cd883a 	add	r6,r6,r3
    9904:	3b0f883a 	add	r7,r7,r12
    9908:	423fffc4 	addi	r8,r8,-1
    990c:	1013883a 	mov	r9,r2
    9910:	3015883a 	mov	r10,r6
    9914:	111ab03a 	or	r13,r2,r4
    9918:	98003016 	blt	r19,zero,99dc <__muldf3+0x398>
    991c:	5825883a 	mov	r18,r11
    9920:	3827883a 	mov	r19,r7
    9924:	7abfef2e 	bgeu	r15,r10,98e4 <__muldf3+0x2a0>
    9928:	da001015 	stw	r8,64(sp)
    992c:	00803fc4 	movi	r2,255
    9930:	488e703a 	and	r7,r9,r2
    9934:	00802004 	movi	r2,128
    9938:	0007883a 	mov	r3,zero
    993c:	0011883a 	mov	r8,zero
    9940:	38801826 	beq	r7,r2,99a4 <__muldf3+0x360>
    9944:	008000c4 	movi	r2,3
    9948:	d9000e04 	addi	r4,sp,56
    994c:	da801215 	stw	r10,72(sp)
    9950:	d8800e15 	stw	r2,56(sp)
    9954:	da401115 	stw	r9,68(sp)
    9958:	003f6a06 	br	9704 <__muldf3+0xc0>
    995c:	89802126 	beq	r17,r6,99e4 <__muldf3+0x3a0>
    9960:	0009883a 	mov	r4,zero
    9964:	5105883a 	add	r2,r10,r4
    9968:	128d803a 	cmpltu	r6,r2,r10
    996c:	5d07883a 	add	r3,r11,r20
    9970:	30cd883a 	add	r6,r6,r3
    9974:	0021883a 	mov	r16,zero
    9978:	0023883a 	mov	r17,zero
    997c:	1025883a 	mov	r18,r2
    9980:	3027883a 	mov	r19,r6
    9984:	32ff9e2e 	bgeu	r6,r11,9800 <__muldf3+0x1bc>
    9988:	00800044 	movi	r2,1
    998c:	8089883a 	add	r4,r16,r2
    9990:	240d803a 	cmpltu	r6,r4,r16
    9994:	344d883a 	add	r6,r6,r17
    9998:	2021883a 	mov	r16,r4
    999c:	3023883a 	mov	r17,r6
    99a0:	003f9806 	br	9804 <__muldf3+0x1c0>
    99a4:	403fe71e 	bne	r8,zero,9944 <__muldf3+0x300>
    99a8:	01004004 	movi	r4,256
    99ac:	4904703a 	and	r2,r9,r4
    99b0:	10c4b03a 	or	r2,r2,r3
    99b4:	103fe31e 	bne	r2,zero,9944 <__muldf3+0x300>
    99b8:	94c4b03a 	or	r2,r18,r19
    99bc:	103fe126 	beq	r2,zero,9944 <__muldf3+0x300>
    99c0:	49c5883a 	add	r2,r9,r7
    99c4:	1251803a 	cmpltu	r8,r2,r9
    99c8:	4291883a 	add	r8,r8,r10
    99cc:	013fc004 	movi	r4,-256
    99d0:	1112703a 	and	r9,r2,r4
    99d4:	4015883a 	mov	r10,r8
    99d8:	003fda06 	br	9944 <__muldf3+0x300>
    99dc:	6813883a 	mov	r9,r13
    99e0:	003fce06 	br	991c <__muldf3+0x2d8>
    99e4:	143f7c36 	bltu	r2,r16,97d8 <__muldf3+0x194>
    99e8:	003fdd06 	br	9960 <__muldf3+0x31c>
    99ec:	12bf852e 	bgeu	r2,r10,9804 <__muldf3+0x1c0>
    99f0:	003fe506 	br	9988 <__muldf3+0x344>
    99f4:	00800084 	movi	r2,2
    99f8:	20bf351e 	bne	r4,r2,96d0 <__muldf3+0x8c>
    99fc:	01000074 	movhi	r4,1
    9a00:	2136f704 	addi	r4,r4,-9252
    9a04:	003f3f06 	br	9704 <__muldf3+0xc0>

00009a08 <__divdf3>:
    9a08:	deffed04 	addi	sp,sp,-76
    9a0c:	dcc01115 	stw	r19,68(sp)
    9a10:	dcc00404 	addi	r19,sp,16
    9a14:	2011883a 	mov	r8,r4
    9a18:	2813883a 	mov	r9,r5
    9a1c:	dc000e15 	stw	r16,56(sp)
    9a20:	d809883a 	mov	r4,sp
    9a24:	980b883a 	mov	r5,r19
    9a28:	dc000904 	addi	r16,sp,36
    9a2c:	dfc01215 	stw	ra,72(sp)
    9a30:	da400115 	stw	r9,4(sp)
    9a34:	d9c00315 	stw	r7,12(sp)
    9a38:	da000015 	stw	r8,0(sp)
    9a3c:	d9800215 	stw	r6,8(sp)
    9a40:	dc801015 	stw	r18,64(sp)
    9a44:	dc400f15 	stw	r17,60(sp)
    9a48:	000a7240 	call	a724 <__unpack_d>
    9a4c:	d9000204 	addi	r4,sp,8
    9a50:	800b883a 	mov	r5,r16
    9a54:	000a7240 	call	a724 <__unpack_d>
    9a58:	d9000417 	ldw	r4,16(sp)
    9a5c:	00800044 	movi	r2,1
    9a60:	11000b2e 	bgeu	r2,r4,9a90 <__divdf3+0x88>
    9a64:	d9400917 	ldw	r5,36(sp)
    9a68:	1140762e 	bgeu	r2,r5,9c44 <__divdf3+0x23c>
    9a6c:	d8800517 	ldw	r2,20(sp)
    9a70:	d8c00a17 	ldw	r3,40(sp)
    9a74:	01800104 	movi	r6,4
    9a78:	10c4f03a 	xor	r2,r2,r3
    9a7c:	d8800515 	stw	r2,20(sp)
    9a80:	21800226 	beq	r4,r6,9a8c <__divdf3+0x84>
    9a84:	00800084 	movi	r2,2
    9a88:	2080141e 	bne	r4,r2,9adc <__divdf3+0xd4>
    9a8c:	29000926 	beq	r5,r4,9ab4 <__divdf3+0xac>
    9a90:	9809883a 	mov	r4,r19
    9a94:	000a4100 	call	a410 <__pack_d>
    9a98:	dfc01217 	ldw	ra,72(sp)
    9a9c:	dcc01117 	ldw	r19,68(sp)
    9aa0:	dc801017 	ldw	r18,64(sp)
    9aa4:	dc400f17 	ldw	r17,60(sp)
    9aa8:	dc000e17 	ldw	r16,56(sp)
    9aac:	dec01304 	addi	sp,sp,76
    9ab0:	f800283a 	ret
    9ab4:	01000074 	movhi	r4,1
    9ab8:	2136f704 	addi	r4,r4,-9252
    9abc:	000a4100 	call	a410 <__pack_d>
    9ac0:	dfc01217 	ldw	ra,72(sp)
    9ac4:	dcc01117 	ldw	r19,68(sp)
    9ac8:	dc801017 	ldw	r18,64(sp)
    9acc:	dc400f17 	ldw	r17,60(sp)
    9ad0:	dc000e17 	ldw	r16,56(sp)
    9ad4:	dec01304 	addi	sp,sp,76
    9ad8:	f800283a 	ret
    9adc:	29805b26 	beq	r5,r6,9c4c <__divdf3+0x244>
    9ae0:	28802d26 	beq	r5,r2,9b98 <__divdf3+0x190>
    9ae4:	d8c00617 	ldw	r3,24(sp)
    9ae8:	d8800b17 	ldw	r2,44(sp)
    9aec:	d9c00817 	ldw	r7,32(sp)
    9af0:	dc400d17 	ldw	r17,52(sp)
    9af4:	188bc83a 	sub	r5,r3,r2
    9af8:	d9800717 	ldw	r6,28(sp)
    9afc:	dc000c17 	ldw	r16,48(sp)
    9b00:	d9400615 	stw	r5,24(sp)
    9b04:	3c403836 	bltu	r7,r17,9be8 <__divdf3+0x1e0>
    9b08:	89c03626 	beq	r17,r7,9be4 <__divdf3+0x1dc>
    9b0c:	0015883a 	mov	r10,zero
    9b10:	001d883a 	mov	r14,zero
    9b14:	02c40034 	movhi	r11,4096
    9b18:	001f883a 	mov	r15,zero
    9b1c:	003f883a 	mov	ra,zero
    9b20:	04800f44 	movi	r18,61
    9b24:	00000f06 	br	9b64 <__divdf3+0x15c>
    9b28:	601d883a 	mov	r14,r12
    9b2c:	681f883a 	mov	r15,r13
    9b30:	400d883a 	mov	r6,r8
    9b34:	100f883a 	mov	r7,r2
    9b38:	3191883a 	add	r8,r6,r6
    9b3c:	5808d07a 	srli	r4,r11,1
    9b40:	4185803a 	cmpltu	r2,r8,r6
    9b44:	39d3883a 	add	r9,r7,r7
    9b48:	28c6b03a 	or	r3,r5,r3
    9b4c:	1245883a 	add	r2,r2,r9
    9b50:	1815883a 	mov	r10,r3
    9b54:	2017883a 	mov	r11,r4
    9b58:	400d883a 	mov	r6,r8
    9b5c:	100f883a 	mov	r7,r2
    9b60:	fc801726 	beq	ra,r18,9bc0 <__divdf3+0x1b8>
    9b64:	580a97fa 	slli	r5,r11,31
    9b68:	5006d07a 	srli	r3,r10,1
    9b6c:	ffc00044 	addi	ra,ra,1
    9b70:	3c7ff136 	bltu	r7,r17,9b38 <__divdf3+0x130>
    9b74:	3411c83a 	sub	r8,r6,r16
    9b78:	3205803a 	cmpltu	r2,r6,r8
    9b7c:	3c53c83a 	sub	r9,r7,r17
    9b80:	7298b03a 	or	r12,r14,r10
    9b84:	7adab03a 	or	r13,r15,r11
    9b88:	4885c83a 	sub	r2,r9,r2
    9b8c:	89ffe61e 	bne	r17,r7,9b28 <__divdf3+0x120>
    9b90:	343fe936 	bltu	r6,r16,9b38 <__divdf3+0x130>
    9b94:	003fe406 	br	9b28 <__divdf3+0x120>
    9b98:	9809883a 	mov	r4,r19
    9b9c:	d9800415 	stw	r6,16(sp)
    9ba0:	000a4100 	call	a410 <__pack_d>
    9ba4:	dfc01217 	ldw	ra,72(sp)
    9ba8:	dcc01117 	ldw	r19,68(sp)
    9bac:	dc801017 	ldw	r18,64(sp)
    9bb0:	dc400f17 	ldw	r17,60(sp)
    9bb4:	dc000e17 	ldw	r16,56(sp)
    9bb8:	dec01304 	addi	sp,sp,76
    9bbc:	f800283a 	ret
    9bc0:	00803fc4 	movi	r2,255
    9bc4:	7090703a 	and	r8,r14,r2
    9bc8:	00802004 	movi	r2,128
    9bcc:	0007883a 	mov	r3,zero
    9bd0:	0013883a 	mov	r9,zero
    9bd4:	40800d26 	beq	r8,r2,9c0c <__divdf3+0x204>
    9bd8:	dbc00815 	stw	r15,32(sp)
    9bdc:	db800715 	stw	r14,28(sp)
    9be0:	003fab06 	br	9a90 <__divdf3+0x88>
    9be4:	343fc92e 	bgeu	r6,r16,9b0c <__divdf3+0x104>
    9be8:	3185883a 	add	r2,r6,r6
    9bec:	1189803a 	cmpltu	r4,r2,r6
    9bf0:	39c7883a 	add	r3,r7,r7
    9bf4:	20c9883a 	add	r4,r4,r3
    9bf8:	297fffc4 	addi	r5,r5,-1
    9bfc:	100d883a 	mov	r6,r2
    9c00:	200f883a 	mov	r7,r4
    9c04:	d9400615 	stw	r5,24(sp)
    9c08:	003fc006 	br	9b0c <__divdf3+0x104>
    9c0c:	483ff21e 	bne	r9,zero,9bd8 <__divdf3+0x1d0>
    9c10:	01004004 	movi	r4,256
    9c14:	7104703a 	and	r2,r14,r4
    9c18:	10c4b03a 	or	r2,r2,r3
    9c1c:	103fee1e 	bne	r2,zero,9bd8 <__divdf3+0x1d0>
    9c20:	31c4b03a 	or	r2,r6,r7
    9c24:	103fec26 	beq	r2,zero,9bd8 <__divdf3+0x1d0>
    9c28:	7205883a 	add	r2,r14,r8
    9c2c:	1391803a 	cmpltu	r8,r2,r14
    9c30:	43d1883a 	add	r8,r8,r15
    9c34:	013fc004 	movi	r4,-256
    9c38:	111c703a 	and	r14,r2,r4
    9c3c:	401f883a 	mov	r15,r8
    9c40:	003fe506 	br	9bd8 <__divdf3+0x1d0>
    9c44:	8009883a 	mov	r4,r16
    9c48:	003f9206 	br	9a94 <__divdf3+0x8c>
    9c4c:	9809883a 	mov	r4,r19
    9c50:	d8000715 	stw	zero,28(sp)
    9c54:	d8000815 	stw	zero,32(sp)
    9c58:	d8000615 	stw	zero,24(sp)
    9c5c:	003f8d06 	br	9a94 <__divdf3+0x8c>

00009c60 <__eqdf2>:
    9c60:	deffef04 	addi	sp,sp,-68
    9c64:	dc400f15 	stw	r17,60(sp)
    9c68:	dc400404 	addi	r17,sp,16
    9c6c:	2005883a 	mov	r2,r4
    9c70:	2807883a 	mov	r3,r5
    9c74:	dc000e15 	stw	r16,56(sp)
    9c78:	d809883a 	mov	r4,sp
    9c7c:	880b883a 	mov	r5,r17
    9c80:	dc000904 	addi	r16,sp,36
    9c84:	d8c00115 	stw	r3,4(sp)
    9c88:	d8800015 	stw	r2,0(sp)
    9c8c:	d9800215 	stw	r6,8(sp)
    9c90:	dfc01015 	stw	ra,64(sp)
    9c94:	d9c00315 	stw	r7,12(sp)
    9c98:	000a7240 	call	a724 <__unpack_d>
    9c9c:	d9000204 	addi	r4,sp,8
    9ca0:	800b883a 	mov	r5,r16
    9ca4:	000a7240 	call	a724 <__unpack_d>
    9ca8:	d8800417 	ldw	r2,16(sp)
    9cac:	00c00044 	movi	r3,1
    9cb0:	180d883a 	mov	r6,r3
    9cb4:	1880062e 	bgeu	r3,r2,9cd0 <__eqdf2+0x70>
    9cb8:	d8800917 	ldw	r2,36(sp)
    9cbc:	8809883a 	mov	r4,r17
    9cc0:	800b883a 	mov	r5,r16
    9cc4:	1880022e 	bgeu	r3,r2,9cd0 <__eqdf2+0x70>
    9cc8:	000a85c0 	call	a85c <__fpcmp_parts_d>
    9ccc:	100d883a 	mov	r6,r2
    9cd0:	3005883a 	mov	r2,r6
    9cd4:	dfc01017 	ldw	ra,64(sp)
    9cd8:	dc400f17 	ldw	r17,60(sp)
    9cdc:	dc000e17 	ldw	r16,56(sp)
    9ce0:	dec01104 	addi	sp,sp,68
    9ce4:	f800283a 	ret

00009ce8 <__nedf2>:
    9ce8:	deffef04 	addi	sp,sp,-68
    9cec:	dc400f15 	stw	r17,60(sp)
    9cf0:	dc400404 	addi	r17,sp,16
    9cf4:	2005883a 	mov	r2,r4
    9cf8:	2807883a 	mov	r3,r5
    9cfc:	dc000e15 	stw	r16,56(sp)
    9d00:	d809883a 	mov	r4,sp
    9d04:	880b883a 	mov	r5,r17
    9d08:	dc000904 	addi	r16,sp,36
    9d0c:	d8c00115 	stw	r3,4(sp)
    9d10:	d8800015 	stw	r2,0(sp)
    9d14:	d9800215 	stw	r6,8(sp)
    9d18:	dfc01015 	stw	ra,64(sp)
    9d1c:	d9c00315 	stw	r7,12(sp)
    9d20:	000a7240 	call	a724 <__unpack_d>
    9d24:	d9000204 	addi	r4,sp,8
    9d28:	800b883a 	mov	r5,r16
    9d2c:	000a7240 	call	a724 <__unpack_d>
    9d30:	d8800417 	ldw	r2,16(sp)
    9d34:	00c00044 	movi	r3,1
    9d38:	180d883a 	mov	r6,r3
    9d3c:	1880062e 	bgeu	r3,r2,9d58 <__nedf2+0x70>
    9d40:	d8800917 	ldw	r2,36(sp)
    9d44:	8809883a 	mov	r4,r17
    9d48:	800b883a 	mov	r5,r16
    9d4c:	1880022e 	bgeu	r3,r2,9d58 <__nedf2+0x70>
    9d50:	000a85c0 	call	a85c <__fpcmp_parts_d>
    9d54:	100d883a 	mov	r6,r2
    9d58:	3005883a 	mov	r2,r6
    9d5c:	dfc01017 	ldw	ra,64(sp)
    9d60:	dc400f17 	ldw	r17,60(sp)
    9d64:	dc000e17 	ldw	r16,56(sp)
    9d68:	dec01104 	addi	sp,sp,68
    9d6c:	f800283a 	ret

00009d70 <__gtdf2>:
    9d70:	deffef04 	addi	sp,sp,-68
    9d74:	dc400f15 	stw	r17,60(sp)
    9d78:	dc400404 	addi	r17,sp,16
    9d7c:	2005883a 	mov	r2,r4
    9d80:	2807883a 	mov	r3,r5
    9d84:	dc000e15 	stw	r16,56(sp)
    9d88:	d809883a 	mov	r4,sp
    9d8c:	880b883a 	mov	r5,r17
    9d90:	dc000904 	addi	r16,sp,36
    9d94:	d8c00115 	stw	r3,4(sp)
    9d98:	d8800015 	stw	r2,0(sp)
    9d9c:	d9800215 	stw	r6,8(sp)
    9da0:	dfc01015 	stw	ra,64(sp)
    9da4:	d9c00315 	stw	r7,12(sp)
    9da8:	000a7240 	call	a724 <__unpack_d>
    9dac:	d9000204 	addi	r4,sp,8
    9db0:	800b883a 	mov	r5,r16
    9db4:	000a7240 	call	a724 <__unpack_d>
    9db8:	d8800417 	ldw	r2,16(sp)
    9dbc:	00c00044 	movi	r3,1
    9dc0:	01bfffc4 	movi	r6,-1
    9dc4:	1880062e 	bgeu	r3,r2,9de0 <__gtdf2+0x70>
    9dc8:	d8800917 	ldw	r2,36(sp)
    9dcc:	8809883a 	mov	r4,r17
    9dd0:	800b883a 	mov	r5,r16
    9dd4:	1880022e 	bgeu	r3,r2,9de0 <__gtdf2+0x70>
    9dd8:	000a85c0 	call	a85c <__fpcmp_parts_d>
    9ddc:	100d883a 	mov	r6,r2
    9de0:	3005883a 	mov	r2,r6
    9de4:	dfc01017 	ldw	ra,64(sp)
    9de8:	dc400f17 	ldw	r17,60(sp)
    9dec:	dc000e17 	ldw	r16,56(sp)
    9df0:	dec01104 	addi	sp,sp,68
    9df4:	f800283a 	ret

00009df8 <__gedf2>:
    9df8:	deffef04 	addi	sp,sp,-68
    9dfc:	dc400f15 	stw	r17,60(sp)
    9e00:	dc400404 	addi	r17,sp,16
    9e04:	2005883a 	mov	r2,r4
    9e08:	2807883a 	mov	r3,r5
    9e0c:	dc000e15 	stw	r16,56(sp)
    9e10:	d809883a 	mov	r4,sp
    9e14:	880b883a 	mov	r5,r17
    9e18:	dc000904 	addi	r16,sp,36
    9e1c:	d8c00115 	stw	r3,4(sp)
    9e20:	d8800015 	stw	r2,0(sp)
    9e24:	d9800215 	stw	r6,8(sp)
    9e28:	dfc01015 	stw	ra,64(sp)
    9e2c:	d9c00315 	stw	r7,12(sp)
    9e30:	000a7240 	call	a724 <__unpack_d>
    9e34:	d9000204 	addi	r4,sp,8
    9e38:	800b883a 	mov	r5,r16
    9e3c:	000a7240 	call	a724 <__unpack_d>
    9e40:	d8800417 	ldw	r2,16(sp)
    9e44:	00c00044 	movi	r3,1
    9e48:	01bfffc4 	movi	r6,-1
    9e4c:	1880062e 	bgeu	r3,r2,9e68 <__gedf2+0x70>
    9e50:	d8800917 	ldw	r2,36(sp)
    9e54:	8809883a 	mov	r4,r17
    9e58:	800b883a 	mov	r5,r16
    9e5c:	1880022e 	bgeu	r3,r2,9e68 <__gedf2+0x70>
    9e60:	000a85c0 	call	a85c <__fpcmp_parts_d>
    9e64:	100d883a 	mov	r6,r2
    9e68:	3005883a 	mov	r2,r6
    9e6c:	dfc01017 	ldw	ra,64(sp)
    9e70:	dc400f17 	ldw	r17,60(sp)
    9e74:	dc000e17 	ldw	r16,56(sp)
    9e78:	dec01104 	addi	sp,sp,68
    9e7c:	f800283a 	ret

00009e80 <__ltdf2>:
    9e80:	deffef04 	addi	sp,sp,-68
    9e84:	dc400f15 	stw	r17,60(sp)
    9e88:	dc400404 	addi	r17,sp,16
    9e8c:	2005883a 	mov	r2,r4
    9e90:	2807883a 	mov	r3,r5
    9e94:	dc000e15 	stw	r16,56(sp)
    9e98:	d809883a 	mov	r4,sp
    9e9c:	880b883a 	mov	r5,r17
    9ea0:	dc000904 	addi	r16,sp,36
    9ea4:	d8c00115 	stw	r3,4(sp)
    9ea8:	d8800015 	stw	r2,0(sp)
    9eac:	d9800215 	stw	r6,8(sp)
    9eb0:	dfc01015 	stw	ra,64(sp)
    9eb4:	d9c00315 	stw	r7,12(sp)
    9eb8:	000a7240 	call	a724 <__unpack_d>
    9ebc:	d9000204 	addi	r4,sp,8
    9ec0:	800b883a 	mov	r5,r16
    9ec4:	000a7240 	call	a724 <__unpack_d>
    9ec8:	d8800417 	ldw	r2,16(sp)
    9ecc:	00c00044 	movi	r3,1
    9ed0:	180d883a 	mov	r6,r3
    9ed4:	1880062e 	bgeu	r3,r2,9ef0 <__ltdf2+0x70>
    9ed8:	d8800917 	ldw	r2,36(sp)
    9edc:	8809883a 	mov	r4,r17
    9ee0:	800b883a 	mov	r5,r16
    9ee4:	1880022e 	bgeu	r3,r2,9ef0 <__ltdf2+0x70>
    9ee8:	000a85c0 	call	a85c <__fpcmp_parts_d>
    9eec:	100d883a 	mov	r6,r2
    9ef0:	3005883a 	mov	r2,r6
    9ef4:	dfc01017 	ldw	ra,64(sp)
    9ef8:	dc400f17 	ldw	r17,60(sp)
    9efc:	dc000e17 	ldw	r16,56(sp)
    9f00:	dec01104 	addi	sp,sp,68
    9f04:	f800283a 	ret

00009f08 <__floatsidf>:
    9f08:	2006d7fa 	srli	r3,r4,31
    9f0c:	defff604 	addi	sp,sp,-40
    9f10:	008000c4 	movi	r2,3
    9f14:	dfc00915 	stw	ra,36(sp)
    9f18:	dcc00815 	stw	r19,32(sp)
    9f1c:	dc800715 	stw	r18,28(sp)
    9f20:	dc400615 	stw	r17,24(sp)
    9f24:	dc000515 	stw	r16,20(sp)
    9f28:	d8800015 	stw	r2,0(sp)
    9f2c:	d8c00115 	stw	r3,4(sp)
    9f30:	20000f1e 	bne	r4,zero,9f70 <__floatsidf+0x68>
    9f34:	00800084 	movi	r2,2
    9f38:	d8800015 	stw	r2,0(sp)
    9f3c:	d809883a 	mov	r4,sp
    9f40:	000a4100 	call	a410 <__pack_d>
    9f44:	1009883a 	mov	r4,r2
    9f48:	180b883a 	mov	r5,r3
    9f4c:	2005883a 	mov	r2,r4
    9f50:	2807883a 	mov	r3,r5
    9f54:	dfc00917 	ldw	ra,36(sp)
    9f58:	dcc00817 	ldw	r19,32(sp)
    9f5c:	dc800717 	ldw	r18,28(sp)
    9f60:	dc400617 	ldw	r17,24(sp)
    9f64:	dc000517 	ldw	r16,20(sp)
    9f68:	dec00a04 	addi	sp,sp,40
    9f6c:	f800283a 	ret
    9f70:	00800f04 	movi	r2,60
    9f74:	1807003a 	cmpeq	r3,r3,zero
    9f78:	d8800215 	stw	r2,8(sp)
    9f7c:	18001126 	beq	r3,zero,9fc4 <__floatsidf+0xbc>
    9f80:	0027883a 	mov	r19,zero
    9f84:	2025883a 	mov	r18,r4
    9f88:	d9000315 	stw	r4,12(sp)
    9f8c:	dcc00415 	stw	r19,16(sp)
    9f90:	000a3900 	call	a390 <__clzsi2>
    9f94:	11000744 	addi	r4,r2,29
    9f98:	013fe80e 	bge	zero,r4,9f3c <__floatsidf+0x34>
    9f9c:	10bfff44 	addi	r2,r2,-3
    9fa0:	10000c16 	blt	r2,zero,9fd4 <__floatsidf+0xcc>
    9fa4:	90a2983a 	sll	r17,r18,r2
    9fa8:	0021883a 	mov	r16,zero
    9fac:	d8800217 	ldw	r2,8(sp)
    9fb0:	dc400415 	stw	r17,16(sp)
    9fb4:	dc000315 	stw	r16,12(sp)
    9fb8:	1105c83a 	sub	r2,r2,r4
    9fbc:	d8800215 	stw	r2,8(sp)
    9fc0:	003fde06 	br	9f3c <__floatsidf+0x34>
    9fc4:	00a00034 	movhi	r2,32768
    9fc8:	20800a26 	beq	r4,r2,9ff4 <__floatsidf+0xec>
    9fcc:	0109c83a 	sub	r4,zero,r4
    9fd0:	003feb06 	br	9f80 <__floatsidf+0x78>
    9fd4:	9006d07a 	srli	r3,r18,1
    9fd8:	008007c4 	movi	r2,31
    9fdc:	1105c83a 	sub	r2,r2,r4
    9fe0:	1886d83a 	srl	r3,r3,r2
    9fe4:	9922983a 	sll	r17,r19,r4
    9fe8:	9120983a 	sll	r16,r18,r4
    9fec:	1c62b03a 	or	r17,r3,r17
    9ff0:	003fee06 	br	9fac <__floatsidf+0xa4>
    9ff4:	0009883a 	mov	r4,zero
    9ff8:	01707834 	movhi	r5,49632
    9ffc:	003fd306 	br	9f4c <__floatsidf+0x44>

0000a000 <__fixdfsi>:
    a000:	defff804 	addi	sp,sp,-32
    a004:	2005883a 	mov	r2,r4
    a008:	2807883a 	mov	r3,r5
    a00c:	d809883a 	mov	r4,sp
    a010:	d9400204 	addi	r5,sp,8
    a014:	d8c00115 	stw	r3,4(sp)
    a018:	d8800015 	stw	r2,0(sp)
    a01c:	dfc00715 	stw	ra,28(sp)
    a020:	000a7240 	call	a724 <__unpack_d>
    a024:	d8c00217 	ldw	r3,8(sp)
    a028:	00800084 	movi	r2,2
    a02c:	1880051e 	bne	r3,r2,a044 <__fixdfsi+0x44>
    a030:	0007883a 	mov	r3,zero
    a034:	1805883a 	mov	r2,r3
    a038:	dfc00717 	ldw	ra,28(sp)
    a03c:	dec00804 	addi	sp,sp,32
    a040:	f800283a 	ret
    a044:	00800044 	movi	r2,1
    a048:	10fff92e 	bgeu	r2,r3,a030 <__fixdfsi+0x30>
    a04c:	00800104 	movi	r2,4
    a050:	18800426 	beq	r3,r2,a064 <__fixdfsi+0x64>
    a054:	d8c00417 	ldw	r3,16(sp)
    a058:	183ff516 	blt	r3,zero,a030 <__fixdfsi+0x30>
    a05c:	00800784 	movi	r2,30
    a060:	10c0080e 	bge	r2,r3,a084 <__fixdfsi+0x84>
    a064:	d8800317 	ldw	r2,12(sp)
    a068:	1000121e 	bne	r2,zero,a0b4 <__fixdfsi+0xb4>
    a06c:	00e00034 	movhi	r3,32768
    a070:	18ffffc4 	addi	r3,r3,-1
    a074:	1805883a 	mov	r2,r3
    a078:	dfc00717 	ldw	ra,28(sp)
    a07c:	dec00804 	addi	sp,sp,32
    a080:	f800283a 	ret
    a084:	00800f04 	movi	r2,60
    a088:	10d1c83a 	sub	r8,r2,r3
    a08c:	40bff804 	addi	r2,r8,-32
    a090:	d9800517 	ldw	r6,20(sp)
    a094:	d9c00617 	ldw	r7,24(sp)
    a098:	10000816 	blt	r2,zero,a0bc <__fixdfsi+0xbc>
    a09c:	3888d83a 	srl	r4,r7,r2
    a0a0:	d8800317 	ldw	r2,12(sp)
    a0a4:	2007883a 	mov	r3,r4
    a0a8:	103fe226 	beq	r2,zero,a034 <__fixdfsi+0x34>
    a0ac:	0107c83a 	sub	r3,zero,r4
    a0b0:	003fe006 	br	a034 <__fixdfsi+0x34>
    a0b4:	00e00034 	movhi	r3,32768
    a0b8:	003fde06 	br	a034 <__fixdfsi+0x34>
    a0bc:	39c7883a 	add	r3,r7,r7
    a0c0:	008007c4 	movi	r2,31
    a0c4:	1205c83a 	sub	r2,r2,r8
    a0c8:	1886983a 	sll	r3,r3,r2
    a0cc:	3208d83a 	srl	r4,r6,r8
    a0d0:	1908b03a 	or	r4,r3,r4
    a0d4:	003ff206 	br	a0a0 <__fixdfsi+0xa0>

0000a0d8 <__floatunsidf>:
    a0d8:	defff204 	addi	sp,sp,-56
    a0dc:	dfc00d15 	stw	ra,52(sp)
    a0e0:	ddc00c15 	stw	r23,48(sp)
    a0e4:	dd800b15 	stw	r22,44(sp)
    a0e8:	dd400a15 	stw	r21,40(sp)
    a0ec:	dd000915 	stw	r20,36(sp)
    a0f0:	dcc00815 	stw	r19,32(sp)
    a0f4:	dc800715 	stw	r18,28(sp)
    a0f8:	dc400615 	stw	r17,24(sp)
    a0fc:	dc000515 	stw	r16,20(sp)
    a100:	d8000115 	stw	zero,4(sp)
    a104:	20000f1e 	bne	r4,zero,a144 <__floatunsidf+0x6c>
    a108:	00800084 	movi	r2,2
    a10c:	d8800015 	stw	r2,0(sp)
    a110:	d809883a 	mov	r4,sp
    a114:	000a4100 	call	a410 <__pack_d>
    a118:	dfc00d17 	ldw	ra,52(sp)
    a11c:	ddc00c17 	ldw	r23,48(sp)
    a120:	dd800b17 	ldw	r22,44(sp)
    a124:	dd400a17 	ldw	r21,40(sp)
    a128:	dd000917 	ldw	r20,36(sp)
    a12c:	dcc00817 	ldw	r19,32(sp)
    a130:	dc800717 	ldw	r18,28(sp)
    a134:	dc400617 	ldw	r17,24(sp)
    a138:	dc000517 	ldw	r16,20(sp)
    a13c:	dec00e04 	addi	sp,sp,56
    a140:	f800283a 	ret
    a144:	008000c4 	movi	r2,3
    a148:	00c00f04 	movi	r3,60
    a14c:	002f883a 	mov	r23,zero
    a150:	202d883a 	mov	r22,r4
    a154:	d8800015 	stw	r2,0(sp)
    a158:	d8c00215 	stw	r3,8(sp)
    a15c:	d9000315 	stw	r4,12(sp)
    a160:	ddc00415 	stw	r23,16(sp)
    a164:	000a3900 	call	a390 <__clzsi2>
    a168:	12400744 	addi	r9,r2,29
    a16c:	48000b16 	blt	r9,zero,a19c <__floatunsidf+0xc4>
    a170:	483fe726 	beq	r9,zero,a110 <__floatunsidf+0x38>
    a174:	10bfff44 	addi	r2,r2,-3
    a178:	10002e16 	blt	r2,zero,a234 <__floatunsidf+0x15c>
    a17c:	b0a2983a 	sll	r17,r22,r2
    a180:	0021883a 	mov	r16,zero
    a184:	d8800217 	ldw	r2,8(sp)
    a188:	dc400415 	stw	r17,16(sp)
    a18c:	dc000315 	stw	r16,12(sp)
    a190:	1245c83a 	sub	r2,r2,r9
    a194:	d8800215 	stw	r2,8(sp)
    a198:	003fdd06 	br	a110 <__floatunsidf+0x38>
    a19c:	0255c83a 	sub	r10,zero,r9
    a1a0:	51bff804 	addi	r6,r10,-32
    a1a4:	30001b16 	blt	r6,zero,a214 <__floatunsidf+0x13c>
    a1a8:	b9a8d83a 	srl	r20,r23,r6
    a1ac:	002b883a 	mov	r21,zero
    a1b0:	000f883a 	mov	r7,zero
    a1b4:	01000044 	movi	r4,1
    a1b8:	0011883a 	mov	r8,zero
    a1bc:	30002516 	blt	r6,zero,a254 <__floatunsidf+0x17c>
    a1c0:	21a6983a 	sll	r19,r4,r6
    a1c4:	0025883a 	mov	r18,zero
    a1c8:	00bfffc4 	movi	r2,-1
    a1cc:	9089883a 	add	r4,r18,r2
    a1d0:	988b883a 	add	r5,r19,r2
    a1d4:	248d803a 	cmpltu	r6,r4,r18
    a1d8:	314b883a 	add	r5,r6,r5
    a1dc:	b104703a 	and	r2,r22,r4
    a1e0:	b946703a 	and	r3,r23,r5
    a1e4:	10c4b03a 	or	r2,r2,r3
    a1e8:	10000226 	beq	r2,zero,a1f4 <__floatunsidf+0x11c>
    a1ec:	01c00044 	movi	r7,1
    a1f0:	0011883a 	mov	r8,zero
    a1f4:	d9000217 	ldw	r4,8(sp)
    a1f8:	a1c4b03a 	or	r2,r20,r7
    a1fc:	aa06b03a 	or	r3,r21,r8
    a200:	2249c83a 	sub	r4,r4,r9
    a204:	d8c00415 	stw	r3,16(sp)
    a208:	d9000215 	stw	r4,8(sp)
    a20c:	d8800315 	stw	r2,12(sp)
    a210:	003fbf06 	br	a110 <__floatunsidf+0x38>
    a214:	bdc7883a 	add	r3,r23,r23
    a218:	008007c4 	movi	r2,31
    a21c:	1285c83a 	sub	r2,r2,r10
    a220:	1886983a 	sll	r3,r3,r2
    a224:	b2a8d83a 	srl	r20,r22,r10
    a228:	baaad83a 	srl	r21,r23,r10
    a22c:	1d28b03a 	or	r20,r3,r20
    a230:	003fdf06 	br	a1b0 <__floatunsidf+0xd8>
    a234:	b006d07a 	srli	r3,r22,1
    a238:	008007c4 	movi	r2,31
    a23c:	1245c83a 	sub	r2,r2,r9
    a240:	1886d83a 	srl	r3,r3,r2
    a244:	ba62983a 	sll	r17,r23,r9
    a248:	b260983a 	sll	r16,r22,r9
    a24c:	1c62b03a 	or	r17,r3,r17
    a250:	003fcc06 	br	a184 <__floatunsidf+0xac>
    a254:	2006d07a 	srli	r3,r4,1
    a258:	008007c4 	movi	r2,31
    a25c:	1285c83a 	sub	r2,r2,r10
    a260:	18a6d83a 	srl	r19,r3,r2
    a264:	22a4983a 	sll	r18,r4,r10
    a268:	003fd706 	br	a1c8 <__floatunsidf+0xf0>

0000a26c <__muldi3>:
    a26c:	defff204 	addi	sp,sp,-56
    a270:	df000c15 	stw	fp,48(sp)
    a274:	3038d43a 	srli	fp,r6,16
    a278:	dd000815 	stw	r20,32(sp)
    a27c:	dc400515 	stw	r17,20(sp)
    a280:	2028d43a 	srli	r20,r4,16
    a284:	247fffcc 	andi	r17,r4,65535
    a288:	dc000415 	stw	r16,16(sp)
    a28c:	343fffcc 	andi	r16,r6,65535
    a290:	dcc00715 	stw	r19,28(sp)
    a294:	d9000015 	stw	r4,0(sp)
    a298:	2827883a 	mov	r19,r5
    a29c:	8809883a 	mov	r4,r17
    a2a0:	d9400115 	stw	r5,4(sp)
    a2a4:	800b883a 	mov	r5,r16
    a2a8:	d9800215 	stw	r6,8(sp)
    a2ac:	dfc00d15 	stw	ra,52(sp)
    a2b0:	d9c00315 	stw	r7,12(sp)
    a2b4:	dd800a15 	stw	r22,40(sp)
    a2b8:	dd400915 	stw	r21,36(sp)
    a2bc:	302d883a 	mov	r22,r6
    a2c0:	ddc00b15 	stw	r23,44(sp)
    a2c4:	dc800615 	stw	r18,24(sp)
    a2c8:	0000e180 	call	e18 <__mulsi3>
    a2cc:	8809883a 	mov	r4,r17
    a2d0:	e00b883a 	mov	r5,fp
    a2d4:	102b883a 	mov	r21,r2
    a2d8:	0000e180 	call	e18 <__mulsi3>
    a2dc:	800b883a 	mov	r5,r16
    a2e0:	a009883a 	mov	r4,r20
    a2e4:	1023883a 	mov	r17,r2
    a2e8:	0000e180 	call	e18 <__mulsi3>
    a2ec:	a009883a 	mov	r4,r20
    a2f0:	e00b883a 	mov	r5,fp
    a2f4:	1021883a 	mov	r16,r2
    a2f8:	0000e180 	call	e18 <__mulsi3>
    a2fc:	a8ffffcc 	andi	r3,r21,65535
    a300:	a82ad43a 	srli	r21,r21,16
    a304:	8c23883a 	add	r17,r17,r16
    a308:	1011883a 	mov	r8,r2
    a30c:	ac6b883a 	add	r21,r21,r17
    a310:	a804943a 	slli	r2,r21,16
    a314:	b009883a 	mov	r4,r22
    a318:	980b883a 	mov	r5,r19
    a31c:	10c7883a 	add	r3,r2,r3
    a320:	a812d43a 	srli	r9,r21,16
    a324:	180d883a 	mov	r6,r3
    a328:	ac00022e 	bgeu	r21,r16,a334 <__muldi3+0xc8>
    a32c:	00800074 	movhi	r2,1
    a330:	4091883a 	add	r8,r8,r2
    a334:	4267883a 	add	r19,r8,r9
    a338:	302d883a 	mov	r22,r6
    a33c:	0000e180 	call	e18 <__mulsi3>
    a340:	d9400317 	ldw	r5,12(sp)
    a344:	d9000017 	ldw	r4,0(sp)
    a348:	1023883a 	mov	r17,r2
    a34c:	0000e180 	call	e18 <__mulsi3>
    a350:	14cb883a 	add	r5,r2,r19
    a354:	894b883a 	add	r5,r17,r5
    a358:	b005883a 	mov	r2,r22
    a35c:	2807883a 	mov	r3,r5
    a360:	dfc00d17 	ldw	ra,52(sp)
    a364:	df000c17 	ldw	fp,48(sp)
    a368:	ddc00b17 	ldw	r23,44(sp)
    a36c:	dd800a17 	ldw	r22,40(sp)
    a370:	dd400917 	ldw	r21,36(sp)
    a374:	dd000817 	ldw	r20,32(sp)
    a378:	dcc00717 	ldw	r19,28(sp)
    a37c:	dc800617 	ldw	r18,24(sp)
    a380:	dc400517 	ldw	r17,20(sp)
    a384:	dc000417 	ldw	r16,16(sp)
    a388:	dec00e04 	addi	sp,sp,56
    a38c:	f800283a 	ret

0000a390 <__clzsi2>:
    a390:	00bfffd4 	movui	r2,65535
    a394:	11000e36 	bltu	r2,r4,a3d0 <__clzsi2+0x40>
    a398:	00803fc4 	movi	r2,255
    a39c:	01400204 	movi	r5,8
    a3a0:	0007883a 	mov	r3,zero
    a3a4:	11001036 	bltu	r2,r4,a3e8 <__clzsi2+0x58>
    a3a8:	000b883a 	mov	r5,zero
    a3ac:	20c6d83a 	srl	r3,r4,r3
    a3b0:	00800074 	movhi	r2,1
    a3b4:	10b6fc04 	addi	r2,r2,-9232
    a3b8:	1887883a 	add	r3,r3,r2
    a3bc:	18800003 	ldbu	r2,0(r3)
    a3c0:	00c00804 	movi	r3,32
    a3c4:	2885883a 	add	r2,r5,r2
    a3c8:	1885c83a 	sub	r2,r3,r2
    a3cc:	f800283a 	ret
    a3d0:	01400404 	movi	r5,16
    a3d4:	00804034 	movhi	r2,256
    a3d8:	10bfffc4 	addi	r2,r2,-1
    a3dc:	2807883a 	mov	r3,r5
    a3e0:	113ff22e 	bgeu	r2,r4,a3ac <__clzsi2+0x1c>
    a3e4:	01400604 	movi	r5,24
    a3e8:	2807883a 	mov	r3,r5
    a3ec:	20c6d83a 	srl	r3,r4,r3
    a3f0:	00800074 	movhi	r2,1
    a3f4:	10b6fc04 	addi	r2,r2,-9232
    a3f8:	1887883a 	add	r3,r3,r2
    a3fc:	18800003 	ldbu	r2,0(r3)
    a400:	00c00804 	movi	r3,32
    a404:	2885883a 	add	r2,r5,r2
    a408:	1885c83a 	sub	r2,r3,r2
    a40c:	f800283a 	ret

0000a410 <__pack_d>:
    a410:	20c00017 	ldw	r3,0(r4)
    a414:	defffd04 	addi	sp,sp,-12
    a418:	dc000015 	stw	r16,0(sp)
    a41c:	dc800215 	stw	r18,8(sp)
    a420:	dc400115 	stw	r17,4(sp)
    a424:	00800044 	movi	r2,1
    a428:	22000317 	ldw	r8,12(r4)
    a42c:	001f883a 	mov	r15,zero
    a430:	22400417 	ldw	r9,16(r4)
    a434:	24000117 	ldw	r16,4(r4)
    a438:	10c0552e 	bgeu	r2,r3,a590 <__pack_d+0x180>
    a43c:	00800104 	movi	r2,4
    a440:	18804f26 	beq	r3,r2,a580 <__pack_d+0x170>
    a444:	00800084 	movi	r2,2
    a448:	18800226 	beq	r3,r2,a454 <__pack_d+0x44>
    a44c:	4244b03a 	or	r2,r8,r9
    a450:	10001a1e 	bne	r2,zero,a4bc <__pack_d+0xac>
    a454:	000d883a 	mov	r6,zero
    a458:	000f883a 	mov	r7,zero
    a45c:	0011883a 	mov	r8,zero
    a460:	00800434 	movhi	r2,16
    a464:	10bfffc4 	addi	r2,r2,-1
    a468:	301d883a 	mov	r14,r6
    a46c:	3884703a 	and	r2,r7,r2
    a470:	400a953a 	slli	r5,r8,20
    a474:	79bffc2c 	andhi	r6,r15,65520
    a478:	308cb03a 	or	r6,r6,r2
    a47c:	00e00434 	movhi	r3,32784
    a480:	18ffffc4 	addi	r3,r3,-1
    a484:	800497fa 	slli	r2,r16,31
    a488:	30c6703a 	and	r3,r6,r3
    a48c:	1946b03a 	or	r3,r3,r5
    a490:	01600034 	movhi	r5,32768
    a494:	297fffc4 	addi	r5,r5,-1
    a498:	194a703a 	and	r5,r3,r5
    a49c:	288ab03a 	or	r5,r5,r2
    a4a0:	2807883a 	mov	r3,r5
    a4a4:	7005883a 	mov	r2,r14
    a4a8:	dc800217 	ldw	r18,8(sp)
    a4ac:	dc400117 	ldw	r17,4(sp)
    a4b0:	dc000017 	ldw	r16,0(sp)
    a4b4:	dec00304 	addi	sp,sp,12
    a4b8:	f800283a 	ret
    a4bc:	21000217 	ldw	r4,8(r4)
    a4c0:	00bf0084 	movi	r2,-1022
    a4c4:	20803f16 	blt	r4,r2,a5c4 <__pack_d+0x1b4>
    a4c8:	0080ffc4 	movi	r2,1023
    a4cc:	11002c16 	blt	r2,r4,a580 <__pack_d+0x170>
    a4d0:	00803fc4 	movi	r2,255
    a4d4:	408c703a 	and	r6,r8,r2
    a4d8:	00802004 	movi	r2,128
    a4dc:	0007883a 	mov	r3,zero
    a4e0:	000f883a 	mov	r7,zero
    a4e4:	2280ffc4 	addi	r10,r4,1023
    a4e8:	30801e26 	beq	r6,r2,a564 <__pack_d+0x154>
    a4ec:	00801fc4 	movi	r2,127
    a4f0:	4089883a 	add	r4,r8,r2
    a4f4:	220d803a 	cmpltu	r6,r4,r8
    a4f8:	324d883a 	add	r6,r6,r9
    a4fc:	2011883a 	mov	r8,r4
    a500:	3013883a 	mov	r9,r6
    a504:	00880034 	movhi	r2,8192
    a508:	10bfffc4 	addi	r2,r2,-1
    a50c:	12400d36 	bltu	r2,r9,a544 <__pack_d+0x134>
    a510:	4804963a 	slli	r2,r9,24
    a514:	400cd23a 	srli	r6,r8,8
    a518:	480ed23a 	srli	r7,r9,8
    a51c:	013fffc4 	movi	r4,-1
    a520:	118cb03a 	or	r6,r2,r6
    a524:	01400434 	movhi	r5,16
    a528:	297fffc4 	addi	r5,r5,-1
    a52c:	3104703a 	and	r2,r6,r4
    a530:	3946703a 	and	r3,r7,r5
    a534:	5201ffcc 	andi	r8,r10,2047
    a538:	100d883a 	mov	r6,r2
    a53c:	180f883a 	mov	r7,r3
    a540:	003fc706 	br	a460 <__pack_d+0x50>
    a544:	480897fa 	slli	r4,r9,31
    a548:	4004d07a 	srli	r2,r8,1
    a54c:	4806d07a 	srli	r3,r9,1
    a550:	52800044 	addi	r10,r10,1
    a554:	2084b03a 	or	r2,r4,r2
    a558:	1011883a 	mov	r8,r2
    a55c:	1813883a 	mov	r9,r3
    a560:	003feb06 	br	a510 <__pack_d+0x100>
    a564:	383fe11e 	bne	r7,zero,a4ec <__pack_d+0xdc>
    a568:	01004004 	movi	r4,256
    a56c:	4104703a 	and	r2,r8,r4
    a570:	10c4b03a 	or	r2,r2,r3
    a574:	103fe326 	beq	r2,zero,a504 <__pack_d+0xf4>
    a578:	3005883a 	mov	r2,r6
    a57c:	003fdc06 	br	a4f0 <__pack_d+0xe0>
    a580:	000d883a 	mov	r6,zero
    a584:	000f883a 	mov	r7,zero
    a588:	0201ffc4 	movi	r8,2047
    a58c:	003fb406 	br	a460 <__pack_d+0x50>
    a590:	0005883a 	mov	r2,zero
    a594:	00c00234 	movhi	r3,8
    a598:	408cb03a 	or	r6,r8,r2
    a59c:	48ceb03a 	or	r7,r9,r3
    a5a0:	013fffc4 	movi	r4,-1
    a5a4:	01400434 	movhi	r5,16
    a5a8:	297fffc4 	addi	r5,r5,-1
    a5ac:	3104703a 	and	r2,r6,r4
    a5b0:	3946703a 	and	r3,r7,r5
    a5b4:	100d883a 	mov	r6,r2
    a5b8:	180f883a 	mov	r7,r3
    a5bc:	0201ffc4 	movi	r8,2047
    a5c0:	003fa706 	br	a460 <__pack_d+0x50>
    a5c4:	1109c83a 	sub	r4,r2,r4
    a5c8:	00800e04 	movi	r2,56
    a5cc:	11004316 	blt	r2,r4,a6dc <__pack_d+0x2cc>
    a5d0:	21fff804 	addi	r7,r4,-32
    a5d4:	38004516 	blt	r7,zero,a6ec <__pack_d+0x2dc>
    a5d8:	49d8d83a 	srl	r12,r9,r7
    a5dc:	001b883a 	mov	r13,zero
    a5e0:	0023883a 	mov	r17,zero
    a5e4:	01400044 	movi	r5,1
    a5e8:	0025883a 	mov	r18,zero
    a5ec:	38004716 	blt	r7,zero,a70c <__pack_d+0x2fc>
    a5f0:	29d6983a 	sll	r11,r5,r7
    a5f4:	0015883a 	mov	r10,zero
    a5f8:	00bfffc4 	movi	r2,-1
    a5fc:	5089883a 	add	r4,r10,r2
    a600:	588b883a 	add	r5,r11,r2
    a604:	228d803a 	cmpltu	r6,r4,r10
    a608:	314b883a 	add	r5,r6,r5
    a60c:	4104703a 	and	r2,r8,r4
    a610:	4946703a 	and	r3,r9,r5
    a614:	10c4b03a 	or	r2,r2,r3
    a618:	10000226 	beq	r2,zero,a624 <__pack_d+0x214>
    a61c:	04400044 	movi	r17,1
    a620:	0025883a 	mov	r18,zero
    a624:	00803fc4 	movi	r2,255
    a628:	644eb03a 	or	r7,r12,r17
    a62c:	3892703a 	and	r9,r7,r2
    a630:	00802004 	movi	r2,128
    a634:	6c90b03a 	or	r8,r13,r18
    a638:	0015883a 	mov	r10,zero
    a63c:	48801626 	beq	r9,r2,a698 <__pack_d+0x288>
    a640:	01001fc4 	movi	r4,127
    a644:	3905883a 	add	r2,r7,r4
    a648:	11cd803a 	cmpltu	r6,r2,r7
    a64c:	320d883a 	add	r6,r6,r8
    a650:	100f883a 	mov	r7,r2
    a654:	00840034 	movhi	r2,4096
    a658:	10bfffc4 	addi	r2,r2,-1
    a65c:	3011883a 	mov	r8,r6
    a660:	0007883a 	mov	r3,zero
    a664:	11801b36 	bltu	r2,r6,a6d4 <__pack_d+0x2c4>
    a668:	4004963a 	slli	r2,r8,24
    a66c:	3808d23a 	srli	r4,r7,8
    a670:	400ad23a 	srli	r5,r8,8
    a674:	1813883a 	mov	r9,r3
    a678:	1108b03a 	or	r4,r2,r4
    a67c:	00bfffc4 	movi	r2,-1
    a680:	00c00434 	movhi	r3,16
    a684:	18ffffc4 	addi	r3,r3,-1
    a688:	208c703a 	and	r6,r4,r2
    a68c:	28ce703a 	and	r7,r5,r3
    a690:	4a01ffcc 	andi	r8,r9,2047
    a694:	003f7206 	br	a460 <__pack_d+0x50>
    a698:	503fe91e 	bne	r10,zero,a640 <__pack_d+0x230>
    a69c:	01004004 	movi	r4,256
    a6a0:	3904703a 	and	r2,r7,r4
    a6a4:	0007883a 	mov	r3,zero
    a6a8:	10c4b03a 	or	r2,r2,r3
    a6ac:	10000626 	beq	r2,zero,a6c8 <__pack_d+0x2b8>
    a6b0:	3a45883a 	add	r2,r7,r9
    a6b4:	11cd803a 	cmpltu	r6,r2,r7
    a6b8:	320d883a 	add	r6,r6,r8
    a6bc:	100f883a 	mov	r7,r2
    a6c0:	3011883a 	mov	r8,r6
    a6c4:	0007883a 	mov	r3,zero
    a6c8:	00840034 	movhi	r2,4096
    a6cc:	10bfffc4 	addi	r2,r2,-1
    a6d0:	123fe52e 	bgeu	r2,r8,a668 <__pack_d+0x258>
    a6d4:	00c00044 	movi	r3,1
    a6d8:	003fe306 	br	a668 <__pack_d+0x258>
    a6dc:	0009883a 	mov	r4,zero
    a6e0:	0013883a 	mov	r9,zero
    a6e4:	000b883a 	mov	r5,zero
    a6e8:	003fe406 	br	a67c <__pack_d+0x26c>
    a6ec:	4a47883a 	add	r3,r9,r9
    a6f0:	008007c4 	movi	r2,31
    a6f4:	1105c83a 	sub	r2,r2,r4
    a6f8:	1886983a 	sll	r3,r3,r2
    a6fc:	4118d83a 	srl	r12,r8,r4
    a700:	491ad83a 	srl	r13,r9,r4
    a704:	1b18b03a 	or	r12,r3,r12
    a708:	003fb506 	br	a5e0 <__pack_d+0x1d0>
    a70c:	2806d07a 	srli	r3,r5,1
    a710:	008007c4 	movi	r2,31
    a714:	1105c83a 	sub	r2,r2,r4
    a718:	1896d83a 	srl	r11,r3,r2
    a71c:	2914983a 	sll	r10,r5,r4
    a720:	003fb506 	br	a5f8 <__pack_d+0x1e8>

0000a724 <__unpack_d>:
    a724:	20c00117 	ldw	r3,4(r4)
    a728:	22400017 	ldw	r9,0(r4)
    a72c:	00800434 	movhi	r2,16
    a730:	10bfffc4 	addi	r2,r2,-1
    a734:	1808d53a 	srli	r4,r3,20
    a738:	180cd7fa 	srli	r6,r3,31
    a73c:	1894703a 	and	r10,r3,r2
    a740:	2201ffcc 	andi	r8,r4,2047
    a744:	281b883a 	mov	r13,r5
    a748:	4817883a 	mov	r11,r9
    a74c:	29800115 	stw	r6,4(r5)
    a750:	5019883a 	mov	r12,r10
    a754:	40001e1e 	bne	r8,zero,a7d0 <__unpack_d+0xac>
    a758:	4a84b03a 	or	r2,r9,r10
    a75c:	10001926 	beq	r2,zero,a7c4 <__unpack_d+0xa0>
    a760:	4804d63a 	srli	r2,r9,24
    a764:	500c923a 	slli	r6,r10,8
    a768:	013f0084 	movi	r4,-1022
    a76c:	00c40034 	movhi	r3,4096
    a770:	18ffffc4 	addi	r3,r3,-1
    a774:	118cb03a 	or	r6,r2,r6
    a778:	008000c4 	movi	r2,3
    a77c:	480a923a 	slli	r5,r9,8
    a780:	68800015 	stw	r2,0(r13)
    a784:	69000215 	stw	r4,8(r13)
    a788:	19800b36 	bltu	r3,r6,a7b8 <__unpack_d+0x94>
    a78c:	200f883a 	mov	r7,r4
    a790:	1811883a 	mov	r8,r3
    a794:	2945883a 	add	r2,r5,r5
    a798:	1149803a 	cmpltu	r4,r2,r5
    a79c:	3187883a 	add	r3,r6,r6
    a7a0:	20c9883a 	add	r4,r4,r3
    a7a4:	100b883a 	mov	r5,r2
    a7a8:	200d883a 	mov	r6,r4
    a7ac:	39ffffc4 	addi	r7,r7,-1
    a7b0:	413ff82e 	bgeu	r8,r4,a794 <__unpack_d+0x70>
    a7b4:	69c00215 	stw	r7,8(r13)
    a7b8:	69800415 	stw	r6,16(r13)
    a7bc:	69400315 	stw	r5,12(r13)
    a7c0:	f800283a 	ret
    a7c4:	00800084 	movi	r2,2
    a7c8:	28800015 	stw	r2,0(r5)
    a7cc:	f800283a 	ret
    a7d0:	0081ffc4 	movi	r2,2047
    a7d4:	40800f26 	beq	r8,r2,a814 <__unpack_d+0xf0>
    a7d8:	480cd63a 	srli	r6,r9,24
    a7dc:	5006923a 	slli	r3,r10,8
    a7e0:	4804923a 	slli	r2,r9,8
    a7e4:	0009883a 	mov	r4,zero
    a7e8:	30c6b03a 	or	r3,r6,r3
    a7ec:	01440034 	movhi	r5,4096
    a7f0:	110cb03a 	or	r6,r2,r4
    a7f4:	423f0044 	addi	r8,r8,-1023
    a7f8:	194eb03a 	or	r7,r3,r5
    a7fc:	008000c4 	movi	r2,3
    a800:	69c00415 	stw	r7,16(r13)
    a804:	6a000215 	stw	r8,8(r13)
    a808:	68800015 	stw	r2,0(r13)
    a80c:	69800315 	stw	r6,12(r13)
    a810:	f800283a 	ret
    a814:	4a84b03a 	or	r2,r9,r10
    a818:	1000031e 	bne	r2,zero,a828 <__unpack_d+0x104>
    a81c:	00800104 	movi	r2,4
    a820:	28800015 	stw	r2,0(r5)
    a824:	f800283a 	ret
    a828:	0009883a 	mov	r4,zero
    a82c:	01400234 	movhi	r5,8
    a830:	4904703a 	and	r2,r9,r4
    a834:	5146703a 	and	r3,r10,r5
    a838:	10c4b03a 	or	r2,r2,r3
    a83c:	10000526 	beq	r2,zero,a854 <__unpack_d+0x130>
    a840:	00800044 	movi	r2,1
    a844:	68800015 	stw	r2,0(r13)
    a848:	6b000415 	stw	r12,16(r13)
    a84c:	6ac00315 	stw	r11,12(r13)
    a850:	f800283a 	ret
    a854:	68000015 	stw	zero,0(r13)
    a858:	003ffb06 	br	a848 <__unpack_d+0x124>

0000a85c <__fpcmp_parts_d>:
    a85c:	21800017 	ldw	r6,0(r4)
    a860:	00c00044 	movi	r3,1
    a864:	19800a2e 	bgeu	r3,r6,a890 <__fpcmp_parts_d+0x34>
    a868:	28800017 	ldw	r2,0(r5)
    a86c:	1880082e 	bgeu	r3,r2,a890 <__fpcmp_parts_d+0x34>
    a870:	00c00104 	movi	r3,4
    a874:	30c02626 	beq	r6,r3,a910 <__fpcmp_parts_d+0xb4>
    a878:	10c02226 	beq	r2,r3,a904 <__fpcmp_parts_d+0xa8>
    a87c:	00c00084 	movi	r3,2
    a880:	30c00526 	beq	r6,r3,a898 <__fpcmp_parts_d+0x3c>
    a884:	10c0071e 	bne	r2,r3,a8a4 <__fpcmp_parts_d+0x48>
    a888:	20800117 	ldw	r2,4(r4)
    a88c:	1000091e 	bne	r2,zero,a8b4 <__fpcmp_parts_d+0x58>
    a890:	00800044 	movi	r2,1
    a894:	f800283a 	ret
    a898:	10c01a1e 	bne	r2,r3,a904 <__fpcmp_parts_d+0xa8>
    a89c:	0005883a 	mov	r2,zero
    a8a0:	f800283a 	ret
    a8a4:	22000117 	ldw	r8,4(r4)
    a8a8:	28800117 	ldw	r2,4(r5)
    a8ac:	40800326 	beq	r8,r2,a8bc <__fpcmp_parts_d+0x60>
    a8b0:	403ff726 	beq	r8,zero,a890 <__fpcmp_parts_d+0x34>
    a8b4:	00bfffc4 	movi	r2,-1
    a8b8:	f800283a 	ret
    a8bc:	20c00217 	ldw	r3,8(r4)
    a8c0:	28800217 	ldw	r2,8(r5)
    a8c4:	10fffa16 	blt	r2,r3,a8b0 <__fpcmp_parts_d+0x54>
    a8c8:	18800916 	blt	r3,r2,a8f0 <__fpcmp_parts_d+0x94>
    a8cc:	21c00417 	ldw	r7,16(r4)
    a8d0:	28c00417 	ldw	r3,16(r5)
    a8d4:	21800317 	ldw	r6,12(r4)
    a8d8:	28800317 	ldw	r2,12(r5)
    a8dc:	19fff436 	bltu	r3,r7,a8b0 <__fpcmp_parts_d+0x54>
    a8e0:	38c00526 	beq	r7,r3,a8f8 <__fpcmp_parts_d+0x9c>
    a8e4:	38c00236 	bltu	r7,r3,a8f0 <__fpcmp_parts_d+0x94>
    a8e8:	19ffec1e 	bne	r3,r7,a89c <__fpcmp_parts_d+0x40>
    a8ec:	30bfeb2e 	bgeu	r6,r2,a89c <__fpcmp_parts_d+0x40>
    a8f0:	403fe71e 	bne	r8,zero,a890 <__fpcmp_parts_d+0x34>
    a8f4:	003fef06 	br	a8b4 <__fpcmp_parts_d+0x58>
    a8f8:	11bffa2e 	bgeu	r2,r6,a8e4 <__fpcmp_parts_d+0x88>
    a8fc:	403fe426 	beq	r8,zero,a890 <__fpcmp_parts_d+0x34>
    a900:	003fec06 	br	a8b4 <__fpcmp_parts_d+0x58>
    a904:	28800117 	ldw	r2,4(r5)
    a908:	103fe11e 	bne	r2,zero,a890 <__fpcmp_parts_d+0x34>
    a90c:	003fe906 	br	a8b4 <__fpcmp_parts_d+0x58>
    a910:	11bfdd1e 	bne	r2,r6,a888 <__fpcmp_parts_d+0x2c>
    a914:	28c00117 	ldw	r3,4(r5)
    a918:	20800117 	ldw	r2,4(r4)
    a91c:	1885c83a 	sub	r2,r3,r2
    a920:	f800283a 	ret

0000a924 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a924:	defff804 	addi	sp,sp,-32
    a928:	dfc00715 	stw	ra,28(sp)
    a92c:	df000615 	stw	fp,24(sp)
    a930:	df000604 	addi	fp,sp,24
    a934:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a938:	e0bffc17 	ldw	r2,-16(fp)
    a93c:	1004803a 	cmplt	r2,r2,zero
    a940:	1000091e 	bne	r2,zero,a968 <close+0x44>
    a944:	e13ffc17 	ldw	r4,-16(fp)
    a948:	01400304 	movi	r5,12
    a94c:	0000e180 	call	e18 <__mulsi3>
    a950:	1007883a 	mov	r3,r2
    a954:	00800074 	movhi	r2,1
    a958:	10b95604 	addi	r2,r2,-6824
    a95c:	1887883a 	add	r3,r3,r2
    a960:	e0ffff15 	stw	r3,-4(fp)
    a964:	00000106 	br	a96c <close+0x48>
    a968:	e03fff15 	stw	zero,-4(fp)
    a96c:	e0bfff17 	ldw	r2,-4(fp)
    a970:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    a974:	e0bffb17 	ldw	r2,-20(fp)
    a978:	1005003a 	cmpeq	r2,r2,zero
    a97c:	10001d1e 	bne	r2,zero,a9f4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a980:	e0bffb17 	ldw	r2,-20(fp)
    a984:	10800017 	ldw	r2,0(r2)
    a988:	10800417 	ldw	r2,16(r2)
    a98c:	1005003a 	cmpeq	r2,r2,zero
    a990:	1000071e 	bne	r2,zero,a9b0 <close+0x8c>
    a994:	e0bffb17 	ldw	r2,-20(fp)
    a998:	10800017 	ldw	r2,0(r2)
    a99c:	10800417 	ldw	r2,16(r2)
    a9a0:	e13ffb17 	ldw	r4,-20(fp)
    a9a4:	103ee83a 	callr	r2
    a9a8:	e0bffe15 	stw	r2,-8(fp)
    a9ac:	00000106 	br	a9b4 <close+0x90>
    a9b0:	e03ffe15 	stw	zero,-8(fp)
    a9b4:	e0bffe17 	ldw	r2,-8(fp)
    a9b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a9bc:	e13ffc17 	ldw	r4,-16(fp)
    a9c0:	000b1dc0 	call	b1dc <alt_release_fd>
    if (rval < 0)
    a9c4:	e0bffa17 	ldw	r2,-24(fp)
    a9c8:	1004403a 	cmpge	r2,r2,zero
    a9cc:	1000071e 	bne	r2,zero,a9ec <close+0xc8>
    {
      ALT_ERRNO = -rval;
    a9d0:	000aa240 	call	aa24 <alt_get_errno>
    a9d4:	e0fffa17 	ldw	r3,-24(fp)
    a9d8:	00c7c83a 	sub	r3,zero,r3
    a9dc:	10c00015 	stw	r3,0(r2)
      return -1;
    a9e0:	00bfffc4 	movi	r2,-1
    a9e4:	e0bffd15 	stw	r2,-12(fp)
    a9e8:	00000806 	br	aa0c <close+0xe8>
    }
    return 0;
    a9ec:	e03ffd15 	stw	zero,-12(fp)
    a9f0:	00000606 	br	aa0c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a9f4:	000aa240 	call	aa24 <alt_get_errno>
    a9f8:	1007883a 	mov	r3,r2
    a9fc:	00801444 	movi	r2,81
    aa00:	18800015 	stw	r2,0(r3)
    return -1;
    aa04:	00bfffc4 	movi	r2,-1
    aa08:	e0bffd15 	stw	r2,-12(fp)
    aa0c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    aa10:	e037883a 	mov	sp,fp
    aa14:	dfc00117 	ldw	ra,4(sp)
    aa18:	df000017 	ldw	fp,0(sp)
    aa1c:	dec00204 	addi	sp,sp,8
    aa20:	f800283a 	ret

0000aa24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aa24:	defffd04 	addi	sp,sp,-12
    aa28:	dfc00215 	stw	ra,8(sp)
    aa2c:	df000115 	stw	fp,4(sp)
    aa30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aa34:	00800074 	movhi	r2,1
    aa38:	10bdd904 	addi	r2,r2,-2204
    aa3c:	10800017 	ldw	r2,0(r2)
    aa40:	1005003a 	cmpeq	r2,r2,zero
    aa44:	1000061e 	bne	r2,zero,aa60 <alt_get_errno+0x3c>
    aa48:	00800074 	movhi	r2,1
    aa4c:	10bdd904 	addi	r2,r2,-2204
    aa50:	10800017 	ldw	r2,0(r2)
    aa54:	103ee83a 	callr	r2
    aa58:	e0bfff15 	stw	r2,-4(fp)
    aa5c:	00000306 	br	aa6c <alt_get_errno+0x48>
    aa60:	00800074 	movhi	r2,1
    aa64:	10847b04 	addi	r2,r2,4588
    aa68:	e0bfff15 	stw	r2,-4(fp)
    aa6c:	e0bfff17 	ldw	r2,-4(fp)
}
    aa70:	e037883a 	mov	sp,fp
    aa74:	dfc00117 	ldw	ra,4(sp)
    aa78:	df000017 	ldw	fp,0(sp)
    aa7c:	dec00204 	addi	sp,sp,8
    aa80:	f800283a 	ret

0000aa84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    aa84:	defffc04 	addi	sp,sp,-16
    aa88:	df000315 	stw	fp,12(sp)
    aa8c:	df000304 	addi	fp,sp,12
    aa90:	e13ffd15 	stw	r4,-12(fp)
    aa94:	e17ffe15 	stw	r5,-8(fp)
    aa98:	e1bfff15 	stw	r6,-4(fp)
  return len;
    aa9c:	e0bfff17 	ldw	r2,-4(fp)
}
    aaa0:	e037883a 	mov	sp,fp
    aaa4:	df000017 	ldw	fp,0(sp)
    aaa8:	dec00104 	addi	sp,sp,4
    aaac:	f800283a 	ret

0000aab0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    aab0:	defffd04 	addi	sp,sp,-12
    aab4:	df000215 	stw	fp,8(sp)
    aab8:	df000204 	addi	fp,sp,8
    aabc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    aac0:	e0bfff17 	ldw	r2,-4(fp)
    aac4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    aac8:	e0bffe17 	ldw	r2,-8(fp)
    aacc:	1005003a 	cmpeq	r2,r2,zero
    aad0:	1000021e 	bne	r2,zero,aadc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    aad4:	002af070 	cmpltui	zero,zero,43969
    aad8:	00000106 	br	aae0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    aadc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    aae0:	e037883a 	mov	sp,fp
    aae4:	df000017 	ldw	fp,0(sp)
    aae8:	dec00104 	addi	sp,sp,4
    aaec:	f800283a 	ret

0000aaf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aaf0:	defffd04 	addi	sp,sp,-12
    aaf4:	dfc00215 	stw	ra,8(sp)
    aaf8:	df000115 	stw	fp,4(sp)
    aafc:	df000104 	addi	fp,sp,4
    ab00:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ab04:	e13fff17 	ldw	r4,-4(fp)
    ab08:	000aab00 	call	aab0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ab0c:	003fff06 	br	ab0c <_exit+0x1c>

0000ab10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ab10:	defff904 	addi	sp,sp,-28
    ab14:	dfc00615 	stw	ra,24(sp)
    ab18:	df000515 	stw	fp,20(sp)
    ab1c:	df000504 	addi	fp,sp,20
    ab20:	e13ffc15 	stw	r4,-16(fp)
    ab24:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ab28:	e0bffc17 	ldw	r2,-16(fp)
    ab2c:	1004803a 	cmplt	r2,r2,zero
    ab30:	1000091e 	bne	r2,zero,ab58 <fstat+0x48>
    ab34:	e13ffc17 	ldw	r4,-16(fp)
    ab38:	01400304 	movi	r5,12
    ab3c:	0000e180 	call	e18 <__mulsi3>
    ab40:	1007883a 	mov	r3,r2
    ab44:	00800074 	movhi	r2,1
    ab48:	10b95604 	addi	r2,r2,-6824
    ab4c:	1887883a 	add	r3,r3,r2
    ab50:	e0ffff15 	stw	r3,-4(fp)
    ab54:	00000106 	br	ab5c <fstat+0x4c>
    ab58:	e03fff15 	stw	zero,-4(fp)
    ab5c:	e0bfff17 	ldw	r2,-4(fp)
    ab60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ab64:	e0bffb17 	ldw	r2,-20(fp)
    ab68:	1005003a 	cmpeq	r2,r2,zero
    ab6c:	1000121e 	bne	r2,zero,abb8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ab70:	e0bffb17 	ldw	r2,-20(fp)
    ab74:	10800017 	ldw	r2,0(r2)
    ab78:	10800817 	ldw	r2,32(r2)
    ab7c:	1005003a 	cmpeq	r2,r2,zero
    ab80:	1000081e 	bne	r2,zero,aba4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    ab84:	e0bffb17 	ldw	r2,-20(fp)
    ab88:	10800017 	ldw	r2,0(r2)
    ab8c:	10800817 	ldw	r2,32(r2)
    ab90:	e13ffb17 	ldw	r4,-20(fp)
    ab94:	e17ffd17 	ldw	r5,-12(fp)
    ab98:	103ee83a 	callr	r2
    ab9c:	e0bffe15 	stw	r2,-8(fp)
    aba0:	00000b06 	br	abd0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    aba4:	e0fffd17 	ldw	r3,-12(fp)
    aba8:	00880004 	movi	r2,8192
    abac:	18800115 	stw	r2,4(r3)
      return 0;
    abb0:	e03ffe15 	stw	zero,-8(fp)
    abb4:	00000606 	br	abd0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    abb8:	000abe80 	call	abe8 <alt_get_errno>
    abbc:	1007883a 	mov	r3,r2
    abc0:	00801444 	movi	r2,81
    abc4:	18800015 	stw	r2,0(r3)
    return -1;
    abc8:	00bfffc4 	movi	r2,-1
    abcc:	e0bffe15 	stw	r2,-8(fp)
    abd0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    abd4:	e037883a 	mov	sp,fp
    abd8:	dfc00117 	ldw	ra,4(sp)
    abdc:	df000017 	ldw	fp,0(sp)
    abe0:	dec00204 	addi	sp,sp,8
    abe4:	f800283a 	ret

0000abe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    abe8:	defffd04 	addi	sp,sp,-12
    abec:	dfc00215 	stw	ra,8(sp)
    abf0:	df000115 	stw	fp,4(sp)
    abf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    abf8:	00800074 	movhi	r2,1
    abfc:	10bdd904 	addi	r2,r2,-2204
    ac00:	10800017 	ldw	r2,0(r2)
    ac04:	1005003a 	cmpeq	r2,r2,zero
    ac08:	1000061e 	bne	r2,zero,ac24 <alt_get_errno+0x3c>
    ac0c:	00800074 	movhi	r2,1
    ac10:	10bdd904 	addi	r2,r2,-2204
    ac14:	10800017 	ldw	r2,0(r2)
    ac18:	103ee83a 	callr	r2
    ac1c:	e0bfff15 	stw	r2,-4(fp)
    ac20:	00000306 	br	ac30 <alt_get_errno+0x48>
    ac24:	00800074 	movhi	r2,1
    ac28:	10847b04 	addi	r2,r2,4588
    ac2c:	e0bfff15 	stw	r2,-4(fp)
    ac30:	e0bfff17 	ldw	r2,-4(fp)
}
    ac34:	e037883a 	mov	sp,fp
    ac38:	dfc00117 	ldw	ra,4(sp)
    ac3c:	df000017 	ldw	fp,0(sp)
    ac40:	dec00204 	addi	sp,sp,8
    ac44:	f800283a 	ret

0000ac48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ac48:	deffeb04 	addi	sp,sp,-84
    ac4c:	dfc01415 	stw	ra,80(sp)
    ac50:	df001315 	stw	fp,76(sp)
    ac54:	df001304 	addi	fp,sp,76
    ac58:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ac5c:	e0bffd17 	ldw	r2,-12(fp)
    ac60:	1004803a 	cmplt	r2,r2,zero
    ac64:	1000091e 	bne	r2,zero,ac8c <isatty+0x44>
    ac68:	e13ffd17 	ldw	r4,-12(fp)
    ac6c:	01400304 	movi	r5,12
    ac70:	0000e180 	call	e18 <__mulsi3>
    ac74:	1007883a 	mov	r3,r2
    ac78:	00800074 	movhi	r2,1
    ac7c:	10b95604 	addi	r2,r2,-6824
    ac80:	1887883a 	add	r3,r3,r2
    ac84:	e0ffff15 	stw	r3,-4(fp)
    ac88:	00000106 	br	ac90 <isatty+0x48>
    ac8c:	e03fff15 	stw	zero,-4(fp)
    ac90:	e0bfff17 	ldw	r2,-4(fp)
    ac94:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    ac98:	e0bfed17 	ldw	r2,-76(fp)
    ac9c:	1005003a 	cmpeq	r2,r2,zero
    aca0:	10000f1e 	bne	r2,zero,ace0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    aca4:	e0bfed17 	ldw	r2,-76(fp)
    aca8:	10800017 	ldw	r2,0(r2)
    acac:	10800817 	ldw	r2,32(r2)
    acb0:	1004c03a 	cmpne	r2,r2,zero
    acb4:	1000031e 	bne	r2,zero,acc4 <isatty+0x7c>
    {
      return 1;
    acb8:	00800044 	movi	r2,1
    acbc:	e0bffe15 	stw	r2,-8(fp)
    acc0:	00000c06 	br	acf4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    acc4:	e17fee04 	addi	r5,fp,-72
    acc8:	e13ffd17 	ldw	r4,-12(fp)
    accc:	000ab100 	call	ab10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    acd0:	e0bfef17 	ldw	r2,-68(fp)
    acd4:	10880020 	cmpeqi	r2,r2,8192
    acd8:	e0bffe15 	stw	r2,-8(fp)
    acdc:	00000506 	br	acf4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ace0:	000ad0c0 	call	ad0c <alt_get_errno>
    ace4:	1007883a 	mov	r3,r2
    ace8:	00801444 	movi	r2,81
    acec:	18800015 	stw	r2,0(r3)
    return 0;
    acf0:	e03ffe15 	stw	zero,-8(fp)
    acf4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    acf8:	e037883a 	mov	sp,fp
    acfc:	dfc00117 	ldw	ra,4(sp)
    ad00:	df000017 	ldw	fp,0(sp)
    ad04:	dec00204 	addi	sp,sp,8
    ad08:	f800283a 	ret

0000ad0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad0c:	defffd04 	addi	sp,sp,-12
    ad10:	dfc00215 	stw	ra,8(sp)
    ad14:	df000115 	stw	fp,4(sp)
    ad18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ad1c:	00800074 	movhi	r2,1
    ad20:	10bdd904 	addi	r2,r2,-2204
    ad24:	10800017 	ldw	r2,0(r2)
    ad28:	1005003a 	cmpeq	r2,r2,zero
    ad2c:	1000061e 	bne	r2,zero,ad48 <alt_get_errno+0x3c>
    ad30:	00800074 	movhi	r2,1
    ad34:	10bdd904 	addi	r2,r2,-2204
    ad38:	10800017 	ldw	r2,0(r2)
    ad3c:	103ee83a 	callr	r2
    ad40:	e0bfff15 	stw	r2,-4(fp)
    ad44:	00000306 	br	ad54 <alt_get_errno+0x48>
    ad48:	00800074 	movhi	r2,1
    ad4c:	10847b04 	addi	r2,r2,4588
    ad50:	e0bfff15 	stw	r2,-4(fp)
    ad54:	e0bfff17 	ldw	r2,-4(fp)
}
    ad58:	e037883a 	mov	sp,fp
    ad5c:	dfc00117 	ldw	ra,4(sp)
    ad60:	df000017 	ldw	fp,0(sp)
    ad64:	dec00204 	addi	sp,sp,8
    ad68:	f800283a 	ret

0000ad6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ad6c:	defffe04 	addi	sp,sp,-8
    ad70:	dfc00115 	stw	ra,4(sp)
    ad74:	df000015 	stw	fp,0(sp)
    ad78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ad7c:	01000074 	movhi	r4,1
    ad80:	213dde04 	addi	r4,r4,-2184
    ad84:	01400074 	movhi	r5,1
    ad88:	29774704 	addi	r5,r5,-8932
    ad8c:	01800074 	movhi	r6,1
    ad90:	31bdde04 	addi	r6,r6,-2184
    ad94:	000adec0 	call	adec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ad98:	01000034 	movhi	r4,0
    ad9c:	21000804 	addi	r4,r4,32
    ada0:	01400034 	movhi	r5,0
    ada4:	29400804 	addi	r5,r5,32
    ada8:	01800034 	movhi	r6,0
    adac:	31806d04 	addi	r6,r6,436
    adb0:	000adec0 	call	adec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    adb4:	01000074 	movhi	r4,1
    adb8:	2134ea04 	addi	r4,r4,-11352
    adbc:	01400074 	movhi	r5,1
    adc0:	2974ea04 	addi	r5,r5,-11352
    adc4:	01800074 	movhi	r6,1
    adc8:	31b74704 	addi	r6,r6,-8932
    adcc:	000adec0 	call	adec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    add0:	000c3e80 	call	c3e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    add4:	000c5e00 	call	c5e0 <alt_icache_flush_all>
}
    add8:	e037883a 	mov	sp,fp
    addc:	dfc00117 	ldw	ra,4(sp)
    ade0:	df000017 	ldw	fp,0(sp)
    ade4:	dec00204 	addi	sp,sp,8
    ade8:	f800283a 	ret

0000adec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    adec:	defffc04 	addi	sp,sp,-16
    adf0:	df000315 	stw	fp,12(sp)
    adf4:	df000304 	addi	fp,sp,12
    adf8:	e13ffd15 	stw	r4,-12(fp)
    adfc:	e17ffe15 	stw	r5,-8(fp)
    ae00:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ae04:	e0fffe17 	ldw	r3,-8(fp)
    ae08:	e0bffd17 	ldw	r2,-12(fp)
    ae0c:	18800e26 	beq	r3,r2,ae48 <alt_load_section+0x5c>
  {
    while( to != end )
    ae10:	00000a06 	br	ae3c <alt_load_section+0x50>
    {
      *to++ = *from++;
    ae14:	e0bffd17 	ldw	r2,-12(fp)
    ae18:	10c00017 	ldw	r3,0(r2)
    ae1c:	e0bffe17 	ldw	r2,-8(fp)
    ae20:	10c00015 	stw	r3,0(r2)
    ae24:	e0bffe17 	ldw	r2,-8(fp)
    ae28:	10800104 	addi	r2,r2,4
    ae2c:	e0bffe15 	stw	r2,-8(fp)
    ae30:	e0bffd17 	ldw	r2,-12(fp)
    ae34:	10800104 	addi	r2,r2,4
    ae38:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ae3c:	e0fffe17 	ldw	r3,-8(fp)
    ae40:	e0bfff17 	ldw	r2,-4(fp)
    ae44:	18bff31e 	bne	r3,r2,ae14 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    ae48:	e037883a 	mov	sp,fp
    ae4c:	df000017 	ldw	fp,0(sp)
    ae50:	dec00104 	addi	sp,sp,4
    ae54:	f800283a 	ret

0000ae58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ae58:	defff804 	addi	sp,sp,-32
    ae5c:	dfc00715 	stw	ra,28(sp)
    ae60:	df000615 	stw	fp,24(sp)
    ae64:	df000604 	addi	fp,sp,24
    ae68:	e13ffc15 	stw	r4,-16(fp)
    ae6c:	e17ffd15 	stw	r5,-12(fp)
    ae70:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ae74:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ae78:	e0bffc17 	ldw	r2,-16(fp)
    ae7c:	1004803a 	cmplt	r2,r2,zero
    ae80:	1000091e 	bne	r2,zero,aea8 <lseek+0x50>
    ae84:	e13ffc17 	ldw	r4,-16(fp)
    ae88:	01400304 	movi	r5,12
    ae8c:	0000e180 	call	e18 <__mulsi3>
    ae90:	1007883a 	mov	r3,r2
    ae94:	00800074 	movhi	r2,1
    ae98:	10b95604 	addi	r2,r2,-6824
    ae9c:	1887883a 	add	r3,r3,r2
    aea0:	e0ffff15 	stw	r3,-4(fp)
    aea4:	00000106 	br	aeac <lseek+0x54>
    aea8:	e03fff15 	stw	zero,-4(fp)
    aeac:	e0bfff17 	ldw	r2,-4(fp)
    aeb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    aeb4:	e0bffb17 	ldw	r2,-20(fp)
    aeb8:	1005003a 	cmpeq	r2,r2,zero
    aebc:	1000111e 	bne	r2,zero,af04 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    aec0:	e0bffb17 	ldw	r2,-20(fp)
    aec4:	10800017 	ldw	r2,0(r2)
    aec8:	10800717 	ldw	r2,28(r2)
    aecc:	1005003a 	cmpeq	r2,r2,zero
    aed0:	1000091e 	bne	r2,zero,aef8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    aed4:	e0bffb17 	ldw	r2,-20(fp)
    aed8:	10800017 	ldw	r2,0(r2)
    aedc:	10800717 	ldw	r2,28(r2)
    aee0:	e13ffb17 	ldw	r4,-20(fp)
    aee4:	e17ffd17 	ldw	r5,-12(fp)
    aee8:	e1bffe17 	ldw	r6,-8(fp)
    aeec:	103ee83a 	callr	r2
    aef0:	e0bffa15 	stw	r2,-24(fp)
    aef4:	00000506 	br	af0c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    aef8:	00bfde84 	movi	r2,-134
    aefc:	e0bffa15 	stw	r2,-24(fp)
    af00:	00000206 	br	af0c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    af04:	00bfebc4 	movi	r2,-81
    af08:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    af0c:	e0bffa17 	ldw	r2,-24(fp)
    af10:	1004403a 	cmpge	r2,r2,zero
    af14:	1000071e 	bne	r2,zero,af34 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    af18:	000af4c0 	call	af4c <alt_get_errno>
    af1c:	1007883a 	mov	r3,r2
    af20:	e0bffa17 	ldw	r2,-24(fp)
    af24:	0085c83a 	sub	r2,zero,r2
    af28:	18800015 	stw	r2,0(r3)
    rc = -1;
    af2c:	00bfffc4 	movi	r2,-1
    af30:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    af34:	e0bffa17 	ldw	r2,-24(fp)
}
    af38:	e037883a 	mov	sp,fp
    af3c:	dfc00117 	ldw	ra,4(sp)
    af40:	df000017 	ldw	fp,0(sp)
    af44:	dec00204 	addi	sp,sp,8
    af48:	f800283a 	ret

0000af4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    af4c:	defffd04 	addi	sp,sp,-12
    af50:	dfc00215 	stw	ra,8(sp)
    af54:	df000115 	stw	fp,4(sp)
    af58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    af5c:	00800074 	movhi	r2,1
    af60:	10bdd904 	addi	r2,r2,-2204
    af64:	10800017 	ldw	r2,0(r2)
    af68:	1005003a 	cmpeq	r2,r2,zero
    af6c:	1000061e 	bne	r2,zero,af88 <alt_get_errno+0x3c>
    af70:	00800074 	movhi	r2,1
    af74:	10bdd904 	addi	r2,r2,-2204
    af78:	10800017 	ldw	r2,0(r2)
    af7c:	103ee83a 	callr	r2
    af80:	e0bfff15 	stw	r2,-4(fp)
    af84:	00000306 	br	af94 <alt_get_errno+0x48>
    af88:	00800074 	movhi	r2,1
    af8c:	10847b04 	addi	r2,r2,4588
    af90:	e0bfff15 	stw	r2,-4(fp)
    af94:	e0bfff17 	ldw	r2,-4(fp)
}
    af98:	e037883a 	mov	sp,fp
    af9c:	dfc00117 	ldw	ra,4(sp)
    afa0:	df000017 	ldw	fp,0(sp)
    afa4:	dec00204 	addi	sp,sp,8
    afa8:	f800283a 	ret

0000afac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    afac:	defffd04 	addi	sp,sp,-12
    afb0:	dfc00215 	stw	ra,8(sp)
    afb4:	df000115 	stw	fp,4(sp)
    afb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    afbc:	0009883a 	mov	r4,zero
    afc0:	000b4940 	call	b494 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    afc4:	000b4c80 	call	b4c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    afc8:	01000074 	movhi	r4,1
    afcc:	21373f04 	addi	r4,r4,-8964
    afd0:	01400074 	movhi	r5,1
    afd4:	29773f04 	addi	r5,r5,-8964
    afd8:	01800074 	movhi	r6,1
    afdc:	31b73f04 	addi	r6,r6,-8964
    afe0:	000c9b40 	call	c9b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    afe4:	000c5180 	call	c518 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    afe8:	01000074 	movhi	r4,1
    afec:	21315f04 	addi	r4,r4,-14980
    aff0:	000d1e80 	call	d1e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    aff4:	d126ae17 	ldw	r4,-25928(gp)
    aff8:	d166af17 	ldw	r5,-25924(gp)
    affc:	d1a6b017 	ldw	r6,-25920(gp)
    b000:	00006040 	call	604 <main>
    b004:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b008:	01000044 	movi	r4,1
    b00c:	000a9240 	call	a924 <close>
  exit (result);
    b010:	e13fff17 	ldw	r4,-4(fp)
    b014:	0000e500 	call	e50 <exit>

0000b018 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b018:	defffe04 	addi	sp,sp,-8
    b01c:	df000115 	stw	fp,4(sp)
    b020:	df000104 	addi	fp,sp,4
    b024:	e13fff15 	stw	r4,-4(fp)
}
    b028:	e037883a 	mov	sp,fp
    b02c:	df000017 	ldw	fp,0(sp)
    b030:	dec00104 	addi	sp,sp,4
    b034:	f800283a 	ret

0000b038 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b038:	defffe04 	addi	sp,sp,-8
    b03c:	df000115 	stw	fp,4(sp)
    b040:	df000104 	addi	fp,sp,4
    b044:	e13fff15 	stw	r4,-4(fp)
}
    b048:	e037883a 	mov	sp,fp
    b04c:	df000017 	ldw	fp,0(sp)
    b050:	dec00104 	addi	sp,sp,4
    b054:	f800283a 	ret

0000b058 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b058:	defff704 	addi	sp,sp,-36
    b05c:	dfc00815 	stw	ra,32(sp)
    b060:	df000715 	stw	fp,28(sp)
    b064:	df000704 	addi	fp,sp,28
    b068:	e13ffb15 	stw	r4,-20(fp)
    b06c:	e17ffc15 	stw	r5,-16(fp)
    b070:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b074:	e0bffb17 	ldw	r2,-20(fp)
    b078:	1004803a 	cmplt	r2,r2,zero
    b07c:	1000091e 	bne	r2,zero,b0a4 <read+0x4c>
    b080:	e13ffb17 	ldw	r4,-20(fp)
    b084:	01400304 	movi	r5,12
    b088:	0000e180 	call	e18 <__mulsi3>
    b08c:	1007883a 	mov	r3,r2
    b090:	00800074 	movhi	r2,1
    b094:	10b95604 	addi	r2,r2,-6824
    b098:	1887883a 	add	r3,r3,r2
    b09c:	e0ffff15 	stw	r3,-4(fp)
    b0a0:	00000106 	br	b0a8 <read+0x50>
    b0a4:	e03fff15 	stw	zero,-4(fp)
    b0a8:	e0bfff17 	ldw	r2,-4(fp)
    b0ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b0b0:	e0bffa17 	ldw	r2,-24(fp)
    b0b4:	1005003a 	cmpeq	r2,r2,zero
    b0b8:	1000241e 	bne	r2,zero,b14c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b0bc:	e0bffa17 	ldw	r2,-24(fp)
    b0c0:	10800217 	ldw	r2,8(r2)
    b0c4:	108000cc 	andi	r2,r2,3
    b0c8:	10800060 	cmpeqi	r2,r2,1
    b0cc:	10001a1e 	bne	r2,zero,b138 <read+0xe0>
    b0d0:	e0bffa17 	ldw	r2,-24(fp)
    b0d4:	10800017 	ldw	r2,0(r2)
    b0d8:	10800517 	ldw	r2,20(r2)
    b0dc:	1005003a 	cmpeq	r2,r2,zero
    b0e0:	1000151e 	bne	r2,zero,b138 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b0e4:	e0bffa17 	ldw	r2,-24(fp)
    b0e8:	10800017 	ldw	r2,0(r2)
    b0ec:	10800517 	ldw	r2,20(r2)
    b0f0:	e17ffc17 	ldw	r5,-16(fp)
    b0f4:	e1bffd17 	ldw	r6,-12(fp)
    b0f8:	e13ffa17 	ldw	r4,-24(fp)
    b0fc:	103ee83a 	callr	r2
    b100:	e0bff915 	stw	r2,-28(fp)
    b104:	e0bff917 	ldw	r2,-28(fp)
    b108:	1004403a 	cmpge	r2,r2,zero
    b10c:	1000071e 	bne	r2,zero,b12c <read+0xd4>
        {
          ALT_ERRNO = -rval;
    b110:	000b17c0 	call	b17c <alt_get_errno>
    b114:	e0fff917 	ldw	r3,-28(fp)
    b118:	00c7c83a 	sub	r3,zero,r3
    b11c:	10c00015 	stw	r3,0(r2)
          return -1;
    b120:	00bfffc4 	movi	r2,-1
    b124:	e0bffe15 	stw	r2,-8(fp)
    b128:	00000e06 	br	b164 <read+0x10c>
        }
        return rval;
    b12c:	e0bff917 	ldw	r2,-28(fp)
    b130:	e0bffe15 	stw	r2,-8(fp)
    b134:	00000b06 	br	b164 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b138:	000b17c0 	call	b17c <alt_get_errno>
    b13c:	1007883a 	mov	r3,r2
    b140:	00800344 	movi	r2,13
    b144:	18800015 	stw	r2,0(r3)
    b148:	00000406 	br	b15c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b14c:	000b17c0 	call	b17c <alt_get_errno>
    b150:	1007883a 	mov	r3,r2
    b154:	00801444 	movi	r2,81
    b158:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b15c:	00bfffc4 	movi	r2,-1
    b160:	e0bffe15 	stw	r2,-8(fp)
    b164:	e0bffe17 	ldw	r2,-8(fp)
}
    b168:	e037883a 	mov	sp,fp
    b16c:	dfc00117 	ldw	ra,4(sp)
    b170:	df000017 	ldw	fp,0(sp)
    b174:	dec00204 	addi	sp,sp,8
    b178:	f800283a 	ret

0000b17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b17c:	defffd04 	addi	sp,sp,-12
    b180:	dfc00215 	stw	ra,8(sp)
    b184:	df000115 	stw	fp,4(sp)
    b188:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b18c:	00800074 	movhi	r2,1
    b190:	10bdd904 	addi	r2,r2,-2204
    b194:	10800017 	ldw	r2,0(r2)
    b198:	1005003a 	cmpeq	r2,r2,zero
    b19c:	1000061e 	bne	r2,zero,b1b8 <alt_get_errno+0x3c>
    b1a0:	00800074 	movhi	r2,1
    b1a4:	10bdd904 	addi	r2,r2,-2204
    b1a8:	10800017 	ldw	r2,0(r2)
    b1ac:	103ee83a 	callr	r2
    b1b0:	e0bfff15 	stw	r2,-4(fp)
    b1b4:	00000306 	br	b1c4 <alt_get_errno+0x48>
    b1b8:	00800074 	movhi	r2,1
    b1bc:	10847b04 	addi	r2,r2,4588
    b1c0:	e0bfff15 	stw	r2,-4(fp)
    b1c4:	e0bfff17 	ldw	r2,-4(fp)
}
    b1c8:	e037883a 	mov	sp,fp
    b1cc:	dfc00117 	ldw	ra,4(sp)
    b1d0:	df000017 	ldw	fp,0(sp)
    b1d4:	dec00204 	addi	sp,sp,8
    b1d8:	f800283a 	ret

0000b1dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b1dc:	defffc04 	addi	sp,sp,-16
    b1e0:	dfc00315 	stw	ra,12(sp)
    b1e4:	df000215 	stw	fp,8(sp)
    b1e8:	dc000115 	stw	r16,4(sp)
    b1ec:	df000104 	addi	fp,sp,4
    b1f0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b1f4:	e0bfff17 	ldw	r2,-4(fp)
    b1f8:	108000d0 	cmplti	r2,r2,3
    b1fc:	10000f1e 	bne	r2,zero,b23c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    b200:	e13fff17 	ldw	r4,-4(fp)
    b204:	04000074 	movhi	r16,1
    b208:	84395604 	addi	r16,r16,-6824
    b20c:	01400304 	movi	r5,12
    b210:	0000e180 	call	e18 <__mulsi3>
    b214:	1405883a 	add	r2,r2,r16
    b218:	10800204 	addi	r2,r2,8
    b21c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b220:	e13fff17 	ldw	r4,-4(fp)
    b224:	04000074 	movhi	r16,1
    b228:	84395604 	addi	r16,r16,-6824
    b22c:	01400304 	movi	r5,12
    b230:	0000e180 	call	e18 <__mulsi3>
    b234:	1405883a 	add	r2,r2,r16
    b238:	10000015 	stw	zero,0(r2)
  }
}
    b23c:	e037883a 	mov	sp,fp
    b240:	dfc00217 	ldw	ra,8(sp)
    b244:	df000117 	ldw	fp,4(sp)
    b248:	dc000017 	ldw	r16,0(sp)
    b24c:	dec00304 	addi	sp,sp,12
    b250:	f800283a 	ret

0000b254 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b254:	defff804 	addi	sp,sp,-32
    b258:	df000715 	stw	fp,28(sp)
    b25c:	df000704 	addi	fp,sp,28
    b260:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b264:	0005303a 	rdctl	r2,status
    b268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b26c:	e0fffb17 	ldw	r3,-20(fp)
    b270:	00bfff84 	movi	r2,-2
    b274:	1884703a 	and	r2,r3,r2
    b278:	1001703a 	wrctl	status,r2
  
  return context;
    b27c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b280:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b284:	d0a00c17 	ldw	r2,-32720(gp)
    b288:	10c000c4 	addi	r3,r2,3
    b28c:	00bfff04 	movi	r2,-4
    b290:	1884703a 	and	r2,r3,r2
    b294:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b298:	d0e00c17 	ldw	r3,-32720(gp)
    b29c:	e0bffe17 	ldw	r2,-8(fp)
    b2a0:	1887883a 	add	r3,r3,r2
    b2a4:	00820034 	movhi	r2,2048
    b2a8:	10800004 	addi	r2,r2,0
    b2ac:	10c0072e 	bgeu	r2,r3,b2cc <sbrk+0x78>
    b2b0:	e0bffd17 	ldw	r2,-12(fp)
    b2b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b2b8:	e0bffa17 	ldw	r2,-24(fp)
    b2bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b2c0:	00bfffc4 	movi	r2,-1
    b2c4:	e0bfff15 	stw	r2,-4(fp)
    b2c8:	00000c06 	br	b2fc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b2cc:	d0a00c17 	ldw	r2,-32720(gp)
    b2d0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b2d4:	d0e00c17 	ldw	r3,-32720(gp)
    b2d8:	e0bffe17 	ldw	r2,-8(fp)
    b2dc:	1885883a 	add	r2,r3,r2
    b2e0:	d0a00c15 	stw	r2,-32720(gp)
    b2e4:	e0bffd17 	ldw	r2,-12(fp)
    b2e8:	e0bff915 	stw	r2,-28(fp)
    b2ec:	e0bff917 	ldw	r2,-28(fp)
    b2f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b2f4:	e0bffc17 	ldw	r2,-16(fp)
    b2f8:	e0bfff15 	stw	r2,-4(fp)
    b2fc:	e0bfff17 	ldw	r2,-4(fp)
} 
    b300:	e037883a 	mov	sp,fp
    b304:	df000017 	ldw	fp,0(sp)
    b308:	dec00104 	addi	sp,sp,4
    b30c:	f800283a 	ret

0000b310 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b310:	defff704 	addi	sp,sp,-36
    b314:	dfc00815 	stw	ra,32(sp)
    b318:	df000715 	stw	fp,28(sp)
    b31c:	df000704 	addi	fp,sp,28
    b320:	e13ffb15 	stw	r4,-20(fp)
    b324:	e17ffc15 	stw	r5,-16(fp)
    b328:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b32c:	e0bffb17 	ldw	r2,-20(fp)
    b330:	1004803a 	cmplt	r2,r2,zero
    b334:	1000091e 	bne	r2,zero,b35c <write+0x4c>
    b338:	e13ffb17 	ldw	r4,-20(fp)
    b33c:	01400304 	movi	r5,12
    b340:	0000e180 	call	e18 <__mulsi3>
    b344:	1007883a 	mov	r3,r2
    b348:	00800074 	movhi	r2,1
    b34c:	10b95604 	addi	r2,r2,-6824
    b350:	1887883a 	add	r3,r3,r2
    b354:	e0ffff15 	stw	r3,-4(fp)
    b358:	00000106 	br	b360 <write+0x50>
    b35c:	e03fff15 	stw	zero,-4(fp)
    b360:	e0bfff17 	ldw	r2,-4(fp)
    b364:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b368:	e0bffa17 	ldw	r2,-24(fp)
    b36c:	1005003a 	cmpeq	r2,r2,zero
    b370:	1000241e 	bne	r2,zero,b404 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b374:	e0bffa17 	ldw	r2,-24(fp)
    b378:	10800217 	ldw	r2,8(r2)
    b37c:	108000cc 	andi	r2,r2,3
    b380:	1005003a 	cmpeq	r2,r2,zero
    b384:	10001a1e 	bne	r2,zero,b3f0 <write+0xe0>
    b388:	e0bffa17 	ldw	r2,-24(fp)
    b38c:	10800017 	ldw	r2,0(r2)
    b390:	10800617 	ldw	r2,24(r2)
    b394:	1005003a 	cmpeq	r2,r2,zero
    b398:	1000151e 	bne	r2,zero,b3f0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b39c:	e0bffa17 	ldw	r2,-24(fp)
    b3a0:	10800017 	ldw	r2,0(r2)
    b3a4:	10800617 	ldw	r2,24(r2)
    b3a8:	e17ffc17 	ldw	r5,-16(fp)
    b3ac:	e1bffd17 	ldw	r6,-12(fp)
    b3b0:	e13ffa17 	ldw	r4,-24(fp)
    b3b4:	103ee83a 	callr	r2
    b3b8:	e0bff915 	stw	r2,-28(fp)
    b3bc:	e0bff917 	ldw	r2,-28(fp)
    b3c0:	1004403a 	cmpge	r2,r2,zero
    b3c4:	1000071e 	bne	r2,zero,b3e4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    b3c8:	000b4340 	call	b434 <alt_get_errno>
    b3cc:	e0fff917 	ldw	r3,-28(fp)
    b3d0:	00c7c83a 	sub	r3,zero,r3
    b3d4:	10c00015 	stw	r3,0(r2)
        return -1;
    b3d8:	00bfffc4 	movi	r2,-1
    b3dc:	e0bffe15 	stw	r2,-8(fp)
    b3e0:	00000e06 	br	b41c <write+0x10c>
      }
      return rval;
    b3e4:	e0bff917 	ldw	r2,-28(fp)
    b3e8:	e0bffe15 	stw	r2,-8(fp)
    b3ec:	00000b06 	br	b41c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b3f0:	000b4340 	call	b434 <alt_get_errno>
    b3f4:	1007883a 	mov	r3,r2
    b3f8:	00800344 	movi	r2,13
    b3fc:	18800015 	stw	r2,0(r3)
    b400:	00000406 	br	b414 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b404:	000b4340 	call	b434 <alt_get_errno>
    b408:	1007883a 	mov	r3,r2
    b40c:	00801444 	movi	r2,81
    b410:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b414:	00bfffc4 	movi	r2,-1
    b418:	e0bffe15 	stw	r2,-8(fp)
    b41c:	e0bffe17 	ldw	r2,-8(fp)
}
    b420:	e037883a 	mov	sp,fp
    b424:	dfc00117 	ldw	ra,4(sp)
    b428:	df000017 	ldw	fp,0(sp)
    b42c:	dec00204 	addi	sp,sp,8
    b430:	f800283a 	ret

0000b434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b434:	defffd04 	addi	sp,sp,-12
    b438:	dfc00215 	stw	ra,8(sp)
    b43c:	df000115 	stw	fp,4(sp)
    b440:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b444:	00800074 	movhi	r2,1
    b448:	10bdd904 	addi	r2,r2,-2204
    b44c:	10800017 	ldw	r2,0(r2)
    b450:	1005003a 	cmpeq	r2,r2,zero
    b454:	1000061e 	bne	r2,zero,b470 <alt_get_errno+0x3c>
    b458:	00800074 	movhi	r2,1
    b45c:	10bdd904 	addi	r2,r2,-2204
    b460:	10800017 	ldw	r2,0(r2)
    b464:	103ee83a 	callr	r2
    b468:	e0bfff15 	stw	r2,-4(fp)
    b46c:	00000306 	br	b47c <alt_get_errno+0x48>
    b470:	00800074 	movhi	r2,1
    b474:	10847b04 	addi	r2,r2,4588
    b478:	e0bfff15 	stw	r2,-4(fp)
    b47c:	e0bfff17 	ldw	r2,-4(fp)
}
    b480:	e037883a 	mov	sp,fp
    b484:	dfc00117 	ldw	ra,4(sp)
    b488:	df000017 	ldw	fp,0(sp)
    b48c:	dec00204 	addi	sp,sp,8
    b490:	f800283a 	ret

0000b494 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b494:	defffd04 	addi	sp,sp,-12
    b498:	dfc00215 	stw	ra,8(sp)
    b49c:	df000115 	stw	fp,4(sp)
    b4a0:	df000104 	addi	fp,sp,4
    b4a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    b4a8:	000ceb40 	call	ceb4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b4ac:	00800044 	movi	r2,1
    b4b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b4b4:	e037883a 	mov	sp,fp
    b4b8:	dfc00117 	ldw	ra,4(sp)
    b4bc:	df000017 	ldw	fp,0(sp)
    b4c0:	dec00204 	addi	sp,sp,8
    b4c4:	f800283a 	ret

0000b4c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b4c8:	defffe04 	addi	sp,sp,-8
    b4cc:	dfc00115 	stw	ra,4(sp)
    b4d0:	df000015 	stw	fp,0(sp)
    b4d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( HIGH_RESOLUTION_TIMER, high_resolution_timer);
    b4d8:	00c00074 	movhi	r3,1
    b4dc:	18c47f04 	addi	r3,r3,4604
    b4e0:	00820034 	movhi	r2,2048
    b4e4:	18800015 	stw	r2,0(r3)
    b4e8:	00c00074 	movhi	r3,1
    b4ec:	18c48004 	addi	r3,r3,4608
    b4f0:	00802674 	movhi	r2,153
    b4f4:	10a5a004 	addi	r2,r2,-27008
    b4f8:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    b4fc:	01020034 	movhi	r4,2048
    b500:	21000804 	addi	r4,r4,32
    b504:	000b883a 	mov	r5,zero
    b508:	01800404 	movi	r6,16
    b50c:	01c0fa04 	movi	r7,1000
    b510:	000c09c0 	call	c09c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    b514:	01000074 	movhi	r4,1
    b518:	2139c004 	addi	r4,r4,-6400
    b51c:	000b883a 	mov	r5,zero
    b520:	01800044 	movi	r6,1
    b524:	000b6c80 	call	b6c8 <altera_avalon_jtag_uart_init>
    b528:	01000074 	movhi	r4,1
    b52c:	2139b604 	addi	r4,r4,-6440
    b530:	000b5480 	call	b548 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    b534:	e037883a 	mov	sp,fp
    b538:	dfc00117 	ldw	ra,4(sp)
    b53c:	df000017 	ldw	fp,0(sp)
    b540:	dec00204 	addi	sp,sp,8
    b544:	f800283a 	ret

0000b548 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b548:	defffd04 	addi	sp,sp,-12
    b54c:	dfc00215 	stw	ra,8(sp)
    b550:	df000115 	stw	fp,4(sp)
    b554:	df000104 	addi	fp,sp,4
    b558:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b55c:	e13fff17 	ldw	r4,-4(fp)
    b560:	01400074 	movhi	r5,1
    b564:	297dd604 	addi	r5,r5,-2216
    b568:	000c4040 	call	c404 <alt_dev_llist_insert>
}
    b56c:	e037883a 	mov	sp,fp
    b570:	dfc00117 	ldw	ra,4(sp)
    b574:	df000017 	ldw	fp,0(sp)
    b578:	dec00204 	addi	sp,sp,8
    b57c:	f800283a 	ret

0000b580 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b580:	defffa04 	addi	sp,sp,-24
    b584:	dfc00515 	stw	ra,20(sp)
    b588:	df000415 	stw	fp,16(sp)
    b58c:	df000404 	addi	fp,sp,16
    b590:	e13ffd15 	stw	r4,-12(fp)
    b594:	e17ffe15 	stw	r5,-8(fp)
    b598:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b59c:	e0bffd17 	ldw	r2,-12(fp)
    b5a0:	10800017 	ldw	r2,0(r2)
    b5a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b5a8:	e0bffc17 	ldw	r2,-16(fp)
    b5ac:	11000a04 	addi	r4,r2,40
    b5b0:	e0bffd17 	ldw	r2,-12(fp)
    b5b4:	11c00217 	ldw	r7,8(r2)
    b5b8:	e17ffe17 	ldw	r5,-8(fp)
    b5bc:	e1bfff17 	ldw	r6,-4(fp)
    b5c0:	000bbc80 	call	bbc8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b5c4:	e037883a 	mov	sp,fp
    b5c8:	dfc00117 	ldw	ra,4(sp)
    b5cc:	df000017 	ldw	fp,0(sp)
    b5d0:	dec00204 	addi	sp,sp,8
    b5d4:	f800283a 	ret

0000b5d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b5d8:	defffa04 	addi	sp,sp,-24
    b5dc:	dfc00515 	stw	ra,20(sp)
    b5e0:	df000415 	stw	fp,16(sp)
    b5e4:	df000404 	addi	fp,sp,16
    b5e8:	e13ffd15 	stw	r4,-12(fp)
    b5ec:	e17ffe15 	stw	r5,-8(fp)
    b5f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b5f4:	e0bffd17 	ldw	r2,-12(fp)
    b5f8:	10800017 	ldw	r2,0(r2)
    b5fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b600:	e0bffc17 	ldw	r2,-16(fp)
    b604:	11000a04 	addi	r4,r2,40
    b608:	e0bffd17 	ldw	r2,-12(fp)
    b60c:	11c00217 	ldw	r7,8(r2)
    b610:	e17ffe17 	ldw	r5,-8(fp)
    b614:	e1bfff17 	ldw	r6,-4(fp)
    b618:	000bdec0 	call	bdec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b61c:	e037883a 	mov	sp,fp
    b620:	dfc00117 	ldw	ra,4(sp)
    b624:	df000017 	ldw	fp,0(sp)
    b628:	dec00204 	addi	sp,sp,8
    b62c:	f800283a 	ret

0000b630 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    b630:	defffc04 	addi	sp,sp,-16
    b634:	dfc00315 	stw	ra,12(sp)
    b638:	df000215 	stw	fp,8(sp)
    b63c:	df000204 	addi	fp,sp,8
    b640:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b644:	e0bfff17 	ldw	r2,-4(fp)
    b648:	10800017 	ldw	r2,0(r2)
    b64c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    b650:	e0bffe17 	ldw	r2,-8(fp)
    b654:	11000a04 	addi	r4,r2,40
    b658:	e0bfff17 	ldw	r2,-4(fp)
    b65c:	11400217 	ldw	r5,8(r2)
    b660:	000ba600 	call	ba60 <altera_avalon_jtag_uart_close>
}
    b664:	e037883a 	mov	sp,fp
    b668:	dfc00117 	ldw	ra,4(sp)
    b66c:	df000017 	ldw	fp,0(sp)
    b670:	dec00204 	addi	sp,sp,8
    b674:	f800283a 	ret

0000b678 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    b678:	defffa04 	addi	sp,sp,-24
    b67c:	dfc00515 	stw	ra,20(sp)
    b680:	df000415 	stw	fp,16(sp)
    b684:	df000404 	addi	fp,sp,16
    b688:	e13ffd15 	stw	r4,-12(fp)
    b68c:	e17ffe15 	stw	r5,-8(fp)
    b690:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    b694:	e0bffd17 	ldw	r2,-12(fp)
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    b6a0:	e0bffc17 	ldw	r2,-16(fp)
    b6a4:	11000a04 	addi	r4,r2,40
    b6a8:	e17ffe17 	ldw	r5,-8(fp)
    b6ac:	e1bfff17 	ldw	r6,-4(fp)
    b6b0:	000bad40 	call	bad4 <altera_avalon_jtag_uart_ioctl>
}
    b6b4:	e037883a 	mov	sp,fp
    b6b8:	dfc00117 	ldw	ra,4(sp)
    b6bc:	df000017 	ldw	fp,0(sp)
    b6c0:	dec00204 	addi	sp,sp,8
    b6c4:	f800283a 	ret

0000b6c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    b6c8:	defffa04 	addi	sp,sp,-24
    b6cc:	dfc00515 	stw	ra,20(sp)
    b6d0:	df000415 	stw	fp,16(sp)
    b6d4:	df000404 	addi	fp,sp,16
    b6d8:	e13ffd15 	stw	r4,-12(fp)
    b6dc:	e17ffe15 	stw	r5,-8(fp)
    b6e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b6e4:	e0fffd17 	ldw	r3,-12(fp)
    b6e8:	00800044 	movi	r2,1
    b6ec:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    b6f0:	e0bffd17 	ldw	r2,-12(fp)
    b6f4:	10800017 	ldw	r2,0(r2)
    b6f8:	11000104 	addi	r4,r2,4
    b6fc:	e0bffd17 	ldw	r2,-12(fp)
    b700:	10800817 	ldw	r2,32(r2)
    b704:	1007883a 	mov	r3,r2
    b708:	2005883a 	mov	r2,r4
    b70c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    b710:	e13ffe17 	ldw	r4,-8(fp)
    b714:	e17fff17 	ldw	r5,-4(fp)
    b718:	d8000015 	stw	zero,0(sp)
    b71c:	01800074 	movhi	r6,1
    b720:	31ade204 	addi	r6,r6,-18552
    b724:	e1fffd17 	ldw	r7,-12(fp)
    b728:	000c6100 	call	c610 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    b72c:	e0bffd17 	ldw	r2,-12(fp)
    b730:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    b734:	e0bffd17 	ldw	r2,-12(fp)
    b738:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b73c:	00800074 	movhi	r2,1
    b740:	10848204 	addi	r2,r2,4616
    b744:	10800017 	ldw	r2,0(r2)
    b748:	100b883a 	mov	r5,r2
    b74c:	01800074 	movhi	r6,1
    b750:	31ae6c04 	addi	r6,r6,-18000
    b754:	e1fffd17 	ldw	r7,-12(fp)
    b758:	000c2940 	call	c294 <alt_alarm_start>
    b75c:	1004403a 	cmpge	r2,r2,zero
    b760:	1000041e 	bne	r2,zero,b774 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    b764:	e0fffd17 	ldw	r3,-12(fp)
    b768:	00a00034 	movhi	r2,32768
    b76c:	10bfffc4 	addi	r2,r2,-1
    b770:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    b774:	e037883a 	mov	sp,fp
    b778:	dfc00117 	ldw	ra,4(sp)
    b77c:	df000017 	ldw	fp,0(sp)
    b780:	dec00204 	addi	sp,sp,8
    b784:	f800283a 	ret

0000b788 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    b788:	defff804 	addi	sp,sp,-32
    b78c:	df000715 	stw	fp,28(sp)
    b790:	df000704 	addi	fp,sp,28
    b794:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    b798:	e0bfff17 	ldw	r2,-4(fp)
    b79c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    b7a0:	e0bffe17 	ldw	r2,-8(fp)
    b7a4:	10800017 	ldw	r2,0(r2)
    b7a8:	e0bffd15 	stw	r2,-12(fp)
    b7ac:	00000006 	br	b7b0 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b7b0:	e0bffd17 	ldw	r2,-12(fp)
    b7b4:	10800104 	addi	r2,r2,4
    b7b8:	10800037 	ldwio	r2,0(r2)
    b7bc:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    b7c0:	e0bffc17 	ldw	r2,-16(fp)
    b7c4:	1080c00c 	andi	r2,r2,768
    b7c8:	1005003a 	cmpeq	r2,r2,zero
    b7cc:	1000741e 	bne	r2,zero,b9a0 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    b7d0:	e0bffc17 	ldw	r2,-16(fp)
    b7d4:	1080400c 	andi	r2,r2,256
    b7d8:	1005003a 	cmpeq	r2,r2,zero
    b7dc:	1000351e 	bne	r2,zero,b8b4 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    b7e0:	00800074 	movhi	r2,1
    b7e4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b7e8:	e0bffe17 	ldw	r2,-8(fp)
    b7ec:	10800a17 	ldw	r2,40(r2)
    b7f0:	10800044 	addi	r2,r2,1
    b7f4:	1081ffcc 	andi	r2,r2,2047
    b7f8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    b7fc:	e0bffe17 	ldw	r2,-8(fp)
    b800:	10c00b17 	ldw	r3,44(r2)
    b804:	e0bffa17 	ldw	r2,-24(fp)
    b808:	18801626 	beq	r3,r2,b864 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b80c:	e0bffd17 	ldw	r2,-12(fp)
    b810:	10800037 	ldwio	r2,0(r2)
    b814:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    b818:	e0bffb17 	ldw	r2,-20(fp)
    b81c:	10a0000c 	andi	r2,r2,32768
    b820:	1005003a 	cmpeq	r2,r2,zero
    b824:	10000f1e 	bne	r2,zero,b864 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b828:	e0bffe17 	ldw	r2,-8(fp)
    b82c:	10c00a17 	ldw	r3,40(r2)
    b830:	e0bffb17 	ldw	r2,-20(fp)
    b834:	1009883a 	mov	r4,r2
    b838:	e0bffe17 	ldw	r2,-8(fp)
    b83c:	1885883a 	add	r2,r3,r2
    b840:	10800e04 	addi	r2,r2,56
    b844:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b848:	e0bffe17 	ldw	r2,-8(fp)
    b84c:	10800a17 	ldw	r2,40(r2)
    b850:	10800044 	addi	r2,r2,1
    b854:	10c1ffcc 	andi	r3,r2,2047
    b858:	e0bffe17 	ldw	r2,-8(fp)
    b85c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    b860:	003fe106 	br	b7e8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    b864:	e0bffb17 	ldw	r2,-20(fp)
    b868:	10bfffec 	andhi	r2,r2,65535
    b86c:	1005003a 	cmpeq	r2,r2,zero
    b870:	1000101e 	bne	r2,zero,b8b4 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b874:	e0bffe17 	ldw	r2,-8(fp)
    b878:	10c00817 	ldw	r3,32(r2)
    b87c:	00bfff84 	movi	r2,-2
    b880:	1886703a 	and	r3,r3,r2
    b884:	e0bffe17 	ldw	r2,-8(fp)
    b888:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    b88c:	e0bffd17 	ldw	r2,-12(fp)
    b890:	11000104 	addi	r4,r2,4
    b894:	e0bffe17 	ldw	r2,-8(fp)
    b898:	10800817 	ldw	r2,32(r2)
    b89c:	1007883a 	mov	r3,r2
    b8a0:	2005883a 	mov	r2,r4
    b8a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b8a8:	e0bffd17 	ldw	r2,-12(fp)
    b8ac:	10800104 	addi	r2,r2,4
    b8b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    b8b4:	e0bffc17 	ldw	r2,-16(fp)
    b8b8:	1080800c 	andi	r2,r2,512
    b8bc:	1005003a 	cmpeq	r2,r2,zero
    b8c0:	103fbb1e 	bne	r2,zero,b7b0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    b8c4:	e0bffc17 	ldw	r2,-16(fp)
    b8c8:	10bfffec 	andhi	r2,r2,65535
    b8cc:	1004d43a 	srli	r2,r2,16
    b8d0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    b8d4:	00001506 	br	b92c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    b8d8:	e13ffd17 	ldw	r4,-12(fp)
    b8dc:	e0bffe17 	ldw	r2,-8(fp)
    b8e0:	10c00d17 	ldw	r3,52(r2)
    b8e4:	e0bffe17 	ldw	r2,-8(fp)
    b8e8:	1885883a 	add	r2,r3,r2
    b8ec:	10820e04 	addi	r2,r2,2104
    b8f0:	10800003 	ldbu	r2,0(r2)
    b8f4:	10c03fcc 	andi	r3,r2,255
    b8f8:	18c0201c 	xori	r3,r3,128
    b8fc:	18ffe004 	addi	r3,r3,-128
    b900:	2005883a 	mov	r2,r4
    b904:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b908:	e0bffe17 	ldw	r2,-8(fp)
    b90c:	10800d17 	ldw	r2,52(r2)
    b910:	10800044 	addi	r2,r2,1
    b914:	10c1ffcc 	andi	r3,r2,2047
    b918:	e0bffe17 	ldw	r2,-8(fp)
    b91c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    b920:	e0bff917 	ldw	r2,-28(fp)
    b924:	10bfffc4 	addi	r2,r2,-1
    b928:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    b92c:	e0bff917 	ldw	r2,-28(fp)
    b930:	1005003a 	cmpeq	r2,r2,zero
    b934:	1000051e 	bne	r2,zero,b94c <altera_avalon_jtag_uart_irq+0x1c4>
    b938:	e0bffe17 	ldw	r2,-8(fp)
    b93c:	10c00d17 	ldw	r3,52(r2)
    b940:	e0bffe17 	ldw	r2,-8(fp)
    b944:	10800c17 	ldw	r2,48(r2)
    b948:	18bfe31e 	bne	r3,r2,b8d8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    b94c:	e0bff917 	ldw	r2,-28(fp)
    b950:	1005003a 	cmpeq	r2,r2,zero
    b954:	103f961e 	bne	r2,zero,b7b0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b958:	e0bffe17 	ldw	r2,-8(fp)
    b95c:	10c00817 	ldw	r3,32(r2)
    b960:	00bfff44 	movi	r2,-3
    b964:	1886703a 	and	r3,r3,r2
    b968:	e0bffe17 	ldw	r2,-8(fp)
    b96c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b970:	e0bffe17 	ldw	r2,-8(fp)
    b974:	10800017 	ldw	r2,0(r2)
    b978:	11000104 	addi	r4,r2,4
    b97c:	e0bffe17 	ldw	r2,-8(fp)
    b980:	10800817 	ldw	r2,32(r2)
    b984:	1007883a 	mov	r3,r2
    b988:	2005883a 	mov	r2,r4
    b98c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    b990:	e0bffd17 	ldw	r2,-12(fp)
    b994:	10800104 	addi	r2,r2,4
    b998:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    b99c:	003f8406 	br	b7b0 <altera_avalon_jtag_uart_irq+0x28>
}
    b9a0:	e037883a 	mov	sp,fp
    b9a4:	df000017 	ldw	fp,0(sp)
    b9a8:	dec00104 	addi	sp,sp,4
    b9ac:	f800283a 	ret

0000b9b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    b9b0:	defffc04 	addi	sp,sp,-16
    b9b4:	df000315 	stw	fp,12(sp)
    b9b8:	df000304 	addi	fp,sp,12
    b9bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    b9c0:	e0bfff17 	ldw	r2,-4(fp)
    b9c4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    b9c8:	e0bffe17 	ldw	r2,-8(fp)
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	10800104 	addi	r2,r2,4
    b9d4:	10800037 	ldwio	r2,0(r2)
    b9d8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    b9dc:	e0bffd17 	ldw	r2,-12(fp)
    b9e0:	1081000c 	andi	r2,r2,1024
    b9e4:	1005003a 	cmpeq	r2,r2,zero
    b9e8:	10000c1e 	bne	r2,zero,ba1c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    b9ec:	e0bffe17 	ldw	r2,-8(fp)
    b9f0:	10800017 	ldw	r2,0(r2)
    b9f4:	11000104 	addi	r4,r2,4
    b9f8:	e0bffe17 	ldw	r2,-8(fp)
    b9fc:	10800817 	ldw	r2,32(r2)
    ba00:	10810014 	ori	r2,r2,1024
    ba04:	1007883a 	mov	r3,r2
    ba08:	2005883a 	mov	r2,r4
    ba0c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ba10:	e0bffe17 	ldw	r2,-8(fp)
    ba14:	10000915 	stw	zero,36(r2)
    ba18:	00000a06 	br	ba44 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ba1c:	e0bffe17 	ldw	r2,-8(fp)
    ba20:	10c00917 	ldw	r3,36(r2)
    ba24:	00a00034 	movhi	r2,32768
    ba28:	10bfff04 	addi	r2,r2,-4
    ba2c:	10c00536 	bltu	r2,r3,ba44 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ba30:	e0bffe17 	ldw	r2,-8(fp)
    ba34:	10800917 	ldw	r2,36(r2)
    ba38:	10c00044 	addi	r3,r2,1
    ba3c:	e0bffe17 	ldw	r2,-8(fp)
    ba40:	10c00915 	stw	r3,36(r2)
    ba44:	00800074 	movhi	r2,1
    ba48:	10848204 	addi	r2,r2,4616
    ba4c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ba50:	e037883a 	mov	sp,fp
    ba54:	df000017 	ldw	fp,0(sp)
    ba58:	dec00104 	addi	sp,sp,4
    ba5c:	f800283a 	ret

0000ba60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ba60:	defffc04 	addi	sp,sp,-16
    ba64:	df000315 	stw	fp,12(sp)
    ba68:	df000304 	addi	fp,sp,12
    ba6c:	e13ffd15 	stw	r4,-12(fp)
    ba70:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ba74:	00000706 	br	ba94 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ba78:	e0bffe17 	ldw	r2,-8(fp)
    ba7c:	1090000c 	andi	r2,r2,16384
    ba80:	1005003a 	cmpeq	r2,r2,zero
    ba84:	1000031e 	bne	r2,zero,ba94 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    ba88:	00bffd44 	movi	r2,-11
    ba8c:	e0bfff15 	stw	r2,-4(fp)
    ba90:	00000b06 	br	bac0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ba94:	e0bffd17 	ldw	r2,-12(fp)
    ba98:	10c00d17 	ldw	r3,52(r2)
    ba9c:	e0bffd17 	ldw	r2,-12(fp)
    baa0:	10800c17 	ldw	r2,48(r2)
    baa4:	18800526 	beq	r3,r2,babc <altera_avalon_jtag_uart_close+0x5c>
    baa8:	e0bffd17 	ldw	r2,-12(fp)
    baac:	10c00917 	ldw	r3,36(r2)
    bab0:	e0bffd17 	ldw	r2,-12(fp)
    bab4:	10800117 	ldw	r2,4(r2)
    bab8:	18bfef36 	bltu	r3,r2,ba78 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    babc:	e03fff15 	stw	zero,-4(fp)
    bac0:	e0bfff17 	ldw	r2,-4(fp)
}
    bac4:	e037883a 	mov	sp,fp
    bac8:	df000017 	ldw	fp,0(sp)
    bacc:	dec00104 	addi	sp,sp,4
    bad0:	f800283a 	ret

0000bad4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    bad4:	defff804 	addi	sp,sp,-32
    bad8:	df000715 	stw	fp,28(sp)
    badc:	df000704 	addi	fp,sp,28
    bae0:	e13ffb15 	stw	r4,-20(fp)
    bae4:	e17ffc15 	stw	r5,-16(fp)
    bae8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    baec:	00bff9c4 	movi	r2,-25
    baf0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    baf4:	e0bffc17 	ldw	r2,-16(fp)
    baf8:	e0bfff15 	stw	r2,-4(fp)
    bafc:	e0ffff17 	ldw	r3,-4(fp)
    bb00:	189a8060 	cmpeqi	r2,r3,27137
    bb04:	1000041e 	bne	r2,zero,bb18 <altera_avalon_jtag_uart_ioctl+0x44>
    bb08:	e0ffff17 	ldw	r3,-4(fp)
    bb0c:	189a80a0 	cmpeqi	r2,r3,27138
    bb10:	10001b1e 	bne	r2,zero,bb80 <altera_avalon_jtag_uart_ioctl+0xac>
    bb14:	00002706 	br	bbb4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    bb18:	e0bffb17 	ldw	r2,-20(fp)
    bb1c:	10c00117 	ldw	r3,4(r2)
    bb20:	00a00034 	movhi	r2,32768
    bb24:	10bfffc4 	addi	r2,r2,-1
    bb28:	18802226 	beq	r3,r2,bbb4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    bb2c:	e0bffd17 	ldw	r2,-12(fp)
    bb30:	10800017 	ldw	r2,0(r2)
    bb34:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    bb38:	e0bff917 	ldw	r2,-28(fp)
    bb3c:	10800090 	cmplti	r2,r2,2
    bb40:	1000071e 	bne	r2,zero,bb60 <altera_avalon_jtag_uart_ioctl+0x8c>
    bb44:	e0fff917 	ldw	r3,-28(fp)
    bb48:	00a00034 	movhi	r2,32768
    bb4c:	10bfffc4 	addi	r2,r2,-1
    bb50:	18800326 	beq	r3,r2,bb60 <altera_avalon_jtag_uart_ioctl+0x8c>
    bb54:	e0bff917 	ldw	r2,-28(fp)
    bb58:	e0bffe15 	stw	r2,-8(fp)
    bb5c:	00000306 	br	bb6c <altera_avalon_jtag_uart_ioctl+0x98>
    bb60:	00e00034 	movhi	r3,32768
    bb64:	18ffff84 	addi	r3,r3,-2
    bb68:	e0fffe15 	stw	r3,-8(fp)
    bb6c:	e0bffb17 	ldw	r2,-20(fp)
    bb70:	e0fffe17 	ldw	r3,-8(fp)
    bb74:	10c00115 	stw	r3,4(r2)
      rc = 0;
    bb78:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    bb7c:	00000d06 	br	bbb4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    bb80:	e0bffb17 	ldw	r2,-20(fp)
    bb84:	10c00117 	ldw	r3,4(r2)
    bb88:	00a00034 	movhi	r2,32768
    bb8c:	10bfffc4 	addi	r2,r2,-1
    bb90:	18800826 	beq	r3,r2,bbb4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    bb94:	e13ffd17 	ldw	r4,-12(fp)
    bb98:	e0bffb17 	ldw	r2,-20(fp)
    bb9c:	10c00917 	ldw	r3,36(r2)
    bba0:	e0bffb17 	ldw	r2,-20(fp)
    bba4:	10800117 	ldw	r2,4(r2)
    bba8:	1885803a 	cmpltu	r2,r3,r2
    bbac:	20800015 	stw	r2,0(r4)
      rc = 0;
    bbb0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    bbb4:	e0bffa17 	ldw	r2,-24(fp)
}
    bbb8:	e037883a 	mov	sp,fp
    bbbc:	df000017 	ldw	fp,0(sp)
    bbc0:	dec00104 	addi	sp,sp,4
    bbc4:	f800283a 	ret

0000bbc8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    bbc8:	defff204 	addi	sp,sp,-56
    bbcc:	dfc00d15 	stw	ra,52(sp)
    bbd0:	df000c15 	stw	fp,48(sp)
    bbd4:	df000c04 	addi	fp,sp,48
    bbd8:	e13ffb15 	stw	r4,-20(fp)
    bbdc:	e17ffc15 	stw	r5,-16(fp)
    bbe0:	e1bffd15 	stw	r6,-12(fp)
    bbe4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    bbe8:	e0bffc17 	ldw	r2,-16(fp)
    bbec:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bbf0:	00004806 	br	bd14 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    bbf4:	e0bffb17 	ldw	r2,-20(fp)
    bbf8:	10800a17 	ldw	r2,40(r2)
    bbfc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    bc00:	e0bffb17 	ldw	r2,-20(fp)
    bc04:	10800b17 	ldw	r2,44(r2)
    bc08:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    bc0c:	e0fff717 	ldw	r3,-36(fp)
    bc10:	e0bff617 	ldw	r2,-40(fp)
    bc14:	18800536 	bltu	r3,r2,bc2c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    bc18:	e0bff717 	ldw	r2,-36(fp)
    bc1c:	e0fff617 	ldw	r3,-40(fp)
    bc20:	10c5c83a 	sub	r2,r2,r3
    bc24:	e0bff815 	stw	r2,-32(fp)
    bc28:	00000406 	br	bc3c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    bc2c:	00820004 	movi	r2,2048
    bc30:	e0fff617 	ldw	r3,-40(fp)
    bc34:	10c5c83a 	sub	r2,r2,r3
    bc38:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    bc3c:	e0bff817 	ldw	r2,-32(fp)
    bc40:	1005003a 	cmpeq	r2,r2,zero
    bc44:	10001f1e 	bne	r2,zero,bcc4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    bc48:	e0fffd17 	ldw	r3,-12(fp)
    bc4c:	e0bff817 	ldw	r2,-32(fp)
    bc50:	1880022e 	bgeu	r3,r2,bc5c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    bc54:	e0bffd17 	ldw	r2,-12(fp)
    bc58:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    bc5c:	e0bffb17 	ldw	r2,-20(fp)
    bc60:	10c00e04 	addi	r3,r2,56
    bc64:	e0bff617 	ldw	r2,-40(fp)
    bc68:	1887883a 	add	r3,r3,r2
    bc6c:	e0bffa17 	ldw	r2,-24(fp)
    bc70:	1009883a 	mov	r4,r2
    bc74:	180b883a 	mov	r5,r3
    bc78:	e1bff817 	ldw	r6,-32(fp)
    bc7c:	000644c0 	call	644c <memcpy>
      ptr   += n;
    bc80:	e0fff817 	ldw	r3,-32(fp)
    bc84:	e0bffa17 	ldw	r2,-24(fp)
    bc88:	10c5883a 	add	r2,r2,r3
    bc8c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    bc90:	e0fffd17 	ldw	r3,-12(fp)
    bc94:	e0bff817 	ldw	r2,-32(fp)
    bc98:	1885c83a 	sub	r2,r3,r2
    bc9c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    bca0:	e0fff617 	ldw	r3,-40(fp)
    bca4:	e0bff817 	ldw	r2,-32(fp)
    bca8:	1885883a 	add	r2,r3,r2
    bcac:	10c1ffcc 	andi	r3,r2,2047
    bcb0:	e0bffb17 	ldw	r2,-20(fp)
    bcb4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    bcb8:	e0bffd17 	ldw	r2,-12(fp)
    bcbc:	10800048 	cmpgei	r2,r2,1
    bcc0:	103fcc1e 	bne	r2,zero,bbf4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    bcc4:	e0fffa17 	ldw	r3,-24(fp)
    bcc8:	e0bffc17 	ldw	r2,-16(fp)
    bccc:	1880141e 	bne	r3,r2,bd20 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    bcd0:	e0bffe17 	ldw	r2,-8(fp)
    bcd4:	1090000c 	andi	r2,r2,16384
    bcd8:	1004c03a 	cmpne	r2,r2,zero
    bcdc:	1000101e 	bne	r2,zero,bd20 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    bce0:	e0bffb17 	ldw	r2,-20(fp)
    bce4:	10c00a17 	ldw	r3,40(r2)
    bce8:	e0bff717 	ldw	r2,-36(fp)
    bcec:	1880051e 	bne	r3,r2,bd04 <altera_avalon_jtag_uart_read+0x13c>
    bcf0:	e0bffb17 	ldw	r2,-20(fp)
    bcf4:	10c00917 	ldw	r3,36(r2)
    bcf8:	e0bffb17 	ldw	r2,-20(fp)
    bcfc:	10800117 	ldw	r2,4(r2)
    bd00:	18bff736 	bltu	r3,r2,bce0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    bd04:	e0bffb17 	ldw	r2,-20(fp)
    bd08:	10c00a17 	ldw	r3,40(r2)
    bd0c:	e0bff717 	ldw	r2,-36(fp)
    bd10:	18800326 	beq	r3,r2,bd20 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    bd14:	e0bffd17 	ldw	r2,-12(fp)
    bd18:	10800048 	cmpgei	r2,r2,1
    bd1c:	103fb51e 	bne	r2,zero,bbf4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    bd20:	e0fffa17 	ldw	r3,-24(fp)
    bd24:	e0bffc17 	ldw	r2,-16(fp)
    bd28:	18801926 	beq	r3,r2,bd90 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd2c:	0005303a 	rdctl	r2,status
    bd30:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd34:	e0fff517 	ldw	r3,-44(fp)
    bd38:	00bfff84 	movi	r2,-2
    bd3c:	1884703a 	and	r2,r3,r2
    bd40:	1001703a 	wrctl	status,r2
  
  return context;
    bd44:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    bd48:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bd4c:	e0bffb17 	ldw	r2,-20(fp)
    bd50:	10800817 	ldw	r2,32(r2)
    bd54:	10c00054 	ori	r3,r2,1
    bd58:	e0bffb17 	ldw	r2,-20(fp)
    bd5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bd60:	e0bffb17 	ldw	r2,-20(fp)
    bd64:	10800017 	ldw	r2,0(r2)
    bd68:	11000104 	addi	r4,r2,4
    bd6c:	e0bffb17 	ldw	r2,-20(fp)
    bd70:	10800817 	ldw	r2,32(r2)
    bd74:	1007883a 	mov	r3,r2
    bd78:	2005883a 	mov	r2,r4
    bd7c:	10c00035 	stwio	r3,0(r2)
    bd80:	e0bff917 	ldw	r2,-28(fp)
    bd84:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd88:	e0bff417 	ldw	r2,-48(fp)
    bd8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    bd90:	e0fffa17 	ldw	r3,-24(fp)
    bd94:	e0bffc17 	ldw	r2,-16(fp)
    bd98:	18800526 	beq	r3,r2,bdb0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    bd9c:	e0fffa17 	ldw	r3,-24(fp)
    bda0:	e0bffc17 	ldw	r2,-16(fp)
    bda4:	1887c83a 	sub	r3,r3,r2
    bda8:	e0ffff15 	stw	r3,-4(fp)
    bdac:	00000906 	br	bdd4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    bdb0:	e0bffe17 	ldw	r2,-8(fp)
    bdb4:	1090000c 	andi	r2,r2,16384
    bdb8:	1005003a 	cmpeq	r2,r2,zero
    bdbc:	1000031e 	bne	r2,zero,bdcc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    bdc0:	00bffd44 	movi	r2,-11
    bdc4:	e0bfff15 	stw	r2,-4(fp)
    bdc8:	00000206 	br	bdd4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    bdcc:	00bffec4 	movi	r2,-5
    bdd0:	e0bfff15 	stw	r2,-4(fp)
    bdd4:	e0bfff17 	ldw	r2,-4(fp)
}
    bdd8:	e037883a 	mov	sp,fp
    bddc:	dfc00117 	ldw	ra,4(sp)
    bde0:	df000017 	ldw	fp,0(sp)
    bde4:	dec00204 	addi	sp,sp,8
    bde8:	f800283a 	ret

0000bdec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    bdec:	defff204 	addi	sp,sp,-56
    bdf0:	dfc00d15 	stw	ra,52(sp)
    bdf4:	df000c15 	stw	fp,48(sp)
    bdf8:	df000c04 	addi	fp,sp,48
    bdfc:	e13ffb15 	stw	r4,-20(fp)
    be00:	e17ffc15 	stw	r5,-16(fp)
    be04:	e1bffd15 	stw	r6,-12(fp)
    be08:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    be0c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    be10:	e0bffc17 	ldw	r2,-16(fp)
    be14:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    be18:	00003a06 	br	bf04 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    be1c:	e0bffb17 	ldw	r2,-20(fp)
    be20:	10800c17 	ldw	r2,48(r2)
    be24:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    be28:	e0bffb17 	ldw	r2,-20(fp)
    be2c:	10800d17 	ldw	r2,52(r2)
    be30:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    be34:	e0fffa17 	ldw	r3,-24(fp)
    be38:	e0bff917 	ldw	r2,-28(fp)
    be3c:	1880062e 	bgeu	r3,r2,be58 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    be40:	e0fff917 	ldw	r3,-28(fp)
    be44:	e0bffa17 	ldw	r2,-24(fp)
    be48:	1885c83a 	sub	r2,r3,r2
    be4c:	10bfffc4 	addi	r2,r2,-1
    be50:	e0bff815 	stw	r2,-32(fp)
    be54:	00000c06 	br	be88 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    be58:	e0bff917 	ldw	r2,-28(fp)
    be5c:	1005003a 	cmpeq	r2,r2,zero
    be60:	1000051e 	bne	r2,zero,be78 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    be64:	00820004 	movi	r2,2048
    be68:	e0fffa17 	ldw	r3,-24(fp)
    be6c:	10c5c83a 	sub	r2,r2,r3
    be70:	e0bff815 	stw	r2,-32(fp)
    be74:	00000406 	br	be88 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    be78:	0081ffc4 	movi	r2,2047
    be7c:	e0fffa17 	ldw	r3,-24(fp)
    be80:	10c5c83a 	sub	r2,r2,r3
    be84:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    be88:	e0bff817 	ldw	r2,-32(fp)
    be8c:	1005003a 	cmpeq	r2,r2,zero
    be90:	10001f1e 	bne	r2,zero,bf10 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    be94:	e0fffd17 	ldw	r3,-12(fp)
    be98:	e0bff817 	ldw	r2,-32(fp)
    be9c:	1880022e 	bgeu	r3,r2,bea8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    bea0:	e0bffd17 	ldw	r2,-12(fp)
    bea4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    bea8:	e0bffb17 	ldw	r2,-20(fp)
    beac:	10c20e04 	addi	r3,r2,2104
    beb0:	e0bffa17 	ldw	r2,-24(fp)
    beb4:	1885883a 	add	r2,r3,r2
    beb8:	e0fffc17 	ldw	r3,-16(fp)
    bebc:	1009883a 	mov	r4,r2
    bec0:	180b883a 	mov	r5,r3
    bec4:	e1bff817 	ldw	r6,-32(fp)
    bec8:	000644c0 	call	644c <memcpy>
      ptr   += n;
    becc:	e0fff817 	ldw	r3,-32(fp)
    bed0:	e0bffc17 	ldw	r2,-16(fp)
    bed4:	10c5883a 	add	r2,r2,r3
    bed8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    bedc:	e0fffd17 	ldw	r3,-12(fp)
    bee0:	e0bff817 	ldw	r2,-32(fp)
    bee4:	1885c83a 	sub	r2,r3,r2
    bee8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    beec:	e0fffa17 	ldw	r3,-24(fp)
    bef0:	e0bff817 	ldw	r2,-32(fp)
    bef4:	1885883a 	add	r2,r3,r2
    bef8:	10c1ffcc 	andi	r3,r2,2047
    befc:	e0bffb17 	ldw	r2,-20(fp)
    bf00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    bf04:	e0bffd17 	ldw	r2,-12(fp)
    bf08:	10800048 	cmpgei	r2,r2,1
    bf0c:	103fc31e 	bne	r2,zero,be1c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf10:	0005303a 	rdctl	r2,status
    bf14:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf18:	e0fff517 	ldw	r3,-44(fp)
    bf1c:	00bfff84 	movi	r2,-2
    bf20:	1884703a 	and	r2,r3,r2
    bf24:	1001703a 	wrctl	status,r2
  
  return context;
    bf28:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    bf2c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    bf30:	e0bffb17 	ldw	r2,-20(fp)
    bf34:	10800817 	ldw	r2,32(r2)
    bf38:	10c00094 	ori	r3,r2,2
    bf3c:	e0bffb17 	ldw	r2,-20(fp)
    bf40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    bf44:	e0bffb17 	ldw	r2,-20(fp)
    bf48:	10800017 	ldw	r2,0(r2)
    bf4c:	11000104 	addi	r4,r2,4
    bf50:	e0bffb17 	ldw	r2,-20(fp)
    bf54:	10800817 	ldw	r2,32(r2)
    bf58:	1007883a 	mov	r3,r2
    bf5c:	2005883a 	mov	r2,r4
    bf60:	10c00035 	stwio	r3,0(r2)
    bf64:	e0bff717 	ldw	r2,-36(fp)
    bf68:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf6c:	e0bff417 	ldw	r2,-48(fp)
    bf70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    bf74:	e0bffd17 	ldw	r2,-12(fp)
    bf78:	10800050 	cmplti	r2,r2,1
    bf7c:	1000111e 	bne	r2,zero,bfc4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    bf80:	e0bffe17 	ldw	r2,-8(fp)
    bf84:	1090000c 	andi	r2,r2,16384
    bf88:	1004c03a 	cmpne	r2,r2,zero
    bf8c:	1000101e 	bne	r2,zero,bfd0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    bf90:	e0bffb17 	ldw	r2,-20(fp)
    bf94:	10c00d17 	ldw	r3,52(r2)
    bf98:	e0bff917 	ldw	r2,-28(fp)
    bf9c:	1880051e 	bne	r3,r2,bfb4 <altera_avalon_jtag_uart_write+0x1c8>
    bfa0:	e0bffb17 	ldw	r2,-20(fp)
    bfa4:	10c00917 	ldw	r3,36(r2)
    bfa8:	e0bffb17 	ldw	r2,-20(fp)
    bfac:	10800117 	ldw	r2,4(r2)
    bfb0:	18bff736 	bltu	r3,r2,bf90 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    bfb4:	e0bffb17 	ldw	r2,-20(fp)
    bfb8:	10c00d17 	ldw	r3,52(r2)
    bfbc:	e0bff917 	ldw	r2,-28(fp)
    bfc0:	18800326 	beq	r3,r2,bfd0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    bfc4:	e0bffd17 	ldw	r2,-12(fp)
    bfc8:	10800048 	cmpgei	r2,r2,1
    bfcc:	103fcd1e 	bne	r2,zero,bf04 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    bfd0:	e0fffc17 	ldw	r3,-16(fp)
    bfd4:	e0bff617 	ldw	r2,-40(fp)
    bfd8:	18800526 	beq	r3,r2,bff0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    bfdc:	e0fffc17 	ldw	r3,-16(fp)
    bfe0:	e0bff617 	ldw	r2,-40(fp)
    bfe4:	1887c83a 	sub	r3,r3,r2
    bfe8:	e0ffff15 	stw	r3,-4(fp)
    bfec:	00000906 	br	c014 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    bff0:	e0bffe17 	ldw	r2,-8(fp)
    bff4:	1090000c 	andi	r2,r2,16384
    bff8:	1005003a 	cmpeq	r2,r2,zero
    bffc:	1000031e 	bne	r2,zero,c00c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c000:	00bffd44 	movi	r2,-11
    c004:	e0bfff15 	stw	r2,-4(fp)
    c008:	00000206 	br	c014 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c00c:	00bffec4 	movi	r2,-5
    c010:	e0bfff15 	stw	r2,-4(fp)
    c014:	e0bfff17 	ldw	r2,-4(fp)
}
    c018:	e037883a 	mov	sp,fp
    c01c:	dfc00117 	ldw	ra,4(sp)
    c020:	df000017 	ldw	fp,0(sp)
    c024:	dec00204 	addi	sp,sp,8
    c028:	f800283a 	ret

0000c02c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c02c:	defffa04 	addi	sp,sp,-24
    c030:	dfc00515 	stw	ra,20(sp)
    c034:	df000415 	stw	fp,16(sp)
    c038:	df000404 	addi	fp,sp,16
    c03c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c040:	e0bfff17 	ldw	r2,-4(fp)
    c044:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c048:	e0bfff17 	ldw	r2,-4(fp)
    c04c:	10800104 	addi	r2,r2,4
    c050:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c054:	0005303a 	rdctl	r2,status
    c058:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c05c:	e0fffd17 	ldw	r3,-12(fp)
    c060:	00bfff84 	movi	r2,-2
    c064:	1884703a 	and	r2,r3,r2
    c068:	1001703a 	wrctl	status,r2
  
  return context;
    c06c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c070:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c074:	000cda80 	call	cda8 <alt_tick>
    c078:	e0bffe17 	ldw	r2,-8(fp)
    c07c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c080:	e0bffc17 	ldw	r2,-16(fp)
    c084:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c088:	e037883a 	mov	sp,fp
    c08c:	dfc00117 	ldw	ra,4(sp)
    c090:	df000017 	ldw	fp,0(sp)
    c094:	dec00204 	addi	sp,sp,8
    c098:	f800283a 	ret

0000c09c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c09c:	defff804 	addi	sp,sp,-32
    c0a0:	dfc00715 	stw	ra,28(sp)
    c0a4:	df000615 	stw	fp,24(sp)
    c0a8:	df000604 	addi	fp,sp,24
    c0ac:	e13ffc15 	stw	r4,-16(fp)
    c0b0:	e17ffd15 	stw	r5,-12(fp)
    c0b4:	e1bffe15 	stw	r6,-8(fp)
    c0b8:	e1ffff15 	stw	r7,-4(fp)
    c0bc:	e0bfff17 	ldw	r2,-4(fp)
    c0c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    c0c4:	00800074 	movhi	r2,1
    c0c8:	10848204 	addi	r2,r2,4616
    c0cc:	10800017 	ldw	r2,0(r2)
    c0d0:	1004c03a 	cmpne	r2,r2,zero
    c0d4:	1000041e 	bne	r2,zero,c0e8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    c0d8:	00c00074 	movhi	r3,1
    c0dc:	18c48204 	addi	r3,r3,4616
    c0e0:	e0bffb17 	ldw	r2,-20(fp)
    c0e4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    c0e8:	e0bffc17 	ldw	r2,-16(fp)
    c0ec:	10800104 	addi	r2,r2,4
    c0f0:	1007883a 	mov	r3,r2
    c0f4:	008001c4 	movi	r2,7
    c0f8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    c0fc:	d8000015 	stw	zero,0(sp)
    c100:	e13ffd17 	ldw	r4,-12(fp)
    c104:	e17ffe17 	ldw	r5,-8(fp)
    c108:	01800074 	movhi	r6,1
    c10c:	31b00b04 	addi	r6,r6,-16340
    c110:	e1fffc17 	ldw	r7,-16(fp)
    c114:	000c6100 	call	c610 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    c118:	e037883a 	mov	sp,fp
    c11c:	dfc00117 	ldw	ra,4(sp)
    c120:	df000017 	ldw	fp,0(sp)
    c124:	dec00204 	addi	sp,sp,8
    c128:	f800283a 	ret

0000c12c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    c12c:	defffd04 	addi	sp,sp,-12
    c130:	df000215 	stw	fp,8(sp)
    c134:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
    c138:	00800074 	movhi	r2,1
    c13c:	10847f04 	addi	r2,r2,4604
    c140:	10800017 	ldw	r2,0(r2)
    c144:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    c148:	00800074 	movhi	r2,1
    c14c:	10848004 	addi	r2,r2,4608
    c150:	10800017 	ldw	r2,0(r2)
    c154:	1004c03a 	cmpne	r2,r2,zero
    c158:	1000031e 	bne	r2,zero,c168 <alt_timestamp_start+0x3c>
  {
    return -1;
    c15c:	00bfffc4 	movi	r2,-1
    c160:	e0bfff15 	stw	r2,-4(fp)
    c164:	00001506 	br	c1bc <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    c168:	e0bffe17 	ldw	r2,-8(fp)
    c16c:	10800104 	addi	r2,r2,4
    c170:	1007883a 	mov	r3,r2
    c174:	00800204 	movi	r2,8
    c178:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    c17c:	e0bffe17 	ldw	r2,-8(fp)
    c180:	10800204 	addi	r2,r2,8
    c184:	1007883a 	mov	r3,r2
    c188:	00bfffd4 	movui	r2,65535
    c18c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    c190:	e0bffe17 	ldw	r2,-8(fp)
    c194:	10800304 	addi	r2,r2,12
    c198:	1007883a 	mov	r3,r2
    c19c:	00bfffd4 	movui	r2,65535
    c1a0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    c1a4:	e0bffe17 	ldw	r2,-8(fp)
    c1a8:	10800104 	addi	r2,r2,4
    c1ac:	1007883a 	mov	r3,r2
    c1b0:	00800104 	movi	r2,4
    c1b4:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    c1b8:	e03fff15 	stw	zero,-4(fp)
    c1bc:	e0bfff17 	ldw	r2,-4(fp)
}
    c1c0:	e037883a 	mov	sp,fp
    c1c4:	df000017 	ldw	fp,0(sp)
    c1c8:	dec00104 	addi	sp,sp,4
    c1cc:	f800283a 	ret

0000c1d0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    c1d0:	defffb04 	addi	sp,sp,-20
    c1d4:	df000415 	stw	fp,16(sp)
    c1d8:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
    c1dc:	00800074 	movhi	r2,1
    c1e0:	10847f04 	addi	r2,r2,4604
    c1e4:	10800017 	ldw	r2,0(r2)
    c1e8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    c1ec:	00800074 	movhi	r2,1
    c1f0:	10848004 	addi	r2,r2,4608
    c1f4:	10800017 	ldw	r2,0(r2)
    c1f8:	1004c03a 	cmpne	r2,r2,zero
    c1fc:	1000031e 	bne	r2,zero,c20c <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
    c200:	00bfffc4 	movi	r2,-1
    c204:	e0bfff15 	stw	r2,-4(fp)
    c208:	00001306 	br	c258 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    c20c:	e0bffe17 	ldw	r2,-8(fp)
    c210:	10800404 	addi	r2,r2,16
    c214:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    c218:	e0bffe17 	ldw	r2,-8(fp)
    c21c:	10800404 	addi	r2,r2,16
    c220:	10800037 	ldwio	r2,0(r2)
    c224:	10bfffcc 	andi	r2,r2,65535
    c228:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    c22c:	e0bffe17 	ldw	r2,-8(fp)
    c230:	10800504 	addi	r2,r2,20
    c234:	10800037 	ldwio	r2,0(r2)
    c238:	10bfffcc 	andi	r2,r2,65535
    c23c:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    c240:	e0bffc17 	ldw	r2,-16(fp)
    c244:	1006943a 	slli	r3,r2,16
    c248:	e0bffd17 	ldw	r2,-12(fp)
    c24c:	1884b03a 	or	r2,r3,r2
    c250:	0084303a 	nor	r2,zero,r2
    c254:	e0bfff15 	stw	r2,-4(fp)
    c258:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
    c25c:	e037883a 	mov	sp,fp
    c260:	df000017 	ldw	fp,0(sp)
    c264:	dec00104 	addi	sp,sp,4
    c268:	f800283a 	ret

0000c26c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    c26c:	deffff04 	addi	sp,sp,-4
    c270:	df000015 	stw	fp,0(sp)
    c274:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    c278:	00800074 	movhi	r2,1
    c27c:	10848004 	addi	r2,r2,4608
    c280:	10800017 	ldw	r2,0(r2)
}
    c284:	e037883a 	mov	sp,fp
    c288:	df000017 	ldw	fp,0(sp)
    c28c:	dec00104 	addi	sp,sp,4
    c290:	f800283a 	ret

0000c294 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    c294:	defff404 	addi	sp,sp,-48
    c298:	df000b15 	stw	fp,44(sp)
    c29c:	df000b04 	addi	fp,sp,44
    c2a0:	e13ffb15 	stw	r4,-20(fp)
    c2a4:	e17ffc15 	stw	r5,-16(fp)
    c2a8:	e1bffd15 	stw	r6,-12(fp)
    c2ac:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    c2b0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c2b4:	00800074 	movhi	r2,1
    c2b8:	10848204 	addi	r2,r2,4616
    c2bc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    c2c0:	1005003a 	cmpeq	r2,r2,zero
    c2c4:	1000411e 	bne	r2,zero,c3cc <alt_alarm_start+0x138>
  {
    if (alarm)
    c2c8:	e0bffb17 	ldw	r2,-20(fp)
    c2cc:	1005003a 	cmpeq	r2,r2,zero
    c2d0:	10003b1e 	bne	r2,zero,c3c0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    c2d4:	e0fffb17 	ldw	r3,-20(fp)
    c2d8:	e0bffd17 	ldw	r2,-12(fp)
    c2dc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    c2e0:	e0fffb17 	ldw	r3,-20(fp)
    c2e4:	e0bffe17 	ldw	r2,-8(fp)
    c2e8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2ec:	0005303a 	rdctl	r2,status
    c2f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2f4:	e0fff817 	ldw	r3,-32(fp)
    c2f8:	00bfff84 	movi	r2,-2
    c2fc:	1884703a 	and	r2,r3,r2
    c300:	1001703a 	wrctl	status,r2
  
  return context;
    c304:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    c308:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    c30c:	00800074 	movhi	r2,1
    c310:	10848304 	addi	r2,r2,4620
    c314:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    c318:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    c31c:	e0fffc17 	ldw	r3,-16(fp)
    c320:	e0bff917 	ldw	r2,-28(fp)
    c324:	1885883a 	add	r2,r3,r2
    c328:	10c00044 	addi	r3,r2,1
    c32c:	e0bffb17 	ldw	r2,-20(fp)
    c330:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    c334:	e0bffb17 	ldw	r2,-20(fp)
    c338:	10c00217 	ldw	r3,8(r2)
    c33c:	e0bff917 	ldw	r2,-28(fp)
    c340:	1880042e 	bgeu	r3,r2,c354 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    c344:	e0fffb17 	ldw	r3,-20(fp)
    c348:	00800044 	movi	r2,1
    c34c:	18800405 	stb	r2,16(r3)
    c350:	00000206 	br	c35c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    c354:	e0bffb17 	ldw	r2,-20(fp)
    c358:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    c35c:	e0fffb17 	ldw	r3,-20(fp)
    c360:	00800074 	movhi	r2,1
    c364:	10bddc04 	addi	r2,r2,-2192
    c368:	e0bff615 	stw	r2,-40(fp)
    c36c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c370:	e0fff717 	ldw	r3,-36(fp)
    c374:	e0bff617 	ldw	r2,-40(fp)
    c378:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c37c:	e0bff617 	ldw	r2,-40(fp)
    c380:	10c00017 	ldw	r3,0(r2)
    c384:	e0bff717 	ldw	r2,-36(fp)
    c388:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c38c:	e0bff617 	ldw	r2,-40(fp)
    c390:	10c00017 	ldw	r3,0(r2)
    c394:	e0bff717 	ldw	r2,-36(fp)
    c398:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c39c:	e0fff617 	ldw	r3,-40(fp)
    c3a0:	e0bff717 	ldw	r2,-36(fp)
    c3a4:	18800015 	stw	r2,0(r3)
    c3a8:	e0bffa17 	ldw	r2,-24(fp)
    c3ac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c3b0:	e0bff517 	ldw	r2,-44(fp)
    c3b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    c3b8:	e03fff15 	stw	zero,-4(fp)
    c3bc:	00000506 	br	c3d4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    c3c0:	00bffa84 	movi	r2,-22
    c3c4:	e0bfff15 	stw	r2,-4(fp)
    c3c8:	00000206 	br	c3d4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    c3cc:	00bfde84 	movi	r2,-134
    c3d0:	e0bfff15 	stw	r2,-4(fp)
    c3d4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    c3d8:	e037883a 	mov	sp,fp
    c3dc:	df000017 	ldw	fp,0(sp)
    c3e0:	dec00104 	addi	sp,sp,4
    c3e4:	f800283a 	ret

0000c3e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c3e8:	deffff04 	addi	sp,sp,-4
    c3ec:	df000015 	stw	fp,0(sp)
    c3f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c3f4:	e037883a 	mov	sp,fp
    c3f8:	df000017 	ldw	fp,0(sp)
    c3fc:	dec00104 	addi	sp,sp,4
    c400:	f800283a 	ret

0000c404 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c404:	defff904 	addi	sp,sp,-28
    c408:	dfc00615 	stw	ra,24(sp)
    c40c:	df000515 	stw	fp,20(sp)
    c410:	df000504 	addi	fp,sp,20
    c414:	e13ffd15 	stw	r4,-12(fp)
    c418:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c41c:	e0bffd17 	ldw	r2,-12(fp)
    c420:	1005003a 	cmpeq	r2,r2,zero
    c424:	1000041e 	bne	r2,zero,c438 <alt_dev_llist_insert+0x34>
    c428:	e0bffd17 	ldw	r2,-12(fp)
    c42c:	10800217 	ldw	r2,8(r2)
    c430:	1004c03a 	cmpne	r2,r2,zero
    c434:	1000071e 	bne	r2,zero,c454 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c438:	000c4b80 	call	c4b8 <alt_get_errno>
    c43c:	1007883a 	mov	r3,r2
    c440:	00800584 	movi	r2,22
    c444:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c448:	00bffa84 	movi	r2,-22
    c44c:	e0bfff15 	stw	r2,-4(fp)
    c450:	00001306 	br	c4a0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c454:	e0fffd17 	ldw	r3,-12(fp)
    c458:	e0bffe17 	ldw	r2,-8(fp)
    c45c:	e0bffb15 	stw	r2,-20(fp)
    c460:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c464:	e0fffc17 	ldw	r3,-16(fp)
    c468:	e0bffb17 	ldw	r2,-20(fp)
    c46c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c470:	e0bffb17 	ldw	r2,-20(fp)
    c474:	10c00017 	ldw	r3,0(r2)
    c478:	e0bffc17 	ldw	r2,-16(fp)
    c47c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c480:	e0bffb17 	ldw	r2,-20(fp)
    c484:	10c00017 	ldw	r3,0(r2)
    c488:	e0bffc17 	ldw	r2,-16(fp)
    c48c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c490:	e0fffb17 	ldw	r3,-20(fp)
    c494:	e0bffc17 	ldw	r2,-16(fp)
    c498:	18800015 	stw	r2,0(r3)

  return 0;  
    c49c:	e03fff15 	stw	zero,-4(fp)
    c4a0:	e0bfff17 	ldw	r2,-4(fp)
}
    c4a4:	e037883a 	mov	sp,fp
    c4a8:	dfc00117 	ldw	ra,4(sp)
    c4ac:	df000017 	ldw	fp,0(sp)
    c4b0:	dec00204 	addi	sp,sp,8
    c4b4:	f800283a 	ret

0000c4b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c4b8:	defffd04 	addi	sp,sp,-12
    c4bc:	dfc00215 	stw	ra,8(sp)
    c4c0:	df000115 	stw	fp,4(sp)
    c4c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c4c8:	00800074 	movhi	r2,1
    c4cc:	10bdd904 	addi	r2,r2,-2204
    c4d0:	10800017 	ldw	r2,0(r2)
    c4d4:	1005003a 	cmpeq	r2,r2,zero
    c4d8:	1000061e 	bne	r2,zero,c4f4 <alt_get_errno+0x3c>
    c4dc:	00800074 	movhi	r2,1
    c4e0:	10bdd904 	addi	r2,r2,-2204
    c4e4:	10800017 	ldw	r2,0(r2)
    c4e8:	103ee83a 	callr	r2
    c4ec:	e0bfff15 	stw	r2,-4(fp)
    c4f0:	00000306 	br	c500 <alt_get_errno+0x48>
    c4f4:	00800074 	movhi	r2,1
    c4f8:	10847b04 	addi	r2,r2,4588
    c4fc:	e0bfff15 	stw	r2,-4(fp)
    c500:	e0bfff17 	ldw	r2,-4(fp)
}
    c504:	e037883a 	mov	sp,fp
    c508:	dfc00117 	ldw	ra,4(sp)
    c50c:	df000017 	ldw	fp,0(sp)
    c510:	dec00204 	addi	sp,sp,8
    c514:	f800283a 	ret

0000c518 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c518:	defffd04 	addi	sp,sp,-12
    c51c:	dfc00215 	stw	ra,8(sp)
    c520:	df000115 	stw	fp,4(sp)
    c524:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c528:	00bfff04 	movi	r2,-4
    c52c:	00c00074 	movhi	r3,1
    c530:	18f4ea04 	addi	r3,r3,-11352
    c534:	1885883a 	add	r2,r3,r2
    c538:	e0bfff15 	stw	r2,-4(fp)
    c53c:	00000606 	br	c558 <_do_ctors+0x40>
        (*ctor) (); 
    c540:	e0bfff17 	ldw	r2,-4(fp)
    c544:	10800017 	ldw	r2,0(r2)
    c548:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c54c:	e0bfff17 	ldw	r2,-4(fp)
    c550:	10bfff04 	addi	r2,r2,-4
    c554:	e0bfff15 	stw	r2,-4(fp)
    c558:	e0ffff17 	ldw	r3,-4(fp)
    c55c:	00800074 	movhi	r2,1
    c560:	10b4e904 	addi	r2,r2,-11356
    c564:	18bff62e 	bgeu	r3,r2,c540 <_do_ctors+0x28>
        (*ctor) (); 
}
    c568:	e037883a 	mov	sp,fp
    c56c:	dfc00117 	ldw	ra,4(sp)
    c570:	df000017 	ldw	fp,0(sp)
    c574:	dec00204 	addi	sp,sp,8
    c578:	f800283a 	ret

0000c57c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c57c:	defffd04 	addi	sp,sp,-12
    c580:	dfc00215 	stw	ra,8(sp)
    c584:	df000115 	stw	fp,4(sp)
    c588:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c58c:	00bfff04 	movi	r2,-4
    c590:	00c00074 	movhi	r3,1
    c594:	18f4ea04 	addi	r3,r3,-11352
    c598:	1885883a 	add	r2,r3,r2
    c59c:	e0bfff15 	stw	r2,-4(fp)
    c5a0:	00000606 	br	c5bc <_do_dtors+0x40>
        (*dtor) (); 
    c5a4:	e0bfff17 	ldw	r2,-4(fp)
    c5a8:	10800017 	ldw	r2,0(r2)
    c5ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c5b0:	e0bfff17 	ldw	r2,-4(fp)
    c5b4:	10bfff04 	addi	r2,r2,-4
    c5b8:	e0bfff15 	stw	r2,-4(fp)
    c5bc:	e0ffff17 	ldw	r3,-4(fp)
    c5c0:	00800074 	movhi	r2,1
    c5c4:	10b4ea04 	addi	r2,r2,-11352
    c5c8:	18bff62e 	bgeu	r3,r2,c5a4 <_do_dtors+0x28>
        (*dtor) (); 
}
    c5cc:	e037883a 	mov	sp,fp
    c5d0:	dfc00117 	ldw	ra,4(sp)
    c5d4:	df000017 	ldw	fp,0(sp)
    c5d8:	dec00204 	addi	sp,sp,8
    c5dc:	f800283a 	ret

0000c5e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c5e0:	defffe04 	addi	sp,sp,-8
    c5e4:	dfc00115 	stw	ra,4(sp)
    c5e8:	df000015 	stw	fp,0(sp)
    c5ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c5f0:	0009883a 	mov	r4,zero
    c5f4:	01440004 	movi	r5,4096
    c5f8:	000d1580 	call	d158 <alt_icache_flush>
#endif
}
    c5fc:	e037883a 	mov	sp,fp
    c600:	dfc00117 	ldw	ra,4(sp)
    c604:	df000017 	ldw	fp,0(sp)
    c608:	dec00204 	addi	sp,sp,8
    c60c:	f800283a 	ret

0000c610 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c610:	defff904 	addi	sp,sp,-28
    c614:	dfc00615 	stw	ra,24(sp)
    c618:	df000515 	stw	fp,20(sp)
    c61c:	df000504 	addi	fp,sp,20
    c620:	e13ffc15 	stw	r4,-16(fp)
    c624:	e17ffd15 	stw	r5,-12(fp)
    c628:	e1bffe15 	stw	r6,-8(fp)
    c62c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c630:	e0800217 	ldw	r2,8(fp)
    c634:	d8800015 	stw	r2,0(sp)
    c638:	e13ffc17 	ldw	r4,-16(fp)
    c63c:	e17ffd17 	ldw	r5,-12(fp)
    c640:	e1bffe17 	ldw	r6,-8(fp)
    c644:	e1ffff17 	ldw	r7,-4(fp)
    c648:	000c7e40 	call	c7e4 <alt_iic_isr_register>
}  
    c64c:	e037883a 	mov	sp,fp
    c650:	dfc00117 	ldw	ra,4(sp)
    c654:	df000017 	ldw	fp,0(sp)
    c658:	dec00204 	addi	sp,sp,8
    c65c:	f800283a 	ret

0000c660 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c660:	defff904 	addi	sp,sp,-28
    c664:	df000615 	stw	fp,24(sp)
    c668:	df000604 	addi	fp,sp,24
    c66c:	e13ffe15 	stw	r4,-8(fp)
    c670:	e17fff15 	stw	r5,-4(fp)
    c674:	e0bfff17 	ldw	r2,-4(fp)
    c678:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c67c:	0005303a 	rdctl	r2,status
    c680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c684:	e0fffb17 	ldw	r3,-20(fp)
    c688:	00bfff84 	movi	r2,-2
    c68c:	1884703a 	and	r2,r3,r2
    c690:	1001703a 	wrctl	status,r2
  
  return context;
    c694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c698:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c69c:	e0fffc17 	ldw	r3,-16(fp)
    c6a0:	00800044 	movi	r2,1
    c6a4:	10c4983a 	sll	r2,r2,r3
    c6a8:	1007883a 	mov	r3,r2
    c6ac:	00800074 	movhi	r2,1
    c6b0:	10848104 	addi	r2,r2,4612
    c6b4:	10800017 	ldw	r2,0(r2)
    c6b8:	1886b03a 	or	r3,r3,r2
    c6bc:	00800074 	movhi	r2,1
    c6c0:	10848104 	addi	r2,r2,4612
    c6c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c6c8:	00800074 	movhi	r2,1
    c6cc:	10848104 	addi	r2,r2,4612
    c6d0:	10800017 	ldw	r2,0(r2)
    c6d4:	100170fa 	wrctl	ienable,r2
    c6d8:	e0bffd17 	ldw	r2,-12(fp)
    c6dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6e0:	e0bffa17 	ldw	r2,-24(fp)
    c6e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c6e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c6ec:	e037883a 	mov	sp,fp
    c6f0:	df000017 	ldw	fp,0(sp)
    c6f4:	dec00104 	addi	sp,sp,4
    c6f8:	f800283a 	ret

0000c6fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c6fc:	defff904 	addi	sp,sp,-28
    c700:	df000615 	stw	fp,24(sp)
    c704:	df000604 	addi	fp,sp,24
    c708:	e13ffe15 	stw	r4,-8(fp)
    c70c:	e17fff15 	stw	r5,-4(fp)
    c710:	e0bfff17 	ldw	r2,-4(fp)
    c714:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c718:	0005303a 	rdctl	r2,status
    c71c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c720:	e0fffb17 	ldw	r3,-20(fp)
    c724:	00bfff84 	movi	r2,-2
    c728:	1884703a 	and	r2,r3,r2
    c72c:	1001703a 	wrctl	status,r2
  
  return context;
    c730:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c734:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c738:	e0fffc17 	ldw	r3,-16(fp)
    c73c:	00800044 	movi	r2,1
    c740:	10c4983a 	sll	r2,r2,r3
    c744:	0084303a 	nor	r2,zero,r2
    c748:	1007883a 	mov	r3,r2
    c74c:	00800074 	movhi	r2,1
    c750:	10848104 	addi	r2,r2,4612
    c754:	10800017 	ldw	r2,0(r2)
    c758:	1886703a 	and	r3,r3,r2
    c75c:	00800074 	movhi	r2,1
    c760:	10848104 	addi	r2,r2,4612
    c764:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c768:	00800074 	movhi	r2,1
    c76c:	10848104 	addi	r2,r2,4612
    c770:	10800017 	ldw	r2,0(r2)
    c774:	100170fa 	wrctl	ienable,r2
    c778:	e0bffd17 	ldw	r2,-12(fp)
    c77c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c780:	e0bffa17 	ldw	r2,-24(fp)
    c784:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c788:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c78c:	e037883a 	mov	sp,fp
    c790:	df000017 	ldw	fp,0(sp)
    c794:	dec00104 	addi	sp,sp,4
    c798:	f800283a 	ret

0000c79c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c79c:	defffc04 	addi	sp,sp,-16
    c7a0:	df000315 	stw	fp,12(sp)
    c7a4:	df000304 	addi	fp,sp,12
    c7a8:	e13ffe15 	stw	r4,-8(fp)
    c7ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c7b0:	000530fa 	rdctl	r2,ienable
    c7b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c7b8:	e0ffff17 	ldw	r3,-4(fp)
    c7bc:	00800044 	movi	r2,1
    c7c0:	10c4983a 	sll	r2,r2,r3
    c7c4:	1007883a 	mov	r3,r2
    c7c8:	e0bffd17 	ldw	r2,-12(fp)
    c7cc:	1884703a 	and	r2,r3,r2
    c7d0:	1004c03a 	cmpne	r2,r2,zero
}
    c7d4:	e037883a 	mov	sp,fp
    c7d8:	df000017 	ldw	fp,0(sp)
    c7dc:	dec00104 	addi	sp,sp,4
    c7e0:	f800283a 	ret

0000c7e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c7e4:	defff404 	addi	sp,sp,-48
    c7e8:	dfc00b15 	stw	ra,44(sp)
    c7ec:	df000a15 	stw	fp,40(sp)
    c7f0:	df000a04 	addi	fp,sp,40
    c7f4:	e13ffb15 	stw	r4,-20(fp)
    c7f8:	e17ffc15 	stw	r5,-16(fp)
    c7fc:	e1bffd15 	stw	r6,-12(fp)
    c800:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c804:	00bffa84 	movi	r2,-22
    c808:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c80c:	e0bffc17 	ldw	r2,-16(fp)
    c810:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c814:	e0bff917 	ldw	r2,-28(fp)
    c818:	10800808 	cmpgei	r2,r2,32
    c81c:	1000291e 	bne	r2,zero,c8c4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c820:	0005303a 	rdctl	r2,status
    c824:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c828:	e0fff717 	ldw	r3,-36(fp)
    c82c:	00bfff84 	movi	r2,-2
    c830:	1884703a 	and	r2,r3,r2
    c834:	1001703a 	wrctl	status,r2
  
  return context;
    c838:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c83c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c840:	e0bff917 	ldw	r2,-28(fp)
    c844:	00c00074 	movhi	r3,1
    c848:	18cd8e04 	addi	r3,r3,13880
    c84c:	100490fa 	slli	r2,r2,3
    c850:	10c7883a 	add	r3,r2,r3
    c854:	e0bffd17 	ldw	r2,-12(fp)
    c858:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c85c:	e0bff917 	ldw	r2,-28(fp)
    c860:	00c00074 	movhi	r3,1
    c864:	18cd8e04 	addi	r3,r3,13880
    c868:	100490fa 	slli	r2,r2,3
    c86c:	10c5883a 	add	r2,r2,r3
    c870:	10c00104 	addi	r3,r2,4
    c874:	e0bffe17 	ldw	r2,-8(fp)
    c878:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c87c:	e0bffd17 	ldw	r2,-12(fp)
    c880:	1005003a 	cmpeq	r2,r2,zero
    c884:	1000051e 	bne	r2,zero,c89c <alt_iic_isr_register+0xb8>
    c888:	e17ff917 	ldw	r5,-28(fp)
    c88c:	e13ffb17 	ldw	r4,-20(fp)
    c890:	000c6600 	call	c660 <alt_ic_irq_enable>
    c894:	e0bfff15 	stw	r2,-4(fp)
    c898:	00000406 	br	c8ac <alt_iic_isr_register+0xc8>
    c89c:	e17ff917 	ldw	r5,-28(fp)
    c8a0:	e13ffb17 	ldw	r4,-20(fp)
    c8a4:	000c6fc0 	call	c6fc <alt_ic_irq_disable>
    c8a8:	e0bfff15 	stw	r2,-4(fp)
    c8ac:	e0bfff17 	ldw	r2,-4(fp)
    c8b0:	e0bffa15 	stw	r2,-24(fp)
    c8b4:	e0bff817 	ldw	r2,-32(fp)
    c8b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8bc:	e0bff617 	ldw	r2,-40(fp)
    c8c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c8c4:	e0bffa17 	ldw	r2,-24(fp)
}
    c8c8:	e037883a 	mov	sp,fp
    c8cc:	dfc00117 	ldw	ra,4(sp)
    c8d0:	df000017 	ldw	fp,0(sp)
    c8d4:	dec00204 	addi	sp,sp,8
    c8d8:	f800283a 	ret

0000c8dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c8dc:	defff804 	addi	sp,sp,-32
    c8e0:	dfc00715 	stw	ra,28(sp)
    c8e4:	df000615 	stw	fp,24(sp)
    c8e8:	dc000515 	stw	r16,20(sp)
    c8ec:	df000504 	addi	fp,sp,20
    c8f0:	e13ffc15 	stw	r4,-16(fp)
    c8f4:	e17ffd15 	stw	r5,-12(fp)
    c8f8:	e1bffe15 	stw	r6,-8(fp)
    c8fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c900:	e13ffd17 	ldw	r4,-12(fp)
    c904:	e17ffe17 	ldw	r5,-8(fp)
    c908:	e1bfff17 	ldw	r6,-4(fp)
    c90c:	000cb240 	call	cb24 <open>
    c910:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c914:	e0bffb17 	ldw	r2,-20(fp)
    c918:	1004803a 	cmplt	r2,r2,zero
    c91c:	10001f1e 	bne	r2,zero,c99c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c920:	e13ffb17 	ldw	r4,-20(fp)
    c924:	04000074 	movhi	r16,1
    c928:	84395604 	addi	r16,r16,-6824
    c92c:	01400304 	movi	r5,12
    c930:	0000e180 	call	e18 <__mulsi3>
    c934:	1405883a 	add	r2,r2,r16
    c938:	10c00017 	ldw	r3,0(r2)
    c93c:	e0bffc17 	ldw	r2,-16(fp)
    c940:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c944:	e13ffb17 	ldw	r4,-20(fp)
    c948:	04000074 	movhi	r16,1
    c94c:	84395604 	addi	r16,r16,-6824
    c950:	01400304 	movi	r5,12
    c954:	0000e180 	call	e18 <__mulsi3>
    c958:	1405883a 	add	r2,r2,r16
    c95c:	10800104 	addi	r2,r2,4
    c960:	10c00017 	ldw	r3,0(r2)
    c964:	e0bffc17 	ldw	r2,-16(fp)
    c968:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c96c:	e13ffb17 	ldw	r4,-20(fp)
    c970:	04000074 	movhi	r16,1
    c974:	84395604 	addi	r16,r16,-6824
    c978:	01400304 	movi	r5,12
    c97c:	0000e180 	call	e18 <__mulsi3>
    c980:	1405883a 	add	r2,r2,r16
    c984:	10800204 	addi	r2,r2,8
    c988:	10c00017 	ldw	r3,0(r2)
    c98c:	e0bffc17 	ldw	r2,-16(fp)
    c990:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c994:	e13ffb17 	ldw	r4,-20(fp)
    c998:	000b1dc0 	call	b1dc <alt_release_fd>
  }
} 
    c99c:	e037883a 	mov	sp,fp
    c9a0:	dfc00217 	ldw	ra,8(sp)
    c9a4:	df000117 	ldw	fp,4(sp)
    c9a8:	dc000017 	ldw	r16,0(sp)
    c9ac:	dec00304 	addi	sp,sp,12
    c9b0:	f800283a 	ret

0000c9b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c9b4:	defffb04 	addi	sp,sp,-20
    c9b8:	dfc00415 	stw	ra,16(sp)
    c9bc:	df000315 	stw	fp,12(sp)
    c9c0:	df000304 	addi	fp,sp,12
    c9c4:	e13ffd15 	stw	r4,-12(fp)
    c9c8:	e17ffe15 	stw	r5,-8(fp)
    c9cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c9d0:	01000074 	movhi	r4,1
    c9d4:	21395904 	addi	r4,r4,-6812
    c9d8:	e17ffd17 	ldw	r5,-12(fp)
    c9dc:	01800044 	movi	r6,1
    c9e0:	01c07fc4 	movi	r7,511
    c9e4:	000c8dc0 	call	c8dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c9e8:	01000074 	movhi	r4,1
    c9ec:	21395604 	addi	r4,r4,-6824
    c9f0:	e17ffe17 	ldw	r5,-8(fp)
    c9f4:	000d883a 	mov	r6,zero
    c9f8:	01c07fc4 	movi	r7,511
    c9fc:	000c8dc0 	call	c8dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ca00:	01000074 	movhi	r4,1
    ca04:	21395c04 	addi	r4,r4,-6800
    ca08:	e17fff17 	ldw	r5,-4(fp)
    ca0c:	01800044 	movi	r6,1
    ca10:	01c07fc4 	movi	r7,511
    ca14:	000c8dc0 	call	c8dc <alt_open_fd>
}  
    ca18:	e037883a 	mov	sp,fp
    ca1c:	dfc00117 	ldw	ra,4(sp)
    ca20:	df000017 	ldw	fp,0(sp)
    ca24:	dec00204 	addi	sp,sp,8
    ca28:	f800283a 	ret

0000ca2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ca2c:	defffa04 	addi	sp,sp,-24
    ca30:	dfc00515 	stw	ra,20(sp)
    ca34:	df000415 	stw	fp,16(sp)
    ca38:	dc000315 	stw	r16,12(sp)
    ca3c:	df000304 	addi	fp,sp,12
    ca40:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ca44:	e0bffe17 	ldw	r2,-8(fp)
    ca48:	10800217 	ldw	r2,8(r2)
    ca4c:	10d00034 	orhi	r3,r2,16384
    ca50:	e0bffe17 	ldw	r2,-8(fp)
    ca54:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ca58:	e03ffd15 	stw	zero,-12(fp)
    ca5c:	00002306 	br	caec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ca60:	e13ffd17 	ldw	r4,-12(fp)
    ca64:	04000074 	movhi	r16,1
    ca68:	84395604 	addi	r16,r16,-6824
    ca6c:	01400304 	movi	r5,12
    ca70:	0000e180 	call	e18 <__mulsi3>
    ca74:	1405883a 	add	r2,r2,r16
    ca78:	10c00017 	ldw	r3,0(r2)
    ca7c:	e0bffe17 	ldw	r2,-8(fp)
    ca80:	10800017 	ldw	r2,0(r2)
    ca84:	1880161e 	bne	r3,r2,cae0 <alt_file_locked+0xb4>
    ca88:	e13ffd17 	ldw	r4,-12(fp)
    ca8c:	04000074 	movhi	r16,1
    ca90:	84395604 	addi	r16,r16,-6824
    ca94:	01400304 	movi	r5,12
    ca98:	0000e180 	call	e18 <__mulsi3>
    ca9c:	1405883a 	add	r2,r2,r16
    caa0:	10800204 	addi	r2,r2,8
    caa4:	10800017 	ldw	r2,0(r2)
    caa8:	1004403a 	cmpge	r2,r2,zero
    caac:	10000c1e 	bne	r2,zero,cae0 <alt_file_locked+0xb4>
    cab0:	e13ffd17 	ldw	r4,-12(fp)
    cab4:	01400304 	movi	r5,12
    cab8:	0000e180 	call	e18 <__mulsi3>
    cabc:	1007883a 	mov	r3,r2
    cac0:	00800074 	movhi	r2,1
    cac4:	10b95604 	addi	r2,r2,-6824
    cac8:	1887883a 	add	r3,r3,r2
    cacc:	e0bffe17 	ldw	r2,-8(fp)
    cad0:	18800326 	beq	r3,r2,cae0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    cad4:	00bffcc4 	movi	r2,-13
    cad8:	e0bfff15 	stw	r2,-4(fp)
    cadc:	00000a06 	br	cb08 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    cae0:	e0bffd17 	ldw	r2,-12(fp)
    cae4:	10800044 	addi	r2,r2,1
    cae8:	e0bffd15 	stw	r2,-12(fp)
    caec:	00800074 	movhi	r2,1
    caf0:	10bdd804 	addi	r2,r2,-2208
    caf4:	10800017 	ldw	r2,0(r2)
    caf8:	1007883a 	mov	r3,r2
    cafc:	e0bffd17 	ldw	r2,-12(fp)
    cb00:	18bfd72e 	bgeu	r3,r2,ca60 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    cb04:	e03fff15 	stw	zero,-4(fp)
    cb08:	e0bfff17 	ldw	r2,-4(fp)
}
    cb0c:	e037883a 	mov	sp,fp
    cb10:	dfc00217 	ldw	ra,8(sp)
    cb14:	df000117 	ldw	fp,4(sp)
    cb18:	dc000017 	ldw	r16,0(sp)
    cb1c:	dec00304 	addi	sp,sp,12
    cb20:	f800283a 	ret

0000cb24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    cb24:	defff404 	addi	sp,sp,-48
    cb28:	dfc00b15 	stw	ra,44(sp)
    cb2c:	df000a15 	stw	fp,40(sp)
    cb30:	df000a04 	addi	fp,sp,40
    cb34:	e13ffb15 	stw	r4,-20(fp)
    cb38:	e17ffc15 	stw	r5,-16(fp)
    cb3c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    cb40:	00bfffc4 	movi	r2,-1
    cb44:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    cb48:	00bffb44 	movi	r2,-19
    cb4c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    cb50:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    cb54:	e13ffb17 	ldw	r4,-20(fp)
    cb58:	01400074 	movhi	r5,1
    cb5c:	297dd604 	addi	r5,r5,-2216
    cb60:	000ced40 	call	ced4 <alt_find_dev>
    cb64:	e0bffa15 	stw	r2,-24(fp)
    cb68:	e0bffa17 	ldw	r2,-24(fp)
    cb6c:	1004c03a 	cmpne	r2,r2,zero
    cb70:	1000051e 	bne	r2,zero,cb88 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    cb74:	e13ffb17 	ldw	r4,-20(fp)
    cb78:	000cf680 	call	cf68 <alt_find_file>
    cb7c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    cb80:	00800044 	movi	r2,1
    cb84:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    cb88:	e0bffa17 	ldw	r2,-24(fp)
    cb8c:	1005003a 	cmpeq	r2,r2,zero
    cb90:	1000311e 	bne	r2,zero,cc58 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    cb94:	e13ffa17 	ldw	r4,-24(fp)
    cb98:	000d0880 	call	d088 <alt_get_fd>
    cb9c:	e0bff815 	stw	r2,-32(fp)
    cba0:	e0bff817 	ldw	r2,-32(fp)
    cba4:	1004403a 	cmpge	r2,r2,zero
    cba8:	1000031e 	bne	r2,zero,cbb8 <open+0x94>
    {
      status = index;
    cbac:	e0bff817 	ldw	r2,-32(fp)
    cbb0:	e0bff715 	stw	r2,-36(fp)
    cbb4:	00002a06 	br	cc60 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    cbb8:	e13ff817 	ldw	r4,-32(fp)
    cbbc:	01400304 	movi	r5,12
    cbc0:	0000e180 	call	e18 <__mulsi3>
    cbc4:	1007883a 	mov	r3,r2
    cbc8:	00800074 	movhi	r2,1
    cbcc:	10b95604 	addi	r2,r2,-6824
    cbd0:	1885883a 	add	r2,r3,r2
    cbd4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    cbd8:	e0fffc17 	ldw	r3,-16(fp)
    cbdc:	00900034 	movhi	r2,16384
    cbe0:	10bfffc4 	addi	r2,r2,-1
    cbe4:	1886703a 	and	r3,r3,r2
    cbe8:	e0bff917 	ldw	r2,-28(fp)
    cbec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    cbf0:	e0bff617 	ldw	r2,-40(fp)
    cbf4:	1004c03a 	cmpne	r2,r2,zero
    cbf8:	1000061e 	bne	r2,zero,cc14 <open+0xf0>
    cbfc:	e13ff917 	ldw	r4,-28(fp)
    cc00:	000ca2c0 	call	ca2c <alt_file_locked>
    cc04:	e0bff715 	stw	r2,-36(fp)
    cc08:	e0bff717 	ldw	r2,-36(fp)
    cc0c:	1004803a 	cmplt	r2,r2,zero
    cc10:	1000131e 	bne	r2,zero,cc60 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    cc14:	e0bffa17 	ldw	r2,-24(fp)
    cc18:	10800317 	ldw	r2,12(r2)
    cc1c:	1005003a 	cmpeq	r2,r2,zero
    cc20:	1000091e 	bne	r2,zero,cc48 <open+0x124>
    cc24:	e0bffa17 	ldw	r2,-24(fp)
    cc28:	10800317 	ldw	r2,12(r2)
    cc2c:	e13ff917 	ldw	r4,-28(fp)
    cc30:	e17ffb17 	ldw	r5,-20(fp)
    cc34:	e1bffc17 	ldw	r6,-16(fp)
    cc38:	e1fffd17 	ldw	r7,-12(fp)
    cc3c:	103ee83a 	callr	r2
    cc40:	e0bfff15 	stw	r2,-4(fp)
    cc44:	00000106 	br	cc4c <open+0x128>
    cc48:	e03fff15 	stw	zero,-4(fp)
    cc4c:	e0bfff17 	ldw	r2,-4(fp)
    cc50:	e0bff715 	stw	r2,-36(fp)
    cc54:	00000206 	br	cc60 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    cc58:	00bffb44 	movi	r2,-19
    cc5c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    cc60:	e0bff717 	ldw	r2,-36(fp)
    cc64:	1004403a 	cmpge	r2,r2,zero
    cc68:	1000091e 	bne	r2,zero,cc90 <open+0x16c>
  {
    alt_release_fd (index);  
    cc6c:	e13ff817 	ldw	r4,-32(fp)
    cc70:	000b1dc0 	call	b1dc <alt_release_fd>
    ALT_ERRNO = -status;
    cc74:	000ccb00 	call	ccb0 <alt_get_errno>
    cc78:	e0fff717 	ldw	r3,-36(fp)
    cc7c:	00c7c83a 	sub	r3,zero,r3
    cc80:	10c00015 	stw	r3,0(r2)
    return -1;
    cc84:	00bfffc4 	movi	r2,-1
    cc88:	e0bffe15 	stw	r2,-8(fp)
    cc8c:	00000206 	br	cc98 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    cc90:	e0bff817 	ldw	r2,-32(fp)
    cc94:	e0bffe15 	stw	r2,-8(fp)
    cc98:	e0bffe17 	ldw	r2,-8(fp)
}
    cc9c:	e037883a 	mov	sp,fp
    cca0:	dfc00117 	ldw	ra,4(sp)
    cca4:	df000017 	ldw	fp,0(sp)
    cca8:	dec00204 	addi	sp,sp,8
    ccac:	f800283a 	ret

0000ccb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccb0:	defffd04 	addi	sp,sp,-12
    ccb4:	dfc00215 	stw	ra,8(sp)
    ccb8:	df000115 	stw	fp,4(sp)
    ccbc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ccc0:	00800074 	movhi	r2,1
    ccc4:	10bdd904 	addi	r2,r2,-2204
    ccc8:	10800017 	ldw	r2,0(r2)
    cccc:	1005003a 	cmpeq	r2,r2,zero
    ccd0:	1000061e 	bne	r2,zero,ccec <alt_get_errno+0x3c>
    ccd4:	00800074 	movhi	r2,1
    ccd8:	10bdd904 	addi	r2,r2,-2204
    ccdc:	10800017 	ldw	r2,0(r2)
    cce0:	103ee83a 	callr	r2
    cce4:	e0bfff15 	stw	r2,-4(fp)
    cce8:	00000306 	br	ccf8 <alt_get_errno+0x48>
    ccec:	00800074 	movhi	r2,1
    ccf0:	10847b04 	addi	r2,r2,4588
    ccf4:	e0bfff15 	stw	r2,-4(fp)
    ccf8:	e0bfff17 	ldw	r2,-4(fp)
}
    ccfc:	e037883a 	mov	sp,fp
    cd00:	dfc00117 	ldw	ra,4(sp)
    cd04:	df000017 	ldw	fp,0(sp)
    cd08:	dec00204 	addi	sp,sp,8
    cd0c:	f800283a 	ret

0000cd10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    cd10:	defffa04 	addi	sp,sp,-24
    cd14:	df000515 	stw	fp,20(sp)
    cd18:	df000504 	addi	fp,sp,20
    cd1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cd20:	0005303a 	rdctl	r2,status
    cd24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cd28:	e0fffd17 	ldw	r3,-12(fp)
    cd2c:	00bfff84 	movi	r2,-2
    cd30:	1884703a 	and	r2,r3,r2
    cd34:	1001703a 	wrctl	status,r2
  
  return context;
    cd38:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    cd3c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    cd40:	e0bfff17 	ldw	r2,-4(fp)
    cd44:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    cd48:	e0bffc17 	ldw	r2,-16(fp)
    cd4c:	10c00017 	ldw	r3,0(r2)
    cd50:	e0bffc17 	ldw	r2,-16(fp)
    cd54:	10800117 	ldw	r2,4(r2)
    cd58:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    cd5c:	e0bffc17 	ldw	r2,-16(fp)
    cd60:	10c00117 	ldw	r3,4(r2)
    cd64:	e0bffc17 	ldw	r2,-16(fp)
    cd68:	10800017 	ldw	r2,0(r2)
    cd6c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    cd70:	e0fffc17 	ldw	r3,-16(fp)
    cd74:	e0bffc17 	ldw	r2,-16(fp)
    cd78:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    cd7c:	e0fffc17 	ldw	r3,-16(fp)
    cd80:	e0bffc17 	ldw	r2,-16(fp)
    cd84:	18800015 	stw	r2,0(r3)
    cd88:	e0bffe17 	ldw	r2,-8(fp)
    cd8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cd90:	e0bffb17 	ldw	r2,-20(fp)
    cd94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    cd98:	e037883a 	mov	sp,fp
    cd9c:	df000017 	ldw	fp,0(sp)
    cda0:	dec00104 	addi	sp,sp,4
    cda4:	f800283a 	ret

0000cda8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    cda8:	defffb04 	addi	sp,sp,-20
    cdac:	dfc00415 	stw	ra,16(sp)
    cdb0:	df000315 	stw	fp,12(sp)
    cdb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    cdb8:	d0a00e17 	ldw	r2,-32712(gp)
    cdbc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    cdc0:	d0a6b517 	ldw	r2,-25900(gp)
    cdc4:	10800044 	addi	r2,r2,1
    cdc8:	d0a6b515 	stw	r2,-25900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    cdcc:	00003106 	br	ce94 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    cdd0:	e0bffe17 	ldw	r2,-8(fp)
    cdd4:	10800017 	ldw	r2,0(r2)
    cdd8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    cddc:	e0bffe17 	ldw	r2,-8(fp)
    cde0:	10800403 	ldbu	r2,16(r2)
    cde4:	10803fcc 	andi	r2,r2,255
    cde8:	1005003a 	cmpeq	r2,r2,zero
    cdec:	1000051e 	bne	r2,zero,ce04 <alt_tick+0x5c>
    cdf0:	d0a6b517 	ldw	r2,-25900(gp)
    cdf4:	1004c03a 	cmpne	r2,r2,zero
    cdf8:	1000021e 	bne	r2,zero,ce04 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    cdfc:	e0bffe17 	ldw	r2,-8(fp)
    ce00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ce04:	e0bffe17 	ldw	r2,-8(fp)
    ce08:	10c00217 	ldw	r3,8(r2)
    ce0c:	d0a6b517 	ldw	r2,-25900(gp)
    ce10:	10c01e36 	bltu	r2,r3,ce8c <alt_tick+0xe4>
    ce14:	e0bffe17 	ldw	r2,-8(fp)
    ce18:	10800403 	ldbu	r2,16(r2)
    ce1c:	10803fcc 	andi	r2,r2,255
    ce20:	1004c03a 	cmpne	r2,r2,zero
    ce24:	1000191e 	bne	r2,zero,ce8c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    ce28:	e0bffe17 	ldw	r2,-8(fp)
    ce2c:	10c00317 	ldw	r3,12(r2)
    ce30:	e0bffe17 	ldw	r2,-8(fp)
    ce34:	11000517 	ldw	r4,20(r2)
    ce38:	183ee83a 	callr	r3
    ce3c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    ce40:	e0bffd17 	ldw	r2,-12(fp)
    ce44:	1004c03a 	cmpne	r2,r2,zero
    ce48:	1000031e 	bne	r2,zero,ce58 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    ce4c:	e13ffe17 	ldw	r4,-8(fp)
    ce50:	000cd100 	call	cd10 <alt_alarm_stop>
    ce54:	00000d06 	br	ce8c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    ce58:	e0bffe17 	ldw	r2,-8(fp)
    ce5c:	10c00217 	ldw	r3,8(r2)
    ce60:	e0bffd17 	ldw	r2,-12(fp)
    ce64:	1887883a 	add	r3,r3,r2
    ce68:	e0bffe17 	ldw	r2,-8(fp)
    ce6c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    ce70:	e0bffe17 	ldw	r2,-8(fp)
    ce74:	10c00217 	ldw	r3,8(r2)
    ce78:	d0a6b517 	ldw	r2,-25900(gp)
    ce7c:	1880032e 	bgeu	r3,r2,ce8c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    ce80:	e0fffe17 	ldw	r3,-8(fp)
    ce84:	00800044 	movi	r2,1
    ce88:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    ce8c:	e0bfff17 	ldw	r2,-4(fp)
    ce90:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ce94:	d0e00e04 	addi	r3,gp,-32712
    ce98:	e0bffe17 	ldw	r2,-8(fp)
    ce9c:	10ffcc1e 	bne	r2,r3,cdd0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    cea0:	e037883a 	mov	sp,fp
    cea4:	dfc00117 	ldw	ra,4(sp)
    cea8:	df000017 	ldw	fp,0(sp)
    ceac:	dec00204 	addi	sp,sp,8
    ceb0:	f800283a 	ret

0000ceb4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    ceb4:	deffff04 	addi	sp,sp,-4
    ceb8:	df000015 	stw	fp,0(sp)
    cebc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cec0:	000170fa 	wrctl	ienable,zero
}
    cec4:	e037883a 	mov	sp,fp
    cec8:	df000017 	ldw	fp,0(sp)
    cecc:	dec00104 	addi	sp,sp,4
    ced0:	f800283a 	ret

0000ced4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ced4:	defff904 	addi	sp,sp,-28
    ced8:	dfc00615 	stw	ra,24(sp)
    cedc:	df000515 	stw	fp,20(sp)
    cee0:	df000504 	addi	fp,sp,20
    cee4:	e13ffd15 	stw	r4,-12(fp)
    cee8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ceec:	e0bffe17 	ldw	r2,-8(fp)
    cef0:	10800017 	ldw	r2,0(r2)
    cef4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    cef8:	e13ffd17 	ldw	r4,-12(fp)
    cefc:	0000fb40 	call	fb4 <strlen>
    cf00:	10800044 	addi	r2,r2,1
    cf04:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cf08:	00000d06 	br	cf40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    cf0c:	e0bffc17 	ldw	r2,-16(fp)
    cf10:	11000217 	ldw	r4,8(r2)
    cf14:	e1bffb17 	ldw	r6,-20(fp)
    cf18:	e17ffd17 	ldw	r5,-12(fp)
    cf1c:	000d1fc0 	call	d1fc <memcmp>
    cf20:	1004c03a 	cmpne	r2,r2,zero
    cf24:	1000031e 	bne	r2,zero,cf34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    cf28:	e0bffc17 	ldw	r2,-16(fp)
    cf2c:	e0bfff15 	stw	r2,-4(fp)
    cf30:	00000706 	br	cf50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cf34:	e0bffc17 	ldw	r2,-16(fp)
    cf38:	10800017 	ldw	r2,0(r2)
    cf3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    cf40:	e0fffe17 	ldw	r3,-8(fp)
    cf44:	e0bffc17 	ldw	r2,-16(fp)
    cf48:	10fff01e 	bne	r2,r3,cf0c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cf4c:	e03fff15 	stw	zero,-4(fp)
    cf50:	e0bfff17 	ldw	r2,-4(fp)
}
    cf54:	e037883a 	mov	sp,fp
    cf58:	dfc00117 	ldw	ra,4(sp)
    cf5c:	df000017 	ldw	fp,0(sp)
    cf60:	dec00204 	addi	sp,sp,8
    cf64:	f800283a 	ret

0000cf68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cf68:	defffa04 	addi	sp,sp,-24
    cf6c:	dfc00515 	stw	ra,20(sp)
    cf70:	df000415 	stw	fp,16(sp)
    cf74:	df000404 	addi	fp,sp,16
    cf78:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cf7c:	00800074 	movhi	r2,1
    cf80:	10bdd404 	addi	r2,r2,-2224
    cf84:	10800017 	ldw	r2,0(r2)
    cf88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cf8c:	00003306 	br	d05c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    cf90:	e0bffd17 	ldw	r2,-12(fp)
    cf94:	11000217 	ldw	r4,8(r2)
    cf98:	0000fb40 	call	fb4 <strlen>
    cf9c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    cfa0:	e0bffd17 	ldw	r2,-12(fp)
    cfa4:	10c00217 	ldw	r3,8(r2)
    cfa8:	e0bffc17 	ldw	r2,-16(fp)
    cfac:	1885883a 	add	r2,r3,r2
    cfb0:	10bfffc4 	addi	r2,r2,-1
    cfb4:	10800003 	ldbu	r2,0(r2)
    cfb8:	10803fcc 	andi	r2,r2,255
    cfbc:	1080201c 	xori	r2,r2,128
    cfc0:	10bfe004 	addi	r2,r2,-128
    cfc4:	10800bd8 	cmpnei	r2,r2,47
    cfc8:	1000031e 	bne	r2,zero,cfd8 <alt_find_file+0x70>
    {
      len -= 1;
    cfcc:	e0bffc17 	ldw	r2,-16(fp)
    cfd0:	10bfffc4 	addi	r2,r2,-1
    cfd4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cfd8:	e0bffc17 	ldw	r2,-16(fp)
    cfdc:	1007883a 	mov	r3,r2
    cfe0:	e0bffe17 	ldw	r2,-8(fp)
    cfe4:	1885883a 	add	r2,r3,r2
    cfe8:	10800003 	ldbu	r2,0(r2)
    cfec:	10803fcc 	andi	r2,r2,255
    cff0:	1080201c 	xori	r2,r2,128
    cff4:	10bfe004 	addi	r2,r2,-128
    cff8:	10800be0 	cmpeqi	r2,r2,47
    cffc:	10000a1e 	bne	r2,zero,d028 <alt_find_file+0xc0>
    d000:	e0bffc17 	ldw	r2,-16(fp)
    d004:	1007883a 	mov	r3,r2
    d008:	e0bffe17 	ldw	r2,-8(fp)
    d00c:	1885883a 	add	r2,r3,r2
    d010:	10800003 	ldbu	r2,0(r2)
    d014:	10803fcc 	andi	r2,r2,255
    d018:	1080201c 	xori	r2,r2,128
    d01c:	10bfe004 	addi	r2,r2,-128
    d020:	1004c03a 	cmpne	r2,r2,zero
    d024:	10000a1e 	bne	r2,zero,d050 <alt_find_file+0xe8>
    d028:	e0bffd17 	ldw	r2,-12(fp)
    d02c:	11000217 	ldw	r4,8(r2)
    d030:	e1bffc17 	ldw	r6,-16(fp)
    d034:	e17ffe17 	ldw	r5,-8(fp)
    d038:	000d1fc0 	call	d1fc <memcmp>
    d03c:	1004c03a 	cmpne	r2,r2,zero
    d040:	1000031e 	bne	r2,zero,d050 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d044:	e0bffd17 	ldw	r2,-12(fp)
    d048:	e0bfff15 	stw	r2,-4(fp)
    d04c:	00000806 	br	d070 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    d050:	e0bffd17 	ldw	r2,-12(fp)
    d054:	10800017 	ldw	r2,0(r2)
    d058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d05c:	00c00074 	movhi	r3,1
    d060:	18fdd404 	addi	r3,r3,-2224
    d064:	e0bffd17 	ldw	r2,-12(fp)
    d068:	10ffc91e 	bne	r2,r3,cf90 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d06c:	e03fff15 	stw	zero,-4(fp)
    d070:	e0bfff17 	ldw	r2,-4(fp)
}
    d074:	e037883a 	mov	sp,fp
    d078:	dfc00117 	ldw	ra,4(sp)
    d07c:	df000017 	ldw	fp,0(sp)
    d080:	dec00204 	addi	sp,sp,8
    d084:	f800283a 	ret

0000d088 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d088:	defffa04 	addi	sp,sp,-24
    d08c:	dfc00515 	stw	ra,20(sp)
    d090:	df000415 	stw	fp,16(sp)
    d094:	dc000315 	stw	r16,12(sp)
    d098:	df000304 	addi	fp,sp,12
    d09c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d0a0:	00bffa04 	movi	r2,-24
    d0a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d0a8:	e03ffe15 	stw	zero,-8(fp)
    d0ac:	00002006 	br	d130 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    d0b0:	e13ffe17 	ldw	r4,-8(fp)
    d0b4:	04000074 	movhi	r16,1
    d0b8:	84395604 	addi	r16,r16,-6824
    d0bc:	01400304 	movi	r5,12
    d0c0:	0000e180 	call	e18 <__mulsi3>
    d0c4:	1405883a 	add	r2,r2,r16
    d0c8:	10800017 	ldw	r2,0(r2)
    d0cc:	1004c03a 	cmpne	r2,r2,zero
    d0d0:	1000141e 	bne	r2,zero,d124 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    d0d4:	e13ffe17 	ldw	r4,-8(fp)
    d0d8:	04000074 	movhi	r16,1
    d0dc:	84395604 	addi	r16,r16,-6824
    d0e0:	01400304 	movi	r5,12
    d0e4:	0000e180 	call	e18 <__mulsi3>
    d0e8:	1407883a 	add	r3,r2,r16
    d0ec:	e0bfff17 	ldw	r2,-4(fp)
    d0f0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    d0f4:	00800074 	movhi	r2,1
    d0f8:	10bdd804 	addi	r2,r2,-2208
    d0fc:	10c00017 	ldw	r3,0(r2)
    d100:	e0bffe17 	ldw	r2,-8(fp)
    d104:	1880040e 	bge	r3,r2,d118 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    d108:	00c00074 	movhi	r3,1
    d10c:	18fdd804 	addi	r3,r3,-2208
    d110:	e0bffe17 	ldw	r2,-8(fp)
    d114:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    d118:	e0bffe17 	ldw	r2,-8(fp)
    d11c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d120:	00000606 	br	d13c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d124:	e0bffe17 	ldw	r2,-8(fp)
    d128:	10800044 	addi	r2,r2,1
    d12c:	e0bffe15 	stw	r2,-8(fp)
    d130:	e0bffe17 	ldw	r2,-8(fp)
    d134:	10800810 	cmplti	r2,r2,32
    d138:	103fdd1e 	bne	r2,zero,d0b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d13c:	e0bffd17 	ldw	r2,-12(fp)
}
    d140:	e037883a 	mov	sp,fp
    d144:	dfc00217 	ldw	ra,8(sp)
    d148:	df000117 	ldw	fp,4(sp)
    d14c:	dc000017 	ldw	r16,0(sp)
    d150:	dec00304 	addi	sp,sp,12
    d154:	f800283a 	ret

0000d158 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d158:	defffb04 	addi	sp,sp,-20
    d15c:	df000415 	stw	fp,16(sp)
    d160:	df000404 	addi	fp,sp,16
    d164:	e13ffe15 	stw	r4,-8(fp)
    d168:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d16c:	e0bfff17 	ldw	r2,-4(fp)
    d170:	10840070 	cmpltui	r2,r2,4097
    d174:	1000021e 	bne	r2,zero,d180 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d178:	00840004 	movi	r2,4096
    d17c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d180:	e0fffe17 	ldw	r3,-8(fp)
    d184:	e0bfff17 	ldw	r2,-4(fp)
    d188:	1885883a 	add	r2,r3,r2
    d18c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d190:	e0bffe17 	ldw	r2,-8(fp)
    d194:	e0bffd15 	stw	r2,-12(fp)
    d198:	00000506 	br	d1b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d19c:	e0bffd17 	ldw	r2,-12(fp)
    d1a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d1a4:	e0bffd17 	ldw	r2,-12(fp)
    d1a8:	10800804 	addi	r2,r2,32
    d1ac:	e0bffd15 	stw	r2,-12(fp)
    d1b0:	e0fffd17 	ldw	r3,-12(fp)
    d1b4:	e0bffc17 	ldw	r2,-16(fp)
    d1b8:	18bff836 	bltu	r3,r2,d19c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d1bc:	e0bffe17 	ldw	r2,-8(fp)
    d1c0:	108007cc 	andi	r2,r2,31
    d1c4:	1005003a 	cmpeq	r2,r2,zero
    d1c8:	1000021e 	bne	r2,zero,d1d4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d1cc:	e0bffd17 	ldw	r2,-12(fp)
    d1d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d1d4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d1d8:	e037883a 	mov	sp,fp
    d1dc:	df000017 	ldw	fp,0(sp)
    d1e0:	dec00104 	addi	sp,sp,4
    d1e4:	f800283a 	ret

0000d1e8 <atexit>:
    d1e8:	200b883a 	mov	r5,r4
    d1ec:	000d883a 	mov	r6,zero
    d1f0:	0009883a 	mov	r4,zero
    d1f4:	000f883a 	mov	r7,zero
    d1f8:	000d2701 	jmpi	d270 <__register_exitproc>

0000d1fc <memcmp>:
    d1fc:	00c000c4 	movi	r3,3
    d200:	1980032e 	bgeu	r3,r6,d210 <memcmp+0x14>
    d204:	2144b03a 	or	r2,r4,r5
    d208:	10c4703a 	and	r2,r2,r3
    d20c:	10000f26 	beq	r2,zero,d24c <memcmp+0x50>
    d210:	31ffffc4 	addi	r7,r6,-1
    d214:	3000061e 	bne	r6,zero,d230 <memcmp+0x34>
    d218:	00000a06 	br	d244 <memcmp+0x48>
    d21c:	39ffffc4 	addi	r7,r7,-1
    d220:	00bfffc4 	movi	r2,-1
    d224:	21000044 	addi	r4,r4,1
    d228:	29400044 	addi	r5,r5,1
    d22c:	38800526 	beq	r7,r2,d244 <memcmp+0x48>
    d230:	20c00003 	ldbu	r3,0(r4)
    d234:	28800003 	ldbu	r2,0(r5)
    d238:	18bff826 	beq	r3,r2,d21c <memcmp+0x20>
    d23c:	1885c83a 	sub	r2,r3,r2
    d240:	f800283a 	ret
    d244:	0005883a 	mov	r2,zero
    d248:	f800283a 	ret
    d24c:	180f883a 	mov	r7,r3
    d250:	20c00017 	ldw	r3,0(r4)
    d254:	28800017 	ldw	r2,0(r5)
    d258:	18bfed1e 	bne	r3,r2,d210 <memcmp+0x14>
    d25c:	31bfff04 	addi	r6,r6,-4
    d260:	21000104 	addi	r4,r4,4
    d264:	29400104 	addi	r5,r5,4
    d268:	39bff936 	bltu	r7,r6,d250 <memcmp+0x54>
    d26c:	003fe806 	br	d210 <memcmp+0x14>

0000d270 <__register_exitproc>:
    d270:	defffa04 	addi	sp,sp,-24
    d274:	00800074 	movhi	r2,1
    d278:	10bdcf04 	addi	r2,r2,-2244
    d27c:	dc000015 	stw	r16,0(sp)
    d280:	14000017 	ldw	r16,0(r2)
    d284:	dd000415 	stw	r20,16(sp)
    d288:	2829883a 	mov	r20,r5
    d28c:	81405217 	ldw	r5,328(r16)
    d290:	dcc00315 	stw	r19,12(sp)
    d294:	dc800215 	stw	r18,8(sp)
    d298:	dc400115 	stw	r17,4(sp)
    d29c:	dfc00515 	stw	ra,20(sp)
    d2a0:	2023883a 	mov	r17,r4
    d2a4:	3027883a 	mov	r19,r6
    d2a8:	3825883a 	mov	r18,r7
    d2ac:	28002526 	beq	r5,zero,d344 <__register_exitproc+0xd4>
    d2b0:	29000117 	ldw	r4,4(r5)
    d2b4:	008007c4 	movi	r2,31
    d2b8:	11002716 	blt	r2,r4,d358 <__register_exitproc+0xe8>
    d2bc:	8800101e 	bne	r17,zero,d300 <__register_exitproc+0x90>
    d2c0:	2105883a 	add	r2,r4,r4
    d2c4:	1085883a 	add	r2,r2,r2
    d2c8:	20c00044 	addi	r3,r4,1
    d2cc:	1145883a 	add	r2,r2,r5
    d2d0:	0009883a 	mov	r4,zero
    d2d4:	15000215 	stw	r20,8(r2)
    d2d8:	28c00115 	stw	r3,4(r5)
    d2dc:	2005883a 	mov	r2,r4
    d2e0:	dfc00517 	ldw	ra,20(sp)
    d2e4:	dd000417 	ldw	r20,16(sp)
    d2e8:	dcc00317 	ldw	r19,12(sp)
    d2ec:	dc800217 	ldw	r18,8(sp)
    d2f0:	dc400117 	ldw	r17,4(sp)
    d2f4:	dc000017 	ldw	r16,0(sp)
    d2f8:	dec00604 	addi	sp,sp,24
    d2fc:	f800283a 	ret
    d300:	29802204 	addi	r6,r5,136
    d304:	00800044 	movi	r2,1
    d308:	110e983a 	sll	r7,r2,r4
    d30c:	30c04017 	ldw	r3,256(r6)
    d310:	2105883a 	add	r2,r4,r4
    d314:	1085883a 	add	r2,r2,r2
    d318:	1185883a 	add	r2,r2,r6
    d31c:	19c6b03a 	or	r3,r3,r7
    d320:	14802015 	stw	r18,128(r2)
    d324:	14c00015 	stw	r19,0(r2)
    d328:	00800084 	movi	r2,2
    d32c:	30c04015 	stw	r3,256(r6)
    d330:	88bfe31e 	bne	r17,r2,d2c0 <__register_exitproc+0x50>
    d334:	30804117 	ldw	r2,260(r6)
    d338:	11c4b03a 	or	r2,r2,r7
    d33c:	30804115 	stw	r2,260(r6)
    d340:	003fdf06 	br	d2c0 <__register_exitproc+0x50>
    d344:	00800074 	movhi	r2,1
    d348:	108dce04 	addi	r2,r2,14136
    d34c:	100b883a 	mov	r5,r2
    d350:	80805215 	stw	r2,328(r16)
    d354:	003fd606 	br	d2b0 <__register_exitproc+0x40>
    d358:	00800034 	movhi	r2,0
    d35c:	10800004 	addi	r2,r2,0
    d360:	1000021e 	bne	r2,zero,d36c <__register_exitproc+0xfc>
    d364:	013fffc4 	movi	r4,-1
    d368:	003fdc06 	br	d2dc <__register_exitproc+0x6c>
    d36c:	01006404 	movi	r4,400
    d370:	103ee83a 	callr	r2
    d374:	1007883a 	mov	r3,r2
    d378:	103ffa26 	beq	r2,zero,d364 <__register_exitproc+0xf4>
    d37c:	80805217 	ldw	r2,328(r16)
    d380:	180b883a 	mov	r5,r3
    d384:	18000115 	stw	zero,4(r3)
    d388:	18800015 	stw	r2,0(r3)
    d38c:	80c05215 	stw	r3,328(r16)
    d390:	18006215 	stw	zero,392(r3)
    d394:	18006315 	stw	zero,396(r3)
    d398:	0009883a 	mov	r4,zero
    d39c:	883fc826 	beq	r17,zero,d2c0 <__register_exitproc+0x50>
    d3a0:	003fd706 	br	d300 <__register_exitproc+0x90>
    d3a4:	000030a4 	muli	zero,zero,194
