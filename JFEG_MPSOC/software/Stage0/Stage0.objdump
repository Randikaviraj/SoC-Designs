
Stage0.elf:     file format elf32-littlenios2
Stage0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014178 memsz 0x00014178 flags r-x
    LOAD off    0x00015198 vaddr 0x00014198 paddr 0x00015c90 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x00017788 vaddr 0x00017788 paddr 0x00017788 align 2**12
         filesz 0x00000000 memsz 0x000008f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013958  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000068c  00013b0c  00013b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  00014198  00015c90  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000008f8  00017788  00017788  00017788  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00016c90  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  00016cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c99  00000000  00000000  00017e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000351de  00000000  00000000  00019aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b2c0  00000000  00000000  0004ec87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c31e  00000000  00000000  00059f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023a0  00000000  00000000  00076268  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002df8  00000000  00000000  00078608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001285b  00000000  00000000  0007b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0008dc5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  0008dc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00092676  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00092679  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009267e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009267f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00092680  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009268b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00092696  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  000926a1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  000926a4  2**0
                  CONTENTS, READONLY
 26 .jdi          000190dd  00000000  00000000  000926d8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00164bd4  00000000  00000000  000ab7b5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00013b0c l    d  .rodata	00000000 .rodata
00014198 l    d  .rwdata	00000000 .rwdata
00017788 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000154c l     F .text	00000058 std
00001658 l     F .text	00000008 __fp_lock
00001660 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014198 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000033f4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003648 l     F .text	00000058 __sprint_r
00013bbe l     O .rodata	00000010 blanks.3452
00013bae l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00013bd6 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
00013cf9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00006f14 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00015c1c l     O .rwdata	00000004 charset
00013e9c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00013fe4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000a9e0 l     F .text	00000048 match
000149c0 l     O .rwdata	00000014 fpi.1950
00014000 l     O .rodata	00000028 tinytens
000149ac l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000ce58 l     F .text	00000024 htinit
0000cee4 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000d74c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000e810 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000fa38 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00010510 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010570 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010670 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010790 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010870 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000109cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00010ad8 l     F .text	000000dc alt_file_locked
00010d3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00010ebc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015c38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
000110cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0001124c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014b7c l     O .rwdata	00001060 jtag_uart_0
00015bdc l     O .rwdata	00000028 altera_hostfs
00011348 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011ae8 l     F .text	00000228 altera_avalon_jtag_uart_irq
00011d10 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001238c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00015c3c l     O .rwdata	00000004 hcinfo.2234
00015c48 l     O .rwdata	00000004 hcinfo.2276
00015c54 l     O .rwdata	00000004 hcinfo.2289
00015c60 l     O .rwdata	00000004 hcinfo.2311
00015c6c l     O .rwdata	00000004 hcinfo.2333
00015c78 l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012c50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013370 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000138f4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00013aa8 l     F .text	00000040 alt_sim_halt
000094c4 g     F .text	00000094 _mprec_log10
000095b0 g     F .text	00000088 __any_on
00008c1c g     F .text	00000070 _isatty_r
00013fbc g     O .rodata	00000028 __mprec_tinytens
00010a2c g     F .text	0000006c alt_main
0000317c g     F .text	000000a0 _puts_r
00017df0 g     O .bss	00000100 alt_irq
00008d7c g     F .text	00000078 _lseek_r
00011638 g     F .text	00000060 altera_avalon_fifo_write_almostfull
00015c90 g       *ABS*	00000000 __flash_rwdata_start
000086e0 g     F .text	000000a0 __sflags
0000f330 g     F .text	00000088 __eqdf2
00018080 g       *ABS*	00000000 __alt_heap_start
00003104 g     F .text	00000044 printf
00003488 g     F .text	00000068 __sseek
000015b4 g     F .text	000000a4 __sinit
00008cdc g     F .text	00000084 _setlocale_r
000016b4 g     F .text	00000068 __sfmoreglue
0000cd88 g     F .text	0000001c ungetc
00010ab8 g     F .text	00000020 __malloc_unlock
0001248c g     F .text	00000154 alt_hostfs_open
0000aa28 g     F .text	000014e4 _strtod_r
000177f0 g     O .bss	00000080 CR
00008fd8 g     F .text	000000e0 memmove
00011380 g     F .text	000000bc altera_avalon_fifo_init
000016a4 g     F .text	00000010 _cleanup
000116f8 g     F .text	00000064 altera_avalon_fifo_write_fifo
00009638 g     F .text	000000bc _Balloc
00001174 g     F .text	00000030 jemalloc
0000f440 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00017790 g     O .bss	00000004 read_format
00000000 g     F .entry	0000001c __reset
00011038 g     F .text	00000094 times
000118b8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002464 g     F .text	00000074 _fstat_r
00017794 g     O .bss	00000004 errno
00006bf0 g     F .text	00000024 __svfscanf
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0000fd74 g     F .text	0000002c __make_fp
000177b4 g     O .bss	00000004 alt_argv
0001dc04 g       *ABS*	00000000 _gp
00011570 g     F .text	00000068 altera_avalon_fifo_clear_event
00001fc0 g     F .text	00000044 fscanf
000149fc g     O .rwdata	00000180 alt_fd_list
00012774 g     F .text	000000a0 alt_hostfs_seek
00012d78 g     F .text	00000094 alt_find_dev
00002f54 g     F .text	000000a0 memcpy
00003640 g     F .text	00000008 _times_r
0000d798 g     F .text	00000248 __hexnan
00001698 g     F .text	0000000c _cleanup_r
0000f660 g     F .text	000000f8 __floatsidf
00012f2c g     F .text	00000090 alt_fs_reg
00013434 g     F .text	00000078 alt_io_redirect
0000f550 g     F .text	00000088 __ltdf2
00013b0c g       *ABS*	00000000 __DTOR_END__
0000321c g     F .text	00000014 puts
00008e74 g     F .text	00000040 mbrtowc
00006c14 g     F .text	00000068 _vfscanf_r
00009414 g     F .text	000000b0 __ratio
00011f28 g     F .text	00000224 altera_avalon_jtag_uart_read
00002800 g     F .text	00000014 malloc
00003148 g     F .text	00000034 _printf_r
0000fb74 g     F .text	00000008 __udivsi3
000106d0 g     F .text	000000c0 isatty
00008c8c g     F .text	0000002c iswspace
00013ecc g     O .rodata	000000c8 __mprec_tens
00017870 g     O .bss	00000080 Y2
00008cb8 g     F .text	00000008 __locale_charset
0000da78 g     F .text	000000a4 __fixunsdfsi
00013670 g     F .text	00000090 alt_icache_flush
00017798 g     O .bss	00000004 __malloc_top_pad
0000c7fc g     F .text	00000024 strtoul
00015c18 g     O .rwdata	00000004 __mb_cur_max
00008cc0 g     F .text	0000000c _localeconv_r
0000c820 g     F .text	000002f0 _strtoull_r
00009d30 g     F .text	0000003c __i2b
00008780 g     F .text	0000049c __sfvwrite_r
00003410 g     F .text	00000070 _sbrk_r
00000de4 g     F .text	0000002c encodeMCU
000001f0 g     F .text	00000794 read_444_format
000178f0 g     O .bss	00000080 Temp
00012634 g     F .text	000000a0 alt_hostfs_read
0000a0ac g     F .text	00000078 _read_r
000149a0 g     O .rwdata	0000000c __lc_ctype
00015c30 g     O .rwdata	00000004 alt_max_fd
000100b4 g     F .text	00000138 __unpack_d
000011f8 g     F .text	00000110 _fclose_r
00001518 g     F .text	00000034 fflush
0001779c g     O .bss	00000004 __malloc_max_sbrked_mem
0000eca0 g     F .text	00000074 __adddf3
0000e6a8 g     F .text	00000078 __nesf2
000092f4 g     F .text	00000120 __b2d
0000e0f8 g     F .text	000005b0 __umoddi3
000108dc g     F .text	000000f0 lseek
00015c08 g     O .rwdata	00000004 _global_impure_ptr
0000a124 g     F .text	000005f4 _realloc_r
00018080 g       *ABS*	00000000 __bss_end
00013278 g     F .text	000000f8 alt_iic_isr_register
00013544 g     F .text	0000010c alt_tick
00017cf0 g     O .bss	00000100 __hexdig
0000db1c g     F .text	000005dc __udivdi3
00013f94 g     O .rodata	00000028 __mprec_bigtens
00009f8c g     F .text	00000120 __s2b
0000f8a4 g     F .text	00000194 __floatunsidf
00009214 g     F .text	00000060 __mcmp
00015c14 g     O .rwdata	00000004 __ctype_ptr
00001680 g     F .text	00000018 __fp_lock_all
00013230 g     F .text	00000048 alt_ic_irq_enabled
000134ac g     F .text	00000098 alt_alarm_stop
0000c290 g     F .text	00000024 strtol
000177bc g     O .bss	00000004 alt_irq_active
000125e0 g     F .text	00000054 alt_hostfs_close
000000ec g     F .exceptions	000000c8 alt_irq_handler
000149d4 g     O .rwdata	00000028 alt_dev_null
0000fc04 g     F .text	000000c8 __unpack_f
00012b80 g     F .text	0000001c alt_dcache_flush_all
000090e0 g     F .text	00000070 __hi0bits
00017970 g     O .bss	00000040 Lqt
0000f758 g     F .text	000000d8 __fixdfsi
0000c030 g     F .text	0000001c strtod
000115d8 g     F .text	00000060 altera_avalon_fifo_write_ienable
00015c90 g       *ABS*	00000000 __ram_rwdata_end
000114e0 g     F .text	0000002c altera_avalon_fifo_read_almostempty
00015c28 g     O .rwdata	00000008 alt_dev_list
0001112c g     F .text	00000120 write
0000e720 g     F .text	00000078 __gtsf2
00014198 g       *ABS*	00000000 __ram_rodata_end
0001059c g     F .text	000000d4 fstat
0000f5d8 g     F .text	00000088 __ledf2
00009e6c g     F .text	00000120 __pow5mult
000177a4 g     O .bss	00000004 __nlocale_changed
0000fb7c g     F .text	00000008 __umodsi3
00018080 g       *ABS*	00000000 end
000102b4 g     F .text	00000160 __pack_f
00002440 g     F .text	00000024 fseek
00011a28 g     F .text	000000c0 altera_avalon_jtag_uart_init
0001150c g     F .text	0000003c altera_avalon_fifo_read_event
00013b08 g       *ABS*	00000000 __CTOR_LIST__
01555550 g       *ABS*	00000000 __alt_stack_pointer
000123fc g     F .text	00000090 alt_avalon_timer_sc_init
0000fb84 g     F .text	00000080 __clzsi2
0001214c g     F .text	00000240 altera_avalon_jtag_uart_write
000117cc g     F .text	00000058 altera_avalon_fifo_read_fifo
000015a4 g     F .text	00000004 __sfp_lock_acquire
00008ef4 g     F .text	000000e4 memchr
000036a0 g     F .text	00001eac ___vfprintf_internal_r
0000a8c4 g     F .text	00000060 _sprintf_r
00001c84 g     F .text	00000314 _free_r
000138f8 g     F .text	000001b0 __call_exitprocs
000177a8 g     O .bss	00000004 __mlocale_changed
00015c10 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
000177c0 g     O .bss	00000004 _alt_tick_rate
0000c2b4 g     F .text	00000318 _strtoll_r
00000b9c g     F .text	00000248 encode_image
000099fc g     F .text	0000014c __lshift
000177c4 g     O .bss	00000004 _alt_nticks
00010d9c g     F .text	00000120 read
000112e0 g     F .text	00000068 alt_sys_init
0000308c g     F .text	00000078 _open_r
000137c0 g     F .text	00000134 __register_exitproc
00009b48 g     F .text	000001e8 __multiply
00011dc0 g     F .text	00000074 altera_avalon_jtag_uart_close
00014198 g       *ABS*	00000000 __ram_rwdata_start
00013b0c g       *ABS*	00000000 __ram_rodata_start
000177c8 g     O .bss	00000028 __malloc_current_mallinfo
000096f4 g     F .text	0000017c __d2b
000118e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c5cc g     F .text	00000230 _strtoul_r
00012fbc g     F .text	000000b8 alt_get_fd
000101ec g     F .text	000000c8 __fpcmp_parts_d
00006ea4 g     F .text	00000070 _close_r
0001374c g     F .text	00000074 memcmp
00011990 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00018080 g       *ABS*	00000000 __alt_stack_base
000119d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00006d68 g     F .text	0000013c __swsetup_r
0001143c g     F .text	0000003c altera_avalon_fifo_read_status
0000f0d8 g     F .text	00000258 __divdf3
0000171c g     F .text	000000f0 __sfp
00009558 g     F .text	00000058 __copybits
00014598 g     O .rwdata	00000408 __malloc_av_
000015b0 g     F .text	00000004 __sinit_lock_release
0000ed14 g     F .text	000003c4 __muldf3
0000356c g     F .text	00000060 __sread
00001b18 g     F .text	00000040 fread
0001188c g     F .text	0000002c altera_avalon_fifo_read_other_info
00012e0c g     F .text	00000120 alt_find_file
00012b9c g     F .text	000000b4 alt_dev_llist_insert
00010a98 g     F .text	00000020 __malloc_lock
00010f7c g     F .text	000000bc sbrk
0000131c g     F .text	000001fc _fflush_r
0000cda4 g     F .text	000000b4 _calloc_r
00001900 g     F .text	0000001c fopen
00017788 g       *ABS*	00000000 __bss_start
00001f98 g     F .text	00000028 _fscanf_r
00002ff4 g     F .text	00000098 memset
00000e10 g     F .text	00000364 main
000179b0 g     O .bss	00000080 ILqt
000177b8 g     O .bss	00000004 alt_envp
000177a0 g     O .bss	00000004 __malloc_max_total_mem
00017a30 g     O .bss	00000080 Y4
00011938 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00011548 g     F .text	00000028 altera_avalon_fifo_read_level
0000e798 g     F .text	00000078 __ltsf2
0000191c g     F .text	000001fc _fread_r
00003480 g     F .text	00000008 __sclose
01555550 g       *ABS*	00000000 __alt_heap_limit
00001308 g     F .text	00000014 fclose
0000c04c g     F .text	00000244 _strtol_r
0000f830 g     F .text	00000074 __truncdfsf2
00017ef0 g     O .bss	00000190 _atexit0
0000712c g     F .text	000015b4 _dtoa_r
00002814 g     F .text	00000740 _malloc_r
00015c34 g     O .rwdata	00000004 alt_errno
0000cb10 g     F .text	000000dc __submore
000025a0 g     F .text	000000b8 _fwalk
00008eb4 g     F .text	00000040 _mbtowc_r
0000fab4 g     F .text	00000060 __divsi3
00014044 g     O .rodata	00000014 __thenan_df
00001b58 g     F .text	0000012c _malloc_trim_r
00013b0c g       *ABS*	00000000 __CTOR_END__
0000a924 g     F .text	000000bc strcmp
00013b0c g       *ABS*	00000000 __flash_rodata_start
00013b0c g       *ABS*	00000000 __DTOR_LIST__
0000f3b8 g     F .text	00000088 __nedf2
000112ac g     F .text	00000034 alt_irq_init
00010f1c g     F .text	00000060 alt_release_fd
0000a850 g     F .text	00000074 sprintf
00014058 g     O .rodata	00000100 __clz_tab
000177ac g     O .bss	00000004 _PathLocale
0000bf0c g     F .text	00000124 strtof
00013700 g     F .text	00000014 atexit
00006cf0 g     F .text	00000078 _write_r
00008d60 g     F .text	0000001c setlocale
00017ab0 g     O .bss	00000080 CB
0000a848 g     F .text	00000008 nanf
00015c04 g     O .rwdata	00000004 _impure_ptr
000177b0 g     O .bss	00000004 alt_argc
00008df4 g     F .text	00000080 _mbrtowc_r
00012d14 g     F .text	00000064 _do_dtors
00002004 g     F .text	0000043c _fseek_r
00017b30 g     O .bss	00000040 Cqt
00003230 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00009274 g     F .text	00000080 __ulp
0000a718 g     F .text	00000040 __isinfd
00001668 g     F .text	00000018 __fp_unlock_all
00015c20 g     O .rwdata	00000008 alt_fs_list
000126d4 g     F .text	000000a0 alt_hostfs_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008ccc g     F .text	00000010 localeconv
00017788 g     O .bss	00000004 lcode
00011824 g     F .text	00000068 altera_avalon_fifo_write_other_info
000130a4 g     F .text	00000050 alt_ic_isr_register
0000ce7c g     F .text	00000068 __hexdig_init
00015c90 g       *ABS*	00000000 _edata
00018080 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00006c7c g     F .text	00000074 vfscanf
00011e34 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00013190 g     F .text	000000a0 alt_ic_irq_disable
000034f0 g     F .text	0000007c __swrite
00015c0c g     O .rwdata	00000004 __malloc_trim_threshold
00013650 g     F .text	00000020 altera_nios2_qsys_irq_init
00013714 g     F .text	00000038 exit
00017b70 g     O .bss	00000080 Y1
000024d8 g     F .text	000000c8 _fwalk_reent
00009870 g     F .text	0000018c __mdiff
0000fb14 g     F .text	00000060 __modsi3
00011478 g     F .text	0000003c altera_avalon_fifo_read_ienable
01555550 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000015a8 g     F .text	00000004 __sfp_lock_release
0000a788 g     F .text	000000c0 __sccl
00013bf8 g     O .rodata	00000101 _ctype_
00017bf0 g     O .bss	00000080 ICqt
0000fccc g     F .text	000000a8 __fpcmp_parts_f
0000180c g     F .text	000000f4 _fopen_r
00013ae8 g     F .text	00000020 _exit
0000a758 g     F .text	00000030 __isnand
00012a2c g     F .text	00000154 alt_alarm_start
0000d9e0 g     F .text	00000098 __muldi3
000114b4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00002658 g     F .text	00000194 __smakebuf_r
000035cc g     F .text	00000074 strlen
00010bb4 g     F .text	00000188 open
0001175c g     F .text	00000070 altera_avalon_read_fifo
0000f4c8 g     F .text	00000088 __gedf2
00000984 g     F .text	00000218 initialization
0000cf94 g     F .text	000007b8 __gethex
000011a4 g     F .text	00000054 clock
0001778c g     O .bss	00000002 bitindex
00013074 g     F .text	00000030 alt_icache_flush_all
00015c84 g     O .rwdata	00000004 alt_priority_mask
000130f4 g     F .text	0000009c alt_ic_irq_enable
0000554c g     F .text	00000024 __vfprintf_internal
0000ec20 g     F .text	00000080 __subdf3
00009150 g     F .text	000000c4 __lo0bits
00005570 g     F .text	00001680 __svfscanf_r
00011698 g     F .text	00000060 altera_avalon_fifo_write_almostempty
00015c88 g     O .rwdata	00000008 alt_alarm_list
0000cbec g     F .text	0000019c _ungetc_r
00012cb0 g     F .text	00000064 _do_ctors
00017c70 g     O .bss	00000080 Y3
00010414 g     F .text	000000fc close
000107f0 g     F .text	00000080 alt_load
0000fda0 g     F .text	00000314 __pack_d
000027ec g     F .text	00000014 free
000015ac g     F .text	00000004 __sinit_lock_acquire
00009d6c g     F .text	00000100 __multadd
000090b8 g     F .text	00000028 _Bfree
00012814 g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18df7c04 	addi	r3,r3,32240
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18df7c04 	addi	r3,r3,32240
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c05574 	movhi	sp,341
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	ded55414 	ori	sp,sp,21840

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6b70114 	ori	gp,gp,56324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	109de214 	ori	r2,r2,30600

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18e02014 	ori	r3,r3,32896

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	00107f00 	call	107f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	0010a2c0 	call	10a2c <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <read_444_format>:
		}
	}
}
*/
void read_444_format (JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, UINT8 *input_ptr)
{	
     1f0:	defff404 	addi	sp,sp,-48
     1f4:	dfc00b15 	stw	ra,44(sp)
     1f8:	df000a15 	stw	fp,40(sp)
     1fc:	df000a04 	addi	fp,sp,40
     200:	e13ffe15 	stw	r4,-8(fp)
     204:	e17fff15 	stw	r5,-4(fp)
	//INT16 *CR_Ptr = CR;

	UINT8 R, G, B;
	INT32 Y, Cb, Cr;

	UINT16 rows = jpeg_encoder_structure->rows;
     208:	e0bffe17 	ldw	r2,-8(fp)
     20c:	1080030b 	ldhu	r2,12(r2)
     210:	e0bff70d 	sth	r2,-36(fp)
	UINT16 cols = jpeg_encoder_structure->cols;
     214:	e0bffe17 	ldw	r2,-8(fp)
     218:	1080038b 	ldhu	r2,14(r2)
     21c:	e0bff68d 	sth	r2,-38(fp)
	UINT16 incr = jpeg_encoder_structure->incr;
     220:	e0bffe17 	ldw	r2,-8(fp)
     224:	1080050b 	ldhu	r2,20(r2)
     228:	e0bff60d 	sth	r2,-40(fp)

	for (i=rows; i>0; i--)
     22c:	e0bff70b 	ldhu	r2,-36(fp)
     230:	e0bffd15 	stw	r2,-12(fp)
     234:	0000dd06 	br	5ac <read_444_format+0x3bc>
	{
		for (j=cols; j>0; j--)
     238:	e0bff68b 	ldhu	r2,-38(fp)
     23c:	e0bffc15 	stw	r2,-16(fp)
     240:	00006506 	br	3d8 <read_444_format+0x1e8>
		{
		  R = *input_ptr++;
     244:	e0bfff17 	ldw	r2,-4(fp)
     248:	10800003 	ldbu	r2,0(r2)
     24c:	e0bffb85 	stb	r2,-18(fp)
     250:	e0bfff17 	ldw	r2,-4(fp)
     254:	10800044 	addi	r2,r2,1
     258:	e0bfff15 	stw	r2,-4(fp)
		  G = *input_ptr++;
     25c:	e0bfff17 	ldw	r2,-4(fp)
     260:	10800003 	ldbu	r2,0(r2)
     264:	e0bffb45 	stb	r2,-19(fp)
     268:	e0bfff17 	ldw	r2,-4(fp)
     26c:	10800044 	addi	r2,r2,1
     270:	e0bfff15 	stw	r2,-4(fp)
		  B = *input_ptr++;
     274:	e0bfff17 	ldw	r2,-4(fp)
     278:	10800003 	ldbu	r2,0(r2)
     27c:	e0bffb05 	stb	r2,-20(fp)
     280:	e0bfff17 	ldw	r2,-4(fp)
     284:	10800044 	addi	r2,r2,1
     288:	e0bfff15 	stw	r2,-4(fp)

		  Y = ((77 * R + 150 * G + 29 * B) >> 8);
     28c:	e0bffb83 	ldbu	r2,-18(fp)
     290:	10c01364 	muli	r3,r2,77
     294:	e0bffb43 	ldbu	r2,-19(fp)
     298:	108025a4 	muli	r2,r2,150
     29c:	1887883a 	add	r3,r3,r2
     2a0:	e0bffb03 	ldbu	r2,-20(fp)
     2a4:	10800764 	muli	r2,r2,29
     2a8:	1885883a 	add	r2,r3,r2
     2ac:	1005d23a 	srai	r2,r2,8
     2b0:	e0bffa15 	stw	r2,-24(fp)
		  Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     2b4:	e0bffb83 	ldbu	r2,-18(fp)
     2b8:	10fff564 	muli	r3,r2,-43
     2bc:	e0bffb43 	ldbu	r2,-19(fp)
     2c0:	10801564 	muli	r2,r2,85
     2c4:	1887c83a 	sub	r3,r3,r2
     2c8:	e0bffb03 	ldbu	r2,-20(fp)
     2cc:	100491fa 	slli	r2,r2,7
     2d0:	1885883a 	add	r2,r3,r2
     2d4:	1005d23a 	srai	r2,r2,8
     2d8:	10802004 	addi	r2,r2,128
     2dc:	e0bff915 	stw	r2,-28(fp)
		  Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     2e0:	e0bffb83 	ldbu	r2,-18(fp)
     2e4:	100691fa 	slli	r3,r2,7
     2e8:	e0bffb43 	ldbu	r2,-19(fp)
     2ec:	10801ae4 	muli	r2,r2,107
     2f0:	1887c83a 	sub	r3,r3,r2
     2f4:	e0bffb03 	ldbu	r2,-20(fp)
     2f8:	10800564 	muli	r2,r2,21
     2fc:	1885c83a 	sub	r2,r3,r2
     300:	1005d23a 	srai	r2,r2,8
     304:	10802004 	addi	r2,r2,128
     308:	e0bff815 	stw	r2,-32(fp)

		  if (Y < 0)
     30c:	e0bffa17 	ldw	r2,-24(fp)
     310:	1004403a 	cmpge	r2,r2,zero
     314:	1000021e 	bne	r2,zero,320 <read_444_format+0x130>
		    Y = 0;
     318:	e03ffa15 	stw	zero,-24(fp)
     31c:	00000506 	br	334 <read_444_format+0x144>
		  else if (Y > 255)
     320:	e0bffa17 	ldw	r2,-24(fp)
     324:	10804010 	cmplti	r2,r2,256
     328:	1000021e 	bne	r2,zero,334 <read_444_format+0x144>
		    Y = 255;
     32c:	00803fc4 	movi	r2,255
     330:	e0bffa15 	stw	r2,-24(fp)

		  if (Cb < 0)
     334:	e0bff917 	ldw	r2,-28(fp)
     338:	1004403a 	cmpge	r2,r2,zero
     33c:	1000021e 	bne	r2,zero,348 <read_444_format+0x158>
		    Cb = 0;
     340:	e03ff915 	stw	zero,-28(fp)
     344:	00000506 	br	35c <read_444_format+0x16c>
		  else if (Cb > 255)
     348:	e0bff917 	ldw	r2,-28(fp)
     34c:	10804010 	cmplti	r2,r2,256
     350:	1000021e 	bne	r2,zero,35c <read_444_format+0x16c>
		    Cb = 255;
     354:	00803fc4 	movi	r2,255
     358:	e0bff915 	stw	r2,-28(fp)

		  if (Cr < 0)
     35c:	e0bff817 	ldw	r2,-32(fp)
     360:	1004403a 	cmpge	r2,r2,zero
     364:	1000021e 	bne	r2,zero,370 <read_444_format+0x180>
		    Cr = 0;
     368:	e03ff815 	stw	zero,-32(fp)
     36c:	00000506 	br	384 <read_444_format+0x194>
		  else if (Cr > 255)
     370:	e0bff817 	ldw	r2,-32(fp)
     374:	10804010 	cmplti	r2,r2,256
     378:	1000021e 	bne	r2,zero,384 <read_444_format+0x194>
		    Cr = 255;
     37c:	00803fc4 	movi	r2,255
     380:	e0bff815 	stw	r2,-32(fp)

		  altera_avalon_fifo_write_fifo(0x08001108,0x080010a0,Y);
     384:	e1bffa17 	ldw	r6,-24(fp)
     388:	01020034 	movhi	r4,2048
     38c:	21044204 	addi	r4,r4,4360
     390:	01420034 	movhi	r5,2048
     394:	29442804 	addi	r5,r5,4256
     398:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001104,0x08001060,Cb);
     39c:	e1bff917 	ldw	r6,-28(fp)
     3a0:	01020034 	movhi	r4,2048
     3a4:	21044104 	addi	r4,r4,4356
     3a8:	01420034 	movhi	r5,2048
     3ac:	29441804 	addi	r5,r5,4192
     3b0:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001100,0x08001080,Cr);
     3b4:	e1bff817 	ldw	r6,-32(fp)
     3b8:	01020034 	movhi	r4,2048
     3bc:	21044004 	addi	r4,r4,4352
     3c0:	01420034 	movhi	r5,2048
     3c4:	29442004 	addi	r5,r5,4224
     3c8:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i=rows; i>0; i--)
	{
		for (j=cols; j>0; j--)
     3cc:	e0bffc17 	ldw	r2,-16(fp)
     3d0:	10bfffc4 	addi	r2,r2,-1
     3d4:	e0bffc15 	stw	r2,-16(fp)
     3d8:	e0bffc17 	ldw	r2,-16(fp)
     3dc:	10800048 	cmpgei	r2,r2,1
     3e0:	103f981e 	bne	r2,zero,244 <read_444_format+0x54>
		//   SEND1(Y);
		//   SEND2(Cb);
		//   SEND3(Cr);
		}

		if ((j=(8-cols)) >0)
     3e4:	e0fff68b 	ldhu	r3,-38(fp)
     3e8:	00800204 	movi	r2,8
     3ec:	10c5c83a 	sub	r2,r2,r3
     3f0:	e0bffc15 	stw	r2,-16(fp)
     3f4:	e0bffc17 	ldw	r2,-16(fp)
     3f8:	10800050 	cmplti	r2,r2,1
     3fc:	1000631e 	bne	r2,zero,58c <read_444_format+0x39c>
		{
		  R = *(input_ptr-3);
     400:	e0bfff17 	ldw	r2,-4(fp)
     404:	10bfff44 	addi	r2,r2,-3
     408:	10800003 	ldbu	r2,0(r2)
     40c:	e0bffb85 	stb	r2,-18(fp)
		  G = *(input_ptr-2);
     410:	e0bfff17 	ldw	r2,-4(fp)
     414:	10bfff84 	addi	r2,r2,-2
     418:	10800003 	ldbu	r2,0(r2)
     41c:	e0bffb45 	stb	r2,-19(fp)
		  B = *(input_ptr-1);
     420:	e0bfff17 	ldw	r2,-4(fp)
     424:	10bfffc4 	addi	r2,r2,-1
     428:	10800003 	ldbu	r2,0(r2)
     42c:	e0bffb05 	stb	r2,-20(fp)

		  Y = ((77 * R + 150 * G + 29 * B) >> 8);
     430:	e0bffb83 	ldbu	r2,-18(fp)
     434:	10c01364 	muli	r3,r2,77
     438:	e0bffb43 	ldbu	r2,-19(fp)
     43c:	108025a4 	muli	r2,r2,150
     440:	1887883a 	add	r3,r3,r2
     444:	e0bffb03 	ldbu	r2,-20(fp)
     448:	10800764 	muli	r2,r2,29
     44c:	1885883a 	add	r2,r3,r2
     450:	1005d23a 	srai	r2,r2,8
     454:	e0bffa15 	stw	r2,-24(fp)
		  Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     458:	e0bffb83 	ldbu	r2,-18(fp)
     45c:	10fff564 	muli	r3,r2,-43
     460:	e0bffb43 	ldbu	r2,-19(fp)
     464:	10801564 	muli	r2,r2,85
     468:	1887c83a 	sub	r3,r3,r2
     46c:	e0bffb03 	ldbu	r2,-20(fp)
     470:	100491fa 	slli	r2,r2,7
     474:	1885883a 	add	r2,r3,r2
     478:	1005d23a 	srai	r2,r2,8
     47c:	10802004 	addi	r2,r2,128
     480:	e0bff915 	stw	r2,-28(fp)
		  Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     484:	e0bffb83 	ldbu	r2,-18(fp)
     488:	100691fa 	slli	r3,r2,7
     48c:	e0bffb43 	ldbu	r2,-19(fp)
     490:	10801ae4 	muli	r2,r2,107
     494:	1887c83a 	sub	r3,r3,r2
     498:	e0bffb03 	ldbu	r2,-20(fp)
     49c:	10800564 	muli	r2,r2,21
     4a0:	1885c83a 	sub	r2,r3,r2
     4a4:	1005d23a 	srai	r2,r2,8
     4a8:	10802004 	addi	r2,r2,128
     4ac:	e0bff815 	stw	r2,-32(fp)

		  if (Y < 0)
     4b0:	e0bffa17 	ldw	r2,-24(fp)
     4b4:	1004403a 	cmpge	r2,r2,zero
     4b8:	1000021e 	bne	r2,zero,4c4 <read_444_format+0x2d4>
		    Y = 0;
     4bc:	e03ffa15 	stw	zero,-24(fp)
     4c0:	00000506 	br	4d8 <read_444_format+0x2e8>
		  else if (Y > 255)
     4c4:	e0bffa17 	ldw	r2,-24(fp)
     4c8:	10804010 	cmplti	r2,r2,256
     4cc:	1000021e 	bne	r2,zero,4d8 <read_444_format+0x2e8>
		    Y = 255;
     4d0:	00803fc4 	movi	r2,255
     4d4:	e0bffa15 	stw	r2,-24(fp)

		  if (Cb < 0)
     4d8:	e0bff917 	ldw	r2,-28(fp)
     4dc:	1004403a 	cmpge	r2,r2,zero
     4e0:	1000021e 	bne	r2,zero,4ec <read_444_format+0x2fc>
		    Cb = 0;
     4e4:	e03ff915 	stw	zero,-28(fp)
     4e8:	00000506 	br	500 <read_444_format+0x310>
		  else if (Cb > 255)
     4ec:	e0bff917 	ldw	r2,-28(fp)
     4f0:	10804010 	cmplti	r2,r2,256
     4f4:	1000021e 	bne	r2,zero,500 <read_444_format+0x310>
		    Cb = 255;
     4f8:	00803fc4 	movi	r2,255
     4fc:	e0bff915 	stw	r2,-28(fp)

		  if (Cr < 0)
     500:	e0bff817 	ldw	r2,-32(fp)
     504:	1004403a 	cmpge	r2,r2,zero
     508:	1000021e 	bne	r2,zero,514 <read_444_format+0x324>
		    Cr = 0;
     50c:	e03ff815 	stw	zero,-32(fp)
     510:	00001b06 	br	580 <read_444_format+0x390>
		  else if (Cr > 255)
     514:	e0bff817 	ldw	r2,-32(fp)
     518:	10804010 	cmplti	r2,r2,256
     51c:	1000181e 	bne	r2,zero,580 <read_444_format+0x390>
		    Cr = 255;
     520:	00803fc4 	movi	r2,255
     524:	e0bff815 	stw	r2,-32(fp)

		  for (; j>0; j--)
     528:	00001506 	br	580 <read_444_format+0x390>
		  {
			altera_avalon_fifo_write_fifo(0x08001108,0x080010a0,Y);
     52c:	e1bffa17 	ldw	r6,-24(fp)
     530:	01020034 	movhi	r4,2048
     534:	21044204 	addi	r4,r4,4360
     538:	01420034 	movhi	r5,2048
     53c:	29442804 	addi	r5,r5,4256
     540:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001104,0x08001060,Cb);
     544:	e1bff917 	ldw	r6,-28(fp)
     548:	01020034 	movhi	r4,2048
     54c:	21044104 	addi	r4,r4,4356
     550:	01420034 	movhi	r5,2048
     554:	29441804 	addi	r5,r5,4192
     558:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001100,0x08001080,Cr);
     55c:	e1bff817 	ldw	r6,-32(fp)
     560:	01020034 	movhi	r4,2048
     564:	21044004 	addi	r4,r4,4352
     568:	01420034 	movhi	r5,2048
     56c:	29442004 	addi	r5,r5,4224
     570:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  if (Cr < 0)
		    Cr = 0;
		  else if (Cr > 255)
		    Cr = 255;

		  for (; j>0; j--)
     574:	e0bffc17 	ldw	r2,-16(fp)
     578:	10bfffc4 	addi	r2,r2,-1
     57c:	e0bffc15 	stw	r2,-16(fp)
     580:	e0bffc17 	ldw	r2,-16(fp)
     584:	10800048 	cmpgei	r2,r2,1
     588:	103fe81e 	bne	r2,zero,52c <read_444_format+0x33c>
		    // SEND2(Cb);
		    // SEND3(Cr);
		  }
		}

		input_ptr += incr;
     58c:	e0bff60b 	ldhu	r2,-40(fp)
     590:	1007883a 	mov	r3,r2
     594:	e0bfff17 	ldw	r2,-4(fp)
     598:	10c5883a 	add	r2,r2,r3
     59c:	e0bfff15 	stw	r2,-4(fp)

	UINT16 rows = jpeg_encoder_structure->rows;
	UINT16 cols = jpeg_encoder_structure->cols;
	UINT16 incr = jpeg_encoder_structure->incr;

	for (i=rows; i>0; i--)
     5a0:	e0bffd17 	ldw	r2,-12(fp)
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	e0bffd15 	stw	r2,-12(fp)
     5ac:	e0bffd17 	ldw	r2,-12(fp)
     5b0:	10800048 	cmpgei	r2,r2,1
     5b4:	103f201e 	bne	r2,zero,238 <read_444_format+0x48>
		}

		input_ptr += incr;
	}

	input_ptr -= incr;
     5b8:	e0bff60b 	ldhu	r2,-40(fp)
     5bc:	1007883a 	mov	r3,r2
     5c0:	e0bfff17 	ldw	r2,-4(fp)
     5c4:	10c5c83a 	sub	r2,r2,r3
     5c8:	e0bfff15 	stw	r2,-4(fp)

	for (i=8-rows; i>0; i--)
     5cc:	e0fff70b 	ldhu	r3,-36(fp)
     5d0:	00800204 	movi	r2,8
     5d4:	10c5c83a 	sub	r2,r2,r3
     5d8:	e0bffd15 	stw	r2,-12(fp)
     5dc:	0000e106 	br	964 <read_444_format+0x774>
	{
		for (j=cols*3; j>0; )
     5e0:	e0fff68b 	ldhu	r3,-38(fp)
     5e4:	1805883a 	mov	r2,r3
     5e8:	1085883a 	add	r2,r2,r2
     5ec:	10c5883a 	add	r2,r2,r3
     5f0:	e0bffc15 	stw	r2,-16(fp)
     5f4:	00006b06 	br	7a4 <read_444_format+0x5b4>
		{
			R = *(input_ptr - (j--));
     5f8:	e0bffc17 	ldw	r2,-16(fp)
     5fc:	1007883a 	mov	r3,r2
     600:	e0bfff17 	ldw	r2,-4(fp)
     604:	10c5c83a 	sub	r2,r2,r3
     608:	10800003 	ldbu	r2,0(r2)
     60c:	e0bffb85 	stb	r2,-18(fp)
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	10bfffc4 	addi	r2,r2,-1
     618:	e0bffc15 	stw	r2,-16(fp)
			G = *(input_ptr - (j--));
     61c:	e0bffc17 	ldw	r2,-16(fp)
     620:	1007883a 	mov	r3,r2
     624:	e0bfff17 	ldw	r2,-4(fp)
     628:	10c5c83a 	sub	r2,r2,r3
     62c:	10800003 	ldbu	r2,0(r2)
     630:	e0bffb45 	stb	r2,-19(fp)
     634:	e0bffc17 	ldw	r2,-16(fp)
     638:	10bfffc4 	addi	r2,r2,-1
     63c:	e0bffc15 	stw	r2,-16(fp)
			B = *(input_ptr - (j--));
     640:	e0bffc17 	ldw	r2,-16(fp)
     644:	1007883a 	mov	r3,r2
     648:	e0bfff17 	ldw	r2,-4(fp)
     64c:	10c5c83a 	sub	r2,r2,r3
     650:	10800003 	ldbu	r2,0(r2)
     654:	e0bffb05 	stb	r2,-20(fp)
     658:	e0bffc17 	ldw	r2,-16(fp)
     65c:	10bfffc4 	addi	r2,r2,-1
     660:	e0bffc15 	stw	r2,-16(fp)

			Y = ((77 * R + 150 * G + 29 * B) >> 8);
     664:	e0bffb83 	ldbu	r2,-18(fp)
     668:	10c01364 	muli	r3,r2,77
     66c:	e0bffb43 	ldbu	r2,-19(fp)
     670:	108025a4 	muli	r2,r2,150
     674:	1887883a 	add	r3,r3,r2
     678:	e0bffb03 	ldbu	r2,-20(fp)
     67c:	10800764 	muli	r2,r2,29
     680:	1885883a 	add	r2,r3,r2
     684:	1005d23a 	srai	r2,r2,8
     688:	e0bffa15 	stw	r2,-24(fp)
			Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     68c:	e0bffb83 	ldbu	r2,-18(fp)
     690:	10fff564 	muli	r3,r2,-43
     694:	e0bffb43 	ldbu	r2,-19(fp)
     698:	10801564 	muli	r2,r2,85
     69c:	1887c83a 	sub	r3,r3,r2
     6a0:	e0bffb03 	ldbu	r2,-20(fp)
     6a4:	100491fa 	slli	r2,r2,7
     6a8:	1885883a 	add	r2,r3,r2
     6ac:	1005d23a 	srai	r2,r2,8
     6b0:	10802004 	addi	r2,r2,128
     6b4:	e0bff915 	stw	r2,-28(fp)
			Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     6b8:	e0bffb83 	ldbu	r2,-18(fp)
     6bc:	100691fa 	slli	r3,r2,7
     6c0:	e0bffb43 	ldbu	r2,-19(fp)
     6c4:	10801ae4 	muli	r2,r2,107
     6c8:	1887c83a 	sub	r3,r3,r2
     6cc:	e0bffb03 	ldbu	r2,-20(fp)
     6d0:	10800564 	muli	r2,r2,21
     6d4:	1885c83a 	sub	r2,r3,r2
     6d8:	1005d23a 	srai	r2,r2,8
     6dc:	10802004 	addi	r2,r2,128
     6e0:	e0bff815 	stw	r2,-32(fp)

			if (Y < 0)
     6e4:	e0bffa17 	ldw	r2,-24(fp)
     6e8:	1004403a 	cmpge	r2,r2,zero
     6ec:	1000021e 	bne	r2,zero,6f8 <read_444_format+0x508>
			  Y = 0;
     6f0:	e03ffa15 	stw	zero,-24(fp)
     6f4:	00000506 	br	70c <read_444_format+0x51c>
			else if (Y > 255)
     6f8:	e0bffa17 	ldw	r2,-24(fp)
     6fc:	10804010 	cmplti	r2,r2,256
     700:	1000021e 	bne	r2,zero,70c <read_444_format+0x51c>
			  Y = 255;
     704:	00803fc4 	movi	r2,255
     708:	e0bffa15 	stw	r2,-24(fp)

			if (Cb < 0)
     70c:	e0bff917 	ldw	r2,-28(fp)
     710:	1004403a 	cmpge	r2,r2,zero
     714:	1000021e 	bne	r2,zero,720 <read_444_format+0x530>
			  Cb = 0;
     718:	e03ff915 	stw	zero,-28(fp)
     71c:	00000506 	br	734 <read_444_format+0x544>
			else if (Cb > 255)
     720:	e0bff917 	ldw	r2,-28(fp)
     724:	10804010 	cmplti	r2,r2,256
     728:	1000021e 	bne	r2,zero,734 <read_444_format+0x544>
			  Cb = 255;
     72c:	00803fc4 	movi	r2,255
     730:	e0bff915 	stw	r2,-28(fp)

			if (Cr < 0)
     734:	e0bff817 	ldw	r2,-32(fp)
     738:	1004403a 	cmpge	r2,r2,zero
     73c:	1000021e 	bne	r2,zero,748 <read_444_format+0x558>
			  Cr = 0;
     740:	e03ff815 	stw	zero,-32(fp)
     744:	00000506 	br	75c <read_444_format+0x56c>
			else if (Cr > 255)
     748:	e0bff817 	ldw	r2,-32(fp)
     74c:	10804010 	cmplti	r2,r2,256
     750:	1000021e 	bne	r2,zero,75c <read_444_format+0x56c>
			  Cr = 255;
     754:	00803fc4 	movi	r2,255
     758:	e0bff815 	stw	r2,-32(fp)
			altera_avalon_fifo_write_fifo(0x08001108,0x080010a0,Y);
     75c:	e1bffa17 	ldw	r6,-24(fp)
     760:	01020034 	movhi	r4,2048
     764:	21044204 	addi	r4,r4,4360
     768:	01420034 	movhi	r5,2048
     76c:	29442804 	addi	r5,r5,4256
     770:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001104,0x08001060,Cb);
     774:	e1bff917 	ldw	r6,-28(fp)
     778:	01020034 	movhi	r4,2048
     77c:	21044104 	addi	r4,r4,4356
     780:	01420034 	movhi	r5,2048
     784:	29441804 	addi	r5,r5,4192
     788:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001100,0x08001080,Cr);
     78c:	e1bff817 	ldw	r6,-32(fp)
     790:	01020034 	movhi	r4,2048
     794:	21044004 	addi	r4,r4,4352
     798:	01420034 	movhi	r5,2048
     79c:	29442004 	addi	r5,r5,4224
     7a0:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>

	input_ptr -= incr;

	for (i=8-rows; i>0; i--)
	{
		for (j=cols*3; j>0; )
     7a4:	e0bffc17 	ldw	r2,-16(fp)
     7a8:	10800048 	cmpgei	r2,r2,1
     7ac:	103f921e 	bne	r2,zero,5f8 <read_444_format+0x408>
			// SEND1(Y);
			// SEND2(Cb);
			// SEND3(Cr);

		}
        if ((j=(8-cols)) >0)
     7b0:	e0fff68b 	ldhu	r3,-38(fp)
     7b4:	00800204 	movi	r2,8
     7b8:	10c5c83a 	sub	r2,r2,r3
     7bc:	e0bffc15 	stw	r2,-16(fp)
     7c0:	e0bffc17 	ldw	r2,-16(fp)
     7c4:	10800050 	cmplti	r2,r2,1
     7c8:	1000631e 	bne	r2,zero,958 <read_444_format+0x768>
        {
            R = *(input_ptr - 3);
     7cc:	e0bfff17 	ldw	r2,-4(fp)
     7d0:	10bfff44 	addi	r2,r2,-3
     7d4:	10800003 	ldbu	r2,0(r2)
     7d8:	e0bffb85 	stb	r2,-18(fp)
            G = *(input_ptr - 2);
     7dc:	e0bfff17 	ldw	r2,-4(fp)
     7e0:	10bfff84 	addi	r2,r2,-2
     7e4:	10800003 	ldbu	r2,0(r2)
     7e8:	e0bffb45 	stb	r2,-19(fp)
            B = *(input_ptr - 1);
     7ec:	e0bfff17 	ldw	r2,-4(fp)
     7f0:	10bfffc4 	addi	r2,r2,-1
     7f4:	10800003 	ldbu	r2,0(r2)
     7f8:	e0bffb05 	stb	r2,-20(fp)

            Y = ((77 * R + 150 * G + 29 * B) >> 8);
     7fc:	e0bffb83 	ldbu	r2,-18(fp)
     800:	10c01364 	muli	r3,r2,77
     804:	e0bffb43 	ldbu	r2,-19(fp)
     808:	108025a4 	muli	r2,r2,150
     80c:	1887883a 	add	r3,r3,r2
     810:	e0bffb03 	ldbu	r2,-20(fp)
     814:	10800764 	muli	r2,r2,29
     818:	1885883a 	add	r2,r3,r2
     81c:	1005d23a 	srai	r2,r2,8
     820:	e0bffa15 	stw	r2,-24(fp)
            Cb = ((-43 * R - 85 * G + 128 * B) >> 8) + 128;
     824:	e0bffb83 	ldbu	r2,-18(fp)
     828:	10fff564 	muli	r3,r2,-43
     82c:	e0bffb43 	ldbu	r2,-19(fp)
     830:	10801564 	muli	r2,r2,85
     834:	1887c83a 	sub	r3,r3,r2
     838:	e0bffb03 	ldbu	r2,-20(fp)
     83c:	100491fa 	slli	r2,r2,7
     840:	1885883a 	add	r2,r3,r2
     844:	1005d23a 	srai	r2,r2,8
     848:	10802004 	addi	r2,r2,128
     84c:	e0bff915 	stw	r2,-28(fp)
            Cr = ((128 * R - 107 * G - 21 * B) >> 8) + 128;
     850:	e0bffb83 	ldbu	r2,-18(fp)
     854:	100691fa 	slli	r3,r2,7
     858:	e0bffb43 	ldbu	r2,-19(fp)
     85c:	10801ae4 	muli	r2,r2,107
     860:	1887c83a 	sub	r3,r3,r2
     864:	e0bffb03 	ldbu	r2,-20(fp)
     868:	10800564 	muli	r2,r2,21
     86c:	1885c83a 	sub	r2,r3,r2
     870:	1005d23a 	srai	r2,r2,8
     874:	10802004 	addi	r2,r2,128
     878:	e0bff815 	stw	r2,-32(fp)

            if (Y < 0)
     87c:	e0bffa17 	ldw	r2,-24(fp)
     880:	1004403a 	cmpge	r2,r2,zero
     884:	1000021e 	bne	r2,zero,890 <read_444_format+0x6a0>
              Y = 0;
     888:	e03ffa15 	stw	zero,-24(fp)
     88c:	00000506 	br	8a4 <read_444_format+0x6b4>
            else if (Y > 255)
     890:	e0bffa17 	ldw	r2,-24(fp)
     894:	10804010 	cmplti	r2,r2,256
     898:	1000021e 	bne	r2,zero,8a4 <read_444_format+0x6b4>
              Y = 255;
     89c:	00803fc4 	movi	r2,255
     8a0:	e0bffa15 	stw	r2,-24(fp)

            if (Cb < 0)
     8a4:	e0bff917 	ldw	r2,-28(fp)
     8a8:	1004403a 	cmpge	r2,r2,zero
     8ac:	1000021e 	bne	r2,zero,8b8 <read_444_format+0x6c8>
              Cb = 0;
     8b0:	e03ff915 	stw	zero,-28(fp)
     8b4:	00000506 	br	8cc <read_444_format+0x6dc>
            else if (Cb > 255)
     8b8:	e0bff917 	ldw	r2,-28(fp)
     8bc:	10804010 	cmplti	r2,r2,256
     8c0:	1000021e 	bne	r2,zero,8cc <read_444_format+0x6dc>
              Cb = 255;
     8c4:	00803fc4 	movi	r2,255
     8c8:	e0bff915 	stw	r2,-28(fp)

            if (Cr < 0)
     8cc:	e0bff817 	ldw	r2,-32(fp)
     8d0:	1004403a 	cmpge	r2,r2,zero
     8d4:	1000021e 	bne	r2,zero,8e0 <read_444_format+0x6f0>
              Cr = 0;
     8d8:	e03ff815 	stw	zero,-32(fp)
     8dc:	00001b06 	br	94c <read_444_format+0x75c>
            else if (Cr > 255)
     8e0:	e0bff817 	ldw	r2,-32(fp)
     8e4:	10804010 	cmplti	r2,r2,256
     8e8:	1000181e 	bne	r2,zero,94c <read_444_format+0x75c>
              Cr = 255;
     8ec:	00803fc4 	movi	r2,255
     8f0:	e0bff815 	stw	r2,-32(fp)

	    for(; j>0; j--){
     8f4:	00001506 	br	94c <read_444_format+0x75c>
				altera_avalon_fifo_write_fifo(0x08001108,0x080010a0,Y);
     8f8:	e1bffa17 	ldw	r6,-24(fp)
     8fc:	01020034 	movhi	r4,2048
     900:	21044204 	addi	r4,r4,4360
     904:	01420034 	movhi	r5,2048
     908:	29442804 	addi	r5,r5,4256
     90c:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001104,0x08001060,Cb);
     910:	e1bff917 	ldw	r6,-28(fp)
     914:	01020034 	movhi	r4,2048
     918:	21044104 	addi	r4,r4,4356
     91c:	01420034 	movhi	r5,2048
     920:	29441804 	addi	r5,r5,4192
     924:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		  altera_avalon_fifo_write_fifo(0x08001100,0x08001080,Cr);
     928:	e1bff817 	ldw	r6,-32(fp)
     92c:	01020034 	movhi	r4,2048
     930:	21044004 	addi	r4,r4,4352
     934:	01420034 	movhi	r5,2048
     938:	29442004 	addi	r5,r5,4224
     93c:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
            if (Cr < 0)
              Cr = 0;
            else if (Cr > 255)
              Cr = 255;

	    for(; j>0; j--){
     940:	e0bffc17 	ldw	r2,-16(fp)
     944:	10bfffc4 	addi	r2,r2,-1
     948:	e0bffc15 	stw	r2,-16(fp)
     94c:	e0bffc17 	ldw	r2,-16(fp)
     950:	10800048 	cmpgei	r2,r2,1
     954:	103fe81e 	bne	r2,zero,8f8 <read_444_format+0x708>
		input_ptr += incr;
	}

	input_ptr -= incr;

	for (i=8-rows; i>0; i--)
     958:	e0bffd17 	ldw	r2,-12(fp)
     95c:	10bfffc4 	addi	r2,r2,-1
     960:	e0bffd15 	stw	r2,-12(fp)
     964:	e0bffd17 	ldw	r2,-12(fp)
     968:	10800048 	cmpgei	r2,r2,1
     96c:	103f1c1e 	bne	r2,zero,5e0 <read_444_format+0x3f0>
			*CB_Ptr++ = *(CB_Ptr - 8);
			*CR_Ptr++ = *(CR_Ptr - 8);
		}
	}
*/
}
     970:	e037883a 	mov	sp,fp
     974:	dfc00117 	ldw	ra,4(sp)
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00204 	addi	sp,sp,8
     980:	f800283a 	ret

00000984 <initialization>:
UINT16 bitindex = 0;

void (*read_format) (JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, UINT8 *input_ptr);

void initialization (JPEG_ENCODER_STRUCTURE *jpeg, UINT32 image_format, UINT32 image_width, UINT32 image_height)
{
     984:	defff904 	addi	sp,sp,-28
     988:	df000615 	stw	fp,24(sp)
     98c:	df000604 	addi	fp,sp,24
     990:	e13ffc15 	stw	r4,-16(fp)
     994:	e17ffd15 	stw	r5,-12(fp)
     998:	e1bffe15 	stw	r6,-8(fp)
     99c:	e1ffff15 	stw	r7,-4(fp)
	UINT16 mcu_width, mcu_height, bytes_per_pixel;

/* 	if (image_format == FOUR_ZERO_ZERO || image_format == FOUR_FOUR_FOUR) */
/* 	{ */
		jpeg->mcu_width = mcu_width = 8;
     9a0:	00800204 	movi	r2,8
     9a4:	e0bffb0d 	sth	r2,-20(fp)
     9a8:	e0fffc17 	ldw	r3,-16(fp)
     9ac:	e0bffb0b 	ldhu	r2,-20(fp)
     9b0:	1880000d 	sth	r2,0(r3)
		jpeg->mcu_height = mcu_height = 8;
     9b4:	00800204 	movi	r2,8
     9b8:	e0bffa8d 	sth	r2,-22(fp)
     9bc:	e0fffc17 	ldw	r3,-16(fp)
     9c0:	e0bffa8b 	ldhu	r2,-22(fp)
     9c4:	1880008d 	sth	r2,2(r3)

		jpeg->horizontal_mcus = (UINT16) ((image_width + mcu_width - 1) >> 3);
     9c8:	e0fffb0b 	ldhu	r3,-20(fp)
     9cc:	e0bffe17 	ldw	r2,-8(fp)
     9d0:	1885883a 	add	r2,r3,r2
     9d4:	10bfffc4 	addi	r2,r2,-1
     9d8:	1004d0fa 	srli	r2,r2,3
     9dc:	1007883a 	mov	r3,r2
     9e0:	e0bffc17 	ldw	r2,-16(fp)
     9e4:	10c0010d 	sth	r3,4(r2)
		jpeg->vertical_mcus = (UINT16) ((image_height + mcu_height - 1) >> 3);
     9e8:	e0fffa8b 	ldhu	r3,-22(fp)
     9ec:	e0bfff17 	ldw	r2,-4(fp)
     9f0:	1885883a 	add	r2,r3,r2
     9f4:	10bfffc4 	addi	r2,r2,-1
     9f8:	1004d0fa 	srli	r2,r2,3
     9fc:	1007883a 	mov	r3,r2
     a00:	e0bffc17 	ldw	r2,-16(fp)
     a04:	10c0018d 	sth	r3,6(r2)
/* 			bytes_per_pixel = 1; */
/* 			read_format = read_400_format; */
/* 		} */
/* 		else */
/* 		{ */
			bytes_per_pixel = 3;
     a08:	008000c4 	movi	r2,3
     a0c:	e0bffa0d 	sth	r2,-24(fp)
			read_format = read_444_format;
     a10:	00800034 	movhi	r2,0
     a14:	10807c04 	addi	r2,r2,496
     a18:	d0a6e315 	stw	r2,-25716(gp)
/* 			bytes_per_pixel = 2; */
/* 			read_format = read_422_format; */
/* 		} */
/* 	} */

	jpeg->rows_in_bottom_mcus = (UINT16) (image_height - (jpeg->vertical_mcus - 1) * mcu_height);
     a1c:	e0bfff17 	ldw	r2,-4(fp)
     a20:	1009883a 	mov	r4,r2
     a24:	e0bffc17 	ldw	r2,-16(fp)
     a28:	1080018b 	ldhu	r2,6(r2)
     a2c:	10bfffcc 	andi	r2,r2,65535
     a30:	10ffffc4 	addi	r3,r2,-1
     a34:	e0bffa8b 	ldhu	r2,-22(fp)
     a38:	1885383a 	mul	r2,r3,r2
     a3c:	2085c83a 	sub	r2,r4,r2
     a40:	1007883a 	mov	r3,r2
     a44:	e0bffc17 	ldw	r2,-16(fp)
     a48:	10c0028d 	sth	r3,10(r2)
	jpeg->cols_in_right_mcus = (UINT16) (image_width - (jpeg->horizontal_mcus - 1) * mcu_width);
     a4c:	e0bffe17 	ldw	r2,-8(fp)
     a50:	1009883a 	mov	r4,r2
     a54:	e0bffc17 	ldw	r2,-16(fp)
     a58:	1080010b 	ldhu	r2,4(r2)
     a5c:	10bfffcc 	andi	r2,r2,65535
     a60:	10ffffc4 	addi	r3,r2,-1
     a64:	e0bffb0b 	ldhu	r2,-20(fp)
     a68:	1885383a 	mul	r2,r3,r2
     a6c:	2085c83a 	sub	r2,r4,r2
     a70:	1007883a 	mov	r3,r2
     a74:	e0bffc17 	ldw	r2,-16(fp)
     a78:	10c0020d 	sth	r3,8(r2)

	jpeg->length_minus_mcu_width = (UINT16) ((image_width - mcu_width) * bytes_per_pixel);
     a7c:	e0fffb0b 	ldhu	r3,-20(fp)
     a80:	e0bffe17 	ldw	r2,-8(fp)
     a84:	10c7c83a 	sub	r3,r2,r3
     a88:	e0bffa0b 	ldhu	r2,-24(fp)
     a8c:	1885383a 	mul	r2,r3,r2
     a90:	1007883a 	mov	r3,r2
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	10c0040d 	sth	r3,16(r2)
	jpeg->length_minus_width = (UINT16) ((image_width - jpeg->cols_in_right_mcus) * bytes_per_pixel);
     a9c:	e0bffc17 	ldw	r2,-16(fp)
     aa0:	1080020b 	ldhu	r2,8(r2)
     aa4:	10ffffcc 	andi	r3,r2,65535
     aa8:	e0bffe17 	ldw	r2,-8(fp)
     aac:	10c7c83a 	sub	r3,r2,r3
     ab0:	e0bffa0b 	ldhu	r2,-24(fp)
     ab4:	1885383a 	mul	r2,r3,r2
     ab8:	1007883a 	mov	r3,r2
     abc:	e0bffc17 	ldw	r2,-16(fp)
     ac0:	10c0048d 	sth	r3,18(r2)

	jpeg->mcu_width_size = (UINT16) (mcu_width * bytes_per_pixel);
     ac4:	e0fffb0b 	ldhu	r3,-20(fp)
     ac8:	e0bffa0b 	ldhu	r2,-24(fp)
     acc:	1885383a 	mul	r2,r3,r2
     ad0:	1007883a 	mov	r3,r2
     ad4:	e0bffc17 	ldw	r2,-16(fp)
     ad8:	10c0058d 	sth	r3,22(r2)

	if (image_format != FOUR_TWO_ZERO)
     adc:	e0bffd17 	ldw	r2,-12(fp)
     ae0:	10800060 	cmpeqi	r2,r2,1
     ae4:	1000111e 	bne	r2,zero,b2c <initialization+0x1a8>
		jpeg->offset = (UINT16) ((image_width * (mcu_height - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
     ae8:	e0bffa8b 	ldhu	r2,-22(fp)
     aec:	10bfffc4 	addi	r2,r2,-1
     af0:	1007883a 	mov	r3,r2
     af4:	e0bffe17 	ldw	r2,-8(fp)
     af8:	1889383a 	mul	r4,r3,r2
     afc:	e0fffb0b 	ldhu	r3,-20(fp)
     b00:	e0bffc17 	ldw	r2,-16(fp)
     b04:	1080020b 	ldhu	r2,8(r2)
     b08:	10bfffcc 	andi	r2,r2,65535
     b0c:	1885c83a 	sub	r2,r3,r2
     b10:	2087c83a 	sub	r3,r4,r2
     b14:	e0bffa0b 	ldhu	r2,-24(fp)
     b18:	1885383a 	mul	r2,r3,r2
     b1c:	1007883a 	mov	r3,r2
     b20:	e0bffc17 	ldw	r2,-16(fp)
     b24:	10c0060d 	sth	r3,24(r2)
     b28:	00001206 	br	b74 <initialization+0x1f0>
	else
		jpeg->offset = (UINT16) ((image_width * ((mcu_height >> 1) - 1) - (mcu_width - jpeg->cols_in_right_mcus)) * bytes_per_pixel);
     b2c:	e0bffa8b 	ldhu	r2,-22(fp)
     b30:	1004d07a 	srli	r2,r2,1
     b34:	10bfffcc 	andi	r2,r2,65535
     b38:	10bfffc4 	addi	r2,r2,-1
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffe17 	ldw	r2,-8(fp)
     b44:	1889383a 	mul	r4,r3,r2
     b48:	e0fffb0b 	ldhu	r3,-20(fp)
     b4c:	e0bffc17 	ldw	r2,-16(fp)
     b50:	1080020b 	ldhu	r2,8(r2)
     b54:	10bfffcc 	andi	r2,r2,65535
     b58:	1885c83a 	sub	r2,r3,r2
     b5c:	2087c83a 	sub	r3,r4,r2
     b60:	e0bffa0b 	ldhu	r2,-24(fp)
     b64:	1885383a 	mul	r2,r3,r2
     b68:	1007883a 	mov	r3,r2
     b6c:	e0bffc17 	ldw	r2,-16(fp)
     b70:	10c0060d 	sth	r3,24(r2)

	jpeg->ldc1 = 0;
     b74:	e0bffc17 	ldw	r2,-16(fp)
     b78:	1000068d 	sth	zero,26(r2)
	jpeg->ldc2 = 0;
     b7c:	e0bffc17 	ldw	r2,-16(fp)
     b80:	1000070d 	sth	zero,28(r2)
	jpeg->ldc3 = 0;
     b84:	e0bffc17 	ldw	r2,-16(fp)
     b88:	1000078d 	sth	zero,30(r2)

	
}
     b8c:	e037883a 	mov	sp,fp
     b90:	df000017 	ldw	fp,0(sp)
     b94:	dec00104 	addi	sp,sp,4
     b98:	f800283a 	ret

00000b9c <encode_image>:

UINT8* encode_image (UINT8 *input_ptr,UINT8 *output_ptr, UINT32 quality_factor, UINT32 image_format, UINT32 image_width, UINT32 image_height)
{
     b9c:	defff004 	addi	sp,sp,-64
     ba0:	dfc00f15 	stw	ra,60(sp)
     ba4:	df000e15 	stw	fp,56(sp)
     ba8:	df000e04 	addi	fp,sp,56
     bac:	e13ffc15 	stw	r4,-16(fp)
     bb0:	e17ffd15 	stw	r5,-12(fp)
     bb4:	e1bffe15 	stw	r6,-8(fp)
     bb8:	e1ffff15 	stw	r7,-4(fp)
	UINT16 i, j;

	JPEG_ENCODER_STRUCTURE JpegStruct;
	JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure = &JpegStruct;
     bbc:	e0bff404 	addi	r2,fp,-48
     bc0:	e0bff215 	stw	r2,-56(fp)

	if (image_format == RGB)
     bc4:	e0bfff17 	ldw	r2,-4(fp)
     bc8:	10800118 	cmpnei	r2,r2,4
     bcc:	1000021e 	bne	r2,zero,bd8 <encode_image+0x3c>
	{
		image_format = FOUR_FOUR_FOUR;
     bd0:	008000c4 	movi	r2,3
     bd4:	e0bfff15 	stw	r2,-4(fp)
		//RGB_2_444 (input_ptr, output_ptr, image_width, image_height);
	}

	/* Initialization of JPEG control structure */
	initialization (jpeg_encoder_structure,image_format,image_width,image_height);
     bd8:	e13ff217 	ldw	r4,-56(fp)
     bdc:	e17fff17 	ldw	r5,-4(fp)
     be0:	e1800217 	ldw	r6,8(fp)
     be4:	e1c00317 	ldw	r7,12(fp)
     be8:	00009840 	call	984 <initialization>

	/* Quantization Table Initialization */
	//initialize_quantization_tables (quality_factor);
		altera_avalon_fifo_write_fifo(0x080010fc,0x08001040,(jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));
     bec:	e0bff217 	ldw	r2,-56(fp)
     bf0:	1080018b 	ldhu	r2,6(r2)
     bf4:	10ffffcc 	andi	r3,r2,65535
     bf8:	e0bff217 	ldw	r2,-56(fp)
     bfc:	1080010b 	ldhu	r2,4(r2)
     c00:	10bfffcc 	andi	r2,r2,65535
     c04:	1885383a 	mul	r2,r3,r2
     c08:	100d883a 	mov	r6,r2
     c0c:	01020034 	movhi	r4,2048
     c10:	21043f04 	addi	r4,r4,4348
     c14:	01420034 	movhi	r5,2048
     c18:	29441004 	addi	r5,r5,4160
     c1c:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x080010fc,0x08001040,quality_factor);
     c20:	01020034 	movhi	r4,2048
     c24:	21043f04 	addi	r4,r4,4348
     c28:	01420034 	movhi	r5,2048
     c2c:	29441004 	addi	r5,r5,4160
     c30:	e1bffe17 	ldw	r6,-8(fp)
     c34:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
        //SEND4((jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));
	//SEND4(quality_factor);

	/* Writing Marker Data */
	//output_ptr = write_markers (output_ptr, image_format, image_width, image_height);
	altera_avalon_fifo_write_fifo(0x080010f8,0x08001020,image_width);
     c38:	01020034 	movhi	r4,2048
     c3c:	21043e04 	addi	r4,r4,4344
     c40:	01420034 	movhi	r5,2048
     c44:	29440804 	addi	r5,r5,4128
     c48:	e1800217 	ldw	r6,8(fp)
     c4c:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x080010f8,0x08001020,image_height);
     c50:	01020034 	movhi	r4,2048
     c54:	21043e04 	addi	r4,r4,4344
     c58:	01420034 	movhi	r5,2048
     c5c:	29440804 	addi	r5,r5,4128
     c60:	e1800317 	ldw	r6,12(fp)
     c64:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x080010f8,0x08001020,(jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));
     c68:	e0bff217 	ldw	r2,-56(fp)
     c6c:	1080018b 	ldhu	r2,6(r2)
     c70:	10ffffcc 	andi	r3,r2,65535
     c74:	e0bff217 	ldw	r2,-56(fp)
     c78:	1080010b 	ldhu	r2,4(r2)
     c7c:	10bfffcc 	andi	r2,r2,65535
     c80:	1885383a 	mul	r2,r3,r2
     c84:	100d883a 	mov	r6,r2
     c88:	01020034 	movhi	r4,2048
     c8c:	21043e04 	addi	r4,r4,4344
     c90:	01420034 	movhi	r5,2048
     c94:	29440804 	addi	r5,r5,4128
     c98:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
	//SEND5(image_width);
	//SEND5(image_height);
	//SEND5((jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));

// asm("dummy");
	for (i=1; i<=jpeg_encoder_structure->vertical_mcus; i++)
     c9c:	00800044 	movi	r2,1
     ca0:	e0bff38d 	sth	r2,-50(fp)
     ca4:	00004406 	br	db8 <encode_image+0x21c>
	{
		if (i < jpeg_encoder_structure->vertical_mcus)
     ca8:	e0bff217 	ldw	r2,-56(fp)
     cac:	1080018b 	ldhu	r2,6(r2)
     cb0:	10ffffcc 	andi	r3,r2,65535
     cb4:	e0bff38b 	ldhu	r2,-50(fp)
     cb8:	10c0052e 	bgeu	r2,r3,cd0 <encode_image+0x134>
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
     cbc:	e0bff217 	ldw	r2,-56(fp)
     cc0:	10c0008b 	ldhu	r3,2(r2)
     cc4:	e0bff217 	ldw	r2,-56(fp)
     cc8:	10c0030d 	sth	r3,12(r2)
     ccc:	00000406 	br	ce0 <encode_image+0x144>
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;
     cd0:	e0bff217 	ldw	r2,-56(fp)
     cd4:	10c0028b 	ldhu	r3,10(r2)
     cd8:	e0bff217 	ldw	r2,-56(fp)
     cdc:	10c0030d 	sth	r3,12(r2)

		for (j=1; j<=jpeg_encoder_structure->horizontal_mcus; j++)
     ce0:	00800044 	movi	r2,1
     ce4:	e0bff30d 	sth	r2,-52(fp)
     ce8:	00002406 	br	d7c <encode_image+0x1e0>
		{
			if (j < jpeg_encoder_structure->horizontal_mcus)
     cec:	e0bff217 	ldw	r2,-56(fp)
     cf0:	1080010b 	ldhu	r2,4(r2)
     cf4:	10ffffcc 	andi	r3,r2,65535
     cf8:	e0bff30b 	ldhu	r2,-52(fp)
     cfc:	10c0092e 	bgeu	r2,r3,d24 <encode_image+0x188>
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->mcu_width;
     d00:	e0bff217 	ldw	r2,-56(fp)
     d04:	10c0000b 	ldhu	r3,0(r2)
     d08:	e0bff217 	ldw	r2,-56(fp)
     d0c:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_mcu_width;
     d10:	e0bff217 	ldw	r2,-56(fp)
     d14:	10c0040b 	ldhu	r3,16(r2)
     d18:	e0bff217 	ldw	r2,-56(fp)
     d1c:	10c0050d 	sth	r3,20(r2)
     d20:	00000806 	br	d44 <encode_image+0x1a8>
			}
			else
			{
				jpeg_encoder_structure->cols = jpeg_encoder_structure->cols_in_right_mcus;
     d24:	e0bff217 	ldw	r2,-56(fp)
     d28:	10c0020b 	ldhu	r3,8(r2)
     d2c:	e0bff217 	ldw	r2,-56(fp)
     d30:	10c0038d 	sth	r3,14(r2)
				jpeg_encoder_structure->incr = jpeg_encoder_structure->length_minus_width;
     d34:	e0bff217 	ldw	r2,-56(fp)
     d38:	10c0048b 	ldhu	r3,18(r2)
     d3c:	e0bff217 	ldw	r2,-56(fp)
     d40:	10c0050d 	sth	r3,20(r2)
			}

			read_format (jpeg_encoder_structure, input_ptr);
     d44:	d0a6e317 	ldw	r2,-25716(gp)
     d48:	e13ff217 	ldw	r4,-56(fp)
     d4c:	e17ffc17 	ldw	r5,-16(fp)
     d50:	103ee83a 	callr	r2

			/* Encode the data in MCU */
			//output_ptr = encodeMCU (jpeg_encoder_structure, image_format, output_ptr);

			input_ptr += jpeg_encoder_structure->mcu_width_size;
     d54:	e0bff217 	ldw	r2,-56(fp)
     d58:	1080058b 	ldhu	r2,22(r2)
     d5c:	10bfffcc 	andi	r2,r2,65535
     d60:	1007883a 	mov	r3,r2
     d64:	e0bffc17 	ldw	r2,-16(fp)
     d68:	10c5883a 	add	r2,r2,r3
     d6c:	e0bffc15 	stw	r2,-16(fp)
		if (i < jpeg_encoder_structure->vertical_mcus)
			jpeg_encoder_structure->rows = jpeg_encoder_structure->mcu_height;
		else
			jpeg_encoder_structure->rows = jpeg_encoder_structure->rows_in_bottom_mcus;

		for (j=1; j<=jpeg_encoder_structure->horizontal_mcus; j++)
     d70:	e0bff30b 	ldhu	r2,-52(fp)
     d74:	10800044 	addi	r2,r2,1
     d78:	e0bff30d 	sth	r2,-52(fp)
     d7c:	e0bff217 	ldw	r2,-56(fp)
     d80:	1080010b 	ldhu	r2,4(r2)
     d84:	10ffffcc 	andi	r3,r2,65535
     d88:	e0bff30b 	ldhu	r2,-52(fp)
     d8c:	18bfd72e 	bgeu	r3,r2,cec <encode_image+0x150>
			
			#pragma flush	//added by haris
// asm("dummy");
		}

		input_ptr += jpeg_encoder_structure->offset;
     d90:	e0bff217 	ldw	r2,-56(fp)
     d94:	1080060b 	ldhu	r2,24(r2)
     d98:	10bfffcc 	andi	r2,r2,65535
     d9c:	1007883a 	mov	r3,r2
     da0:	e0bffc17 	ldw	r2,-16(fp)
     da4:	10c5883a 	add	r2,r2,r3
     da8:	e0bffc15 	stw	r2,-16(fp)
	//SEND5(image_width);
	//SEND5(image_height);
	//SEND5((jpeg_encoder_structure->vertical_mcus)*(jpeg_encoder_structure->horizontal_mcus));

// asm("dummy");
	for (i=1; i<=jpeg_encoder_structure->vertical_mcus; i++)
     dac:	e0bff38b 	ldhu	r2,-50(fp)
     db0:	10800044 	addi	r2,r2,1
     db4:	e0bff38d 	sth	r2,-50(fp)
     db8:	e0bff217 	ldw	r2,-56(fp)
     dbc:	1080018b 	ldhu	r2,6(r2)
     dc0:	10ffffcc 	andi	r3,r2,65535
     dc4:	e0bff38b 	ldhu	r2,-50(fp)
     dc8:	18bfb72e 	bgeu	r3,r2,ca8 <encode_image+0x10c>
		input_ptr += jpeg_encoder_structure->offset;
	}

	/* Close Routine */
	//output_ptr = close_bitstream (output_ptr);
	return output_ptr;
     dcc:	e0bffd17 	ldw	r2,-12(fp)
}
     dd0:	e037883a 	mov	sp,fp
     dd4:	dfc00117 	ldw	ra,4(sp)
     dd8:	df000017 	ldw	fp,0(sp)
     ddc:	dec00204 	addi	sp,sp,8
     de0:	f800283a 	ret

00000de4 <encodeMCU>:

UINT8* encodeMCU (JPEG_ENCODER_STRUCTURE *jpeg_encoder_structure, UINT32 image_format, UINT8 *output_ptr)
{
     de4:	defffc04 	addi	sp,sp,-16
     de8:	df000315 	stw	fp,12(sp)
     dec:	df000304 	addi	fp,sp,12
     df0:	e13ffd15 	stw	r4,-12(fp)
     df4:	e17ffe15 	stw	r5,-8(fp)
     df8:	e1bfff15 	stw	r6,-4(fp)
		//levelshift (CR);
		//DCT (CR);
		//quantization (CR, ICqt);
		//output_ptr = huffman (jpeg_encoder_structure, 3, output_ptr);
	}
	return output_ptr;
     dfc:	e0bfff17 	ldw	r2,-4(fp)
}
     e00:	e037883a 	mov	sp,fp
     e04:	df000017 	ldw	fp,0(sp)
     e08:	dec00104 	addi	sp,sp,4
     e0c:	f800283a 	ret

00000e10 <main>:
#define ALMOST_EMPTY 2



//int main (void){
int main(int argc, char *argv[]){
     e10:	deffa304 	addi	sp,sp,-372
     e14:	dfc05c15 	stw	ra,368(sp)
     e18:	df005b15 	stw	fp,364(sp)
     e1c:	df005b04 	addi	fp,sp,364
     e20:	e13ffe15 	stw	r4,-8(fp)
     e24:	e17fff15 	stw	r5,-4(fp)
	altera_avalon_fifo_init(0x080010a0,0x0,ALMOST_EMPTY,64-5);
     e28:	01020034 	movhi	r4,2048
     e2c:	21042804 	addi	r4,r4,4256
     e30:	000b883a 	mov	r5,zero
     e34:	01800084 	movi	r6,2
     e38:	01c00ec4 	movi	r7,59
     e3c:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001060,0x0,ALMOST_EMPTY,64-5);
     e40:	01020034 	movhi	r4,2048
     e44:	21041804 	addi	r4,r4,4192
     e48:	000b883a 	mov	r5,zero
     e4c:	01800084 	movi	r6,2
     e50:	01c00ec4 	movi	r7,59
     e54:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001080,0x0,ALMOST_EMPTY,64-5);
     e58:	01020034 	movhi	r4,2048
     e5c:	21042004 	addi	r4,r4,4224
     e60:	000b883a 	mov	r5,zero
     e64:	01800084 	movi	r6,2
     e68:	01c00ec4 	movi	r7,59
     e6c:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001040,0x0,ALMOST_EMPTY,8-5);
     e70:	01020034 	movhi	r4,2048
     e74:	21041004 	addi	r4,r4,4160
     e78:	000b883a 	mov	r5,zero
     e7c:	01800084 	movi	r6,2
     e80:	01c000c4 	movi	r7,3
     e84:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001020,0x0,ALMOST_EMPTY,8-5);
     e88:	01020034 	movhi	r4,2048
     e8c:	21040804 	addi	r4,r4,4128
     e90:	000b883a 	mov	r5,zero
     e94:	01800084 	movi	r6,2
     e98:	01c000c4 	movi	r7,3
     e9c:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001000,0x0,ALMOST_EMPTY,256-5);
     ea0:	01020034 	movhi	r4,2048
     ea4:	21040004 	addi	r4,r4,4096
     ea8:	000b883a 	mov	r5,zero
     eac:	01800084 	movi	r6,2
     eb0:	01c03ec4 	movi	r7,251
     eb4:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001000,0x0,ALMOST_EMPTY,256-5);
     eb8:	01020034 	movhi	r4,2048
     ebc:	21040004 	addi	r4,r4,4096
     ec0:	000b883a 	mov	r5,zero
     ec4:	01800084 	movi	r6,2
     ec8:	01c03ec4 	movi	r7,251
     ecc:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001020,0x0,ALMOST_EMPTY,256-5);
     ed0:	01020034 	movhi	r4,2048
     ed4:	21040804 	addi	r4,r4,4128
     ed8:	000b883a 	mov	r5,zero
     edc:	01800084 	movi	r6,2
     ee0:	01c03ec4 	movi	r7,251
     ee4:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001000,0x0,ALMOST_EMPTY,256-5);
     ee8:	01020034 	movhi	r4,2048
     eec:	21040004 	addi	r4,r4,4096
     ef0:	000b883a 	mov	r5,zero
     ef4:	01800084 	movi	r6,2
     ef8:	01c03ec4 	movi	r7,251
     efc:	00113800 	call	11380 <altera_avalon_fifo_init>
	altera_avalon_fifo_init(0x08001040,0x0,ALMOST_EMPTY,256-5);
     f00:	01020034 	movhi	r4,2048
     f04:	21041004 	addi	r4,r4,4160
     f08:	000b883a 	mov	r5,zero
     f0c:	01800084 	movi	r6,2
     f10:	01c03ec4 	movi	r7,251
     f14:	00113800 	call	11380 <altera_avalon_fifo_init>

	UINT8 *output_ptr;
	UINT32 quality_factor, image_format, image_width, image_height;


	fp = fopen ("param.txt", "r");
     f18:	01000074 	movhi	r4,1
     f1c:	210ec304 	addi	r4,r4,15116
     f20:	01400074 	movhi	r5,1
     f24:	294ec604 	addi	r5,r5,15128
     f28:	00019000 	call	1900 <fopen>
     f2c:	e0bfa915 	stw	r2,-348(fp)
	printf("File Open @ %d \n",clock());
     f30:	00011a40 	call	11a4 <clock>
     f34:	100b883a 	mov	r5,r2
     f38:	01000074 	movhi	r4,1
     f3c:	210ec704 	addi	r4,r4,15132
     f40:	00031040 	call	3104 <printf>
	while (fscanf (fp, "%s", input_file_name) != EOF)
     f44:	00007306 	br	1114 <main+0x304>
	{
		input_file_name_ptr = input_file_name;
     f48:	e0bfaf04 	addi	r2,fp,-324
     f4c:	e0bfae15 	stw	r2,-328(fp)
		output_file_name_ptr = output_file_name;
     f50:	e0bfd484 	addi	r2,fp,-174
     f54:	e0bfad15 	stw	r2,-332(fp)
		// *output_file_name_ptr++ = 'j';
		// *output_file_name_ptr++ = 'p';
		// *output_file_name_ptr++ = 'g';
		// *output_file_name_ptr++ = '\0';
		
		while(*input_file_name_ptr != '.'){
     f58:	00000d06 	br	f90 <main+0x180>
			// SEND6(*input_file_name_ptr);
			altera_avalon_fifo_write_fifo(0x0800110c,0x08001000,*input_file_name_ptr);
     f5c:	e0bfae17 	ldw	r2,-328(fp)
     f60:	10800003 	ldbu	r2,0(r2)
     f64:	11803fcc 	andi	r6,r2,255
     f68:	3180201c 	xori	r6,r6,128
     f6c:	31bfe004 	addi	r6,r6,-128
     f70:	01020034 	movhi	r4,2048
     f74:	21044304 	addi	r4,r4,4364
     f78:	01420034 	movhi	r5,2048
     f7c:	29440004 	addi	r5,r5,4096
     f80:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
			input_file_name_ptr++;
     f84:	e0bfae17 	ldw	r2,-328(fp)
     f88:	10800044 	addi	r2,r2,1
     f8c:	e0bfae15 	stw	r2,-328(fp)
		// *output_file_name_ptr++ = 'j';
		// *output_file_name_ptr++ = 'p';
		// *output_file_name_ptr++ = 'g';
		// *output_file_name_ptr++ = '\0';
		
		while(*input_file_name_ptr != '.'){
     f90:	e0bfae17 	ldw	r2,-328(fp)
     f94:	10800003 	ldbu	r2,0(r2)
     f98:	10803fcc 	andi	r2,r2,255
     f9c:	1080201c 	xori	r2,r2,128
     fa0:	10bfe004 	addi	r2,r2,-128
     fa4:	10800b98 	cmpnei	r2,r2,46
     fa8:	103fec1e 	bne	r2,zero,f5c <main+0x14c>
			// SEND6(*input_file_name_ptr);
			altera_avalon_fifo_write_fifo(0x0800110c,0x08001000,*input_file_name_ptr);
			input_file_name_ptr++;
		}
		//SEND6('\0');
		altera_avalon_fifo_write_fifo(0x0800110c,0x08001000,'\0');
     fac:	01020034 	movhi	r4,2048
     fb0:	21044304 	addi	r4,r4,4364
     fb4:	01420034 	movhi	r5,2048
     fb8:	29440004 	addi	r5,r5,4096
     fbc:	000d883a 	mov	r6,zero
     fc0:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>

		fscanf (fp, "%d", &quality_factor);
     fc4:	e1bffa04 	addi	r6,fp,-24
     fc8:	e13fa917 	ldw	r4,-348(fp)
     fcc:	01400074 	movhi	r5,1
     fd0:	294ecc04 	addi	r5,r5,15152
     fd4:	0001fc00 	call	1fc0 <fscanf>
		fscanf (fp, "%d", &image_format);
     fd8:	e1bffb04 	addi	r6,fp,-20
     fdc:	e13fa917 	ldw	r4,-348(fp)
     fe0:	01400074 	movhi	r5,1
     fe4:	294ecc04 	addi	r5,r5,15152
     fe8:	0001fc00 	call	1fc0 <fscanf>
		fscanf (fp, "%d", &image_width);
     fec:	e1bffc04 	addi	r6,fp,-16
     ff0:	e13fa917 	ldw	r4,-348(fp)
     ff4:	01400074 	movhi	r5,1
     ff8:	294ecc04 	addi	r5,r5,15152
     ffc:	0001fc00 	call	1fc0 <fscanf>
		fscanf (fp, "%d", &image_height);
    1000:	e1bffd04 	addi	r6,fp,-12
    1004:	e13fa917 	ldw	r4,-348(fp)
    1008:	01400074 	movhi	r5,1
    100c:	294ecc04 	addi	r5,r5,15152
    1010:	0001fc00 	call	1fc0 <fscanf>

		if (image_format == FOUR_ZERO_ZERO)
    1014:	e0bffb17 	ldw	r2,-20(fp)
    1018:	1004c03a 	cmpne	r2,r2,zero
    101c:	1000051e 	bne	r2,zero,1034 <main+0x224>
			image_size = image_width * image_height;
    1020:	e0bffc17 	ldw	r2,-16(fp)
    1024:	e0fffd17 	ldw	r3,-12(fp)
    1028:	10c5383a 	mul	r2,r2,r3
    102c:	e0bfac15 	stw	r2,-336(fp)
    1030:	00001c06 	br	10a4 <main+0x294>
		else if (image_format == FOUR_TWO_ZERO)
    1034:	e0bffb17 	ldw	r2,-20(fp)
    1038:	10800058 	cmpnei	r2,r2,1
    103c:	1000091e 	bne	r2,zero,1064 <main+0x254>
			image_size = (image_width * image_height * 3) >> 1;
    1040:	e0fffc17 	ldw	r3,-16(fp)
    1044:	e0bffd17 	ldw	r2,-12(fp)
    1048:	1887383a 	mul	r3,r3,r2
    104c:	1805883a 	mov	r2,r3
    1050:	1085883a 	add	r2,r2,r2
    1054:	10c5883a 	add	r2,r2,r3
    1058:	1004d07a 	srli	r2,r2,1
    105c:	e0bfac15 	stw	r2,-336(fp)
    1060:	00001006 	br	10a4 <main+0x294>
		else if (image_format == FOUR_TWO_TWO)
    1064:	e0bffb17 	ldw	r2,-20(fp)
    1068:	10800098 	cmpnei	r2,r2,2
    106c:	1000061e 	bne	r2,zero,1088 <main+0x278>
			image_size = image_width * image_height * 2;
    1070:	e0fffc17 	ldw	r3,-16(fp)
    1074:	e0bffd17 	ldw	r2,-12(fp)
    1078:	1885383a 	mul	r2,r3,r2
    107c:	1085883a 	add	r2,r2,r2
    1080:	e0bfac15 	stw	r2,-336(fp)
    1084:	00000706 	br	10a4 <main+0x294>
		else
			image_size = image_width * image_height * 3;
    1088:	e0fffc17 	ldw	r3,-16(fp)
    108c:	e0bffd17 	ldw	r2,-12(fp)
    1090:	1887383a 	mul	r3,r3,r2
    1094:	1805883a 	mov	r2,r3
    1098:	1085883a 	add	r2,r2,r2
    109c:	10c5883a 	add	r2,r2,r3
    10a0:	e0bfac15 	stw	r2,-336(fp)

		input=(UINT8 *)jemalloc(2500000*sizeof(UINT8));
    10a4:	010009b4 	movhi	r4,38
    10a8:	21096804 	addi	r4,r4,9632
    10ac:	00011740 	call	1174 <jemalloc>
    10b0:	e0bfab15 	stw	r2,-340(fp)
		fpt = fopen (input_file_name, "rb");
    10b4:	e13faf04 	addi	r4,fp,-324
    10b8:	01400074 	movhi	r5,1
    10bc:	294ecd04 	addi	r5,r5,15156
    10c0:	00019000 	call	1900 <fopen>
    10c4:	e0bfa815 	stw	r2,-352(fp)
		fread (input, 1, image_size, fpt);
    10c8:	e13fab17 	ldw	r4,-340(fp)
    10cc:	01400044 	movi	r5,1
    10d0:	e1bfac17 	ldw	r6,-336(fp)
    10d4:	e1ffa817 	ldw	r7,-352(fp)
    10d8:	0001b180 	call	1b18 <fread>
		fclose (fpt);
    10dc:	e13fa817 	ldw	r4,-352(fp)
    10e0:	00013080 	call	1308 <fclose>
		//output=(UINT8 *)jemalloc(250000*sizeof(UINT8*));
		//output_ptr = output;

		output_ptr = encode_image (input, output_ptr, quality_factor, image_format, image_width, image_height);
    10e4:	e1bffa17 	ldw	r6,-24(fp)
    10e8:	e1fffb17 	ldw	r7,-20(fp)
    10ec:	e0bffc17 	ldw	r2,-16(fp)
    10f0:	e0fffd17 	ldw	r3,-12(fp)
    10f4:	d8800015 	stw	r2,0(sp)
    10f8:	d8c00115 	stw	r3,4(sp)
    10fc:	e13fab17 	ldw	r4,-340(fp)
    1100:	e17fa717 	ldw	r5,-356(fp)
    1104:	0000b9c0 	call	b9c <encode_image>
    1108:	e0bfa715 	stw	r2,-356(fp)
 
		//fpt = fopen (output_file_name, "wb");
		//fwrite (output, 1, output_ptr - output, fpt);
		//fclose (fpt);
		free (input);
    110c:	e13fab17 	ldw	r4,-340(fp)
    1110:	00027ec0 	call	27ec <free>
	UINT32 quality_factor, image_format, image_width, image_height;


	fp = fopen ("param.txt", "r");
	printf("File Open @ %d \n",clock());
	while (fscanf (fp, "%s", input_file_name) != EOF)
    1114:	e1bfaf04 	addi	r6,fp,-324
    1118:	e13fa917 	ldw	r4,-348(fp)
    111c:	01400074 	movhi	r5,1
    1120:	294ece04 	addi	r5,r5,15160
    1124:	0001fc00 	call	1fc0 <fscanf>
    1128:	10bfffd8 	cmpnei	r2,r2,-1
    112c:	103f861e 	bne	r2,zero,f48 <main+0x138>
		//xt_iss_profile_disable();
		//while(!ISDONE());
		//xt_iss_profile_enable();
	}

	altera_avalon_fifo_write_fifo(0x0800110c,0x08001000,0);
    1130:	01020034 	movhi	r4,2048
    1134:	21044304 	addi	r4,r4,4364
    1138:	01420034 	movhi	r5,2048
    113c:	29440004 	addi	r5,r5,4096
    1140:	000d883a 	mov	r6,zero
    1144:	00116f80 	call	116f8 <altera_avalon_fifo_write_fifo>
	//SEND6(0);

	fclose (fp);
    1148:	e13fa917 	ldw	r4,-348(fp)
    114c:	00013080 	call	1308 <fclose>
	
	//while(1);
	printf("\n Done ! \n");
    1150:	01000074 	movhi	r4,1
    1154:	210ecf04 	addi	r4,r4,15164
    1158:	000321c0 	call	321c <puts>
	return 0;
    115c:	0005883a 	mov	r2,zero
}
    1160:	e037883a 	mov	sp,fp
    1164:	dfc00117 	ldw	ra,4(sp)
    1168:	df000017 	ldw	fp,0(sp)
    116c:	dec00204 	addi	sp,sp,8
    1170:	f800283a 	ret

00001174 <jemalloc>:

void* jemalloc(size_t size)
{
    1174:	defffd04 	addi	sp,sp,-12
    1178:	dfc00215 	stw	ra,8(sp)
    117c:	df000115 	stw	fp,4(sp)
    1180:	df000104 	addi	fp,sp,4
    1184:	e13fff15 	stw	r4,-4(fp)
	return (malloc(size));
    1188:	e13fff17 	ldw	r4,-4(fp)
    118c:	00028000 	call	2800 <malloc>
}
    1190:	e037883a 	mov	sp,fp
    1194:	dfc00117 	ldw	ra,4(sp)
    1198:	df000017 	ldw	fp,0(sp)
    119c:	dec00204 	addi	sp,sp,8
    11a0:	f800283a 	ret

000011a4 <clock>:
    11a4:	00800074 	movhi	r2,1
    11a8:	10970104 	addi	r2,r2,23556
    11ac:	11000017 	ldw	r4,0(r2)
    11b0:	defffb04 	addi	sp,sp,-20
    11b4:	d80b883a 	mov	r5,sp
    11b8:	dfc00415 	stw	ra,16(sp)
    11bc:	00036400 	call	3640 <_times_r>
    11c0:	1007883a 	mov	r3,r2
    11c4:	00bfffc4 	movi	r2,-1
    11c8:	18800726 	beq	r3,r2,11e8 <clock+0x44>
    11cc:	d8c00117 	ldw	r3,4(sp)
    11d0:	d9000017 	ldw	r4,0(sp)
    11d4:	d8800217 	ldw	r2,8(sp)
    11d8:	20c9883a 	add	r4,r4,r3
    11dc:	d8c00317 	ldw	r3,12(sp)
    11e0:	10c5883a 	add	r2,r2,r3
    11e4:	2087883a 	add	r3,r4,r2
    11e8:	1805883a 	mov	r2,r3
    11ec:	dfc00417 	ldw	ra,16(sp)
    11f0:	dec00504 	addi	sp,sp,20
    11f4:	f800283a 	ret

000011f8 <_fclose_r>:
    11f8:	defffc04 	addi	sp,sp,-16
    11fc:	dc400115 	stw	r17,4(sp)
    1200:	dc000015 	stw	r16,0(sp)
    1204:	dfc00315 	stw	ra,12(sp)
    1208:	dc800215 	stw	r18,8(sp)
    120c:	2821883a 	mov	r16,r5
    1210:	2023883a 	mov	r17,r4
    1214:	28002926 	beq	r5,zero,12bc <_fclose_r+0xc4>
    1218:	00015a40 	call	15a4 <__sfp_lock_acquire>
    121c:	88000226 	beq	r17,zero,1228 <_fclose_r+0x30>
    1220:	88800e17 	ldw	r2,56(r17)
    1224:	10002d26 	beq	r2,zero,12dc <_fclose_r+0xe4>
    1228:	8080030f 	ldh	r2,12(r16)
    122c:	10002226 	beq	r2,zero,12b8 <_fclose_r+0xc0>
    1230:	8809883a 	mov	r4,r17
    1234:	800b883a 	mov	r5,r16
    1238:	000131c0 	call	131c <_fflush_r>
    123c:	1025883a 	mov	r18,r2
    1240:	80800b17 	ldw	r2,44(r16)
    1244:	10000426 	beq	r2,zero,1258 <_fclose_r+0x60>
    1248:	81400717 	ldw	r5,28(r16)
    124c:	8809883a 	mov	r4,r17
    1250:	103ee83a 	callr	r2
    1254:	10002a16 	blt	r2,zero,1300 <_fclose_r+0x108>
    1258:	8080030b 	ldhu	r2,12(r16)
    125c:	1080200c 	andi	r2,r2,128
    1260:	1000231e 	bne	r2,zero,12f0 <_fclose_r+0xf8>
    1264:	81400c17 	ldw	r5,48(r16)
    1268:	28000526 	beq	r5,zero,1280 <_fclose_r+0x88>
    126c:	80801004 	addi	r2,r16,64
    1270:	28800226 	beq	r5,r2,127c <_fclose_r+0x84>
    1274:	8809883a 	mov	r4,r17
    1278:	0001c840 	call	1c84 <_free_r>
    127c:	80000c15 	stw	zero,48(r16)
    1280:	81401117 	ldw	r5,68(r16)
    1284:	28000326 	beq	r5,zero,1294 <_fclose_r+0x9c>
    1288:	8809883a 	mov	r4,r17
    128c:	0001c840 	call	1c84 <_free_r>
    1290:	80001115 	stw	zero,68(r16)
    1294:	8000030d 	sth	zero,12(r16)
    1298:	00015a80 	call	15a8 <__sfp_lock_release>
    129c:	9005883a 	mov	r2,r18
    12a0:	dfc00317 	ldw	ra,12(sp)
    12a4:	dc800217 	ldw	r18,8(sp)
    12a8:	dc400117 	ldw	r17,4(sp)
    12ac:	dc000017 	ldw	r16,0(sp)
    12b0:	dec00404 	addi	sp,sp,16
    12b4:	f800283a 	ret
    12b8:	00015a80 	call	15a8 <__sfp_lock_release>
    12bc:	0025883a 	mov	r18,zero
    12c0:	9005883a 	mov	r2,r18
    12c4:	dfc00317 	ldw	ra,12(sp)
    12c8:	dc800217 	ldw	r18,8(sp)
    12cc:	dc400117 	ldw	r17,4(sp)
    12d0:	dc000017 	ldw	r16,0(sp)
    12d4:	dec00404 	addi	sp,sp,16
    12d8:	f800283a 	ret
    12dc:	8809883a 	mov	r4,r17
    12e0:	00015b40 	call	15b4 <__sinit>
    12e4:	8080030f 	ldh	r2,12(r16)
    12e8:	103fd11e 	bne	r2,zero,1230 <_fclose_r+0x38>
    12ec:	003ff206 	br	12b8 <_fclose_r+0xc0>
    12f0:	81400417 	ldw	r5,16(r16)
    12f4:	8809883a 	mov	r4,r17
    12f8:	0001c840 	call	1c84 <_free_r>
    12fc:	003fd906 	br	1264 <_fclose_r+0x6c>
    1300:	04bfffc4 	movi	r18,-1
    1304:	003fd406 	br	1258 <_fclose_r+0x60>

00001308 <fclose>:
    1308:	00800074 	movhi	r2,1
    130c:	10970104 	addi	r2,r2,23556
    1310:	200b883a 	mov	r5,r4
    1314:	11000017 	ldw	r4,0(r2)
    1318:	00011f81 	jmpi	11f8 <_fclose_r>

0000131c <_fflush_r>:
    131c:	defffb04 	addi	sp,sp,-20
    1320:	dcc00315 	stw	r19,12(sp)
    1324:	dc800215 	stw	r18,8(sp)
    1328:	dfc00415 	stw	ra,16(sp)
    132c:	dc400115 	stw	r17,4(sp)
    1330:	dc000015 	stw	r16,0(sp)
    1334:	2027883a 	mov	r19,r4
    1338:	2825883a 	mov	r18,r5
    133c:	20000226 	beq	r4,zero,1348 <_fflush_r+0x2c>
    1340:	20800e17 	ldw	r2,56(r4)
    1344:	10005626 	beq	r2,zero,14a0 <_fflush_r+0x184>
    1348:	9100030b 	ldhu	r4,12(r18)
    134c:	20ffffcc 	andi	r3,r4,65535
    1350:	18e0001c 	xori	r3,r3,32768
    1354:	18e00004 	addi	r3,r3,-32768
    1358:	1880020c 	andi	r2,r3,8
    135c:	1000261e 	bne	r2,zero,13f8 <_fflush_r+0xdc>
    1360:	90c00117 	ldw	r3,4(r18)
    1364:	20820014 	ori	r2,r4,2048
    1368:	9080030d 	sth	r2,12(r18)
    136c:	1009883a 	mov	r4,r2
    1370:	00c0400e 	bge	zero,r3,1474 <_fflush_r+0x158>
    1374:	92000a17 	ldw	r8,40(r18)
    1378:	40004026 	beq	r8,zero,147c <_fflush_r+0x160>
    137c:	2084000c 	andi	r2,r4,4096
    1380:	10005326 	beq	r2,zero,14d0 <_fflush_r+0x1b4>
    1384:	94001417 	ldw	r16,80(r18)
    1388:	9080030b 	ldhu	r2,12(r18)
    138c:	1080010c 	andi	r2,r2,4
    1390:	1000481e 	bne	r2,zero,14b4 <_fflush_r+0x198>
    1394:	91400717 	ldw	r5,28(r18)
    1398:	9809883a 	mov	r4,r19
    139c:	800d883a 	mov	r6,r16
    13a0:	000f883a 	mov	r7,zero
    13a4:	403ee83a 	callr	r8
    13a8:	8080261e 	bne	r16,r2,1444 <_fflush_r+0x128>
    13ac:	9080030b 	ldhu	r2,12(r18)
    13b0:	91000417 	ldw	r4,16(r18)
    13b4:	90000115 	stw	zero,4(r18)
    13b8:	10bdffcc 	andi	r2,r2,63487
    13bc:	10ffffcc 	andi	r3,r2,65535
    13c0:	18c4000c 	andi	r3,r3,4096
    13c4:	9080030d 	sth	r2,12(r18)
    13c8:	91000015 	stw	r4,0(r18)
    13cc:	18002b26 	beq	r3,zero,147c <_fflush_r+0x160>
    13d0:	0007883a 	mov	r3,zero
    13d4:	1805883a 	mov	r2,r3
    13d8:	94001415 	stw	r16,80(r18)
    13dc:	dfc00417 	ldw	ra,16(sp)
    13e0:	dcc00317 	ldw	r19,12(sp)
    13e4:	dc800217 	ldw	r18,8(sp)
    13e8:	dc400117 	ldw	r17,4(sp)
    13ec:	dc000017 	ldw	r16,0(sp)
    13f0:	dec00504 	addi	sp,sp,20
    13f4:	f800283a 	ret
    13f8:	94400417 	ldw	r17,16(r18)
    13fc:	88001f26 	beq	r17,zero,147c <_fflush_r+0x160>
    1400:	90800017 	ldw	r2,0(r18)
    1404:	18c000cc 	andi	r3,r3,3
    1408:	94400015 	stw	r17,0(r18)
    140c:	1461c83a 	sub	r16,r2,r17
    1410:	18002526 	beq	r3,zero,14a8 <_fflush_r+0x18c>
    1414:	0005883a 	mov	r2,zero
    1418:	90800215 	stw	r2,8(r18)
    141c:	0400170e 	bge	zero,r16,147c <_fflush_r+0x160>
    1420:	90c00917 	ldw	r3,36(r18)
    1424:	91400717 	ldw	r5,28(r18)
    1428:	880d883a 	mov	r6,r17
    142c:	800f883a 	mov	r7,r16
    1430:	9809883a 	mov	r4,r19
    1434:	183ee83a 	callr	r3
    1438:	88a3883a 	add	r17,r17,r2
    143c:	80a1c83a 	sub	r16,r16,r2
    1440:	00bff616 	blt	zero,r2,141c <_fflush_r+0x100>
    1444:	9080030b 	ldhu	r2,12(r18)
    1448:	00ffffc4 	movi	r3,-1
    144c:	10801014 	ori	r2,r2,64
    1450:	9080030d 	sth	r2,12(r18)
    1454:	1805883a 	mov	r2,r3
    1458:	dfc00417 	ldw	ra,16(sp)
    145c:	dcc00317 	ldw	r19,12(sp)
    1460:	dc800217 	ldw	r18,8(sp)
    1464:	dc400117 	ldw	r17,4(sp)
    1468:	dc000017 	ldw	r16,0(sp)
    146c:	dec00504 	addi	sp,sp,20
    1470:	f800283a 	ret
    1474:	90800f17 	ldw	r2,60(r18)
    1478:	00bfbe16 	blt	zero,r2,1374 <_fflush_r+0x58>
    147c:	0007883a 	mov	r3,zero
    1480:	1805883a 	mov	r2,r3
    1484:	dfc00417 	ldw	ra,16(sp)
    1488:	dcc00317 	ldw	r19,12(sp)
    148c:	dc800217 	ldw	r18,8(sp)
    1490:	dc400117 	ldw	r17,4(sp)
    1494:	dc000017 	ldw	r16,0(sp)
    1498:	dec00504 	addi	sp,sp,20
    149c:	f800283a 	ret
    14a0:	00015b40 	call	15b4 <__sinit>
    14a4:	003fa806 	br	1348 <_fflush_r+0x2c>
    14a8:	90800517 	ldw	r2,20(r18)
    14ac:	90800215 	stw	r2,8(r18)
    14b0:	003fda06 	br	141c <_fflush_r+0x100>
    14b4:	90800117 	ldw	r2,4(r18)
    14b8:	90c00c17 	ldw	r3,48(r18)
    14bc:	80a1c83a 	sub	r16,r16,r2
    14c0:	183fb426 	beq	r3,zero,1394 <_fflush_r+0x78>
    14c4:	90800f17 	ldw	r2,60(r18)
    14c8:	80a1c83a 	sub	r16,r16,r2
    14cc:	003fb106 	br	1394 <_fflush_r+0x78>
    14d0:	91400717 	ldw	r5,28(r18)
    14d4:	9809883a 	mov	r4,r19
    14d8:	000d883a 	mov	r6,zero
    14dc:	01c00044 	movi	r7,1
    14e0:	403ee83a 	callr	r8
    14e4:	1021883a 	mov	r16,r2
    14e8:	00bfffc4 	movi	r2,-1
    14ec:	80800226 	beq	r16,r2,14f8 <_fflush_r+0x1dc>
    14f0:	92000a17 	ldw	r8,40(r18)
    14f4:	003fa406 	br	1388 <_fflush_r+0x6c>
    14f8:	98c00017 	ldw	r3,0(r19)
    14fc:	00800744 	movi	r2,29
    1500:	18bfde26 	beq	r3,r2,147c <_fflush_r+0x160>
    1504:	9080030b 	ldhu	r2,12(r18)
    1508:	8007883a 	mov	r3,r16
    150c:	10801014 	ori	r2,r2,64
    1510:	9080030d 	sth	r2,12(r18)
    1514:	003fcf06 	br	1454 <_fflush_r+0x138>

00001518 <fflush>:
    1518:	01400034 	movhi	r5,0
    151c:	2944c704 	addi	r5,r5,4892
    1520:	2007883a 	mov	r3,r4
    1524:	20000526 	beq	r4,zero,153c <fflush+0x24>
    1528:	00800074 	movhi	r2,1
    152c:	10970104 	addi	r2,r2,23556
    1530:	11000017 	ldw	r4,0(r2)
    1534:	180b883a 	mov	r5,r3
    1538:	000131c1 	jmpi	131c <_fflush_r>
    153c:	00800074 	movhi	r2,1
    1540:	10970204 	addi	r2,r2,23560
    1544:	11000017 	ldw	r4,0(r2)
    1548:	00024d81 	jmpi	24d8 <_fwalk_reent>

0000154c <std>:
    154c:	00800034 	movhi	r2,0
    1550:	108d2004 	addi	r2,r2,13440
    1554:	20800b15 	stw	r2,44(r4)
    1558:	00800034 	movhi	r2,0
    155c:	108d5b04 	addi	r2,r2,13676
    1560:	20800815 	stw	r2,32(r4)
    1564:	00c00034 	movhi	r3,0
    1568:	18cd3c04 	addi	r3,r3,13552
    156c:	00800034 	movhi	r2,0
    1570:	108d2204 	addi	r2,r2,13448
    1574:	2140030d 	sth	r5,12(r4)
    1578:	2180038d 	sth	r6,14(r4)
    157c:	20c00915 	stw	r3,36(r4)
    1580:	20800a15 	stw	r2,40(r4)
    1584:	20000015 	stw	zero,0(r4)
    1588:	20000115 	stw	zero,4(r4)
    158c:	20000215 	stw	zero,8(r4)
    1590:	20000415 	stw	zero,16(r4)
    1594:	20000515 	stw	zero,20(r4)
    1598:	20000615 	stw	zero,24(r4)
    159c:	21000715 	stw	r4,28(r4)
    15a0:	f800283a 	ret

000015a4 <__sfp_lock_acquire>:
    15a4:	f800283a 	ret

000015a8 <__sfp_lock_release>:
    15a8:	f800283a 	ret

000015ac <__sinit_lock_acquire>:
    15ac:	f800283a 	ret

000015b0 <__sinit_lock_release>:
    15b0:	f800283a 	ret

000015b4 <__sinit>:
    15b4:	20800e17 	ldw	r2,56(r4)
    15b8:	defffd04 	addi	sp,sp,-12
    15bc:	dc400115 	stw	r17,4(sp)
    15c0:	dc000015 	stw	r16,0(sp)
    15c4:	dfc00215 	stw	ra,8(sp)
    15c8:	04400044 	movi	r17,1
    15cc:	01400104 	movi	r5,4
    15d0:	000d883a 	mov	r6,zero
    15d4:	2021883a 	mov	r16,r4
    15d8:	2200bb04 	addi	r8,r4,748
    15dc:	200f883a 	mov	r7,r4
    15e0:	10000526 	beq	r2,zero,15f8 <__sinit+0x44>
    15e4:	dfc00217 	ldw	ra,8(sp)
    15e8:	dc400117 	ldw	r17,4(sp)
    15ec:	dc000017 	ldw	r16,0(sp)
    15f0:	dec00304 	addi	sp,sp,12
    15f4:	f800283a 	ret
    15f8:	21000117 	ldw	r4,4(r4)
    15fc:	00800034 	movhi	r2,0
    1600:	1085a604 	addi	r2,r2,5784
    1604:	00c000c4 	movi	r3,3
    1608:	80800f15 	stw	r2,60(r16)
    160c:	80c0b915 	stw	r3,740(r16)
    1610:	8200ba15 	stw	r8,744(r16)
    1614:	84400e15 	stw	r17,56(r16)
    1618:	8000b815 	stw	zero,736(r16)
    161c:	000154c0 	call	154c <std>
    1620:	81000217 	ldw	r4,8(r16)
    1624:	880d883a 	mov	r6,r17
    1628:	800f883a 	mov	r7,r16
    162c:	01400284 	movi	r5,10
    1630:	000154c0 	call	154c <std>
    1634:	81000317 	ldw	r4,12(r16)
    1638:	800f883a 	mov	r7,r16
    163c:	01400484 	movi	r5,18
    1640:	01800084 	movi	r6,2
    1644:	dfc00217 	ldw	ra,8(sp)
    1648:	dc400117 	ldw	r17,4(sp)
    164c:	dc000017 	ldw	r16,0(sp)
    1650:	dec00304 	addi	sp,sp,12
    1654:	000154c1 	jmpi	154c <std>

00001658 <__fp_lock>:
    1658:	0005883a 	mov	r2,zero
    165c:	f800283a 	ret

00001660 <__fp_unlock>:
    1660:	0005883a 	mov	r2,zero
    1664:	f800283a 	ret

00001668 <__fp_unlock_all>:
    1668:	00800074 	movhi	r2,1
    166c:	10970104 	addi	r2,r2,23556
    1670:	11000017 	ldw	r4,0(r2)
    1674:	01400034 	movhi	r5,0
    1678:	29459804 	addi	r5,r5,5728
    167c:	00025a01 	jmpi	25a0 <_fwalk>

00001680 <__fp_lock_all>:
    1680:	00800074 	movhi	r2,1
    1684:	10970104 	addi	r2,r2,23556
    1688:	11000017 	ldw	r4,0(r2)
    168c:	01400034 	movhi	r5,0
    1690:	29459604 	addi	r5,r5,5720
    1694:	00025a01 	jmpi	25a0 <_fwalk>

00001698 <_cleanup_r>:
    1698:	01400034 	movhi	r5,0
    169c:	2944c204 	addi	r5,r5,4872
    16a0:	00025a01 	jmpi	25a0 <_fwalk>

000016a4 <_cleanup>:
    16a4:	00800074 	movhi	r2,1
    16a8:	10970204 	addi	r2,r2,23560
    16ac:	11000017 	ldw	r4,0(r2)
    16b0:	00016981 	jmpi	1698 <_cleanup_r>

000016b4 <__sfmoreglue>:
    16b4:	defffc04 	addi	sp,sp,-16
    16b8:	dc400115 	stw	r17,4(sp)
    16bc:	2c401724 	muli	r17,r5,92
    16c0:	dc800215 	stw	r18,8(sp)
    16c4:	2825883a 	mov	r18,r5
    16c8:	89400304 	addi	r5,r17,12
    16cc:	dc000015 	stw	r16,0(sp)
    16d0:	dfc00315 	stw	ra,12(sp)
    16d4:	00028140 	call	2814 <_malloc_r>
    16d8:	0021883a 	mov	r16,zero
    16dc:	880d883a 	mov	r6,r17
    16e0:	000b883a 	mov	r5,zero
    16e4:	10000626 	beq	r2,zero,1700 <__sfmoreglue+0x4c>
    16e8:	11000304 	addi	r4,r2,12
    16ec:	14800115 	stw	r18,4(r2)
    16f0:	10000015 	stw	zero,0(r2)
    16f4:	11000215 	stw	r4,8(r2)
    16f8:	1021883a 	mov	r16,r2
    16fc:	0002ff40 	call	2ff4 <memset>
    1700:	8005883a 	mov	r2,r16
    1704:	dfc00317 	ldw	ra,12(sp)
    1708:	dc800217 	ldw	r18,8(sp)
    170c:	dc400117 	ldw	r17,4(sp)
    1710:	dc000017 	ldw	r16,0(sp)
    1714:	dec00404 	addi	sp,sp,16
    1718:	f800283a 	ret

0000171c <__sfp>:
    171c:	defffd04 	addi	sp,sp,-12
    1720:	00800074 	movhi	r2,1
    1724:	10970204 	addi	r2,r2,23560
    1728:	dc000015 	stw	r16,0(sp)
    172c:	14000017 	ldw	r16,0(r2)
    1730:	dc400115 	stw	r17,4(sp)
    1734:	dfc00215 	stw	ra,8(sp)
    1738:	80800e17 	ldw	r2,56(r16)
    173c:	2023883a 	mov	r17,r4
    1740:	10002626 	beq	r2,zero,17dc <__sfp+0xc0>
    1744:	8400b804 	addi	r16,r16,736
    1748:	80800117 	ldw	r2,4(r16)
    174c:	81000217 	ldw	r4,8(r16)
    1750:	10ffffc4 	addi	r3,r2,-1
    1754:	18000916 	blt	r3,zero,177c <__sfp+0x60>
    1758:	2080030f 	ldh	r2,12(r4)
    175c:	10000b26 	beq	r2,zero,178c <__sfp+0x70>
    1760:	017fffc4 	movi	r5,-1
    1764:	00000206 	br	1770 <__sfp+0x54>
    1768:	2080030f 	ldh	r2,12(r4)
    176c:	10000726 	beq	r2,zero,178c <__sfp+0x70>
    1770:	18ffffc4 	addi	r3,r3,-1
    1774:	21001704 	addi	r4,r4,92
    1778:	197ffb1e 	bne	r3,r5,1768 <__sfp+0x4c>
    177c:	80800017 	ldw	r2,0(r16)
    1780:	10001926 	beq	r2,zero,17e8 <__sfp+0xcc>
    1784:	1021883a 	mov	r16,r2
    1788:	003fef06 	br	1748 <__sfp+0x2c>
    178c:	00bfffc4 	movi	r2,-1
    1790:	00c00044 	movi	r3,1
    1794:	2080038d 	sth	r2,14(r4)
    1798:	20c0030d 	sth	r3,12(r4)
    179c:	20000015 	stw	zero,0(r4)
    17a0:	20000215 	stw	zero,8(r4)
    17a4:	20000115 	stw	zero,4(r4)
    17a8:	20000415 	stw	zero,16(r4)
    17ac:	20000515 	stw	zero,20(r4)
    17b0:	20000615 	stw	zero,24(r4)
    17b4:	20000c15 	stw	zero,48(r4)
    17b8:	20000d15 	stw	zero,52(r4)
    17bc:	20001115 	stw	zero,68(r4)
    17c0:	20001215 	stw	zero,72(r4)
    17c4:	2005883a 	mov	r2,r4
    17c8:	dfc00217 	ldw	ra,8(sp)
    17cc:	dc400117 	ldw	r17,4(sp)
    17d0:	dc000017 	ldw	r16,0(sp)
    17d4:	dec00304 	addi	sp,sp,12
    17d8:	f800283a 	ret
    17dc:	8009883a 	mov	r4,r16
    17e0:	00015b40 	call	15b4 <__sinit>
    17e4:	003fd706 	br	1744 <__sfp+0x28>
    17e8:	8809883a 	mov	r4,r17
    17ec:	01400104 	movi	r5,4
    17f0:	00016b40 	call	16b4 <__sfmoreglue>
    17f4:	80800015 	stw	r2,0(r16)
    17f8:	103fe21e 	bne	r2,zero,1784 <__sfp+0x68>
    17fc:	00800304 	movi	r2,12
    1800:	0009883a 	mov	r4,zero
    1804:	88800015 	stw	r2,0(r17)
    1808:	003fee06 	br	17c4 <__sfp+0xa8>

0000180c <_fopen_r>:
    180c:	defffa04 	addi	sp,sp,-24
    1810:	dcc00415 	stw	r19,16(sp)
    1814:	2827883a 	mov	r19,r5
    1818:	300b883a 	mov	r5,r6
    181c:	d80d883a 	mov	r6,sp
    1820:	dc800315 	stw	r18,12(sp)
    1824:	dc400215 	stw	r17,8(sp)
    1828:	dc000115 	stw	r16,4(sp)
    182c:	dfc00515 	stw	ra,20(sp)
    1830:	2021883a 	mov	r16,r4
    1834:	00086e00 	call	86e0 <__sflags>
    1838:	1025883a 	mov	r18,r2
    183c:	8009883a 	mov	r4,r16
    1840:	0023883a 	mov	r17,zero
    1844:	1000081e 	bne	r2,zero,1868 <_fopen_r+0x5c>
    1848:	8805883a 	mov	r2,r17
    184c:	dfc00517 	ldw	ra,20(sp)
    1850:	dcc00417 	ldw	r19,16(sp)
    1854:	dc800317 	ldw	r18,12(sp)
    1858:	dc400217 	ldw	r17,8(sp)
    185c:	dc000117 	ldw	r16,4(sp)
    1860:	dec00604 	addi	sp,sp,24
    1864:	f800283a 	ret
    1868:	000171c0 	call	171c <__sfp>
    186c:	1023883a 	mov	r17,r2
    1870:	980b883a 	mov	r5,r19
    1874:	8009883a 	mov	r4,r16
    1878:	01c06d84 	movi	r7,438
    187c:	103ff226 	beq	r2,zero,1848 <_fopen_r+0x3c>
    1880:	d9800017 	ldw	r6,0(sp)
    1884:	000308c0 	call	308c <_open_r>
    1888:	10001816 	blt	r2,zero,18ec <_fopen_r+0xe0>
    188c:	00c00034 	movhi	r3,0
    1890:	18cd3c04 	addi	r3,r3,13552
    1894:	923fffcc 	andi	r8,r18,65535
    1898:	8880038d 	sth	r2,14(r17)
    189c:	00800034 	movhi	r2,0
    18a0:	108d5b04 	addi	r2,r2,13676
    18a4:	88800815 	stw	r2,32(r17)
    18a8:	88c00915 	stw	r3,36(r17)
    18ac:	00800034 	movhi	r2,0
    18b0:	108d2204 	addi	r2,r2,13448
    18b4:	00c00034 	movhi	r3,0
    18b8:	18cd2004 	addi	r3,r3,13440
    18bc:	4200400c 	andi	r8,r8,256
    18c0:	8c80030d 	sth	r18,12(r17)
    18c4:	8009883a 	mov	r4,r16
    18c8:	880b883a 	mov	r5,r17
    18cc:	000d883a 	mov	r6,zero
    18d0:	01c00084 	movi	r7,2
    18d4:	88800a15 	stw	r2,40(r17)
    18d8:	88c00b15 	stw	r3,44(r17)
    18dc:	8c400715 	stw	r17,28(r17)
    18e0:	403fd926 	beq	r8,zero,1848 <_fopen_r+0x3c>
    18e4:	00020040 	call	2004 <_fseek_r>
    18e8:	003fd706 	br	1848 <_fopen_r+0x3c>
    18ec:	00015a40 	call	15a4 <__sfp_lock_acquire>
    18f0:	8800030d 	sth	zero,12(r17)
    18f4:	00015a80 	call	15a8 <__sfp_lock_release>
    18f8:	0023883a 	mov	r17,zero
    18fc:	003fd206 	br	1848 <_fopen_r+0x3c>

00001900 <fopen>:
    1900:	01800074 	movhi	r6,1
    1904:	31970104 	addi	r6,r6,23556
    1908:	2007883a 	mov	r3,r4
    190c:	31000017 	ldw	r4,0(r6)
    1910:	280d883a 	mov	r6,r5
    1914:	180b883a 	mov	r5,r3
    1918:	000180c1 	jmpi	180c <_fopen_r>

0000191c <_fread_r>:
    191c:	defff504 	addi	sp,sp,-44
    1920:	ddc00815 	stw	r23,32(sp)
    1924:	39af383a 	mul	r23,r7,r6
    1928:	df000915 	stw	fp,36(sp)
    192c:	dd800715 	stw	r22,28(sp)
    1930:	dcc00415 	stw	r19,16(sp)
    1934:	dc000115 	stw	r16,4(sp)
    1938:	dfc00a15 	stw	ra,40(sp)
    193c:	dd400615 	stw	r21,24(sp)
    1940:	dd000515 	stw	r20,20(sp)
    1944:	dc800315 	stw	r18,12(sp)
    1948:	dc400215 	stw	r17,8(sp)
    194c:	d9800015 	stw	r6,0(sp)
    1950:	3839883a 	mov	fp,r7
    1954:	2821883a 	mov	r16,r5
    1958:	202d883a 	mov	r22,r4
    195c:	dcc00b17 	ldw	r19,44(sp)
    1960:	b8005926 	beq	r23,zero,1ac8 <_fread_r+0x1ac>
    1964:	20000226 	beq	r4,zero,1970 <_fread_r+0x54>
    1968:	20800e17 	ldw	r2,56(r4)
    196c:	10005826 	beq	r2,zero,1ad0 <_fread_r+0x1b4>
    1970:	9c400117 	ldw	r17,4(r19)
    1974:	88005916 	blt	r17,zero,1adc <_fread_r+0x1c0>
    1978:	9880030b 	ldhu	r2,12(r19)
    197c:	8029883a 	mov	r20,r16
    1980:	1080008c 	andi	r2,r2,2
    1984:	1000221e 	bne	r2,zero,1a10 <_fread_r+0xf4>
    1988:	b825883a 	mov	r18,r23
    198c:	00000106 	br	1994 <_fread_r+0x78>
    1990:	9c400117 	ldw	r17,4(r19)
    1994:	a009883a 	mov	r4,r20
    1998:	880d883a 	mov	r6,r17
    199c:	8c80542e 	bgeu	r17,r18,1af0 <_fread_r+0x1d4>
    19a0:	99400017 	ldw	r5,0(r19)
    19a4:	a469883a 	add	r20,r20,r17
    19a8:	9465c83a 	sub	r18,r18,r17
    19ac:	0002f540 	call	2f54 <memcpy>
    19b0:	98800017 	ldw	r2,0(r19)
    19b4:	b009883a 	mov	r4,r22
    19b8:	980b883a 	mov	r5,r19
    19bc:	1461883a 	add	r16,r2,r17
    19c0:	9c000015 	stw	r16,0(r19)
    19c4:	00032300 	call	3230 <__srefill_r>
    19c8:	103ff126 	beq	r2,zero,1990 <_fread_r+0x74>
    19cc:	d9400017 	ldw	r5,0(sp)
    19d0:	bc89c83a 	sub	r4,r23,r18
    19d4:	000fb740 	call	fb74 <__udivsi3>
    19d8:	1039883a 	mov	fp,r2
    19dc:	e005883a 	mov	r2,fp
    19e0:	dfc00a17 	ldw	ra,40(sp)
    19e4:	df000917 	ldw	fp,36(sp)
    19e8:	ddc00817 	ldw	r23,32(sp)
    19ec:	dd800717 	ldw	r22,28(sp)
    19f0:	dd400617 	ldw	r21,24(sp)
    19f4:	dd000517 	ldw	r20,20(sp)
    19f8:	dcc00417 	ldw	r19,16(sp)
    19fc:	dc800317 	ldw	r18,12(sp)
    1a00:	dc400217 	ldw	r17,8(sp)
    1a04:	dc000117 	ldw	r16,4(sp)
    1a08:	dec00b04 	addi	sp,sp,44
    1a0c:	f800283a 	ret
    1a10:	b825883a 	mov	r18,r23
    1a14:	8dc03436 	bltu	r17,r23,1ae8 <_fread_r+0x1cc>
    1a18:	99400017 	ldw	r5,0(r19)
    1a1c:	a009883a 	mov	r4,r20
    1a20:	900d883a 	mov	r6,r18
    1a24:	0002f540 	call	2f54 <memcpy>
    1a28:	9c000017 	ldw	r16,0(r19)
    1a2c:	98800117 	ldw	r2,4(r19)
    1a30:	99400c17 	ldw	r5,48(r19)
    1a34:	84a1883a 	add	r16,r16,r18
    1a38:	14a3c83a 	sub	r17,r2,r18
    1a3c:	a4ab883a 	add	r21,r20,r18
    1a40:	9c400115 	stw	r17,4(r19)
    1a44:	9c000015 	stw	r16,0(r19)
    1a48:	bca9c83a 	sub	r20,r23,r18
    1a4c:	28000826 	beq	r5,zero,1a70 <_fread_r+0x154>
    1a50:	a03fe226 	beq	r20,zero,19dc <_fread_r+0xc0>
    1a54:	98801004 	addi	r2,r19,64
    1a58:	28800326 	beq	r5,r2,1a68 <_fread_r+0x14c>
    1a5c:	b009883a 	mov	r4,r22
    1a60:	0001c840 	call	1c84 <_free_r>
    1a64:	9c000017 	ldw	r16,0(r19)
    1a68:	98000c15 	stw	zero,48(r19)
    1a6c:	00000106 	br	1a74 <_fread_r+0x158>
    1a70:	a03fda26 	beq	r20,zero,19dc <_fread_r+0xc0>
    1a74:	9c800417 	ldw	r18,16(r19)
    1a78:	9c400517 	ldw	r17,20(r19)
    1a7c:	9d400015 	stw	r21,0(r19)
    1a80:	9d400415 	stw	r21,16(r19)
    1a84:	9d000515 	stw	r20,20(r19)
    1a88:	b009883a 	mov	r4,r22
    1a8c:	980b883a 	mov	r5,r19
    1a90:	00032300 	call	3230 <__srefill_r>
    1a94:	98c00117 	ldw	r3,4(r19)
    1a98:	9c800415 	stw	r18,16(r19)
    1a9c:	9c400515 	stw	r17,20(r19)
    1aa0:	a8eb883a 	add	r21,r21,r3
    1aa4:	9c000015 	stw	r16,0(r19)
    1aa8:	a0e9c83a 	sub	r20,r20,r3
    1aac:	98000115 	stw	zero,4(r19)
    1ab0:	103fef26 	beq	r2,zero,1a70 <_fread_r+0x154>
    1ab4:	d9400017 	ldw	r5,0(sp)
    1ab8:	bd09c83a 	sub	r4,r23,r20
    1abc:	000fb740 	call	fb74 <__udivsi3>
    1ac0:	1039883a 	mov	fp,r2
    1ac4:	003fc506 	br	19dc <_fread_r+0xc0>
    1ac8:	0039883a 	mov	fp,zero
    1acc:	003fc306 	br	19dc <_fread_r+0xc0>
    1ad0:	00015b40 	call	15b4 <__sinit>
    1ad4:	9c400117 	ldw	r17,4(r19)
    1ad8:	883fa70e 	bge	r17,zero,1978 <_fread_r+0x5c>
    1adc:	0023883a 	mov	r17,zero
    1ae0:	98000115 	stw	zero,4(r19)
    1ae4:	003fa406 	br	1978 <_fread_r+0x5c>
    1ae8:	8825883a 	mov	r18,r17
    1aec:	003fca06 	br	1a18 <_fread_r+0xfc>
    1af0:	99400017 	ldw	r5,0(r19)
    1af4:	900d883a 	mov	r6,r18
    1af8:	0002f540 	call	2f54 <memcpy>
    1afc:	98c00117 	ldw	r3,4(r19)
    1b00:	98800017 	ldw	r2,0(r19)
    1b04:	1c87c83a 	sub	r3,r3,r18
    1b08:	1485883a 	add	r2,r2,r18
    1b0c:	98800015 	stw	r2,0(r19)
    1b10:	98c00115 	stw	r3,4(r19)
    1b14:	003fb106 	br	19dc <_fread_r+0xc0>

00001b18 <fread>:
    1b18:	00800074 	movhi	r2,1
    1b1c:	10970104 	addi	r2,r2,23556
    1b20:	2017883a 	mov	r11,r4
    1b24:	11000017 	ldw	r4,0(r2)
    1b28:	defffe04 	addi	sp,sp,-8
    1b2c:	3013883a 	mov	r9,r6
    1b30:	2805883a 	mov	r2,r5
    1b34:	d9c00015 	stw	r7,0(sp)
    1b38:	580b883a 	mov	r5,r11
    1b3c:	100d883a 	mov	r6,r2
    1b40:	480f883a 	mov	r7,r9
    1b44:	dfc00115 	stw	ra,4(sp)
    1b48:	000191c0 	call	191c <_fread_r>
    1b4c:	dfc00117 	ldw	ra,4(sp)
    1b50:	dec00204 	addi	sp,sp,8
    1b54:	f800283a 	ret

00001b58 <_malloc_trim_r>:
    1b58:	defffb04 	addi	sp,sp,-20
    1b5c:	dcc00315 	stw	r19,12(sp)
    1b60:	04c00074 	movhi	r19,1
    1b64:	9cd16604 	addi	r19,r19,17816
    1b68:	dc800215 	stw	r18,8(sp)
    1b6c:	dc400115 	stw	r17,4(sp)
    1b70:	dc000015 	stw	r16,0(sp)
    1b74:	2823883a 	mov	r17,r5
    1b78:	2025883a 	mov	r18,r4
    1b7c:	dfc00415 	stw	ra,16(sp)
    1b80:	0010a980 	call	10a98 <__malloc_lock>
    1b84:	98800217 	ldw	r2,8(r19)
    1b88:	9009883a 	mov	r4,r18
    1b8c:	000b883a 	mov	r5,zero
    1b90:	10c00117 	ldw	r3,4(r2)
    1b94:	00bfff04 	movi	r2,-4
    1b98:	18a0703a 	and	r16,r3,r2
    1b9c:	8463c83a 	sub	r17,r16,r17
    1ba0:	8c43fbc4 	addi	r17,r17,4079
    1ba4:	8822d33a 	srli	r17,r17,12
    1ba8:	0083ffc4 	movi	r2,4095
    1bac:	8c7fffc4 	addi	r17,r17,-1
    1bb0:	8822933a 	slli	r17,r17,12
    1bb4:	1440060e 	bge	r2,r17,1bd0 <_malloc_trim_r+0x78>
    1bb8:	00034100 	call	3410 <_sbrk_r>
    1bbc:	98c00217 	ldw	r3,8(r19)
    1bc0:	9009883a 	mov	r4,r18
    1bc4:	044bc83a 	sub	r5,zero,r17
    1bc8:	80c7883a 	add	r3,r16,r3
    1bcc:	10c00926 	beq	r2,r3,1bf4 <_malloc_trim_r+0x9c>
    1bd0:	0010ab80 	call	10ab8 <__malloc_unlock>
    1bd4:	0005883a 	mov	r2,zero
    1bd8:	dfc00417 	ldw	ra,16(sp)
    1bdc:	dcc00317 	ldw	r19,12(sp)
    1be0:	dc800217 	ldw	r18,8(sp)
    1be4:	dc400117 	ldw	r17,4(sp)
    1be8:	dc000017 	ldw	r16,0(sp)
    1bec:	dec00504 	addi	sp,sp,20
    1bf0:	f800283a 	ret
    1bf4:	9009883a 	mov	r4,r18
    1bf8:	00034100 	call	3410 <_sbrk_r>
    1bfc:	844dc83a 	sub	r6,r16,r17
    1c00:	00ffffc4 	movi	r3,-1
    1c04:	9009883a 	mov	r4,r18
    1c08:	000b883a 	mov	r5,zero
    1c0c:	01c00074 	movhi	r7,1
    1c10:	39ddf204 	addi	r7,r7,30664
    1c14:	31800054 	ori	r6,r6,1
    1c18:	10c00926 	beq	r2,r3,1c40 <_malloc_trim_r+0xe8>
    1c1c:	38800017 	ldw	r2,0(r7)
    1c20:	98c00217 	ldw	r3,8(r19)
    1c24:	9009883a 	mov	r4,r18
    1c28:	1445c83a 	sub	r2,r2,r17
    1c2c:	38800015 	stw	r2,0(r7)
    1c30:	19800115 	stw	r6,4(r3)
    1c34:	0010ab80 	call	10ab8 <__malloc_unlock>
    1c38:	00800044 	movi	r2,1
    1c3c:	003fe606 	br	1bd8 <_malloc_trim_r+0x80>
    1c40:	00034100 	call	3410 <_sbrk_r>
    1c44:	99800217 	ldw	r6,8(r19)
    1c48:	100f883a 	mov	r7,r2
    1c4c:	9009883a 	mov	r4,r18
    1c50:	1187c83a 	sub	r3,r2,r6
    1c54:	008003c4 	movi	r2,15
    1c58:	19400054 	ori	r5,r3,1
    1c5c:	10ffdc0e 	bge	r2,r3,1bd0 <_malloc_trim_r+0x78>
    1c60:	00800074 	movhi	r2,1
    1c64:	10970404 	addi	r2,r2,23568
    1c68:	10c00017 	ldw	r3,0(r2)
    1c6c:	00800074 	movhi	r2,1
    1c70:	109df204 	addi	r2,r2,30664
    1c74:	31400115 	stw	r5,4(r6)
    1c78:	38c7c83a 	sub	r3,r7,r3
    1c7c:	10c00015 	stw	r3,0(r2)
    1c80:	003fd306 	br	1bd0 <_malloc_trim_r+0x78>

00001c84 <_free_r>:
    1c84:	defffd04 	addi	sp,sp,-12
    1c88:	dc400115 	stw	r17,4(sp)
    1c8c:	dc000015 	stw	r16,0(sp)
    1c90:	dfc00215 	stw	ra,8(sp)
    1c94:	2821883a 	mov	r16,r5
    1c98:	2023883a 	mov	r17,r4
    1c9c:	28005a26 	beq	r5,zero,1e08 <_free_r+0x184>
    1ca0:	0010a980 	call	10a98 <__malloc_lock>
    1ca4:	823ffe04 	addi	r8,r16,-8
    1ca8:	41400117 	ldw	r5,4(r8)
    1cac:	00bfff84 	movi	r2,-2
    1cb0:	02800074 	movhi	r10,1
    1cb4:	52916604 	addi	r10,r10,17816
    1cb8:	288e703a 	and	r7,r5,r2
    1cbc:	41cd883a 	add	r6,r8,r7
    1cc0:	30c00117 	ldw	r3,4(r6)
    1cc4:	51000217 	ldw	r4,8(r10)
    1cc8:	00bfff04 	movi	r2,-4
    1ccc:	1892703a 	and	r9,r3,r2
    1cd0:	5017883a 	mov	r11,r10
    1cd4:	31006726 	beq	r6,r4,1e74 <_free_r+0x1f0>
    1cd8:	2880004c 	andi	r2,r5,1
    1cdc:	1005003a 	cmpeq	r2,r2,zero
    1ce0:	32400115 	stw	r9,4(r6)
    1ce4:	10001a1e 	bne	r2,zero,1d50 <_free_r+0xcc>
    1ce8:	000b883a 	mov	r5,zero
    1cec:	3247883a 	add	r3,r6,r9
    1cf0:	18800117 	ldw	r2,4(r3)
    1cf4:	1080004c 	andi	r2,r2,1
    1cf8:	1000231e 	bne	r2,zero,1d88 <_free_r+0x104>
    1cfc:	280ac03a 	cmpne	r5,r5,zero
    1d00:	3a4f883a 	add	r7,r7,r9
    1d04:	2800451e 	bne	r5,zero,1e1c <_free_r+0x198>
    1d08:	31000217 	ldw	r4,8(r6)
    1d0c:	00800074 	movhi	r2,1
    1d10:	10916804 	addi	r2,r2,17824
    1d14:	20807b26 	beq	r4,r2,1f04 <_free_r+0x280>
    1d18:	30800317 	ldw	r2,12(r6)
    1d1c:	3a07883a 	add	r3,r7,r8
    1d20:	19c00015 	stw	r7,0(r3)
    1d24:	11000215 	stw	r4,8(r2)
    1d28:	20800315 	stw	r2,12(r4)
    1d2c:	38800054 	ori	r2,r7,1
    1d30:	40800115 	stw	r2,4(r8)
    1d34:	28001a26 	beq	r5,zero,1da0 <_free_r+0x11c>
    1d38:	8809883a 	mov	r4,r17
    1d3c:	dfc00217 	ldw	ra,8(sp)
    1d40:	dc400117 	ldw	r17,4(sp)
    1d44:	dc000017 	ldw	r16,0(sp)
    1d48:	dec00304 	addi	sp,sp,12
    1d4c:	0010ab81 	jmpi	10ab8 <__malloc_unlock>
    1d50:	80bffe17 	ldw	r2,-8(r16)
    1d54:	50c00204 	addi	r3,r10,8
    1d58:	4091c83a 	sub	r8,r8,r2
    1d5c:	41000217 	ldw	r4,8(r8)
    1d60:	388f883a 	add	r7,r7,r2
    1d64:	20c06126 	beq	r4,r3,1eec <_free_r+0x268>
    1d68:	40800317 	ldw	r2,12(r8)
    1d6c:	3247883a 	add	r3,r6,r9
    1d70:	000b883a 	mov	r5,zero
    1d74:	11000215 	stw	r4,8(r2)
    1d78:	20800315 	stw	r2,12(r4)
    1d7c:	18800117 	ldw	r2,4(r3)
    1d80:	1080004c 	andi	r2,r2,1
    1d84:	103fdd26 	beq	r2,zero,1cfc <_free_r+0x78>
    1d88:	38800054 	ori	r2,r7,1
    1d8c:	3a07883a 	add	r3,r7,r8
    1d90:	280ac03a 	cmpne	r5,r5,zero
    1d94:	40800115 	stw	r2,4(r8)
    1d98:	19c00015 	stw	r7,0(r3)
    1d9c:	283fe61e 	bne	r5,zero,1d38 <_free_r+0xb4>
    1da0:	00807fc4 	movi	r2,511
    1da4:	11c01f2e 	bgeu	r2,r7,1e24 <_free_r+0x1a0>
    1da8:	3806d27a 	srli	r3,r7,9
    1dac:	1800481e 	bne	r3,zero,1ed0 <_free_r+0x24c>
    1db0:	3804d0fa 	srli	r2,r7,3
    1db4:	100690fa 	slli	r3,r2,3
    1db8:	1acd883a 	add	r6,r3,r11
    1dbc:	31400217 	ldw	r5,8(r6)
    1dc0:	31405926 	beq	r6,r5,1f28 <_free_r+0x2a4>
    1dc4:	28800117 	ldw	r2,4(r5)
    1dc8:	00ffff04 	movi	r3,-4
    1dcc:	10c4703a 	and	r2,r2,r3
    1dd0:	3880022e 	bgeu	r7,r2,1ddc <_free_r+0x158>
    1dd4:	29400217 	ldw	r5,8(r5)
    1dd8:	317ffa1e 	bne	r6,r5,1dc4 <_free_r+0x140>
    1ddc:	29800317 	ldw	r6,12(r5)
    1de0:	41800315 	stw	r6,12(r8)
    1de4:	41400215 	stw	r5,8(r8)
    1de8:	8809883a 	mov	r4,r17
    1dec:	2a000315 	stw	r8,12(r5)
    1df0:	32000215 	stw	r8,8(r6)
    1df4:	dfc00217 	ldw	ra,8(sp)
    1df8:	dc400117 	ldw	r17,4(sp)
    1dfc:	dc000017 	ldw	r16,0(sp)
    1e00:	dec00304 	addi	sp,sp,12
    1e04:	0010ab81 	jmpi	10ab8 <__malloc_unlock>
    1e08:	dfc00217 	ldw	ra,8(sp)
    1e0c:	dc400117 	ldw	r17,4(sp)
    1e10:	dc000017 	ldw	r16,0(sp)
    1e14:	dec00304 	addi	sp,sp,12
    1e18:	f800283a 	ret
    1e1c:	31000217 	ldw	r4,8(r6)
    1e20:	003fbd06 	br	1d18 <_free_r+0x94>
    1e24:	3806d0fa 	srli	r3,r7,3
    1e28:	00800044 	movi	r2,1
    1e2c:	51400117 	ldw	r5,4(r10)
    1e30:	180890fa 	slli	r4,r3,3
    1e34:	1807d0ba 	srai	r3,r3,2
    1e38:	22c9883a 	add	r4,r4,r11
    1e3c:	21800217 	ldw	r6,8(r4)
    1e40:	10c4983a 	sll	r2,r2,r3
    1e44:	41000315 	stw	r4,12(r8)
    1e48:	41800215 	stw	r6,8(r8)
    1e4c:	288ab03a 	or	r5,r5,r2
    1e50:	22000215 	stw	r8,8(r4)
    1e54:	8809883a 	mov	r4,r17
    1e58:	51400115 	stw	r5,4(r10)
    1e5c:	32000315 	stw	r8,12(r6)
    1e60:	dfc00217 	ldw	ra,8(sp)
    1e64:	dc400117 	ldw	r17,4(sp)
    1e68:	dc000017 	ldw	r16,0(sp)
    1e6c:	dec00304 	addi	sp,sp,12
    1e70:	0010ab81 	jmpi	10ab8 <__malloc_unlock>
    1e74:	2880004c 	andi	r2,r5,1
    1e78:	3a4d883a 	add	r6,r7,r9
    1e7c:	1000071e 	bne	r2,zero,1e9c <_free_r+0x218>
    1e80:	80bffe17 	ldw	r2,-8(r16)
    1e84:	4091c83a 	sub	r8,r8,r2
    1e88:	41000317 	ldw	r4,12(r8)
    1e8c:	40c00217 	ldw	r3,8(r8)
    1e90:	308d883a 	add	r6,r6,r2
    1e94:	20c00215 	stw	r3,8(r4)
    1e98:	19000315 	stw	r4,12(r3)
    1e9c:	00800074 	movhi	r2,1
    1ea0:	10970304 	addi	r2,r2,23564
    1ea4:	11000017 	ldw	r4,0(r2)
    1ea8:	30c00054 	ori	r3,r6,1
    1eac:	52000215 	stw	r8,8(r10)
    1eb0:	40c00115 	stw	r3,4(r8)
    1eb4:	313fa036 	bltu	r6,r4,1d38 <_free_r+0xb4>
    1eb8:	00800074 	movhi	r2,1
    1ebc:	109de604 	addi	r2,r2,30616
    1ec0:	11400017 	ldw	r5,0(r2)
    1ec4:	8809883a 	mov	r4,r17
    1ec8:	0001b580 	call	1b58 <_malloc_trim_r>
    1ecc:	003f9a06 	br	1d38 <_free_r+0xb4>
    1ed0:	00800104 	movi	r2,4
    1ed4:	10c0072e 	bgeu	r2,r3,1ef4 <_free_r+0x270>
    1ed8:	00800504 	movi	r2,20
    1edc:	10c01936 	bltu	r2,r3,1f44 <_free_r+0x2c0>
    1ee0:	188016c4 	addi	r2,r3,91
    1ee4:	100690fa 	slli	r3,r2,3
    1ee8:	003fb306 	br	1db8 <_free_r+0x134>
    1eec:	01400044 	movi	r5,1
    1ef0:	003f7e06 	br	1cec <_free_r+0x68>
    1ef4:	3804d1ba 	srli	r2,r7,6
    1ef8:	10800e04 	addi	r2,r2,56
    1efc:	100690fa 	slli	r3,r2,3
    1f00:	003fad06 	br	1db8 <_free_r+0x134>
    1f04:	22000315 	stw	r8,12(r4)
    1f08:	22000215 	stw	r8,8(r4)
    1f0c:	3a05883a 	add	r2,r7,r8
    1f10:	38c00054 	ori	r3,r7,1
    1f14:	11c00015 	stw	r7,0(r2)
    1f18:	41000215 	stw	r4,8(r8)
    1f1c:	40c00115 	stw	r3,4(r8)
    1f20:	41000315 	stw	r4,12(r8)
    1f24:	003f8406 	br	1d38 <_free_r+0xb4>
    1f28:	1005d0ba 	srai	r2,r2,2
    1f2c:	00c00044 	movi	r3,1
    1f30:	51000117 	ldw	r4,4(r10)
    1f34:	1886983a 	sll	r3,r3,r2
    1f38:	20c8b03a 	or	r4,r4,r3
    1f3c:	51000115 	stw	r4,4(r10)
    1f40:	003fa706 	br	1de0 <_free_r+0x15c>
    1f44:	00801504 	movi	r2,84
    1f48:	10c00436 	bltu	r2,r3,1f5c <_free_r+0x2d8>
    1f4c:	3804d33a 	srli	r2,r7,12
    1f50:	10801b84 	addi	r2,r2,110
    1f54:	100690fa 	slli	r3,r2,3
    1f58:	003f9706 	br	1db8 <_free_r+0x134>
    1f5c:	00805504 	movi	r2,340
    1f60:	10c00436 	bltu	r2,r3,1f74 <_free_r+0x2f0>
    1f64:	3804d3fa 	srli	r2,r7,15
    1f68:	10801dc4 	addi	r2,r2,119
    1f6c:	100690fa 	slli	r3,r2,3
    1f70:	003f9106 	br	1db8 <_free_r+0x134>
    1f74:	00815504 	movi	r2,1364
    1f78:	10c0032e 	bgeu	r2,r3,1f88 <_free_r+0x304>
    1f7c:	00801f84 	movi	r2,126
    1f80:	00c0fc04 	movi	r3,1008
    1f84:	003f8c06 	br	1db8 <_free_r+0x134>
    1f88:	3804d4ba 	srli	r2,r7,18
    1f8c:	10801f04 	addi	r2,r2,124
    1f90:	100690fa 	slli	r3,r2,3
    1f94:	003f8806 	br	1db8 <_free_r+0x134>

00001f98 <_fscanf_r>:
    1f98:	defffd04 	addi	sp,sp,-12
    1f9c:	dfc00115 	stw	ra,4(sp)
    1fa0:	d9c00215 	stw	r7,8(sp)
    1fa4:	d8800204 	addi	r2,sp,8
    1fa8:	100f883a 	mov	r7,r2
    1fac:	d8800015 	stw	r2,0(sp)
    1fb0:	00055700 	call	5570 <__svfscanf_r>
    1fb4:	dfc00117 	ldw	ra,4(sp)
    1fb8:	dec00304 	addi	sp,sp,12
    1fbc:	f800283a 	ret

00001fc0 <fscanf>:
    1fc0:	defffc04 	addi	sp,sp,-16
    1fc4:	2007883a 	mov	r3,r4
    1fc8:	dfc00115 	stw	ra,4(sp)
    1fcc:	d9800215 	stw	r6,8(sp)
    1fd0:	d9c00315 	stw	r7,12(sp)
    1fd4:	01800074 	movhi	r6,1
    1fd8:	31970104 	addi	r6,r6,23556
    1fdc:	31000017 	ldw	r4,0(r6)
    1fe0:	d8800204 	addi	r2,sp,8
    1fe4:	280d883a 	mov	r6,r5
    1fe8:	100f883a 	mov	r7,r2
    1fec:	180b883a 	mov	r5,r3
    1ff0:	d8800015 	stw	r2,0(sp)
    1ff4:	00055700 	call	5570 <__svfscanf_r>
    1ff8:	dfc00117 	ldw	ra,4(sp)
    1ffc:	dec00404 	addi	sp,sp,16
    2000:	f800283a 	ret

00002004 <_fseek_r>:
    2004:	deffe804 	addi	sp,sp,-96
    2008:	dd801515 	stw	r22,84(sp)
    200c:	dcc01215 	stw	r19,72(sp)
    2010:	dc801115 	stw	r18,68(sp)
    2014:	dc000f15 	stw	r16,60(sp)
    2018:	dfc01715 	stw	ra,92(sp)
    201c:	ddc01615 	stw	r23,88(sp)
    2020:	dd401415 	stw	r21,80(sp)
    2024:	dd001315 	stw	r20,76(sp)
    2028:	dc401015 	stw	r17,64(sp)
    202c:	2025883a 	mov	r18,r4
    2030:	2821883a 	mov	r16,r5
    2034:	302d883a 	mov	r22,r6
    2038:	3827883a 	mov	r19,r7
    203c:	20000226 	beq	r4,zero,2048 <_fseek_r+0x44>
    2040:	20800e17 	ldw	r2,56(r4)
    2044:	10007826 	beq	r2,zero,2228 <_fseek_r+0x224>
    2048:	8080030b 	ldhu	r2,12(r16)
    204c:	00c04204 	movi	r3,264
    2050:	1080420c 	andi	r2,r2,264
    2054:	10c07926 	beq	r2,r3,223c <_fseek_r+0x238>
    2058:	85400a17 	ldw	r21,40(r16)
    205c:	a800ea26 	beq	r21,zero,2408 <_fseek_r+0x404>
    2060:	00800044 	movi	r2,1
    2064:	98805f26 	beq	r19,r2,21e4 <_fseek_r+0x1e0>
    2068:	00800084 	movi	r2,2
    206c:	98801026 	beq	r19,r2,20b0 <_fseek_r+0xac>
    2070:	98000f26 	beq	r19,zero,20b0 <_fseek_r+0xac>
    2074:	00800584 	movi	r2,22
    2078:	013fffc4 	movi	r4,-1
    207c:	90800015 	stw	r2,0(r18)
    2080:	2005883a 	mov	r2,r4
    2084:	dfc01717 	ldw	ra,92(sp)
    2088:	ddc01617 	ldw	r23,88(sp)
    208c:	dd801517 	ldw	r22,84(sp)
    2090:	dd401417 	ldw	r21,80(sp)
    2094:	dd001317 	ldw	r20,76(sp)
    2098:	dcc01217 	ldw	r19,72(sp)
    209c:	dc801117 	ldw	r18,68(sp)
    20a0:	dc401017 	ldw	r17,64(sp)
    20a4:	dc000f17 	ldw	r16,60(sp)
    20a8:	dec01804 	addi	sp,sp,96
    20ac:	f800283a 	ret
    20b0:	81800417 	ldw	r6,16(r16)
    20b4:	0023883a 	mov	r17,zero
    20b8:	002f883a 	mov	r23,zero
    20bc:	3000a626 	beq	r6,zero,2358 <_fseek_r+0x354>
    20c0:	8100030b 	ldhu	r4,12(r16)
    20c4:	2082068c 	andi	r2,r4,2074
    20c8:	1000081e 	bne	r2,zero,20ec <_fseek_r+0xe8>
    20cc:	2081000c 	andi	r2,r4,1024
    20d0:	10001b1e 	bne	r2,zero,2140 <_fseek_r+0x13c>
    20d4:	00800034 	movhi	r2,0
    20d8:	108d2204 	addi	r2,r2,13448
    20dc:	a8800926 	beq	r21,r2,2104 <_fseek_r+0x100>
    20e0:	8080030b 	ldhu	r2,12(r16)
    20e4:	10820014 	ori	r2,r2,2048
    20e8:	8080030d 	sth	r2,12(r16)
    20ec:	9009883a 	mov	r4,r18
    20f0:	800b883a 	mov	r5,r16
    20f4:	000131c0 	call	131c <_fflush_r>
    20f8:	1000a326 	beq	r2,zero,2388 <_fseek_r+0x384>
    20fc:	013fffc4 	movi	r4,-1
    2100:	003fdf06 	br	2080 <_fseek_r+0x7c>
    2104:	8140038f 	ldh	r5,14(r16)
    2108:	283ff516 	blt	r5,zero,20e0 <_fseek_r+0xdc>
    210c:	9009883a 	mov	r4,r18
    2110:	d80d883a 	mov	r6,sp
    2114:	00024640 	call	2464 <_fstat_r>
    2118:	103ff11e 	bne	r2,zero,20e0 <_fseek_r+0xdc>
    211c:	d8800117 	ldw	r2,4(sp)
    2120:	00e00014 	movui	r3,32768
    2124:	10bc000c 	andi	r2,r2,61440
    2128:	10ffed1e 	bne	r2,r3,20e0 <_fseek_r+0xdc>
    212c:	80c0030b 	ldhu	r3,12(r16)
    2130:	00810004 	movi	r2,1024
    2134:	80801315 	stw	r2,76(r16)
    2138:	1886b03a 	or	r3,r3,r2
    213c:	80c0030d 	sth	r3,12(r16)
    2140:	9800701e 	bne	r19,zero,2304 <_fseek_r+0x300>
    2144:	b029883a 	mov	r20,r22
    2148:	b804c03a 	cmpne	r2,r23,zero
    214c:	10003f1e 	bne	r2,zero,224c <_fseek_r+0x248>
    2150:	8100030b 	ldhu	r4,12(r16)
    2154:	2084000c 	andi	r2,r4,4096
    2158:	1000a126 	beq	r2,zero,23e0 <_fseek_r+0x3dc>
    215c:	81801417 	ldw	r6,80(r16)
    2160:	80c00117 	ldw	r3,4(r16)
    2164:	81400c17 	ldw	r5,48(r16)
    2168:	30e3c83a 	sub	r17,r6,r3
    216c:	28008026 	beq	r5,zero,2370 <_fseek_r+0x36c>
    2170:	81c00f17 	ldw	r7,60(r16)
    2174:	89e3c83a 	sub	r17,r17,r7
    2178:	80800e17 	ldw	r2,56(r16)
    217c:	81800417 	ldw	r6,16(r16)
    2180:	88c7883a 	add	r3,r17,r3
    2184:	1185c83a 	sub	r2,r2,r6
    2188:	11cf883a 	add	r7,r2,r7
    218c:	1887c83a 	sub	r3,r3,r2
    2190:	2088000c 	andi	r2,r4,8192
    2194:	10003e1e 	bne	r2,zero,2290 <_fseek_r+0x28c>
    2198:	a0c03d16 	blt	r20,r3,2290 <_fseek_r+0x28c>
    219c:	38c5883a 	add	r2,r7,r3
    21a0:	a0803b2e 	bgeu	r20,r2,2290 <_fseek_r+0x28c>
    21a4:	a0c5c83a 	sub	r2,r20,r3
    21a8:	3887c83a 	sub	r3,r7,r2
    21ac:	3085883a 	add	r2,r6,r2
    21b0:	80800015 	stw	r2,0(r16)
    21b4:	80c00115 	stw	r3,4(r16)
    21b8:	28000526 	beq	r5,zero,21d0 <_fseek_r+0x1cc>
    21bc:	80801004 	addi	r2,r16,64
    21c0:	28800226 	beq	r5,r2,21cc <_fseek_r+0x1c8>
    21c4:	9009883a 	mov	r4,r18
    21c8:	0001c840 	call	1c84 <_free_r>
    21cc:	80000c15 	stw	zero,48(r16)
    21d0:	8080030b 	ldhu	r2,12(r16)
    21d4:	0009883a 	mov	r4,zero
    21d8:	10bff7cc 	andi	r2,r2,65503
    21dc:	8080030d 	sth	r2,12(r16)
    21e0:	003fa706 	br	2080 <_fseek_r+0x7c>
    21e4:	9009883a 	mov	r4,r18
    21e8:	800b883a 	mov	r5,r16
    21ec:	000131c0 	call	131c <_fflush_r>
    21f0:	8100030b 	ldhu	r4,12(r16)
    21f4:	2084000c 	andi	r2,r4,4096
    21f8:	10008726 	beq	r2,zero,2418 <_fseek_r+0x414>
    21fc:	84401417 	ldw	r17,80(r16)
    2200:	2080010c 	andi	r2,r4,4
    2204:	1000171e 	bne	r2,zero,2264 <_fseek_r+0x260>
    2208:	2080020c 	andi	r2,r4,8
    220c:	10003b26 	beq	r2,zero,22fc <_fseek_r+0x2f8>
    2210:	80800017 	ldw	r2,0(r16)
    2214:	10003926 	beq	r2,zero,22fc <_fseek_r+0x2f8>
    2218:	81800417 	ldw	r6,16(r16)
    221c:	1185c83a 	sub	r2,r2,r6
    2220:	88a3883a 	add	r17,r17,r2
    2224:	00001606 	br	2280 <_fseek_r+0x27c>
    2228:	00015b40 	call	15b4 <__sinit>
    222c:	8080030b 	ldhu	r2,12(r16)
    2230:	00c04204 	movi	r3,264
    2234:	1080420c 	andi	r2,r2,264
    2238:	10ff871e 	bne	r2,r3,2058 <_fseek_r+0x54>
    223c:	9009883a 	mov	r4,r18
    2240:	800b883a 	mov	r5,r16
    2244:	000131c0 	call	131c <_fflush_r>
    2248:	003f8306 	br	2058 <_fseek_r+0x54>
    224c:	81400c17 	ldw	r5,48(r16)
    2250:	28004526 	beq	r5,zero,2368 <_fseek_r+0x364>
    2254:	8100030b 	ldhu	r4,12(r16)
    2258:	80c00117 	ldw	r3,4(r16)
    225c:	81c00f17 	ldw	r7,60(r16)
    2260:	003fc506 	br	2178 <_fseek_r+0x174>
    2264:	80c00117 	ldw	r3,4(r16)
    2268:	80800c17 	ldw	r2,48(r16)
    226c:	88e3c83a 	sub	r17,r17,r3
    2270:	10002226 	beq	r2,zero,22fc <_fseek_r+0x2f8>
    2274:	81c00f17 	ldw	r7,60(r16)
    2278:	81800417 	ldw	r6,16(r16)
    227c:	89e3c83a 	sub	r17,r17,r7
    2280:	b46d883a 	add	r22,r22,r17
    2284:	0027883a 	mov	r19,zero
    2288:	05c00044 	movi	r23,1
    228c:	003f8b06 	br	20bc <_fseek_r+0xb8>
    2290:	80801317 	ldw	r2,76(r16)
    2294:	81400717 	ldw	r5,28(r16)
    2298:	9009883a 	mov	r4,r18
    229c:	0085c83a 	sub	r2,zero,r2
    22a0:	a0a2703a 	and	r17,r20,r2
    22a4:	880d883a 	mov	r6,r17
    22a8:	000f883a 	mov	r7,zero
    22ac:	a83ee83a 	callr	r21
    22b0:	00ffffc4 	movi	r3,-1
    22b4:	10ff8d26 	beq	r2,r3,20ec <_fseek_r+0xe8>
    22b8:	80800417 	ldw	r2,16(r16)
    22bc:	81400c17 	ldw	r5,48(r16)
    22c0:	80000115 	stw	zero,4(r16)
    22c4:	80800015 	stw	r2,0(r16)
    22c8:	28000526 	beq	r5,zero,22e0 <_fseek_r+0x2dc>
    22cc:	80801004 	addi	r2,r16,64
    22d0:	28800226 	beq	r5,r2,22dc <_fseek_r+0x2d8>
    22d4:	9009883a 	mov	r4,r18
    22d8:	0001c840 	call	1c84 <_free_r>
    22dc:	80000c15 	stw	zero,48(r16)
    22e0:	8080030b 	ldhu	r2,12(r16)
    22e4:	a463c83a 	sub	r17,r20,r17
    22e8:	10bff7cc 	andi	r2,r2,65503
    22ec:	8080030d 	sth	r2,12(r16)
    22f0:	88000c1e 	bne	r17,zero,2324 <_fseek_r+0x320>
    22f4:	0009883a 	mov	r4,zero
    22f8:	003f6106 	br	2080 <_fseek_r+0x7c>
    22fc:	81800417 	ldw	r6,16(r16)
    2300:	003fdf06 	br	2280 <_fseek_r+0x27c>
    2304:	8140038f 	ldh	r5,14(r16)
    2308:	9009883a 	mov	r4,r18
    230c:	d80d883a 	mov	r6,sp
    2310:	00024640 	call	2464 <_fstat_r>
    2314:	103f751e 	bne	r2,zero,20ec <_fseek_r+0xe8>
    2318:	d8800417 	ldw	r2,16(sp)
    231c:	b0a9883a 	add	r20,r22,r2
    2320:	003f8906 	br	2148 <_fseek_r+0x144>
    2324:	9009883a 	mov	r4,r18
    2328:	800b883a 	mov	r5,r16
    232c:	00032300 	call	3230 <__srefill_r>
    2330:	103f6e1e 	bne	r2,zero,20ec <_fseek_r+0xe8>
    2334:	80c00117 	ldw	r3,4(r16)
    2338:	1c7f6c36 	bltu	r3,r17,20ec <_fseek_r+0xe8>
    233c:	80800017 	ldw	r2,0(r16)
    2340:	1c47c83a 	sub	r3,r3,r17
    2344:	0009883a 	mov	r4,zero
    2348:	1445883a 	add	r2,r2,r17
    234c:	80c00115 	stw	r3,4(r16)
    2350:	80800015 	stw	r2,0(r16)
    2354:	003f4a06 	br	2080 <_fseek_r+0x7c>
    2358:	9009883a 	mov	r4,r18
    235c:	800b883a 	mov	r5,r16
    2360:	00026580 	call	2658 <__smakebuf_r>
    2364:	003f5606 	br	20c0 <_fseek_r+0xbc>
    2368:	8100030b 	ldhu	r4,12(r16)
    236c:	80c00117 	ldw	r3,4(r16)
    2370:	80800017 	ldw	r2,0(r16)
    2374:	81800417 	ldw	r6,16(r16)
    2378:	1185c83a 	sub	r2,r2,r6
    237c:	10cf883a 	add	r7,r2,r3
    2380:	8887c83a 	sub	r3,r17,r2
    2384:	003f8206 	br	2190 <_fseek_r+0x18c>
    2388:	81400717 	ldw	r5,28(r16)
    238c:	b00d883a 	mov	r6,r22
    2390:	980f883a 	mov	r7,r19
    2394:	9009883a 	mov	r4,r18
    2398:	a83ee83a 	callr	r21
    239c:	00ffffc4 	movi	r3,-1
    23a0:	10ff5626 	beq	r2,r3,20fc <_fseek_r+0xf8>
    23a4:	81400c17 	ldw	r5,48(r16)
    23a8:	28000526 	beq	r5,zero,23c0 <_fseek_r+0x3bc>
    23ac:	80801004 	addi	r2,r16,64
    23b0:	28800226 	beq	r5,r2,23bc <_fseek_r+0x3b8>
    23b4:	9009883a 	mov	r4,r18
    23b8:	0001c840 	call	1c84 <_free_r>
    23bc:	80000c15 	stw	zero,48(r16)
    23c0:	8080030b 	ldhu	r2,12(r16)
    23c4:	80c00417 	ldw	r3,16(r16)
    23c8:	0009883a 	mov	r4,zero
    23cc:	10bdf7cc 	andi	r2,r2,63455
    23d0:	8080030d 	sth	r2,12(r16)
    23d4:	80c00015 	stw	r3,0(r16)
    23d8:	80000115 	stw	zero,4(r16)
    23dc:	003f2806 	br	2080 <_fseek_r+0x7c>
    23e0:	81400717 	ldw	r5,28(r16)
    23e4:	000d883a 	mov	r6,zero
    23e8:	9009883a 	mov	r4,r18
    23ec:	01c00044 	movi	r7,1
    23f0:	a83ee83a 	callr	r21
    23f4:	100d883a 	mov	r6,r2
    23f8:	00bfffc4 	movi	r2,-1
    23fc:	30bf3b26 	beq	r6,r2,20ec <_fseek_r+0xe8>
    2400:	8100030b 	ldhu	r4,12(r16)
    2404:	003f5606 	br	2160 <_fseek_r+0x15c>
    2408:	00800744 	movi	r2,29
    240c:	013fffc4 	movi	r4,-1
    2410:	90800015 	stw	r2,0(r18)
    2414:	003f1a06 	br	2080 <_fseek_r+0x7c>
    2418:	81400717 	ldw	r5,28(r16)
    241c:	980f883a 	mov	r7,r19
    2420:	9009883a 	mov	r4,r18
    2424:	000d883a 	mov	r6,zero
    2428:	a83ee83a 	callr	r21
    242c:	1023883a 	mov	r17,r2
    2430:	00bfffc4 	movi	r2,-1
    2434:	88bf3126 	beq	r17,r2,20fc <_fseek_r+0xf8>
    2438:	8100030b 	ldhu	r4,12(r16)
    243c:	003f7006 	br	2200 <_fseek_r+0x1fc>

00002440 <fseek>:
    2440:	00800074 	movhi	r2,1
    2444:	10970104 	addi	r2,r2,23556
    2448:	2013883a 	mov	r9,r4
    244c:	11000017 	ldw	r4,0(r2)
    2450:	2805883a 	mov	r2,r5
    2454:	300f883a 	mov	r7,r6
    2458:	480b883a 	mov	r5,r9
    245c:	100d883a 	mov	r6,r2
    2460:	00020041 	jmpi	2004 <_fseek_r>

00002464 <_fstat_r>:
    2464:	defffd04 	addi	sp,sp,-12
    2468:	dc000015 	stw	r16,0(sp)
    246c:	04000074 	movhi	r16,1
    2470:	841de504 	addi	r16,r16,30612
    2474:	dc400115 	stw	r17,4(sp)
    2478:	80000015 	stw	zero,0(r16)
    247c:	2023883a 	mov	r17,r4
    2480:	2809883a 	mov	r4,r5
    2484:	300b883a 	mov	r5,r6
    2488:	dfc00215 	stw	ra,8(sp)
    248c:	001059c0 	call	1059c <fstat>
    2490:	1007883a 	mov	r3,r2
    2494:	00bfffc4 	movi	r2,-1
    2498:	18800626 	beq	r3,r2,24b4 <_fstat_r+0x50>
    249c:	1805883a 	mov	r2,r3
    24a0:	dfc00217 	ldw	ra,8(sp)
    24a4:	dc400117 	ldw	r17,4(sp)
    24a8:	dc000017 	ldw	r16,0(sp)
    24ac:	dec00304 	addi	sp,sp,12
    24b0:	f800283a 	ret
    24b4:	80800017 	ldw	r2,0(r16)
    24b8:	103ff826 	beq	r2,zero,249c <_fstat_r+0x38>
    24bc:	88800015 	stw	r2,0(r17)
    24c0:	1805883a 	mov	r2,r3
    24c4:	dfc00217 	ldw	ra,8(sp)
    24c8:	dc400117 	ldw	r17,4(sp)
    24cc:	dc000017 	ldw	r16,0(sp)
    24d0:	dec00304 	addi	sp,sp,12
    24d4:	f800283a 	ret

000024d8 <_fwalk_reent>:
    24d8:	defff704 	addi	sp,sp,-36
    24dc:	dcc00315 	stw	r19,12(sp)
    24e0:	24c0b804 	addi	r19,r4,736
    24e4:	dd800615 	stw	r22,24(sp)
    24e8:	dd400515 	stw	r21,20(sp)
    24ec:	dfc00815 	stw	ra,32(sp)
    24f0:	ddc00715 	stw	r23,28(sp)
    24f4:	dd000415 	stw	r20,16(sp)
    24f8:	dc800215 	stw	r18,8(sp)
    24fc:	dc400115 	stw	r17,4(sp)
    2500:	dc000015 	stw	r16,0(sp)
    2504:	202b883a 	mov	r21,r4
    2508:	282d883a 	mov	r22,r5
    250c:	00015a40 	call	15a4 <__sfp_lock_acquire>
    2510:	98002126 	beq	r19,zero,2598 <_fwalk_reent+0xc0>
    2514:	002f883a 	mov	r23,zero
    2518:	9c800117 	ldw	r18,4(r19)
    251c:	9c000217 	ldw	r16,8(r19)
    2520:	90bfffc4 	addi	r2,r18,-1
    2524:	10000d16 	blt	r2,zero,255c <_fwalk_reent+0x84>
    2528:	0023883a 	mov	r17,zero
    252c:	053fffc4 	movi	r20,-1
    2530:	8080030f 	ldh	r2,12(r16)
    2534:	8c400044 	addi	r17,r17,1
    2538:	10000626 	beq	r2,zero,2554 <_fwalk_reent+0x7c>
    253c:	8080038f 	ldh	r2,14(r16)
    2540:	800b883a 	mov	r5,r16
    2544:	a809883a 	mov	r4,r21
    2548:	15000226 	beq	r2,r20,2554 <_fwalk_reent+0x7c>
    254c:	b03ee83a 	callr	r22
    2550:	b8aeb03a 	or	r23,r23,r2
    2554:	84001704 	addi	r16,r16,92
    2558:	947ff51e 	bne	r18,r17,2530 <_fwalk_reent+0x58>
    255c:	9cc00017 	ldw	r19,0(r19)
    2560:	983fed1e 	bne	r19,zero,2518 <_fwalk_reent+0x40>
    2564:	00015a80 	call	15a8 <__sfp_lock_release>
    2568:	b805883a 	mov	r2,r23
    256c:	dfc00817 	ldw	ra,32(sp)
    2570:	ddc00717 	ldw	r23,28(sp)
    2574:	dd800617 	ldw	r22,24(sp)
    2578:	dd400517 	ldw	r21,20(sp)
    257c:	dd000417 	ldw	r20,16(sp)
    2580:	dcc00317 	ldw	r19,12(sp)
    2584:	dc800217 	ldw	r18,8(sp)
    2588:	dc400117 	ldw	r17,4(sp)
    258c:	dc000017 	ldw	r16,0(sp)
    2590:	dec00904 	addi	sp,sp,36
    2594:	f800283a 	ret
    2598:	002f883a 	mov	r23,zero
    259c:	003ff106 	br	2564 <_fwalk_reent+0x8c>

000025a0 <_fwalk>:
    25a0:	defff804 	addi	sp,sp,-32
    25a4:	dcc00315 	stw	r19,12(sp)
    25a8:	24c0b804 	addi	r19,r4,736
    25ac:	dd400515 	stw	r21,20(sp)
    25b0:	dfc00715 	stw	ra,28(sp)
    25b4:	dd800615 	stw	r22,24(sp)
    25b8:	dd000415 	stw	r20,16(sp)
    25bc:	dc800215 	stw	r18,8(sp)
    25c0:	dc400115 	stw	r17,4(sp)
    25c4:	dc000015 	stw	r16,0(sp)
    25c8:	282b883a 	mov	r21,r5
    25cc:	00015a40 	call	15a4 <__sfp_lock_acquire>
    25d0:	98001f26 	beq	r19,zero,2650 <_fwalk+0xb0>
    25d4:	002d883a 	mov	r22,zero
    25d8:	9c800117 	ldw	r18,4(r19)
    25dc:	9c000217 	ldw	r16,8(r19)
    25e0:	90bfffc4 	addi	r2,r18,-1
    25e4:	10000c16 	blt	r2,zero,2618 <_fwalk+0x78>
    25e8:	0023883a 	mov	r17,zero
    25ec:	053fffc4 	movi	r20,-1
    25f0:	8080030f 	ldh	r2,12(r16)
    25f4:	8c400044 	addi	r17,r17,1
    25f8:	10000526 	beq	r2,zero,2610 <_fwalk+0x70>
    25fc:	8080038f 	ldh	r2,14(r16)
    2600:	8009883a 	mov	r4,r16
    2604:	15000226 	beq	r2,r20,2610 <_fwalk+0x70>
    2608:	a83ee83a 	callr	r21
    260c:	b0acb03a 	or	r22,r22,r2
    2610:	84001704 	addi	r16,r16,92
    2614:	947ff61e 	bne	r18,r17,25f0 <_fwalk+0x50>
    2618:	9cc00017 	ldw	r19,0(r19)
    261c:	983fee1e 	bne	r19,zero,25d8 <_fwalk+0x38>
    2620:	00015a80 	call	15a8 <__sfp_lock_release>
    2624:	b005883a 	mov	r2,r22
    2628:	dfc00717 	ldw	ra,28(sp)
    262c:	dd800617 	ldw	r22,24(sp)
    2630:	dd400517 	ldw	r21,20(sp)
    2634:	dd000417 	ldw	r20,16(sp)
    2638:	dcc00317 	ldw	r19,12(sp)
    263c:	dc800217 	ldw	r18,8(sp)
    2640:	dc400117 	ldw	r17,4(sp)
    2644:	dc000017 	ldw	r16,0(sp)
    2648:	dec00804 	addi	sp,sp,32
    264c:	f800283a 	ret
    2650:	002d883a 	mov	r22,zero
    2654:	003ff206 	br	2620 <_fwalk+0x80>

00002658 <__smakebuf_r>:
    2658:	2880030b 	ldhu	r2,12(r5)
    265c:	deffed04 	addi	sp,sp,-76
    2660:	dc401015 	stw	r17,64(sp)
    2664:	1080008c 	andi	r2,r2,2
    2668:	dc000f15 	stw	r16,60(sp)
    266c:	dfc01215 	stw	ra,72(sp)
    2670:	dc801115 	stw	r18,68(sp)
    2674:	2821883a 	mov	r16,r5
    2678:	2023883a 	mov	r17,r4
    267c:	10000b26 	beq	r2,zero,26ac <__smakebuf_r+0x54>
    2680:	28c010c4 	addi	r3,r5,67
    2684:	00800044 	movi	r2,1
    2688:	28800515 	stw	r2,20(r5)
    268c:	28c00415 	stw	r3,16(r5)
    2690:	28c00015 	stw	r3,0(r5)
    2694:	dfc01217 	ldw	ra,72(sp)
    2698:	dc801117 	ldw	r18,68(sp)
    269c:	dc401017 	ldw	r17,64(sp)
    26a0:	dc000f17 	ldw	r16,60(sp)
    26a4:	dec01304 	addi	sp,sp,76
    26a8:	f800283a 	ret
    26ac:	2940038f 	ldh	r5,14(r5)
    26b0:	28002116 	blt	r5,zero,2738 <__smakebuf_r+0xe0>
    26b4:	d80d883a 	mov	r6,sp
    26b8:	00024640 	call	2464 <_fstat_r>
    26bc:	10001e16 	blt	r2,zero,2738 <__smakebuf_r+0xe0>
    26c0:	d8800117 	ldw	r2,4(sp)
    26c4:	00e00014 	movui	r3,32768
    26c8:	113c000c 	andi	r4,r2,61440
    26cc:	20c03126 	beq	r4,r3,2794 <__smakebuf_r+0x13c>
    26d0:	8080030b 	ldhu	r2,12(r16)
    26d4:	00c80004 	movi	r3,8192
    26d8:	10820014 	ori	r2,r2,2048
    26dc:	8080030d 	sth	r2,12(r16)
    26e0:	20c01e26 	beq	r4,r3,275c <__smakebuf_r+0x104>
    26e4:	04810004 	movi	r18,1024
    26e8:	8809883a 	mov	r4,r17
    26ec:	900b883a 	mov	r5,r18
    26f0:	00028140 	call	2814 <_malloc_r>
    26f4:	1009883a 	mov	r4,r2
    26f8:	10003126 	beq	r2,zero,27c0 <__smakebuf_r+0x168>
    26fc:	80c0030b 	ldhu	r3,12(r16)
    2700:	00800034 	movhi	r2,0
    2704:	1085a604 	addi	r2,r2,5784
    2708:	88800f15 	stw	r2,60(r17)
    270c:	18c02014 	ori	r3,r3,128
    2710:	84800515 	stw	r18,20(r16)
    2714:	80c0030d 	sth	r3,12(r16)
    2718:	81000415 	stw	r4,16(r16)
    271c:	81000015 	stw	r4,0(r16)
    2720:	dfc01217 	ldw	ra,72(sp)
    2724:	dc801117 	ldw	r18,68(sp)
    2728:	dc401017 	ldw	r17,64(sp)
    272c:	dc000f17 	ldw	r16,60(sp)
    2730:	dec01304 	addi	sp,sp,76
    2734:	f800283a 	ret
    2738:	80c0030b 	ldhu	r3,12(r16)
    273c:	1880200c 	andi	r2,r3,128
    2740:	10000426 	beq	r2,zero,2754 <__smakebuf_r+0xfc>
    2744:	04801004 	movi	r18,64
    2748:	18820014 	ori	r2,r3,2048
    274c:	8080030d 	sth	r2,12(r16)
    2750:	003fe506 	br	26e8 <__smakebuf_r+0x90>
    2754:	04810004 	movi	r18,1024
    2758:	003ffb06 	br	2748 <__smakebuf_r+0xf0>
    275c:	8140038f 	ldh	r5,14(r16)
    2760:	8809883a 	mov	r4,r17
    2764:	0008c1c0 	call	8c1c <_isatty_r>
    2768:	103fde26 	beq	r2,zero,26e4 <__smakebuf_r+0x8c>
    276c:	8080030b 	ldhu	r2,12(r16)
    2770:	80c010c4 	addi	r3,r16,67
    2774:	04810004 	movi	r18,1024
    2778:	10800054 	ori	r2,r2,1
    277c:	8080030d 	sth	r2,12(r16)
    2780:	00800044 	movi	r2,1
    2784:	80c00415 	stw	r3,16(r16)
    2788:	80800515 	stw	r2,20(r16)
    278c:	80c00015 	stw	r3,0(r16)
    2790:	003fd506 	br	26e8 <__smakebuf_r+0x90>
    2794:	80c00a17 	ldw	r3,40(r16)
    2798:	00800034 	movhi	r2,0
    279c:	108d2204 	addi	r2,r2,13448
    27a0:	18bfcb1e 	bne	r3,r2,26d0 <__smakebuf_r+0x78>
    27a4:	8080030b 	ldhu	r2,12(r16)
    27a8:	00c10004 	movi	r3,1024
    27ac:	1825883a 	mov	r18,r3
    27b0:	10c4b03a 	or	r2,r2,r3
    27b4:	8080030d 	sth	r2,12(r16)
    27b8:	80c01315 	stw	r3,76(r16)
    27bc:	003fca06 	br	26e8 <__smakebuf_r+0x90>
    27c0:	8100030b 	ldhu	r4,12(r16)
    27c4:	2080800c 	andi	r2,r4,512
    27c8:	103fb21e 	bne	r2,zero,2694 <__smakebuf_r+0x3c>
    27cc:	80c010c4 	addi	r3,r16,67
    27d0:	21000094 	ori	r4,r4,2
    27d4:	00800044 	movi	r2,1
    27d8:	80800515 	stw	r2,20(r16)
    27dc:	8100030d 	sth	r4,12(r16)
    27e0:	80c00415 	stw	r3,16(r16)
    27e4:	80c00015 	stw	r3,0(r16)
    27e8:	003faa06 	br	2694 <__smakebuf_r+0x3c>

000027ec <free>:
    27ec:	00800074 	movhi	r2,1
    27f0:	10970104 	addi	r2,r2,23556
    27f4:	200b883a 	mov	r5,r4
    27f8:	11000017 	ldw	r4,0(r2)
    27fc:	0001c841 	jmpi	1c84 <_free_r>

00002800 <malloc>:
    2800:	00800074 	movhi	r2,1
    2804:	10970104 	addi	r2,r2,23556
    2808:	200b883a 	mov	r5,r4
    280c:	11000017 	ldw	r4,0(r2)
    2810:	00028141 	jmpi	2814 <_malloc_r>

00002814 <_malloc_r>:
    2814:	defff604 	addi	sp,sp,-40
    2818:	28c002c4 	addi	r3,r5,11
    281c:	00800584 	movi	r2,22
    2820:	dc800215 	stw	r18,8(sp)
    2824:	dfc00915 	stw	ra,36(sp)
    2828:	df000815 	stw	fp,32(sp)
    282c:	ddc00715 	stw	r23,28(sp)
    2830:	dd800615 	stw	r22,24(sp)
    2834:	dd400515 	stw	r21,20(sp)
    2838:	dd000415 	stw	r20,16(sp)
    283c:	dcc00315 	stw	r19,12(sp)
    2840:	dc400115 	stw	r17,4(sp)
    2844:	dc000015 	stw	r16,0(sp)
    2848:	2025883a 	mov	r18,r4
    284c:	10c01236 	bltu	r2,r3,2898 <_malloc_r+0x84>
    2850:	04400404 	movi	r17,16
    2854:	8940142e 	bgeu	r17,r5,28a8 <_malloc_r+0x94>
    2858:	00800304 	movi	r2,12
    285c:	0007883a 	mov	r3,zero
    2860:	90800015 	stw	r2,0(r18)
    2864:	1805883a 	mov	r2,r3
    2868:	dfc00917 	ldw	ra,36(sp)
    286c:	df000817 	ldw	fp,32(sp)
    2870:	ddc00717 	ldw	r23,28(sp)
    2874:	dd800617 	ldw	r22,24(sp)
    2878:	dd400517 	ldw	r21,20(sp)
    287c:	dd000417 	ldw	r20,16(sp)
    2880:	dcc00317 	ldw	r19,12(sp)
    2884:	dc800217 	ldw	r18,8(sp)
    2888:	dc400117 	ldw	r17,4(sp)
    288c:	dc000017 	ldw	r16,0(sp)
    2890:	dec00a04 	addi	sp,sp,40
    2894:	f800283a 	ret
    2898:	00bffe04 	movi	r2,-8
    289c:	18a2703a 	and	r17,r3,r2
    28a0:	883fed16 	blt	r17,zero,2858 <_malloc_r+0x44>
    28a4:	897fec36 	bltu	r17,r5,2858 <_malloc_r+0x44>
    28a8:	9009883a 	mov	r4,r18
    28ac:	0010a980 	call	10a98 <__malloc_lock>
    28b0:	00807dc4 	movi	r2,503
    28b4:	14402b2e 	bgeu	r2,r17,2964 <_malloc_r+0x150>
    28b8:	8806d27a 	srli	r3,r17,9
    28bc:	18003f1e 	bne	r3,zero,29bc <_malloc_r+0x1a8>
    28c0:	880cd0fa 	srli	r6,r17,3
    28c4:	300490fa 	slli	r2,r6,3
    28c8:	02c00074 	movhi	r11,1
    28cc:	5ad16604 	addi	r11,r11,17816
    28d0:	12cb883a 	add	r5,r2,r11
    28d4:	2c000317 	ldw	r16,12(r5)
    28d8:	580f883a 	mov	r7,r11
    28dc:	2c00041e 	bne	r5,r16,28f0 <_malloc_r+0xdc>
    28e0:	00000a06 	br	290c <_malloc_r+0xf8>
    28e4:	1800860e 	bge	r3,zero,2b00 <_malloc_r+0x2ec>
    28e8:	84000317 	ldw	r16,12(r16)
    28ec:	2c000726 	beq	r5,r16,290c <_malloc_r+0xf8>
    28f0:	80800117 	ldw	r2,4(r16)
    28f4:	00ffff04 	movi	r3,-4
    28f8:	10c8703a 	and	r4,r2,r3
    28fc:	2447c83a 	sub	r3,r4,r17
    2900:	008003c4 	movi	r2,15
    2904:	10fff70e 	bge	r2,r3,28e4 <_malloc_r+0xd0>
    2908:	31bfffc4 	addi	r6,r6,-1
    290c:	32400044 	addi	r9,r6,1
    2910:	02800074 	movhi	r10,1
    2914:	52916804 	addi	r10,r10,17824
    2918:	54000217 	ldw	r16,8(r10)
    291c:	8280a026 	beq	r16,r10,2ba0 <_malloc_r+0x38c>
    2920:	80800117 	ldw	r2,4(r16)
    2924:	00ffff04 	movi	r3,-4
    2928:	10ca703a 	and	r5,r2,r3
    292c:	2c4dc83a 	sub	r6,r5,r17
    2930:	008003c4 	movi	r2,15
    2934:	11808316 	blt	r2,r6,2b44 <_malloc_r+0x330>
    2938:	52800315 	stw	r10,12(r10)
    293c:	52800215 	stw	r10,8(r10)
    2940:	30002916 	blt	r6,zero,29e8 <_malloc_r+0x1d4>
    2944:	8147883a 	add	r3,r16,r5
    2948:	18800117 	ldw	r2,4(r3)
    294c:	9009883a 	mov	r4,r18
    2950:	10800054 	ori	r2,r2,1
    2954:	18800115 	stw	r2,4(r3)
    2958:	0010ab80 	call	10ab8 <__malloc_unlock>
    295c:	80c00204 	addi	r3,r16,8
    2960:	003fc006 	br	2864 <_malloc_r+0x50>
    2964:	02c00074 	movhi	r11,1
    2968:	5ad16604 	addi	r11,r11,17816
    296c:	8ac5883a 	add	r2,r17,r11
    2970:	14000317 	ldw	r16,12(r2)
    2974:	580f883a 	mov	r7,r11
    2978:	8806d0fa 	srli	r3,r17,3
    297c:	14006c26 	beq	r2,r16,2b30 <_malloc_r+0x31c>
    2980:	80c00117 	ldw	r3,4(r16)
    2984:	00bfff04 	movi	r2,-4
    2988:	81800317 	ldw	r6,12(r16)
    298c:	1886703a 	and	r3,r3,r2
    2990:	80c7883a 	add	r3,r16,r3
    2994:	18800117 	ldw	r2,4(r3)
    2998:	81400217 	ldw	r5,8(r16)
    299c:	9009883a 	mov	r4,r18
    29a0:	10800054 	ori	r2,r2,1
    29a4:	18800115 	stw	r2,4(r3)
    29a8:	31400215 	stw	r5,8(r6)
    29ac:	29800315 	stw	r6,12(r5)
    29b0:	0010ab80 	call	10ab8 <__malloc_unlock>
    29b4:	80c00204 	addi	r3,r16,8
    29b8:	003faa06 	br	2864 <_malloc_r+0x50>
    29bc:	00800104 	movi	r2,4
    29c0:	10c0052e 	bgeu	r2,r3,29d8 <_malloc_r+0x1c4>
    29c4:	00800504 	movi	r2,20
    29c8:	10c07836 	bltu	r2,r3,2bac <_malloc_r+0x398>
    29cc:	198016c4 	addi	r6,r3,91
    29d0:	300490fa 	slli	r2,r6,3
    29d4:	003fbc06 	br	28c8 <_malloc_r+0xb4>
    29d8:	8804d1ba 	srli	r2,r17,6
    29dc:	11800e04 	addi	r6,r2,56
    29e0:	300490fa 	slli	r2,r6,3
    29e4:	003fb806 	br	28c8 <_malloc_r+0xb4>
    29e8:	00807fc4 	movi	r2,511
    29ec:	1140bb36 	bltu	r2,r5,2cdc <_malloc_r+0x4c8>
    29f0:	2806d0fa 	srli	r3,r5,3
    29f4:	573ffe04 	addi	fp,r10,-8
    29f8:	00800044 	movi	r2,1
    29fc:	180890fa 	slli	r4,r3,3
    2a00:	1807d0ba 	srai	r3,r3,2
    2a04:	e1c00117 	ldw	r7,4(fp)
    2a08:	5909883a 	add	r4,r11,r4
    2a0c:	21400217 	ldw	r5,8(r4)
    2a10:	10c4983a 	sll	r2,r2,r3
    2a14:	81000315 	stw	r4,12(r16)
    2a18:	81400215 	stw	r5,8(r16)
    2a1c:	388eb03a 	or	r7,r7,r2
    2a20:	2c000315 	stw	r16,12(r5)
    2a24:	24000215 	stw	r16,8(r4)
    2a28:	e1c00115 	stw	r7,4(fp)
    2a2c:	4807883a 	mov	r3,r9
    2a30:	4800cd16 	blt	r9,zero,2d68 <_malloc_r+0x554>
    2a34:	1807d0ba 	srai	r3,r3,2
    2a38:	00800044 	movi	r2,1
    2a3c:	10c8983a 	sll	r4,r2,r3
    2a40:	39004436 	bltu	r7,r4,2b54 <_malloc_r+0x340>
    2a44:	21c4703a 	and	r2,r4,r7
    2a48:	10000a1e 	bne	r2,zero,2a74 <_malloc_r+0x260>
    2a4c:	2109883a 	add	r4,r4,r4
    2a50:	00bfff04 	movi	r2,-4
    2a54:	4884703a 	and	r2,r9,r2
    2a58:	3906703a 	and	r3,r7,r4
    2a5c:	12400104 	addi	r9,r2,4
    2a60:	1800041e 	bne	r3,zero,2a74 <_malloc_r+0x260>
    2a64:	2109883a 	add	r4,r4,r4
    2a68:	3904703a 	and	r2,r7,r4
    2a6c:	4a400104 	addi	r9,r9,4
    2a70:	103ffc26 	beq	r2,zero,2a64 <_malloc_r+0x250>
    2a74:	480490fa 	slli	r2,r9,3
    2a78:	4819883a 	mov	r12,r9
    2a7c:	023fff04 	movi	r8,-4
    2a80:	589b883a 	add	r13,r11,r2
    2a84:	6807883a 	mov	r3,r13
    2a88:	014003c4 	movi	r5,15
    2a8c:	1c000317 	ldw	r16,12(r3)
    2a90:	1c00041e 	bne	r3,r16,2aa4 <_malloc_r+0x290>
    2a94:	0000a706 	br	2d34 <_malloc_r+0x520>
    2a98:	3000ab0e 	bge	r6,zero,2d48 <_malloc_r+0x534>
    2a9c:	84000317 	ldw	r16,12(r16)
    2aa0:	1c00a426 	beq	r3,r16,2d34 <_malloc_r+0x520>
    2aa4:	80800117 	ldw	r2,4(r16)
    2aa8:	1204703a 	and	r2,r2,r8
    2aac:	144dc83a 	sub	r6,r2,r17
    2ab0:	29bff90e 	bge	r5,r6,2a98 <_malloc_r+0x284>
    2ab4:	81000317 	ldw	r4,12(r16)
    2ab8:	80c00217 	ldw	r3,8(r16)
    2abc:	89400054 	ori	r5,r17,1
    2ac0:	8445883a 	add	r2,r16,r17
    2ac4:	20c00215 	stw	r3,8(r4)
    2ac8:	19000315 	stw	r4,12(r3)
    2acc:	81400115 	stw	r5,4(r16)
    2ad0:	1187883a 	add	r3,r2,r6
    2ad4:	31000054 	ori	r4,r6,1
    2ad8:	50800315 	stw	r2,12(r10)
    2adc:	50800215 	stw	r2,8(r10)
    2ae0:	19800015 	stw	r6,0(r3)
    2ae4:	11000115 	stw	r4,4(r2)
    2ae8:	12800215 	stw	r10,8(r2)
    2aec:	12800315 	stw	r10,12(r2)
    2af0:	9009883a 	mov	r4,r18
    2af4:	0010ab80 	call	10ab8 <__malloc_unlock>
    2af8:	80c00204 	addi	r3,r16,8
    2afc:	003f5906 	br	2864 <_malloc_r+0x50>
    2b00:	8109883a 	add	r4,r16,r4
    2b04:	20800117 	ldw	r2,4(r4)
    2b08:	80c00217 	ldw	r3,8(r16)
    2b0c:	81400317 	ldw	r5,12(r16)
    2b10:	10800054 	ori	r2,r2,1
    2b14:	20800115 	stw	r2,4(r4)
    2b18:	28c00215 	stw	r3,8(r5)
    2b1c:	19400315 	stw	r5,12(r3)
    2b20:	9009883a 	mov	r4,r18
    2b24:	0010ab80 	call	10ab8 <__malloc_unlock>
    2b28:	80c00204 	addi	r3,r16,8
    2b2c:	003f4d06 	br	2864 <_malloc_r+0x50>
    2b30:	80800204 	addi	r2,r16,8
    2b34:	14000317 	ldw	r16,12(r2)
    2b38:	143f911e 	bne	r2,r16,2980 <_malloc_r+0x16c>
    2b3c:	1a400084 	addi	r9,r3,2
    2b40:	003f7306 	br	2910 <_malloc_r+0xfc>
    2b44:	88c00054 	ori	r3,r17,1
    2b48:	8445883a 	add	r2,r16,r17
    2b4c:	80c00115 	stw	r3,4(r16)
    2b50:	003fdf06 	br	2ad0 <_malloc_r+0x2bc>
    2b54:	e4000217 	ldw	r16,8(fp)
    2b58:	00bfff04 	movi	r2,-4
    2b5c:	80c00117 	ldw	r3,4(r16)
    2b60:	802d883a 	mov	r22,r16
    2b64:	18aa703a 	and	r21,r3,r2
    2b68:	ac401636 	bltu	r21,r17,2bc4 <_malloc_r+0x3b0>
    2b6c:	ac49c83a 	sub	r4,r21,r17
    2b70:	008003c4 	movi	r2,15
    2b74:	1100130e 	bge	r2,r4,2bc4 <_malloc_r+0x3b0>
    2b78:	88800054 	ori	r2,r17,1
    2b7c:	8447883a 	add	r3,r16,r17
    2b80:	80800115 	stw	r2,4(r16)
    2b84:	20800054 	ori	r2,r4,1
    2b88:	18800115 	stw	r2,4(r3)
    2b8c:	e0c00215 	stw	r3,8(fp)
    2b90:	9009883a 	mov	r4,r18
    2b94:	0010ab80 	call	10ab8 <__malloc_unlock>
    2b98:	80c00204 	addi	r3,r16,8
    2b9c:	003f3106 	br	2864 <_malloc_r+0x50>
    2ba0:	39c00117 	ldw	r7,4(r7)
    2ba4:	573ffe04 	addi	fp,r10,-8
    2ba8:	003fa006 	br	2a2c <_malloc_r+0x218>
    2bac:	00801504 	movi	r2,84
    2bb0:	10c06736 	bltu	r2,r3,2d50 <_malloc_r+0x53c>
    2bb4:	8804d33a 	srli	r2,r17,12
    2bb8:	11801b84 	addi	r6,r2,110
    2bbc:	300490fa 	slli	r2,r6,3
    2bc0:	003f4106 	br	28c8 <_malloc_r+0xb4>
    2bc4:	d0a6e517 	ldw	r2,-25708(gp)
    2bc8:	d0e00317 	ldw	r3,-32756(gp)
    2bcc:	053fffc4 	movi	r20,-1
    2bd0:	10800404 	addi	r2,r2,16
    2bd4:	88a7883a 	add	r19,r17,r2
    2bd8:	1d000326 	beq	r3,r20,2be8 <_malloc_r+0x3d4>
    2bdc:	98c3ffc4 	addi	r3,r19,4095
    2be0:	00bc0004 	movi	r2,-4096
    2be4:	18a6703a 	and	r19,r3,r2
    2be8:	9009883a 	mov	r4,r18
    2bec:	980b883a 	mov	r5,r19
    2bf0:	00034100 	call	3410 <_sbrk_r>
    2bf4:	1009883a 	mov	r4,r2
    2bf8:	15000426 	beq	r2,r20,2c0c <_malloc_r+0x3f8>
    2bfc:	854b883a 	add	r5,r16,r21
    2c00:	1029883a 	mov	r20,r2
    2c04:	11405a2e 	bgeu	r2,r5,2d70 <_malloc_r+0x55c>
    2c08:	87000c26 	beq	r16,fp,2c3c <_malloc_r+0x428>
    2c0c:	e4000217 	ldw	r16,8(fp)
    2c10:	80c00117 	ldw	r3,4(r16)
    2c14:	00bfff04 	movi	r2,-4
    2c18:	1884703a 	and	r2,r3,r2
    2c1c:	14400336 	bltu	r2,r17,2c2c <_malloc_r+0x418>
    2c20:	1449c83a 	sub	r4,r2,r17
    2c24:	008003c4 	movi	r2,15
    2c28:	113fd316 	blt	r2,r4,2b78 <_malloc_r+0x364>
    2c2c:	9009883a 	mov	r4,r18
    2c30:	0010ab80 	call	10ab8 <__malloc_unlock>
    2c34:	0007883a 	mov	r3,zero
    2c38:	003f0a06 	br	2864 <_malloc_r+0x50>
    2c3c:	05c00074 	movhi	r23,1
    2c40:	bdddf204 	addi	r23,r23,30664
    2c44:	b8800017 	ldw	r2,0(r23)
    2c48:	988d883a 	add	r6,r19,r2
    2c4c:	b9800015 	stw	r6,0(r23)
    2c50:	d0e00317 	ldw	r3,-32756(gp)
    2c54:	00bfffc4 	movi	r2,-1
    2c58:	18808e26 	beq	r3,r2,2e94 <_malloc_r+0x680>
    2c5c:	2145c83a 	sub	r2,r4,r5
    2c60:	3085883a 	add	r2,r6,r2
    2c64:	b8800015 	stw	r2,0(r23)
    2c68:	20c001cc 	andi	r3,r4,7
    2c6c:	18005f1e 	bne	r3,zero,2dec <_malloc_r+0x5d8>
    2c70:	000b883a 	mov	r5,zero
    2c74:	a4c5883a 	add	r2,r20,r19
    2c78:	1083ffcc 	andi	r2,r2,4095
    2c7c:	00c40004 	movi	r3,4096
    2c80:	1887c83a 	sub	r3,r3,r2
    2c84:	28e7883a 	add	r19,r5,r3
    2c88:	9009883a 	mov	r4,r18
    2c8c:	980b883a 	mov	r5,r19
    2c90:	00034100 	call	3410 <_sbrk_r>
    2c94:	1007883a 	mov	r3,r2
    2c98:	00bfffc4 	movi	r2,-1
    2c9c:	18807a26 	beq	r3,r2,2e88 <_malloc_r+0x674>
    2ca0:	1d05c83a 	sub	r2,r3,r20
    2ca4:	9885883a 	add	r2,r19,r2
    2ca8:	10c00054 	ori	r3,r2,1
    2cac:	b8800017 	ldw	r2,0(r23)
    2cb0:	a021883a 	mov	r16,r20
    2cb4:	a0c00115 	stw	r3,4(r20)
    2cb8:	9885883a 	add	r2,r19,r2
    2cbc:	b8800015 	stw	r2,0(r23)
    2cc0:	e5000215 	stw	r20,8(fp)
    2cc4:	b7003626 	beq	r22,fp,2da0 <_malloc_r+0x58c>
    2cc8:	018003c4 	movi	r6,15
    2ccc:	35404b36 	bltu	r6,r21,2dfc <_malloc_r+0x5e8>
    2cd0:	00800044 	movi	r2,1
    2cd4:	a0800115 	stw	r2,4(r20)
    2cd8:	003fcd06 	br	2c10 <_malloc_r+0x3fc>
    2cdc:	2808d27a 	srli	r4,r5,9
    2ce0:	2000371e 	bne	r4,zero,2dc0 <_malloc_r+0x5ac>
    2ce4:	2808d0fa 	srli	r4,r5,3
    2ce8:	200690fa 	slli	r3,r4,3
    2cec:	1ad1883a 	add	r8,r3,r11
    2cf0:	41800217 	ldw	r6,8(r8)
    2cf4:	41805b26 	beq	r8,r6,2e64 <_malloc_r+0x650>
    2cf8:	30800117 	ldw	r2,4(r6)
    2cfc:	00ffff04 	movi	r3,-4
    2d00:	10c4703a 	and	r2,r2,r3
    2d04:	2880022e 	bgeu	r5,r2,2d10 <_malloc_r+0x4fc>
    2d08:	31800217 	ldw	r6,8(r6)
    2d0c:	41bffa1e 	bne	r8,r6,2cf8 <_malloc_r+0x4e4>
    2d10:	32000317 	ldw	r8,12(r6)
    2d14:	39c00117 	ldw	r7,4(r7)
    2d18:	82000315 	stw	r8,12(r16)
    2d1c:	81800215 	stw	r6,8(r16)
    2d20:	07000074 	movhi	fp,1
    2d24:	e7116604 	addi	fp,fp,17816
    2d28:	34000315 	stw	r16,12(r6)
    2d2c:	44000215 	stw	r16,8(r8)
    2d30:	003f3e06 	br	2a2c <_malloc_r+0x218>
    2d34:	63000044 	addi	r12,r12,1
    2d38:	608000cc 	andi	r2,r12,3
    2d3c:	10005d26 	beq	r2,zero,2eb4 <_malloc_r+0x6a0>
    2d40:	18c00204 	addi	r3,r3,8
    2d44:	003f5106 	br	2a8c <_malloc_r+0x278>
    2d48:	8089883a 	add	r4,r16,r2
    2d4c:	003f6d06 	br	2b04 <_malloc_r+0x2f0>
    2d50:	00805504 	movi	r2,340
    2d54:	10c02036 	bltu	r2,r3,2dd8 <_malloc_r+0x5c4>
    2d58:	8804d3fa 	srli	r2,r17,15
    2d5c:	11801dc4 	addi	r6,r2,119
    2d60:	300490fa 	slli	r2,r6,3
    2d64:	003ed806 	br	28c8 <_malloc_r+0xb4>
    2d68:	48c000c4 	addi	r3,r9,3
    2d6c:	003f3106 	br	2a34 <_malloc_r+0x220>
    2d70:	05c00074 	movhi	r23,1
    2d74:	bdddf204 	addi	r23,r23,30664
    2d78:	b8800017 	ldw	r2,0(r23)
    2d7c:	988d883a 	add	r6,r19,r2
    2d80:	b9800015 	stw	r6,0(r23)
    2d84:	293fb21e 	bne	r5,r4,2c50 <_malloc_r+0x43c>
    2d88:	2083ffcc 	andi	r2,r4,4095
    2d8c:	103fb01e 	bne	r2,zero,2c50 <_malloc_r+0x43c>
    2d90:	e4000217 	ldw	r16,8(fp)
    2d94:	9d45883a 	add	r2,r19,r21
    2d98:	10800054 	ori	r2,r2,1
    2d9c:	80800115 	stw	r2,4(r16)
    2da0:	b8c00017 	ldw	r3,0(r23)
    2da4:	d0a6e617 	ldw	r2,-25704(gp)
    2da8:	10c0012e 	bgeu	r2,r3,2db0 <_malloc_r+0x59c>
    2dac:	d0e6e615 	stw	r3,-25704(gp)
    2db0:	d0a6e717 	ldw	r2,-25700(gp)
    2db4:	10ff962e 	bgeu	r2,r3,2c10 <_malloc_r+0x3fc>
    2db8:	d0e6e715 	stw	r3,-25700(gp)
    2dbc:	003f9406 	br	2c10 <_malloc_r+0x3fc>
    2dc0:	00800104 	movi	r2,4
    2dc4:	11001e36 	bltu	r2,r4,2e40 <_malloc_r+0x62c>
    2dc8:	2804d1ba 	srli	r2,r5,6
    2dcc:	11000e04 	addi	r4,r2,56
    2dd0:	200690fa 	slli	r3,r4,3
    2dd4:	003fc506 	br	2cec <_malloc_r+0x4d8>
    2dd8:	00815504 	movi	r2,1364
    2ddc:	10c01d2e 	bgeu	r2,r3,2e54 <_malloc_r+0x640>
    2de0:	01801f84 	movi	r6,126
    2de4:	0080fc04 	movi	r2,1008
    2de8:	003eb706 	br	28c8 <_malloc_r+0xb4>
    2dec:	00800204 	movi	r2,8
    2df0:	10cbc83a 	sub	r5,r2,r3
    2df4:	2169883a 	add	r20,r4,r5
    2df8:	003f9e06 	br	2c74 <_malloc_r+0x460>
    2dfc:	00bffe04 	movi	r2,-8
    2e00:	a93ffd04 	addi	r4,r21,-12
    2e04:	2088703a 	and	r4,r4,r2
    2e08:	b10b883a 	add	r5,r22,r4
    2e0c:	00c00144 	movi	r3,5
    2e10:	28c00215 	stw	r3,8(r5)
    2e14:	28c00115 	stw	r3,4(r5)
    2e18:	b0800117 	ldw	r2,4(r22)
    2e1c:	1080004c 	andi	r2,r2,1
    2e20:	2084b03a 	or	r2,r4,r2
    2e24:	b0800115 	stw	r2,4(r22)
    2e28:	313fdd2e 	bgeu	r6,r4,2da0 <_malloc_r+0x58c>
    2e2c:	b1400204 	addi	r5,r22,8
    2e30:	9009883a 	mov	r4,r18
    2e34:	0001c840 	call	1c84 <_free_r>
    2e38:	e4000217 	ldw	r16,8(fp)
    2e3c:	003fd806 	br	2da0 <_malloc_r+0x58c>
    2e40:	00800504 	movi	r2,20
    2e44:	11001536 	bltu	r2,r4,2e9c <_malloc_r+0x688>
    2e48:	210016c4 	addi	r4,r4,91
    2e4c:	200690fa 	slli	r3,r4,3
    2e50:	003fa606 	br	2cec <_malloc_r+0x4d8>
    2e54:	8804d4ba 	srli	r2,r17,18
    2e58:	11801f04 	addi	r6,r2,124
    2e5c:	300490fa 	slli	r2,r6,3
    2e60:	003e9906 	br	28c8 <_malloc_r+0xb4>
    2e64:	2009d0ba 	srai	r4,r4,2
    2e68:	01400074 	movhi	r5,1
    2e6c:	29516604 	addi	r5,r5,17816
    2e70:	00c00044 	movi	r3,1
    2e74:	28800117 	ldw	r2,4(r5)
    2e78:	1906983a 	sll	r3,r3,r4
    2e7c:	10c4b03a 	or	r2,r2,r3
    2e80:	28800115 	stw	r2,4(r5)
    2e84:	003fa306 	br	2d14 <_malloc_r+0x500>
    2e88:	0027883a 	mov	r19,zero
    2e8c:	00c00044 	movi	r3,1
    2e90:	003f8606 	br	2cac <_malloc_r+0x498>
    2e94:	d1200315 	stw	r4,-32756(gp)
    2e98:	003f7306 	br	2c68 <_malloc_r+0x454>
    2e9c:	00801504 	movi	r2,84
    2ea0:	11001936 	bltu	r2,r4,2f08 <_malloc_r+0x6f4>
    2ea4:	2804d33a 	srli	r2,r5,12
    2ea8:	11001b84 	addi	r4,r2,110
    2eac:	200690fa 	slli	r3,r4,3
    2eb0:	003f8e06 	br	2cec <_malloc_r+0x4d8>
    2eb4:	480b883a 	mov	r5,r9
    2eb8:	6807883a 	mov	r3,r13
    2ebc:	288000cc 	andi	r2,r5,3
    2ec0:	18fffe04 	addi	r3,r3,-8
    2ec4:	297fffc4 	addi	r5,r5,-1
    2ec8:	10001526 	beq	r2,zero,2f20 <_malloc_r+0x70c>
    2ecc:	18800217 	ldw	r2,8(r3)
    2ed0:	10fffa26 	beq	r2,r3,2ebc <_malloc_r+0x6a8>
    2ed4:	2109883a 	add	r4,r4,r4
    2ed8:	393f1e36 	bltu	r7,r4,2b54 <_malloc_r+0x340>
    2edc:	203f1d26 	beq	r4,zero,2b54 <_malloc_r+0x340>
    2ee0:	21c4703a 	and	r2,r4,r7
    2ee4:	10000226 	beq	r2,zero,2ef0 <_malloc_r+0x6dc>
    2ee8:	6013883a 	mov	r9,r12
    2eec:	003ee106 	br	2a74 <_malloc_r+0x260>
    2ef0:	2109883a 	add	r4,r4,r4
    2ef4:	3904703a 	and	r2,r7,r4
    2ef8:	63000104 	addi	r12,r12,4
    2efc:	103ffc26 	beq	r2,zero,2ef0 <_malloc_r+0x6dc>
    2f00:	6013883a 	mov	r9,r12
    2f04:	003edb06 	br	2a74 <_malloc_r+0x260>
    2f08:	00805504 	movi	r2,340
    2f0c:	11000836 	bltu	r2,r4,2f30 <_malloc_r+0x71c>
    2f10:	2804d3fa 	srli	r2,r5,15
    2f14:	11001dc4 	addi	r4,r2,119
    2f18:	200690fa 	slli	r3,r4,3
    2f1c:	003f7306 	br	2cec <_malloc_r+0x4d8>
    2f20:	0104303a 	nor	r2,zero,r4
    2f24:	388e703a 	and	r7,r7,r2
    2f28:	e1c00115 	stw	r7,4(fp)
    2f2c:	003fe906 	br	2ed4 <_malloc_r+0x6c0>
    2f30:	00815504 	movi	r2,1364
    2f34:	1100032e 	bgeu	r2,r4,2f44 <_malloc_r+0x730>
    2f38:	01001f84 	movi	r4,126
    2f3c:	00c0fc04 	movi	r3,1008
    2f40:	003f6a06 	br	2cec <_malloc_r+0x4d8>
    2f44:	2804d4ba 	srli	r2,r5,18
    2f48:	11001f04 	addi	r4,r2,124
    2f4c:	200690fa 	slli	r3,r4,3
    2f50:	003f6606 	br	2cec <_malloc_r+0x4d8>

00002f54 <memcpy>:
    2f54:	01c003c4 	movi	r7,15
    2f58:	2007883a 	mov	r3,r4
    2f5c:	3980032e 	bgeu	r7,r6,2f6c <memcpy+0x18>
    2f60:	2904b03a 	or	r2,r5,r4
    2f64:	108000cc 	andi	r2,r2,3
    2f68:	10000926 	beq	r2,zero,2f90 <memcpy+0x3c>
    2f6c:	30000626 	beq	r6,zero,2f88 <memcpy+0x34>
    2f70:	30cd883a 	add	r6,r6,r3
    2f74:	28800003 	ldbu	r2,0(r5)
    2f78:	29400044 	addi	r5,r5,1
    2f7c:	18800005 	stb	r2,0(r3)
    2f80:	18c00044 	addi	r3,r3,1
    2f84:	30fffb1e 	bne	r6,r3,2f74 <memcpy+0x20>
    2f88:	2005883a 	mov	r2,r4
    2f8c:	f800283a 	ret
    2f90:	3811883a 	mov	r8,r7
    2f94:	200f883a 	mov	r7,r4
    2f98:	28c00017 	ldw	r3,0(r5)
    2f9c:	31bffc04 	addi	r6,r6,-16
    2fa0:	38c00015 	stw	r3,0(r7)
    2fa4:	28800117 	ldw	r2,4(r5)
    2fa8:	38800115 	stw	r2,4(r7)
    2fac:	28c00217 	ldw	r3,8(r5)
    2fb0:	38c00215 	stw	r3,8(r7)
    2fb4:	28800317 	ldw	r2,12(r5)
    2fb8:	29400404 	addi	r5,r5,16
    2fbc:	38800315 	stw	r2,12(r7)
    2fc0:	39c00404 	addi	r7,r7,16
    2fc4:	41bff436 	bltu	r8,r6,2f98 <memcpy+0x44>
    2fc8:	008000c4 	movi	r2,3
    2fcc:	1180072e 	bgeu	r2,r6,2fec <memcpy+0x98>
    2fd0:	1007883a 	mov	r3,r2
    2fd4:	28800017 	ldw	r2,0(r5)
    2fd8:	31bfff04 	addi	r6,r6,-4
    2fdc:	29400104 	addi	r5,r5,4
    2fe0:	38800015 	stw	r2,0(r7)
    2fe4:	39c00104 	addi	r7,r7,4
    2fe8:	19bffa36 	bltu	r3,r6,2fd4 <memcpy+0x80>
    2fec:	3807883a 	mov	r3,r7
    2ff0:	003fde06 	br	2f6c <memcpy+0x18>

00002ff4 <memset>:
    2ff4:	008000c4 	movi	r2,3
    2ff8:	29403fcc 	andi	r5,r5,255
    2ffc:	2007883a 	mov	r3,r4
    3000:	1180022e 	bgeu	r2,r6,300c <memset+0x18>
    3004:	2084703a 	and	r2,r4,r2
    3008:	10000826 	beq	r2,zero,302c <memset+0x38>
    300c:	30000526 	beq	r6,zero,3024 <memset+0x30>
    3010:	2805883a 	mov	r2,r5
    3014:	30cd883a 	add	r6,r6,r3
    3018:	18800005 	stb	r2,0(r3)
    301c:	18c00044 	addi	r3,r3,1
    3020:	19bffd1e 	bne	r3,r6,3018 <memset+0x24>
    3024:	2005883a 	mov	r2,r4
    3028:	f800283a 	ret
    302c:	2804923a 	slli	r2,r5,8
    3030:	020003c4 	movi	r8,15
    3034:	200f883a 	mov	r7,r4
    3038:	2884b03a 	or	r2,r5,r2
    303c:	1006943a 	slli	r3,r2,16
    3040:	10c6b03a 	or	r3,r2,r3
    3044:	41800a2e 	bgeu	r8,r6,3070 <memset+0x7c>
    3048:	4005883a 	mov	r2,r8
    304c:	31bffc04 	addi	r6,r6,-16
    3050:	38c00015 	stw	r3,0(r7)
    3054:	38c00115 	stw	r3,4(r7)
    3058:	38c00215 	stw	r3,8(r7)
    305c:	38c00315 	stw	r3,12(r7)
    3060:	39c00404 	addi	r7,r7,16
    3064:	11bff936 	bltu	r2,r6,304c <memset+0x58>
    3068:	008000c4 	movi	r2,3
    306c:	1180052e 	bgeu	r2,r6,3084 <memset+0x90>
    3070:	31bfff04 	addi	r6,r6,-4
    3074:	008000c4 	movi	r2,3
    3078:	38c00015 	stw	r3,0(r7)
    307c:	39c00104 	addi	r7,r7,4
    3080:	11bffb36 	bltu	r2,r6,3070 <memset+0x7c>
    3084:	3807883a 	mov	r3,r7
    3088:	003fe006 	br	300c <memset+0x18>

0000308c <_open_r>:
    308c:	defffd04 	addi	sp,sp,-12
    3090:	dc000015 	stw	r16,0(sp)
    3094:	04000074 	movhi	r16,1
    3098:	841de504 	addi	r16,r16,30612
    309c:	dc400115 	stw	r17,4(sp)
    30a0:	80000015 	stw	zero,0(r16)
    30a4:	2023883a 	mov	r17,r4
    30a8:	2809883a 	mov	r4,r5
    30ac:	300b883a 	mov	r5,r6
    30b0:	380d883a 	mov	r6,r7
    30b4:	dfc00215 	stw	ra,8(sp)
    30b8:	0010bb40 	call	10bb4 <open>
    30bc:	1007883a 	mov	r3,r2
    30c0:	00bfffc4 	movi	r2,-1
    30c4:	18800626 	beq	r3,r2,30e0 <_open_r+0x54>
    30c8:	1805883a 	mov	r2,r3
    30cc:	dfc00217 	ldw	ra,8(sp)
    30d0:	dc400117 	ldw	r17,4(sp)
    30d4:	dc000017 	ldw	r16,0(sp)
    30d8:	dec00304 	addi	sp,sp,12
    30dc:	f800283a 	ret
    30e0:	80800017 	ldw	r2,0(r16)
    30e4:	103ff826 	beq	r2,zero,30c8 <_open_r+0x3c>
    30e8:	88800015 	stw	r2,0(r17)
    30ec:	1805883a 	mov	r2,r3
    30f0:	dfc00217 	ldw	ra,8(sp)
    30f4:	dc400117 	ldw	r17,4(sp)
    30f8:	dc000017 	ldw	r16,0(sp)
    30fc:	dec00304 	addi	sp,sp,12
    3100:	f800283a 	ret

00003104 <printf>:
    3104:	defffb04 	addi	sp,sp,-20
    3108:	dfc00115 	stw	ra,4(sp)
    310c:	d9400215 	stw	r5,8(sp)
    3110:	d9800315 	stw	r6,12(sp)
    3114:	d9c00415 	stw	r7,16(sp)
    3118:	00800074 	movhi	r2,1
    311c:	10970104 	addi	r2,r2,23556
    3120:	10c00017 	ldw	r3,0(r2)
    3124:	200b883a 	mov	r5,r4
    3128:	d8800204 	addi	r2,sp,8
    312c:	19000217 	ldw	r4,8(r3)
    3130:	100d883a 	mov	r6,r2
    3134:	d8800015 	stw	r2,0(sp)
    3138:	000554c0 	call	554c <__vfprintf_internal>
    313c:	dfc00117 	ldw	ra,4(sp)
    3140:	dec00504 	addi	sp,sp,20
    3144:	f800283a 	ret

00003148 <_printf_r>:
    3148:	defffc04 	addi	sp,sp,-16
    314c:	dfc00115 	stw	ra,4(sp)
    3150:	d9800215 	stw	r6,8(sp)
    3154:	d9c00315 	stw	r7,12(sp)
    3158:	280d883a 	mov	r6,r5
    315c:	21400217 	ldw	r5,8(r4)
    3160:	d8c00204 	addi	r3,sp,8
    3164:	180f883a 	mov	r7,r3
    3168:	d8c00015 	stw	r3,0(sp)
    316c:	00036a00 	call	36a0 <___vfprintf_internal_r>
    3170:	dfc00117 	ldw	ra,4(sp)
    3174:	dec00404 	addi	sp,sp,16
    3178:	f800283a 	ret

0000317c <_puts_r>:
    317c:	defff604 	addi	sp,sp,-40
    3180:	dc400715 	stw	r17,28(sp)
    3184:	2023883a 	mov	r17,r4
    3188:	2809883a 	mov	r4,r5
    318c:	dfc00915 	stw	ra,36(sp)
    3190:	dcc00815 	stw	r19,32(sp)
    3194:	2827883a 	mov	r19,r5
    3198:	00035cc0 	call	35cc <strlen>
    319c:	89400217 	ldw	r5,8(r17)
    31a0:	00c00074 	movhi	r3,1
    31a4:	18ced304 	addi	r3,r3,15180
    31a8:	01c00044 	movi	r7,1
    31ac:	12000044 	addi	r8,r2,1
    31b0:	d8c00515 	stw	r3,20(sp)
    31b4:	d9c00615 	stw	r7,24(sp)
    31b8:	d8c00304 	addi	r3,sp,12
    31bc:	01c00084 	movi	r7,2
    31c0:	8809883a 	mov	r4,r17
    31c4:	d80d883a 	mov	r6,sp
    31c8:	d8c00015 	stw	r3,0(sp)
    31cc:	dcc00315 	stw	r19,12(sp)
    31d0:	da000215 	stw	r8,8(sp)
    31d4:	d9c00115 	stw	r7,4(sp)
    31d8:	d8800415 	stw	r2,16(sp)
    31dc:	00087800 	call	8780 <__sfvwrite_r>
    31e0:	00ffffc4 	movi	r3,-1
    31e4:	10000626 	beq	r2,zero,3200 <_puts_r+0x84>
    31e8:	1805883a 	mov	r2,r3
    31ec:	dfc00917 	ldw	ra,36(sp)
    31f0:	dcc00817 	ldw	r19,32(sp)
    31f4:	dc400717 	ldw	r17,28(sp)
    31f8:	dec00a04 	addi	sp,sp,40
    31fc:	f800283a 	ret
    3200:	00c00284 	movi	r3,10
    3204:	1805883a 	mov	r2,r3
    3208:	dfc00917 	ldw	ra,36(sp)
    320c:	dcc00817 	ldw	r19,32(sp)
    3210:	dc400717 	ldw	r17,28(sp)
    3214:	dec00a04 	addi	sp,sp,40
    3218:	f800283a 	ret

0000321c <puts>:
    321c:	00800074 	movhi	r2,1
    3220:	10970104 	addi	r2,r2,23556
    3224:	200b883a 	mov	r5,r4
    3228:	11000017 	ldw	r4,0(r2)
    322c:	000317c1 	jmpi	317c <_puts_r>

00003230 <__srefill_r>:
    3230:	defffd04 	addi	sp,sp,-12
    3234:	dc400115 	stw	r17,4(sp)
    3238:	dc000015 	stw	r16,0(sp)
    323c:	dfc00215 	stw	ra,8(sp)
    3240:	2023883a 	mov	r17,r4
    3244:	2821883a 	mov	r16,r5
    3248:	20000226 	beq	r4,zero,3254 <__srefill_r+0x24>
    324c:	20800e17 	ldw	r2,56(r4)
    3250:	10004126 	beq	r2,zero,3358 <__srefill_r+0x128>
    3254:	80c0030b 	ldhu	r3,12(r16)
    3258:	80000115 	stw	zero,4(r16)
    325c:	1880080c 	andi	r2,r3,32
    3260:	1000361e 	bne	r2,zero,333c <__srefill_r+0x10c>
    3264:	1880010c 	andi	r2,r3,4
    3268:	1000211e 	bne	r2,zero,32f0 <__srefill_r+0xc0>
    326c:	1880040c 	andi	r2,r3,16
    3270:	10005026 	beq	r2,zero,33b4 <__srefill_r+0x184>
    3274:	1880020c 	andi	r2,r3,8
    3278:	1000541e 	bne	r2,zero,33cc <__srefill_r+0x19c>
    327c:	8080030b 	ldhu	r2,12(r16)
    3280:	10800114 	ori	r2,r2,4
    3284:	8080030d 	sth	r2,12(r16)
    3288:	80800417 	ldw	r2,16(r16)
    328c:	10004526 	beq	r2,zero,33a4 <__srefill_r+0x174>
    3290:	8080030b 	ldhu	r2,12(r16)
    3294:	108000cc 	andi	r2,r2,3
    3298:	1000361e 	bne	r2,zero,3374 <__srefill_r+0x144>
    329c:	81800417 	ldw	r6,16(r16)
    32a0:	80c00817 	ldw	r3,32(r16)
    32a4:	81400717 	ldw	r5,28(r16)
    32a8:	81c00517 	ldw	r7,20(r16)
    32ac:	8809883a 	mov	r4,r17
    32b0:	81800015 	stw	r6,0(r16)
    32b4:	183ee83a 	callr	r3
    32b8:	80c0030b 	ldhu	r3,12(r16)
    32bc:	1009883a 	mov	r4,r2
    32c0:	80800115 	stw	r2,4(r16)
    32c4:	00b7ffc4 	movi	r2,-8193
    32c8:	1884703a 	and	r2,r3,r2
    32cc:	8080030d 	sth	r2,12(r16)
    32d0:	0100230e 	bge	zero,r4,3360 <__srefill_r+0x130>
    32d4:	0009883a 	mov	r4,zero
    32d8:	2005883a 	mov	r2,r4
    32dc:	dfc00217 	ldw	ra,8(sp)
    32e0:	dc400117 	ldw	r17,4(sp)
    32e4:	dc000017 	ldw	r16,0(sp)
    32e8:	dec00304 	addi	sp,sp,12
    32ec:	f800283a 	ret
    32f0:	81400c17 	ldw	r5,48(r16)
    32f4:	283fe426 	beq	r5,zero,3288 <__srefill_r+0x58>
    32f8:	80801004 	addi	r2,r16,64
    32fc:	28800226 	beq	r5,r2,3308 <__srefill_r+0xd8>
    3300:	8809883a 	mov	r4,r17
    3304:	0001c840 	call	1c84 <_free_r>
    3308:	80800f17 	ldw	r2,60(r16)
    330c:	80000c15 	stw	zero,48(r16)
    3310:	80800115 	stw	r2,4(r16)
    3314:	103fdc26 	beq	r2,zero,3288 <__srefill_r+0x58>
    3318:	80800e17 	ldw	r2,56(r16)
    331c:	0009883a 	mov	r4,zero
    3320:	80800015 	stw	r2,0(r16)
    3324:	2005883a 	mov	r2,r4
    3328:	dfc00217 	ldw	ra,8(sp)
    332c:	dc400117 	ldw	r17,4(sp)
    3330:	dc000017 	ldw	r16,0(sp)
    3334:	dec00304 	addi	sp,sp,12
    3338:	f800283a 	ret
    333c:	013fffc4 	movi	r4,-1
    3340:	2005883a 	mov	r2,r4
    3344:	dfc00217 	ldw	ra,8(sp)
    3348:	dc400117 	ldw	r17,4(sp)
    334c:	dc000017 	ldw	r16,0(sp)
    3350:	dec00304 	addi	sp,sp,12
    3354:	f800283a 	ret
    3358:	00015b40 	call	15b4 <__sinit>
    335c:	003fbd06 	br	3254 <__srefill_r+0x24>
    3360:	20000b1e 	bne	r4,zero,3390 <__srefill_r+0x160>
    3364:	10800814 	ori	r2,r2,32
    3368:	013fffc4 	movi	r4,-1
    336c:	8080030d 	sth	r2,12(r16)
    3370:	003fd906 	br	32d8 <__srefill_r+0xa8>
    3374:	00800074 	movhi	r2,1
    3378:	10970204 	addi	r2,r2,23560
    337c:	11000017 	ldw	r4,0(r2)
    3380:	01400034 	movhi	r5,0
    3384:	294cfd04 	addi	r5,r5,13300
    3388:	00025a00 	call	25a0 <_fwalk>
    338c:	003fc306 	br	329c <__srefill_r+0x6c>
    3390:	10801014 	ori	r2,r2,64
    3394:	013fffc4 	movi	r4,-1
    3398:	8080030d 	sth	r2,12(r16)
    339c:	80000115 	stw	zero,4(r16)
    33a0:	003fcd06 	br	32d8 <__srefill_r+0xa8>
    33a4:	8809883a 	mov	r4,r17
    33a8:	800b883a 	mov	r5,r16
    33ac:	00026580 	call	2658 <__smakebuf_r>
    33b0:	003fb706 	br	3290 <__srefill_r+0x60>
    33b4:	18c01014 	ori	r3,r3,64
    33b8:	00800244 	movi	r2,9
    33bc:	013fffc4 	movi	r4,-1
    33c0:	88800015 	stw	r2,0(r17)
    33c4:	80c0030d 	sth	r3,12(r16)
    33c8:	003fc306 	br	32d8 <__srefill_r+0xa8>
    33cc:	8809883a 	mov	r4,r17
    33d0:	800b883a 	mov	r5,r16
    33d4:	000131c0 	call	131c <_fflush_r>
    33d8:	103fd81e 	bne	r2,zero,333c <__srefill_r+0x10c>
    33dc:	8080030b 	ldhu	r2,12(r16)
    33e0:	80000215 	stw	zero,8(r16)
    33e4:	80000615 	stw	zero,24(r16)
    33e8:	10bffdcc 	andi	r2,r2,65527
    33ec:	8080030d 	sth	r2,12(r16)
    33f0:	003fa206 	br	327c <__srefill_r+0x4c>

000033f4 <lflush>:
    33f4:	20c0030b 	ldhu	r3,12(r4)
    33f8:	01400244 	movi	r5,9
    33fc:	0005883a 	mov	r2,zero
    3400:	18c0024c 	andi	r3,r3,9
    3404:	19400126 	beq	r3,r5,340c <lflush+0x18>
    3408:	f800283a 	ret
    340c:	00015181 	jmpi	1518 <fflush>

00003410 <_sbrk_r>:
    3410:	defffd04 	addi	sp,sp,-12
    3414:	dc000015 	stw	r16,0(sp)
    3418:	04000074 	movhi	r16,1
    341c:	841de504 	addi	r16,r16,30612
    3420:	dc400115 	stw	r17,4(sp)
    3424:	80000015 	stw	zero,0(r16)
    3428:	2023883a 	mov	r17,r4
    342c:	2809883a 	mov	r4,r5
    3430:	dfc00215 	stw	ra,8(sp)
    3434:	0010f7c0 	call	10f7c <sbrk>
    3438:	1007883a 	mov	r3,r2
    343c:	00bfffc4 	movi	r2,-1
    3440:	18800626 	beq	r3,r2,345c <_sbrk_r+0x4c>
    3444:	1805883a 	mov	r2,r3
    3448:	dfc00217 	ldw	ra,8(sp)
    344c:	dc400117 	ldw	r17,4(sp)
    3450:	dc000017 	ldw	r16,0(sp)
    3454:	dec00304 	addi	sp,sp,12
    3458:	f800283a 	ret
    345c:	80800017 	ldw	r2,0(r16)
    3460:	103ff826 	beq	r2,zero,3444 <_sbrk_r+0x34>
    3464:	88800015 	stw	r2,0(r17)
    3468:	1805883a 	mov	r2,r3
    346c:	dfc00217 	ldw	ra,8(sp)
    3470:	dc400117 	ldw	r17,4(sp)
    3474:	dc000017 	ldw	r16,0(sp)
    3478:	dec00304 	addi	sp,sp,12
    347c:	f800283a 	ret

00003480 <__sclose>:
    3480:	2940038f 	ldh	r5,14(r5)
    3484:	0006ea41 	jmpi	6ea4 <_close_r>

00003488 <__sseek>:
    3488:	defffe04 	addi	sp,sp,-8
    348c:	dc000015 	stw	r16,0(sp)
    3490:	2821883a 	mov	r16,r5
    3494:	2940038f 	ldh	r5,14(r5)
    3498:	dfc00115 	stw	ra,4(sp)
    349c:	0008d7c0 	call	8d7c <_lseek_r>
    34a0:	1007883a 	mov	r3,r2
    34a4:	00bfffc4 	movi	r2,-1
    34a8:	18800926 	beq	r3,r2,34d0 <__sseek+0x48>
    34ac:	8080030b 	ldhu	r2,12(r16)
    34b0:	80c01415 	stw	r3,80(r16)
    34b4:	10840014 	ori	r2,r2,4096
    34b8:	8080030d 	sth	r2,12(r16)
    34bc:	1805883a 	mov	r2,r3
    34c0:	dfc00117 	ldw	ra,4(sp)
    34c4:	dc000017 	ldw	r16,0(sp)
    34c8:	dec00204 	addi	sp,sp,8
    34cc:	f800283a 	ret
    34d0:	8080030b 	ldhu	r2,12(r16)
    34d4:	10bbffcc 	andi	r2,r2,61439
    34d8:	8080030d 	sth	r2,12(r16)
    34dc:	1805883a 	mov	r2,r3
    34e0:	dfc00117 	ldw	ra,4(sp)
    34e4:	dc000017 	ldw	r16,0(sp)
    34e8:	dec00204 	addi	sp,sp,8
    34ec:	f800283a 	ret

000034f0 <__swrite>:
    34f0:	2880030b 	ldhu	r2,12(r5)
    34f4:	defffb04 	addi	sp,sp,-20
    34f8:	dcc00315 	stw	r19,12(sp)
    34fc:	1080400c 	andi	r2,r2,256
    3500:	dc800215 	stw	r18,8(sp)
    3504:	dc400115 	stw	r17,4(sp)
    3508:	dc000015 	stw	r16,0(sp)
    350c:	3027883a 	mov	r19,r6
    3510:	3825883a 	mov	r18,r7
    3514:	dfc00415 	stw	ra,16(sp)
    3518:	2821883a 	mov	r16,r5
    351c:	000d883a 	mov	r6,zero
    3520:	01c00084 	movi	r7,2
    3524:	2023883a 	mov	r17,r4
    3528:	10000226 	beq	r2,zero,3534 <__swrite+0x44>
    352c:	2940038f 	ldh	r5,14(r5)
    3530:	0008d7c0 	call	8d7c <_lseek_r>
    3534:	8080030b 	ldhu	r2,12(r16)
    3538:	8140038f 	ldh	r5,14(r16)
    353c:	8809883a 	mov	r4,r17
    3540:	10bbffcc 	andi	r2,r2,61439
    3544:	980d883a 	mov	r6,r19
    3548:	900f883a 	mov	r7,r18
    354c:	8080030d 	sth	r2,12(r16)
    3550:	dfc00417 	ldw	ra,16(sp)
    3554:	dcc00317 	ldw	r19,12(sp)
    3558:	dc800217 	ldw	r18,8(sp)
    355c:	dc400117 	ldw	r17,4(sp)
    3560:	dc000017 	ldw	r16,0(sp)
    3564:	dec00504 	addi	sp,sp,20
    3568:	0006cf01 	jmpi	6cf0 <_write_r>

0000356c <__sread>:
    356c:	defffe04 	addi	sp,sp,-8
    3570:	dc000015 	stw	r16,0(sp)
    3574:	2821883a 	mov	r16,r5
    3578:	2940038f 	ldh	r5,14(r5)
    357c:	dfc00115 	stw	ra,4(sp)
    3580:	000a0ac0 	call	a0ac <_read_r>
    3584:	1007883a 	mov	r3,r2
    3588:	10000816 	blt	r2,zero,35ac <__sread+0x40>
    358c:	80801417 	ldw	r2,80(r16)
    3590:	10c5883a 	add	r2,r2,r3
    3594:	80801415 	stw	r2,80(r16)
    3598:	1805883a 	mov	r2,r3
    359c:	dfc00117 	ldw	ra,4(sp)
    35a0:	dc000017 	ldw	r16,0(sp)
    35a4:	dec00204 	addi	sp,sp,8
    35a8:	f800283a 	ret
    35ac:	8080030b 	ldhu	r2,12(r16)
    35b0:	10bbffcc 	andi	r2,r2,61439
    35b4:	8080030d 	sth	r2,12(r16)
    35b8:	1805883a 	mov	r2,r3
    35bc:	dfc00117 	ldw	ra,4(sp)
    35c0:	dc000017 	ldw	r16,0(sp)
    35c4:	dec00204 	addi	sp,sp,8
    35c8:	f800283a 	ret

000035cc <strlen>:
    35cc:	208000cc 	andi	r2,r4,3
    35d0:	2011883a 	mov	r8,r4
    35d4:	1000161e 	bne	r2,zero,3630 <strlen+0x64>
    35d8:	20c00017 	ldw	r3,0(r4)
    35dc:	017fbff4 	movhi	r5,65279
    35e0:	297fbfc4 	addi	r5,r5,-257
    35e4:	01e02074 	movhi	r7,32897
    35e8:	39e02004 	addi	r7,r7,-32640
    35ec:	1945883a 	add	r2,r3,r5
    35f0:	11c4703a 	and	r2,r2,r7
    35f4:	00c6303a 	nor	r3,zero,r3
    35f8:	1886703a 	and	r3,r3,r2
    35fc:	18000c1e 	bne	r3,zero,3630 <strlen+0x64>
    3600:	280d883a 	mov	r6,r5
    3604:	380b883a 	mov	r5,r7
    3608:	21000104 	addi	r4,r4,4
    360c:	20800017 	ldw	r2,0(r4)
    3610:	1187883a 	add	r3,r2,r6
    3614:	1946703a 	and	r3,r3,r5
    3618:	0084303a 	nor	r2,zero,r2
    361c:	10c4703a 	and	r2,r2,r3
    3620:	103ff926 	beq	r2,zero,3608 <strlen+0x3c>
    3624:	20800007 	ldb	r2,0(r4)
    3628:	10000326 	beq	r2,zero,3638 <strlen+0x6c>
    362c:	21000044 	addi	r4,r4,1
    3630:	20800007 	ldb	r2,0(r4)
    3634:	103ffd1e 	bne	r2,zero,362c <strlen+0x60>
    3638:	2205c83a 	sub	r2,r4,r8
    363c:	f800283a 	ret

00003640 <_times_r>:
    3640:	2809883a 	mov	r4,r5
    3644:	00110381 	jmpi	11038 <times>

00003648 <__sprint_r>:
    3648:	30800217 	ldw	r2,8(r6)
    364c:	defffe04 	addi	sp,sp,-8
    3650:	dc000015 	stw	r16,0(sp)
    3654:	dfc00115 	stw	ra,4(sp)
    3658:	3021883a 	mov	r16,r6
    365c:	0007883a 	mov	r3,zero
    3660:	1000061e 	bne	r2,zero,367c <__sprint_r+0x34>
    3664:	1805883a 	mov	r2,r3
    3668:	30000115 	stw	zero,4(r6)
    366c:	dfc00117 	ldw	ra,4(sp)
    3670:	dc000017 	ldw	r16,0(sp)
    3674:	dec00204 	addi	sp,sp,8
    3678:	f800283a 	ret
    367c:	00087800 	call	8780 <__sfvwrite_r>
    3680:	1007883a 	mov	r3,r2
    3684:	1805883a 	mov	r2,r3
    3688:	80000115 	stw	zero,4(r16)
    368c:	80000215 	stw	zero,8(r16)
    3690:	dfc00117 	ldw	ra,4(sp)
    3694:	dc000017 	ldw	r16,0(sp)
    3698:	dec00204 	addi	sp,sp,8
    369c:	f800283a 	ret

000036a0 <___vfprintf_internal_r>:
    36a0:	defea404 	addi	sp,sp,-1392
    36a4:	dd815815 	stw	r22,1376(sp)
    36a8:	dc015215 	stw	r16,1352(sp)
    36ac:	d9c15115 	stw	r7,1348(sp)
    36b0:	dfc15b15 	stw	ra,1388(sp)
    36b4:	df015a15 	stw	fp,1384(sp)
    36b8:	ddc15915 	stw	r23,1380(sp)
    36bc:	dd415715 	stw	r21,1372(sp)
    36c0:	dd015615 	stw	r20,1368(sp)
    36c4:	dcc15515 	stw	r19,1364(sp)
    36c8:	dc815415 	stw	r18,1360(sp)
    36cc:	dc415315 	stw	r17,1356(sp)
    36d0:	282d883a 	mov	r22,r5
    36d4:	3021883a 	mov	r16,r6
    36d8:	d9014f15 	stw	r4,1340(sp)
    36dc:	0008cc00 	call	8cc0 <_localeconv_r>
    36e0:	10800017 	ldw	r2,0(r2)
    36e4:	d9c15117 	ldw	r7,1348(sp)
    36e8:	d8814915 	stw	r2,1316(sp)
    36ec:	d8814f17 	ldw	r2,1340(sp)
    36f0:	10000226 	beq	r2,zero,36fc <___vfprintf_internal_r+0x5c>
    36f4:	10800e17 	ldw	r2,56(r2)
    36f8:	10020d26 	beq	r2,zero,3f30 <___vfprintf_internal_r+0x890>
    36fc:	b080030b 	ldhu	r2,12(r22)
    3700:	1080020c 	andi	r2,r2,8
    3704:	10020e26 	beq	r2,zero,3f40 <___vfprintf_internal_r+0x8a0>
    3708:	b0800417 	ldw	r2,16(r22)
    370c:	10020c26 	beq	r2,zero,3f40 <___vfprintf_internal_r+0x8a0>
    3710:	b200030b 	ldhu	r8,12(r22)
    3714:	00800284 	movi	r2,10
    3718:	40c0068c 	andi	r3,r8,26
    371c:	18802f1e 	bne	r3,r2,37dc <___vfprintf_internal_r+0x13c>
    3720:	b080038f 	ldh	r2,14(r22)
    3724:	10002d16 	blt	r2,zero,37dc <___vfprintf_internal_r+0x13c>
    3728:	b240038b 	ldhu	r9,14(r22)
    372c:	b2800717 	ldw	r10,28(r22)
    3730:	b2c00917 	ldw	r11,36(r22)
    3734:	d9014f17 	ldw	r4,1340(sp)
    3738:	dc402904 	addi	r17,sp,164
    373c:	d8804004 	addi	r2,sp,256
    3740:	00c10004 	movi	r3,1024
    3744:	423fff4c 	andi	r8,r8,65533
    3748:	800d883a 	mov	r6,r16
    374c:	880b883a 	mov	r5,r17
    3750:	da002c0d 	sth	r8,176(sp)
    3754:	da402c8d 	sth	r9,178(sp)
    3758:	da803015 	stw	r10,192(sp)
    375c:	dac03215 	stw	r11,200(sp)
    3760:	d8802d15 	stw	r2,180(sp)
    3764:	d8c02e15 	stw	r3,184(sp)
    3768:	d8802915 	stw	r2,164(sp)
    376c:	d8c02b15 	stw	r3,172(sp)
    3770:	d8002f15 	stw	zero,188(sp)
    3774:	00036a00 	call	36a0 <___vfprintf_internal_r>
    3778:	d8814b15 	stw	r2,1324(sp)
    377c:	10000416 	blt	r2,zero,3790 <___vfprintf_internal_r+0xf0>
    3780:	d9014f17 	ldw	r4,1340(sp)
    3784:	880b883a 	mov	r5,r17
    3788:	000131c0 	call	131c <_fflush_r>
    378c:	1002321e 	bne	r2,zero,4058 <___vfprintf_internal_r+0x9b8>
    3790:	d8802c0b 	ldhu	r2,176(sp)
    3794:	1080100c 	andi	r2,r2,64
    3798:	10000326 	beq	r2,zero,37a8 <___vfprintf_internal_r+0x108>
    379c:	b080030b 	ldhu	r2,12(r22)
    37a0:	10801014 	ori	r2,r2,64
    37a4:	b080030d 	sth	r2,12(r22)
    37a8:	d8814b17 	ldw	r2,1324(sp)
    37ac:	dfc15b17 	ldw	ra,1388(sp)
    37b0:	df015a17 	ldw	fp,1384(sp)
    37b4:	ddc15917 	ldw	r23,1380(sp)
    37b8:	dd815817 	ldw	r22,1376(sp)
    37bc:	dd415717 	ldw	r21,1372(sp)
    37c0:	dd015617 	ldw	r20,1368(sp)
    37c4:	dcc15517 	ldw	r19,1364(sp)
    37c8:	dc815417 	ldw	r18,1360(sp)
    37cc:	dc415317 	ldw	r17,1356(sp)
    37d0:	dc015217 	ldw	r16,1352(sp)
    37d4:	dec15c04 	addi	sp,sp,1392
    37d8:	f800283a 	ret
    37dc:	0005883a 	mov	r2,zero
    37e0:	0007883a 	mov	r3,zero
    37e4:	dd401904 	addi	r21,sp,100
    37e8:	d8814215 	stw	r2,1288(sp)
    37ec:	802f883a 	mov	r23,r16
    37f0:	d8c14315 	stw	r3,1292(sp)
    37f4:	d8014b15 	stw	zero,1324(sp)
    37f8:	d8014815 	stw	zero,1312(sp)
    37fc:	d8014415 	stw	zero,1296(sp)
    3800:	d8014715 	stw	zero,1308(sp)
    3804:	dd400c15 	stw	r21,48(sp)
    3808:	d8000e15 	stw	zero,56(sp)
    380c:	d8000d15 	stw	zero,52(sp)
    3810:	b8800007 	ldb	r2,0(r23)
    3814:	10001926 	beq	r2,zero,387c <___vfprintf_internal_r+0x1dc>
    3818:	00c00944 	movi	r3,37
    381c:	10c01726 	beq	r2,r3,387c <___vfprintf_internal_r+0x1dc>
    3820:	b821883a 	mov	r16,r23
    3824:	00000106 	br	382c <___vfprintf_internal_r+0x18c>
    3828:	10c00326 	beq	r2,r3,3838 <___vfprintf_internal_r+0x198>
    382c:	84000044 	addi	r16,r16,1
    3830:	80800007 	ldb	r2,0(r16)
    3834:	103ffc1e 	bne	r2,zero,3828 <___vfprintf_internal_r+0x188>
    3838:	85e7c83a 	sub	r19,r16,r23
    383c:	98000e26 	beq	r19,zero,3878 <___vfprintf_internal_r+0x1d8>
    3840:	dc800e17 	ldw	r18,56(sp)
    3844:	dc400d17 	ldw	r17,52(sp)
    3848:	008001c4 	movi	r2,7
    384c:	94e5883a 	add	r18,r18,r19
    3850:	8c400044 	addi	r17,r17,1
    3854:	adc00015 	stw	r23,0(r21)
    3858:	dc800e15 	stw	r18,56(sp)
    385c:	acc00115 	stw	r19,4(r21)
    3860:	dc400d15 	stw	r17,52(sp)
    3864:	14428b16 	blt	r2,r17,4294 <___vfprintf_internal_r+0xbf4>
    3868:	ad400204 	addi	r21,r21,8
    386c:	d9014b17 	ldw	r4,1324(sp)
    3870:	24c9883a 	add	r4,r4,r19
    3874:	d9014b15 	stw	r4,1324(sp)
    3878:	802f883a 	mov	r23,r16
    387c:	b8800007 	ldb	r2,0(r23)
    3880:	10013c26 	beq	r2,zero,3d74 <___vfprintf_internal_r+0x6d4>
    3884:	bdc00044 	addi	r23,r23,1
    3888:	d8000405 	stb	zero,16(sp)
    388c:	b8c00007 	ldb	r3,0(r23)
    3890:	04ffffc4 	movi	r19,-1
    3894:	d8014c15 	stw	zero,1328(sp)
    3898:	d8014a15 	stw	zero,1320(sp)
    389c:	d8c14d15 	stw	r3,1332(sp)
    38a0:	bdc00044 	addi	r23,r23,1
    38a4:	d9414d17 	ldw	r5,1332(sp)
    38a8:	00801604 	movi	r2,88
    38ac:	28fff804 	addi	r3,r5,-32
    38b0:	10c06036 	bltu	r2,r3,3a34 <___vfprintf_internal_r+0x394>
    38b4:	18c5883a 	add	r2,r3,r3
    38b8:	1085883a 	add	r2,r2,r2
    38bc:	00c00034 	movhi	r3,0
    38c0:	18ce3404 	addi	r3,r3,14544
    38c4:	10c5883a 	add	r2,r2,r3
    38c8:	11000017 	ldw	r4,0(r2)
    38cc:	2000683a 	jmp	r4
    38d0:	00004844 	movi	zero,289
    38d4:	00003a34 	movhi	zero,232
    38d8:	00003a34 	movhi	zero,232
    38dc:	00004830 	cmpltui	zero,zero,288
    38e0:	00003a34 	movhi	zero,232
    38e4:	00003a34 	movhi	zero,232
    38e8:	00003a34 	movhi	zero,232
    38ec:	00003a34 	movhi	zero,232
    38f0:	00003a34 	movhi	zero,232
    38f4:	00003a34 	movhi	zero,232
    38f8:	00004610 	cmplti	zero,zero,280
    38fc:	00004820 	cmpeqi	zero,zero,288
    3900:	00003a34 	movhi	zero,232
    3904:	00004628 	cmpgeui	zero,zero,280
    3908:	000048bc 	xorhi	zero,zero,290
    390c:	00003a34 	movhi	zero,232
    3910:	000048a8 	cmpgeui	zero,zero,290
    3914:	00004870 	cmpltui	zero,zero,289
    3918:	00004870 	cmpltui	zero,zero,289
    391c:	00004870 	cmpltui	zero,zero,289
    3920:	00004870 	cmpltui	zero,zero,289
    3924:	00004870 	cmpltui	zero,zero,289
    3928:	00004870 	cmpltui	zero,zero,289
    392c:	00004870 	cmpltui	zero,zero,289
    3930:	00004870 	cmpltui	zero,zero,289
    3934:	00004870 	cmpltui	zero,zero,289
    3938:	00003a34 	movhi	zero,232
    393c:	00003a34 	movhi	zero,232
    3940:	00003a34 	movhi	zero,232
    3944:	00003a34 	movhi	zero,232
    3948:	00003a34 	movhi	zero,232
    394c:	00003a34 	movhi	zero,232
    3950:	00003a34 	movhi	zero,232
    3954:	00003a34 	movhi	zero,232
    3958:	00003a34 	movhi	zero,232
    395c:	00003a34 	movhi	zero,232
    3960:	0000408c 	andi	zero,zero,258
    3964:	000046f8 	rdprs	zero,zero,283
    3968:	00003a34 	movhi	zero,232
    396c:	000046f8 	rdprs	zero,zero,283
    3970:	00003a34 	movhi	zero,232
    3974:	00003a34 	movhi	zero,232
    3978:	00003a34 	movhi	zero,232
    397c:	00003a34 	movhi	zero,232
    3980:	0000485c 	xori	zero,zero,289
    3984:	00003a34 	movhi	zero,232
    3988:	00003a34 	movhi	zero,232
    398c:	00004140 	call	414 <read_444_format+0x224>
    3990:	00003a34 	movhi	zero,232
    3994:	00003a34 	movhi	zero,232
    3998:	00003a34 	movhi	zero,232
    399c:	00003a34 	movhi	zero,232
    39a0:	00003a34 	movhi	zero,232
    39a4:	0000418c 	andi	zero,zero,262
    39a8:	00003a34 	movhi	zero,232
    39ac:	00003a34 	movhi	zero,232
    39b0:	000047ac 	andhi	zero,zero,286
    39b4:	00003a34 	movhi	zero,232
    39b8:	00003a34 	movhi	zero,232
    39bc:	00003a34 	movhi	zero,232
    39c0:	00003a34 	movhi	zero,232
    39c4:	00003a34 	movhi	zero,232
    39c8:	00003a34 	movhi	zero,232
    39cc:	00003a34 	movhi	zero,232
    39d0:	00003a34 	movhi	zero,232
    39d4:	00003a34 	movhi	zero,232
    39d8:	00003a34 	movhi	zero,232
    39dc:	00004780 	call	478 <read_444_format+0x288>
    39e0:	00004098 	cmpnei	zero,zero,258
    39e4:	000046f8 	rdprs	zero,zero,283
    39e8:	000046f8 	rdprs	zero,zero,283
    39ec:	000046f8 	rdprs	zero,zero,283
    39f0:	000046e4 	muli	zero,zero,283
    39f4:	00004098 	cmpnei	zero,zero,258
    39f8:	00003a34 	movhi	zero,232
    39fc:	00003a34 	movhi	zero,232
    3a00:	0000466c 	andhi	zero,zero,281
    3a04:	00003a34 	movhi	zero,232
    3a08:	0000463c 	xorhi	zero,zero,280
    3a0c:	0000414c 	andi	zero,zero,261
    3a10:	0000469c 	xori	zero,zero,282
    3a14:	00004688 	cmpgei	zero,zero,282
    3a18:	00003a34 	movhi	zero,232
    3a1c:	00004918 	cmpnei	zero,zero,292
    3a20:	00003a34 	movhi	zero,232
    3a24:	00004198 	cmpnei	zero,zero,262
    3a28:	00003a34 	movhi	zero,232
    3a2c:	00003a34 	movhi	zero,232
    3a30:	00004810 	cmplti	zero,zero,288
    3a34:	d9014d17 	ldw	r4,1332(sp)
    3a38:	2000ce26 	beq	r4,zero,3d74 <___vfprintf_internal_r+0x6d4>
    3a3c:	01400044 	movi	r5,1
    3a40:	d9800f04 	addi	r6,sp,60
    3a44:	d9c14015 	stw	r7,1280(sp)
    3a48:	d9414515 	stw	r5,1300(sp)
    3a4c:	d9814115 	stw	r6,1284(sp)
    3a50:	280f883a 	mov	r7,r5
    3a54:	d9000f05 	stb	r4,60(sp)
    3a58:	d8000405 	stb	zero,16(sp)
    3a5c:	d8014615 	stw	zero,1304(sp)
    3a60:	d8c14c17 	ldw	r3,1328(sp)
    3a64:	1880008c 	andi	r2,r3,2
    3a68:	1005003a 	cmpeq	r2,r2,zero
    3a6c:	d8815015 	stw	r2,1344(sp)
    3a70:	1000031e 	bne	r2,zero,3a80 <___vfprintf_internal_r+0x3e0>
    3a74:	d9014517 	ldw	r4,1300(sp)
    3a78:	21000084 	addi	r4,r4,2
    3a7c:	d9014515 	stw	r4,1300(sp)
    3a80:	d9414c17 	ldw	r5,1328(sp)
    3a84:	2940210c 	andi	r5,r5,132
    3a88:	d9414e15 	stw	r5,1336(sp)
    3a8c:	28002d1e 	bne	r5,zero,3b44 <___vfprintf_internal_r+0x4a4>
    3a90:	d9814a17 	ldw	r6,1320(sp)
    3a94:	d8814517 	ldw	r2,1300(sp)
    3a98:	30a1c83a 	sub	r16,r6,r2
    3a9c:	0400290e 	bge	zero,r16,3b44 <___vfprintf_internal_r+0x4a4>
    3aa0:	00800404 	movi	r2,16
    3aa4:	1404580e 	bge	r2,r16,4c08 <___vfprintf_internal_r+0x1568>
    3aa8:	dc800e17 	ldw	r18,56(sp)
    3aac:	dc400d17 	ldw	r17,52(sp)
    3ab0:	1027883a 	mov	r19,r2
    3ab4:	07000074 	movhi	fp,1
    3ab8:	e70eef84 	addi	fp,fp,15294
    3abc:	050001c4 	movi	r20,7
    3ac0:	00000306 	br	3ad0 <___vfprintf_internal_r+0x430>
    3ac4:	843ffc04 	addi	r16,r16,-16
    3ac8:	ad400204 	addi	r21,r21,8
    3acc:	9c00130e 	bge	r19,r16,3b1c <___vfprintf_internal_r+0x47c>
    3ad0:	94800404 	addi	r18,r18,16
    3ad4:	8c400044 	addi	r17,r17,1
    3ad8:	af000015 	stw	fp,0(r21)
    3adc:	acc00115 	stw	r19,4(r21)
    3ae0:	dc800e15 	stw	r18,56(sp)
    3ae4:	dc400d15 	stw	r17,52(sp)
    3ae8:	a47ff60e 	bge	r20,r17,3ac4 <___vfprintf_internal_r+0x424>
    3aec:	d9014f17 	ldw	r4,1340(sp)
    3af0:	b00b883a 	mov	r5,r22
    3af4:	d9800c04 	addi	r6,sp,48
    3af8:	d9c15115 	stw	r7,1348(sp)
    3afc:	00036480 	call	3648 <__sprint_r>
    3b00:	d9c15117 	ldw	r7,1348(sp)
    3b04:	10009e1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    3b08:	843ffc04 	addi	r16,r16,-16
    3b0c:	dc800e17 	ldw	r18,56(sp)
    3b10:	dc400d17 	ldw	r17,52(sp)
    3b14:	dd401904 	addi	r21,sp,100
    3b18:	9c3fed16 	blt	r19,r16,3ad0 <___vfprintf_internal_r+0x430>
    3b1c:	9425883a 	add	r18,r18,r16
    3b20:	8c400044 	addi	r17,r17,1
    3b24:	008001c4 	movi	r2,7
    3b28:	af000015 	stw	fp,0(r21)
    3b2c:	ac000115 	stw	r16,4(r21)
    3b30:	dc800e15 	stw	r18,56(sp)
    3b34:	dc400d15 	stw	r17,52(sp)
    3b38:	1441f516 	blt	r2,r17,4310 <___vfprintf_internal_r+0xc70>
    3b3c:	ad400204 	addi	r21,r21,8
    3b40:	00000206 	br	3b4c <___vfprintf_internal_r+0x4ac>
    3b44:	dc800e17 	ldw	r18,56(sp)
    3b48:	dc400d17 	ldw	r17,52(sp)
    3b4c:	d8800407 	ldb	r2,16(sp)
    3b50:	10000b26 	beq	r2,zero,3b80 <___vfprintf_internal_r+0x4e0>
    3b54:	00800044 	movi	r2,1
    3b58:	94800044 	addi	r18,r18,1
    3b5c:	8c400044 	addi	r17,r17,1
    3b60:	a8800115 	stw	r2,4(r21)
    3b64:	d8c00404 	addi	r3,sp,16
    3b68:	008001c4 	movi	r2,7
    3b6c:	a8c00015 	stw	r3,0(r21)
    3b70:	dc800e15 	stw	r18,56(sp)
    3b74:	dc400d15 	stw	r17,52(sp)
    3b78:	1441da16 	blt	r2,r17,42e4 <___vfprintf_internal_r+0xc44>
    3b7c:	ad400204 	addi	r21,r21,8
    3b80:	d9015017 	ldw	r4,1344(sp)
    3b84:	20000b1e 	bne	r4,zero,3bb4 <___vfprintf_internal_r+0x514>
    3b88:	d8800444 	addi	r2,sp,17
    3b8c:	94800084 	addi	r18,r18,2
    3b90:	8c400044 	addi	r17,r17,1
    3b94:	a8800015 	stw	r2,0(r21)
    3b98:	00c00084 	movi	r3,2
    3b9c:	008001c4 	movi	r2,7
    3ba0:	a8c00115 	stw	r3,4(r21)
    3ba4:	dc800e15 	stw	r18,56(sp)
    3ba8:	dc400d15 	stw	r17,52(sp)
    3bac:	1441c216 	blt	r2,r17,42b8 <___vfprintf_internal_r+0xc18>
    3bb0:	ad400204 	addi	r21,r21,8
    3bb4:	d9414e17 	ldw	r5,1336(sp)
    3bb8:	00802004 	movi	r2,128
    3bbc:	2880b126 	beq	r5,r2,3e84 <___vfprintf_internal_r+0x7e4>
    3bc0:	d8c14617 	ldw	r3,1304(sp)
    3bc4:	19e1c83a 	sub	r16,r3,r7
    3bc8:	0400260e 	bge	zero,r16,3c64 <___vfprintf_internal_r+0x5c4>
    3bcc:	00800404 	movi	r2,16
    3bd0:	1403c90e 	bge	r2,r16,4af8 <___vfprintf_internal_r+0x1458>
    3bd4:	1027883a 	mov	r19,r2
    3bd8:	07000074 	movhi	fp,1
    3bdc:	e70eeb84 	addi	fp,fp,15278
    3be0:	050001c4 	movi	r20,7
    3be4:	00000306 	br	3bf4 <___vfprintf_internal_r+0x554>
    3be8:	843ffc04 	addi	r16,r16,-16
    3bec:	ad400204 	addi	r21,r21,8
    3bf0:	9c00130e 	bge	r19,r16,3c40 <___vfprintf_internal_r+0x5a0>
    3bf4:	94800404 	addi	r18,r18,16
    3bf8:	8c400044 	addi	r17,r17,1
    3bfc:	af000015 	stw	fp,0(r21)
    3c00:	acc00115 	stw	r19,4(r21)
    3c04:	dc800e15 	stw	r18,56(sp)
    3c08:	dc400d15 	stw	r17,52(sp)
    3c0c:	a47ff60e 	bge	r20,r17,3be8 <___vfprintf_internal_r+0x548>
    3c10:	d9014f17 	ldw	r4,1340(sp)
    3c14:	b00b883a 	mov	r5,r22
    3c18:	d9800c04 	addi	r6,sp,48
    3c1c:	d9c15115 	stw	r7,1348(sp)
    3c20:	00036480 	call	3648 <__sprint_r>
    3c24:	d9c15117 	ldw	r7,1348(sp)
    3c28:	1000551e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    3c2c:	843ffc04 	addi	r16,r16,-16
    3c30:	dc800e17 	ldw	r18,56(sp)
    3c34:	dc400d17 	ldw	r17,52(sp)
    3c38:	dd401904 	addi	r21,sp,100
    3c3c:	9c3fed16 	blt	r19,r16,3bf4 <___vfprintf_internal_r+0x554>
    3c40:	9425883a 	add	r18,r18,r16
    3c44:	8c400044 	addi	r17,r17,1
    3c48:	008001c4 	movi	r2,7
    3c4c:	af000015 	stw	fp,0(r21)
    3c50:	ac000115 	stw	r16,4(r21)
    3c54:	dc800e15 	stw	r18,56(sp)
    3c58:	dc400d15 	stw	r17,52(sp)
    3c5c:	14418216 	blt	r2,r17,4268 <___vfprintf_internal_r+0xbc8>
    3c60:	ad400204 	addi	r21,r21,8
    3c64:	d9014c17 	ldw	r4,1328(sp)
    3c68:	2080400c 	andi	r2,r4,256
    3c6c:	10004a1e 	bne	r2,zero,3d98 <___vfprintf_internal_r+0x6f8>
    3c70:	d9414117 	ldw	r5,1284(sp)
    3c74:	91e5883a 	add	r18,r18,r7
    3c78:	8c400044 	addi	r17,r17,1
    3c7c:	008001c4 	movi	r2,7
    3c80:	a9400015 	stw	r5,0(r21)
    3c84:	a9c00115 	stw	r7,4(r21)
    3c88:	dc800e15 	stw	r18,56(sp)
    3c8c:	dc400d15 	stw	r17,52(sp)
    3c90:	14416716 	blt	r2,r17,4230 <___vfprintf_internal_r+0xb90>
    3c94:	a8c00204 	addi	r3,r21,8
    3c98:	d9814c17 	ldw	r6,1328(sp)
    3c9c:	3080010c 	andi	r2,r6,4
    3ca0:	10002826 	beq	r2,zero,3d44 <___vfprintf_internal_r+0x6a4>
    3ca4:	d8814a17 	ldw	r2,1320(sp)
    3ca8:	d9014517 	ldw	r4,1300(sp)
    3cac:	1121c83a 	sub	r16,r2,r4
    3cb0:	0400240e 	bge	zero,r16,3d44 <___vfprintf_internal_r+0x6a4>
    3cb4:	00800404 	movi	r2,16
    3cb8:	14044f0e 	bge	r2,r16,4df8 <___vfprintf_internal_r+0x1758>
    3cbc:	dc400d17 	ldw	r17,52(sp)
    3cc0:	1027883a 	mov	r19,r2
    3cc4:	07000074 	movhi	fp,1
    3cc8:	e70eef84 	addi	fp,fp,15294
    3ccc:	050001c4 	movi	r20,7
    3cd0:	00000306 	br	3ce0 <___vfprintf_internal_r+0x640>
    3cd4:	843ffc04 	addi	r16,r16,-16
    3cd8:	18c00204 	addi	r3,r3,8
    3cdc:	9c00110e 	bge	r19,r16,3d24 <___vfprintf_internal_r+0x684>
    3ce0:	94800404 	addi	r18,r18,16
    3ce4:	8c400044 	addi	r17,r17,1
    3ce8:	1f000015 	stw	fp,0(r3)
    3cec:	1cc00115 	stw	r19,4(r3)
    3cf0:	dc800e15 	stw	r18,56(sp)
    3cf4:	dc400d15 	stw	r17,52(sp)
    3cf8:	a47ff60e 	bge	r20,r17,3cd4 <___vfprintf_internal_r+0x634>
    3cfc:	d9014f17 	ldw	r4,1340(sp)
    3d00:	b00b883a 	mov	r5,r22
    3d04:	d9800c04 	addi	r6,sp,48
    3d08:	00036480 	call	3648 <__sprint_r>
    3d0c:	10001c1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    3d10:	843ffc04 	addi	r16,r16,-16
    3d14:	dc800e17 	ldw	r18,56(sp)
    3d18:	dc400d17 	ldw	r17,52(sp)
    3d1c:	d8c01904 	addi	r3,sp,100
    3d20:	9c3fef16 	blt	r19,r16,3ce0 <___vfprintf_internal_r+0x640>
    3d24:	9425883a 	add	r18,r18,r16
    3d28:	8c400044 	addi	r17,r17,1
    3d2c:	008001c4 	movi	r2,7
    3d30:	1f000015 	stw	fp,0(r3)
    3d34:	1c000115 	stw	r16,4(r3)
    3d38:	dc800e15 	stw	r18,56(sp)
    3d3c:	dc400d15 	stw	r17,52(sp)
    3d40:	1440cb16 	blt	r2,r17,4070 <___vfprintf_internal_r+0x9d0>
    3d44:	d8814a17 	ldw	r2,1320(sp)
    3d48:	d9414517 	ldw	r5,1300(sp)
    3d4c:	1140010e 	bge	r2,r5,3d54 <___vfprintf_internal_r+0x6b4>
    3d50:	2805883a 	mov	r2,r5
    3d54:	d9814b17 	ldw	r6,1324(sp)
    3d58:	308d883a 	add	r6,r6,r2
    3d5c:	d9814b15 	stw	r6,1324(sp)
    3d60:	90013b1e 	bne	r18,zero,4250 <___vfprintf_internal_r+0xbb0>
    3d64:	d9c14017 	ldw	r7,1280(sp)
    3d68:	dd401904 	addi	r21,sp,100
    3d6c:	d8000d15 	stw	zero,52(sp)
    3d70:	003ea706 	br	3810 <___vfprintf_internal_r+0x170>
    3d74:	d8800e17 	ldw	r2,56(sp)
    3d78:	10053f1e 	bne	r2,zero,5278 <___vfprintf_internal_r+0x1bd8>
    3d7c:	d8000d15 	stw	zero,52(sp)
    3d80:	b080030b 	ldhu	r2,12(r22)
    3d84:	1080100c 	andi	r2,r2,64
    3d88:	103e8726 	beq	r2,zero,37a8 <___vfprintf_internal_r+0x108>
    3d8c:	00bfffc4 	movi	r2,-1
    3d90:	d8814b15 	stw	r2,1324(sp)
    3d94:	003e8406 	br	37a8 <___vfprintf_internal_r+0x108>
    3d98:	d9814d17 	ldw	r6,1332(sp)
    3d9c:	00801944 	movi	r2,101
    3da0:	11806e16 	blt	r2,r6,3f5c <___vfprintf_internal_r+0x8bc>
    3da4:	d9414717 	ldw	r5,1308(sp)
    3da8:	00c00044 	movi	r3,1
    3dac:	1943430e 	bge	r3,r5,4abc <___vfprintf_internal_r+0x141c>
    3db0:	d8814117 	ldw	r2,1284(sp)
    3db4:	94800044 	addi	r18,r18,1
    3db8:	8c400044 	addi	r17,r17,1
    3dbc:	a8800015 	stw	r2,0(r21)
    3dc0:	008001c4 	movi	r2,7
    3dc4:	a8c00115 	stw	r3,4(r21)
    3dc8:	dc800e15 	stw	r18,56(sp)
    3dcc:	dc400d15 	stw	r17,52(sp)
    3dd0:	1441ca16 	blt	r2,r17,44fc <___vfprintf_internal_r+0xe5c>
    3dd4:	a8c00204 	addi	r3,r21,8
    3dd8:	d9014917 	ldw	r4,1316(sp)
    3ddc:	00800044 	movi	r2,1
    3de0:	94800044 	addi	r18,r18,1
    3de4:	8c400044 	addi	r17,r17,1
    3de8:	18800115 	stw	r2,4(r3)
    3dec:	008001c4 	movi	r2,7
    3df0:	19000015 	stw	r4,0(r3)
    3df4:	dc800e15 	stw	r18,56(sp)
    3df8:	dc400d15 	stw	r17,52(sp)
    3dfc:	1441b616 	blt	r2,r17,44d8 <___vfprintf_internal_r+0xe38>
    3e00:	1cc00204 	addi	r19,r3,8
    3e04:	d9014217 	ldw	r4,1288(sp)
    3e08:	d9414317 	ldw	r5,1292(sp)
    3e0c:	000d883a 	mov	r6,zero
    3e10:	000f883a 	mov	r7,zero
    3e14:	000f3b80 	call	f3b8 <__nedf2>
    3e18:	10017426 	beq	r2,zero,43ec <___vfprintf_internal_r+0xd4c>
    3e1c:	d9414717 	ldw	r5,1308(sp)
    3e20:	d9814117 	ldw	r6,1284(sp)
    3e24:	8c400044 	addi	r17,r17,1
    3e28:	2c85883a 	add	r2,r5,r18
    3e2c:	14bfffc4 	addi	r18,r2,-1
    3e30:	28bfffc4 	addi	r2,r5,-1
    3e34:	30c00044 	addi	r3,r6,1
    3e38:	98800115 	stw	r2,4(r19)
    3e3c:	008001c4 	movi	r2,7
    3e40:	98c00015 	stw	r3,0(r19)
    3e44:	dc800e15 	stw	r18,56(sp)
    3e48:	dc400d15 	stw	r17,52(sp)
    3e4c:	14418e16 	blt	r2,r17,4488 <___vfprintf_internal_r+0xde8>
    3e50:	9cc00204 	addi	r19,r19,8
    3e54:	d9414817 	ldw	r5,1312(sp)
    3e58:	d8800804 	addi	r2,sp,32
    3e5c:	8c400044 	addi	r17,r17,1
    3e60:	9165883a 	add	r18,r18,r5
    3e64:	98800015 	stw	r2,0(r19)
    3e68:	008001c4 	movi	r2,7
    3e6c:	99400115 	stw	r5,4(r19)
    3e70:	dc800e15 	stw	r18,56(sp)
    3e74:	dc400d15 	stw	r17,52(sp)
    3e78:	1440ed16 	blt	r2,r17,4230 <___vfprintf_internal_r+0xb90>
    3e7c:	98c00204 	addi	r3,r19,8
    3e80:	003f8506 	br	3c98 <___vfprintf_internal_r+0x5f8>
    3e84:	d9814a17 	ldw	r6,1320(sp)
    3e88:	d8814517 	ldw	r2,1300(sp)
    3e8c:	30a1c83a 	sub	r16,r6,r2
    3e90:	043f4b0e 	bge	zero,r16,3bc0 <___vfprintf_internal_r+0x520>
    3e94:	00800404 	movi	r2,16
    3e98:	1404340e 	bge	r2,r16,4f6c <___vfprintf_internal_r+0x18cc>
    3e9c:	1027883a 	mov	r19,r2
    3ea0:	07000074 	movhi	fp,1
    3ea4:	e70eeb84 	addi	fp,fp,15278
    3ea8:	050001c4 	movi	r20,7
    3eac:	00000306 	br	3ebc <___vfprintf_internal_r+0x81c>
    3eb0:	843ffc04 	addi	r16,r16,-16
    3eb4:	ad400204 	addi	r21,r21,8
    3eb8:	9c00130e 	bge	r19,r16,3f08 <___vfprintf_internal_r+0x868>
    3ebc:	94800404 	addi	r18,r18,16
    3ec0:	8c400044 	addi	r17,r17,1
    3ec4:	af000015 	stw	fp,0(r21)
    3ec8:	acc00115 	stw	r19,4(r21)
    3ecc:	dc800e15 	stw	r18,56(sp)
    3ed0:	dc400d15 	stw	r17,52(sp)
    3ed4:	a47ff60e 	bge	r20,r17,3eb0 <___vfprintf_internal_r+0x810>
    3ed8:	d9014f17 	ldw	r4,1340(sp)
    3edc:	b00b883a 	mov	r5,r22
    3ee0:	d9800c04 	addi	r6,sp,48
    3ee4:	d9c15115 	stw	r7,1348(sp)
    3ee8:	00036480 	call	3648 <__sprint_r>
    3eec:	d9c15117 	ldw	r7,1348(sp)
    3ef0:	103fa31e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    3ef4:	843ffc04 	addi	r16,r16,-16
    3ef8:	dc800e17 	ldw	r18,56(sp)
    3efc:	dc400d17 	ldw	r17,52(sp)
    3f00:	dd401904 	addi	r21,sp,100
    3f04:	9c3fed16 	blt	r19,r16,3ebc <___vfprintf_internal_r+0x81c>
    3f08:	9425883a 	add	r18,r18,r16
    3f0c:	8c400044 	addi	r17,r17,1
    3f10:	008001c4 	movi	r2,7
    3f14:	af000015 	stw	fp,0(r21)
    3f18:	ac000115 	stw	r16,4(r21)
    3f1c:	dc800e15 	stw	r18,56(sp)
    3f20:	dc400d15 	stw	r17,52(sp)
    3f24:	14416116 	blt	r2,r17,44ac <___vfprintf_internal_r+0xe0c>
    3f28:	ad400204 	addi	r21,r21,8
    3f2c:	003f2406 	br	3bc0 <___vfprintf_internal_r+0x520>
    3f30:	d9014f17 	ldw	r4,1340(sp)
    3f34:	00015b40 	call	15b4 <__sinit>
    3f38:	d9c15117 	ldw	r7,1348(sp)
    3f3c:	003def06 	br	36fc <___vfprintf_internal_r+0x5c>
    3f40:	d9014f17 	ldw	r4,1340(sp)
    3f44:	b00b883a 	mov	r5,r22
    3f48:	d9c15115 	stw	r7,1348(sp)
    3f4c:	0006d680 	call	6d68 <__swsetup_r>
    3f50:	d9c15117 	ldw	r7,1348(sp)
    3f54:	103dee26 	beq	r2,zero,3710 <___vfprintf_internal_r+0x70>
    3f58:	003f8c06 	br	3d8c <___vfprintf_internal_r+0x6ec>
    3f5c:	d9014217 	ldw	r4,1288(sp)
    3f60:	d9414317 	ldw	r5,1292(sp)
    3f64:	000d883a 	mov	r6,zero
    3f68:	000f883a 	mov	r7,zero
    3f6c:	000f3300 	call	f330 <__eqdf2>
    3f70:	1000f21e 	bne	r2,zero,433c <___vfprintf_internal_r+0xc9c>
    3f74:	00800074 	movhi	r2,1
    3f78:	108eeb04 	addi	r2,r2,15276
    3f7c:	94800044 	addi	r18,r18,1
    3f80:	8c400044 	addi	r17,r17,1
    3f84:	a8800015 	stw	r2,0(r21)
    3f88:	00c00044 	movi	r3,1
    3f8c:	008001c4 	movi	r2,7
    3f90:	a8c00115 	stw	r3,4(r21)
    3f94:	dc800e15 	stw	r18,56(sp)
    3f98:	dc400d15 	stw	r17,52(sp)
    3f9c:	1442fa16 	blt	r2,r17,4b88 <___vfprintf_internal_r+0x14e8>
    3fa0:	a8c00204 	addi	r3,r21,8
    3fa4:	d8800517 	ldw	r2,20(sp)
    3fa8:	d9014717 	ldw	r4,1308(sp)
    3fac:	11015c0e 	bge	r2,r4,4520 <___vfprintf_internal_r+0xe80>
    3fb0:	dc400d17 	ldw	r17,52(sp)
    3fb4:	d9814917 	ldw	r6,1316(sp)
    3fb8:	00800044 	movi	r2,1
    3fbc:	94800044 	addi	r18,r18,1
    3fc0:	8c400044 	addi	r17,r17,1
    3fc4:	18800115 	stw	r2,4(r3)
    3fc8:	008001c4 	movi	r2,7
    3fcc:	19800015 	stw	r6,0(r3)
    3fd0:	dc800e15 	stw	r18,56(sp)
    3fd4:	dc400d15 	stw	r17,52(sp)
    3fd8:	14431016 	blt	r2,r17,4c1c <___vfprintf_internal_r+0x157c>
    3fdc:	18c00204 	addi	r3,r3,8
    3fe0:	d8814717 	ldw	r2,1308(sp)
    3fe4:	143fffc4 	addi	r16,r2,-1
    3fe8:	043f2b0e 	bge	zero,r16,3c98 <___vfprintf_internal_r+0x5f8>
    3fec:	00800404 	movi	r2,16
    3ff0:	1402a20e 	bge	r2,r16,4a7c <___vfprintf_internal_r+0x13dc>
    3ff4:	dc400d17 	ldw	r17,52(sp)
    3ff8:	1027883a 	mov	r19,r2
    3ffc:	07000074 	movhi	fp,1
    4000:	e70eeb84 	addi	fp,fp,15278
    4004:	050001c4 	movi	r20,7
    4008:	00000306 	br	4018 <___vfprintf_internal_r+0x978>
    400c:	18c00204 	addi	r3,r3,8
    4010:	843ffc04 	addi	r16,r16,-16
    4014:	9c029c0e 	bge	r19,r16,4a88 <___vfprintf_internal_r+0x13e8>
    4018:	94800404 	addi	r18,r18,16
    401c:	8c400044 	addi	r17,r17,1
    4020:	1f000015 	stw	fp,0(r3)
    4024:	1cc00115 	stw	r19,4(r3)
    4028:	dc800e15 	stw	r18,56(sp)
    402c:	dc400d15 	stw	r17,52(sp)
    4030:	a47ff60e 	bge	r20,r17,400c <___vfprintf_internal_r+0x96c>
    4034:	d9014f17 	ldw	r4,1340(sp)
    4038:	b00b883a 	mov	r5,r22
    403c:	d9800c04 	addi	r6,sp,48
    4040:	00036480 	call	3648 <__sprint_r>
    4044:	103f4e1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4048:	dc800e17 	ldw	r18,56(sp)
    404c:	dc400d17 	ldw	r17,52(sp)
    4050:	d8c01904 	addi	r3,sp,100
    4054:	003fee06 	br	4010 <___vfprintf_internal_r+0x970>
    4058:	d8802c0b 	ldhu	r2,176(sp)
    405c:	00ffffc4 	movi	r3,-1
    4060:	d8c14b15 	stw	r3,1324(sp)
    4064:	1080100c 	andi	r2,r2,64
    4068:	103dcc1e 	bne	r2,zero,379c <___vfprintf_internal_r+0xfc>
    406c:	003dce06 	br	37a8 <___vfprintf_internal_r+0x108>
    4070:	d9014f17 	ldw	r4,1340(sp)
    4074:	b00b883a 	mov	r5,r22
    4078:	d9800c04 	addi	r6,sp,48
    407c:	00036480 	call	3648 <__sprint_r>
    4080:	103f3f1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4084:	dc800e17 	ldw	r18,56(sp)
    4088:	003f2e06 	br	3d44 <___vfprintf_internal_r+0x6a4>
    408c:	d9414c17 	ldw	r5,1328(sp)
    4090:	29400414 	ori	r5,r5,16
    4094:	d9414c15 	stw	r5,1328(sp)
    4098:	d9814c17 	ldw	r6,1328(sp)
    409c:	3080080c 	andi	r2,r6,32
    40a0:	10014f1e 	bne	r2,zero,45e0 <___vfprintf_internal_r+0xf40>
    40a4:	d8c14c17 	ldw	r3,1328(sp)
    40a8:	1880040c 	andi	r2,r3,16
    40ac:	1002ea1e 	bne	r2,zero,4c58 <___vfprintf_internal_r+0x15b8>
    40b0:	d9014c17 	ldw	r4,1328(sp)
    40b4:	2080100c 	andi	r2,r4,64
    40b8:	1002e726 	beq	r2,zero,4c58 <___vfprintf_internal_r+0x15b8>
    40bc:	3880000f 	ldh	r2,0(r7)
    40c0:	39c00104 	addi	r7,r7,4
    40c4:	d9c14015 	stw	r7,1280(sp)
    40c8:	1023d7fa 	srai	r17,r2,31
    40cc:	1021883a 	mov	r16,r2
    40d0:	88037216 	blt	r17,zero,4e9c <___vfprintf_internal_r+0x17fc>
    40d4:	01000044 	movi	r4,1
    40d8:	98000416 	blt	r19,zero,40ec <___vfprintf_internal_r+0xa4c>
    40dc:	d8c14c17 	ldw	r3,1328(sp)
    40e0:	00bfdfc4 	movi	r2,-129
    40e4:	1886703a 	and	r3,r3,r2
    40e8:	d8c14c15 	stw	r3,1328(sp)
    40ec:	8444b03a 	or	r2,r16,r17
    40f0:	1002261e 	bne	r2,zero,498c <___vfprintf_internal_r+0x12ec>
    40f4:	9802251e 	bne	r19,zero,498c <___vfprintf_internal_r+0x12ec>
    40f8:	20803fcc 	andi	r2,r4,255
    40fc:	10029b26 	beq	r2,zero,4b6c <___vfprintf_internal_r+0x14cc>
    4100:	d8c01904 	addi	r3,sp,100
    4104:	dd000f04 	addi	r20,sp,60
    4108:	d8c14115 	stw	r3,1284(sp)
    410c:	d8c14117 	ldw	r3,1284(sp)
    4110:	dcc14515 	stw	r19,1300(sp)
    4114:	a0c5c83a 	sub	r2,r20,r3
    4118:	11c00a04 	addi	r7,r2,40
    411c:	99c0010e 	bge	r19,r7,4124 <___vfprintf_internal_r+0xa84>
    4120:	d9c14515 	stw	r7,1300(sp)
    4124:	dcc14615 	stw	r19,1304(sp)
    4128:	d8800407 	ldb	r2,16(sp)
    412c:	103e4c26 	beq	r2,zero,3a60 <___vfprintf_internal_r+0x3c0>
    4130:	d8814517 	ldw	r2,1300(sp)
    4134:	10800044 	addi	r2,r2,1
    4138:	d8814515 	stw	r2,1300(sp)
    413c:	003e4806 	br	3a60 <___vfprintf_internal_r+0x3c0>
    4140:	d9814c17 	ldw	r6,1328(sp)
    4144:	31800414 	ori	r6,r6,16
    4148:	d9814c15 	stw	r6,1328(sp)
    414c:	d8c14c17 	ldw	r3,1328(sp)
    4150:	1880080c 	andi	r2,r3,32
    4154:	1001271e 	bne	r2,zero,45f4 <___vfprintf_internal_r+0xf54>
    4158:	d9414c17 	ldw	r5,1328(sp)
    415c:	2880040c 	andi	r2,r5,16
    4160:	1002b61e 	bne	r2,zero,4c3c <___vfprintf_internal_r+0x159c>
    4164:	d9814c17 	ldw	r6,1328(sp)
    4168:	3080100c 	andi	r2,r6,64
    416c:	1002b326 	beq	r2,zero,4c3c <___vfprintf_internal_r+0x159c>
    4170:	3c00000b 	ldhu	r16,0(r7)
    4174:	0009883a 	mov	r4,zero
    4178:	39c00104 	addi	r7,r7,4
    417c:	0023883a 	mov	r17,zero
    4180:	d9c14015 	stw	r7,1280(sp)
    4184:	d8000405 	stb	zero,16(sp)
    4188:	003fd306 	br	40d8 <___vfprintf_internal_r+0xa38>
    418c:	d9014c17 	ldw	r4,1328(sp)
    4190:	21000414 	ori	r4,r4,16
    4194:	d9014c15 	stw	r4,1328(sp)
    4198:	d9414c17 	ldw	r5,1328(sp)
    419c:	2880080c 	andi	r2,r5,32
    41a0:	1001081e 	bne	r2,zero,45c4 <___vfprintf_internal_r+0xf24>
    41a4:	d8c14c17 	ldw	r3,1328(sp)
    41a8:	1880040c 	andi	r2,r3,16
    41ac:	1002b01e 	bne	r2,zero,4c70 <___vfprintf_internal_r+0x15d0>
    41b0:	d9014c17 	ldw	r4,1328(sp)
    41b4:	2080100c 	andi	r2,r4,64
    41b8:	1002ad26 	beq	r2,zero,4c70 <___vfprintf_internal_r+0x15d0>
    41bc:	3c00000b 	ldhu	r16,0(r7)
    41c0:	01000044 	movi	r4,1
    41c4:	39c00104 	addi	r7,r7,4
    41c8:	0023883a 	mov	r17,zero
    41cc:	d9c14015 	stw	r7,1280(sp)
    41d0:	d8000405 	stb	zero,16(sp)
    41d4:	003fc006 	br	40d8 <___vfprintf_internal_r+0xa38>
    41d8:	d9014f17 	ldw	r4,1340(sp)
    41dc:	b00b883a 	mov	r5,r22
    41e0:	d9800c04 	addi	r6,sp,48
    41e4:	00036480 	call	3648 <__sprint_r>
    41e8:	103ee51e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    41ec:	dc800e17 	ldw	r18,56(sp)
    41f0:	d8c01904 	addi	r3,sp,100
    41f4:	d9814c17 	ldw	r6,1328(sp)
    41f8:	3080004c 	andi	r2,r6,1
    41fc:	1005003a 	cmpeq	r2,r2,zero
    4200:	103ea51e 	bne	r2,zero,3c98 <___vfprintf_internal_r+0x5f8>
    4204:	00800044 	movi	r2,1
    4208:	dc400d17 	ldw	r17,52(sp)
    420c:	18800115 	stw	r2,4(r3)
    4210:	d8814917 	ldw	r2,1316(sp)
    4214:	94800044 	addi	r18,r18,1
    4218:	8c400044 	addi	r17,r17,1
    421c:	18800015 	stw	r2,0(r3)
    4220:	008001c4 	movi	r2,7
    4224:	dc800e15 	stw	r18,56(sp)
    4228:	dc400d15 	stw	r17,52(sp)
    422c:	14421e0e 	bge	r2,r17,4aa8 <___vfprintf_internal_r+0x1408>
    4230:	d9014f17 	ldw	r4,1340(sp)
    4234:	b00b883a 	mov	r5,r22
    4238:	d9800c04 	addi	r6,sp,48
    423c:	00036480 	call	3648 <__sprint_r>
    4240:	103ecf1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4244:	dc800e17 	ldw	r18,56(sp)
    4248:	d8c01904 	addi	r3,sp,100
    424c:	003e9206 	br	3c98 <___vfprintf_internal_r+0x5f8>
    4250:	d9014f17 	ldw	r4,1340(sp)
    4254:	b00b883a 	mov	r5,r22
    4258:	d9800c04 	addi	r6,sp,48
    425c:	00036480 	call	3648 <__sprint_r>
    4260:	103ec026 	beq	r2,zero,3d64 <___vfprintf_internal_r+0x6c4>
    4264:	003ec606 	br	3d80 <___vfprintf_internal_r+0x6e0>
    4268:	d9014f17 	ldw	r4,1340(sp)
    426c:	b00b883a 	mov	r5,r22
    4270:	d9800c04 	addi	r6,sp,48
    4274:	d9c15115 	stw	r7,1348(sp)
    4278:	00036480 	call	3648 <__sprint_r>
    427c:	d9c15117 	ldw	r7,1348(sp)
    4280:	103ebf1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4284:	dc800e17 	ldw	r18,56(sp)
    4288:	dc400d17 	ldw	r17,52(sp)
    428c:	dd401904 	addi	r21,sp,100
    4290:	003e7406 	br	3c64 <___vfprintf_internal_r+0x5c4>
    4294:	d9014f17 	ldw	r4,1340(sp)
    4298:	b00b883a 	mov	r5,r22
    429c:	d9800c04 	addi	r6,sp,48
    42a0:	d9c15115 	stw	r7,1348(sp)
    42a4:	00036480 	call	3648 <__sprint_r>
    42a8:	d9c15117 	ldw	r7,1348(sp)
    42ac:	103eb41e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    42b0:	dd401904 	addi	r21,sp,100
    42b4:	003d6d06 	br	386c <___vfprintf_internal_r+0x1cc>
    42b8:	d9014f17 	ldw	r4,1340(sp)
    42bc:	b00b883a 	mov	r5,r22
    42c0:	d9800c04 	addi	r6,sp,48
    42c4:	d9c15115 	stw	r7,1348(sp)
    42c8:	00036480 	call	3648 <__sprint_r>
    42cc:	d9c15117 	ldw	r7,1348(sp)
    42d0:	103eab1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    42d4:	dc800e17 	ldw	r18,56(sp)
    42d8:	dc400d17 	ldw	r17,52(sp)
    42dc:	dd401904 	addi	r21,sp,100
    42e0:	003e3406 	br	3bb4 <___vfprintf_internal_r+0x514>
    42e4:	d9014f17 	ldw	r4,1340(sp)
    42e8:	b00b883a 	mov	r5,r22
    42ec:	d9800c04 	addi	r6,sp,48
    42f0:	d9c15115 	stw	r7,1348(sp)
    42f4:	00036480 	call	3648 <__sprint_r>
    42f8:	d9c15117 	ldw	r7,1348(sp)
    42fc:	103ea01e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4300:	dc800e17 	ldw	r18,56(sp)
    4304:	dc400d17 	ldw	r17,52(sp)
    4308:	dd401904 	addi	r21,sp,100
    430c:	003e1c06 	br	3b80 <___vfprintf_internal_r+0x4e0>
    4310:	d9014f17 	ldw	r4,1340(sp)
    4314:	b00b883a 	mov	r5,r22
    4318:	d9800c04 	addi	r6,sp,48
    431c:	d9c15115 	stw	r7,1348(sp)
    4320:	00036480 	call	3648 <__sprint_r>
    4324:	d9c15117 	ldw	r7,1348(sp)
    4328:	103e951e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    432c:	dc800e17 	ldw	r18,56(sp)
    4330:	dc400d17 	ldw	r17,52(sp)
    4334:	dd401904 	addi	r21,sp,100
    4338:	003e0406 	br	3b4c <___vfprintf_internal_r+0x4ac>
    433c:	d9000517 	ldw	r4,20(sp)
    4340:	0102520e 	bge	zero,r4,4c8c <___vfprintf_internal_r+0x15ec>
    4344:	d9814717 	ldw	r6,1308(sp)
    4348:	21807a16 	blt	r4,r6,4534 <___vfprintf_internal_r+0xe94>
    434c:	d8814117 	ldw	r2,1284(sp)
    4350:	91a5883a 	add	r18,r18,r6
    4354:	8c400044 	addi	r17,r17,1
    4358:	a8800015 	stw	r2,0(r21)
    435c:	008001c4 	movi	r2,7
    4360:	a9800115 	stw	r6,4(r21)
    4364:	dc800e15 	stw	r18,56(sp)
    4368:	dc400d15 	stw	r17,52(sp)
    436c:	1442f616 	blt	r2,r17,4f48 <___vfprintf_internal_r+0x18a8>
    4370:	a8c00204 	addi	r3,r21,8
    4374:	d9414717 	ldw	r5,1308(sp)
    4378:	2161c83a 	sub	r16,r4,r5
    437c:	043f9d0e 	bge	zero,r16,41f4 <___vfprintf_internal_r+0xb54>
    4380:	00800404 	movi	r2,16
    4384:	1402130e 	bge	r2,r16,4bd4 <___vfprintf_internal_r+0x1534>
    4388:	dc400d17 	ldw	r17,52(sp)
    438c:	1027883a 	mov	r19,r2
    4390:	07000074 	movhi	fp,1
    4394:	e70eeb84 	addi	fp,fp,15278
    4398:	050001c4 	movi	r20,7
    439c:	00000306 	br	43ac <___vfprintf_internal_r+0xd0c>
    43a0:	18c00204 	addi	r3,r3,8
    43a4:	843ffc04 	addi	r16,r16,-16
    43a8:	9c020d0e 	bge	r19,r16,4be0 <___vfprintf_internal_r+0x1540>
    43ac:	94800404 	addi	r18,r18,16
    43b0:	8c400044 	addi	r17,r17,1
    43b4:	1f000015 	stw	fp,0(r3)
    43b8:	1cc00115 	stw	r19,4(r3)
    43bc:	dc800e15 	stw	r18,56(sp)
    43c0:	dc400d15 	stw	r17,52(sp)
    43c4:	a47ff60e 	bge	r20,r17,43a0 <___vfprintf_internal_r+0xd00>
    43c8:	d9014f17 	ldw	r4,1340(sp)
    43cc:	b00b883a 	mov	r5,r22
    43d0:	d9800c04 	addi	r6,sp,48
    43d4:	00036480 	call	3648 <__sprint_r>
    43d8:	103e691e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    43dc:	dc800e17 	ldw	r18,56(sp)
    43e0:	dc400d17 	ldw	r17,52(sp)
    43e4:	d8c01904 	addi	r3,sp,100
    43e8:	003fee06 	br	43a4 <___vfprintf_internal_r+0xd04>
    43ec:	d8814717 	ldw	r2,1308(sp)
    43f0:	143fffc4 	addi	r16,r2,-1
    43f4:	043e970e 	bge	zero,r16,3e54 <___vfprintf_internal_r+0x7b4>
    43f8:	00800404 	movi	r2,16
    43fc:	1400180e 	bge	r2,r16,4460 <___vfprintf_internal_r+0xdc0>
    4400:	1029883a 	mov	r20,r2
    4404:	07000074 	movhi	fp,1
    4408:	e70eeb84 	addi	fp,fp,15278
    440c:	054001c4 	movi	r21,7
    4410:	00000306 	br	4420 <___vfprintf_internal_r+0xd80>
    4414:	9cc00204 	addi	r19,r19,8
    4418:	843ffc04 	addi	r16,r16,-16
    441c:	a400120e 	bge	r20,r16,4468 <___vfprintf_internal_r+0xdc8>
    4420:	94800404 	addi	r18,r18,16
    4424:	8c400044 	addi	r17,r17,1
    4428:	9f000015 	stw	fp,0(r19)
    442c:	9d000115 	stw	r20,4(r19)
    4430:	dc800e15 	stw	r18,56(sp)
    4434:	dc400d15 	stw	r17,52(sp)
    4438:	ac7ff60e 	bge	r21,r17,4414 <___vfprintf_internal_r+0xd74>
    443c:	d9014f17 	ldw	r4,1340(sp)
    4440:	b00b883a 	mov	r5,r22
    4444:	d9800c04 	addi	r6,sp,48
    4448:	00036480 	call	3648 <__sprint_r>
    444c:	103e4c1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4450:	dc800e17 	ldw	r18,56(sp)
    4454:	dc400d17 	ldw	r17,52(sp)
    4458:	dcc01904 	addi	r19,sp,100
    445c:	003fee06 	br	4418 <___vfprintf_internal_r+0xd78>
    4460:	07000074 	movhi	fp,1
    4464:	e70eeb84 	addi	fp,fp,15278
    4468:	9425883a 	add	r18,r18,r16
    446c:	8c400044 	addi	r17,r17,1
    4470:	008001c4 	movi	r2,7
    4474:	9f000015 	stw	fp,0(r19)
    4478:	9c000115 	stw	r16,4(r19)
    447c:	dc800e15 	stw	r18,56(sp)
    4480:	dc400d15 	stw	r17,52(sp)
    4484:	147e720e 	bge	r2,r17,3e50 <___vfprintf_internal_r+0x7b0>
    4488:	d9014f17 	ldw	r4,1340(sp)
    448c:	b00b883a 	mov	r5,r22
    4490:	d9800c04 	addi	r6,sp,48
    4494:	00036480 	call	3648 <__sprint_r>
    4498:	103e391e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    449c:	dc800e17 	ldw	r18,56(sp)
    44a0:	dc400d17 	ldw	r17,52(sp)
    44a4:	dcc01904 	addi	r19,sp,100
    44a8:	003e6a06 	br	3e54 <___vfprintf_internal_r+0x7b4>
    44ac:	d9014f17 	ldw	r4,1340(sp)
    44b0:	b00b883a 	mov	r5,r22
    44b4:	d9800c04 	addi	r6,sp,48
    44b8:	d9c15115 	stw	r7,1348(sp)
    44bc:	00036480 	call	3648 <__sprint_r>
    44c0:	d9c15117 	ldw	r7,1348(sp)
    44c4:	103e2e1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    44c8:	dc800e17 	ldw	r18,56(sp)
    44cc:	dc400d17 	ldw	r17,52(sp)
    44d0:	dd401904 	addi	r21,sp,100
    44d4:	003dba06 	br	3bc0 <___vfprintf_internal_r+0x520>
    44d8:	d9014f17 	ldw	r4,1340(sp)
    44dc:	b00b883a 	mov	r5,r22
    44e0:	d9800c04 	addi	r6,sp,48
    44e4:	00036480 	call	3648 <__sprint_r>
    44e8:	103e251e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    44ec:	dc800e17 	ldw	r18,56(sp)
    44f0:	dc400d17 	ldw	r17,52(sp)
    44f4:	dcc01904 	addi	r19,sp,100
    44f8:	003e4206 	br	3e04 <___vfprintf_internal_r+0x764>
    44fc:	d9014f17 	ldw	r4,1340(sp)
    4500:	b00b883a 	mov	r5,r22
    4504:	d9800c04 	addi	r6,sp,48
    4508:	00036480 	call	3648 <__sprint_r>
    450c:	103e1c1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4510:	dc800e17 	ldw	r18,56(sp)
    4514:	dc400d17 	ldw	r17,52(sp)
    4518:	d8c01904 	addi	r3,sp,100
    451c:	003e2e06 	br	3dd8 <___vfprintf_internal_r+0x738>
    4520:	d9414c17 	ldw	r5,1328(sp)
    4524:	2880004c 	andi	r2,r5,1
    4528:	1005003a 	cmpeq	r2,r2,zero
    452c:	103dda1e 	bne	r2,zero,3c98 <___vfprintf_internal_r+0x5f8>
    4530:	003e9f06 	br	3fb0 <___vfprintf_internal_r+0x910>
    4534:	d8c14117 	ldw	r3,1284(sp)
    4538:	9125883a 	add	r18,r18,r4
    453c:	8c400044 	addi	r17,r17,1
    4540:	008001c4 	movi	r2,7
    4544:	a8c00015 	stw	r3,0(r21)
    4548:	a9000115 	stw	r4,4(r21)
    454c:	dc800e15 	stw	r18,56(sp)
    4550:	dc400d15 	stw	r17,52(sp)
    4554:	14426616 	blt	r2,r17,4ef0 <___vfprintf_internal_r+0x1850>
    4558:	a8c00204 	addi	r3,r21,8
    455c:	d9414917 	ldw	r5,1316(sp)
    4560:	00800044 	movi	r2,1
    4564:	94800044 	addi	r18,r18,1
    4568:	8c400044 	addi	r17,r17,1
    456c:	18800115 	stw	r2,4(r3)
    4570:	008001c4 	movi	r2,7
    4574:	19400015 	stw	r5,0(r3)
    4578:	dc800e15 	stw	r18,56(sp)
    457c:	dc400d15 	stw	r17,52(sp)
    4580:	2021883a 	mov	r16,r4
    4584:	14425016 	blt	r2,r17,4ec8 <___vfprintf_internal_r+0x1828>
    4588:	19400204 	addi	r5,r3,8
    458c:	d9814717 	ldw	r6,1308(sp)
    4590:	8c400044 	addi	r17,r17,1
    4594:	dc400d15 	stw	r17,52(sp)
    4598:	3107c83a 	sub	r3,r6,r4
    459c:	d9014117 	ldw	r4,1284(sp)
    45a0:	90e5883a 	add	r18,r18,r3
    45a4:	28c00115 	stw	r3,4(r5)
    45a8:	8105883a 	add	r2,r16,r4
    45ac:	28800015 	stw	r2,0(r5)
    45b0:	008001c4 	movi	r2,7
    45b4:	dc800e15 	stw	r18,56(sp)
    45b8:	147f1d16 	blt	r2,r17,4230 <___vfprintf_internal_r+0xb90>
    45bc:	28c00204 	addi	r3,r5,8
    45c0:	003db506 	br	3c98 <___vfprintf_internal_r+0x5f8>
    45c4:	3c000017 	ldw	r16,0(r7)
    45c8:	3c400117 	ldw	r17,4(r7)
    45cc:	39800204 	addi	r6,r7,8
    45d0:	01000044 	movi	r4,1
    45d4:	d9814015 	stw	r6,1280(sp)
    45d8:	d8000405 	stb	zero,16(sp)
    45dc:	003ebe06 	br	40d8 <___vfprintf_internal_r+0xa38>
    45e0:	3c000017 	ldw	r16,0(r7)
    45e4:	3c400117 	ldw	r17,4(r7)
    45e8:	38800204 	addi	r2,r7,8
    45ec:	d8814015 	stw	r2,1280(sp)
    45f0:	003eb706 	br	40d0 <___vfprintf_internal_r+0xa30>
    45f4:	3c000017 	ldw	r16,0(r7)
    45f8:	3c400117 	ldw	r17,4(r7)
    45fc:	39000204 	addi	r4,r7,8
    4600:	d9014015 	stw	r4,1280(sp)
    4604:	0009883a 	mov	r4,zero
    4608:	d8000405 	stb	zero,16(sp)
    460c:	003eb206 	br	40d8 <___vfprintf_internal_r+0xa38>
    4610:	38c00017 	ldw	r3,0(r7)
    4614:	39c00104 	addi	r7,r7,4
    4618:	d8c14a15 	stw	r3,1320(sp)
    461c:	1800d10e 	bge	r3,zero,4964 <___vfprintf_internal_r+0x12c4>
    4620:	00c7c83a 	sub	r3,zero,r3
    4624:	d8c14a15 	stw	r3,1320(sp)
    4628:	d9014c17 	ldw	r4,1328(sp)
    462c:	b8c00007 	ldb	r3,0(r23)
    4630:	21000114 	ori	r4,r4,4
    4634:	d9014c15 	stw	r4,1328(sp)
    4638:	003c9806 	br	389c <___vfprintf_internal_r+0x1fc>
    463c:	d9814c17 	ldw	r6,1328(sp)
    4640:	3080080c 	andi	r2,r6,32
    4644:	1001f026 	beq	r2,zero,4e08 <___vfprintf_internal_r+0x1768>
    4648:	d9014b17 	ldw	r4,1324(sp)
    464c:	38800017 	ldw	r2,0(r7)
    4650:	39c00104 	addi	r7,r7,4
    4654:	d9c14015 	stw	r7,1280(sp)
    4658:	2007d7fa 	srai	r3,r4,31
    465c:	d9c14017 	ldw	r7,1280(sp)
    4660:	11000015 	stw	r4,0(r2)
    4664:	10c00115 	stw	r3,4(r2)
    4668:	003c6906 	br	3810 <___vfprintf_internal_r+0x170>
    466c:	b8c00007 	ldb	r3,0(r23)
    4670:	00801b04 	movi	r2,108
    4674:	18824f26 	beq	r3,r2,4fb4 <___vfprintf_internal_r+0x1914>
    4678:	d9414c17 	ldw	r5,1328(sp)
    467c:	29400414 	ori	r5,r5,16
    4680:	d9414c15 	stw	r5,1328(sp)
    4684:	003c8506 	br	389c <___vfprintf_internal_r+0x1fc>
    4688:	d9814c17 	ldw	r6,1328(sp)
    468c:	b8c00007 	ldb	r3,0(r23)
    4690:	31800814 	ori	r6,r6,32
    4694:	d9814c15 	stw	r6,1328(sp)
    4698:	003c8006 	br	389c <___vfprintf_internal_r+0x1fc>
    469c:	d8814c17 	ldw	r2,1328(sp)
    46a0:	3c000017 	ldw	r16,0(r7)
    46a4:	00c01e04 	movi	r3,120
    46a8:	10800094 	ori	r2,r2,2
    46ac:	d8814c15 	stw	r2,1328(sp)
    46b0:	39c00104 	addi	r7,r7,4
    46b4:	01400074 	movhi	r5,1
    46b8:	294ed404 	addi	r5,r5,15184
    46bc:	00800c04 	movi	r2,48
    46c0:	0023883a 	mov	r17,zero
    46c4:	01000084 	movi	r4,2
    46c8:	d9c14015 	stw	r7,1280(sp)
    46cc:	d8c14d15 	stw	r3,1332(sp)
    46d0:	d9414415 	stw	r5,1296(sp)
    46d4:	d8800445 	stb	r2,17(sp)
    46d8:	d8c00485 	stb	r3,18(sp)
    46dc:	d8000405 	stb	zero,16(sp)
    46e0:	003e7d06 	br	40d8 <___vfprintf_internal_r+0xa38>
    46e4:	d8814c17 	ldw	r2,1328(sp)
    46e8:	b8c00007 	ldb	r3,0(r23)
    46ec:	10801014 	ori	r2,r2,64
    46f0:	d8814c15 	stw	r2,1328(sp)
    46f4:	003c6906 	br	389c <___vfprintf_internal_r+0x1fc>
    46f8:	d9414c17 	ldw	r5,1328(sp)
    46fc:	2880020c 	andi	r2,r5,8
    4700:	1001df26 	beq	r2,zero,4e80 <___vfprintf_internal_r+0x17e0>
    4704:	39800017 	ldw	r6,0(r7)
    4708:	38800204 	addi	r2,r7,8
    470c:	d8814015 	stw	r2,1280(sp)
    4710:	d9814215 	stw	r6,1288(sp)
    4714:	39c00117 	ldw	r7,4(r7)
    4718:	d9c14315 	stw	r7,1292(sp)
    471c:	d9014217 	ldw	r4,1288(sp)
    4720:	d9414317 	ldw	r5,1292(sp)
    4724:	000a7180 	call	a718 <__isinfd>
    4728:	10021726 	beq	r2,zero,4f88 <___vfprintf_internal_r+0x18e8>
    472c:	d9014217 	ldw	r4,1288(sp)
    4730:	d9414317 	ldw	r5,1292(sp)
    4734:	000d883a 	mov	r6,zero
    4738:	000f883a 	mov	r7,zero
    473c:	000f5500 	call	f550 <__ltdf2>
    4740:	1002ca16 	blt	r2,zero,526c <___vfprintf_internal_r+0x1bcc>
    4744:	d9414d17 	ldw	r5,1332(sp)
    4748:	008011c4 	movi	r2,71
    474c:	11420a16 	blt	r2,r5,4f78 <___vfprintf_internal_r+0x18d8>
    4750:	01800074 	movhi	r6,1
    4754:	318ed904 	addi	r6,r6,15204
    4758:	d9814115 	stw	r6,1284(sp)
    475c:	d9014c17 	ldw	r4,1328(sp)
    4760:	00c000c4 	movi	r3,3
    4764:	00bfdfc4 	movi	r2,-129
    4768:	2088703a 	and	r4,r4,r2
    476c:	180f883a 	mov	r7,r3
    4770:	d8c14515 	stw	r3,1300(sp)
    4774:	d9014c15 	stw	r4,1328(sp)
    4778:	d8014615 	stw	zero,1304(sp)
    477c:	003e6a06 	br	4128 <___vfprintf_internal_r+0xa88>
    4780:	38800017 	ldw	r2,0(r7)
    4784:	00c00044 	movi	r3,1
    4788:	39c00104 	addi	r7,r7,4
    478c:	d9c14015 	stw	r7,1280(sp)
    4790:	d9000f04 	addi	r4,sp,60
    4794:	180f883a 	mov	r7,r3
    4798:	d8c14515 	stw	r3,1300(sp)
    479c:	d9014115 	stw	r4,1284(sp)
    47a0:	d8800f05 	stb	r2,60(sp)
    47a4:	d8000405 	stb	zero,16(sp)
    47a8:	003cac06 	br	3a5c <___vfprintf_internal_r+0x3bc>
    47ac:	01400074 	movhi	r5,1
    47b0:	294edf04 	addi	r5,r5,15228
    47b4:	d9414415 	stw	r5,1296(sp)
    47b8:	d9814c17 	ldw	r6,1328(sp)
    47bc:	3080080c 	andi	r2,r6,32
    47c0:	1000f926 	beq	r2,zero,4ba8 <___vfprintf_internal_r+0x1508>
    47c4:	3c000017 	ldw	r16,0(r7)
    47c8:	3c400117 	ldw	r17,4(r7)
    47cc:	38800204 	addi	r2,r7,8
    47d0:	d8814015 	stw	r2,1280(sp)
    47d4:	d9414c17 	ldw	r5,1328(sp)
    47d8:	2880004c 	andi	r2,r5,1
    47dc:	1005003a 	cmpeq	r2,r2,zero
    47e0:	1000b31e 	bne	r2,zero,4ab0 <___vfprintf_internal_r+0x1410>
    47e4:	8444b03a 	or	r2,r16,r17
    47e8:	1000b126 	beq	r2,zero,4ab0 <___vfprintf_internal_r+0x1410>
    47ec:	d9814d17 	ldw	r6,1332(sp)
    47f0:	29400094 	ori	r5,r5,2
    47f4:	00800c04 	movi	r2,48
    47f8:	01000084 	movi	r4,2
    47fc:	d9414c15 	stw	r5,1328(sp)
    4800:	d8800445 	stb	r2,17(sp)
    4804:	d9800485 	stb	r6,18(sp)
    4808:	d8000405 	stb	zero,16(sp)
    480c:	003e3206 	br	40d8 <___vfprintf_internal_r+0xa38>
    4810:	01800074 	movhi	r6,1
    4814:	318ed404 	addi	r6,r6,15184
    4818:	d9814415 	stw	r6,1296(sp)
    481c:	003fe606 	br	47b8 <___vfprintf_internal_r+0x1118>
    4820:	00800ac4 	movi	r2,43
    4824:	d8800405 	stb	r2,16(sp)
    4828:	b8c00007 	ldb	r3,0(r23)
    482c:	003c1b06 	br	389c <___vfprintf_internal_r+0x1fc>
    4830:	d8814c17 	ldw	r2,1328(sp)
    4834:	b8c00007 	ldb	r3,0(r23)
    4838:	10800054 	ori	r2,r2,1
    483c:	d8814c15 	stw	r2,1328(sp)
    4840:	003c1606 	br	389c <___vfprintf_internal_r+0x1fc>
    4844:	d8800407 	ldb	r2,16(sp)
    4848:	1000461e 	bne	r2,zero,4964 <___vfprintf_internal_r+0x12c4>
    484c:	00800804 	movi	r2,32
    4850:	d8800405 	stb	r2,16(sp)
    4854:	b8c00007 	ldb	r3,0(r23)
    4858:	003c1006 	br	389c <___vfprintf_internal_r+0x1fc>
    485c:	d9814c17 	ldw	r6,1328(sp)
    4860:	b8c00007 	ldb	r3,0(r23)
    4864:	31800214 	ori	r6,r6,8
    4868:	d9814c15 	stw	r6,1328(sp)
    486c:	003c0b06 	br	389c <___vfprintf_internal_r+0x1fc>
    4870:	0007883a 	mov	r3,zero
    4874:	01000244 	movi	r4,9
    4878:	188002a4 	muli	r2,r3,10
    487c:	b8c00007 	ldb	r3,0(r23)
    4880:	d9814d17 	ldw	r6,1332(sp)
    4884:	bdc00044 	addi	r23,r23,1
    4888:	d8c14d15 	stw	r3,1332(sp)
    488c:	d9414d17 	ldw	r5,1332(sp)
    4890:	3085883a 	add	r2,r6,r2
    4894:	10fff404 	addi	r3,r2,-48
    4898:	28bff404 	addi	r2,r5,-48
    489c:	20bff62e 	bgeu	r4,r2,4878 <___vfprintf_internal_r+0x11d8>
    48a0:	d8c14a15 	stw	r3,1320(sp)
    48a4:	003bff06 	br	38a4 <___vfprintf_internal_r+0x204>
    48a8:	d9414c17 	ldw	r5,1328(sp)
    48ac:	b8c00007 	ldb	r3,0(r23)
    48b0:	29402014 	ori	r5,r5,128
    48b4:	d9414c15 	stw	r5,1328(sp)
    48b8:	003bf806 	br	389c <___vfprintf_internal_r+0x1fc>
    48bc:	b8c00007 	ldb	r3,0(r23)
    48c0:	00800a84 	movi	r2,42
    48c4:	bdc00044 	addi	r23,r23,1
    48c8:	18831526 	beq	r3,r2,5520 <___vfprintf_internal_r+0x1e80>
    48cc:	d8c14d15 	stw	r3,1332(sp)
    48d0:	18bff404 	addi	r2,r3,-48
    48d4:	00c00244 	movi	r3,9
    48d8:	18827836 	bltu	r3,r2,52bc <___vfprintf_internal_r+0x1c1c>
    48dc:	000d883a 	mov	r6,zero
    48e0:	308002a4 	muli	r2,r6,10
    48e4:	b9800007 	ldb	r6,0(r23)
    48e8:	d9414d17 	ldw	r5,1332(sp)
    48ec:	bdc00044 	addi	r23,r23,1
    48f0:	d9814d15 	stw	r6,1332(sp)
    48f4:	d9014d17 	ldw	r4,1332(sp)
    48f8:	1145883a 	add	r2,r2,r5
    48fc:	11bff404 	addi	r6,r2,-48
    4900:	20bff404 	addi	r2,r4,-48
    4904:	18bff62e 	bgeu	r3,r2,48e0 <___vfprintf_internal_r+0x1240>
    4908:	3027883a 	mov	r19,r6
    490c:	303be50e 	bge	r6,zero,38a4 <___vfprintf_internal_r+0x204>
    4910:	04ffffc4 	movi	r19,-1
    4914:	003be306 	br	38a4 <___vfprintf_internal_r+0x204>
    4918:	d8000405 	stb	zero,16(sp)
    491c:	39800017 	ldw	r6,0(r7)
    4920:	39c00104 	addi	r7,r7,4
    4924:	d9c14015 	stw	r7,1280(sp)
    4928:	d9814115 	stw	r6,1284(sp)
    492c:	3001c926 	beq	r6,zero,5054 <___vfprintf_internal_r+0x19b4>
    4930:	98000e16 	blt	r19,zero,496c <___vfprintf_internal_r+0x12cc>
    4934:	d9014117 	ldw	r4,1284(sp)
    4938:	000b883a 	mov	r5,zero
    493c:	980d883a 	mov	r6,r19
    4940:	0008ef40 	call	8ef4 <memchr>
    4944:	10025926 	beq	r2,zero,52ac <___vfprintf_internal_r+0x1c0c>
    4948:	d8c14117 	ldw	r3,1284(sp)
    494c:	10cfc83a 	sub	r7,r2,r3
    4950:	99c19e16 	blt	r19,r7,4fcc <___vfprintf_internal_r+0x192c>
    4954:	d9c14515 	stw	r7,1300(sp)
    4958:	38000916 	blt	r7,zero,4980 <___vfprintf_internal_r+0x12e0>
    495c:	d8014615 	stw	zero,1304(sp)
    4960:	003df106 	br	4128 <___vfprintf_internal_r+0xa88>
    4964:	b8c00007 	ldb	r3,0(r23)
    4968:	003bcc06 	br	389c <___vfprintf_internal_r+0x1fc>
    496c:	d9014117 	ldw	r4,1284(sp)
    4970:	00035cc0 	call	35cc <strlen>
    4974:	d8814515 	stw	r2,1300(sp)
    4978:	100f883a 	mov	r7,r2
    497c:	103ff70e 	bge	r2,zero,495c <___vfprintf_internal_r+0x12bc>
    4980:	d8014515 	stw	zero,1300(sp)
    4984:	d8014615 	stw	zero,1304(sp)
    4988:	003de706 	br	4128 <___vfprintf_internal_r+0xa88>
    498c:	20c03fcc 	andi	r3,r4,255
    4990:	00800044 	movi	r2,1
    4994:	18802d26 	beq	r3,r2,4a4c <___vfprintf_internal_r+0x13ac>
    4998:	18800e36 	bltu	r3,r2,49d4 <___vfprintf_internal_r+0x1334>
    499c:	00800084 	movi	r2,2
    49a0:	1880fa26 	beq	r3,r2,4d8c <___vfprintf_internal_r+0x16ec>
    49a4:	01000074 	movhi	r4,1
    49a8:	210ee404 	addi	r4,r4,15248
    49ac:	00035cc0 	call	35cc <strlen>
    49b0:	100f883a 	mov	r7,r2
    49b4:	dcc14515 	stw	r19,1300(sp)
    49b8:	9880010e 	bge	r19,r2,49c0 <___vfprintf_internal_r+0x1320>
    49bc:	d8814515 	stw	r2,1300(sp)
    49c0:	00800074 	movhi	r2,1
    49c4:	108ee404 	addi	r2,r2,15248
    49c8:	dcc14615 	stw	r19,1304(sp)
    49cc:	d8814115 	stw	r2,1284(sp)
    49d0:	003dd506 	br	4128 <___vfprintf_internal_r+0xa88>
    49d4:	d9401904 	addi	r5,sp,100
    49d8:	dd000f04 	addi	r20,sp,60
    49dc:	d9414115 	stw	r5,1284(sp)
    49e0:	880a977a 	slli	r5,r17,29
    49e4:	d9814117 	ldw	r6,1284(sp)
    49e8:	8004d0fa 	srli	r2,r16,3
    49ec:	8806d0fa 	srli	r3,r17,3
    49f0:	810001cc 	andi	r4,r16,7
    49f4:	2884b03a 	or	r2,r5,r2
    49f8:	31bfffc4 	addi	r6,r6,-1
    49fc:	21000c04 	addi	r4,r4,48
    4a00:	d9814115 	stw	r6,1284(sp)
    4a04:	10cab03a 	or	r5,r2,r3
    4a08:	31000005 	stb	r4,0(r6)
    4a0c:	1021883a 	mov	r16,r2
    4a10:	1823883a 	mov	r17,r3
    4a14:	283ff21e 	bne	r5,zero,49e0 <___vfprintf_internal_r+0x1340>
    4a18:	d8c14c17 	ldw	r3,1328(sp)
    4a1c:	1880004c 	andi	r2,r3,1
    4a20:	1005003a 	cmpeq	r2,r2,zero
    4a24:	103db91e 	bne	r2,zero,410c <___vfprintf_internal_r+0xa6c>
    4a28:	20803fcc 	andi	r2,r4,255
    4a2c:	1080201c 	xori	r2,r2,128
    4a30:	10bfe004 	addi	r2,r2,-128
    4a34:	00c00c04 	movi	r3,48
    4a38:	10fdb426 	beq	r2,r3,410c <___vfprintf_internal_r+0xa6c>
    4a3c:	31bfffc4 	addi	r6,r6,-1
    4a40:	d9814115 	stw	r6,1284(sp)
    4a44:	30c00005 	stb	r3,0(r6)
    4a48:	003db006 	br	410c <___vfprintf_internal_r+0xa6c>
    4a4c:	88800068 	cmpgeui	r2,r17,1
    4a50:	10002c1e 	bne	r2,zero,4b04 <___vfprintf_internal_r+0x1464>
    4a54:	8800021e 	bne	r17,zero,4a60 <___vfprintf_internal_r+0x13c0>
    4a58:	00800244 	movi	r2,9
    4a5c:	14002936 	bltu	r2,r16,4b04 <___vfprintf_internal_r+0x1464>
    4a60:	d90018c4 	addi	r4,sp,99
    4a64:	dd000f04 	addi	r20,sp,60
    4a68:	d9014115 	stw	r4,1284(sp)
    4a6c:	d9014117 	ldw	r4,1284(sp)
    4a70:	80800c04 	addi	r2,r16,48
    4a74:	20800005 	stb	r2,0(r4)
    4a78:	003da406 	br	410c <___vfprintf_internal_r+0xa6c>
    4a7c:	dc400d17 	ldw	r17,52(sp)
    4a80:	07000074 	movhi	fp,1
    4a84:	e70eeb84 	addi	fp,fp,15278
    4a88:	9425883a 	add	r18,r18,r16
    4a8c:	8c400044 	addi	r17,r17,1
    4a90:	008001c4 	movi	r2,7
    4a94:	1f000015 	stw	fp,0(r3)
    4a98:	1c000115 	stw	r16,4(r3)
    4a9c:	dc800e15 	stw	r18,56(sp)
    4aa0:	dc400d15 	stw	r17,52(sp)
    4aa4:	147de216 	blt	r2,r17,4230 <___vfprintf_internal_r+0xb90>
    4aa8:	18c00204 	addi	r3,r3,8
    4aac:	003c7a06 	br	3c98 <___vfprintf_internal_r+0x5f8>
    4ab0:	01000084 	movi	r4,2
    4ab4:	d8000405 	stb	zero,16(sp)
    4ab8:	003d8706 	br	40d8 <___vfprintf_internal_r+0xa38>
    4abc:	d9814c17 	ldw	r6,1328(sp)
    4ac0:	30c4703a 	and	r2,r6,r3
    4ac4:	1005003a 	cmpeq	r2,r2,zero
    4ac8:	103cb926 	beq	r2,zero,3db0 <___vfprintf_internal_r+0x710>
    4acc:	d9014117 	ldw	r4,1284(sp)
    4ad0:	94800044 	addi	r18,r18,1
    4ad4:	8c400044 	addi	r17,r17,1
    4ad8:	008001c4 	movi	r2,7
    4adc:	a9000015 	stw	r4,0(r21)
    4ae0:	a8c00115 	stw	r3,4(r21)
    4ae4:	dc800e15 	stw	r18,56(sp)
    4ae8:	dc400d15 	stw	r17,52(sp)
    4aec:	147e6616 	blt	r2,r17,4488 <___vfprintf_internal_r+0xde8>
    4af0:	acc00204 	addi	r19,r21,8
    4af4:	003cd706 	br	3e54 <___vfprintf_internal_r+0x7b4>
    4af8:	07000074 	movhi	fp,1
    4afc:	e70eeb84 	addi	fp,fp,15278
    4b00:	003c4f06 	br	3c40 <___vfprintf_internal_r+0x5a0>
    4b04:	dd000f04 	addi	r20,sp,60
    4b08:	dc801904 	addi	r18,sp,100
    4b0c:	8009883a 	mov	r4,r16
    4b10:	880b883a 	mov	r5,r17
    4b14:	01800284 	movi	r6,10
    4b18:	000f883a 	mov	r7,zero
    4b1c:	000e0f80 	call	e0f8 <__umoddi3>
    4b20:	12000c04 	addi	r8,r2,48
    4b24:	94bfffc4 	addi	r18,r18,-1
    4b28:	8009883a 	mov	r4,r16
    4b2c:	880b883a 	mov	r5,r17
    4b30:	01800284 	movi	r6,10
    4b34:	000f883a 	mov	r7,zero
    4b38:	92000005 	stb	r8,0(r18)
    4b3c:	000db1c0 	call	db1c <__udivdi3>
    4b40:	1009883a 	mov	r4,r2
    4b44:	1021883a 	mov	r16,r2
    4b48:	18800068 	cmpgeui	r2,r3,1
    4b4c:	1823883a 	mov	r17,r3
    4b50:	103fee1e 	bne	r2,zero,4b0c <___vfprintf_internal_r+0x146c>
    4b54:	1800021e 	bne	r3,zero,4b60 <___vfprintf_internal_r+0x14c0>
    4b58:	00800244 	movi	r2,9
    4b5c:	113feb36 	bltu	r2,r4,4b0c <___vfprintf_internal_r+0x146c>
    4b60:	94bfffc4 	addi	r18,r18,-1
    4b64:	dc814115 	stw	r18,1284(sp)
    4b68:	003fc006 	br	4a6c <___vfprintf_internal_r+0x13cc>
    4b6c:	d9014c17 	ldw	r4,1328(sp)
    4b70:	2080004c 	andi	r2,r4,1
    4b74:	10009a1e 	bne	r2,zero,4de0 <___vfprintf_internal_r+0x1740>
    4b78:	d9401904 	addi	r5,sp,100
    4b7c:	dd000f04 	addi	r20,sp,60
    4b80:	d9414115 	stw	r5,1284(sp)
    4b84:	003d6106 	br	410c <___vfprintf_internal_r+0xa6c>
    4b88:	d9014f17 	ldw	r4,1340(sp)
    4b8c:	b00b883a 	mov	r5,r22
    4b90:	d9800c04 	addi	r6,sp,48
    4b94:	00036480 	call	3648 <__sprint_r>
    4b98:	103c791e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4b9c:	dc800e17 	ldw	r18,56(sp)
    4ba0:	d8c01904 	addi	r3,sp,100
    4ba4:	003cff06 	br	3fa4 <___vfprintf_internal_r+0x904>
    4ba8:	d8c14c17 	ldw	r3,1328(sp)
    4bac:	1880040c 	andi	r2,r3,16
    4bb0:	1000711e 	bne	r2,zero,4d78 <___vfprintf_internal_r+0x16d8>
    4bb4:	d9014c17 	ldw	r4,1328(sp)
    4bb8:	2080100c 	andi	r2,r4,64
    4bbc:	10006e26 	beq	r2,zero,4d78 <___vfprintf_internal_r+0x16d8>
    4bc0:	3c00000b 	ldhu	r16,0(r7)
    4bc4:	0023883a 	mov	r17,zero
    4bc8:	39c00104 	addi	r7,r7,4
    4bcc:	d9c14015 	stw	r7,1280(sp)
    4bd0:	003f0006 	br	47d4 <___vfprintf_internal_r+0x1134>
    4bd4:	dc400d17 	ldw	r17,52(sp)
    4bd8:	07000074 	movhi	fp,1
    4bdc:	e70eeb84 	addi	fp,fp,15278
    4be0:	9425883a 	add	r18,r18,r16
    4be4:	8c400044 	addi	r17,r17,1
    4be8:	008001c4 	movi	r2,7
    4bec:	1f000015 	stw	fp,0(r3)
    4bf0:	1c000115 	stw	r16,4(r3)
    4bf4:	dc800e15 	stw	r18,56(sp)
    4bf8:	dc400d15 	stw	r17,52(sp)
    4bfc:	147d7616 	blt	r2,r17,41d8 <___vfprintf_internal_r+0xb38>
    4c00:	18c00204 	addi	r3,r3,8
    4c04:	003d7b06 	br	41f4 <___vfprintf_internal_r+0xb54>
    4c08:	dc800e17 	ldw	r18,56(sp)
    4c0c:	dc400d17 	ldw	r17,52(sp)
    4c10:	07000074 	movhi	fp,1
    4c14:	e70eef84 	addi	fp,fp,15294
    4c18:	003bc006 	br	3b1c <___vfprintf_internal_r+0x47c>
    4c1c:	d9014f17 	ldw	r4,1340(sp)
    4c20:	b00b883a 	mov	r5,r22
    4c24:	d9800c04 	addi	r6,sp,48
    4c28:	00036480 	call	3648 <__sprint_r>
    4c2c:	103c541e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4c30:	dc800e17 	ldw	r18,56(sp)
    4c34:	d8c01904 	addi	r3,sp,100
    4c38:	003ce906 	br	3fe0 <___vfprintf_internal_r+0x940>
    4c3c:	3c000017 	ldw	r16,0(r7)
    4c40:	0009883a 	mov	r4,zero
    4c44:	39c00104 	addi	r7,r7,4
    4c48:	0023883a 	mov	r17,zero
    4c4c:	d9c14015 	stw	r7,1280(sp)
    4c50:	d8000405 	stb	zero,16(sp)
    4c54:	003d2006 	br	40d8 <___vfprintf_internal_r+0xa38>
    4c58:	38800017 	ldw	r2,0(r7)
    4c5c:	39c00104 	addi	r7,r7,4
    4c60:	d9c14015 	stw	r7,1280(sp)
    4c64:	1023d7fa 	srai	r17,r2,31
    4c68:	1021883a 	mov	r16,r2
    4c6c:	003d1806 	br	40d0 <___vfprintf_internal_r+0xa30>
    4c70:	3c000017 	ldw	r16,0(r7)
    4c74:	01000044 	movi	r4,1
    4c78:	39c00104 	addi	r7,r7,4
    4c7c:	0023883a 	mov	r17,zero
    4c80:	d9c14015 	stw	r7,1280(sp)
    4c84:	d8000405 	stb	zero,16(sp)
    4c88:	003d1306 	br	40d8 <___vfprintf_internal_r+0xa38>
    4c8c:	00800074 	movhi	r2,1
    4c90:	108eeb04 	addi	r2,r2,15276
    4c94:	94800044 	addi	r18,r18,1
    4c98:	8c400044 	addi	r17,r17,1
    4c9c:	a8800015 	stw	r2,0(r21)
    4ca0:	00c00044 	movi	r3,1
    4ca4:	008001c4 	movi	r2,7
    4ca8:	a8c00115 	stw	r3,4(r21)
    4cac:	dc800e15 	stw	r18,56(sp)
    4cb0:	dc400d15 	stw	r17,52(sp)
    4cb4:	1440ca16 	blt	r2,r17,4fe0 <___vfprintf_internal_r+0x1940>
    4cb8:	a8c00204 	addi	r3,r21,8
    4cbc:	2000061e 	bne	r4,zero,4cd8 <___vfprintf_internal_r+0x1638>
    4cc0:	d9414717 	ldw	r5,1308(sp)
    4cc4:	2800041e 	bne	r5,zero,4cd8 <___vfprintf_internal_r+0x1638>
    4cc8:	d9814c17 	ldw	r6,1328(sp)
    4ccc:	3080004c 	andi	r2,r6,1
    4cd0:	1005003a 	cmpeq	r2,r2,zero
    4cd4:	103bf01e 	bne	r2,zero,3c98 <___vfprintf_internal_r+0x5f8>
    4cd8:	00800044 	movi	r2,1
    4cdc:	dc400d17 	ldw	r17,52(sp)
    4ce0:	18800115 	stw	r2,4(r3)
    4ce4:	d8814917 	ldw	r2,1316(sp)
    4ce8:	94800044 	addi	r18,r18,1
    4cec:	8c400044 	addi	r17,r17,1
    4cf0:	18800015 	stw	r2,0(r3)
    4cf4:	008001c4 	movi	r2,7
    4cf8:	dc800e15 	stw	r18,56(sp)
    4cfc:	dc400d15 	stw	r17,52(sp)
    4d00:	1440ca16 	blt	r2,r17,502c <___vfprintf_internal_r+0x198c>
    4d04:	18c00204 	addi	r3,r3,8
    4d08:	0121c83a 	sub	r16,zero,r4
    4d0c:	0400500e 	bge	zero,r16,4e50 <___vfprintf_internal_r+0x17b0>
    4d10:	00800404 	movi	r2,16
    4d14:	1400800e 	bge	r2,r16,4f18 <___vfprintf_internal_r+0x1878>
    4d18:	1027883a 	mov	r19,r2
    4d1c:	07000074 	movhi	fp,1
    4d20:	e70eeb84 	addi	fp,fp,15278
    4d24:	050001c4 	movi	r20,7
    4d28:	00000306 	br	4d38 <___vfprintf_internal_r+0x1698>
    4d2c:	18c00204 	addi	r3,r3,8
    4d30:	843ffc04 	addi	r16,r16,-16
    4d34:	9c007a0e 	bge	r19,r16,4f20 <___vfprintf_internal_r+0x1880>
    4d38:	94800404 	addi	r18,r18,16
    4d3c:	8c400044 	addi	r17,r17,1
    4d40:	1f000015 	stw	fp,0(r3)
    4d44:	1cc00115 	stw	r19,4(r3)
    4d48:	dc800e15 	stw	r18,56(sp)
    4d4c:	dc400d15 	stw	r17,52(sp)
    4d50:	a47ff60e 	bge	r20,r17,4d2c <___vfprintf_internal_r+0x168c>
    4d54:	d9014f17 	ldw	r4,1340(sp)
    4d58:	b00b883a 	mov	r5,r22
    4d5c:	d9800c04 	addi	r6,sp,48
    4d60:	00036480 	call	3648 <__sprint_r>
    4d64:	103c061e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4d68:	dc800e17 	ldw	r18,56(sp)
    4d6c:	dc400d17 	ldw	r17,52(sp)
    4d70:	d8c01904 	addi	r3,sp,100
    4d74:	003fee06 	br	4d30 <___vfprintf_internal_r+0x1690>
    4d78:	3c000017 	ldw	r16,0(r7)
    4d7c:	0023883a 	mov	r17,zero
    4d80:	39c00104 	addi	r7,r7,4
    4d84:	d9c14015 	stw	r7,1280(sp)
    4d88:	003e9206 	br	47d4 <___vfprintf_internal_r+0x1134>
    4d8c:	d9401904 	addi	r5,sp,100
    4d90:	dd000f04 	addi	r20,sp,60
    4d94:	d9414115 	stw	r5,1284(sp)
    4d98:	d9814417 	ldw	r6,1296(sp)
    4d9c:	880a973a 	slli	r5,r17,28
    4da0:	8004d13a 	srli	r2,r16,4
    4da4:	810003cc 	andi	r4,r16,15
    4da8:	3109883a 	add	r4,r6,r4
    4dac:	2884b03a 	or	r2,r5,r2
    4db0:	21400003 	ldbu	r5,0(r4)
    4db4:	d9014117 	ldw	r4,1284(sp)
    4db8:	8806d13a 	srli	r3,r17,4
    4dbc:	1021883a 	mov	r16,r2
    4dc0:	213fffc4 	addi	r4,r4,-1
    4dc4:	d9014115 	stw	r4,1284(sp)
    4dc8:	d9814117 	ldw	r6,1284(sp)
    4dcc:	10c8b03a 	or	r4,r2,r3
    4dd0:	1823883a 	mov	r17,r3
    4dd4:	31400005 	stb	r5,0(r6)
    4dd8:	203fef1e 	bne	r4,zero,4d98 <___vfprintf_internal_r+0x16f8>
    4ddc:	003ccb06 	br	410c <___vfprintf_internal_r+0xa6c>
    4de0:	00800c04 	movi	r2,48
    4de4:	d98018c4 	addi	r6,sp,99
    4de8:	dd000f04 	addi	r20,sp,60
    4dec:	d88018c5 	stb	r2,99(sp)
    4df0:	d9814115 	stw	r6,1284(sp)
    4df4:	003cc506 	br	410c <___vfprintf_internal_r+0xa6c>
    4df8:	dc400d17 	ldw	r17,52(sp)
    4dfc:	07000074 	movhi	fp,1
    4e00:	e70eef84 	addi	fp,fp,15294
    4e04:	003bc706 	br	3d24 <___vfprintf_internal_r+0x684>
    4e08:	d9414c17 	ldw	r5,1328(sp)
    4e0c:	2880040c 	andi	r2,r5,16
    4e10:	10007c26 	beq	r2,zero,5004 <___vfprintf_internal_r+0x1964>
    4e14:	38800017 	ldw	r2,0(r7)
    4e18:	39c00104 	addi	r7,r7,4
    4e1c:	d9c14015 	stw	r7,1280(sp)
    4e20:	d9814b17 	ldw	r6,1324(sp)
    4e24:	d9c14017 	ldw	r7,1280(sp)
    4e28:	11800015 	stw	r6,0(r2)
    4e2c:	003a7806 	br	3810 <___vfprintf_internal_r+0x170>
    4e30:	d9014f17 	ldw	r4,1340(sp)
    4e34:	b00b883a 	mov	r5,r22
    4e38:	d9800c04 	addi	r6,sp,48
    4e3c:	00036480 	call	3648 <__sprint_r>
    4e40:	103bcf1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4e44:	dc800e17 	ldw	r18,56(sp)
    4e48:	dc400d17 	ldw	r17,52(sp)
    4e4c:	d8c01904 	addi	r3,sp,100
    4e50:	d9014717 	ldw	r4,1308(sp)
    4e54:	d9414117 	ldw	r5,1284(sp)
    4e58:	8c400044 	addi	r17,r17,1
    4e5c:	9125883a 	add	r18,r18,r4
    4e60:	008001c4 	movi	r2,7
    4e64:	19400015 	stw	r5,0(r3)
    4e68:	19000115 	stw	r4,4(r3)
    4e6c:	dc800e15 	stw	r18,56(sp)
    4e70:	dc400d15 	stw	r17,52(sp)
    4e74:	147cee16 	blt	r2,r17,4230 <___vfprintf_internal_r+0xb90>
    4e78:	18c00204 	addi	r3,r3,8
    4e7c:	003b8606 	br	3c98 <___vfprintf_internal_r+0x5f8>
    4e80:	38c00017 	ldw	r3,0(r7)
    4e84:	39000204 	addi	r4,r7,8
    4e88:	d9014015 	stw	r4,1280(sp)
    4e8c:	d8c14215 	stw	r3,1288(sp)
    4e90:	39c00117 	ldw	r7,4(r7)
    4e94:	d9c14315 	stw	r7,1292(sp)
    4e98:	003e2006 	br	471c <___vfprintf_internal_r+0x107c>
    4e9c:	0005883a 	mov	r2,zero
    4ea0:	1409c83a 	sub	r4,r2,r16
    4ea4:	1105803a 	cmpltu	r2,r2,r4
    4ea8:	044bc83a 	sub	r5,zero,r17
    4eac:	2885c83a 	sub	r2,r5,r2
    4eb0:	2021883a 	mov	r16,r4
    4eb4:	1023883a 	mov	r17,r2
    4eb8:	01000044 	movi	r4,1
    4ebc:	00800b44 	movi	r2,45
    4ec0:	d8800405 	stb	r2,16(sp)
    4ec4:	003c8406 	br	40d8 <___vfprintf_internal_r+0xa38>
    4ec8:	d9014f17 	ldw	r4,1340(sp)
    4ecc:	b00b883a 	mov	r5,r22
    4ed0:	d9800c04 	addi	r6,sp,48
    4ed4:	00036480 	call	3648 <__sprint_r>
    4ed8:	103ba91e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4edc:	dc800e17 	ldw	r18,56(sp)
    4ee0:	dc400d17 	ldw	r17,52(sp)
    4ee4:	d9000517 	ldw	r4,20(sp)
    4ee8:	d9401904 	addi	r5,sp,100
    4eec:	003da706 	br	458c <___vfprintf_internal_r+0xeec>
    4ef0:	d9014f17 	ldw	r4,1340(sp)
    4ef4:	b00b883a 	mov	r5,r22
    4ef8:	d9800c04 	addi	r6,sp,48
    4efc:	00036480 	call	3648 <__sprint_r>
    4f00:	103b9f1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4f04:	dc800e17 	ldw	r18,56(sp)
    4f08:	dc400d17 	ldw	r17,52(sp)
    4f0c:	d9000517 	ldw	r4,20(sp)
    4f10:	d8c01904 	addi	r3,sp,100
    4f14:	003d9106 	br	455c <___vfprintf_internal_r+0xebc>
    4f18:	07000074 	movhi	fp,1
    4f1c:	e70eeb84 	addi	fp,fp,15278
    4f20:	9425883a 	add	r18,r18,r16
    4f24:	8c400044 	addi	r17,r17,1
    4f28:	008001c4 	movi	r2,7
    4f2c:	1f000015 	stw	fp,0(r3)
    4f30:	1c000115 	stw	r16,4(r3)
    4f34:	dc800e15 	stw	r18,56(sp)
    4f38:	dc400d15 	stw	r17,52(sp)
    4f3c:	147fbc16 	blt	r2,r17,4e30 <___vfprintf_internal_r+0x1790>
    4f40:	18c00204 	addi	r3,r3,8
    4f44:	003fc206 	br	4e50 <___vfprintf_internal_r+0x17b0>
    4f48:	d9014f17 	ldw	r4,1340(sp)
    4f4c:	b00b883a 	mov	r5,r22
    4f50:	d9800c04 	addi	r6,sp,48
    4f54:	00036480 	call	3648 <__sprint_r>
    4f58:	103b891e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4f5c:	dc800e17 	ldw	r18,56(sp)
    4f60:	d9000517 	ldw	r4,20(sp)
    4f64:	d8c01904 	addi	r3,sp,100
    4f68:	003d0206 	br	4374 <___vfprintf_internal_r+0xcd4>
    4f6c:	07000074 	movhi	fp,1
    4f70:	e70eeb84 	addi	fp,fp,15278
    4f74:	003be406 	br	3f08 <___vfprintf_internal_r+0x868>
    4f78:	00800074 	movhi	r2,1
    4f7c:	108eda04 	addi	r2,r2,15208
    4f80:	d8814115 	stw	r2,1284(sp)
    4f84:	003df506 	br	475c <___vfprintf_internal_r+0x10bc>
    4f88:	d9014217 	ldw	r4,1288(sp)
    4f8c:	d9414317 	ldw	r5,1292(sp)
    4f90:	000a7580 	call	a758 <__isnand>
    4f94:	10003926 	beq	r2,zero,507c <___vfprintf_internal_r+0x19dc>
    4f98:	d9414d17 	ldw	r5,1332(sp)
    4f9c:	008011c4 	movi	r2,71
    4fa0:	1140ce16 	blt	r2,r5,52dc <___vfprintf_internal_r+0x1c3c>
    4fa4:	01800074 	movhi	r6,1
    4fa8:	318edb04 	addi	r6,r6,15212
    4fac:	d9814115 	stw	r6,1284(sp)
    4fb0:	003dea06 	br	475c <___vfprintf_internal_r+0x10bc>
    4fb4:	d9014c17 	ldw	r4,1328(sp)
    4fb8:	bdc00044 	addi	r23,r23,1
    4fbc:	b8c00007 	ldb	r3,0(r23)
    4fc0:	21000814 	ori	r4,r4,32
    4fc4:	d9014c15 	stw	r4,1328(sp)
    4fc8:	003a3406 	br	389c <___vfprintf_internal_r+0x1fc>
    4fcc:	dcc14515 	stw	r19,1300(sp)
    4fd0:	98011016 	blt	r19,zero,5414 <___vfprintf_internal_r+0x1d74>
    4fd4:	980f883a 	mov	r7,r19
    4fd8:	d8014615 	stw	zero,1304(sp)
    4fdc:	003c5206 	br	4128 <___vfprintf_internal_r+0xa88>
    4fe0:	d9014f17 	ldw	r4,1340(sp)
    4fe4:	b00b883a 	mov	r5,r22
    4fe8:	d9800c04 	addi	r6,sp,48
    4fec:	00036480 	call	3648 <__sprint_r>
    4ff0:	103b631e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    4ff4:	dc800e17 	ldw	r18,56(sp)
    4ff8:	d9000517 	ldw	r4,20(sp)
    4ffc:	d8c01904 	addi	r3,sp,100
    5000:	003f2e06 	br	4cbc <___vfprintf_internal_r+0x161c>
    5004:	d8c14c17 	ldw	r3,1328(sp)
    5008:	1880100c 	andi	r2,r3,64
    500c:	1000a026 	beq	r2,zero,5290 <___vfprintf_internal_r+0x1bf0>
    5010:	38800017 	ldw	r2,0(r7)
    5014:	39c00104 	addi	r7,r7,4
    5018:	d9c14015 	stw	r7,1280(sp)
    501c:	d9014b17 	ldw	r4,1324(sp)
    5020:	d9c14017 	ldw	r7,1280(sp)
    5024:	1100000d 	sth	r4,0(r2)
    5028:	0039f906 	br	3810 <___vfprintf_internal_r+0x170>
    502c:	d9014f17 	ldw	r4,1340(sp)
    5030:	b00b883a 	mov	r5,r22
    5034:	d9800c04 	addi	r6,sp,48
    5038:	00036480 	call	3648 <__sprint_r>
    503c:	103b501e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    5040:	dc800e17 	ldw	r18,56(sp)
    5044:	dc400d17 	ldw	r17,52(sp)
    5048:	d9000517 	ldw	r4,20(sp)
    504c:	d8c01904 	addi	r3,sp,100
    5050:	003f2d06 	br	4d08 <___vfprintf_internal_r+0x1668>
    5054:	00800184 	movi	r2,6
    5058:	14c09a36 	bltu	r2,r19,52c4 <___vfprintf_internal_r+0x1c24>
    505c:	dcc14515 	stw	r19,1300(sp)
    5060:	9800010e 	bge	r19,zero,5068 <___vfprintf_internal_r+0x19c8>
    5064:	d8014515 	stw	zero,1300(sp)
    5068:	00800074 	movhi	r2,1
    506c:	108edd04 	addi	r2,r2,15220
    5070:	980f883a 	mov	r7,r19
    5074:	d8814115 	stw	r2,1284(sp)
    5078:	003a7806 	br	3a5c <___vfprintf_internal_r+0x3bc>
    507c:	00bfffc4 	movi	r2,-1
    5080:	9880e226 	beq	r19,r2,540c <___vfprintf_internal_r+0x1d6c>
    5084:	d9414d17 	ldw	r5,1332(sp)
    5088:	008019c4 	movi	r2,103
    508c:	2880dc26 	beq	r5,r2,5400 <___vfprintf_internal_r+0x1d60>
    5090:	008011c4 	movi	r2,71
    5094:	2880da26 	beq	r5,r2,5400 <___vfprintf_internal_r+0x1d60>
    5098:	d9414c17 	ldw	r5,1328(sp)
    509c:	d9014317 	ldw	r4,1292(sp)
    50a0:	d9814217 	ldw	r6,1288(sp)
    50a4:	29404014 	ori	r5,r5,256
    50a8:	d9414c15 	stw	r5,1328(sp)
    50ac:	2000cc16 	blt	r4,zero,53e0 <___vfprintf_internal_r+0x1d40>
    50b0:	3021883a 	mov	r16,r6
    50b4:	2023883a 	mov	r17,r4
    50b8:	0039883a 	mov	fp,zero
    50bc:	d9414d17 	ldw	r5,1332(sp)
    50c0:	00801984 	movi	r2,102
    50c4:	2880b726 	beq	r5,r2,53a4 <___vfprintf_internal_r+0x1d04>
    50c8:	00801184 	movi	r2,70
    50cc:	2880b526 	beq	r5,r2,53a4 <___vfprintf_internal_r+0x1d04>
    50d0:	00801944 	movi	r2,101
    50d4:	2880c826 	beq	r5,r2,53f8 <___vfprintf_internal_r+0x1d58>
    50d8:	00801144 	movi	r2,69
    50dc:	2880c626 	beq	r5,r2,53f8 <___vfprintf_internal_r+0x1d58>
    50e0:	9829883a 	mov	r20,r19
    50e4:	d9014f17 	ldw	r4,1340(sp)
    50e8:	d8800504 	addi	r2,sp,20
    50ec:	880d883a 	mov	r6,r17
    50f0:	d8800115 	stw	r2,4(sp)
    50f4:	d8c00604 	addi	r3,sp,24
    50f8:	d8800704 	addi	r2,sp,28
    50fc:	800b883a 	mov	r5,r16
    5100:	01c00084 	movi	r7,2
    5104:	d8c00215 	stw	r3,8(sp)
    5108:	d8800315 	stw	r2,12(sp)
    510c:	dd000015 	stw	r20,0(sp)
    5110:	000712c0 	call	712c <_dtoa_r>
    5114:	d9814d17 	ldw	r6,1332(sp)
    5118:	d8814115 	stw	r2,1284(sp)
    511c:	008019c4 	movi	r2,103
    5120:	30809526 	beq	r6,r2,5378 <___vfprintf_internal_r+0x1cd8>
    5124:	d8c14d17 	ldw	r3,1332(sp)
    5128:	008011c4 	movi	r2,71
    512c:	18809226 	beq	r3,r2,5378 <___vfprintf_internal_r+0x1cd8>
    5130:	d9414117 	ldw	r5,1284(sp)
    5134:	d9814d17 	ldw	r6,1332(sp)
    5138:	00801984 	movi	r2,102
    513c:	2d25883a 	add	r18,r5,r20
    5140:	30808626 	beq	r6,r2,535c <___vfprintf_internal_r+0x1cbc>
    5144:	00801184 	movi	r2,70
    5148:	30808426 	beq	r6,r2,535c <___vfprintf_internal_r+0x1cbc>
    514c:	000d883a 	mov	r6,zero
    5150:	000f883a 	mov	r7,zero
    5154:	880b883a 	mov	r5,r17
    5158:	8009883a 	mov	r4,r16
    515c:	000f3300 	call	f330 <__eqdf2>
    5160:	1000751e 	bne	r2,zero,5338 <___vfprintf_internal_r+0x1c98>
    5164:	9005883a 	mov	r2,r18
    5168:	dc800715 	stw	r18,28(sp)
    516c:	d9014117 	ldw	r4,1284(sp)
    5170:	d9414d17 	ldw	r5,1332(sp)
    5174:	00c019c4 	movi	r3,103
    5178:	1125c83a 	sub	r18,r2,r4
    517c:	28c06826 	beq	r5,r3,5320 <___vfprintf_internal_r+0x1c80>
    5180:	008011c4 	movi	r2,71
    5184:	28806626 	beq	r5,r2,5320 <___vfprintf_internal_r+0x1c80>
    5188:	d9000517 	ldw	r4,20(sp)
    518c:	d8c14d17 	ldw	r3,1332(sp)
    5190:	00801944 	movi	r2,101
    5194:	10c05516 	blt	r2,r3,52ec <___vfprintf_internal_r+0x1c4c>
    5198:	213fffc4 	addi	r4,r4,-1
    519c:	d9000515 	stw	r4,20(sp)
    51a0:	d8c00805 	stb	r3,32(sp)
    51a4:	2021883a 	mov	r16,r4
    51a8:	2000c116 	blt	r4,zero,54b0 <___vfprintf_internal_r+0x1e10>
    51ac:	00800ac4 	movi	r2,43
    51b0:	d8800845 	stb	r2,33(sp)
    51b4:	00800244 	movi	r2,9
    51b8:	1400af0e 	bge	r2,r16,5478 <___vfprintf_internal_r+0x1dd8>
    51bc:	1027883a 	mov	r19,r2
    51c0:	dc400b84 	addi	r17,sp,46
    51c4:	8009883a 	mov	r4,r16
    51c8:	01400284 	movi	r5,10
    51cc:	000fb140 	call	fb14 <__modsi3>
    51d0:	10800c04 	addi	r2,r2,48
    51d4:	8c7fffc4 	addi	r17,r17,-1
    51d8:	8009883a 	mov	r4,r16
    51dc:	01400284 	movi	r5,10
    51e0:	88800005 	stb	r2,0(r17)
    51e4:	000fab40 	call	fab4 <__divsi3>
    51e8:	1021883a 	mov	r16,r2
    51ec:	98bff516 	blt	r19,r2,51c4 <___vfprintf_internal_r+0x1b24>
    51f0:	10c00c04 	addi	r3,r2,48
    51f4:	d88009c4 	addi	r2,sp,39
    51f8:	108001c4 	addi	r2,r2,7
    51fc:	897fffc4 	addi	r5,r17,-1
    5200:	88ffffc5 	stb	r3,-1(r17)
    5204:	2880a72e 	bgeu	r5,r2,54a4 <___vfprintf_internal_r+0x1e04>
    5208:	1009883a 	mov	r4,r2
    520c:	d9800804 	addi	r6,sp,32
    5210:	d8c00884 	addi	r3,sp,34
    5214:	28800003 	ldbu	r2,0(r5)
    5218:	29400044 	addi	r5,r5,1
    521c:	18800005 	stb	r2,0(r3)
    5220:	18c00044 	addi	r3,r3,1
    5224:	293ffb36 	bltu	r5,r4,5214 <___vfprintf_internal_r+0x1b74>
    5228:	1987c83a 	sub	r3,r3,r6
    522c:	00800044 	movi	r2,1
    5230:	d8c14815 	stw	r3,1312(sp)
    5234:	90cf883a 	add	r7,r18,r3
    5238:	1480960e 	bge	r2,r18,5494 <___vfprintf_internal_r+0x1df4>
    523c:	39c00044 	addi	r7,r7,1
    5240:	d9c14515 	stw	r7,1300(sp)
    5244:	38003416 	blt	r7,zero,5318 <___vfprintf_internal_r+0x1c78>
    5248:	e0803fcc 	andi	r2,fp,255
    524c:	1080201c 	xori	r2,r2,128
    5250:	10bfe004 	addi	r2,r2,-128
    5254:	10004e26 	beq	r2,zero,5390 <___vfprintf_internal_r+0x1cf0>
    5258:	00800b44 	movi	r2,45
    525c:	dc814715 	stw	r18,1308(sp)
    5260:	d8014615 	stw	zero,1304(sp)
    5264:	d8800405 	stb	r2,16(sp)
    5268:	003bb106 	br	4130 <___vfprintf_internal_r+0xa90>
    526c:	00800b44 	movi	r2,45
    5270:	d8800405 	stb	r2,16(sp)
    5274:	003d3306 	br	4744 <___vfprintf_internal_r+0x10a4>
    5278:	d9014f17 	ldw	r4,1340(sp)
    527c:	b00b883a 	mov	r5,r22
    5280:	d9800c04 	addi	r6,sp,48
    5284:	00036480 	call	3648 <__sprint_r>
    5288:	103abd1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x6e0>
    528c:	003abb06 	br	3d7c <___vfprintf_internal_r+0x6dc>
    5290:	38800017 	ldw	r2,0(r7)
    5294:	39c00104 	addi	r7,r7,4
    5298:	d9c14015 	stw	r7,1280(sp)
    529c:	d9414b17 	ldw	r5,1324(sp)
    52a0:	d9c14017 	ldw	r7,1280(sp)
    52a4:	11400015 	stw	r5,0(r2)
    52a8:	00395906 	br	3810 <___vfprintf_internal_r+0x170>
    52ac:	980f883a 	mov	r7,r19
    52b0:	dcc14515 	stw	r19,1300(sp)
    52b4:	d8014615 	stw	zero,1304(sp)
    52b8:	003b9b06 	br	4128 <___vfprintf_internal_r+0xa88>
    52bc:	0027883a 	mov	r19,zero
    52c0:	00397806 	br	38a4 <___vfprintf_internal_r+0x204>
    52c4:	00c00074 	movhi	r3,1
    52c8:	18cedd04 	addi	r3,r3,15220
    52cc:	100f883a 	mov	r7,r2
    52d0:	d8814515 	stw	r2,1300(sp)
    52d4:	d8c14115 	stw	r3,1284(sp)
    52d8:	0039e006 	br	3a5c <___vfprintf_internal_r+0x3bc>
    52dc:	00800074 	movhi	r2,1
    52e0:	108edc04 	addi	r2,r2,15216
    52e4:	d8814115 	stw	r2,1284(sp)
    52e8:	003d1c06 	br	475c <___vfprintf_internal_r+0x10bc>
    52ec:	d9414d17 	ldw	r5,1332(sp)
    52f0:	00801984 	movi	r2,102
    52f4:	28804926 	beq	r5,r2,541c <___vfprintf_internal_r+0x1d7c>
    52f8:	200f883a 	mov	r7,r4
    52fc:	24805716 	blt	r4,r18,545c <___vfprintf_internal_r+0x1dbc>
    5300:	d9414c17 	ldw	r5,1328(sp)
    5304:	2880004c 	andi	r2,r5,1
    5308:	10000126 	beq	r2,zero,5310 <___vfprintf_internal_r+0x1c70>
    530c:	21c00044 	addi	r7,r4,1
    5310:	d9c14515 	stw	r7,1300(sp)
    5314:	383fcc0e 	bge	r7,zero,5248 <___vfprintf_internal_r+0x1ba8>
    5318:	d8014515 	stw	zero,1300(sp)
    531c:	003fca06 	br	5248 <___vfprintf_internal_r+0x1ba8>
    5320:	d9000517 	ldw	r4,20(sp)
    5324:	00bfff04 	movi	r2,-4
    5328:	1100480e 	bge	r2,r4,544c <___vfprintf_internal_r+0x1dac>
    532c:	99004716 	blt	r19,r4,544c <___vfprintf_internal_r+0x1dac>
    5330:	d8c14d15 	stw	r3,1332(sp)
    5334:	003ff006 	br	52f8 <___vfprintf_internal_r+0x1c58>
    5338:	d8800717 	ldw	r2,28(sp)
    533c:	14bf8b2e 	bgeu	r2,r18,516c <___vfprintf_internal_r+0x1acc>
    5340:	9007883a 	mov	r3,r18
    5344:	01000c04 	movi	r4,48
    5348:	11000005 	stb	r4,0(r2)
    534c:	10800044 	addi	r2,r2,1
    5350:	d8800715 	stw	r2,28(sp)
    5354:	18bffc1e 	bne	r3,r2,5348 <___vfprintf_internal_r+0x1ca8>
    5358:	003f8406 	br	516c <___vfprintf_internal_r+0x1acc>
    535c:	d8814117 	ldw	r2,1284(sp)
    5360:	10c00007 	ldb	r3,0(r2)
    5364:	00800c04 	movi	r2,48
    5368:	18805b26 	beq	r3,r2,54d8 <___vfprintf_internal_r+0x1e38>
    536c:	d9000517 	ldw	r4,20(sp)
    5370:	9125883a 	add	r18,r18,r4
    5374:	003f7506 	br	514c <___vfprintf_internal_r+0x1aac>
    5378:	d9014c17 	ldw	r4,1328(sp)
    537c:	2080004c 	andi	r2,r4,1
    5380:	1005003a 	cmpeq	r2,r2,zero
    5384:	103f6a26 	beq	r2,zero,5130 <___vfprintf_internal_r+0x1a90>
    5388:	d8800717 	ldw	r2,28(sp)
    538c:	003f7706 	br	516c <___vfprintf_internal_r+0x1acc>
    5390:	d9c14515 	stw	r7,1300(sp)
    5394:	38004d16 	blt	r7,zero,54cc <___vfprintf_internal_r+0x1e2c>
    5398:	dc814715 	stw	r18,1308(sp)
    539c:	d8014615 	stw	zero,1304(sp)
    53a0:	003b6106 	br	4128 <___vfprintf_internal_r+0xa88>
    53a4:	d9014f17 	ldw	r4,1340(sp)
    53a8:	d8800504 	addi	r2,sp,20
    53ac:	d8800115 	stw	r2,4(sp)
    53b0:	d8c00604 	addi	r3,sp,24
    53b4:	d8800704 	addi	r2,sp,28
    53b8:	800b883a 	mov	r5,r16
    53bc:	880d883a 	mov	r6,r17
    53c0:	01c000c4 	movi	r7,3
    53c4:	d8c00215 	stw	r3,8(sp)
    53c8:	d8800315 	stw	r2,12(sp)
    53cc:	dcc00015 	stw	r19,0(sp)
    53d0:	9829883a 	mov	r20,r19
    53d4:	000712c0 	call	712c <_dtoa_r>
    53d8:	d8814115 	stw	r2,1284(sp)
    53dc:	003f5106 	br	5124 <___vfprintf_internal_r+0x1a84>
    53e0:	d8c14217 	ldw	r3,1288(sp)
    53e4:	d9014317 	ldw	r4,1292(sp)
    53e8:	07000b44 	movi	fp,45
    53ec:	1821883a 	mov	r16,r3
    53f0:	2460003c 	xorhi	r17,r4,32768
    53f4:	003f3106 	br	50bc <___vfprintf_internal_r+0x1a1c>
    53f8:	9d000044 	addi	r20,r19,1
    53fc:	003f3906 	br	50e4 <___vfprintf_internal_r+0x1a44>
    5400:	983f251e 	bne	r19,zero,5098 <___vfprintf_internal_r+0x19f8>
    5404:	04c00044 	movi	r19,1
    5408:	003f2306 	br	5098 <___vfprintf_internal_r+0x19f8>
    540c:	04c00184 	movi	r19,6
    5410:	003f2106 	br	5098 <___vfprintf_internal_r+0x19f8>
    5414:	d8014515 	stw	zero,1300(sp)
    5418:	003eee06 	br	4fd4 <___vfprintf_internal_r+0x1934>
    541c:	200f883a 	mov	r7,r4
    5420:	0100370e 	bge	zero,r4,5500 <___vfprintf_internal_r+0x1e60>
    5424:	9800031e 	bne	r19,zero,5434 <___vfprintf_internal_r+0x1d94>
    5428:	d9814c17 	ldw	r6,1328(sp)
    542c:	3080004c 	andi	r2,r6,1
    5430:	103fb726 	beq	r2,zero,5310 <___vfprintf_internal_r+0x1c70>
    5434:	20800044 	addi	r2,r4,1
    5438:	98a7883a 	add	r19,r19,r2
    543c:	dcc14515 	stw	r19,1300(sp)
    5440:	980f883a 	mov	r7,r19
    5444:	983f800e 	bge	r19,zero,5248 <___vfprintf_internal_r+0x1ba8>
    5448:	003fb306 	br	5318 <___vfprintf_internal_r+0x1c78>
    544c:	d9814d17 	ldw	r6,1332(sp)
    5450:	31bfff84 	addi	r6,r6,-2
    5454:	d9814d15 	stw	r6,1332(sp)
    5458:	003f4c06 	br	518c <___vfprintf_internal_r+0x1aec>
    545c:	0100180e 	bge	zero,r4,54c0 <___vfprintf_internal_r+0x1e20>
    5460:	00800044 	movi	r2,1
    5464:	1485883a 	add	r2,r2,r18
    5468:	d8814515 	stw	r2,1300(sp)
    546c:	100f883a 	mov	r7,r2
    5470:	103f750e 	bge	r2,zero,5248 <___vfprintf_internal_r+0x1ba8>
    5474:	003fa806 	br	5318 <___vfprintf_internal_r+0x1c78>
    5478:	80c00c04 	addi	r3,r16,48
    547c:	00800c04 	movi	r2,48
    5480:	d8c008c5 	stb	r3,35(sp)
    5484:	d9800804 	addi	r6,sp,32
    5488:	d8c00904 	addi	r3,sp,36
    548c:	d8800885 	stb	r2,34(sp)
    5490:	003f6506 	br	5228 <___vfprintf_internal_r+0x1b88>
    5494:	d9014c17 	ldw	r4,1328(sp)
    5498:	2084703a 	and	r2,r4,r2
    549c:	103f9c26 	beq	r2,zero,5310 <___vfprintf_internal_r+0x1c70>
    54a0:	003f6606 	br	523c <___vfprintf_internal_r+0x1b9c>
    54a4:	d9800804 	addi	r6,sp,32
    54a8:	d8c00884 	addi	r3,sp,34
    54ac:	003f5e06 	br	5228 <___vfprintf_internal_r+0x1b88>
    54b0:	00800b44 	movi	r2,45
    54b4:	0121c83a 	sub	r16,zero,r4
    54b8:	d8800845 	stb	r2,33(sp)
    54bc:	003f3d06 	br	51b4 <___vfprintf_internal_r+0x1b14>
    54c0:	00800084 	movi	r2,2
    54c4:	1105c83a 	sub	r2,r2,r4
    54c8:	003fe606 	br	5464 <___vfprintf_internal_r+0x1dc4>
    54cc:	d8014515 	stw	zero,1300(sp)
    54d0:	dc814715 	stw	r18,1308(sp)
    54d4:	003fb106 	br	539c <___vfprintf_internal_r+0x1cfc>
    54d8:	000d883a 	mov	r6,zero
    54dc:	000f883a 	mov	r7,zero
    54e0:	8009883a 	mov	r4,r16
    54e4:	880b883a 	mov	r5,r17
    54e8:	000f3b80 	call	f3b8 <__nedf2>
    54ec:	103f9f26 	beq	r2,zero,536c <___vfprintf_internal_r+0x1ccc>
    54f0:	00800044 	movi	r2,1
    54f4:	1509c83a 	sub	r4,r2,r20
    54f8:	d9000515 	stw	r4,20(sp)
    54fc:	003f9b06 	br	536c <___vfprintf_internal_r+0x1ccc>
    5500:	98000d1e 	bne	r19,zero,5538 <___vfprintf_internal_r+0x1e98>
    5504:	d8c14c17 	ldw	r3,1328(sp)
    5508:	1880004c 	andi	r2,r3,1
    550c:	10000a1e 	bne	r2,zero,5538 <___vfprintf_internal_r+0x1e98>
    5510:	01000044 	movi	r4,1
    5514:	200f883a 	mov	r7,r4
    5518:	d9014515 	stw	r4,1300(sp)
    551c:	003f4a06 	br	5248 <___vfprintf_internal_r+0x1ba8>
    5520:	3cc00017 	ldw	r19,0(r7)
    5524:	39c00104 	addi	r7,r7,4
    5528:	983d0e0e 	bge	r19,zero,4964 <___vfprintf_internal_r+0x12c4>
    552c:	b8c00007 	ldb	r3,0(r23)
    5530:	04ffffc4 	movi	r19,-1
    5534:	0038d906 	br	389c <___vfprintf_internal_r+0x1fc>
    5538:	9cc00084 	addi	r19,r19,2
    553c:	dcc14515 	stw	r19,1300(sp)
    5540:	980f883a 	mov	r7,r19
    5544:	983f400e 	bge	r19,zero,5248 <___vfprintf_internal_r+0x1ba8>
    5548:	003f7306 	br	5318 <___vfprintf_internal_r+0x1c78>

0000554c <__vfprintf_internal>:
    554c:	00800074 	movhi	r2,1
    5550:	10970104 	addi	r2,r2,23556
    5554:	2013883a 	mov	r9,r4
    5558:	11000017 	ldw	r4,0(r2)
    555c:	2805883a 	mov	r2,r5
    5560:	300f883a 	mov	r7,r6
    5564:	480b883a 	mov	r5,r9
    5568:	100d883a 	mov	r6,r2
    556c:	00036a01 	jmpi	36a0 <___vfprintf_internal_r>

00005570 <__svfscanf_r>:
    5570:	deff4e04 	addi	sp,sp,-712
    5574:	dd80ae15 	stw	r22,696(sp)
    5578:	dd00ac15 	stw	r20,688(sp)
    557c:	dc40a915 	stw	r17,676(sp)
    5580:	dc00a815 	stw	r16,672(sp)
    5584:	dfc0b115 	stw	ra,708(sp)
    5588:	df00b015 	stw	fp,704(sp)
    558c:	ddc0af15 	stw	r23,700(sp)
    5590:	dd40ad15 	stw	r21,692(sp)
    5594:	dcc0ab15 	stw	r19,684(sp)
    5598:	dc80aa15 	stw	r18,680(sp)
    559c:	202d883a 	mov	r22,r4
    55a0:	2821883a 	mov	r16,r5
    55a4:	d9c0a415 	stw	r7,656(sp)
    55a8:	3029883a 	mov	r20,r6
    55ac:	d800a215 	stw	zero,648(sp)
    55b0:	0023883a 	mov	r17,zero
    55b4:	d800a115 	stw	zero,644(sp)
    55b8:	d800a015 	stw	zero,640(sp)
    55bc:	a1000007 	ldb	r4,0(r20)
    55c0:	d9000115 	stw	r4,4(sp)
    55c4:	20001f26 	beq	r4,zero,5644 <__svfscanf_r+0xd4>
    55c8:	04800074 	movhi	r18,1
    55cc:	94970504 	addi	r18,r18,23572
    55d0:	91800017 	ldw	r6,0(r18)
    55d4:	a5000044 	addi	r20,r20,1
    55d8:	3107883a 	add	r3,r6,r4
    55dc:	18800003 	ldbu	r2,0(r3)
    55e0:	1080020c 	andi	r2,r2,8
    55e4:	10002426 	beq	r2,zero,5678 <__svfscanf_r+0x108>
    55e8:	80c00117 	ldw	r3,4(r16)
    55ec:	00c00e0e 	bge	zero,r3,5628 <__svfscanf_r+0xb8>
    55f0:	81400017 	ldw	r5,0(r16)
    55f4:	90800017 	ldw	r2,0(r18)
    55f8:	28c00003 	ldbu	r3,0(r5)
    55fc:	1887883a 	add	r3,r3,r2
    5600:	19000003 	ldbu	r4,0(r3)
    5604:	2100020c 	andi	r4,r4,8
    5608:	203fec26 	beq	r4,zero,55bc <__svfscanf_r+0x4c>
    560c:	80c00117 	ldw	r3,4(r16)
    5610:	29800044 	addi	r6,r5,1
    5614:	8c400044 	addi	r17,r17,1
    5618:	18ffffc4 	addi	r3,r3,-1
    561c:	81800015 	stw	r6,0(r16)
    5620:	80c00115 	stw	r3,4(r16)
    5624:	00fff216 	blt	zero,r3,55f0 <__svfscanf_r+0x80>
    5628:	b009883a 	mov	r4,r22
    562c:	800b883a 	mov	r5,r16
    5630:	00032300 	call	3230 <__srefill_r>
    5634:	103fee26 	beq	r2,zero,55f0 <__svfscanf_r+0x80>
    5638:	a1000007 	ldb	r4,0(r20)
    563c:	d9000115 	stw	r4,4(sp)
    5640:	203fe11e 	bne	r4,zero,55c8 <__svfscanf_r+0x58>
    5644:	d880a217 	ldw	r2,648(sp)
    5648:	dfc0b117 	ldw	ra,708(sp)
    564c:	df00b017 	ldw	fp,704(sp)
    5650:	ddc0af17 	ldw	r23,700(sp)
    5654:	dd80ae17 	ldw	r22,696(sp)
    5658:	dd40ad17 	ldw	r21,692(sp)
    565c:	dd00ac17 	ldw	r20,688(sp)
    5660:	dcc0ab17 	ldw	r19,684(sp)
    5664:	dc80aa17 	ldw	r18,680(sp)
    5668:	dc40a917 	ldw	r17,676(sp)
    566c:	dc00a817 	ldw	r16,672(sp)
    5670:	dec0b204 	addi	sp,sp,712
    5674:	f800283a 	ret
    5678:	00800944 	movi	r2,37
    567c:	20801626 	beq	r4,r2,56d8 <__svfscanf_r+0x168>
    5680:	80800117 	ldw	r2,4(r16)
    5684:	00800b0e 	bge	zero,r2,56b4 <__svfscanf_r+0x144>
    5688:	81000017 	ldw	r4,0(r16)
    568c:	a0ffffc7 	ldb	r3,-1(r20)
    5690:	20800003 	ldbu	r2,0(r4)
    5694:	10ffeb1e 	bne	r2,r3,5644 <__svfscanf_r+0xd4>
    5698:	80c00117 	ldw	r3,4(r16)
    569c:	21800044 	addi	r6,r4,1
    56a0:	8c400044 	addi	r17,r17,1
    56a4:	18ffffc4 	addi	r3,r3,-1
    56a8:	80c00115 	stw	r3,4(r16)
    56ac:	81800015 	stw	r6,0(r16)
    56b0:	003fc206 	br	55bc <__svfscanf_r+0x4c>
    56b4:	b009883a 	mov	r4,r22
    56b8:	800b883a 	mov	r5,r16
    56bc:	00032300 	call	3230 <__srefill_r>
    56c0:	103ff126 	beq	r2,zero,5688 <__svfscanf_r+0x118>
    56c4:	d900a217 	ldw	r4,648(sp)
    56c8:	2004c91e 	bne	r4,zero,69f0 <__svfscanf_r+0x1480>
    56cc:	00bfffc4 	movi	r2,-1
    56d0:	d880a215 	stw	r2,648(sp)
    56d4:	003fdb06 	br	5644 <__svfscanf_r+0xd4>
    56d8:	d800a315 	stw	zero,652(sp)
    56dc:	0027883a 	mov	r19,zero
    56e0:	a0c00003 	ldbu	r3,0(r20)
    56e4:	00801e04 	movi	r2,120
    56e8:	a5000044 	addi	r20,r20,1
    56ec:	19403fcc 	andi	r5,r3,255
    56f0:	2940201c 	xori	r5,r5,128
    56f4:	297fe004 	addi	r5,r5,-128
    56f8:	10c08036 	bltu	r2,r3,58fc <__svfscanf_r+0x38c>
    56fc:	18c5883a 	add	r2,r3,r3
    5700:	1085883a 	add	r2,r2,r2
    5704:	00c00034 	movhi	r3,0
    5708:	18d5c604 	addi	r3,r3,22296
    570c:	10c5883a 	add	r2,r2,r3
    5710:	11000017 	ldw	r4,0(r2)
    5714:	2000683a 	jmp	r4
    5718:	000056cc 	andi	zero,zero,347
    571c:	000058fc 	xorhi	zero,zero,355
    5720:	000058fc 	xorhi	zero,zero,355
    5724:	000058fc 	xorhi	zero,zero,355
    5728:	000058fc 	xorhi	zero,zero,355
    572c:	000058fc 	xorhi	zero,zero,355
    5730:	000058fc 	xorhi	zero,zero,355
    5734:	000058fc 	xorhi	zero,zero,355
    5738:	000058fc 	xorhi	zero,zero,355
    573c:	000058fc 	xorhi	zero,zero,355
    5740:	000058fc 	xorhi	zero,zero,355
    5744:	000058fc 	xorhi	zero,zero,355
    5748:	000058fc 	xorhi	zero,zero,355
    574c:	000058fc 	xorhi	zero,zero,355
    5750:	000058fc 	xorhi	zero,zero,355
    5754:	000058fc 	xorhi	zero,zero,355
    5758:	000058fc 	xorhi	zero,zero,355
    575c:	000058fc 	xorhi	zero,zero,355
    5760:	000058fc 	xorhi	zero,zero,355
    5764:	000058fc 	xorhi	zero,zero,355
    5768:	000058fc 	xorhi	zero,zero,355
    576c:	000058fc 	xorhi	zero,zero,355
    5770:	000058fc 	xorhi	zero,zero,355
    5774:	000058fc 	xorhi	zero,zero,355
    5778:	000058fc 	xorhi	zero,zero,355
    577c:	000058fc 	xorhi	zero,zero,355
    5780:	000058fc 	xorhi	zero,zero,355
    5784:	000058fc 	xorhi	zero,zero,355
    5788:	000058fc 	xorhi	zero,zero,355
    578c:	000058fc 	xorhi	zero,zero,355
    5790:	000058fc 	xorhi	zero,zero,355
    5794:	000058fc 	xorhi	zero,zero,355
    5798:	000058fc 	xorhi	zero,zero,355
    579c:	000058fc 	xorhi	zero,zero,355
    57a0:	000058fc 	xorhi	zero,zero,355
    57a4:	000058fc 	xorhi	zero,zero,355
    57a8:	000058fc 	xorhi	zero,zero,355
    57ac:	00005680 	call	568 <read_444_format+0x378>
    57b0:	000058fc 	xorhi	zero,zero,355
    57b4:	000058fc 	xorhi	zero,zero,355
    57b8:	000058fc 	xorhi	zero,zero,355
    57bc:	000058fc 	xorhi	zero,zero,355
    57c0:	00006920 	cmpeqi	zero,zero,420
    57c4:	000058fc 	xorhi	zero,zero,355
    57c8:	000058fc 	xorhi	zero,zero,355
    57cc:	000058fc 	xorhi	zero,zero,355
    57d0:	000058fc 	xorhi	zero,zero,355
    57d4:	000058fc 	xorhi	zero,zero,355
    57d8:	0000631c 	xori	zero,zero,396
    57dc:	0000631c 	xori	zero,zero,396
    57e0:	0000631c 	xori	zero,zero,396
    57e4:	0000631c 	xori	zero,zero,396
    57e8:	0000631c 	xori	zero,zero,396
    57ec:	0000631c 	xori	zero,zero,396
    57f0:	0000631c 	xori	zero,zero,396
    57f4:	0000631c 	xori	zero,zero,396
    57f8:	0000631c 	xori	zero,zero,396
    57fc:	0000631c 	xori	zero,zero,396
    5800:	000058fc 	xorhi	zero,zero,355
    5804:	000058fc 	xorhi	zero,zero,355
    5808:	000058fc 	xorhi	zero,zero,355
    580c:	000058fc 	xorhi	zero,zero,355
    5810:	000058fc 	xorhi	zero,zero,355
    5814:	000058fc 	xorhi	zero,zero,355
    5818:	000058fc 	xorhi	zero,zero,355
    581c:	000058fc 	xorhi	zero,zero,355
    5820:	000058fc 	xorhi	zero,zero,355
    5824:	000058fc 	xorhi	zero,zero,355
    5828:	00006a9c 	xori	zero,zero,426
    582c:	00006a94 	movui	zero,426
    5830:	000058fc 	xorhi	zero,zero,355
    5834:	00006a94 	movui	zero,426
    5838:	000058fc 	xorhi	zero,zero,355
    583c:	000058fc 	xorhi	zero,zero,355
    5840:	000058fc 	xorhi	zero,zero,355
    5844:	000058fc 	xorhi	zero,zero,355
    5848:	00006b2c 	andhi	zero,zero,428
    584c:	000058fc 	xorhi	zero,zero,355
    5850:	000058fc 	xorhi	zero,zero,355
    5854:	00006ae4 	muli	zero,zero,427
    5858:	000058fc 	xorhi	zero,zero,355
    585c:	000058fc 	xorhi	zero,zero,355
    5860:	000058fc 	xorhi	zero,zero,355
    5864:	000058fc 	xorhi	zero,zero,355
    5868:	000058fc 	xorhi	zero,zero,355
    586c:	000058fc 	xorhi	zero,zero,355
    5870:	000058fc 	xorhi	zero,zero,355
    5874:	000058fc 	xorhi	zero,zero,355
    5878:	00006928 	cmpgeui	zero,zero,420
    587c:	000058fc 	xorhi	zero,zero,355
    5880:	000058fc 	xorhi	zero,zero,355
    5884:	00006ac8 	cmpgei	zero,zero,427
    5888:	000058fc 	xorhi	zero,zero,355
    588c:	000058fc 	xorhi	zero,zero,355
    5890:	000058fc 	xorhi	zero,zero,355
    5894:	000058fc 	xorhi	zero,zero,355
    5898:	000058fc 	xorhi	zero,zero,355
    589c:	000058fc 	xorhi	zero,zero,355
    58a0:	000058fc 	xorhi	zero,zero,355
    58a4:	00006abc 	xorhi	zero,zero,426
    58a8:	00006aa0 	cmpeqi	zero,zero,426
    58ac:	00006a94 	movui	zero,426
    58b0:	00006a94 	movui	zero,426
    58b4:	00006a94 	movui	zero,426
    58b8:	00006a8c 	andi	zero,zero,426
    58bc:	00006b80 	call	6b8 <read_444_format+0x4c8>
    58c0:	000058fc 	xorhi	zero,zero,355
    58c4:	000058fc 	xorhi	zero,zero,355
    58c8:	00006b6c 	andhi	zero,zero,429
    58cc:	000058fc 	xorhi	zero,zero,355
    58d0:	00006b04 	movi	zero,428
    58d4:	00006ae8 	cmpgeui	zero,zero,427
    58d8:	00006b3c 	xorhi	zero,zero,428
    58dc:	000058fc 	xorhi	zero,zero,355
    58e0:	000058fc 	xorhi	zero,zero,355
    58e4:	00006b34 	movhi	zero,428
    58e8:	000058fc 	xorhi	zero,zero,355
    58ec:	00005e6c 	andhi	zero,zero,377
    58f0:	000058fc 	xorhi	zero,zero,355
    58f4:	000058fc 	xorhi	zero,zero,355
    58f8:	00006928 	cmpgeui	zero,zero,420
    58fc:	2987883a 	add	r3,r5,r6
    5900:	18800003 	ldbu	r2,0(r3)
    5904:	1080004c 	andi	r2,r2,1
    5908:	1005003a 	cmpeq	r2,r2,zero
    590c:	10002c26 	beq	r2,zero,59c0 <__svfscanf_r+0x450>
    5910:	01000074 	movhi	r4,1
    5914:	21301304 	addi	r4,r4,-16308
    5918:	00800284 	movi	r2,10
    591c:	d900a015 	stw	r4,640(sp)
    5920:	054000c4 	movi	r21,3
    5924:	d880a115 	stw	r2,644(sp)
    5928:	80c00117 	ldw	r3,4(r16)
    592c:	00c14a0e 	bge	zero,r3,5e58 <__svfscanf_r+0x8e8>
    5930:	9880100c 	andi	r2,r19,64
    5934:	10001326 	beq	r2,zero,5984 <__svfscanf_r+0x414>
    5938:	00800104 	movi	r2,4
    593c:	157f1f36 	bltu	r2,r21,55bc <__svfscanf_r+0x4c>
    5940:	ad45883a 	add	r2,r21,r21
    5944:	1085883a 	add	r2,r2,r2
    5948:	00c00034 	movhi	r3,0
    594c:	18d65704 	addi	r3,r3,22876
    5950:	10c5883a 	add	r2,r2,r3
    5954:	11000017 	ldw	r4,0(r2)
    5958:	2000683a 	jmp	r4
    595c:	000059c8 	cmpgei	zero,zero,359
    5960:	00005ad4 	movui	zero,363
    5964:	00005b48 	cmpgei	zero,zero,365
    5968:	00005e34 	movhi	zero,376
    596c:	00005c80 	call	5c8 <read_444_format+0x3d8>
    5970:	b009883a 	mov	r4,r22
    5974:	800b883a 	mov	r5,r16
    5978:	00032300 	call	3230 <__srefill_r>
    597c:	103f511e 	bne	r2,zero,56c4 <__svfscanf_r+0x154>
    5980:	8c400044 	addi	r17,r17,1
    5984:	81400017 	ldw	r5,0(r16)
    5988:	90800017 	ldw	r2,0(r18)
    598c:	28c00003 	ldbu	r3,0(r5)
    5990:	1887883a 	add	r3,r3,r2
    5994:	19000003 	ldbu	r4,0(r3)
    5998:	2100020c 	andi	r4,r4,8
    599c:	203fe626 	beq	r4,zero,5938 <__svfscanf_r+0x3c8>
    59a0:	80c00117 	ldw	r3,4(r16)
    59a4:	18ffffc4 	addi	r3,r3,-1
    59a8:	80c00115 	stw	r3,4(r16)
    59ac:	00fff00e 	bge	zero,r3,5970 <__svfscanf_r+0x400>
    59b0:	29800044 	addi	r6,r5,1
    59b4:	8c400044 	addi	r17,r17,1
    59b8:	81800015 	stw	r6,0(r16)
    59bc:	003ff106 	br	5984 <__svfscanf_r+0x414>
    59c0:	9cc00054 	ori	r19,r19,1
    59c4:	003fd206 	br	5910 <__svfscanf_r+0x3a0>
    59c8:	d8c0a317 	ldw	r3,652(sp)
    59cc:	1800021e 	bne	r3,zero,59d8 <__svfscanf_r+0x468>
    59d0:	01000044 	movi	r4,1
    59d4:	d900a315 	stw	r4,652(sp)
    59d8:	9880004c 	andi	r2,r19,1
    59dc:	1005003a 	cmpeq	r2,r2,zero
    59e0:	1003d91e 	bne	r2,zero,6948 <__svfscanf_r+0x13d8>
    59e4:	9d40040c 	andi	r21,r19,16
    59e8:	a839003a 	cmpeq	fp,r21,zero
    59ec:	e0042526 	beq	fp,zero,6a84 <__svfscanf_r+0x1514>
    59f0:	d880a417 	ldw	r2,656(sp)
    59f4:	14c00017 	ldw	r19,0(r2)
    59f8:	10800104 	addi	r2,r2,4
    59fc:	d880a415 	stw	r2,656(sp)
    5a00:	d8c0a317 	ldw	r3,652(sp)
    5a04:	18041a26 	beq	r3,zero,6a70 <__svfscanf_r+0x1500>
    5a08:	01000074 	movhi	r4,1
    5a0c:	21170604 	addi	r4,r4,23576
    5a10:	20800017 	ldw	r2,0(r4)
    5a14:	103f2b26 	beq	r2,zero,56c4 <__svfscanf_r+0x154>
    5a18:	d8804404 	addi	r2,sp,272
    5a1c:	0025883a 	mov	r18,zero
    5a20:	d880a615 	stw	r2,664(sp)
    5a24:	05ffffc4 	movi	r23,-1
    5a28:	80800017 	ldw	r2,0(r16)
    5a2c:	80c00117 	ldw	r3,4(r16)
    5a30:	d900a617 	ldw	r4,664(sp)
    5a34:	12000003 	ldbu	r8,0(r2)
    5a38:	18ffffc4 	addi	r3,r3,-1
    5a3c:	11800044 	addi	r6,r2,1
    5a40:	248f883a 	add	r7,r4,r18
    5a44:	80c00115 	stw	r3,4(r16)
    5a48:	81800015 	stw	r6,0(r16)
    5a4c:	3a000005 	stb	r8,0(r7)
    5a50:	d9000204 	addi	r4,sp,8
    5a54:	000b883a 	mov	r5,zero
    5a58:	01800204 	movi	r6,8
    5a5c:	0002ff40 	call	2ff4 <memset>
    5a60:	d980a617 	ldw	r6,664(sp)
    5a64:	94800044 	addi	r18,r18,1
    5a68:	d8800204 	addi	r2,sp,8
    5a6c:	b009883a 	mov	r4,r22
    5a70:	980b883a 	mov	r5,r19
    5a74:	900f883a 	mov	r7,r18
    5a78:	d8800015 	stw	r2,0(sp)
    5a7c:	0008df40 	call	8df4 <_mbrtowc_r>
    5a80:	1007883a 	mov	r3,r2
    5a84:	15ff0f26 	beq	r2,r23,56c4 <__svfscanf_r+0x154>
    5a88:	1003f11e 	bne	r2,zero,6a50 <__svfscanf_r+0x14e0>
    5a8c:	a800011e 	bne	r21,zero,5a94 <__svfscanf_r+0x524>
    5a90:	98000015 	stw	zero,0(r19)
    5a94:	d8c0a317 	ldw	r3,652(sp)
    5a98:	8ca3883a 	add	r17,r17,r18
    5a9c:	18ffffc4 	addi	r3,r3,-1
    5aa0:	d8c0a315 	stw	r3,652(sp)
    5aa4:	e0000126 	beq	fp,zero,5aac <__svfscanf_r+0x53c>
    5aa8:	9cc00104 	addi	r19,r19,4
    5aac:	0025883a 	mov	r18,zero
    5ab0:	80c00117 	ldw	r3,4(r16)
    5ab4:	00c3e90e 	bge	zero,r3,6a5c <__svfscanf_r+0x14ec>
    5ab8:	d900a317 	ldw	r4,652(sp)
    5abc:	2003ec26 	beq	r4,zero,6a70 <__svfscanf_r+0x1500>
    5ac0:	00c00074 	movhi	r3,1
    5ac4:	18d70604 	addi	r3,r3,23576
    5ac8:	18800017 	ldw	r2,0(r3)
    5acc:	90bfd61e 	bne	r18,r2,5a28 <__svfscanf_r+0x4b8>
    5ad0:	003efc06 	br	56c4 <__svfscanf_r+0x154>
    5ad4:	d880a317 	ldw	r2,652(sp)
    5ad8:	1000021e 	bne	r2,zero,5ae4 <__svfscanf_r+0x574>
    5adc:	00ffffc4 	movi	r3,-1
    5ae0:	d8c0a315 	stw	r3,652(sp)
    5ae4:	9880040c 	andi	r2,r19,16
    5ae8:	10036526 	beq	r2,zero,6880 <__svfscanf_r+0x1310>
    5aec:	0027883a 	mov	r19,zero
    5af0:	dd400404 	addi	r21,sp,16
    5af4:	81000017 	ldw	r4,0(r16)
    5af8:	20800003 	ldbu	r2,0(r4)
    5afc:	a885883a 	add	r2,r21,r2
    5b00:	10c00007 	ldb	r3,0(r2)
    5b04:	1803be26 	beq	r3,zero,6a00 <__svfscanf_r+0x1490>
    5b08:	80c00117 	ldw	r3,4(r16)
    5b0c:	21800044 	addi	r6,r4,1
    5b10:	d900a317 	ldw	r4,652(sp)
    5b14:	18ffffc4 	addi	r3,r3,-1
    5b18:	9cc00044 	addi	r19,r19,1
    5b1c:	81800015 	stw	r6,0(r16)
    5b20:	80c00115 	stw	r3,4(r16)
    5b24:	24c3b626 	beq	r4,r19,6a00 <__svfscanf_r+0x1490>
    5b28:	00fff216 	blt	zero,r3,5af4 <__svfscanf_r+0x584>
    5b2c:	b009883a 	mov	r4,r22
    5b30:	800b883a 	mov	r5,r16
    5b34:	00032300 	call	3230 <__srefill_r>
    5b38:	103fee26 	beq	r2,zero,5af4 <__svfscanf_r+0x584>
    5b3c:	983ee126 	beq	r19,zero,56c4 <__svfscanf_r+0x154>
    5b40:	8ce3883a 	add	r17,r17,r19
    5b44:	003e9d06 	br	55bc <__svfscanf_r+0x4c>
    5b48:	d900a317 	ldw	r4,652(sp)
    5b4c:	2000021e 	bne	r4,zero,5b58 <__svfscanf_r+0x5e8>
    5b50:	00bfffc4 	movi	r2,-1
    5b54:	d880a315 	stw	r2,652(sp)
    5b58:	9880004c 	andi	r2,r19,1
    5b5c:	1005003a 	cmpeq	r2,r2,zero
    5b60:	1001f41e 	bne	r2,zero,6334 <__svfscanf_r+0xdc4>
    5b64:	9dc0040c 	andi	r23,r19,16
    5b68:	b807003a 	cmpeq	r3,r23,zero
    5b6c:	d8c0a515 	stw	r3,660(sp)
    5b70:	1803b21e 	bne	r3,zero,6a3c <__svfscanf_r+0x14cc>
    5b74:	dd400104 	addi	r21,sp,4
    5b78:	0027883a 	mov	r19,zero
    5b7c:	073fffc4 	movi	fp,-1
    5b80:	81400017 	ldw	r5,0(r16)
    5b84:	90800017 	ldw	r2,0(r18)
    5b88:	29c00003 	ldbu	r7,0(r5)
    5b8c:	38c03fcc 	andi	r3,r7,255
    5b90:	1887883a 	add	r3,r3,r2
    5b94:	19000003 	ldbu	r4,0(r3)
    5b98:	2100020c 	andi	r4,r4,8
    5b9c:	2000321e 	bne	r4,zero,5c68 <__svfscanf_r+0x6f8>
    5ba0:	d8c0a317 	ldw	r3,652(sp)
    5ba4:	18003026 	beq	r3,zero,5c68 <__svfscanf_r+0x6f8>
    5ba8:	00800074 	movhi	r2,1
    5bac:	10970604 	addi	r2,r2,23576
    5bb0:	10c00017 	ldw	r3,0(r2)
    5bb4:	98fec326 	beq	r19,r3,56c4 <__svfscanf_r+0x154>
    5bb8:	d8c04404 	addi	r3,sp,272
    5bbc:	80800117 	ldw	r2,4(r16)
    5bc0:	d8c0a615 	stw	r3,664(sp)
    5bc4:	d900a617 	ldw	r4,664(sp)
    5bc8:	10ffffc4 	addi	r3,r2,-1
    5bcc:	29800044 	addi	r6,r5,1
    5bd0:	80c00115 	stw	r3,4(r16)
    5bd4:	24c5883a 	add	r2,r4,r19
    5bd8:	81800015 	stw	r6,0(r16)
    5bdc:	d9000204 	addi	r4,sp,8
    5be0:	000b883a 	mov	r5,zero
    5be4:	01800204 	movi	r6,8
    5be8:	11c00005 	stb	r7,0(r2)
    5bec:	0002ff40 	call	2ff4 <memset>
    5bf0:	d980a617 	ldw	r6,664(sp)
    5bf4:	9cc00044 	addi	r19,r19,1
    5bf8:	d8800204 	addi	r2,sp,8
    5bfc:	b009883a 	mov	r4,r22
    5c00:	a80b883a 	mov	r5,r21
    5c04:	980f883a 	mov	r7,r19
    5c08:	d8800015 	stw	r2,0(sp)
    5c0c:	0008df40 	call	8df4 <_mbrtowc_r>
    5c10:	1007883a 	mov	r3,r2
    5c14:	173eab26 	beq	r2,fp,56c4 <__svfscanf_r+0x154>
    5c18:	1003851e 	bne	r2,zero,6a30 <__svfscanf_r+0x14c0>
    5c1c:	a8000015 	stw	zero,0(r21)
    5c20:	a9000017 	ldw	r4,0(r21)
    5c24:	0008c8c0 	call	8c8c <iswspace>
    5c28:	1003781e 	bne	r2,zero,6a0c <__svfscanf_r+0x149c>
    5c2c:	d900a317 	ldw	r4,652(sp)
    5c30:	d880a517 	ldw	r2,660(sp)
    5c34:	8ce3883a 	add	r17,r17,r19
    5c38:	213fffc4 	addi	r4,r4,-1
    5c3c:	d900a315 	stw	r4,652(sp)
    5c40:	10000126 	beq	r2,zero,5c48 <__svfscanf_r+0x6d8>
    5c44:	ad400104 	addi	r21,r21,4
    5c48:	0027883a 	mov	r19,zero
    5c4c:	80c00117 	ldw	r3,4(r16)
    5c50:	00ffcb16 	blt	zero,r3,5b80 <__svfscanf_r+0x610>
    5c54:	b009883a 	mov	r4,r22
    5c58:	800b883a 	mov	r5,r16
    5c5c:	00032300 	call	3230 <__srefill_r>
    5c60:	103fc726 	beq	r2,zero,5b80 <__svfscanf_r+0x610>
    5c64:	983e971e 	bne	r19,zero,56c4 <__svfscanf_r+0x154>
    5c68:	b83e541e 	bne	r23,zero,55bc <__svfscanf_r+0x4c>
    5c6c:	d900a217 	ldw	r4,648(sp)
    5c70:	a8000015 	stw	zero,0(r21)
    5c74:	21000044 	addi	r4,r4,1
    5c78:	d900a215 	stw	r4,648(sp)
    5c7c:	003e4f06 	br	55bc <__svfscanf_r+0x4c>
    5c80:	d900a317 	ldw	r4,652(sp)
    5c84:	00805704 	movi	r2,348
    5c88:	20ffffc4 	addi	r3,r4,-1
    5c8c:	10c1ed2e 	bgeu	r2,r3,6444 <__svfscanf_r+0xed4>
    5c90:	00805744 	movi	r2,349
    5c94:	21bfa8c4 	addi	r6,r4,-349
    5c98:	9d41e014 	ori	r21,r19,1920
    5c9c:	d880a315 	stw	r2,652(sp)
    5ca0:	d8c04404 	addi	r3,sp,272
    5ca4:	d8c0a615 	stw	r3,664(sp)
    5ca8:	182f883a 	mov	r23,r3
    5cac:	d8009f15 	stw	zero,636(sp)
    5cb0:	d8009e15 	stw	zero,632(sp)
    5cb4:	d8009d15 	stw	zero,628(sp)
    5cb8:	d8009c15 	stw	zero,624(sp)
    5cbc:	0039883a 	mov	fp,zero
    5cc0:	0025883a 	mov	r18,zero
    5cc4:	80800017 	ldw	r2,0(r16)
    5cc8:	11400003 	ldbu	r5,0(r2)
    5ccc:	00801384 	movi	r2,78
    5cd0:	28fff544 	addi	r3,r5,-43
    5cd4:	18c03fcc 	andi	r3,r3,255
    5cd8:	10c07d36 	bltu	r2,r3,5ed0 <__svfscanf_r+0x960>
    5cdc:	18c5883a 	add	r2,r3,r3
    5ce0:	1085883a 	add	r2,r2,r2
    5ce4:	00c00034 	movhi	r3,0
    5ce8:	18d73e04 	addi	r3,r3,23800
    5cec:	10c5883a 	add	r2,r2,r3
    5cf0:	11000017 	ldw	r4,0(r2)
    5cf4:	2000683a 	jmp	r4
    5cf8:	00005e88 	cmpgei	zero,zero,378
    5cfc:	00005ed0 	cmplti	zero,zero,379
    5d00:	00005e88 	cmpgei	zero,zero,378
    5d04:	0000601c 	xori	zero,zero,384
    5d08:	00005ed0 	cmplti	zero,zero,379
    5d0c:	00006054 	movui	zero,385
    5d10:	00006088 	cmpgei	zero,zero,386
    5d14:	00006088 	cmpgei	zero,zero,386
    5d18:	00006088 	cmpgei	zero,zero,386
    5d1c:	00006088 	cmpgei	zero,zero,386
    5d20:	00006088 	cmpgei	zero,zero,386
    5d24:	00006088 	cmpgei	zero,zero,386
    5d28:	00006088 	cmpgei	zero,zero,386
    5d2c:	00006088 	cmpgei	zero,zero,386
    5d30:	00006088 	cmpgei	zero,zero,386
    5d34:	00005ed0 	cmplti	zero,zero,379
    5d38:	00005ed0 	cmplti	zero,zero,379
    5d3c:	00005ed0 	cmplti	zero,zero,379
    5d40:	00005ed0 	cmplti	zero,zero,379
    5d44:	00005ed0 	cmplti	zero,zero,379
    5d48:	00005ed0 	cmplti	zero,zero,379
    5d4c:	00005ed0 	cmplti	zero,zero,379
    5d50:	000060a8 	cmpgeui	zero,zero,386
    5d54:	00005ed0 	cmplti	zero,zero,379
    5d58:	00005ed0 	cmplti	zero,zero,379
    5d5c:	00005ed0 	cmplti	zero,zero,379
    5d60:	000060b8 	rdprs	zero,zero,386
    5d64:	00006154 	movui	zero,389
    5d68:	00005ed0 	cmplti	zero,zero,379
    5d6c:	00005ed0 	cmplti	zero,zero,379
    5d70:	00006170 	cmpltui	zero,zero,389
    5d74:	00005ed0 	cmplti	zero,zero,379
    5d78:	00005ed0 	cmplti	zero,zero,379
    5d7c:	00005ed0 	cmplti	zero,zero,379
    5d80:	00005ed0 	cmplti	zero,zero,379
    5d84:	0000619c 	xori	zero,zero,390
    5d88:	00005ed0 	cmplti	zero,zero,379
    5d8c:	00005ed0 	cmplti	zero,zero,379
    5d90:	00005ed0 	cmplti	zero,zero,379
    5d94:	00005ed0 	cmplti	zero,zero,379
    5d98:	00005ed0 	cmplti	zero,zero,379
    5d9c:	000061f0 	cmpltui	zero,zero,391
    5da0:	00005ed0 	cmplti	zero,zero,379
    5da4:	00005ed0 	cmplti	zero,zero,379
    5da8:	00005ed0 	cmplti	zero,zero,379
    5dac:	00005ed0 	cmplti	zero,zero,379
    5db0:	00006300 	call	630 <read_444_format+0x440>
    5db4:	00005ed0 	cmplti	zero,zero,379
    5db8:	00005ed0 	cmplti	zero,zero,379
    5dbc:	00005ed0 	cmplti	zero,zero,379
    5dc0:	00005ed0 	cmplti	zero,zero,379
    5dc4:	00005ed0 	cmplti	zero,zero,379
    5dc8:	00005ed0 	cmplti	zero,zero,379
    5dcc:	00005ed0 	cmplti	zero,zero,379
    5dd0:	000060a8 	cmpgeui	zero,zero,386
    5dd4:	00005ed0 	cmplti	zero,zero,379
    5dd8:	00005ed0 	cmplti	zero,zero,379
    5ddc:	00005ed0 	cmplti	zero,zero,379
    5de0:	000060b8 	rdprs	zero,zero,386
    5de4:	00006154 	movui	zero,389
    5de8:	00005ed0 	cmplti	zero,zero,379
    5dec:	00005ed0 	cmplti	zero,zero,379
    5df0:	00006170 	cmpltui	zero,zero,389
    5df4:	00005ed0 	cmplti	zero,zero,379
    5df8:	00005ed0 	cmplti	zero,zero,379
    5dfc:	00005ed0 	cmplti	zero,zero,379
    5e00:	00005ed0 	cmplti	zero,zero,379
    5e04:	0000619c 	xori	zero,zero,390
    5e08:	00005ed0 	cmplti	zero,zero,379
    5e0c:	00005ed0 	cmplti	zero,zero,379
    5e10:	00005ed0 	cmplti	zero,zero,379
    5e14:	00005ed0 	cmplti	zero,zero,379
    5e18:	00005ed0 	cmplti	zero,zero,379
    5e1c:	000061f0 	cmpltui	zero,zero,391
    5e20:	00005ed0 	cmplti	zero,zero,379
    5e24:	00005ed0 	cmplti	zero,zero,379
    5e28:	00005ed0 	cmplti	zero,zero,379
    5e2c:	00005ed0 	cmplti	zero,zero,379
    5e30:	00006300 	call	630 <read_444_format+0x440>
    5e34:	d900a317 	ldw	r4,652(sp)
    5e38:	00805704 	movi	r2,348
    5e3c:	20ffffc4 	addi	r3,r4,-1
    5e40:	10c18c2e 	bgeu	r2,r3,6474 <__svfscanf_r+0xf04>
    5e44:	00805744 	movi	r2,349
    5e48:	257fa8c4 	addi	r21,r4,-349
    5e4c:	9c836014 	ori	r18,r19,3456
    5e50:	d880a315 	stw	r2,652(sp)
    5e54:	0001a106 	br	64dc <__svfscanf_r+0xf6c>
    5e58:	b009883a 	mov	r4,r22
    5e5c:	800b883a 	mov	r5,r16
    5e60:	00032300 	call	3230 <__srefill_r>
    5e64:	103eb226 	beq	r2,zero,5930 <__svfscanf_r+0x3c0>
    5e68:	003e1606 	br	56c4 <__svfscanf_r+0x154>
    5e6c:	01000284 	movi	r4,10
    5e70:	00800074 	movhi	r2,1
    5e74:	10b17304 	addi	r2,r2,-14900
    5e78:	054000c4 	movi	r21,3
    5e7c:	d900a115 	stw	r4,644(sp)
    5e80:	d880a015 	stw	r2,640(sp)
    5e84:	003ea806 	br	5928 <__svfscanf_r+0x3b8>
    5e88:	a880200c 	andi	r2,r21,128
    5e8c:	10001026 	beq	r2,zero,5ed0 <__svfscanf_r+0x960>
    5e90:	00bfdfc4 	movi	r2,-129
    5e94:	a8aa703a 	and	r21,r21,r2
    5e98:	b9400005 	stb	r5,0(r23)
    5e9c:	bdc00044 	addi	r23,r23,1
    5ea0:	80c00117 	ldw	r3,4(r16)
    5ea4:	8c400044 	addi	r17,r17,1
    5ea8:	18bfffc4 	addi	r2,r3,-1
    5eac:	80800115 	stw	r2,4(r16)
    5eb0:	0080610e 	bge	zero,r2,6038 <__svfscanf_r+0xac8>
    5eb4:	80800017 	ldw	r2,0(r16)
    5eb8:	10800044 	addi	r2,r2,1
    5ebc:	80800015 	stw	r2,0(r16)
    5ec0:	d880a317 	ldw	r2,652(sp)
    5ec4:	10bfffc4 	addi	r2,r2,-1
    5ec8:	d880a315 	stw	r2,652(sp)
    5ecc:	103f7d1e 	bne	r2,zero,5cc4 <__svfscanf_r+0x754>
    5ed0:	d8c09e17 	ldw	r3,632(sp)
    5ed4:	18000226 	beq	r3,zero,5ee0 <__svfscanf_r+0x970>
    5ed8:	00bfbfc4 	movi	r2,-257
    5edc:	a8aa703a 	and	r21,r21,r2
    5ee0:	90ffffc4 	addi	r3,r18,-1
    5ee4:	00800044 	movi	r2,1
    5ee8:	10c0cd2e 	bgeu	r2,r3,6220 <__svfscanf_r+0xcb0>
    5eec:	e1003fcc 	andi	r4,fp,255
    5ef0:	2100201c 	xori	r4,r4,128
    5ef4:	213fe004 	addi	r4,r4,-128
    5ef8:	20ffffc4 	addi	r3,r4,-1
    5efc:	00800184 	movi	r2,6
    5f00:	10c01736 	bltu	r2,r3,5f60 <__svfscanf_r+0x9f0>
    5f04:	00c00084 	movi	r3,2
    5f08:	1900880e 	bge	r3,r4,612c <__svfscanf_r+0xbbc>
    5f0c:	008000c4 	movi	r2,3
    5f10:	1100130e 	bge	r2,r4,5f60 <__svfscanf_r+0x9f0>
    5f14:	e4ffffc4 	addi	r19,fp,-1
    5f18:	b825883a 	mov	r18,r23
    5f1c:	94bfffc4 	addi	r18,r18,-1
    5f20:	91400007 	ldb	r5,0(r18)
    5f24:	b009883a 	mov	r4,r22
    5f28:	800d883a 	mov	r6,r16
    5f2c:	000cbec0 	call	cbec <_ungetc_r>
    5f30:	9cffffc4 	addi	r19,r19,-1
    5f34:	98c03fcc 	andi	r3,r19,255
    5f38:	18c0201c 	xori	r3,r3,128
    5f3c:	18ffe004 	addi	r3,r3,-128
    5f40:	00800084 	movi	r2,2
    5f44:	18bff51e 	bne	r3,r2,5f1c <__svfscanf_r+0x9ac>
    5f48:	e0bfff04 	addi	r2,fp,-4
    5f4c:	10803fcc 	andi	r2,r2,255
    5f50:	b887c83a 	sub	r3,r23,r2
    5f54:	8885c83a 	sub	r2,r17,r2
    5f58:	147fffc4 	addi	r17,r2,-1
    5f5c:	1dffffc4 	addi	r23,r3,-1
    5f60:	a880400c 	andi	r2,r21,256
    5f64:	10001226 	beq	r2,zero,5fb0 <__svfscanf_r+0xa40>
    5f68:	a881000c 	andi	r2,r21,1024
    5f6c:	1000651e 	bne	r2,zero,6104 <__svfscanf_r+0xb94>
    5f70:	bdffffc4 	addi	r23,r23,-1
    5f74:	b9400007 	ldb	r5,0(r23)
    5f78:	00801944 	movi	r2,101
    5f7c:	8c7fffc4 	addi	r17,r17,-1
    5f80:	28800826 	beq	r5,r2,5fa4 <__svfscanf_r+0xa34>
    5f84:	00801144 	movi	r2,69
    5f88:	28800626 	beq	r5,r2,5fa4 <__svfscanf_r+0xa34>
    5f8c:	bdffffc4 	addi	r23,r23,-1
    5f90:	b009883a 	mov	r4,r22
    5f94:	800d883a 	mov	r6,r16
    5f98:	000cbec0 	call	cbec <_ungetc_r>
    5f9c:	b9400007 	ldb	r5,0(r23)
    5fa0:	8c7fffc4 	addi	r17,r17,-1
    5fa4:	b009883a 	mov	r4,r22
    5fa8:	800d883a 	mov	r6,r16
    5fac:	000cbec0 	call	cbec <_ungetc_r>
    5fb0:	a880040c 	andi	r2,r21,16
    5fb4:	103d811e 	bne	r2,zero,55bc <__svfscanf_r+0x4c>
    5fb8:	a8c1800c 	andi	r3,r21,1536
    5fbc:	00810004 	movi	r2,1024
    5fc0:	b8000005 	stb	zero,0(r23)
    5fc4:	1880bb26 	beq	r3,r2,62b4 <__svfscanf_r+0xd44>
    5fc8:	d8809d17 	ldw	r2,628(sp)
    5fcc:	1000a61e 	bne	r2,zero,6268 <__svfscanf_r+0xcf8>
    5fd0:	d940a617 	ldw	r5,664(sp)
    5fd4:	b009883a 	mov	r4,r22
    5fd8:	000d883a 	mov	r6,zero
    5fdc:	000aa280 	call	aa28 <_strtod_r>
    5fe0:	a900004c 	andi	r4,r21,1
    5fe4:	2009003a 	cmpeq	r4,r4,zero
    5fe8:	1025883a 	mov	r18,r2
    5fec:	1827883a 	mov	r19,r3
    5ff0:	2000951e 	bne	r4,zero,6248 <__svfscanf_r+0xcd8>
    5ff4:	d8c0a417 	ldw	r3,656(sp)
    5ff8:	18800017 	ldw	r2,0(r3)
    5ffc:	1d400104 	addi	r21,r3,4
    6000:	14c00115 	stw	r19,4(r2)
    6004:	14800015 	stw	r18,0(r2)
    6008:	d8c0a217 	ldw	r3,648(sp)
    600c:	dd40a415 	stw	r21,656(sp)
    6010:	18c00044 	addi	r3,r3,1
    6014:	d8c0a215 	stw	r3,648(sp)
    6018:	003d6806 	br	55bc <__svfscanf_r+0x4c>
    601c:	a880800c 	andi	r2,r21,512
    6020:	103fab26 	beq	r2,zero,5ed0 <__svfscanf_r+0x960>
    6024:	d9009e17 	ldw	r4,632(sp)
    6028:	00bf5fc4 	movi	r2,-641
    602c:	a8aa703a 	and	r21,r21,r2
    6030:	d9009f15 	stw	r4,636(sp)
    6034:	003f9806 	br	5e98 <__svfscanf_r+0x928>
    6038:	b009883a 	mov	r4,r22
    603c:	800b883a 	mov	r5,r16
    6040:	d980a715 	stw	r6,668(sp)
    6044:	00032300 	call	3230 <__srefill_r>
    6048:	d980a717 	ldw	r6,668(sp)
    604c:	103f9c26 	beq	r2,zero,5ec0 <__svfscanf_r+0x950>
    6050:	003f9f06 	br	5ed0 <__svfscanf_r+0x960>
    6054:	a880400c 	andi	r2,r21,256
    6058:	10000b26 	beq	r2,zero,6088 <__svfscanf_r+0xb18>
    605c:	00bfdfc4 	movi	r2,-129
    6060:	a8aa703a 	and	r21,r21,r2
    6064:	d8809e17 	ldw	r2,632(sp)
    6068:	10800044 	addi	r2,r2,1
    606c:	d8809e15 	stw	r2,632(sp)
    6070:	303f8b26 	beq	r6,zero,5ea0 <__svfscanf_r+0x930>
    6074:	d8c0a317 	ldw	r3,652(sp)
    6078:	31bfffc4 	addi	r6,r6,-1
    607c:	18c00044 	addi	r3,r3,1
    6080:	d8c0a315 	stw	r3,652(sp)
    6084:	003f8606 	br	5ea0 <__svfscanf_r+0x930>
    6088:	e0803fcc 	andi	r2,fp,255
    608c:	1080201c 	xori	r2,r2,128
    6090:	10bfe004 	addi	r2,r2,-128
    6094:	9085883a 	add	r2,r18,r2
    6098:	103f8d1e 	bne	r2,zero,5ed0 <__svfscanf_r+0x960>
    609c:	00bf9fc4 	movi	r2,-385
    60a0:	a8aa703a 	and	r21,r21,r2
    60a4:	003f7c06 	br	5e98 <__svfscanf_r+0x928>
    60a8:	00800044 	movi	r2,1
    60ac:	90bf881e 	bne	r18,r2,5ed0 <__svfscanf_r+0x960>
    60b0:	04800084 	movi	r18,2
    60b4:	003f7806 	br	5e98 <__svfscanf_r+0x928>
    60b8:	a8c1400c 	andi	r3,r21,1280
    60bc:	00810004 	movi	r2,1024
    60c0:	18800426 	beq	r3,r2,60d4 <__svfscanf_r+0xb64>
    60c4:	a884703a 	and	r2,r21,r2
    60c8:	103f8126 	beq	r2,zero,5ed0 <__svfscanf_r+0x960>
    60cc:	d8809e17 	ldw	r2,632(sp)
    60d0:	103f8326 	beq	r2,zero,5ee0 <__svfscanf_r+0x970>
    60d4:	a880800c 	andi	r2,r21,512
    60d8:	1000051e 	bne	r2,zero,60f0 <__svfscanf_r+0xb80>
    60dc:	d8c09e17 	ldw	r3,632(sp)
    60e0:	d9009f17 	ldw	r4,636(sp)
    60e4:	ddc09c15 	stw	r23,624(sp)
    60e8:	1907c83a 	sub	r3,r3,r4
    60ec:	d8c09d15 	stw	r3,628(sp)
    60f0:	00be7fc4 	movi	r2,-1537
    60f4:	a884703a 	and	r2,r21,r2
    60f8:	15406014 	ori	r21,r2,384
    60fc:	d8009e15 	stw	zero,632(sp)
    6100:	003f6506 	br	5e98 <__svfscanf_r+0x928>
    6104:	d900a617 	ldw	r4,664(sp)
    6108:	25fd4e2e 	bgeu	r4,r23,5644 <__svfscanf_r+0xd4>
    610c:	bdffffc4 	addi	r23,r23,-1
    6110:	b9400007 	ldb	r5,0(r23)
    6114:	b009883a 	mov	r4,r22
    6118:	800d883a 	mov	r6,r16
    611c:	000cbec0 	call	cbec <_ungetc_r>
    6120:	d880a617 	ldw	r2,664(sp)
    6124:	15fff936 	bltu	r2,r23,610c <__svfscanf_r+0xb9c>
    6128:	003d4606 	br	5644 <__svfscanf_r+0xd4>
    612c:	d900a617 	ldw	r4,664(sp)
    6130:	25fd442e 	bgeu	r4,r23,5644 <__svfscanf_r+0xd4>
    6134:	bdffffc4 	addi	r23,r23,-1
    6138:	b9400007 	ldb	r5,0(r23)
    613c:	b009883a 	mov	r4,r22
    6140:	800d883a 	mov	r6,r16
    6144:	000cbec0 	call	cbec <_ungetc_r>
    6148:	d8c0a617 	ldw	r3,664(sp)
    614c:	1dfff936 	bltu	r3,r23,6134 <__svfscanf_r+0xbc4>
    6150:	003d3c06 	br	5644 <__svfscanf_r+0xd4>
    6154:	e0c03fcc 	andi	r3,fp,255
    6158:	18c0201c 	xori	r3,r3,128
    615c:	18ffe004 	addi	r3,r3,-128
    6160:	00800084 	movi	r2,2
    6164:	18bf5a1e 	bne	r3,r2,5ed0 <__svfscanf_r+0x960>
    6168:	070000c4 	movi	fp,3
    616c:	003f4a06 	br	5e98 <__svfscanf_r+0x928>
    6170:	e0c03fcc 	andi	r3,fp,255
    6174:	18c0201c 	xori	r3,r3,128
    6178:	18ffe004 	addi	r3,r3,-128
    617c:	1800231e 	bne	r3,zero,620c <__svfscanf_r+0xc9c>
    6180:	a8c1c00c 	andi	r3,r21,1792
    6184:	0081c004 	movi	r2,1792
    6188:	18bf511e 	bne	r3,r2,5ed0 <__svfscanf_r+0x960>
    618c:	00be1fc4 	movi	r2,-1921
    6190:	a8aa703a 	and	r21,r21,r2
    6194:	07000044 	movi	fp,1
    6198:	003f3f06 	br	5e98 <__svfscanf_r+0x928>
    619c:	9000101e 	bne	r18,zero,61e0 <__svfscanf_r+0xc70>
    61a0:	a8c1c00c 	andi	r3,r21,1792
    61a4:	0081c004 	movi	r2,1792
    61a8:	18800926 	beq	r3,r2,61d0 <__svfscanf_r+0xc60>
    61ac:	e0c03fcc 	andi	r3,fp,255
    61b0:	18c0201c 	xori	r3,r3,128
    61b4:	18ffe004 	addi	r3,r3,-128
    61b8:	00800044 	movi	r2,1
    61bc:	18800226 	beq	r3,r2,61c8 <__svfscanf_r+0xc58>
    61c0:	00800104 	movi	r2,4
    61c4:	18bf421e 	bne	r3,r2,5ed0 <__svfscanf_r+0x960>
    61c8:	e7000044 	addi	fp,fp,1
    61cc:	003f3206 	br	5e98 <__svfscanf_r+0x928>
    61d0:	00be1fc4 	movi	r2,-1921
    61d4:	a8aa703a 	and	r21,r21,r2
    61d8:	04800044 	movi	r18,1
    61dc:	003f2e06 	br	5e98 <__svfscanf_r+0x928>
    61e0:	00800084 	movi	r2,2
    61e4:	90bff11e 	bne	r18,r2,61ac <__svfscanf_r+0xc3c>
    61e8:	048000c4 	movi	r18,3
    61ec:	003f2a06 	br	5e98 <__svfscanf_r+0x928>
    61f0:	e0c03fcc 	andi	r3,fp,255
    61f4:	18c0201c 	xori	r3,r3,128
    61f8:	18ffe004 	addi	r3,r3,-128
    61fc:	00800184 	movi	r2,6
    6200:	18bf331e 	bne	r3,r2,5ed0 <__svfscanf_r+0x960>
    6204:	070001c4 	movi	fp,7
    6208:	003f2306 	br	5e98 <__svfscanf_r+0x928>
    620c:	008000c4 	movi	r2,3
    6210:	18bfed26 	beq	r3,r2,61c8 <__svfscanf_r+0xc58>
    6214:	00800144 	movi	r2,5
    6218:	18bfeb26 	beq	r3,r2,61c8 <__svfscanf_r+0xc58>
    621c:	003f2c06 	br	5ed0 <__svfscanf_r+0x960>
    6220:	d900a617 	ldw	r4,664(sp)
    6224:	25fd072e 	bgeu	r4,r23,5644 <__svfscanf_r+0xd4>
    6228:	bdffffc4 	addi	r23,r23,-1
    622c:	b9400007 	ldb	r5,0(r23)
    6230:	b009883a 	mov	r4,r22
    6234:	800d883a 	mov	r6,r16
    6238:	000cbec0 	call	cbec <_ungetc_r>
    623c:	d880a617 	ldw	r2,664(sp)
    6240:	15fff936 	bltu	r2,r23,6228 <__svfscanf_r+0xcb8>
    6244:	003cff06 	br	5644 <__svfscanf_r+0xd4>
    6248:	a880008c 	andi	r2,r21,2
    624c:	10002026 	beq	r2,zero,62d0 <__svfscanf_r+0xd60>
    6250:	d900a417 	ldw	r4,656(sp)
    6254:	20800017 	ldw	r2,0(r4)
    6258:	25400104 	addi	r21,r4,4
    625c:	10c00115 	stw	r3,4(r2)
    6260:	14800015 	stw	r18,0(r2)
    6264:	003f6806 	br	6008 <__svfscanf_r+0xa98>
    6268:	d8c09c17 	ldw	r3,624(sp)
    626c:	b009883a 	mov	r4,r22
    6270:	000d883a 	mov	r6,zero
    6274:	19400044 	addi	r5,r3,1
    6278:	01c00284 	movi	r7,10
    627c:	000c04c0 	call	c04c <_strtol_r>
    6280:	d9009d17 	ldw	r4,628(sp)
    6284:	110dc83a 	sub	r6,r2,r4
    6288:	d8c0a617 	ldw	r3,664(sp)
    628c:	d9009c17 	ldw	r4,624(sp)
    6290:	188054c4 	addi	r2,r3,339
    6294:	20800236 	bltu	r4,r2,62a0 <__svfscanf_r+0xd30>
    6298:	18805484 	addi	r2,r3,338
    629c:	d8809c15 	stw	r2,624(sp)
    62a0:	d9009c17 	ldw	r4,624(sp)
    62a4:	01400074 	movhi	r5,1
    62a8:	294ef404 	addi	r5,r5,15312
    62ac:	000a8500 	call	a850 <sprintf>
    62b0:	003f4706 	br	5fd0 <__svfscanf_r+0xa60>
    62b4:	d8c09e17 	ldw	r3,632(sp)
    62b8:	d9009f17 	ldw	r4,636(sp)
    62bc:	1905c83a 	sub	r2,r3,r4
    62c0:	103f4326 	beq	r2,zero,5fd0 <__svfscanf_r+0xa60>
    62c4:	008dc83a 	sub	r6,zero,r2
    62c8:	ddc09c15 	stw	r23,624(sp)
    62cc:	003fee06 	br	6288 <__svfscanf_r+0xd18>
    62d0:	d880a417 	ldw	r2,656(sp)
    62d4:	9009883a 	mov	r4,r18
    62d8:	180b883a 	mov	r5,r3
    62dc:	15c00017 	ldw	r23,0(r2)
    62e0:	15400104 	addi	r21,r2,4
    62e4:	000a7580 	call	a758 <__isnand>
    62e8:	10021c1e 	bne	r2,zero,6b5c <__svfscanf_r+0x15ec>
    62ec:	980b883a 	mov	r5,r19
    62f0:	9009883a 	mov	r4,r18
    62f4:	000f8300 	call	f830 <__truncdfsf2>
    62f8:	b8800015 	stw	r2,0(r23)
    62fc:	003f4206 	br	6008 <__svfscanf_r+0xa98>
    6300:	e0c03fcc 	andi	r3,fp,255
    6304:	18c0201c 	xori	r3,r3,128
    6308:	18ffe004 	addi	r3,r3,-128
    630c:	008001c4 	movi	r2,7
    6310:	18beef1e 	bne	r3,r2,5ed0 <__svfscanf_r+0x960>
    6314:	07000204 	movi	fp,8
    6318:	003edf06 	br	5e98 <__svfscanf_r+0x928>
    631c:	d900a317 	ldw	r4,652(sp)
    6320:	208002a4 	muli	r2,r4,10
    6324:	1145883a 	add	r2,r2,r5
    6328:	10bff404 	addi	r2,r2,-48
    632c:	d880a315 	stw	r2,652(sp)
    6330:	003ceb06 	br	56e0 <__svfscanf_r+0x170>
    6334:	9880040c 	andi	r2,r19,16
    6338:	10001426 	beq	r2,zero,638c <__svfscanf_r+0xe1c>
    633c:	0027883a 	mov	r19,zero
    6340:	00000906 	br	6368 <__svfscanf_r+0xdf8>
    6344:	80c00117 	ldw	r3,4(r16)
    6348:	d880a317 	ldw	r2,652(sp)
    634c:	29800044 	addi	r6,r5,1
    6350:	18ffffc4 	addi	r3,r3,-1
    6354:	9cc00044 	addi	r19,r19,1
    6358:	81800015 	stw	r6,0(r16)
    635c:	80c00115 	stw	r3,4(r16)
    6360:	14fdf726 	beq	r2,r19,5b40 <__svfscanf_r+0x5d0>
    6364:	00c02c0e 	bge	zero,r3,6418 <__svfscanf_r+0xea8>
    6368:	81400017 	ldw	r5,0(r16)
    636c:	90800017 	ldw	r2,0(r18)
    6370:	28c00003 	ldbu	r3,0(r5)
    6374:	1887883a 	add	r3,r3,r2
    6378:	19000003 	ldbu	r4,0(r3)
    637c:	2100020c 	andi	r4,r4,8
    6380:	203ff026 	beq	r4,zero,6344 <__svfscanf_r+0xdd4>
    6384:	8ce3883a 	add	r17,r17,r19
    6388:	003c8c06 	br	55bc <__svfscanf_r+0x4c>
    638c:	d8c0a417 	ldw	r3,656(sp)
    6390:	1d400017 	ldw	r21,0(r3)
    6394:	a827883a 	mov	r19,r21
    6398:	00000e06 	br	63d4 <__svfscanf_r+0xe64>
    639c:	80800117 	ldw	r2,4(r16)
    63a0:	d900a317 	ldw	r4,652(sp)
    63a4:	29800044 	addi	r6,r5,1
    63a8:	10ffffc4 	addi	r3,r2,-1
    63ac:	213fffc4 	addi	r4,r4,-1
    63b0:	d900a315 	stw	r4,652(sp)
    63b4:	80c00115 	stw	r3,4(r16)
    63b8:	28800003 	ldbu	r2,0(r5)
    63bc:	98800005 	stb	r2,0(r19)
    63c0:	81800015 	stw	r6,0(r16)
    63c4:	9cc00044 	addi	r19,r19,1
    63c8:	20000926 	beq	r4,zero,63f0 <__svfscanf_r+0xe80>
    63cc:	80800117 	ldw	r2,4(r16)
    63d0:	0080170e 	bge	zero,r2,6430 <__svfscanf_r+0xec0>
    63d4:	81400017 	ldw	r5,0(r16)
    63d8:	90800017 	ldw	r2,0(r18)
    63dc:	28c00003 	ldbu	r3,0(r5)
    63e0:	1887883a 	add	r3,r3,r2
    63e4:	19000003 	ldbu	r4,0(r3)
    63e8:	2100020c 	andi	r4,r4,8
    63ec:	203feb26 	beq	r4,zero,639c <__svfscanf_r+0xe2c>
    63f0:	9d45c83a 	sub	r2,r19,r21
    63f4:	d8c0a217 	ldw	r3,648(sp)
    63f8:	88a3883a 	add	r17,r17,r2
    63fc:	d880a417 	ldw	r2,656(sp)
    6400:	18c00044 	addi	r3,r3,1
    6404:	d8c0a215 	stw	r3,648(sp)
    6408:	10800104 	addi	r2,r2,4
    640c:	d880a415 	stw	r2,656(sp)
    6410:	98000005 	stb	zero,0(r19)
    6414:	003c6906 	br	55bc <__svfscanf_r+0x4c>
    6418:	b009883a 	mov	r4,r22
    641c:	800b883a 	mov	r5,r16
    6420:	00032300 	call	3230 <__srefill_r>
    6424:	103fd026 	beq	r2,zero,6368 <__svfscanf_r+0xdf8>
    6428:	8ce3883a 	add	r17,r17,r19
    642c:	003c6306 	br	55bc <__svfscanf_r+0x4c>
    6430:	b009883a 	mov	r4,r22
    6434:	800b883a 	mov	r5,r16
    6438:	00032300 	call	3230 <__srefill_r>
    643c:	103fe526 	beq	r2,zero,63d4 <__svfscanf_r+0xe64>
    6440:	003feb06 	br	63f0 <__svfscanf_r+0xe80>
    6444:	d900a317 	ldw	r4,652(sp)
    6448:	9d41e014 	ori	r21,r19,1920
    644c:	2000821e 	bne	r4,zero,6658 <__svfscanf_r+0x10e8>
    6450:	d8c04404 	addi	r3,sp,272
    6454:	182f883a 	mov	r23,r3
    6458:	0039883a 	mov	fp,zero
    645c:	d8c0a615 	stw	r3,664(sp)
    6460:	d8009c15 	stw	zero,624(sp)
    6464:	d8009d15 	stw	zero,628(sp)
    6468:	d8009f15 	stw	zero,636(sp)
    646c:	d8009e15 	stw	zero,632(sp)
    6470:	003e9e06 	br	5eec <__svfscanf_r+0x97c>
    6474:	d900a317 	ldw	r4,652(sp)
    6478:	9c836014 	ori	r18,r19,3456
    647c:	2000161e 	bne	r4,zero,64d8 <__svfscanf_r+0xf68>
    6480:	d8804404 	addi	r2,sp,272
    6484:	d880a615 	stw	r2,664(sp)
    6488:	002f883a 	mov	r23,zero
    648c:	1027883a 	mov	r19,r2
    6490:	9080400c 	andi	r2,r18,256
    6494:	10000926 	beq	r2,zero,64bc <__svfscanf_r+0xf4c>
    6498:	d8c0a617 	ldw	r3,664(sp)
    649c:	1cc0052e 	bgeu	r3,r19,64b4 <__svfscanf_r+0xf44>
    64a0:	9cffffc4 	addi	r19,r19,-1
    64a4:	99400007 	ldb	r5,0(r19)
    64a8:	b009883a 	mov	r4,r22
    64ac:	800d883a 	mov	r6,r16
    64b0:	000cbec0 	call	cbec <_ungetc_r>
    64b4:	d900a617 	ldw	r4,664(sp)
    64b8:	24fc6226 	beq	r4,r19,5644 <__svfscanf_r+0xd4>
    64bc:	9080040c 	andi	r2,r18,16
    64c0:	10006726 	beq	r2,zero,6660 <__svfscanf_r+0x10f0>
    64c4:	d8c0a617 	ldw	r3,664(sp)
    64c8:	98c5c83a 	sub	r2,r19,r3
    64cc:	b885883a 	add	r2,r23,r2
    64d0:	88a3883a 	add	r17,r17,r2
    64d4:	003c3906 	br	55bc <__svfscanf_r+0x4c>
    64d8:	002b883a 	mov	r21,zero
    64dc:	d8c04404 	addi	r3,sp,272
    64e0:	d8c0a615 	stw	r3,664(sp)
    64e4:	002f883a 	mov	r23,zero
    64e8:	1827883a 	mov	r19,r3
    64ec:	81800017 	ldw	r6,0(r16)
    64f0:	00c01344 	movi	r3,77
    64f4:	31400003 	ldbu	r5,0(r6)
    64f8:	28bff544 	addi	r2,r5,-43
    64fc:	10803fcc 	andi	r2,r2,255
    6500:	18bfe336 	bltu	r3,r2,6490 <__svfscanf_r+0xf20>
    6504:	1085883a 	add	r2,r2,r2
    6508:	1085883a 	add	r2,r2,r2
    650c:	00c00034 	movhi	r3,0
    6510:	18d94804 	addi	r3,r3,25888
    6514:	10c5883a 	add	r2,r2,r3
    6518:	11000017 	ldw	r4,0(r2)
    651c:	2000683a 	jmp	r4
    6520:	000066b4 	movhi	zero,410
    6524:	00006490 	cmplti	zero,zero,402
    6528:	000066b4 	movhi	zero,410
    652c:	00006490 	cmplti	zero,zero,402
    6530:	00006490 	cmplti	zero,zero,402
    6534:	000066f8 	rdprs	zero,zero,411
    6538:	000067f4 	movhi	zero,415
    653c:	000067f4 	movhi	zero,415
    6540:	000067f4 	movhi	zero,415
    6544:	000067f4 	movhi	zero,415
    6548:	000067f4 	movhi	zero,415
    654c:	000067f4 	movhi	zero,415
    6550:	000067f4 	movhi	zero,415
    6554:	0000681c 	xori	zero,zero,416
    6558:	0000681c 	xori	zero,zero,416
    655c:	00006490 	cmplti	zero,zero,402
    6560:	00006490 	cmplti	zero,zero,402
    6564:	00006490 	cmplti	zero,zero,402
    6568:	00006490 	cmplti	zero,zero,402
    656c:	00006490 	cmplti	zero,zero,402
    6570:	00006490 	cmplti	zero,zero,402
    6574:	00006490 	cmplti	zero,zero,402
    6578:	0000684c 	andi	zero,zero,417
    657c:	0000684c 	andi	zero,zero,417
    6580:	0000684c 	andi	zero,zero,417
    6584:	0000684c 	andi	zero,zero,417
    6588:	0000684c 	andi	zero,zero,417
    658c:	0000684c 	andi	zero,zero,417
    6590:	00006490 	cmplti	zero,zero,402
    6594:	00006490 	cmplti	zero,zero,402
    6598:	00006490 	cmplti	zero,zero,402
    659c:	00006490 	cmplti	zero,zero,402
    65a0:	00006490 	cmplti	zero,zero,402
    65a4:	00006490 	cmplti	zero,zero,402
    65a8:	00006490 	cmplti	zero,zero,402
    65ac:	00006490 	cmplti	zero,zero,402
    65b0:	00006490 	cmplti	zero,zero,402
    65b4:	00006490 	cmplti	zero,zero,402
    65b8:	00006490 	cmplti	zero,zero,402
    65bc:	00006490 	cmplti	zero,zero,402
    65c0:	00006490 	cmplti	zero,zero,402
    65c4:	00006490 	cmplti	zero,zero,402
    65c8:	00006490 	cmplti	zero,zero,402
    65cc:	00006490 	cmplti	zero,zero,402
    65d0:	00006490 	cmplti	zero,zero,402
    65d4:	0000685c 	xori	zero,zero,417
    65d8:	00006490 	cmplti	zero,zero,402
    65dc:	00006490 	cmplti	zero,zero,402
    65e0:	00006490 	cmplti	zero,zero,402
    65e4:	00006490 	cmplti	zero,zero,402
    65e8:	00006490 	cmplti	zero,zero,402
    65ec:	00006490 	cmplti	zero,zero,402
    65f0:	00006490 	cmplti	zero,zero,402
    65f4:	00006490 	cmplti	zero,zero,402
    65f8:	0000684c 	andi	zero,zero,417
    65fc:	0000684c 	andi	zero,zero,417
    6600:	0000684c 	andi	zero,zero,417
    6604:	0000684c 	andi	zero,zero,417
    6608:	0000684c 	andi	zero,zero,417
    660c:	0000684c 	andi	zero,zero,417
    6610:	00006490 	cmplti	zero,zero,402
    6614:	00006490 	cmplti	zero,zero,402
    6618:	00006490 	cmplti	zero,zero,402
    661c:	00006490 	cmplti	zero,zero,402
    6620:	00006490 	cmplti	zero,zero,402
    6624:	00006490 	cmplti	zero,zero,402
    6628:	00006490 	cmplti	zero,zero,402
    662c:	00006490 	cmplti	zero,zero,402
    6630:	00006490 	cmplti	zero,zero,402
    6634:	00006490 	cmplti	zero,zero,402
    6638:	00006490 	cmplti	zero,zero,402
    663c:	00006490 	cmplti	zero,zero,402
    6640:	00006490 	cmplti	zero,zero,402
    6644:	00006490 	cmplti	zero,zero,402
    6648:	00006490 	cmplti	zero,zero,402
    664c:	00006490 	cmplti	zero,zero,402
    6650:	00006490 	cmplti	zero,zero,402
    6654:	0000685c 	xori	zero,zero,417
    6658:	000d883a 	mov	r6,zero
    665c:	003d9006 	br	5ca0 <__svfscanf_r+0x730>
    6660:	98000005 	stb	zero,0(r19)
    6664:	d8c0a017 	ldw	r3,640(sp)
    6668:	d940a617 	ldw	r5,664(sp)
    666c:	d9c0a117 	ldw	r7,644(sp)
    6670:	b009883a 	mov	r4,r22
    6674:	000d883a 	mov	r6,zero
    6678:	183ee83a 	callr	r3
    667c:	1007883a 	mov	r3,r2
    6680:	9080080c 	andi	r2,r18,32
    6684:	10004d1e 	bne	r2,zero,67bc <__svfscanf_r+0x124c>
    6688:	9080010c 	andi	r2,r18,4
    668c:	10003426 	beq	r2,zero,6760 <__svfscanf_r+0x11f0>
    6690:	d900a417 	ldw	r4,656(sp)
    6694:	20800017 	ldw	r2,0(r4)
    6698:	21000104 	addi	r4,r4,4
    669c:	d900a415 	stw	r4,656(sp)
    66a0:	10c0000d 	sth	r3,0(r2)
    66a4:	d880a217 	ldw	r2,648(sp)
    66a8:	10800044 	addi	r2,r2,1
    66ac:	d880a215 	stw	r2,648(sp)
    66b0:	003f8406 	br	64c4 <__svfscanf_r+0xf54>
    66b4:	9080200c 	andi	r2,r18,128
    66b8:	103f7526 	beq	r2,zero,6490 <__svfscanf_r+0xf20>
    66bc:	00bfdfc4 	movi	r2,-129
    66c0:	90a4703a 	and	r18,r18,r2
    66c4:	99400005 	stb	r5,0(r19)
    66c8:	9cc00044 	addi	r19,r19,1
    66cc:	80c00117 	ldw	r3,4(r16)
    66d0:	18ffffc4 	addi	r3,r3,-1
    66d4:	80c00115 	stw	r3,4(r16)
    66d8:	00c0130e 	bge	zero,r3,6728 <__svfscanf_r+0x11b8>
    66dc:	31800044 	addi	r6,r6,1
    66e0:	81800015 	stw	r6,0(r16)
    66e4:	d880a317 	ldw	r2,652(sp)
    66e8:	10bfffc4 	addi	r2,r2,-1
    66ec:	d880a315 	stw	r2,652(sp)
    66f0:	103f7e1e 	bne	r2,zero,64ec <__svfscanf_r+0xf7c>
    66f4:	003f6606 	br	6490 <__svfscanf_r+0xf20>
    66f8:	9082000c 	andi	r2,r18,2048
    66fc:	103ff126 	beq	r2,zero,66c4 <__svfscanf_r+0x1154>
    6700:	d8c0a117 	ldw	r3,644(sp)
    6704:	1800031e 	bne	r3,zero,6714 <__svfscanf_r+0x11a4>
    6708:	01000204 	movi	r4,8
    670c:	94808014 	ori	r18,r18,512
    6710:	d900a115 	stw	r4,644(sp)
    6714:	9081000c 	andi	r2,r18,1024
    6718:	10000826 	beq	r2,zero,673c <__svfscanf_r+0x11cc>
    671c:	00be9fc4 	movi	r2,-1409
    6720:	90a4703a 	and	r18,r18,r2
    6724:	003fe706 	br	66c4 <__svfscanf_r+0x1154>
    6728:	b009883a 	mov	r4,r22
    672c:	800b883a 	mov	r5,r16
    6730:	00032300 	call	3230 <__srefill_r>
    6734:	103feb26 	beq	r2,zero,66e4 <__svfscanf_r+0x1174>
    6738:	003f5506 	br	6490 <__svfscanf_r+0xf20>
    673c:	a8000426 	beq	r21,zero,6750 <__svfscanf_r+0x11e0>
    6740:	d880a317 	ldw	r2,652(sp)
    6744:	ad7fffc4 	addi	r21,r21,-1
    6748:	10800044 	addi	r2,r2,1
    674c:	d880a315 	stw	r2,652(sp)
    6750:	00bf1fc4 	movi	r2,-897
    6754:	90a4703a 	and	r18,r18,r2
    6758:	bdc00044 	addi	r23,r23,1
    675c:	003fdb06 	br	66cc <__svfscanf_r+0x115c>
    6760:	9080004c 	andi	r2,r18,1
    6764:	1005003a 	cmpeq	r2,r2,zero
    6768:	10001426 	beq	r2,zero,67bc <__svfscanf_r+0x124c>
    676c:	9080008c 	andi	r2,r18,2
    6770:	10001226 	beq	r2,zero,67bc <__svfscanf_r+0x124c>
    6774:	d8c0a017 	ldw	r3,640(sp)
    6778:	00800074 	movhi	r2,1
    677c:	10b17304 	addi	r2,r2,-14900
    6780:	18801426 	beq	r3,r2,67d4 <__svfscanf_r+0x1264>
    6784:	d9c0a117 	ldw	r7,644(sp)
    6788:	d940a617 	ldw	r5,664(sp)
    678c:	000d883a 	mov	r6,zero
    6790:	b009883a 	mov	r4,r22
    6794:	000c2b40 	call	c2b4 <_strtoll_r>
    6798:	100d883a 	mov	r6,r2
    679c:	180f883a 	mov	r7,r3
    67a0:	d900a417 	ldw	r4,656(sp)
    67a4:	20800017 	ldw	r2,0(r4)
    67a8:	21000104 	addi	r4,r4,4
    67ac:	d900a415 	stw	r4,656(sp)
    67b0:	11c00115 	stw	r7,4(r2)
    67b4:	11800015 	stw	r6,0(r2)
    67b8:	003fba06 	br	66a4 <__svfscanf_r+0x1134>
    67bc:	d900a417 	ldw	r4,656(sp)
    67c0:	20800017 	ldw	r2,0(r4)
    67c4:	21000104 	addi	r4,r4,4
    67c8:	d900a415 	stw	r4,656(sp)
    67cc:	10c00015 	stw	r3,0(r2)
    67d0:	003fb406 	br	66a4 <__svfscanf_r+0x1134>
    67d4:	d9c0a117 	ldw	r7,644(sp)
    67d8:	d940a617 	ldw	r5,664(sp)
    67dc:	000d883a 	mov	r6,zero
    67e0:	b009883a 	mov	r4,r22
    67e4:	000c8200 	call	c820 <_strtoull_r>
    67e8:	100d883a 	mov	r6,r2
    67ec:	180f883a 	mov	r7,r3
    67f0:	003feb06 	br	67a0 <__svfscanf_r+0x1230>
    67f4:	d8c0a117 	ldw	r3,644(sp)
    67f8:	18c5883a 	add	r2,r3,r3
    67fc:	00c00074 	movhi	r3,1
    6800:	18cef584 	addi	r3,r3,15318
    6804:	10c5883a 	add	r2,r2,r3
    6808:	1080000f 	ldh	r2,0(r2)
    680c:	00fd1fc4 	movi	r3,-2945
    6810:	90e4703a 	and	r18,r18,r3
    6814:	d880a115 	stw	r2,644(sp)
    6818:	003faa06 	br	66c4 <__svfscanf_r+0x1154>
    681c:	d900a117 	ldw	r4,644(sp)
    6820:	00c00074 	movhi	r3,1
    6824:	18cef584 	addi	r3,r3,15318
    6828:	2105883a 	add	r2,r4,r4
    682c:	10c5883a 	add	r2,r2,r3
    6830:	1080000f 	ldh	r2,0(r2)
    6834:	00c00204 	movi	r3,8
    6838:	d880a115 	stw	r2,644(sp)
    683c:	18bf140e 	bge	r3,r2,6490 <__svfscanf_r+0xf20>
    6840:	00bd1fc4 	movi	r2,-2945
    6844:	90a4703a 	and	r18,r18,r2
    6848:	003f9e06 	br	66c4 <__svfscanf_r+0x1154>
    684c:	d8c0a117 	ldw	r3,644(sp)
    6850:	00800284 	movi	r2,10
    6854:	10fffa16 	blt	r2,r3,6840 <__svfscanf_r+0x12d0>
    6858:	003f0d06 	br	6490 <__svfscanf_r+0xf20>
    685c:	90c1800c 	andi	r3,r18,1536
    6860:	00808004 	movi	r2,512
    6864:	18bf0a1e 	bne	r3,r2,6490 <__svfscanf_r+0xf20>
    6868:	00bf7fc4 	movi	r2,-513
    686c:	9084703a 	and	r2,r18,r2
    6870:	01000404 	movi	r4,16
    6874:	14814014 	ori	r18,r2,1280
    6878:	d900a115 	stw	r4,644(sp)
    687c:	003f9106 	br	66c4 <__svfscanf_r+0x1154>
    6880:	d880a417 	ldw	r2,656(sp)
    6884:	dd400404 	addi	r21,sp,16
    6888:	14800017 	ldw	r18,0(r2)
    688c:	9027883a 	mov	r19,r18
    6890:	81000017 	ldw	r4,0(r16)
    6894:	20800003 	ldbu	r2,0(r4)
    6898:	a885883a 	add	r2,r21,r2
    689c:	10c00007 	ldb	r3,0(r2)
    68a0:	18001426 	beq	r3,zero,68f4 <__svfscanf_r+0x1384>
    68a4:	d8c0a317 	ldw	r3,652(sp)
    68a8:	80800117 	ldw	r2,4(r16)
    68ac:	21800044 	addi	r6,r4,1
    68b0:	18ffffc4 	addi	r3,r3,-1
    68b4:	d8c0a315 	stw	r3,652(sp)
    68b8:	10ffffc4 	addi	r3,r2,-1
    68bc:	80c00115 	stw	r3,4(r16)
    68c0:	20800003 	ldbu	r2,0(r4)
    68c4:	90800005 	stb	r2,0(r18)
    68c8:	d900a317 	ldw	r4,652(sp)
    68cc:	81800015 	stw	r6,0(r16)
    68d0:	94800044 	addi	r18,r18,1
    68d4:	20000726 	beq	r4,zero,68f4 <__svfscanf_r+0x1384>
    68d8:	80800117 	ldw	r2,4(r16)
    68dc:	00bfec16 	blt	zero,r2,6890 <__svfscanf_r+0x1320>
    68e0:	b009883a 	mov	r4,r22
    68e4:	800b883a 	mov	r5,r16
    68e8:	00032300 	call	3230 <__srefill_r>
    68ec:	103fe826 	beq	r2,zero,6890 <__svfscanf_r+0x1320>
    68f0:	9cbb7426 	beq	r19,r18,56c4 <__svfscanf_r+0x154>
    68f4:	94e7c83a 	sub	r19,r18,r19
    68f8:	983b5226 	beq	r19,zero,5644 <__svfscanf_r+0xd4>
    68fc:	90000005 	stb	zero,0(r18)
    6900:	d880a417 	ldw	r2,656(sp)
    6904:	d8c0a217 	ldw	r3,648(sp)
    6908:	8ce3883a 	add	r17,r17,r19
    690c:	10800104 	addi	r2,r2,4
    6910:	18c00044 	addi	r3,r3,1
    6914:	d880a415 	stw	r2,656(sp)
    6918:	d8c0a215 	stw	r3,648(sp)
    691c:	003b2706 	br	55bc <__svfscanf_r+0x4c>
    6920:	9cc00414 	ori	r19,r19,16
    6924:	003b6e06 	br	56e0 <__svfscanf_r+0x170>
    6928:	00c00404 	movi	r3,16
    692c:	01000074 	movhi	r4,1
    6930:	21317304 	addi	r4,r4,-14900
    6934:	9cc08014 	ori	r19,r19,512
    6938:	054000c4 	movi	r21,3
    693c:	d8c0a115 	stw	r3,644(sp)
    6940:	d900a015 	stw	r4,640(sp)
    6944:	003bf806 	br	5928 <__svfscanf_r+0x3b8>
    6948:	9880040c 	andi	r2,r19,16
    694c:	10001926 	beq	r2,zero,69b4 <__svfscanf_r+0x1444>
    6950:	0027883a 	mov	r19,zero
    6954:	00000b06 	br	6984 <__svfscanf_r+0x1414>
    6958:	80800017 	ldw	r2,0(r16)
    695c:	b009883a 	mov	r4,r22
    6960:	800b883a 	mov	r5,r16
    6964:	148d883a 	add	r6,r2,r18
    6968:	81800015 	stw	r6,0(r16)
    696c:	9ca7883a 	add	r19,r19,r18
    6970:	00032300 	call	3230 <__srefill_r>
    6974:	103c711e 	bne	r2,zero,5b3c <__svfscanf_r+0x5cc>
    6978:	d900a317 	ldw	r4,652(sp)
    697c:	2489c83a 	sub	r4,r4,r18
    6980:	d900a315 	stw	r4,652(sp)
    6984:	84800117 	ldw	r18,4(r16)
    6988:	d8c0a317 	ldw	r3,652(sp)
    698c:	90fff216 	blt	r18,r3,6958 <__svfscanf_r+0x13e8>
    6990:	d900a317 	ldw	r4,652(sp)
    6994:	80800017 	ldw	r2,0(r16)
    6998:	9927883a 	add	r19,r19,r4
    699c:	9107c83a 	sub	r3,r18,r4
    69a0:	110d883a 	add	r6,r2,r4
    69a4:	8ce3883a 	add	r17,r17,r19
    69a8:	80c00115 	stw	r3,4(r16)
    69ac:	81800015 	stw	r6,0(r16)
    69b0:	003b0206 	br	55bc <__svfscanf_r+0x4c>
    69b4:	d880a417 	ldw	r2,656(sp)
    69b8:	d980a317 	ldw	r6,652(sp)
    69bc:	01400044 	movi	r5,1
    69c0:	11000017 	ldw	r4,0(r2)
    69c4:	800f883a 	mov	r7,r16
    69c8:	0001b180 	call	1b18 <fread>
    69cc:	103b3d26 	beq	r2,zero,56c4 <__svfscanf_r+0x154>
    69d0:	d8c0a417 	ldw	r3,656(sp)
    69d4:	d900a217 	ldw	r4,648(sp)
    69d8:	88a3883a 	add	r17,r17,r2
    69dc:	18c00104 	addi	r3,r3,4
    69e0:	21000044 	addi	r4,r4,1
    69e4:	d8c0a415 	stw	r3,656(sp)
    69e8:	d900a215 	stw	r4,648(sp)
    69ec:	003af306 	br	55bc <__svfscanf_r+0x4c>
    69f0:	8080030b 	ldhu	r2,12(r16)
    69f4:	1080100c 	andi	r2,r2,64
    69f8:	103b1226 	beq	r2,zero,5644 <__svfscanf_r+0xd4>
    69fc:	003b3306 	br	56cc <__svfscanf_r+0x15c>
    6a00:	983b1026 	beq	r19,zero,5644 <__svfscanf_r+0xd4>
    6a04:	8ce3883a 	add	r17,r17,r19
    6a08:	003aec06 	br	55bc <__svfscanf_r+0x4c>
    6a0c:	983c9626 	beq	r19,zero,5c68 <__svfscanf_r+0x6f8>
    6a10:	9cffffc4 	addi	r19,r19,-1
    6a14:	d8c04404 	addi	r3,sp,272
    6a18:	1cc5883a 	add	r2,r3,r19
    6a1c:	11400003 	ldbu	r5,0(r2)
    6a20:	b009883a 	mov	r4,r22
    6a24:	800d883a 	mov	r6,r16
    6a28:	000cbec0 	call	cbec <_ungetc_r>
    6a2c:	003ff706 	br	6a0c <__svfscanf_r+0x149c>
    6a30:	00bfff84 	movi	r2,-2
    6a34:	18bc7a1e 	bne	r3,r2,5c20 <__svfscanf_r+0x6b0>
    6a38:	003c8406 	br	5c4c <__svfscanf_r+0x6dc>
    6a3c:	d900a417 	ldw	r4,656(sp)
    6a40:	25400017 	ldw	r21,0(r4)
    6a44:	21000104 	addi	r4,r4,4
    6a48:	d900a415 	stw	r4,656(sp)
    6a4c:	003c4a06 	br	5b78 <__svfscanf_r+0x608>
    6a50:	00bfff84 	movi	r2,-2
    6a54:	18bc0f1e 	bne	r3,r2,5a94 <__svfscanf_r+0x524>
    6a58:	003c1506 	br	5ab0 <__svfscanf_r+0x540>
    6a5c:	b009883a 	mov	r4,r22
    6a60:	800b883a 	mov	r5,r16
    6a64:	00032300 	call	3230 <__srefill_r>
    6a68:	103c1326 	beq	r2,zero,5ab8 <__svfscanf_r+0x548>
    6a6c:	903b151e 	bne	r18,zero,56c4 <__svfscanf_r+0x154>
    6a70:	a83ad21e 	bne	r21,zero,55bc <__svfscanf_r+0x4c>
    6a74:	d880a217 	ldw	r2,648(sp)
    6a78:	10800044 	addi	r2,r2,1
    6a7c:	d880a215 	stw	r2,648(sp)
    6a80:	003ace06 	br	55bc <__svfscanf_r+0x4c>
    6a84:	0027883a 	mov	r19,zero
    6a88:	003bdd06 	br	5a00 <__svfscanf_r+0x490>
    6a8c:	9cc00114 	ori	r19,r19,4
    6a90:	003b1306 	br	56e0 <__svfscanf_r+0x170>
    6a94:	05400104 	movi	r21,4
    6a98:	003ba306 	br	5928 <__svfscanf_r+0x3b8>
    6a9c:	9cc00054 	ori	r19,r19,1
    6aa0:	00800074 	movhi	r2,1
    6aa4:	10b01304 	addi	r2,r2,-16308
    6aa8:	00c00284 	movi	r3,10
    6aac:	054000c4 	movi	r21,3
    6ab0:	d880a015 	stw	r2,640(sp)
    6ab4:	d8c0a115 	stw	r3,644(sp)
    6ab8:	003b9b06 	br	5928 <__svfscanf_r+0x3b8>
    6abc:	9cc01014 	ori	r19,r19,64
    6ac0:	002b883a 	mov	r21,zero
    6ac4:	003b9806 	br	5928 <__svfscanf_r+0x3b8>
    6ac8:	a00b883a 	mov	r5,r20
    6acc:	d9000404 	addi	r4,sp,16
    6ad0:	000a7880 	call	a788 <__sccl>
    6ad4:	1029883a 	mov	r20,r2
    6ad8:	9cc01014 	ori	r19,r19,64
    6adc:	05400044 	movi	r21,1
    6ae0:	003b9106 	br	5928 <__svfscanf_r+0x3b8>
    6ae4:	9cc00054 	ori	r19,r19,1
    6ae8:	00800204 	movi	r2,8
    6aec:	00c00074 	movhi	r3,1
    6af0:	18f17304 	addi	r3,r3,-14900
    6af4:	054000c4 	movi	r21,3
    6af8:	d880a115 	stw	r2,644(sp)
    6afc:	d8c0a015 	stw	r3,640(sp)
    6b00:	003b8906 	br	5928 <__svfscanf_r+0x3b8>
    6b04:	9880040c 	andi	r2,r19,16
    6b08:	103aac1e 	bne	r2,zero,55bc <__svfscanf_r+0x4c>
    6b0c:	9880010c 	andi	r2,r19,4
    6b10:	10002426 	beq	r2,zero,6ba4 <__svfscanf_r+0x1634>
    6b14:	d900a417 	ldw	r4,656(sp)
    6b18:	20800017 	ldw	r2,0(r4)
    6b1c:	21000104 	addi	r4,r4,4
    6b20:	d900a415 	stw	r4,656(sp)
    6b24:	1440000d 	sth	r17,0(r2)
    6b28:	003aa406 	br	55bc <__svfscanf_r+0x4c>
    6b2c:	9cc00094 	ori	r19,r19,2
    6b30:	003aeb06 	br	56e0 <__svfscanf_r+0x170>
    6b34:	05400084 	movi	r21,2
    6b38:	003b7b06 	br	5928 <__svfscanf_r+0x3b8>
    6b3c:	00800404 	movi	r2,16
    6b40:	00c00074 	movhi	r3,1
    6b44:	18f17304 	addi	r3,r3,-14900
    6b48:	9cc08814 	ori	r19,r19,544
    6b4c:	054000c4 	movi	r21,3
    6b50:	d880a115 	stw	r2,644(sp)
    6b54:	d8c0a015 	stw	r3,640(sp)
    6b58:	003b7306 	br	5928 <__svfscanf_r+0x3b8>
    6b5c:	0009883a 	mov	r4,zero
    6b60:	000a8480 	call	a848 <nanf>
    6b64:	b8800015 	stw	r2,0(r23)
    6b68:	003d2706 	br	6008 <__svfscanf_r+0xa98>
    6b6c:	a0c00007 	ldb	r3,0(r20)
    6b70:	00801b04 	movi	r2,108
    6b74:	18800826 	beq	r3,r2,6b98 <__svfscanf_r+0x1628>
    6b78:	9cc00054 	ori	r19,r19,1
    6b7c:	003ad806 	br	56e0 <__svfscanf_r+0x170>
    6b80:	01000074 	movhi	r4,1
    6b84:	21301304 	addi	r4,r4,-16308
    6b88:	054000c4 	movi	r21,3
    6b8c:	d900a015 	stw	r4,640(sp)
    6b90:	d800a115 	stw	zero,644(sp)
    6b94:	003b6406 	br	5928 <__svfscanf_r+0x3b8>
    6b98:	a5000044 	addi	r20,r20,1
    6b9c:	9cc00094 	ori	r19,r19,2
    6ba0:	003acf06 	br	56e0 <__svfscanf_r+0x170>
    6ba4:	9880004c 	andi	r2,r19,1
    6ba8:	1005003a 	cmpeq	r2,r2,zero
    6bac:	10000a26 	beq	r2,zero,6bd8 <__svfscanf_r+0x1668>
    6bb0:	9880008c 	andi	r2,r19,2
    6bb4:	10000826 	beq	r2,zero,6bd8 <__svfscanf_r+0x1668>
    6bb8:	d900a417 	ldw	r4,656(sp)
    6bbc:	8807d7fa 	srai	r3,r17,31
    6bc0:	20800017 	ldw	r2,0(r4)
    6bc4:	21000104 	addi	r4,r4,4
    6bc8:	d900a415 	stw	r4,656(sp)
    6bcc:	14400015 	stw	r17,0(r2)
    6bd0:	10c00115 	stw	r3,4(r2)
    6bd4:	003a7906 	br	55bc <__svfscanf_r+0x4c>
    6bd8:	d8c0a417 	ldw	r3,656(sp)
    6bdc:	18800017 	ldw	r2,0(r3)
    6be0:	18c00104 	addi	r3,r3,4
    6be4:	d8c0a415 	stw	r3,656(sp)
    6be8:	14400015 	stw	r17,0(r2)
    6bec:	003a7306 	br	55bc <__svfscanf_r+0x4c>

00006bf0 <__svfscanf>:
    6bf0:	00800074 	movhi	r2,1
    6bf4:	10970104 	addi	r2,r2,23556
    6bf8:	2013883a 	mov	r9,r4
    6bfc:	11000017 	ldw	r4,0(r2)
    6c00:	2805883a 	mov	r2,r5
    6c04:	300f883a 	mov	r7,r6
    6c08:	480b883a 	mov	r5,r9
    6c0c:	100d883a 	mov	r6,r2
    6c10:	00055701 	jmpi	5570 <__svfscanf_r>

00006c14 <_vfscanf_r>:
    6c14:	defffb04 	addi	sp,sp,-20
    6c18:	dcc00315 	stw	r19,12(sp)
    6c1c:	dc800215 	stw	r18,8(sp)
    6c20:	dc400115 	stw	r17,4(sp)
    6c24:	dc000015 	stw	r16,0(sp)
    6c28:	dfc00415 	stw	ra,16(sp)
    6c2c:	2021883a 	mov	r16,r4
    6c30:	2823883a 	mov	r17,r5
    6c34:	3025883a 	mov	r18,r6
    6c38:	3827883a 	mov	r19,r7
    6c3c:	20000226 	beq	r4,zero,6c48 <_vfscanf_r+0x34>
    6c40:	20800e17 	ldw	r2,56(r4)
    6c44:	10000b26 	beq	r2,zero,6c74 <_vfscanf_r+0x60>
    6c48:	8009883a 	mov	r4,r16
    6c4c:	880b883a 	mov	r5,r17
    6c50:	900d883a 	mov	r6,r18
    6c54:	980f883a 	mov	r7,r19
    6c58:	dfc00417 	ldw	ra,16(sp)
    6c5c:	dcc00317 	ldw	r19,12(sp)
    6c60:	dc800217 	ldw	r18,8(sp)
    6c64:	dc400117 	ldw	r17,4(sp)
    6c68:	dc000017 	ldw	r16,0(sp)
    6c6c:	dec00504 	addi	sp,sp,20
    6c70:	00055701 	jmpi	5570 <__svfscanf_r>
    6c74:	00015b40 	call	15b4 <__sinit>
    6c78:	003ff306 	br	6c48 <_vfscanf_r+0x34>

00006c7c <vfscanf>:
    6c7c:	defffb04 	addi	sp,sp,-20
    6c80:	dcc00315 	stw	r19,12(sp)
    6c84:	04c00074 	movhi	r19,1
    6c88:	9cd70104 	addi	r19,r19,23556
    6c8c:	98c00017 	ldw	r3,0(r19)
    6c90:	dc800215 	stw	r18,8(sp)
    6c94:	dc400115 	stw	r17,4(sp)
    6c98:	dc000015 	stw	r16,0(sp)
    6c9c:	dfc00415 	stw	ra,16(sp)
    6ca0:	2021883a 	mov	r16,r4
    6ca4:	2823883a 	mov	r17,r5
    6ca8:	3025883a 	mov	r18,r6
    6cac:	18000326 	beq	r3,zero,6cbc <vfscanf+0x40>
    6cb0:	18800e17 	ldw	r2,56(r3)
    6cb4:	1809883a 	mov	r4,r3
    6cb8:	10000b26 	beq	r2,zero,6ce8 <vfscanf+0x6c>
    6cbc:	99000017 	ldw	r4,0(r19)
    6cc0:	800b883a 	mov	r5,r16
    6cc4:	880d883a 	mov	r6,r17
    6cc8:	900f883a 	mov	r7,r18
    6ccc:	dfc00417 	ldw	ra,16(sp)
    6cd0:	dcc00317 	ldw	r19,12(sp)
    6cd4:	dc800217 	ldw	r18,8(sp)
    6cd8:	dc400117 	ldw	r17,4(sp)
    6cdc:	dc000017 	ldw	r16,0(sp)
    6ce0:	dec00504 	addi	sp,sp,20
    6ce4:	00055701 	jmpi	5570 <__svfscanf_r>
    6ce8:	00015b40 	call	15b4 <__sinit>
    6cec:	003ff306 	br	6cbc <vfscanf+0x40>

00006cf0 <_write_r>:
    6cf0:	defffd04 	addi	sp,sp,-12
    6cf4:	dc000015 	stw	r16,0(sp)
    6cf8:	04000074 	movhi	r16,1
    6cfc:	841de504 	addi	r16,r16,30612
    6d00:	dc400115 	stw	r17,4(sp)
    6d04:	80000015 	stw	zero,0(r16)
    6d08:	2023883a 	mov	r17,r4
    6d0c:	2809883a 	mov	r4,r5
    6d10:	300b883a 	mov	r5,r6
    6d14:	380d883a 	mov	r6,r7
    6d18:	dfc00215 	stw	ra,8(sp)
    6d1c:	001112c0 	call	1112c <write>
    6d20:	1007883a 	mov	r3,r2
    6d24:	00bfffc4 	movi	r2,-1
    6d28:	18800626 	beq	r3,r2,6d44 <_write_r+0x54>
    6d2c:	1805883a 	mov	r2,r3
    6d30:	dfc00217 	ldw	ra,8(sp)
    6d34:	dc400117 	ldw	r17,4(sp)
    6d38:	dc000017 	ldw	r16,0(sp)
    6d3c:	dec00304 	addi	sp,sp,12
    6d40:	f800283a 	ret
    6d44:	80800017 	ldw	r2,0(r16)
    6d48:	103ff826 	beq	r2,zero,6d2c <_write_r+0x3c>
    6d4c:	88800015 	stw	r2,0(r17)
    6d50:	1805883a 	mov	r2,r3
    6d54:	dfc00217 	ldw	ra,8(sp)
    6d58:	dc400117 	ldw	r17,4(sp)
    6d5c:	dc000017 	ldw	r16,0(sp)
    6d60:	dec00304 	addi	sp,sp,12
    6d64:	f800283a 	ret

00006d68 <__swsetup_r>:
    6d68:	00800074 	movhi	r2,1
    6d6c:	10970104 	addi	r2,r2,23556
    6d70:	10c00017 	ldw	r3,0(r2)
    6d74:	defffd04 	addi	sp,sp,-12
    6d78:	dc400115 	stw	r17,4(sp)
    6d7c:	dc000015 	stw	r16,0(sp)
    6d80:	dfc00215 	stw	ra,8(sp)
    6d84:	2023883a 	mov	r17,r4
    6d88:	2821883a 	mov	r16,r5
    6d8c:	18000226 	beq	r3,zero,6d98 <__swsetup_r+0x30>
    6d90:	18800e17 	ldw	r2,56(r3)
    6d94:	10001f26 	beq	r2,zero,6e14 <__swsetup_r+0xac>
    6d98:	8100030b 	ldhu	r4,12(r16)
    6d9c:	2080020c 	andi	r2,r4,8
    6da0:	10002826 	beq	r2,zero,6e44 <__swsetup_r+0xdc>
    6da4:	81400417 	ldw	r5,16(r16)
    6da8:	28001d26 	beq	r5,zero,6e20 <__swsetup_r+0xb8>
    6dac:	2080004c 	andi	r2,r4,1
    6db0:	1005003a 	cmpeq	r2,r2,zero
    6db4:	10000b26 	beq	r2,zero,6de4 <__swsetup_r+0x7c>
    6db8:	2080008c 	andi	r2,r4,2
    6dbc:	10001226 	beq	r2,zero,6e08 <__swsetup_r+0xa0>
    6dc0:	0005883a 	mov	r2,zero
    6dc4:	80800215 	stw	r2,8(r16)
    6dc8:	28000b26 	beq	r5,zero,6df8 <__swsetup_r+0x90>
    6dcc:	0005883a 	mov	r2,zero
    6dd0:	dfc00217 	ldw	ra,8(sp)
    6dd4:	dc400117 	ldw	r17,4(sp)
    6dd8:	dc000017 	ldw	r16,0(sp)
    6ddc:	dec00304 	addi	sp,sp,12
    6de0:	f800283a 	ret
    6de4:	80800517 	ldw	r2,20(r16)
    6de8:	80000215 	stw	zero,8(r16)
    6dec:	0085c83a 	sub	r2,zero,r2
    6df0:	80800615 	stw	r2,24(r16)
    6df4:	283ff51e 	bne	r5,zero,6dcc <__swsetup_r+0x64>
    6df8:	2080200c 	andi	r2,r4,128
    6dfc:	103ff326 	beq	r2,zero,6dcc <__swsetup_r+0x64>
    6e00:	00bfffc4 	movi	r2,-1
    6e04:	003ff206 	br	6dd0 <__swsetup_r+0x68>
    6e08:	80800517 	ldw	r2,20(r16)
    6e0c:	80800215 	stw	r2,8(r16)
    6e10:	003fed06 	br	6dc8 <__swsetup_r+0x60>
    6e14:	1809883a 	mov	r4,r3
    6e18:	00015b40 	call	15b4 <__sinit>
    6e1c:	003fde06 	br	6d98 <__swsetup_r+0x30>
    6e20:	20c0a00c 	andi	r3,r4,640
    6e24:	00808004 	movi	r2,512
    6e28:	18bfe026 	beq	r3,r2,6dac <__swsetup_r+0x44>
    6e2c:	8809883a 	mov	r4,r17
    6e30:	800b883a 	mov	r5,r16
    6e34:	00026580 	call	2658 <__smakebuf_r>
    6e38:	8100030b 	ldhu	r4,12(r16)
    6e3c:	81400417 	ldw	r5,16(r16)
    6e40:	003fda06 	br	6dac <__swsetup_r+0x44>
    6e44:	2080040c 	andi	r2,r4,16
    6e48:	103fed26 	beq	r2,zero,6e00 <__swsetup_r+0x98>
    6e4c:	2080010c 	andi	r2,r4,4
    6e50:	10001226 	beq	r2,zero,6e9c <__swsetup_r+0x134>
    6e54:	81400c17 	ldw	r5,48(r16)
    6e58:	28000526 	beq	r5,zero,6e70 <__swsetup_r+0x108>
    6e5c:	80801004 	addi	r2,r16,64
    6e60:	28800226 	beq	r5,r2,6e6c <__swsetup_r+0x104>
    6e64:	8809883a 	mov	r4,r17
    6e68:	0001c840 	call	1c84 <_free_r>
    6e6c:	80000c15 	stw	zero,48(r16)
    6e70:	8080030b 	ldhu	r2,12(r16)
    6e74:	81400417 	ldw	r5,16(r16)
    6e78:	80000115 	stw	zero,4(r16)
    6e7c:	10bff6cc 	andi	r2,r2,65499
    6e80:	8080030d 	sth	r2,12(r16)
    6e84:	81400015 	stw	r5,0(r16)
    6e88:	8080030b 	ldhu	r2,12(r16)
    6e8c:	10800214 	ori	r2,r2,8
    6e90:	113fffcc 	andi	r4,r2,65535
    6e94:	8080030d 	sth	r2,12(r16)
    6e98:	003fc306 	br	6da8 <__swsetup_r+0x40>
    6e9c:	81400417 	ldw	r5,16(r16)
    6ea0:	003ff906 	br	6e88 <__swsetup_r+0x120>

00006ea4 <_close_r>:
    6ea4:	defffd04 	addi	sp,sp,-12
    6ea8:	dc000015 	stw	r16,0(sp)
    6eac:	04000074 	movhi	r16,1
    6eb0:	841de504 	addi	r16,r16,30612
    6eb4:	dc400115 	stw	r17,4(sp)
    6eb8:	80000015 	stw	zero,0(r16)
    6ebc:	2023883a 	mov	r17,r4
    6ec0:	2809883a 	mov	r4,r5
    6ec4:	dfc00215 	stw	ra,8(sp)
    6ec8:	00104140 	call	10414 <close>
    6ecc:	1007883a 	mov	r3,r2
    6ed0:	00bfffc4 	movi	r2,-1
    6ed4:	18800626 	beq	r3,r2,6ef0 <_close_r+0x4c>
    6ed8:	1805883a 	mov	r2,r3
    6edc:	dfc00217 	ldw	ra,8(sp)
    6ee0:	dc400117 	ldw	r17,4(sp)
    6ee4:	dc000017 	ldw	r16,0(sp)
    6ee8:	dec00304 	addi	sp,sp,12
    6eec:	f800283a 	ret
    6ef0:	80800017 	ldw	r2,0(r16)
    6ef4:	103ff826 	beq	r2,zero,6ed8 <_close_r+0x34>
    6ef8:	88800015 	stw	r2,0(r17)
    6efc:	1805883a 	mov	r2,r3
    6f00:	dfc00217 	ldw	ra,8(sp)
    6f04:	dc400117 	ldw	r17,4(sp)
    6f08:	dc000017 	ldw	r16,0(sp)
    6f0c:	dec00304 	addi	sp,sp,12
    6f10:	f800283a 	ret

00006f14 <quorem>:
    6f14:	28c00417 	ldw	r3,16(r5)
    6f18:	20800417 	ldw	r2,16(r4)
    6f1c:	defff604 	addi	sp,sp,-40
    6f20:	ddc00715 	stw	r23,28(sp)
    6f24:	dd400515 	stw	r21,20(sp)
    6f28:	dfc00915 	stw	ra,36(sp)
    6f2c:	df000815 	stw	fp,32(sp)
    6f30:	dd800615 	stw	r22,24(sp)
    6f34:	dd000415 	stw	r20,16(sp)
    6f38:	dcc00315 	stw	r19,12(sp)
    6f3c:	dc800215 	stw	r18,8(sp)
    6f40:	dc400115 	stw	r17,4(sp)
    6f44:	dc000015 	stw	r16,0(sp)
    6f48:	202f883a 	mov	r23,r4
    6f4c:	282b883a 	mov	r21,r5
    6f50:	10c07416 	blt	r2,r3,7124 <quorem+0x210>
    6f54:	1c7fffc4 	addi	r17,r3,-1
    6f58:	8c45883a 	add	r2,r17,r17
    6f5c:	1085883a 	add	r2,r2,r2
    6f60:	2c000504 	addi	r16,r5,20
    6f64:	24c00504 	addi	r19,r4,20
    6f68:	14ed883a 	add	r22,r2,r19
    6f6c:	80a5883a 	add	r18,r16,r2
    6f70:	b7000017 	ldw	fp,0(r22)
    6f74:	91400017 	ldw	r5,0(r18)
    6f78:	e009883a 	mov	r4,fp
    6f7c:	29400044 	addi	r5,r5,1
    6f80:	000fb740 	call	fb74 <__udivsi3>
    6f84:	1029883a 	mov	r20,r2
    6f88:	10003c1e 	bne	r2,zero,707c <quorem+0x168>
    6f8c:	a80b883a 	mov	r5,r21
    6f90:	b809883a 	mov	r4,r23
    6f94:	00092140 	call	9214 <__mcmp>
    6f98:	10002b16 	blt	r2,zero,7048 <quorem+0x134>
    6f9c:	a5000044 	addi	r20,r20,1
    6fa0:	980f883a 	mov	r7,r19
    6fa4:	0011883a 	mov	r8,zero
    6fa8:	0009883a 	mov	r4,zero
    6fac:	81400017 	ldw	r5,0(r16)
    6fb0:	38c00017 	ldw	r3,0(r7)
    6fb4:	84000104 	addi	r16,r16,4
    6fb8:	28bfffcc 	andi	r2,r5,65535
    6fbc:	2085883a 	add	r2,r4,r2
    6fc0:	11bfffcc 	andi	r6,r2,65535
    6fc4:	193fffcc 	andi	r4,r3,65535
    6fc8:	1004d43a 	srli	r2,r2,16
    6fcc:	280ad43a 	srli	r5,r5,16
    6fd0:	2189c83a 	sub	r4,r4,r6
    6fd4:	2209883a 	add	r4,r4,r8
    6fd8:	1806d43a 	srli	r3,r3,16
    6fdc:	288b883a 	add	r5,r5,r2
    6fe0:	200dd43a 	srai	r6,r4,16
    6fe4:	28bfffcc 	andi	r2,r5,65535
    6fe8:	1887c83a 	sub	r3,r3,r2
    6fec:	1987883a 	add	r3,r3,r6
    6ff0:	3900000d 	sth	r4,0(r7)
    6ff4:	38c0008d 	sth	r3,2(r7)
    6ff8:	2808d43a 	srli	r4,r5,16
    6ffc:	39c00104 	addi	r7,r7,4
    7000:	1811d43a 	srai	r8,r3,16
    7004:	943fe92e 	bgeu	r18,r16,6fac <quorem+0x98>
    7008:	8c45883a 	add	r2,r17,r17
    700c:	1085883a 	add	r2,r2,r2
    7010:	9885883a 	add	r2,r19,r2
    7014:	10c00017 	ldw	r3,0(r2)
    7018:	18000b1e 	bne	r3,zero,7048 <quorem+0x134>
    701c:	113fff04 	addi	r4,r2,-4
    7020:	9900082e 	bgeu	r19,r4,7044 <quorem+0x130>
    7024:	10bfff17 	ldw	r2,-4(r2)
    7028:	10000326 	beq	r2,zero,7038 <quorem+0x124>
    702c:	00000506 	br	7044 <quorem+0x130>
    7030:	20800017 	ldw	r2,0(r4)
    7034:	1000031e 	bne	r2,zero,7044 <quorem+0x130>
    7038:	213fff04 	addi	r4,r4,-4
    703c:	8c7fffc4 	addi	r17,r17,-1
    7040:	993ffb36 	bltu	r19,r4,7030 <quorem+0x11c>
    7044:	bc400415 	stw	r17,16(r23)
    7048:	a005883a 	mov	r2,r20
    704c:	dfc00917 	ldw	ra,36(sp)
    7050:	df000817 	ldw	fp,32(sp)
    7054:	ddc00717 	ldw	r23,28(sp)
    7058:	dd800617 	ldw	r22,24(sp)
    705c:	dd400517 	ldw	r21,20(sp)
    7060:	dd000417 	ldw	r20,16(sp)
    7064:	dcc00317 	ldw	r19,12(sp)
    7068:	dc800217 	ldw	r18,8(sp)
    706c:	dc400117 	ldw	r17,4(sp)
    7070:	dc000017 	ldw	r16,0(sp)
    7074:	dec00a04 	addi	sp,sp,40
    7078:	f800283a 	ret
    707c:	980f883a 	mov	r7,r19
    7080:	8011883a 	mov	r8,r16
    7084:	0013883a 	mov	r9,zero
    7088:	000d883a 	mov	r6,zero
    708c:	40c00017 	ldw	r3,0(r8)
    7090:	39000017 	ldw	r4,0(r7)
    7094:	42000104 	addi	r8,r8,4
    7098:	18bfffcc 	andi	r2,r3,65535
    709c:	a085383a 	mul	r2,r20,r2
    70a0:	1806d43a 	srli	r3,r3,16
    70a4:	217fffcc 	andi	r5,r4,65535
    70a8:	3085883a 	add	r2,r6,r2
    70ac:	11bfffcc 	andi	r6,r2,65535
    70b0:	a0c7383a 	mul	r3,r20,r3
    70b4:	1004d43a 	srli	r2,r2,16
    70b8:	298bc83a 	sub	r5,r5,r6
    70bc:	2a4b883a 	add	r5,r5,r9
    70c0:	2008d43a 	srli	r4,r4,16
    70c4:	1887883a 	add	r3,r3,r2
    70c8:	280dd43a 	srai	r6,r5,16
    70cc:	18bfffcc 	andi	r2,r3,65535
    70d0:	2089c83a 	sub	r4,r4,r2
    70d4:	2189883a 	add	r4,r4,r6
    70d8:	3900008d 	sth	r4,2(r7)
    70dc:	3940000d 	sth	r5,0(r7)
    70e0:	180cd43a 	srli	r6,r3,16
    70e4:	39c00104 	addi	r7,r7,4
    70e8:	2013d43a 	srai	r9,r4,16
    70ec:	923fe72e 	bgeu	r18,r8,708c <quorem+0x178>
    70f0:	e03fa61e 	bne	fp,zero,6f8c <quorem+0x78>
    70f4:	b0ffff04 	addi	r3,r22,-4
    70f8:	98c0082e 	bgeu	r19,r3,711c <quorem+0x208>
    70fc:	b0bfff17 	ldw	r2,-4(r22)
    7100:	10000326 	beq	r2,zero,7110 <quorem+0x1fc>
    7104:	00000506 	br	711c <quorem+0x208>
    7108:	18800017 	ldw	r2,0(r3)
    710c:	1000031e 	bne	r2,zero,711c <quorem+0x208>
    7110:	18ffff04 	addi	r3,r3,-4
    7114:	8c7fffc4 	addi	r17,r17,-1
    7118:	98fffb36 	bltu	r19,r3,7108 <quorem+0x1f4>
    711c:	bc400415 	stw	r17,16(r23)
    7120:	003f9a06 	br	6f8c <quorem+0x78>
    7124:	0005883a 	mov	r2,zero
    7128:	003fc806 	br	704c <quorem+0x138>

0000712c <_dtoa_r>:
    712c:	22001017 	ldw	r8,64(r4)
    7130:	deffda04 	addi	sp,sp,-152
    7134:	dd402115 	stw	r21,132(sp)
    7138:	dd002015 	stw	r20,128(sp)
    713c:	dc801e15 	stw	r18,120(sp)
    7140:	dc401d15 	stw	r17,116(sp)
    7144:	dfc02515 	stw	ra,148(sp)
    7148:	df002415 	stw	fp,144(sp)
    714c:	ddc02315 	stw	r23,140(sp)
    7150:	dd802215 	stw	r22,136(sp)
    7154:	dcc01f15 	stw	r19,124(sp)
    7158:	dc001c15 	stw	r16,112(sp)
    715c:	d9001615 	stw	r4,88(sp)
    7160:	3023883a 	mov	r17,r6
    7164:	2829883a 	mov	r20,r5
    7168:	d9c01715 	stw	r7,92(sp)
    716c:	dc802817 	ldw	r18,160(sp)
    7170:	302b883a 	mov	r21,r6
    7174:	40000a26 	beq	r8,zero,71a0 <_dtoa_r+0x74>
    7178:	20801117 	ldw	r2,68(r4)
    717c:	400b883a 	mov	r5,r8
    7180:	40800115 	stw	r2,4(r8)
    7184:	20c01117 	ldw	r3,68(r4)
    7188:	00800044 	movi	r2,1
    718c:	10c4983a 	sll	r2,r2,r3
    7190:	40800215 	stw	r2,8(r8)
    7194:	00090b80 	call	90b8 <_Bfree>
    7198:	d8c01617 	ldw	r3,88(sp)
    719c:	18001015 	stw	zero,64(r3)
    71a0:	8800a316 	blt	r17,zero,7430 <_dtoa_r+0x304>
    71a4:	90000015 	stw	zero,0(r18)
    71a8:	a8dffc2c 	andhi	r3,r21,32752
    71ac:	009ffc34 	movhi	r2,32752
    71b0:	18809126 	beq	r3,r2,73f8 <_dtoa_r+0x2cc>
    71b4:	000d883a 	mov	r6,zero
    71b8:	000f883a 	mov	r7,zero
    71bc:	a009883a 	mov	r4,r20
    71c0:	a80b883a 	mov	r5,r21
    71c4:	dd001215 	stw	r20,72(sp)
    71c8:	dd401315 	stw	r21,76(sp)
    71cc:	000f3b80 	call	f3b8 <__nedf2>
    71d0:	1000171e 	bne	r2,zero,7230 <_dtoa_r+0x104>
    71d4:	d9802717 	ldw	r6,156(sp)
    71d8:	00800044 	movi	r2,1
    71dc:	30800015 	stw	r2,0(r6)
    71e0:	d8802917 	ldw	r2,164(sp)
    71e4:	10029b26 	beq	r2,zero,7c54 <_dtoa_r+0xb28>
    71e8:	d9002917 	ldw	r4,164(sp)
    71ec:	00800074 	movhi	r2,1
    71f0:	108eeb44 	addi	r2,r2,15277
    71f4:	10ffffc4 	addi	r3,r2,-1
    71f8:	20800015 	stw	r2,0(r4)
    71fc:	1805883a 	mov	r2,r3
    7200:	dfc02517 	ldw	ra,148(sp)
    7204:	df002417 	ldw	fp,144(sp)
    7208:	ddc02317 	ldw	r23,140(sp)
    720c:	dd802217 	ldw	r22,136(sp)
    7210:	dd402117 	ldw	r21,132(sp)
    7214:	dd002017 	ldw	r20,128(sp)
    7218:	dcc01f17 	ldw	r19,124(sp)
    721c:	dc801e17 	ldw	r18,120(sp)
    7220:	dc401d17 	ldw	r17,116(sp)
    7224:	dc001c17 	ldw	r16,112(sp)
    7228:	dec02604 	addi	sp,sp,152
    722c:	f800283a 	ret
    7230:	d9001617 	ldw	r4,88(sp)
    7234:	d9401217 	ldw	r5,72(sp)
    7238:	d8800104 	addi	r2,sp,4
    723c:	a80d883a 	mov	r6,r21
    7240:	d9c00204 	addi	r7,sp,8
    7244:	d8800015 	stw	r2,0(sp)
    7248:	00096f40 	call	96f4 <__d2b>
    724c:	d8800715 	stw	r2,28(sp)
    7250:	a804d53a 	srli	r2,r21,20
    7254:	1101ffcc 	andi	r4,r2,2047
    7258:	20008626 	beq	r4,zero,7474 <_dtoa_r+0x348>
    725c:	d8c01217 	ldw	r3,72(sp)
    7260:	00800434 	movhi	r2,16
    7264:	10bfffc4 	addi	r2,r2,-1
    7268:	ddc00117 	ldw	r23,4(sp)
    726c:	a884703a 	and	r2,r21,r2
    7270:	1811883a 	mov	r8,r3
    7274:	124ffc34 	orhi	r9,r2,16368
    7278:	25bf0044 	addi	r22,r4,-1023
    727c:	d8000815 	stw	zero,32(sp)
    7280:	0005883a 	mov	r2,zero
    7284:	00cffe34 	movhi	r3,16376
    7288:	480b883a 	mov	r5,r9
    728c:	4009883a 	mov	r4,r8
    7290:	180f883a 	mov	r7,r3
    7294:	100d883a 	mov	r6,r2
    7298:	000ec200 	call	ec20 <__subdf3>
    729c:	0218dbf4 	movhi	r8,25455
    72a0:	4210d844 	addi	r8,r8,17249
    72a4:	024ff4f4 	movhi	r9,16339
    72a8:	4a61e9c4 	addi	r9,r9,-30809
    72ac:	480f883a 	mov	r7,r9
    72b0:	400d883a 	mov	r6,r8
    72b4:	180b883a 	mov	r5,r3
    72b8:	1009883a 	mov	r4,r2
    72bc:	000ed140 	call	ed14 <__muldf3>
    72c0:	0222d874 	movhi	r8,35681
    72c4:	42322cc4 	addi	r8,r8,-14157
    72c8:	024ff1f4 	movhi	r9,16327
    72cc:	4a628a04 	addi	r9,r9,-30168
    72d0:	480f883a 	mov	r7,r9
    72d4:	400d883a 	mov	r6,r8
    72d8:	180b883a 	mov	r5,r3
    72dc:	1009883a 	mov	r4,r2
    72e0:	000eca00 	call	eca0 <__adddf3>
    72e4:	b009883a 	mov	r4,r22
    72e8:	1021883a 	mov	r16,r2
    72ec:	1823883a 	mov	r17,r3
    72f0:	000f6600 	call	f660 <__floatsidf>
    72f4:	021427f4 	movhi	r8,20639
    72f8:	421e7ec4 	addi	r8,r8,31227
    72fc:	024ff4f4 	movhi	r9,16339
    7300:	4a5104c4 	addi	r9,r9,17427
    7304:	480f883a 	mov	r7,r9
    7308:	400d883a 	mov	r6,r8
    730c:	180b883a 	mov	r5,r3
    7310:	1009883a 	mov	r4,r2
    7314:	000ed140 	call	ed14 <__muldf3>
    7318:	180f883a 	mov	r7,r3
    731c:	880b883a 	mov	r5,r17
    7320:	100d883a 	mov	r6,r2
    7324:	8009883a 	mov	r4,r16
    7328:	000eca00 	call	eca0 <__adddf3>
    732c:	1009883a 	mov	r4,r2
    7330:	180b883a 	mov	r5,r3
    7334:	1021883a 	mov	r16,r2
    7338:	1823883a 	mov	r17,r3
    733c:	000f7580 	call	f758 <__fixdfsi>
    7340:	000d883a 	mov	r6,zero
    7344:	000f883a 	mov	r7,zero
    7348:	8009883a 	mov	r4,r16
    734c:	880b883a 	mov	r5,r17
    7350:	d8800d15 	stw	r2,52(sp)
    7354:	000f5500 	call	f550 <__ltdf2>
    7358:	10031716 	blt	r2,zero,7fb8 <_dtoa_r+0xe8c>
    735c:	d8c00d17 	ldw	r3,52(sp)
    7360:	00800584 	movi	r2,22
    7364:	10c1482e 	bgeu	r2,r3,7888 <_dtoa_r+0x75c>
    7368:	01000044 	movi	r4,1
    736c:	d9000c15 	stw	r4,48(sp)
    7370:	bd85c83a 	sub	r2,r23,r22
    7374:	11bfffc4 	addi	r6,r2,-1
    7378:	30030b16 	blt	r6,zero,7fa8 <_dtoa_r+0xe7c>
    737c:	d9800a15 	stw	r6,40(sp)
    7380:	d8001115 	stw	zero,68(sp)
    7384:	d8c00d17 	ldw	r3,52(sp)
    7388:	1802ff16 	blt	r3,zero,7f88 <_dtoa_r+0xe5c>
    738c:	d9000a17 	ldw	r4,40(sp)
    7390:	d8c00915 	stw	r3,36(sp)
    7394:	d8001015 	stw	zero,64(sp)
    7398:	20c9883a 	add	r4,r4,r3
    739c:	d9000a15 	stw	r4,40(sp)
    73a0:	d9001717 	ldw	r4,92(sp)
    73a4:	00800244 	movi	r2,9
    73a8:	11004636 	bltu	r2,r4,74c4 <_dtoa_r+0x398>
    73ac:	00800144 	movi	r2,5
    73b0:	11020416 	blt	r2,r4,7bc4 <_dtoa_r+0xa98>
    73b4:	04400044 	movi	r17,1
    73b8:	d8c01717 	ldw	r3,92(sp)
    73bc:	00800144 	movi	r2,5
    73c0:	10c1ed36 	bltu	r2,r3,7b78 <_dtoa_r+0xa4c>
    73c4:	18c5883a 	add	r2,r3,r3
    73c8:	1085883a 	add	r2,r2,r2
    73cc:	00c00034 	movhi	r3,0
    73d0:	18dcf804 	addi	r3,r3,29664
    73d4:	10c5883a 	add	r2,r2,r3
    73d8:	11000017 	ldw	r4,0(r2)
    73dc:	2000683a 	jmp	r4
    73e0:	000074cc 	andi	zero,zero,467
    73e4:	000074cc 	andi	zero,zero,467
    73e8:	00007ecc 	andi	zero,zero,507
    73ec:	00007ea4 	muli	zero,zero,506
    73f0:	00007ee8 	cmpgeui	zero,zero,507
    73f4:	00007ef4 	movhi	zero,507
    73f8:	d9002717 	ldw	r4,156(sp)
    73fc:	0089c3c4 	movi	r2,9999
    7400:	20800015 	stw	r2,0(r4)
    7404:	a0001026 	beq	r20,zero,7448 <_dtoa_r+0x31c>
    7408:	00c00074 	movhi	r3,1
    740c:	18cfa204 	addi	r3,r3,16008
    7410:	d9802917 	ldw	r6,164(sp)
    7414:	303f7926 	beq	r6,zero,71fc <_dtoa_r+0xd0>
    7418:	188000c7 	ldb	r2,3(r3)
    741c:	190000c4 	addi	r4,r3,3
    7420:	1000101e 	bne	r2,zero,7464 <_dtoa_r+0x338>
    7424:	d8802917 	ldw	r2,164(sp)
    7428:	11000015 	stw	r4,0(r2)
    742c:	003f7306 	br	71fc <_dtoa_r+0xd0>
    7430:	00a00034 	movhi	r2,32768
    7434:	10bfffc4 	addi	r2,r2,-1
    7438:	00c00044 	movi	r3,1
    743c:	88aa703a 	and	r21,r17,r2
    7440:	90c00015 	stw	r3,0(r18)
    7444:	003f5806 	br	71a8 <_dtoa_r+0x7c>
    7448:	00800434 	movhi	r2,16
    744c:	10bfffc4 	addi	r2,r2,-1
    7450:	a884703a 	and	r2,r21,r2
    7454:	103fec1e 	bne	r2,zero,7408 <_dtoa_r+0x2dc>
    7458:	00c00074 	movhi	r3,1
    745c:	18cf9f04 	addi	r3,r3,15996
    7460:	003feb06 	br	7410 <_dtoa_r+0x2e4>
    7464:	d8802917 	ldw	r2,164(sp)
    7468:	19000204 	addi	r4,r3,8
    746c:	11000015 	stw	r4,0(r2)
    7470:	003f6206 	br	71fc <_dtoa_r+0xd0>
    7474:	ddc00117 	ldw	r23,4(sp)
    7478:	d8800217 	ldw	r2,8(sp)
    747c:	01000804 	movi	r4,32
    7480:	b8c10c84 	addi	r3,r23,1074
    7484:	18a3883a 	add	r17,r3,r2
    7488:	2441b80e 	bge	r4,r17,7b6c <_dtoa_r+0xa40>
    748c:	00c01004 	movi	r3,64
    7490:	1c47c83a 	sub	r3,r3,r17
    7494:	88bff804 	addi	r2,r17,-32
    7498:	a8c6983a 	sll	r3,r21,r3
    749c:	a084d83a 	srl	r2,r20,r2
    74a0:	1888b03a 	or	r4,r3,r2
    74a4:	000f8a40 	call	f8a4 <__floatunsidf>
    74a8:	1011883a 	mov	r8,r2
    74ac:	00bf8434 	movhi	r2,65040
    74b0:	01000044 	movi	r4,1
    74b4:	10d3883a 	add	r9,r2,r3
    74b8:	8dbef344 	addi	r22,r17,-1075
    74bc:	d9000815 	stw	r4,32(sp)
    74c0:	003f6f06 	br	7280 <_dtoa_r+0x154>
    74c4:	d8001715 	stw	zero,92(sp)
    74c8:	04400044 	movi	r17,1
    74cc:	00bfffc4 	movi	r2,-1
    74d0:	00c00044 	movi	r3,1
    74d4:	d8800e15 	stw	r2,56(sp)
    74d8:	d8002615 	stw	zero,152(sp)
    74dc:	d8800f15 	stw	r2,60(sp)
    74e0:	d8c00b15 	stw	r3,44(sp)
    74e4:	1021883a 	mov	r16,r2
    74e8:	d8801617 	ldw	r2,88(sp)
    74ec:	10001115 	stw	zero,68(r2)
    74f0:	d8801617 	ldw	r2,88(sp)
    74f4:	11401117 	ldw	r5,68(r2)
    74f8:	1009883a 	mov	r4,r2
    74fc:	00096380 	call	9638 <_Balloc>
    7500:	d8c01617 	ldw	r3,88(sp)
    7504:	d8800515 	stw	r2,20(sp)
    7508:	18801015 	stw	r2,64(r3)
    750c:	00800384 	movi	r2,14
    7510:	14006836 	bltu	r2,r16,76b4 <_dtoa_r+0x588>
    7514:	8805003a 	cmpeq	r2,r17,zero
    7518:	1000661e 	bne	r2,zero,76b4 <_dtoa_r+0x588>
    751c:	d9000d17 	ldw	r4,52(sp)
    7520:	0102300e 	bge	zero,r4,7de4 <_dtoa_r+0xcb8>
    7524:	208003cc 	andi	r2,r4,15
    7528:	100490fa 	slli	r2,r2,3
    752c:	2025d13a 	srai	r18,r4,4
    7530:	00c00074 	movhi	r3,1
    7534:	18cfb304 	addi	r3,r3,16076
    7538:	10c5883a 	add	r2,r2,r3
    753c:	90c0040c 	andi	r3,r18,16
    7540:	14000017 	ldw	r16,0(r2)
    7544:	14400117 	ldw	r17,4(r2)
    7548:	18036a1e 	bne	r3,zero,82f4 <_dtoa_r+0x11c8>
    754c:	05800084 	movi	r22,2
    7550:	90001026 	beq	r18,zero,7594 <_dtoa_r+0x468>
    7554:	04c00074 	movhi	r19,1
    7558:	9ccfe504 	addi	r19,r19,16276
    755c:	9080004c 	andi	r2,r18,1
    7560:	1005003a 	cmpeq	r2,r2,zero
    7564:	1000081e 	bne	r2,zero,7588 <_dtoa_r+0x45c>
    7568:	99800017 	ldw	r6,0(r19)
    756c:	99c00117 	ldw	r7,4(r19)
    7570:	880b883a 	mov	r5,r17
    7574:	8009883a 	mov	r4,r16
    7578:	000ed140 	call	ed14 <__muldf3>
    757c:	1021883a 	mov	r16,r2
    7580:	b5800044 	addi	r22,r22,1
    7584:	1823883a 	mov	r17,r3
    7588:	9025d07a 	srai	r18,r18,1
    758c:	9cc00204 	addi	r19,r19,8
    7590:	903ff21e 	bne	r18,zero,755c <_dtoa_r+0x430>
    7594:	a80b883a 	mov	r5,r21
    7598:	a009883a 	mov	r4,r20
    759c:	880f883a 	mov	r7,r17
    75a0:	800d883a 	mov	r6,r16
    75a4:	000f0d80 	call	f0d8 <__divdf3>
    75a8:	1029883a 	mov	r20,r2
    75ac:	182b883a 	mov	r21,r3
    75b0:	d8c00c17 	ldw	r3,48(sp)
    75b4:	1805003a 	cmpeq	r2,r3,zero
    75b8:	1000081e 	bne	r2,zero,75dc <_dtoa_r+0x4b0>
    75bc:	0005883a 	mov	r2,zero
    75c0:	00cffc34 	movhi	r3,16368
    75c4:	180f883a 	mov	r7,r3
    75c8:	a009883a 	mov	r4,r20
    75cc:	a80b883a 	mov	r5,r21
    75d0:	100d883a 	mov	r6,r2
    75d4:	000f5500 	call	f550 <__ltdf2>
    75d8:	1003fe16 	blt	r2,zero,85d4 <_dtoa_r+0x14a8>
    75dc:	b009883a 	mov	r4,r22
    75e0:	000f6600 	call	f660 <__floatsidf>
    75e4:	180b883a 	mov	r5,r3
    75e8:	1009883a 	mov	r4,r2
    75ec:	a00d883a 	mov	r6,r20
    75f0:	a80f883a 	mov	r7,r21
    75f4:	000ed140 	call	ed14 <__muldf3>
    75f8:	0011883a 	mov	r8,zero
    75fc:	02500734 	movhi	r9,16412
    7600:	1009883a 	mov	r4,r2
    7604:	180b883a 	mov	r5,r3
    7608:	480f883a 	mov	r7,r9
    760c:	400d883a 	mov	r6,r8
    7610:	000eca00 	call	eca0 <__adddf3>
    7614:	d9000f17 	ldw	r4,60(sp)
    7618:	102d883a 	mov	r22,r2
    761c:	00bf3034 	movhi	r2,64704
    7620:	18b9883a 	add	fp,r3,r2
    7624:	e02f883a 	mov	r23,fp
    7628:	20028f1e 	bne	r4,zero,8068 <_dtoa_r+0xf3c>
    762c:	0005883a 	mov	r2,zero
    7630:	00d00534 	movhi	r3,16404
    7634:	a009883a 	mov	r4,r20
    7638:	a80b883a 	mov	r5,r21
    763c:	180f883a 	mov	r7,r3
    7640:	100d883a 	mov	r6,r2
    7644:	000ec200 	call	ec20 <__subdf3>
    7648:	1009883a 	mov	r4,r2
    764c:	e00f883a 	mov	r7,fp
    7650:	180b883a 	mov	r5,r3
    7654:	b00d883a 	mov	r6,r22
    7658:	1025883a 	mov	r18,r2
    765c:	1827883a 	mov	r19,r3
    7660:	000f4400 	call	f440 <__gtdf2>
    7664:	00834f16 	blt	zero,r2,83a4 <_dtoa_r+0x1278>
    7668:	e0e0003c 	xorhi	r3,fp,32768
    766c:	9009883a 	mov	r4,r18
    7670:	980b883a 	mov	r5,r19
    7674:	180f883a 	mov	r7,r3
    7678:	b00d883a 	mov	r6,r22
    767c:	000f5500 	call	f550 <__ltdf2>
    7680:	1000080e 	bge	r2,zero,76a4 <_dtoa_r+0x578>
    7684:	0027883a 	mov	r19,zero
    7688:	0025883a 	mov	r18,zero
    768c:	d8802617 	ldw	r2,152(sp)
    7690:	df000517 	ldw	fp,20(sp)
    7694:	d8000615 	stw	zero,24(sp)
    7698:	0084303a 	nor	r2,zero,r2
    769c:	d8800d15 	stw	r2,52(sp)
    76a0:	00019b06 	br	7d10 <_dtoa_r+0xbe4>
    76a4:	d9801217 	ldw	r6,72(sp)
    76a8:	d8801317 	ldw	r2,76(sp)
    76ac:	3029883a 	mov	r20,r6
    76b0:	102b883a 	mov	r21,r2
    76b4:	d8c00217 	ldw	r3,8(sp)
    76b8:	18008516 	blt	r3,zero,78d0 <_dtoa_r+0x7a4>
    76bc:	d9000d17 	ldw	r4,52(sp)
    76c0:	00800384 	movi	r2,14
    76c4:	11008216 	blt	r2,r4,78d0 <_dtoa_r+0x7a4>
    76c8:	200490fa 	slli	r2,r4,3
    76cc:	d9802617 	ldw	r6,152(sp)
    76d0:	00c00074 	movhi	r3,1
    76d4:	18cfb304 	addi	r3,r3,16076
    76d8:	10c5883a 	add	r2,r2,r3
    76dc:	14800017 	ldw	r18,0(r2)
    76e0:	14c00117 	ldw	r19,4(r2)
    76e4:	30031e16 	blt	r6,zero,8360 <_dtoa_r+0x1234>
    76e8:	d9000517 	ldw	r4,20(sp)
    76ec:	d8c00f17 	ldw	r3,60(sp)
    76f0:	a823883a 	mov	r17,r21
    76f4:	a021883a 	mov	r16,r20
    76f8:	192b883a 	add	r21,r3,r4
    76fc:	2039883a 	mov	fp,r4
    7700:	00000f06 	br	7740 <_dtoa_r+0x614>
    7704:	0005883a 	mov	r2,zero
    7708:	00d00934 	movhi	r3,16420
    770c:	5009883a 	mov	r4,r10
    7710:	580b883a 	mov	r5,r11
    7714:	180f883a 	mov	r7,r3
    7718:	100d883a 	mov	r6,r2
    771c:	000ed140 	call	ed14 <__muldf3>
    7720:	180b883a 	mov	r5,r3
    7724:	000d883a 	mov	r6,zero
    7728:	000f883a 	mov	r7,zero
    772c:	1009883a 	mov	r4,r2
    7730:	1021883a 	mov	r16,r2
    7734:	1823883a 	mov	r17,r3
    7738:	000f3b80 	call	f3b8 <__nedf2>
    773c:	10004526 	beq	r2,zero,7854 <_dtoa_r+0x728>
    7740:	900d883a 	mov	r6,r18
    7744:	980f883a 	mov	r7,r19
    7748:	8009883a 	mov	r4,r16
    774c:	880b883a 	mov	r5,r17
    7750:	000f0d80 	call	f0d8 <__divdf3>
    7754:	180b883a 	mov	r5,r3
    7758:	1009883a 	mov	r4,r2
    775c:	000f7580 	call	f758 <__fixdfsi>
    7760:	1009883a 	mov	r4,r2
    7764:	1029883a 	mov	r20,r2
    7768:	000f6600 	call	f660 <__floatsidf>
    776c:	180f883a 	mov	r7,r3
    7770:	9009883a 	mov	r4,r18
    7774:	980b883a 	mov	r5,r19
    7778:	100d883a 	mov	r6,r2
    777c:	000ed140 	call	ed14 <__muldf3>
    7780:	180f883a 	mov	r7,r3
    7784:	880b883a 	mov	r5,r17
    7788:	8009883a 	mov	r4,r16
    778c:	100d883a 	mov	r6,r2
    7790:	000ec200 	call	ec20 <__subdf3>
    7794:	1015883a 	mov	r10,r2
    7798:	a0800c04 	addi	r2,r20,48
    779c:	e0800005 	stb	r2,0(fp)
    77a0:	e7000044 	addi	fp,fp,1
    77a4:	1817883a 	mov	r11,r3
    77a8:	e57fd61e 	bne	fp,r21,7704 <_dtoa_r+0x5d8>
    77ac:	500d883a 	mov	r6,r10
    77b0:	180f883a 	mov	r7,r3
    77b4:	5009883a 	mov	r4,r10
    77b8:	180b883a 	mov	r5,r3
    77bc:	000eca00 	call	eca0 <__adddf3>
    77c0:	100d883a 	mov	r6,r2
    77c4:	9009883a 	mov	r4,r18
    77c8:	980b883a 	mov	r5,r19
    77cc:	180f883a 	mov	r7,r3
    77d0:	1021883a 	mov	r16,r2
    77d4:	1823883a 	mov	r17,r3
    77d8:	000f5500 	call	f550 <__ltdf2>
    77dc:	10000816 	blt	r2,zero,7800 <_dtoa_r+0x6d4>
    77e0:	980b883a 	mov	r5,r19
    77e4:	800d883a 	mov	r6,r16
    77e8:	880f883a 	mov	r7,r17
    77ec:	9009883a 	mov	r4,r18
    77f0:	000f3300 	call	f330 <__eqdf2>
    77f4:	1000171e 	bne	r2,zero,7854 <_dtoa_r+0x728>
    77f8:	a080004c 	andi	r2,r20,1
    77fc:	10001526 	beq	r2,zero,7854 <_dtoa_r+0x728>
    7800:	d8800d17 	ldw	r2,52(sp)
    7804:	d8800415 	stw	r2,16(sp)
    7808:	e009883a 	mov	r4,fp
    780c:	213fffc4 	addi	r4,r4,-1
    7810:	20c00007 	ldb	r3,0(r4)
    7814:	00800e44 	movi	r2,57
    7818:	1880081e 	bne	r3,r2,783c <_dtoa_r+0x710>
    781c:	d8800517 	ldw	r2,20(sp)
    7820:	113ffa1e 	bne	r2,r4,780c <_dtoa_r+0x6e0>
    7824:	d8c00417 	ldw	r3,16(sp)
    7828:	d9800517 	ldw	r6,20(sp)
    782c:	00800c04 	movi	r2,48
    7830:	18c00044 	addi	r3,r3,1
    7834:	d8c00415 	stw	r3,16(sp)
    7838:	30800005 	stb	r2,0(r6)
    783c:	20800003 	ldbu	r2,0(r4)
    7840:	d8c00417 	ldw	r3,16(sp)
    7844:	27000044 	addi	fp,r4,1
    7848:	10800044 	addi	r2,r2,1
    784c:	d8c00d15 	stw	r3,52(sp)
    7850:	20800005 	stb	r2,0(r4)
    7854:	d9001617 	ldw	r4,88(sp)
    7858:	d9400717 	ldw	r5,28(sp)
    785c:	00090b80 	call	90b8 <_Bfree>
    7860:	e0000005 	stb	zero,0(fp)
    7864:	d9800d17 	ldw	r6,52(sp)
    7868:	d8c02717 	ldw	r3,156(sp)
    786c:	d9002917 	ldw	r4,164(sp)
    7870:	30800044 	addi	r2,r6,1
    7874:	18800015 	stw	r2,0(r3)
    7878:	20029c26 	beq	r4,zero,82ec <_dtoa_r+0x11c0>
    787c:	d8c00517 	ldw	r3,20(sp)
    7880:	27000015 	stw	fp,0(r4)
    7884:	003e5d06 	br	71fc <_dtoa_r+0xd0>
    7888:	d9800d17 	ldw	r6,52(sp)
    788c:	00c00074 	movhi	r3,1
    7890:	18cfb304 	addi	r3,r3,16076
    7894:	d9001217 	ldw	r4,72(sp)
    7898:	300490fa 	slli	r2,r6,3
    789c:	d9401317 	ldw	r5,76(sp)
    78a0:	10c5883a 	add	r2,r2,r3
    78a4:	12000017 	ldw	r8,0(r2)
    78a8:	12400117 	ldw	r9,4(r2)
    78ac:	400d883a 	mov	r6,r8
    78b0:	480f883a 	mov	r7,r9
    78b4:	000f5500 	call	f550 <__ltdf2>
    78b8:	1000030e 	bge	r2,zero,78c8 <_dtoa_r+0x79c>
    78bc:	d8800d17 	ldw	r2,52(sp)
    78c0:	10bfffc4 	addi	r2,r2,-1
    78c4:	d8800d15 	stw	r2,52(sp)
    78c8:	d8000c15 	stw	zero,48(sp)
    78cc:	003ea806 	br	7370 <_dtoa_r+0x244>
    78d0:	d9000b17 	ldw	r4,44(sp)
    78d4:	202cc03a 	cmpne	r22,r4,zero
    78d8:	b000c71e 	bne	r22,zero,7bf8 <_dtoa_r+0xacc>
    78dc:	dc001117 	ldw	r16,68(sp)
    78e0:	dc801017 	ldw	r18,64(sp)
    78e4:	0027883a 	mov	r19,zero
    78e8:	04000b0e 	bge	zero,r16,7918 <_dtoa_r+0x7ec>
    78ec:	d8c00a17 	ldw	r3,40(sp)
    78f0:	00c0090e 	bge	zero,r3,7918 <_dtoa_r+0x7ec>
    78f4:	8005883a 	mov	r2,r16
    78f8:	1c011316 	blt	r3,r16,7d48 <_dtoa_r+0xc1c>
    78fc:	d9000a17 	ldw	r4,40(sp)
    7900:	d9801117 	ldw	r6,68(sp)
    7904:	80a1c83a 	sub	r16,r16,r2
    7908:	2089c83a 	sub	r4,r4,r2
    790c:	308dc83a 	sub	r6,r6,r2
    7910:	d9000a15 	stw	r4,40(sp)
    7914:	d9801115 	stw	r6,68(sp)
    7918:	d8801017 	ldw	r2,64(sp)
    791c:	0080150e 	bge	zero,r2,7974 <_dtoa_r+0x848>
    7920:	d8c00b17 	ldw	r3,44(sp)
    7924:	1805003a 	cmpeq	r2,r3,zero
    7928:	1001c91e 	bne	r2,zero,8050 <_dtoa_r+0xf24>
    792c:	04800e0e 	bge	zero,r18,7968 <_dtoa_r+0x83c>
    7930:	d9001617 	ldw	r4,88(sp)
    7934:	980b883a 	mov	r5,r19
    7938:	900d883a 	mov	r6,r18
    793c:	0009e6c0 	call	9e6c <__pow5mult>
    7940:	d9001617 	ldw	r4,88(sp)
    7944:	d9800717 	ldw	r6,28(sp)
    7948:	100b883a 	mov	r5,r2
    794c:	1027883a 	mov	r19,r2
    7950:	0009b480 	call	9b48 <__multiply>
    7954:	d9001617 	ldw	r4,88(sp)
    7958:	d9400717 	ldw	r5,28(sp)
    795c:	1023883a 	mov	r17,r2
    7960:	00090b80 	call	90b8 <_Bfree>
    7964:	dc400715 	stw	r17,28(sp)
    7968:	d9001017 	ldw	r4,64(sp)
    796c:	248dc83a 	sub	r6,r4,r18
    7970:	30010e1e 	bne	r6,zero,7dac <_dtoa_r+0xc80>
    7974:	d9001617 	ldw	r4,88(sp)
    7978:	04400044 	movi	r17,1
    797c:	880b883a 	mov	r5,r17
    7980:	0009d300 	call	9d30 <__i2b>
    7984:	d9800917 	ldw	r6,36(sp)
    7988:	1025883a 	mov	r18,r2
    798c:	0180040e 	bge	zero,r6,79a0 <_dtoa_r+0x874>
    7990:	d9001617 	ldw	r4,88(sp)
    7994:	100b883a 	mov	r5,r2
    7998:	0009e6c0 	call	9e6c <__pow5mult>
    799c:	1025883a 	mov	r18,r2
    79a0:	d8801717 	ldw	r2,92(sp)
    79a4:	8880f30e 	bge	r17,r2,7d74 <_dtoa_r+0xc48>
    79a8:	0023883a 	mov	r17,zero
    79ac:	d9800917 	ldw	r6,36(sp)
    79b0:	30019e1e 	bne	r6,zero,802c <_dtoa_r+0xf00>
    79b4:	00c00044 	movi	r3,1
    79b8:	d9000a17 	ldw	r4,40(sp)
    79bc:	20c5883a 	add	r2,r4,r3
    79c0:	10c007cc 	andi	r3,r2,31
    79c4:	1800841e 	bne	r3,zero,7bd8 <_dtoa_r+0xaac>
    79c8:	00800704 	movi	r2,28
    79cc:	d9000a17 	ldw	r4,40(sp)
    79d0:	d9801117 	ldw	r6,68(sp)
    79d4:	80a1883a 	add	r16,r16,r2
    79d8:	2089883a 	add	r4,r4,r2
    79dc:	308d883a 	add	r6,r6,r2
    79e0:	d9000a15 	stw	r4,40(sp)
    79e4:	d9801115 	stw	r6,68(sp)
    79e8:	d8801117 	ldw	r2,68(sp)
    79ec:	0080050e 	bge	zero,r2,7a04 <_dtoa_r+0x8d8>
    79f0:	d9400717 	ldw	r5,28(sp)
    79f4:	d9001617 	ldw	r4,88(sp)
    79f8:	100d883a 	mov	r6,r2
    79fc:	00099fc0 	call	99fc <__lshift>
    7a00:	d8800715 	stw	r2,28(sp)
    7a04:	d8c00a17 	ldw	r3,40(sp)
    7a08:	00c0050e 	bge	zero,r3,7a20 <_dtoa_r+0x8f4>
    7a0c:	d9001617 	ldw	r4,88(sp)
    7a10:	900b883a 	mov	r5,r18
    7a14:	180d883a 	mov	r6,r3
    7a18:	00099fc0 	call	99fc <__lshift>
    7a1c:	1025883a 	mov	r18,r2
    7a20:	d9000c17 	ldw	r4,48(sp)
    7a24:	2005003a 	cmpeq	r2,r4,zero
    7a28:	10016f26 	beq	r2,zero,7fe8 <_dtoa_r+0xebc>
    7a2c:	d9000f17 	ldw	r4,60(sp)
    7a30:	0102170e 	bge	zero,r4,8290 <_dtoa_r+0x1164>
    7a34:	d9800b17 	ldw	r6,44(sp)
    7a38:	3005003a 	cmpeq	r2,r6,zero
    7a3c:	1000881e 	bne	r2,zero,7c60 <_dtoa_r+0xb34>
    7a40:	0400050e 	bge	zero,r16,7a58 <_dtoa_r+0x92c>
    7a44:	d9001617 	ldw	r4,88(sp)
    7a48:	980b883a 	mov	r5,r19
    7a4c:	800d883a 	mov	r6,r16
    7a50:	00099fc0 	call	99fc <__lshift>
    7a54:	1027883a 	mov	r19,r2
    7a58:	8804c03a 	cmpne	r2,r17,zero
    7a5c:	1002541e 	bne	r2,zero,83b0 <_dtoa_r+0x1284>
    7a60:	980b883a 	mov	r5,r19
    7a64:	dd800517 	ldw	r22,20(sp)
    7a68:	dcc00615 	stw	r19,24(sp)
    7a6c:	a700004c 	andi	fp,r20,1
    7a70:	2827883a 	mov	r19,r5
    7a74:	d9000717 	ldw	r4,28(sp)
    7a78:	900b883a 	mov	r5,r18
    7a7c:	0006f140 	call	6f14 <quorem>
    7a80:	d9000717 	ldw	r4,28(sp)
    7a84:	d9400617 	ldw	r5,24(sp)
    7a88:	1023883a 	mov	r17,r2
    7a8c:	8dc00c04 	addi	r23,r17,48
    7a90:	00092140 	call	9214 <__mcmp>
    7a94:	d9001617 	ldw	r4,88(sp)
    7a98:	900b883a 	mov	r5,r18
    7a9c:	980d883a 	mov	r6,r19
    7aa0:	1029883a 	mov	r20,r2
    7aa4:	00098700 	call	9870 <__mdiff>
    7aa8:	102b883a 	mov	r21,r2
    7aac:	10800317 	ldw	r2,12(r2)
    7ab0:	1001281e 	bne	r2,zero,7f54 <_dtoa_r+0xe28>
    7ab4:	d9000717 	ldw	r4,28(sp)
    7ab8:	a80b883a 	mov	r5,r21
    7abc:	00092140 	call	9214 <__mcmp>
    7ac0:	d9001617 	ldw	r4,88(sp)
    7ac4:	1021883a 	mov	r16,r2
    7ac8:	a80b883a 	mov	r5,r21
    7acc:	00090b80 	call	90b8 <_Bfree>
    7ad0:	8000041e 	bne	r16,zero,7ae4 <_dtoa_r+0x9b8>
    7ad4:	d8801717 	ldw	r2,92(sp)
    7ad8:	1000021e 	bne	r2,zero,7ae4 <_dtoa_r+0x9b8>
    7adc:	e004c03a 	cmpne	r2,fp,zero
    7ae0:	10011726 	beq	r2,zero,7f40 <_dtoa_r+0xe14>
    7ae4:	a0010616 	blt	r20,zero,7f00 <_dtoa_r+0xdd4>
    7ae8:	a000041e 	bne	r20,zero,7afc <_dtoa_r+0x9d0>
    7aec:	d8c01717 	ldw	r3,92(sp)
    7af0:	1800021e 	bne	r3,zero,7afc <_dtoa_r+0x9d0>
    7af4:	e004c03a 	cmpne	r2,fp,zero
    7af8:	10010126 	beq	r2,zero,7f00 <_dtoa_r+0xdd4>
    7afc:	04023d16 	blt	zero,r16,83f4 <_dtoa_r+0x12c8>
    7b00:	b5c00005 	stb	r23,0(r22)
    7b04:	d9800517 	ldw	r6,20(sp)
    7b08:	d9000f17 	ldw	r4,60(sp)
    7b0c:	b5800044 	addi	r22,r22,1
    7b10:	3105883a 	add	r2,r6,r4
    7b14:	b0806526 	beq	r22,r2,7cac <_dtoa_r+0xb80>
    7b18:	d9400717 	ldw	r5,28(sp)
    7b1c:	d9001617 	ldw	r4,88(sp)
    7b20:	01800284 	movi	r6,10
    7b24:	000f883a 	mov	r7,zero
    7b28:	0009d6c0 	call	9d6c <__multadd>
    7b2c:	d8800715 	stw	r2,28(sp)
    7b30:	d8800617 	ldw	r2,24(sp)
    7b34:	14c10c26 	beq	r2,r19,7f68 <_dtoa_r+0xe3c>
    7b38:	d9400617 	ldw	r5,24(sp)
    7b3c:	d9001617 	ldw	r4,88(sp)
    7b40:	01800284 	movi	r6,10
    7b44:	000f883a 	mov	r7,zero
    7b48:	0009d6c0 	call	9d6c <__multadd>
    7b4c:	d9001617 	ldw	r4,88(sp)
    7b50:	980b883a 	mov	r5,r19
    7b54:	01800284 	movi	r6,10
    7b58:	000f883a 	mov	r7,zero
    7b5c:	d8800615 	stw	r2,24(sp)
    7b60:	0009d6c0 	call	9d6c <__multadd>
    7b64:	1027883a 	mov	r19,r2
    7b68:	003fc206 	br	7a74 <_dtoa_r+0x948>
    7b6c:	2445c83a 	sub	r2,r4,r17
    7b70:	a088983a 	sll	r4,r20,r2
    7b74:	003e4b06 	br	74a4 <_dtoa_r+0x378>
    7b78:	01bfffc4 	movi	r6,-1
    7b7c:	00800044 	movi	r2,1
    7b80:	d9800e15 	stw	r6,56(sp)
    7b84:	d9800f15 	stw	r6,60(sp)
    7b88:	d8800b15 	stw	r2,44(sp)
    7b8c:	d8c01617 	ldw	r3,88(sp)
    7b90:	008005c4 	movi	r2,23
    7b94:	18001115 	stw	zero,68(r3)
    7b98:	1580082e 	bgeu	r2,r22,7bbc <_dtoa_r+0xa90>
    7b9c:	00c00104 	movi	r3,4
    7ba0:	0009883a 	mov	r4,zero
    7ba4:	18c7883a 	add	r3,r3,r3
    7ba8:	18800504 	addi	r2,r3,20
    7bac:	21000044 	addi	r4,r4,1
    7bb0:	b0bffc2e 	bgeu	r22,r2,7ba4 <_dtoa_r+0xa78>
    7bb4:	d9801617 	ldw	r6,88(sp)
    7bb8:	31001115 	stw	r4,68(r6)
    7bbc:	dc000f17 	ldw	r16,60(sp)
    7bc0:	003e4b06 	br	74f0 <_dtoa_r+0x3c4>
    7bc4:	d9801717 	ldw	r6,92(sp)
    7bc8:	0023883a 	mov	r17,zero
    7bcc:	31bfff04 	addi	r6,r6,-4
    7bd0:	d9801715 	stw	r6,92(sp)
    7bd4:	003df806 	br	73b8 <_dtoa_r+0x28c>
    7bd8:	00800804 	movi	r2,32
    7bdc:	10c9c83a 	sub	r4,r2,r3
    7be0:	00c00104 	movi	r3,4
    7be4:	19005a16 	blt	r3,r4,7d50 <_dtoa_r+0xc24>
    7be8:	008000c4 	movi	r2,3
    7bec:	113f7e16 	blt	r2,r4,79e8 <_dtoa_r+0x8bc>
    7bf0:	20800704 	addi	r2,r4,28
    7bf4:	003f7506 	br	79cc <_dtoa_r+0x8a0>
    7bf8:	d9801717 	ldw	r6,92(sp)
    7bfc:	00800044 	movi	r2,1
    7c00:	1180a10e 	bge	r2,r6,7e88 <_dtoa_r+0xd5c>
    7c04:	d9800f17 	ldw	r6,60(sp)
    7c08:	d8c01017 	ldw	r3,64(sp)
    7c0c:	30bfffc4 	addi	r2,r6,-1
    7c10:	1881c616 	blt	r3,r2,832c <_dtoa_r+0x1200>
    7c14:	18a5c83a 	sub	r18,r3,r2
    7c18:	d8800f17 	ldw	r2,60(sp)
    7c1c:	10026216 	blt	r2,zero,85a8 <_dtoa_r+0x147c>
    7c20:	dc001117 	ldw	r16,68(sp)
    7c24:	1007883a 	mov	r3,r2
    7c28:	d9800a17 	ldw	r6,40(sp)
    7c2c:	d8801117 	ldw	r2,68(sp)
    7c30:	d9001617 	ldw	r4,88(sp)
    7c34:	30cd883a 	add	r6,r6,r3
    7c38:	10c5883a 	add	r2,r2,r3
    7c3c:	01400044 	movi	r5,1
    7c40:	d9800a15 	stw	r6,40(sp)
    7c44:	d8801115 	stw	r2,68(sp)
    7c48:	0009d300 	call	9d30 <__i2b>
    7c4c:	1027883a 	mov	r19,r2
    7c50:	003f2506 	br	78e8 <_dtoa_r+0x7bc>
    7c54:	00c00074 	movhi	r3,1
    7c58:	18ceeb04 	addi	r3,r3,15276
    7c5c:	003d6706 	br	71fc <_dtoa_r+0xd0>
    7c60:	dd800517 	ldw	r22,20(sp)
    7c64:	04000044 	movi	r16,1
    7c68:	00000706 	br	7c88 <_dtoa_r+0xb5c>
    7c6c:	d9400717 	ldw	r5,28(sp)
    7c70:	d9001617 	ldw	r4,88(sp)
    7c74:	01800284 	movi	r6,10
    7c78:	000f883a 	mov	r7,zero
    7c7c:	0009d6c0 	call	9d6c <__multadd>
    7c80:	d8800715 	stw	r2,28(sp)
    7c84:	84000044 	addi	r16,r16,1
    7c88:	d9000717 	ldw	r4,28(sp)
    7c8c:	900b883a 	mov	r5,r18
    7c90:	0006f140 	call	6f14 <quorem>
    7c94:	15c00c04 	addi	r23,r2,48
    7c98:	b5c00005 	stb	r23,0(r22)
    7c9c:	d8c00f17 	ldw	r3,60(sp)
    7ca0:	b5800044 	addi	r22,r22,1
    7ca4:	80fff116 	blt	r16,r3,7c6c <_dtoa_r+0xb40>
    7ca8:	d8000615 	stw	zero,24(sp)
    7cac:	d9400717 	ldw	r5,28(sp)
    7cb0:	d9001617 	ldw	r4,88(sp)
    7cb4:	01800044 	movi	r6,1
    7cb8:	00099fc0 	call	99fc <__lshift>
    7cbc:	1009883a 	mov	r4,r2
    7cc0:	900b883a 	mov	r5,r18
    7cc4:	d8800715 	stw	r2,28(sp)
    7cc8:	00092140 	call	9214 <__mcmp>
    7ccc:	00803c0e 	bge	zero,r2,7dc0 <_dtoa_r+0xc94>
    7cd0:	b009883a 	mov	r4,r22
    7cd4:	213fffc4 	addi	r4,r4,-1
    7cd8:	21400003 	ldbu	r5,0(r4)
    7cdc:	00800e44 	movi	r2,57
    7ce0:	28c03fcc 	andi	r3,r5,255
    7ce4:	18c0201c 	xori	r3,r3,128
    7ce8:	18ffe004 	addi	r3,r3,-128
    7cec:	1881981e 	bne	r3,r2,8350 <_dtoa_r+0x1224>
    7cf0:	d9800517 	ldw	r6,20(sp)
    7cf4:	21bff71e 	bne	r4,r6,7cd4 <_dtoa_r+0xba8>
    7cf8:	d8800d17 	ldw	r2,52(sp)
    7cfc:	37000044 	addi	fp,r6,1
    7d00:	10800044 	addi	r2,r2,1
    7d04:	d8800d15 	stw	r2,52(sp)
    7d08:	00800c44 	movi	r2,49
    7d0c:	30800005 	stb	r2,0(r6)
    7d10:	d9001617 	ldw	r4,88(sp)
    7d14:	900b883a 	mov	r5,r18
    7d18:	00090b80 	call	90b8 <_Bfree>
    7d1c:	983ecd26 	beq	r19,zero,7854 <_dtoa_r+0x728>
    7d20:	d8c00617 	ldw	r3,24(sp)
    7d24:	18000426 	beq	r3,zero,7d38 <_dtoa_r+0xc0c>
    7d28:	1cc00326 	beq	r3,r19,7d38 <_dtoa_r+0xc0c>
    7d2c:	d9001617 	ldw	r4,88(sp)
    7d30:	180b883a 	mov	r5,r3
    7d34:	00090b80 	call	90b8 <_Bfree>
    7d38:	d9001617 	ldw	r4,88(sp)
    7d3c:	980b883a 	mov	r5,r19
    7d40:	00090b80 	call	90b8 <_Bfree>
    7d44:	003ec306 	br	7854 <_dtoa_r+0x728>
    7d48:	1805883a 	mov	r2,r3
    7d4c:	003eeb06 	br	78fc <_dtoa_r+0x7d0>
    7d50:	d9800a17 	ldw	r6,40(sp)
    7d54:	d8c01117 	ldw	r3,68(sp)
    7d58:	20bfff04 	addi	r2,r4,-4
    7d5c:	308d883a 	add	r6,r6,r2
    7d60:	1887883a 	add	r3,r3,r2
    7d64:	80a1883a 	add	r16,r16,r2
    7d68:	d9800a15 	stw	r6,40(sp)
    7d6c:	d8c01115 	stw	r3,68(sp)
    7d70:	003f1d06 	br	79e8 <_dtoa_r+0x8bc>
    7d74:	a03f0c1e 	bne	r20,zero,79a8 <_dtoa_r+0x87c>
    7d78:	00800434 	movhi	r2,16
    7d7c:	10bfffc4 	addi	r2,r2,-1
    7d80:	a884703a 	and	r2,r21,r2
    7d84:	103f081e 	bne	r2,zero,79a8 <_dtoa_r+0x87c>
    7d88:	a89ffc2c 	andhi	r2,r21,32752
    7d8c:	103f0626 	beq	r2,zero,79a8 <_dtoa_r+0x87c>
    7d90:	d8c01117 	ldw	r3,68(sp)
    7d94:	d9000a17 	ldw	r4,40(sp)
    7d98:	18c00044 	addi	r3,r3,1
    7d9c:	21000044 	addi	r4,r4,1
    7da0:	d8c01115 	stw	r3,68(sp)
    7da4:	d9000a15 	stw	r4,40(sp)
    7da8:	003f0006 	br	79ac <_dtoa_r+0x880>
    7dac:	d9400717 	ldw	r5,28(sp)
    7db0:	d9001617 	ldw	r4,88(sp)
    7db4:	0009e6c0 	call	9e6c <__pow5mult>
    7db8:	d8800715 	stw	r2,28(sp)
    7dbc:	003eed06 	br	7974 <_dtoa_r+0x848>
    7dc0:	1000021e 	bne	r2,zero,7dcc <_dtoa_r+0xca0>
    7dc4:	b880004c 	andi	r2,r23,1
    7dc8:	103fc11e 	bne	r2,zero,7cd0 <_dtoa_r+0xba4>
    7dcc:	b5bfffc4 	addi	r22,r22,-1
    7dd0:	b0c00007 	ldb	r3,0(r22)
    7dd4:	00800c04 	movi	r2,48
    7dd8:	18bffc26 	beq	r3,r2,7dcc <_dtoa_r+0xca0>
    7ddc:	b7000044 	addi	fp,r22,1
    7de0:	003fcb06 	br	7d10 <_dtoa_r+0xbe4>
    7de4:	d9800d17 	ldw	r6,52(sp)
    7de8:	018fc83a 	sub	r7,zero,r6
    7dec:	3801f726 	beq	r7,zero,85cc <_dtoa_r+0x14a0>
    7df0:	398003cc 	andi	r6,r7,15
    7df4:	300c90fa 	slli	r6,r6,3
    7df8:	01400074 	movhi	r5,1
    7dfc:	294fb304 	addi	r5,r5,16076
    7e00:	d9001217 	ldw	r4,72(sp)
    7e04:	314d883a 	add	r6,r6,r5
    7e08:	30c00117 	ldw	r3,4(r6)
    7e0c:	30800017 	ldw	r2,0(r6)
    7e10:	d9401317 	ldw	r5,76(sp)
    7e14:	3821d13a 	srai	r16,r7,4
    7e18:	100d883a 	mov	r6,r2
    7e1c:	180f883a 	mov	r7,r3
    7e20:	000ed140 	call	ed14 <__muldf3>
    7e24:	1011883a 	mov	r8,r2
    7e28:	1813883a 	mov	r9,r3
    7e2c:	1029883a 	mov	r20,r2
    7e30:	182b883a 	mov	r21,r3
    7e34:	8001e526 	beq	r16,zero,85cc <_dtoa_r+0x14a0>
    7e38:	05800084 	movi	r22,2
    7e3c:	04400074 	movhi	r17,1
    7e40:	8c4fe504 	addi	r17,r17,16276
    7e44:	8080004c 	andi	r2,r16,1
    7e48:	1005003a 	cmpeq	r2,r2,zero
    7e4c:	1000081e 	bne	r2,zero,7e70 <_dtoa_r+0xd44>
    7e50:	89800017 	ldw	r6,0(r17)
    7e54:	89c00117 	ldw	r7,4(r17)
    7e58:	480b883a 	mov	r5,r9
    7e5c:	4009883a 	mov	r4,r8
    7e60:	000ed140 	call	ed14 <__muldf3>
    7e64:	1011883a 	mov	r8,r2
    7e68:	b5800044 	addi	r22,r22,1
    7e6c:	1813883a 	mov	r9,r3
    7e70:	8021d07a 	srai	r16,r16,1
    7e74:	8c400204 	addi	r17,r17,8
    7e78:	803ff21e 	bne	r16,zero,7e44 <_dtoa_r+0xd18>
    7e7c:	4029883a 	mov	r20,r8
    7e80:	482b883a 	mov	r21,r9
    7e84:	003dca06 	br	75b0 <_dtoa_r+0x484>
    7e88:	d9000817 	ldw	r4,32(sp)
    7e8c:	2005003a 	cmpeq	r2,r4,zero
    7e90:	1001f61e 	bne	r2,zero,866c <_dtoa_r+0x1540>
    7e94:	dc001117 	ldw	r16,68(sp)
    7e98:	dc801017 	ldw	r18,64(sp)
    7e9c:	18c10cc4 	addi	r3,r3,1075
    7ea0:	003f6106 	br	7c28 <_dtoa_r+0xafc>
    7ea4:	d8000b15 	stw	zero,44(sp)
    7ea8:	d9802617 	ldw	r6,152(sp)
    7eac:	d8c00d17 	ldw	r3,52(sp)
    7eb0:	30800044 	addi	r2,r6,1
    7eb4:	18ad883a 	add	r22,r3,r2
    7eb8:	b13fffc4 	addi	r4,r22,-1
    7ebc:	d9000e15 	stw	r4,56(sp)
    7ec0:	0581f60e 	bge	zero,r22,869c <_dtoa_r+0x1570>
    7ec4:	dd800f15 	stw	r22,60(sp)
    7ec8:	003f3006 	br	7b8c <_dtoa_r+0xa60>
    7ecc:	d8000b15 	stw	zero,44(sp)
    7ed0:	d9002617 	ldw	r4,152(sp)
    7ed4:	0101eb0e 	bge	zero,r4,8684 <_dtoa_r+0x1558>
    7ed8:	202d883a 	mov	r22,r4
    7edc:	d9000e15 	stw	r4,56(sp)
    7ee0:	d9000f15 	stw	r4,60(sp)
    7ee4:	003f2906 	br	7b8c <_dtoa_r+0xa60>
    7ee8:	01800044 	movi	r6,1
    7eec:	d9800b15 	stw	r6,44(sp)
    7ef0:	003ff706 	br	7ed0 <_dtoa_r+0xda4>
    7ef4:	01000044 	movi	r4,1
    7ef8:	d9000b15 	stw	r4,44(sp)
    7efc:	003fea06 	br	7ea8 <_dtoa_r+0xd7c>
    7f00:	04000c0e 	bge	zero,r16,7f34 <_dtoa_r+0xe08>
    7f04:	d9400717 	ldw	r5,28(sp)
    7f08:	d9001617 	ldw	r4,88(sp)
    7f0c:	01800044 	movi	r6,1
    7f10:	00099fc0 	call	99fc <__lshift>
    7f14:	1009883a 	mov	r4,r2
    7f18:	900b883a 	mov	r5,r18
    7f1c:	d8800715 	stw	r2,28(sp)
    7f20:	00092140 	call	9214 <__mcmp>
    7f24:	0081e00e 	bge	zero,r2,86a8 <_dtoa_r+0x157c>
    7f28:	bdc00044 	addi	r23,r23,1
    7f2c:	00800e84 	movi	r2,58
    7f30:	b881a226 	beq	r23,r2,85bc <_dtoa_r+0x1490>
    7f34:	b7000044 	addi	fp,r22,1
    7f38:	b5c00005 	stb	r23,0(r22)
    7f3c:	003f7406 	br	7d10 <_dtoa_r+0xbe4>
    7f40:	00800e44 	movi	r2,57
    7f44:	b8819d26 	beq	r23,r2,85bc <_dtoa_r+0x1490>
    7f48:	053ffa0e 	bge	zero,r20,7f34 <_dtoa_r+0xe08>
    7f4c:	8dc00c44 	addi	r23,r17,49
    7f50:	003ff806 	br	7f34 <_dtoa_r+0xe08>
    7f54:	d9001617 	ldw	r4,88(sp)
    7f58:	a80b883a 	mov	r5,r21
    7f5c:	04000044 	movi	r16,1
    7f60:	00090b80 	call	90b8 <_Bfree>
    7f64:	003edf06 	br	7ae4 <_dtoa_r+0x9b8>
    7f68:	d9001617 	ldw	r4,88(sp)
    7f6c:	980b883a 	mov	r5,r19
    7f70:	01800284 	movi	r6,10
    7f74:	000f883a 	mov	r7,zero
    7f78:	0009d6c0 	call	9d6c <__multadd>
    7f7c:	1027883a 	mov	r19,r2
    7f80:	d8800615 	stw	r2,24(sp)
    7f84:	003ebb06 	br	7a74 <_dtoa_r+0x948>
    7f88:	d9801117 	ldw	r6,68(sp)
    7f8c:	d8800d17 	ldw	r2,52(sp)
    7f90:	d8000915 	stw	zero,36(sp)
    7f94:	308dc83a 	sub	r6,r6,r2
    7f98:	0087c83a 	sub	r3,zero,r2
    7f9c:	d9801115 	stw	r6,68(sp)
    7fa0:	d8c01015 	stw	r3,64(sp)
    7fa4:	003cfe06 	br	73a0 <_dtoa_r+0x274>
    7fa8:	018dc83a 	sub	r6,zero,r6
    7fac:	d9801115 	stw	r6,68(sp)
    7fb0:	d8000a15 	stw	zero,40(sp)
    7fb4:	003cf306 	br	7384 <_dtoa_r+0x258>
    7fb8:	d9000d17 	ldw	r4,52(sp)
    7fbc:	000f6600 	call	f660 <__floatsidf>
    7fc0:	880b883a 	mov	r5,r17
    7fc4:	8009883a 	mov	r4,r16
    7fc8:	180f883a 	mov	r7,r3
    7fcc:	100d883a 	mov	r6,r2
    7fd0:	000f3b80 	call	f3b8 <__nedf2>
    7fd4:	103ce126 	beq	r2,zero,735c <_dtoa_r+0x230>
    7fd8:	d9800d17 	ldw	r6,52(sp)
    7fdc:	31bfffc4 	addi	r6,r6,-1
    7fe0:	d9800d15 	stw	r6,52(sp)
    7fe4:	003cdd06 	br	735c <_dtoa_r+0x230>
    7fe8:	d9000717 	ldw	r4,28(sp)
    7fec:	900b883a 	mov	r5,r18
    7ff0:	00092140 	call	9214 <__mcmp>
    7ff4:	103e8d0e 	bge	r2,zero,7a2c <_dtoa_r+0x900>
    7ff8:	d9400717 	ldw	r5,28(sp)
    7ffc:	d9001617 	ldw	r4,88(sp)
    8000:	01800284 	movi	r6,10
    8004:	000f883a 	mov	r7,zero
    8008:	0009d6c0 	call	9d6c <__multadd>
    800c:	d9800d17 	ldw	r6,52(sp)
    8010:	d8800715 	stw	r2,28(sp)
    8014:	31bfffc4 	addi	r6,r6,-1
    8018:	d9800d15 	stw	r6,52(sp)
    801c:	b001a71e 	bne	r22,zero,86bc <_dtoa_r+0x1590>
    8020:	d8800e17 	ldw	r2,56(sp)
    8024:	d8800f15 	stw	r2,60(sp)
    8028:	003e8006 	br	7a2c <_dtoa_r+0x900>
    802c:	90800417 	ldw	r2,16(r18)
    8030:	1085883a 	add	r2,r2,r2
    8034:	1085883a 	add	r2,r2,r2
    8038:	1485883a 	add	r2,r2,r18
    803c:	11000417 	ldw	r4,16(r2)
    8040:	00090e00 	call	90e0 <__hi0bits>
    8044:	00c00804 	movi	r3,32
    8048:	1887c83a 	sub	r3,r3,r2
    804c:	003e5a06 	br	79b8 <_dtoa_r+0x88c>
    8050:	d9400717 	ldw	r5,28(sp)
    8054:	d9801017 	ldw	r6,64(sp)
    8058:	d9001617 	ldw	r4,88(sp)
    805c:	0009e6c0 	call	9e6c <__pow5mult>
    8060:	d8800715 	stw	r2,28(sp)
    8064:	003e4306 	br	7974 <_dtoa_r+0x848>
    8068:	d9800f17 	ldw	r6,60(sp)
    806c:	d8800d17 	ldw	r2,52(sp)
    8070:	d9800315 	stw	r6,12(sp)
    8074:	d8800415 	stw	r2,16(sp)
    8078:	d8c00b17 	ldw	r3,44(sp)
    807c:	1805003a 	cmpeq	r2,r3,zero
    8080:	1000e21e 	bne	r2,zero,840c <_dtoa_r+0x12e0>
    8084:	d9000317 	ldw	r4,12(sp)
    8088:	0005883a 	mov	r2,zero
    808c:	00cff834 	movhi	r3,16352
    8090:	200c90fa 	slli	r6,r4,3
    8094:	01000074 	movhi	r4,1
    8098:	210fb304 	addi	r4,r4,16076
    809c:	180b883a 	mov	r5,r3
    80a0:	310d883a 	add	r6,r6,r4
    80a4:	327fff17 	ldw	r9,-4(r6)
    80a8:	323ffe17 	ldw	r8,-8(r6)
    80ac:	1009883a 	mov	r4,r2
    80b0:	480f883a 	mov	r7,r9
    80b4:	400d883a 	mov	r6,r8
    80b8:	000f0d80 	call	f0d8 <__divdf3>
    80bc:	180b883a 	mov	r5,r3
    80c0:	b00d883a 	mov	r6,r22
    80c4:	b80f883a 	mov	r7,r23
    80c8:	1009883a 	mov	r4,r2
    80cc:	000ec200 	call	ec20 <__subdf3>
    80d0:	a80b883a 	mov	r5,r21
    80d4:	a009883a 	mov	r4,r20
    80d8:	d8c01915 	stw	r3,100(sp)
    80dc:	d8801815 	stw	r2,96(sp)
    80e0:	000f7580 	call	f758 <__fixdfsi>
    80e4:	1009883a 	mov	r4,r2
    80e8:	1027883a 	mov	r19,r2
    80ec:	000f6600 	call	f660 <__floatsidf>
    80f0:	a80b883a 	mov	r5,r21
    80f4:	a009883a 	mov	r4,r20
    80f8:	180f883a 	mov	r7,r3
    80fc:	100d883a 	mov	r6,r2
    8100:	000ec200 	call	ec20 <__subdf3>
    8104:	d9801817 	ldw	r6,96(sp)
    8108:	1823883a 	mov	r17,r3
    810c:	d8801415 	stw	r2,80(sp)
    8110:	302d883a 	mov	r22,r6
    8114:	d9800517 	ldw	r6,20(sp)
    8118:	9cc00c04 	addi	r19,r19,48
    811c:	dc401515 	stw	r17,84(sp)
    8120:	d8c01917 	ldw	r3,100(sp)
    8124:	34c00005 	stb	r19,0(r6)
    8128:	d8800517 	ldw	r2,20(sp)
    812c:	d9401917 	ldw	r5,100(sp)
    8130:	d9801417 	ldw	r6,80(sp)
    8134:	b009883a 	mov	r4,r22
    8138:	880f883a 	mov	r7,r17
    813c:	182f883a 	mov	r23,r3
    8140:	17000044 	addi	fp,r2,1
    8144:	000f4400 	call	f440 <__gtdf2>
    8148:	00804e16 	blt	zero,r2,8284 <_dtoa_r+0x1158>
    814c:	d9801417 	ldw	r6,80(sp)
    8150:	0005883a 	mov	r2,zero
    8154:	00cffc34 	movhi	r3,16368
    8158:	180b883a 	mov	r5,r3
    815c:	880f883a 	mov	r7,r17
    8160:	1009883a 	mov	r4,r2
    8164:	000ec200 	call	ec20 <__subdf3>
    8168:	d9401917 	ldw	r5,100(sp)
    816c:	180f883a 	mov	r7,r3
    8170:	b009883a 	mov	r4,r22
    8174:	100d883a 	mov	r6,r2
    8178:	000f4400 	call	f440 <__gtdf2>
    817c:	00bda216 	blt	zero,r2,7808 <_dtoa_r+0x6dc>
    8180:	d8c00317 	ldw	r3,12(sp)
    8184:	00800044 	movi	r2,1
    8188:	10c01216 	blt	r2,r3,81d4 <_dtoa_r+0x10a8>
    818c:	003d4506 	br	76a4 <_dtoa_r+0x578>
    8190:	d9801417 	ldw	r6,80(sp)
    8194:	0005883a 	mov	r2,zero
    8198:	00cffc34 	movhi	r3,16368
    819c:	180b883a 	mov	r5,r3
    81a0:	880f883a 	mov	r7,r17
    81a4:	1009883a 	mov	r4,r2
    81a8:	000ec200 	call	ec20 <__subdf3>
    81ac:	d9c01b17 	ldw	r7,108(sp)
    81b0:	180b883a 	mov	r5,r3
    81b4:	1009883a 	mov	r4,r2
    81b8:	b00d883a 	mov	r6,r22
    81bc:	000f5500 	call	f550 <__ltdf2>
    81c0:	103d9116 	blt	r2,zero,7808 <_dtoa_r+0x6dc>
    81c4:	d9800517 	ldw	r6,20(sp)
    81c8:	d9000317 	ldw	r4,12(sp)
    81cc:	3105883a 	add	r2,r6,r4
    81d0:	e0bd3426 	beq	fp,r2,76a4 <_dtoa_r+0x578>
    81d4:	04500934 	movhi	r17,16420
    81d8:	0021883a 	mov	r16,zero
    81dc:	b80b883a 	mov	r5,r23
    81e0:	b009883a 	mov	r4,r22
    81e4:	800d883a 	mov	r6,r16
    81e8:	880f883a 	mov	r7,r17
    81ec:	000ed140 	call	ed14 <__muldf3>
    81f0:	d9401517 	ldw	r5,84(sp)
    81f4:	d9001417 	ldw	r4,80(sp)
    81f8:	880f883a 	mov	r7,r17
    81fc:	000d883a 	mov	r6,zero
    8200:	d8801a15 	stw	r2,104(sp)
    8204:	d8c01b15 	stw	r3,108(sp)
    8208:	000ed140 	call	ed14 <__muldf3>
    820c:	180b883a 	mov	r5,r3
    8210:	1009883a 	mov	r4,r2
    8214:	1823883a 	mov	r17,r3
    8218:	1021883a 	mov	r16,r2
    821c:	000f7580 	call	f758 <__fixdfsi>
    8220:	1009883a 	mov	r4,r2
    8224:	102b883a 	mov	r21,r2
    8228:	000f6600 	call	f660 <__floatsidf>
    822c:	880b883a 	mov	r5,r17
    8230:	8009883a 	mov	r4,r16
    8234:	180f883a 	mov	r7,r3
    8238:	100d883a 	mov	r6,r2
    823c:	000ec200 	call	ec20 <__subdf3>
    8240:	1021883a 	mov	r16,r2
    8244:	d9001b17 	ldw	r4,108(sp)
    8248:	1823883a 	mov	r17,r3
    824c:	dc001415 	stw	r16,80(sp)
    8250:	ad400c04 	addi	r21,r21,48
    8254:	dc401515 	stw	r17,84(sp)
    8258:	d8801a17 	ldw	r2,104(sp)
    825c:	e5400005 	stb	r21,0(fp)
    8260:	202f883a 	mov	r23,r4
    8264:	d9c01b17 	ldw	r7,108(sp)
    8268:	d9001417 	ldw	r4,80(sp)
    826c:	880b883a 	mov	r5,r17
    8270:	100d883a 	mov	r6,r2
    8274:	102d883a 	mov	r22,r2
    8278:	e7000044 	addi	fp,fp,1
    827c:	000f5500 	call	f550 <__ltdf2>
    8280:	103fc30e 	bge	r2,zero,8190 <_dtoa_r+0x1064>
    8284:	d9000417 	ldw	r4,16(sp)
    8288:	d9000d15 	stw	r4,52(sp)
    828c:	003d7106 	br	7854 <_dtoa_r+0x728>
    8290:	d9801717 	ldw	r6,92(sp)
    8294:	00800084 	movi	r2,2
    8298:	11bde60e 	bge	r2,r6,7a34 <_dtoa_r+0x908>
    829c:	203cfb1e 	bne	r4,zero,768c <_dtoa_r+0x560>
    82a0:	d9001617 	ldw	r4,88(sp)
    82a4:	900b883a 	mov	r5,r18
    82a8:	01800144 	movi	r6,5
    82ac:	000f883a 	mov	r7,zero
    82b0:	0009d6c0 	call	9d6c <__multadd>
    82b4:	d9000717 	ldw	r4,28(sp)
    82b8:	100b883a 	mov	r5,r2
    82bc:	1025883a 	mov	r18,r2
    82c0:	00092140 	call	9214 <__mcmp>
    82c4:	00bcf10e 	bge	zero,r2,768c <_dtoa_r+0x560>
    82c8:	d8c00d17 	ldw	r3,52(sp)
    82cc:	d9000517 	ldw	r4,20(sp)
    82d0:	d8000615 	stw	zero,24(sp)
    82d4:	18c00044 	addi	r3,r3,1
    82d8:	d8c00d15 	stw	r3,52(sp)
    82dc:	00800c44 	movi	r2,49
    82e0:	27000044 	addi	fp,r4,1
    82e4:	20800005 	stb	r2,0(r4)
    82e8:	003e8906 	br	7d10 <_dtoa_r+0xbe4>
    82ec:	d8c00517 	ldw	r3,20(sp)
    82f0:	003bc206 	br	71fc <_dtoa_r+0xd0>
    82f4:	01800074 	movhi	r6,1
    82f8:	318fe504 	addi	r6,r6,16276
    82fc:	30c00917 	ldw	r3,36(r6)
    8300:	30800817 	ldw	r2,32(r6)
    8304:	d9001217 	ldw	r4,72(sp)
    8308:	d9401317 	ldw	r5,76(sp)
    830c:	180f883a 	mov	r7,r3
    8310:	100d883a 	mov	r6,r2
    8314:	000f0d80 	call	f0d8 <__divdf3>
    8318:	948003cc 	andi	r18,r18,15
    831c:	058000c4 	movi	r22,3
    8320:	1029883a 	mov	r20,r2
    8324:	182b883a 	mov	r21,r3
    8328:	003c8906 	br	7550 <_dtoa_r+0x424>
    832c:	d9001017 	ldw	r4,64(sp)
    8330:	d9800917 	ldw	r6,36(sp)
    8334:	0025883a 	mov	r18,zero
    8338:	1105c83a 	sub	r2,r2,r4
    833c:	2089883a 	add	r4,r4,r2
    8340:	308d883a 	add	r6,r6,r2
    8344:	d9001015 	stw	r4,64(sp)
    8348:	d9800915 	stw	r6,36(sp)
    834c:	003e3206 	br	7c18 <_dtoa_r+0xaec>
    8350:	28800044 	addi	r2,r5,1
    8354:	27000044 	addi	fp,r4,1
    8358:	20800005 	stb	r2,0(r4)
    835c:	003e6c06 	br	7d10 <_dtoa_r+0xbe4>
    8360:	d8800f17 	ldw	r2,60(sp)
    8364:	00bce016 	blt	zero,r2,76e8 <_dtoa_r+0x5bc>
    8368:	d9800f17 	ldw	r6,60(sp)
    836c:	303cc51e 	bne	r6,zero,7684 <_dtoa_r+0x558>
    8370:	0005883a 	mov	r2,zero
    8374:	00d00534 	movhi	r3,16404
    8378:	980b883a 	mov	r5,r19
    837c:	180f883a 	mov	r7,r3
    8380:	9009883a 	mov	r4,r18
    8384:	100d883a 	mov	r6,r2
    8388:	000ed140 	call	ed14 <__muldf3>
    838c:	180b883a 	mov	r5,r3
    8390:	a80f883a 	mov	r7,r21
    8394:	1009883a 	mov	r4,r2
    8398:	a00d883a 	mov	r6,r20
    839c:	000f4c80 	call	f4c8 <__gedf2>
    83a0:	103cb80e 	bge	r2,zero,7684 <_dtoa_r+0x558>
    83a4:	0027883a 	mov	r19,zero
    83a8:	0025883a 	mov	r18,zero
    83ac:	003fc606 	br	82c8 <_dtoa_r+0x119c>
    83b0:	99400117 	ldw	r5,4(r19)
    83b4:	d9001617 	ldw	r4,88(sp)
    83b8:	00096380 	call	9638 <_Balloc>
    83bc:	99800417 	ldw	r6,16(r19)
    83c0:	11000304 	addi	r4,r2,12
    83c4:	99400304 	addi	r5,r19,12
    83c8:	318d883a 	add	r6,r6,r6
    83cc:	318d883a 	add	r6,r6,r6
    83d0:	31800204 	addi	r6,r6,8
    83d4:	1023883a 	mov	r17,r2
    83d8:	0002f540 	call	2f54 <memcpy>
    83dc:	d9001617 	ldw	r4,88(sp)
    83e0:	880b883a 	mov	r5,r17
    83e4:	01800044 	movi	r6,1
    83e8:	00099fc0 	call	99fc <__lshift>
    83ec:	100b883a 	mov	r5,r2
    83f0:	003d9c06 	br	7a64 <_dtoa_r+0x938>
    83f4:	00800e44 	movi	r2,57
    83f8:	b8807026 	beq	r23,r2,85bc <_dtoa_r+0x1490>
    83fc:	b8800044 	addi	r2,r23,1
    8400:	b7000044 	addi	fp,r22,1
    8404:	b0800005 	stb	r2,0(r22)
    8408:	003e4106 	br	7d10 <_dtoa_r+0xbe4>
    840c:	d8800317 	ldw	r2,12(sp)
    8410:	01800074 	movhi	r6,1
    8414:	318fb304 	addi	r6,r6,16076
    8418:	b009883a 	mov	r4,r22
    841c:	100e90fa 	slli	r7,r2,3
    8420:	b80b883a 	mov	r5,r23
    8424:	398f883a 	add	r7,r7,r6
    8428:	38bffe17 	ldw	r2,-8(r7)
    842c:	d9800517 	ldw	r6,20(sp)
    8430:	38ffff17 	ldw	r3,-4(r7)
    8434:	37000044 	addi	fp,r6,1
    8438:	180f883a 	mov	r7,r3
    843c:	100d883a 	mov	r6,r2
    8440:	000ed140 	call	ed14 <__muldf3>
    8444:	a80b883a 	mov	r5,r21
    8448:	a009883a 	mov	r4,r20
    844c:	182f883a 	mov	r23,r3
    8450:	102d883a 	mov	r22,r2
    8454:	000f7580 	call	f758 <__fixdfsi>
    8458:	1009883a 	mov	r4,r2
    845c:	1027883a 	mov	r19,r2
    8460:	000f6600 	call	f660 <__floatsidf>
    8464:	a80b883a 	mov	r5,r21
    8468:	a009883a 	mov	r4,r20
    846c:	180f883a 	mov	r7,r3
    8470:	100d883a 	mov	r6,r2
    8474:	000ec200 	call	ec20 <__subdf3>
    8478:	180b883a 	mov	r5,r3
    847c:	d8c00517 	ldw	r3,20(sp)
    8480:	9cc00c04 	addi	r19,r19,48
    8484:	1009883a 	mov	r4,r2
    8488:	1cc00005 	stb	r19,0(r3)
    848c:	2021883a 	mov	r16,r4
    8490:	d9000317 	ldw	r4,12(sp)
    8494:	00800044 	movi	r2,1
    8498:	2823883a 	mov	r17,r5
    849c:	20802226 	beq	r4,r2,8528 <_dtoa_r+0x13fc>
    84a0:	1029883a 	mov	r20,r2
    84a4:	0005883a 	mov	r2,zero
    84a8:	00d00934 	movhi	r3,16420
    84ac:	180f883a 	mov	r7,r3
    84b0:	100d883a 	mov	r6,r2
    84b4:	880b883a 	mov	r5,r17
    84b8:	8009883a 	mov	r4,r16
    84bc:	000ed140 	call	ed14 <__muldf3>
    84c0:	180b883a 	mov	r5,r3
    84c4:	1009883a 	mov	r4,r2
    84c8:	1823883a 	mov	r17,r3
    84cc:	1021883a 	mov	r16,r2
    84d0:	000f7580 	call	f758 <__fixdfsi>
    84d4:	1009883a 	mov	r4,r2
    84d8:	102b883a 	mov	r21,r2
    84dc:	000f6600 	call	f660 <__floatsidf>
    84e0:	880b883a 	mov	r5,r17
    84e4:	8009883a 	mov	r4,r16
    84e8:	180f883a 	mov	r7,r3
    84ec:	100d883a 	mov	r6,r2
    84f0:	000ec200 	call	ec20 <__subdf3>
    84f4:	180b883a 	mov	r5,r3
    84f8:	d8c00517 	ldw	r3,20(sp)
    84fc:	1009883a 	mov	r4,r2
    8500:	ad400c04 	addi	r21,r21,48
    8504:	1d05883a 	add	r2,r3,r20
    8508:	15400005 	stb	r21,0(r2)
    850c:	2021883a 	mov	r16,r4
    8510:	d9000317 	ldw	r4,12(sp)
    8514:	a5000044 	addi	r20,r20,1
    8518:	2823883a 	mov	r17,r5
    851c:	a13fe11e 	bne	r20,r4,84a4 <_dtoa_r+0x1378>
    8520:	e505883a 	add	r2,fp,r20
    8524:	173fffc4 	addi	fp,r2,-1
    8528:	0025883a 	mov	r18,zero
    852c:	04cff834 	movhi	r19,16352
    8530:	b009883a 	mov	r4,r22
    8534:	b80b883a 	mov	r5,r23
    8538:	900d883a 	mov	r6,r18
    853c:	980f883a 	mov	r7,r19
    8540:	000eca00 	call	eca0 <__adddf3>
    8544:	180b883a 	mov	r5,r3
    8548:	1009883a 	mov	r4,r2
    854c:	800d883a 	mov	r6,r16
    8550:	880f883a 	mov	r7,r17
    8554:	000f5500 	call	f550 <__ltdf2>
    8558:	103cab16 	blt	r2,zero,7808 <_dtoa_r+0x6dc>
    855c:	0009883a 	mov	r4,zero
    8560:	980b883a 	mov	r5,r19
    8564:	b80f883a 	mov	r7,r23
    8568:	b00d883a 	mov	r6,r22
    856c:	000ec200 	call	ec20 <__subdf3>
    8570:	180b883a 	mov	r5,r3
    8574:	880f883a 	mov	r7,r17
    8578:	1009883a 	mov	r4,r2
    857c:	800d883a 	mov	r6,r16
    8580:	000f4400 	call	f440 <__gtdf2>
    8584:	00bc470e 	bge	zero,r2,76a4 <_dtoa_r+0x578>
    8588:	00c00c04 	movi	r3,48
    858c:	e73fffc4 	addi	fp,fp,-1
    8590:	e0800007 	ldb	r2,0(fp)
    8594:	10fffd26 	beq	r2,r3,858c <_dtoa_r+0x1460>
    8598:	d9800417 	ldw	r6,16(sp)
    859c:	e7000044 	addi	fp,fp,1
    85a0:	d9800d15 	stw	r6,52(sp)
    85a4:	003cab06 	br	7854 <_dtoa_r+0x728>
    85a8:	d8c00f17 	ldw	r3,60(sp)
    85ac:	d9001117 	ldw	r4,68(sp)
    85b0:	20e1c83a 	sub	r16,r4,r3
    85b4:	0007883a 	mov	r3,zero
    85b8:	003d9b06 	br	7c28 <_dtoa_r+0xafc>
    85bc:	00800e44 	movi	r2,57
    85c0:	b0800005 	stb	r2,0(r22)
    85c4:	b5800044 	addi	r22,r22,1
    85c8:	003dc106 	br	7cd0 <_dtoa_r+0xba4>
    85cc:	05800084 	movi	r22,2
    85d0:	003bf706 	br	75b0 <_dtoa_r+0x484>
    85d4:	d9000f17 	ldw	r4,60(sp)
    85d8:	013c000e 	bge	zero,r4,75dc <_dtoa_r+0x4b0>
    85dc:	d9800e17 	ldw	r6,56(sp)
    85e0:	01bc300e 	bge	zero,r6,76a4 <_dtoa_r+0x578>
    85e4:	0005883a 	mov	r2,zero
    85e8:	00d00934 	movhi	r3,16420
    85ec:	a80b883a 	mov	r5,r21
    85f0:	180f883a 	mov	r7,r3
    85f4:	a009883a 	mov	r4,r20
    85f8:	100d883a 	mov	r6,r2
    85fc:	000ed140 	call	ed14 <__muldf3>
    8600:	b1000044 	addi	r4,r22,1
    8604:	1021883a 	mov	r16,r2
    8608:	1823883a 	mov	r17,r3
    860c:	000f6600 	call	f660 <__floatsidf>
    8610:	880b883a 	mov	r5,r17
    8614:	8009883a 	mov	r4,r16
    8618:	180f883a 	mov	r7,r3
    861c:	100d883a 	mov	r6,r2
    8620:	000ed140 	call	ed14 <__muldf3>
    8624:	0011883a 	mov	r8,zero
    8628:	02500734 	movhi	r9,16412
    862c:	180b883a 	mov	r5,r3
    8630:	480f883a 	mov	r7,r9
    8634:	1009883a 	mov	r4,r2
    8638:	400d883a 	mov	r6,r8
    863c:	000eca00 	call	eca0 <__adddf3>
    8640:	102d883a 	mov	r22,r2
    8644:	00bf3034 	movhi	r2,64704
    8648:	10ef883a 	add	r23,r2,r3
    864c:	d8800d17 	ldw	r2,52(sp)
    8650:	d8c00e17 	ldw	r3,56(sp)
    8654:	8029883a 	mov	r20,r16
    8658:	10bfffc4 	addi	r2,r2,-1
    865c:	882b883a 	mov	r21,r17
    8660:	d8800415 	stw	r2,16(sp)
    8664:	d8c00315 	stw	r3,12(sp)
    8668:	003e8306 	br	8078 <_dtoa_r+0xf4c>
    866c:	d8800117 	ldw	r2,4(sp)
    8670:	dc001117 	ldw	r16,68(sp)
    8674:	dc801017 	ldw	r18,64(sp)
    8678:	00c00d84 	movi	r3,54
    867c:	1887c83a 	sub	r3,r3,r2
    8680:	003d6906 	br	7c28 <_dtoa_r+0xafc>
    8684:	01800044 	movi	r6,1
    8688:	3021883a 	mov	r16,r6
    868c:	d9800f15 	stw	r6,60(sp)
    8690:	d9802615 	stw	r6,152(sp)
    8694:	d9800e15 	stw	r6,56(sp)
    8698:	003b9306 	br	74e8 <_dtoa_r+0x3bc>
    869c:	b021883a 	mov	r16,r22
    86a0:	dd800f15 	stw	r22,60(sp)
    86a4:	003b9006 	br	74e8 <_dtoa_r+0x3bc>
    86a8:	103e221e 	bne	r2,zero,7f34 <_dtoa_r+0xe08>
    86ac:	b880004c 	andi	r2,r23,1
    86b0:	1005003a 	cmpeq	r2,r2,zero
    86b4:	103e1f1e 	bne	r2,zero,7f34 <_dtoa_r+0xe08>
    86b8:	003e1b06 	br	7f28 <_dtoa_r+0xdfc>
    86bc:	d9001617 	ldw	r4,88(sp)
    86c0:	980b883a 	mov	r5,r19
    86c4:	01800284 	movi	r6,10
    86c8:	000f883a 	mov	r7,zero
    86cc:	0009d6c0 	call	9d6c <__multadd>
    86d0:	d8c00e17 	ldw	r3,56(sp)
    86d4:	1027883a 	mov	r19,r2
    86d8:	d8c00f15 	stw	r3,60(sp)
    86dc:	003cd306 	br	7a2c <_dtoa_r+0x900>

000086e0 <__sflags>:
    86e0:	28c00007 	ldb	r3,0(r5)
    86e4:	00801c84 	movi	r2,114
    86e8:	18800926 	beq	r3,r2,8710 <__sflags+0x30>
    86ec:	00801dc4 	movi	r2,119
    86f0:	18801426 	beq	r3,r2,8744 <__sflags+0x64>
    86f4:	00801844 	movi	r2,97
    86f8:	18801626 	beq	r3,r2,8754 <__sflags+0x74>
    86fc:	0007883a 	mov	r3,zero
    8700:	00800584 	movi	r2,22
    8704:	20800015 	stw	r2,0(r4)
    8708:	1805883a 	mov	r2,r3
    870c:	f800283a 	ret
    8710:	000f883a 	mov	r7,zero
    8714:	0011883a 	mov	r8,zero
    8718:	00c00104 	movi	r3,4
    871c:	28800047 	ldb	r2,1(r5)
    8720:	10000426 	beq	r2,zero,8734 <__sflags+0x54>
    8724:	01000ac4 	movi	r4,43
    8728:	11000e26 	beq	r2,r4,8764 <__sflags+0x84>
    872c:	28800087 	ldb	r2,2(r5)
    8730:	11000c26 	beq	r2,r4,8764 <__sflags+0x84>
    8734:	3a04b03a 	or	r2,r7,r8
    8738:	30800015 	stw	r2,0(r6)
    873c:	1805883a 	mov	r2,r3
    8740:	f800283a 	ret
    8744:	01c00044 	movi	r7,1
    8748:	02018004 	movi	r8,1536
    874c:	00c00204 	movi	r3,8
    8750:	003ff206 	br	871c <__sflags+0x3c>
    8754:	01c00044 	movi	r7,1
    8758:	02008204 	movi	r8,520
    875c:	00c04204 	movi	r3,264
    8760:	003fee06 	br	871c <__sflags+0x3c>
    8764:	00bffcc4 	movi	r2,-13
    8768:	1884703a 	and	r2,r3,r2
    876c:	01c00084 	movi	r7,2
    8770:	10c00414 	ori	r3,r2,16
    8774:	3a04b03a 	or	r2,r7,r8
    8778:	30800015 	stw	r2,0(r6)
    877c:	003fef06 	br	873c <__sflags+0x5c>

00008780 <__sfvwrite_r>:
    8780:	30800217 	ldw	r2,8(r6)
    8784:	defff504 	addi	sp,sp,-44
    8788:	df000915 	stw	fp,36(sp)
    878c:	dd800715 	stw	r22,28(sp)
    8790:	dc800315 	stw	r18,12(sp)
    8794:	dfc00a15 	stw	ra,40(sp)
    8798:	ddc00815 	stw	r23,32(sp)
    879c:	dd400615 	stw	r21,24(sp)
    87a0:	dd000515 	stw	r20,20(sp)
    87a4:	dcc00415 	stw	r19,16(sp)
    87a8:	dc400215 	stw	r17,8(sp)
    87ac:	dc000115 	stw	r16,4(sp)
    87b0:	302d883a 	mov	r22,r6
    87b4:	2039883a 	mov	fp,r4
    87b8:	2825883a 	mov	r18,r5
    87bc:	10001c26 	beq	r2,zero,8830 <__sfvwrite_r+0xb0>
    87c0:	29c0030b 	ldhu	r7,12(r5)
    87c4:	3880020c 	andi	r2,r7,8
    87c8:	10002726 	beq	r2,zero,8868 <__sfvwrite_r+0xe8>
    87cc:	28800417 	ldw	r2,16(r5)
    87d0:	10002526 	beq	r2,zero,8868 <__sfvwrite_r+0xe8>
    87d4:	3880008c 	andi	r2,r7,2
    87d8:	b5400017 	ldw	r21,0(r22)
    87dc:	10002826 	beq	r2,zero,8880 <__sfvwrite_r+0x100>
    87e0:	0021883a 	mov	r16,zero
    87e4:	0023883a 	mov	r17,zero
    87e8:	880d883a 	mov	r6,r17
    87ec:	e009883a 	mov	r4,fp
    87f0:	00810004 	movi	r2,1024
    87f4:	80006e26 	beq	r16,zero,89b0 <__sfvwrite_r+0x230>
    87f8:	800f883a 	mov	r7,r16
    87fc:	91400717 	ldw	r5,28(r18)
    8800:	1400012e 	bgeu	r2,r16,8808 <__sfvwrite_r+0x88>
    8804:	100f883a 	mov	r7,r2
    8808:	90c00917 	ldw	r3,36(r18)
    880c:	183ee83a 	callr	r3
    8810:	1007883a 	mov	r3,r2
    8814:	80a1c83a 	sub	r16,r16,r2
    8818:	88a3883a 	add	r17,r17,r2
    881c:	00806d0e 	bge	zero,r2,89d4 <__sfvwrite_r+0x254>
    8820:	b0800217 	ldw	r2,8(r22)
    8824:	10c5c83a 	sub	r2,r2,r3
    8828:	b0800215 	stw	r2,8(r22)
    882c:	103fee1e 	bne	r2,zero,87e8 <__sfvwrite_r+0x68>
    8830:	0009883a 	mov	r4,zero
    8834:	2005883a 	mov	r2,r4
    8838:	dfc00a17 	ldw	ra,40(sp)
    883c:	df000917 	ldw	fp,36(sp)
    8840:	ddc00817 	ldw	r23,32(sp)
    8844:	dd800717 	ldw	r22,28(sp)
    8848:	dd400617 	ldw	r21,24(sp)
    884c:	dd000517 	ldw	r20,20(sp)
    8850:	dcc00417 	ldw	r19,16(sp)
    8854:	dc800317 	ldw	r18,12(sp)
    8858:	dc400217 	ldw	r17,8(sp)
    885c:	dc000117 	ldw	r16,4(sp)
    8860:	dec00b04 	addi	sp,sp,44
    8864:	f800283a 	ret
    8868:	0006d680 	call	6d68 <__swsetup_r>
    886c:	1000e41e 	bne	r2,zero,8c00 <__sfvwrite_r+0x480>
    8870:	91c0030b 	ldhu	r7,12(r18)
    8874:	b5400017 	ldw	r21,0(r22)
    8878:	3880008c 	andi	r2,r7,2
    887c:	103fd81e 	bne	r2,zero,87e0 <__sfvwrite_r+0x60>
    8880:	3880004c 	andi	r2,r7,1
    8884:	1005003a 	cmpeq	r2,r2,zero
    8888:	10005726 	beq	r2,zero,89e8 <__sfvwrite_r+0x268>
    888c:	0029883a 	mov	r20,zero
    8890:	002f883a 	mov	r23,zero
    8894:	a0004226 	beq	r20,zero,89a0 <__sfvwrite_r+0x220>
    8898:	3880800c 	andi	r2,r7,512
    889c:	94000217 	ldw	r16,8(r18)
    88a0:	10008b26 	beq	r2,zero,8ad0 <__sfvwrite_r+0x350>
    88a4:	800d883a 	mov	r6,r16
    88a8:	a400a536 	bltu	r20,r16,8b40 <__sfvwrite_r+0x3c0>
    88ac:	3881200c 	andi	r2,r7,1152
    88b0:	10002726 	beq	r2,zero,8950 <__sfvwrite_r+0x1d0>
    88b4:	90800517 	ldw	r2,20(r18)
    88b8:	92000417 	ldw	r8,16(r18)
    88bc:	91400017 	ldw	r5,0(r18)
    88c0:	1087883a 	add	r3,r2,r2
    88c4:	1887883a 	add	r3,r3,r2
    88c8:	1808d7fa 	srli	r4,r3,31
    88cc:	2a21c83a 	sub	r16,r5,r8
    88d0:	80800044 	addi	r2,r16,1
    88d4:	20c9883a 	add	r4,r4,r3
    88d8:	2027d07a 	srai	r19,r4,1
    88dc:	a085883a 	add	r2,r20,r2
    88e0:	980d883a 	mov	r6,r19
    88e4:	9880022e 	bgeu	r19,r2,88f0 <__sfvwrite_r+0x170>
    88e8:	1027883a 	mov	r19,r2
    88ec:	100d883a 	mov	r6,r2
    88f0:	3881000c 	andi	r2,r7,1024
    88f4:	1000b826 	beq	r2,zero,8bd8 <__sfvwrite_r+0x458>
    88f8:	300b883a 	mov	r5,r6
    88fc:	e009883a 	mov	r4,fp
    8900:	00028140 	call	2814 <_malloc_r>
    8904:	10003126 	beq	r2,zero,89cc <__sfvwrite_r+0x24c>
    8908:	91400417 	ldw	r5,16(r18)
    890c:	1009883a 	mov	r4,r2
    8910:	800d883a 	mov	r6,r16
    8914:	1023883a 	mov	r17,r2
    8918:	0002f540 	call	2f54 <memcpy>
    891c:	90c0030b 	ldhu	r3,12(r18)
    8920:	00beffc4 	movi	r2,-1025
    8924:	1886703a 	and	r3,r3,r2
    8928:	18c02014 	ori	r3,r3,128
    892c:	90c0030d 	sth	r3,12(r18)
    8930:	9c07c83a 	sub	r3,r19,r16
    8934:	8c05883a 	add	r2,r17,r16
    8938:	a00d883a 	mov	r6,r20
    893c:	a021883a 	mov	r16,r20
    8940:	90800015 	stw	r2,0(r18)
    8944:	90c00215 	stw	r3,8(r18)
    8948:	94400415 	stw	r17,16(r18)
    894c:	94c00515 	stw	r19,20(r18)
    8950:	91000017 	ldw	r4,0(r18)
    8954:	b80b883a 	mov	r5,r23
    8958:	a023883a 	mov	r17,r20
    895c:	0008fd80 	call	8fd8 <memmove>
    8960:	90c00217 	ldw	r3,8(r18)
    8964:	90800017 	ldw	r2,0(r18)
    8968:	a027883a 	mov	r19,r20
    896c:	1c07c83a 	sub	r3,r3,r16
    8970:	1405883a 	add	r2,r2,r16
    8974:	90c00215 	stw	r3,8(r18)
    8978:	a021883a 	mov	r16,r20
    897c:	90800015 	stw	r2,0(r18)
    8980:	b0800217 	ldw	r2,8(r22)
    8984:	1405c83a 	sub	r2,r2,r16
    8988:	b0800215 	stw	r2,8(r22)
    898c:	103fa826 	beq	r2,zero,8830 <__sfvwrite_r+0xb0>
    8990:	a469c83a 	sub	r20,r20,r17
    8994:	91c0030b 	ldhu	r7,12(r18)
    8998:	bcef883a 	add	r23,r23,r19
    899c:	a03fbe1e 	bne	r20,zero,8898 <__sfvwrite_r+0x118>
    89a0:	adc00017 	ldw	r23,0(r21)
    89a4:	ad000117 	ldw	r20,4(r21)
    89a8:	ad400204 	addi	r21,r21,8
    89ac:	003fb906 	br	8894 <__sfvwrite_r+0x114>
    89b0:	ac400017 	ldw	r17,0(r21)
    89b4:	ac000117 	ldw	r16,4(r21)
    89b8:	ad400204 	addi	r21,r21,8
    89bc:	003f8a06 	br	87e8 <__sfvwrite_r+0x68>
    89c0:	91400417 	ldw	r5,16(r18)
    89c4:	e009883a 	mov	r4,fp
    89c8:	0001c840 	call	1c84 <_free_r>
    89cc:	00800304 	movi	r2,12
    89d0:	e0800015 	stw	r2,0(fp)
    89d4:	9080030b 	ldhu	r2,12(r18)
    89d8:	013fffc4 	movi	r4,-1
    89dc:	10801014 	ori	r2,r2,64
    89e0:	9080030d 	sth	r2,12(r18)
    89e4:	003f9306 	br	8834 <__sfvwrite_r+0xb4>
    89e8:	0027883a 	mov	r19,zero
    89ec:	002f883a 	mov	r23,zero
    89f0:	d8000015 	stw	zero,0(sp)
    89f4:	0029883a 	mov	r20,zero
    89f8:	98001e26 	beq	r19,zero,8a74 <__sfvwrite_r+0x2f4>
    89fc:	d8c00017 	ldw	r3,0(sp)
    8a00:	1804c03a 	cmpne	r2,r3,zero
    8a04:	10005e26 	beq	r2,zero,8b80 <__sfvwrite_r+0x400>
    8a08:	9821883a 	mov	r16,r19
    8a0c:	a4c0012e 	bgeu	r20,r19,8a14 <__sfvwrite_r+0x294>
    8a10:	a021883a 	mov	r16,r20
    8a14:	91000017 	ldw	r4,0(r18)
    8a18:	90800417 	ldw	r2,16(r18)
    8a1c:	91800217 	ldw	r6,8(r18)
    8a20:	91c00517 	ldw	r7,20(r18)
    8a24:	1100022e 	bgeu	r2,r4,8a30 <__sfvwrite_r+0x2b0>
    8a28:	31e3883a 	add	r17,r6,r7
    8a2c:	8c001616 	blt	r17,r16,8a88 <__sfvwrite_r+0x308>
    8a30:	81c03816 	blt	r16,r7,8b14 <__sfvwrite_r+0x394>
    8a34:	90c00917 	ldw	r3,36(r18)
    8a38:	91400717 	ldw	r5,28(r18)
    8a3c:	e009883a 	mov	r4,fp
    8a40:	b80d883a 	mov	r6,r23
    8a44:	183ee83a 	callr	r3
    8a48:	1023883a 	mov	r17,r2
    8a4c:	00bfe10e 	bge	zero,r2,89d4 <__sfvwrite_r+0x254>
    8a50:	a469c83a 	sub	r20,r20,r17
    8a54:	a0001826 	beq	r20,zero,8ab8 <__sfvwrite_r+0x338>
    8a58:	b0800217 	ldw	r2,8(r22)
    8a5c:	1445c83a 	sub	r2,r2,r17
    8a60:	b0800215 	stw	r2,8(r22)
    8a64:	103f7226 	beq	r2,zero,8830 <__sfvwrite_r+0xb0>
    8a68:	9c67c83a 	sub	r19,r19,r17
    8a6c:	bc6f883a 	add	r23,r23,r17
    8a70:	983fe21e 	bne	r19,zero,89fc <__sfvwrite_r+0x27c>
    8a74:	adc00017 	ldw	r23,0(r21)
    8a78:	acc00117 	ldw	r19,4(r21)
    8a7c:	ad400204 	addi	r21,r21,8
    8a80:	d8000015 	stw	zero,0(sp)
    8a84:	003fdc06 	br	89f8 <__sfvwrite_r+0x278>
    8a88:	b80b883a 	mov	r5,r23
    8a8c:	880d883a 	mov	r6,r17
    8a90:	0008fd80 	call	8fd8 <memmove>
    8a94:	90c00017 	ldw	r3,0(r18)
    8a98:	e009883a 	mov	r4,fp
    8a9c:	900b883a 	mov	r5,r18
    8aa0:	1c47883a 	add	r3,r3,r17
    8aa4:	90c00015 	stw	r3,0(r18)
    8aa8:	000131c0 	call	131c <_fflush_r>
    8aac:	103fc91e 	bne	r2,zero,89d4 <__sfvwrite_r+0x254>
    8ab0:	a469c83a 	sub	r20,r20,r17
    8ab4:	a03fe81e 	bne	r20,zero,8a58 <__sfvwrite_r+0x2d8>
    8ab8:	e009883a 	mov	r4,fp
    8abc:	900b883a 	mov	r5,r18
    8ac0:	000131c0 	call	131c <_fflush_r>
    8ac4:	103fc31e 	bne	r2,zero,89d4 <__sfvwrite_r+0x254>
    8ac8:	d8000015 	stw	zero,0(sp)
    8acc:	003fe206 	br	8a58 <__sfvwrite_r+0x2d8>
    8ad0:	91000017 	ldw	r4,0(r18)
    8ad4:	90800417 	ldw	r2,16(r18)
    8ad8:	1100022e 	bgeu	r2,r4,8ae4 <__sfvwrite_r+0x364>
    8adc:	8023883a 	mov	r17,r16
    8ae0:	85003136 	bltu	r16,r20,8ba8 <__sfvwrite_r+0x428>
    8ae4:	91c00517 	ldw	r7,20(r18)
    8ae8:	a1c01836 	bltu	r20,r7,8b4c <__sfvwrite_r+0x3cc>
    8aec:	90c00917 	ldw	r3,36(r18)
    8af0:	91400717 	ldw	r5,28(r18)
    8af4:	e009883a 	mov	r4,fp
    8af8:	b80d883a 	mov	r6,r23
    8afc:	183ee83a 	callr	r3
    8b00:	1021883a 	mov	r16,r2
    8b04:	00bfb30e 	bge	zero,r2,89d4 <__sfvwrite_r+0x254>
    8b08:	1023883a 	mov	r17,r2
    8b0c:	1027883a 	mov	r19,r2
    8b10:	003f9b06 	br	8980 <__sfvwrite_r+0x200>
    8b14:	b80b883a 	mov	r5,r23
    8b18:	800d883a 	mov	r6,r16
    8b1c:	0008fd80 	call	8fd8 <memmove>
    8b20:	90c00217 	ldw	r3,8(r18)
    8b24:	90800017 	ldw	r2,0(r18)
    8b28:	8023883a 	mov	r17,r16
    8b2c:	1c07c83a 	sub	r3,r3,r16
    8b30:	1405883a 	add	r2,r2,r16
    8b34:	90c00215 	stw	r3,8(r18)
    8b38:	90800015 	stw	r2,0(r18)
    8b3c:	003fc406 	br	8a50 <__sfvwrite_r+0x2d0>
    8b40:	a00d883a 	mov	r6,r20
    8b44:	a021883a 	mov	r16,r20
    8b48:	003f8106 	br	8950 <__sfvwrite_r+0x1d0>
    8b4c:	b80b883a 	mov	r5,r23
    8b50:	a00d883a 	mov	r6,r20
    8b54:	0008fd80 	call	8fd8 <memmove>
    8b58:	90c00217 	ldw	r3,8(r18)
    8b5c:	90800017 	ldw	r2,0(r18)
    8b60:	a021883a 	mov	r16,r20
    8b64:	1d07c83a 	sub	r3,r3,r20
    8b68:	1505883a 	add	r2,r2,r20
    8b6c:	a023883a 	mov	r17,r20
    8b70:	a027883a 	mov	r19,r20
    8b74:	90c00215 	stw	r3,8(r18)
    8b78:	90800015 	stw	r2,0(r18)
    8b7c:	003f8006 	br	8980 <__sfvwrite_r+0x200>
    8b80:	b809883a 	mov	r4,r23
    8b84:	01400284 	movi	r5,10
    8b88:	980d883a 	mov	r6,r19
    8b8c:	0008ef40 	call	8ef4 <memchr>
    8b90:	10001726 	beq	r2,zero,8bf0 <__sfvwrite_r+0x470>
    8b94:	15c5c83a 	sub	r2,r2,r23
    8b98:	15000044 	addi	r20,r2,1
    8b9c:	00800044 	movi	r2,1
    8ba0:	d8800015 	stw	r2,0(sp)
    8ba4:	003f9806 	br	8a08 <__sfvwrite_r+0x288>
    8ba8:	b80b883a 	mov	r5,r23
    8bac:	800d883a 	mov	r6,r16
    8bb0:	0008fd80 	call	8fd8 <memmove>
    8bb4:	90c00017 	ldw	r3,0(r18)
    8bb8:	e009883a 	mov	r4,fp
    8bbc:	900b883a 	mov	r5,r18
    8bc0:	1c07883a 	add	r3,r3,r16
    8bc4:	90c00015 	stw	r3,0(r18)
    8bc8:	8027883a 	mov	r19,r16
    8bcc:	000131c0 	call	131c <_fflush_r>
    8bd0:	103f6b26 	beq	r2,zero,8980 <__sfvwrite_r+0x200>
    8bd4:	003f7f06 	br	89d4 <__sfvwrite_r+0x254>
    8bd8:	400b883a 	mov	r5,r8
    8bdc:	e009883a 	mov	r4,fp
    8be0:	000a1240 	call	a124 <_realloc_r>
    8be4:	103f7626 	beq	r2,zero,89c0 <__sfvwrite_r+0x240>
    8be8:	1023883a 	mov	r17,r2
    8bec:	003f5006 	br	8930 <__sfvwrite_r+0x1b0>
    8bf0:	00c00044 	movi	r3,1
    8bf4:	9d000044 	addi	r20,r19,1
    8bf8:	d8c00015 	stw	r3,0(sp)
    8bfc:	003f8206 	br	8a08 <__sfvwrite_r+0x288>
    8c00:	9080030b 	ldhu	r2,12(r18)
    8c04:	00c00244 	movi	r3,9
    8c08:	013fffc4 	movi	r4,-1
    8c0c:	10801014 	ori	r2,r2,64
    8c10:	9080030d 	sth	r2,12(r18)
    8c14:	e0c00015 	stw	r3,0(fp)
    8c18:	003f0606 	br	8834 <__sfvwrite_r+0xb4>

00008c1c <_isatty_r>:
    8c1c:	defffd04 	addi	sp,sp,-12
    8c20:	dc000015 	stw	r16,0(sp)
    8c24:	04000074 	movhi	r16,1
    8c28:	841de504 	addi	r16,r16,30612
    8c2c:	dc400115 	stw	r17,4(sp)
    8c30:	80000015 	stw	zero,0(r16)
    8c34:	2023883a 	mov	r17,r4
    8c38:	2809883a 	mov	r4,r5
    8c3c:	dfc00215 	stw	ra,8(sp)
    8c40:	00106d00 	call	106d0 <isatty>
    8c44:	1007883a 	mov	r3,r2
    8c48:	00bfffc4 	movi	r2,-1
    8c4c:	18800626 	beq	r3,r2,8c68 <_isatty_r+0x4c>
    8c50:	1805883a 	mov	r2,r3
    8c54:	dfc00217 	ldw	ra,8(sp)
    8c58:	dc400117 	ldw	r17,4(sp)
    8c5c:	dc000017 	ldw	r16,0(sp)
    8c60:	dec00304 	addi	sp,sp,12
    8c64:	f800283a 	ret
    8c68:	80800017 	ldw	r2,0(r16)
    8c6c:	103ff826 	beq	r2,zero,8c50 <_isatty_r+0x34>
    8c70:	88800015 	stw	r2,0(r17)
    8c74:	1805883a 	mov	r2,r3
    8c78:	dfc00217 	ldw	ra,8(sp)
    8c7c:	dc400117 	ldw	r17,4(sp)
    8c80:	dc000017 	ldw	r16,0(sp)
    8c84:	dec00304 	addi	sp,sp,12
    8c88:	f800283a 	ret

00008c8c <iswspace>:
    8c8c:	00803fc4 	movi	r2,255
    8c90:	0007883a 	mov	r3,zero
    8c94:	11000636 	bltu	r2,r4,8cb0 <iswspace+0x24>
    8c98:	00800074 	movhi	r2,1
    8c9c:	10970504 	addi	r2,r2,23572
    8ca0:	10c00017 	ldw	r3,0(r2)
    8ca4:	1907883a 	add	r3,r3,r4
    8ca8:	18800003 	ldbu	r2,0(r3)
    8cac:	10c0020c 	andi	r3,r2,8
    8cb0:	1805883a 	mov	r2,r3
    8cb4:	f800283a 	ret

00008cb8 <__locale_charset>:
    8cb8:	d0a00617 	ldw	r2,-32744(gp)
    8cbc:	f800283a 	ret

00008cc0 <_localeconv_r>:
    8cc0:	00800074 	movhi	r2,1
    8cc4:	108fa704 	addi	r2,r2,16028
    8cc8:	f800283a 	ret

00008ccc <localeconv>:
    8ccc:	00800074 	movhi	r2,1
    8cd0:	10970104 	addi	r2,r2,23556
    8cd4:	11000017 	ldw	r4,0(r2)
    8cd8:	0008cc01 	jmpi	8cc0 <_localeconv_r>

00008cdc <_setlocale_r>:
    8cdc:	defffc04 	addi	sp,sp,-16
    8ce0:	00c00074 	movhi	r3,1
    8ce4:	18ced204 	addi	r3,r3,15176
    8ce8:	dc800215 	stw	r18,8(sp)
    8cec:	dc400115 	stw	r17,4(sp)
    8cf0:	dc000015 	stw	r16,0(sp)
    8cf4:	2023883a 	mov	r17,r4
    8cf8:	2825883a 	mov	r18,r5
    8cfc:	dfc00315 	stw	ra,12(sp)
    8d00:	3021883a 	mov	r16,r6
    8d04:	3009883a 	mov	r4,r6
    8d08:	180b883a 	mov	r5,r3
    8d0c:	30000926 	beq	r6,zero,8d34 <_setlocale_r+0x58>
    8d10:	000a9240 	call	a924 <strcmp>
    8d14:	8009883a 	mov	r4,r16
    8d18:	01400074 	movhi	r5,1
    8d1c:	294ee304 	addi	r5,r5,15244
    8d20:	10000b1e 	bne	r2,zero,8d50 <_setlocale_r+0x74>
    8d24:	8c000d15 	stw	r16,52(r17)
    8d28:	8c800c15 	stw	r18,48(r17)
    8d2c:	00c00074 	movhi	r3,1
    8d30:	18ced204 	addi	r3,r3,15176
    8d34:	1805883a 	mov	r2,r3
    8d38:	dfc00317 	ldw	ra,12(sp)
    8d3c:	dc800217 	ldw	r18,8(sp)
    8d40:	dc400117 	ldw	r17,4(sp)
    8d44:	dc000017 	ldw	r16,0(sp)
    8d48:	dec00404 	addi	sp,sp,16
    8d4c:	f800283a 	ret
    8d50:	000a9240 	call	a924 <strcmp>
    8d54:	0007883a 	mov	r3,zero
    8d58:	103ff226 	beq	r2,zero,8d24 <_setlocale_r+0x48>
    8d5c:	003ff506 	br	8d34 <_setlocale_r+0x58>

00008d60 <setlocale>:
    8d60:	01800074 	movhi	r6,1
    8d64:	31970104 	addi	r6,r6,23556
    8d68:	2007883a 	mov	r3,r4
    8d6c:	31000017 	ldw	r4,0(r6)
    8d70:	280d883a 	mov	r6,r5
    8d74:	180b883a 	mov	r5,r3
    8d78:	0008cdc1 	jmpi	8cdc <_setlocale_r>

00008d7c <_lseek_r>:
    8d7c:	defffd04 	addi	sp,sp,-12
    8d80:	dc000015 	stw	r16,0(sp)
    8d84:	04000074 	movhi	r16,1
    8d88:	841de504 	addi	r16,r16,30612
    8d8c:	dc400115 	stw	r17,4(sp)
    8d90:	80000015 	stw	zero,0(r16)
    8d94:	2023883a 	mov	r17,r4
    8d98:	2809883a 	mov	r4,r5
    8d9c:	300b883a 	mov	r5,r6
    8da0:	380d883a 	mov	r6,r7
    8da4:	dfc00215 	stw	ra,8(sp)
    8da8:	00108dc0 	call	108dc <lseek>
    8dac:	1007883a 	mov	r3,r2
    8db0:	00bfffc4 	movi	r2,-1
    8db4:	18800626 	beq	r3,r2,8dd0 <_lseek_r+0x54>
    8db8:	1805883a 	mov	r2,r3
    8dbc:	dfc00217 	ldw	ra,8(sp)
    8dc0:	dc400117 	ldw	r17,4(sp)
    8dc4:	dc000017 	ldw	r16,0(sp)
    8dc8:	dec00304 	addi	sp,sp,12
    8dcc:	f800283a 	ret
    8dd0:	80800017 	ldw	r2,0(r16)
    8dd4:	103ff826 	beq	r2,zero,8db8 <_lseek_r+0x3c>
    8dd8:	88800015 	stw	r2,0(r17)
    8ddc:	1805883a 	mov	r2,r3
    8de0:	dfc00217 	ldw	ra,8(sp)
    8de4:	dc400117 	ldw	r17,4(sp)
    8de8:	dc000017 	ldw	r16,0(sp)
    8dec:	dec00304 	addi	sp,sp,12
    8df0:	f800283a 	ret

00008df4 <_mbrtowc_r>:
    8df4:	defffc04 	addi	sp,sp,-16
    8df8:	dc400215 	stw	r17,8(sp)
    8dfc:	dc000115 	stw	r16,4(sp)
    8e00:	dfc00315 	stw	ra,12(sp)
    8e04:	dc000417 	ldw	r16,16(sp)
    8e08:	2023883a 	mov	r17,r4
    8e0c:	30000f26 	beq	r6,zero,8e4c <_mbrtowc_r+0x58>
    8e10:	dc000015 	stw	r16,0(sp)
    8e14:	0008eb40 	call	8eb4 <_mbtowc_r>
    8e18:	1007883a 	mov	r3,r2
    8e1c:	00bfffc4 	movi	r2,-1
    8e20:	1809883a 	mov	r4,r3
    8e24:	1880111e 	bne	r3,r2,8e6c <_mbrtowc_r+0x78>
    8e28:	80000015 	stw	zero,0(r16)
    8e2c:	00802284 	movi	r2,138
    8e30:	88800015 	stw	r2,0(r17)
    8e34:	2005883a 	mov	r2,r4
    8e38:	dfc00317 	ldw	ra,12(sp)
    8e3c:	dc400217 	ldw	r17,8(sp)
    8e40:	dc000117 	ldw	r16,4(sp)
    8e44:	dec00404 	addi	sp,sp,16
    8e48:	f800283a 	ret
    8e4c:	000b883a 	mov	r5,zero
    8e50:	01800074 	movhi	r6,1
    8e54:	318ee304 	addi	r6,r6,15244
    8e58:	01c00044 	movi	r7,1
    8e5c:	dc000015 	stw	r16,0(sp)
    8e60:	0008eb40 	call	8eb4 <_mbtowc_r>
    8e64:	1007883a 	mov	r3,r2
    8e68:	003fec06 	br	8e1c <_mbrtowc_r+0x28>
    8e6c:	1809883a 	mov	r4,r3
    8e70:	003ff006 	br	8e34 <_mbrtowc_r+0x40>

00008e74 <mbrtowc>:
    8e74:	00800074 	movhi	r2,1
    8e78:	10970104 	addi	r2,r2,23556
    8e7c:	2017883a 	mov	r11,r4
    8e80:	11000017 	ldw	r4,0(r2)
    8e84:	defffe04 	addi	sp,sp,-8
    8e88:	3013883a 	mov	r9,r6
    8e8c:	2805883a 	mov	r2,r5
    8e90:	d9c00015 	stw	r7,0(sp)
    8e94:	580b883a 	mov	r5,r11
    8e98:	100d883a 	mov	r6,r2
    8e9c:	480f883a 	mov	r7,r9
    8ea0:	dfc00115 	stw	ra,4(sp)
    8ea4:	0008df40 	call	8df4 <_mbrtowc_r>
    8ea8:	dfc00117 	ldw	ra,4(sp)
    8eac:	dec00204 	addi	sp,sp,8
    8eb0:	f800283a 	ret

00008eb4 <_mbtowc_r>:
    8eb4:	deffff04 	addi	sp,sp,-4
    8eb8:	0005883a 	mov	r2,zero
    8ebc:	28000326 	beq	r5,zero,8ecc <_mbtowc_r+0x18>
    8ec0:	3000041e 	bne	r6,zero,8ed4 <_mbtowc_r+0x20>
    8ec4:	dec00104 	addi	sp,sp,4
    8ec8:	f800283a 	ret
    8ecc:	d80b883a 	mov	r5,sp
    8ed0:	303ffc26 	beq	r6,zero,8ec4 <_mbtowc_r+0x10>
    8ed4:	00bfff84 	movi	r2,-2
    8ed8:	383ffa26 	beq	r7,zero,8ec4 <_mbtowc_r+0x10>
    8edc:	30800003 	ldbu	r2,0(r6)
    8ee0:	28800015 	stw	r2,0(r5)
    8ee4:	30c00003 	ldbu	r3,0(r6)
    8ee8:	1804c03a 	cmpne	r2,r3,zero
    8eec:	dec00104 	addi	sp,sp,4
    8ef0:	f800283a 	ret

00008ef4 <memchr>:
    8ef4:	008000c4 	movi	r2,3
    8ef8:	29403fcc 	andi	r5,r5,255
    8efc:	2007883a 	mov	r3,r4
    8f00:	1180022e 	bgeu	r2,r6,8f0c <memchr+0x18>
    8f04:	2084703a 	and	r2,r4,r2
    8f08:	10000b26 	beq	r2,zero,8f38 <memchr+0x44>
    8f0c:	313fffc4 	addi	r4,r6,-1
    8f10:	3000051e 	bne	r6,zero,8f28 <memchr+0x34>
    8f14:	00002c06 	br	8fc8 <memchr+0xd4>
    8f18:	213fffc4 	addi	r4,r4,-1
    8f1c:	00bfffc4 	movi	r2,-1
    8f20:	18c00044 	addi	r3,r3,1
    8f24:	20802826 	beq	r4,r2,8fc8 <memchr+0xd4>
    8f28:	18800003 	ldbu	r2,0(r3)
    8f2c:	28bffa1e 	bne	r5,r2,8f18 <memchr+0x24>
    8f30:	1805883a 	mov	r2,r3
    8f34:	f800283a 	ret
    8f38:	0011883a 	mov	r8,zero
    8f3c:	0007883a 	mov	r3,zero
    8f40:	01c00104 	movi	r7,4
    8f44:	4004923a 	slli	r2,r8,8
    8f48:	18c00044 	addi	r3,r3,1
    8f4c:	1151883a 	add	r8,r2,r5
    8f50:	19fffc1e 	bne	r3,r7,8f44 <memchr+0x50>
    8f54:	02bfbff4 	movhi	r10,65279
    8f58:	52bfbfc4 	addi	r10,r10,-257
    8f5c:	02602074 	movhi	r9,32897
    8f60:	4a602004 	addi	r9,r9,-32640
    8f64:	02c000c4 	movi	r11,3
    8f68:	20800017 	ldw	r2,0(r4)
    8f6c:	31bfff04 	addi	r6,r6,-4
    8f70:	200f883a 	mov	r7,r4
    8f74:	1204f03a 	xor	r2,r2,r8
    8f78:	1287883a 	add	r3,r2,r10
    8f7c:	1a46703a 	and	r3,r3,r9
    8f80:	0084303a 	nor	r2,zero,r2
    8f84:	10c4703a 	and	r2,r2,r3
    8f88:	10000b26 	beq	r2,zero,8fb8 <memchr+0xc4>
    8f8c:	20800003 	ldbu	r2,0(r4)
    8f90:	28800f26 	beq	r5,r2,8fd0 <memchr+0xdc>
    8f94:	20800043 	ldbu	r2,1(r4)
    8f98:	21c00044 	addi	r7,r4,1
    8f9c:	28800c26 	beq	r5,r2,8fd0 <memchr+0xdc>
    8fa0:	20800083 	ldbu	r2,2(r4)
    8fa4:	21c00084 	addi	r7,r4,2
    8fa8:	28800926 	beq	r5,r2,8fd0 <memchr+0xdc>
    8fac:	208000c3 	ldbu	r2,3(r4)
    8fb0:	21c000c4 	addi	r7,r4,3
    8fb4:	28800626 	beq	r5,r2,8fd0 <memchr+0xdc>
    8fb8:	21000104 	addi	r4,r4,4
    8fbc:	59bfea36 	bltu	r11,r6,8f68 <memchr+0x74>
    8fc0:	2007883a 	mov	r3,r4
    8fc4:	003fd106 	br	8f0c <memchr+0x18>
    8fc8:	0005883a 	mov	r2,zero
    8fcc:	f800283a 	ret
    8fd0:	3805883a 	mov	r2,r7
    8fd4:	f800283a 	ret

00008fd8 <memmove>:
    8fd8:	2807883a 	mov	r3,r5
    8fdc:	2011883a 	mov	r8,r4
    8fe0:	29000c2e 	bgeu	r5,r4,9014 <memmove+0x3c>
    8fe4:	298f883a 	add	r7,r5,r6
    8fe8:	21c00a2e 	bgeu	r4,r7,9014 <memmove+0x3c>
    8fec:	30000726 	beq	r6,zero,900c <memmove+0x34>
    8ff0:	2187883a 	add	r3,r4,r6
    8ff4:	198dc83a 	sub	r6,r3,r6
    8ff8:	39ffffc4 	addi	r7,r7,-1
    8ffc:	38800003 	ldbu	r2,0(r7)
    9000:	18ffffc4 	addi	r3,r3,-1
    9004:	18800005 	stb	r2,0(r3)
    9008:	19bffb1e 	bne	r3,r6,8ff8 <memmove+0x20>
    900c:	2005883a 	mov	r2,r4
    9010:	f800283a 	ret
    9014:	01c003c4 	movi	r7,15
    9018:	39800a36 	bltu	r7,r6,9044 <memmove+0x6c>
    901c:	303ffb26 	beq	r6,zero,900c <memmove+0x34>
    9020:	400f883a 	mov	r7,r8
    9024:	320d883a 	add	r6,r6,r8
    9028:	28800003 	ldbu	r2,0(r5)
    902c:	29400044 	addi	r5,r5,1
    9030:	38800005 	stb	r2,0(r7)
    9034:	39c00044 	addi	r7,r7,1
    9038:	39bffb1e 	bne	r7,r6,9028 <memmove+0x50>
    903c:	2005883a 	mov	r2,r4
    9040:	f800283a 	ret
    9044:	1904b03a 	or	r2,r3,r4
    9048:	108000cc 	andi	r2,r2,3
    904c:	103ff31e 	bne	r2,zero,901c <memmove+0x44>
    9050:	3811883a 	mov	r8,r7
    9054:	180b883a 	mov	r5,r3
    9058:	200f883a 	mov	r7,r4
    905c:	28c00017 	ldw	r3,0(r5)
    9060:	31bffc04 	addi	r6,r6,-16
    9064:	38c00015 	stw	r3,0(r7)
    9068:	28800117 	ldw	r2,4(r5)
    906c:	38800115 	stw	r2,4(r7)
    9070:	28c00217 	ldw	r3,8(r5)
    9074:	38c00215 	stw	r3,8(r7)
    9078:	28800317 	ldw	r2,12(r5)
    907c:	29400404 	addi	r5,r5,16
    9080:	38800315 	stw	r2,12(r7)
    9084:	39c00404 	addi	r7,r7,16
    9088:	41bff436 	bltu	r8,r6,905c <memmove+0x84>
    908c:	008000c4 	movi	r2,3
    9090:	1180072e 	bgeu	r2,r6,90b0 <memmove+0xd8>
    9094:	1007883a 	mov	r3,r2
    9098:	28800017 	ldw	r2,0(r5)
    909c:	31bfff04 	addi	r6,r6,-4
    90a0:	29400104 	addi	r5,r5,4
    90a4:	38800015 	stw	r2,0(r7)
    90a8:	39c00104 	addi	r7,r7,4
    90ac:	19bffa36 	bltu	r3,r6,9098 <memmove+0xc0>
    90b0:	3811883a 	mov	r8,r7
    90b4:	003fd906 	br	901c <memmove+0x44>

000090b8 <_Bfree>:
    90b8:	28000826 	beq	r5,zero,90dc <_Bfree+0x24>
    90bc:	28800117 	ldw	r2,4(r5)
    90c0:	21001317 	ldw	r4,76(r4)
    90c4:	1085883a 	add	r2,r2,r2
    90c8:	1085883a 	add	r2,r2,r2
    90cc:	1105883a 	add	r2,r2,r4
    90d0:	10c00017 	ldw	r3,0(r2)
    90d4:	28c00015 	stw	r3,0(r5)
    90d8:	11400015 	stw	r5,0(r2)
    90dc:	f800283a 	ret

000090e0 <__hi0bits>:
    90e0:	20bfffec 	andhi	r2,r4,65535
    90e4:	10001426 	beq	r2,zero,9138 <__hi0bits+0x58>
    90e8:	0007883a 	mov	r3,zero
    90ec:	20bfc02c 	andhi	r2,r4,65280
    90f0:	1000021e 	bne	r2,zero,90fc <__hi0bits+0x1c>
    90f4:	2008923a 	slli	r4,r4,8
    90f8:	18c00204 	addi	r3,r3,8
    90fc:	20bc002c 	andhi	r2,r4,61440
    9100:	1000021e 	bne	r2,zero,910c <__hi0bits+0x2c>
    9104:	2008913a 	slli	r4,r4,4
    9108:	18c00104 	addi	r3,r3,4
    910c:	20b0002c 	andhi	r2,r4,49152
    9110:	1000031e 	bne	r2,zero,9120 <__hi0bits+0x40>
    9114:	2105883a 	add	r2,r4,r4
    9118:	18c00084 	addi	r3,r3,2
    911c:	1089883a 	add	r4,r2,r2
    9120:	20000316 	blt	r4,zero,9130 <__hi0bits+0x50>
    9124:	2090002c 	andhi	r2,r4,16384
    9128:	10000626 	beq	r2,zero,9144 <__hi0bits+0x64>
    912c:	18c00044 	addi	r3,r3,1
    9130:	1805883a 	mov	r2,r3
    9134:	f800283a 	ret
    9138:	2008943a 	slli	r4,r4,16
    913c:	00c00404 	movi	r3,16
    9140:	003fea06 	br	90ec <__hi0bits+0xc>
    9144:	00c00804 	movi	r3,32
    9148:	1805883a 	mov	r2,r3
    914c:	f800283a 	ret

00009150 <__lo0bits>:
    9150:	20c00017 	ldw	r3,0(r4)
    9154:	188001cc 	andi	r2,r3,7
    9158:	10000a26 	beq	r2,zero,9184 <__lo0bits+0x34>
    915c:	1880004c 	andi	r2,r3,1
    9160:	1005003a 	cmpeq	r2,r2,zero
    9164:	10002126 	beq	r2,zero,91ec <__lo0bits+0x9c>
    9168:	1880008c 	andi	r2,r3,2
    916c:	1000251e 	bne	r2,zero,9204 <__lo0bits+0xb4>
    9170:	1804d0ba 	srli	r2,r3,2
    9174:	01400084 	movi	r5,2
    9178:	20800015 	stw	r2,0(r4)
    917c:	2805883a 	mov	r2,r5
    9180:	f800283a 	ret
    9184:	18bfffcc 	andi	r2,r3,65535
    9188:	10001526 	beq	r2,zero,91e0 <__lo0bits+0x90>
    918c:	000b883a 	mov	r5,zero
    9190:	18803fcc 	andi	r2,r3,255
    9194:	1000021e 	bne	r2,zero,91a0 <__lo0bits+0x50>
    9198:	1806d23a 	srli	r3,r3,8
    919c:	29400204 	addi	r5,r5,8
    91a0:	188003cc 	andi	r2,r3,15
    91a4:	1000021e 	bne	r2,zero,91b0 <__lo0bits+0x60>
    91a8:	1806d13a 	srli	r3,r3,4
    91ac:	29400104 	addi	r5,r5,4
    91b0:	188000cc 	andi	r2,r3,3
    91b4:	1000021e 	bne	r2,zero,91c0 <__lo0bits+0x70>
    91b8:	1806d0ba 	srli	r3,r3,2
    91bc:	29400084 	addi	r5,r5,2
    91c0:	1880004c 	andi	r2,r3,1
    91c4:	1000031e 	bne	r2,zero,91d4 <__lo0bits+0x84>
    91c8:	1806d07a 	srli	r3,r3,1
    91cc:	18000a26 	beq	r3,zero,91f8 <__lo0bits+0xa8>
    91d0:	29400044 	addi	r5,r5,1
    91d4:	2805883a 	mov	r2,r5
    91d8:	20c00015 	stw	r3,0(r4)
    91dc:	f800283a 	ret
    91e0:	1806d43a 	srli	r3,r3,16
    91e4:	01400404 	movi	r5,16
    91e8:	003fe906 	br	9190 <__lo0bits+0x40>
    91ec:	000b883a 	mov	r5,zero
    91f0:	2805883a 	mov	r2,r5
    91f4:	f800283a 	ret
    91f8:	01400804 	movi	r5,32
    91fc:	2805883a 	mov	r2,r5
    9200:	f800283a 	ret
    9204:	1804d07a 	srli	r2,r3,1
    9208:	01400044 	movi	r5,1
    920c:	20800015 	stw	r2,0(r4)
    9210:	003fda06 	br	917c <__lo0bits+0x2c>

00009214 <__mcmp>:
    9214:	20800417 	ldw	r2,16(r4)
    9218:	28c00417 	ldw	r3,16(r5)
    921c:	10cfc83a 	sub	r7,r2,r3
    9220:	38000c1e 	bne	r7,zero,9254 <__mcmp+0x40>
    9224:	18c5883a 	add	r2,r3,r3
    9228:	1085883a 	add	r2,r2,r2
    922c:	10c00504 	addi	r3,r2,20
    9230:	21000504 	addi	r4,r4,20
    9234:	28cb883a 	add	r5,r5,r3
    9238:	2085883a 	add	r2,r4,r2
    923c:	10bfff04 	addi	r2,r2,-4
    9240:	297fff04 	addi	r5,r5,-4
    9244:	11800017 	ldw	r6,0(r2)
    9248:	28c00017 	ldw	r3,0(r5)
    924c:	30c0031e 	bne	r6,r3,925c <__mcmp+0x48>
    9250:	20bffa36 	bltu	r4,r2,923c <__mcmp+0x28>
    9254:	3805883a 	mov	r2,r7
    9258:	f800283a 	ret
    925c:	30c00336 	bltu	r6,r3,926c <__mcmp+0x58>
    9260:	01c00044 	movi	r7,1
    9264:	3805883a 	mov	r2,r7
    9268:	f800283a 	ret
    926c:	01ffffc4 	movi	r7,-1
    9270:	003ff806 	br	9254 <__mcmp+0x40>

00009274 <__ulp>:
    9274:	295ffc2c 	andhi	r5,r5,32752
    9278:	013f3034 	movhi	r4,64704
    927c:	290b883a 	add	r5,r5,r4
    9280:	0145c83a 	sub	r2,zero,r5
    9284:	1007d53a 	srai	r3,r2,20
    9288:	000d883a 	mov	r6,zero
    928c:	0140040e 	bge	zero,r5,92a0 <__ulp+0x2c>
    9290:	280f883a 	mov	r7,r5
    9294:	3807883a 	mov	r3,r7
    9298:	3005883a 	mov	r2,r6
    929c:	f800283a 	ret
    92a0:	008004c4 	movi	r2,19
    92a4:	193ffb04 	addi	r4,r3,-20
    92a8:	10c00c0e 	bge	r2,r3,92dc <__ulp+0x68>
    92ac:	008007c4 	movi	r2,31
    92b0:	1107c83a 	sub	r3,r2,r4
    92b4:	00800784 	movi	r2,30
    92b8:	01400044 	movi	r5,1
    92bc:	11000216 	blt	r2,r4,92c8 <__ulp+0x54>
    92c0:	00800044 	movi	r2,1
    92c4:	10ca983a 	sll	r5,r2,r3
    92c8:	000f883a 	mov	r7,zero
    92cc:	280d883a 	mov	r6,r5
    92d0:	3807883a 	mov	r3,r7
    92d4:	3005883a 	mov	r2,r6
    92d8:	f800283a 	ret
    92dc:	00800234 	movhi	r2,8
    92e0:	10cfd83a 	sra	r7,r2,r3
    92e4:	000d883a 	mov	r6,zero
    92e8:	3005883a 	mov	r2,r6
    92ec:	3807883a 	mov	r3,r7
    92f0:	f800283a 	ret

000092f4 <__b2d>:
    92f4:	20800417 	ldw	r2,16(r4)
    92f8:	defff904 	addi	sp,sp,-28
    92fc:	dd000415 	stw	r20,16(sp)
    9300:	1085883a 	add	r2,r2,r2
    9304:	25000504 	addi	r20,r4,20
    9308:	1085883a 	add	r2,r2,r2
    930c:	dc000015 	stw	r16,0(sp)
    9310:	a0a1883a 	add	r16,r20,r2
    9314:	dd400515 	stw	r21,20(sp)
    9318:	857fff17 	ldw	r21,-4(r16)
    931c:	dc400115 	stw	r17,4(sp)
    9320:	dfc00615 	stw	ra,24(sp)
    9324:	a809883a 	mov	r4,r21
    9328:	2823883a 	mov	r17,r5
    932c:	dcc00315 	stw	r19,12(sp)
    9330:	dc800215 	stw	r18,8(sp)
    9334:	00090e00 	call	90e0 <__hi0bits>
    9338:	100b883a 	mov	r5,r2
    933c:	00800804 	movi	r2,32
    9340:	1145c83a 	sub	r2,r2,r5
    9344:	88800015 	stw	r2,0(r17)
    9348:	00800284 	movi	r2,10
    934c:	80ffff04 	addi	r3,r16,-4
    9350:	11401416 	blt	r2,r5,93a4 <__b2d+0xb0>
    9354:	008002c4 	movi	r2,11
    9358:	1149c83a 	sub	r4,r2,r5
    935c:	a0c02736 	bltu	r20,r3,93fc <__b2d+0x108>
    9360:	000d883a 	mov	r6,zero
    9364:	28800544 	addi	r2,r5,21
    9368:	a906d83a 	srl	r3,r21,r4
    936c:	a884983a 	sll	r2,r21,r2
    9370:	1ccffc34 	orhi	r19,r3,16368
    9374:	11a4b03a 	or	r18,r2,r6
    9378:	9005883a 	mov	r2,r18
    937c:	9807883a 	mov	r3,r19
    9380:	dfc00617 	ldw	ra,24(sp)
    9384:	dd400517 	ldw	r21,20(sp)
    9388:	dd000417 	ldw	r20,16(sp)
    938c:	dcc00317 	ldw	r19,12(sp)
    9390:	dc800217 	ldw	r18,8(sp)
    9394:	dc400117 	ldw	r17,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00704 	addi	sp,sp,28
    93a0:	f800283a 	ret
    93a4:	a0c00e36 	bltu	r20,r3,93e0 <__b2d+0xec>
    93a8:	293ffd44 	addi	r4,r5,-11
    93ac:	000d883a 	mov	r6,zero
    93b0:	20000f26 	beq	r4,zero,93f0 <__b2d+0xfc>
    93b4:	00800804 	movi	r2,32
    93b8:	110bc83a 	sub	r5,r2,r4
    93bc:	a0c01236 	bltu	r20,r3,9408 <__b2d+0x114>
    93c0:	000f883a 	mov	r7,zero
    93c4:	a904983a 	sll	r2,r21,r4
    93c8:	3146d83a 	srl	r3,r6,r5
    93cc:	3108983a 	sll	r4,r6,r4
    93d0:	108ffc34 	orhi	r2,r2,16368
    93d4:	18a6b03a 	or	r19,r3,r2
    93d8:	3924b03a 	or	r18,r7,r4
    93dc:	003fe606 	br	9378 <__b2d+0x84>
    93e0:	293ffd44 	addi	r4,r5,-11
    93e4:	81bffe17 	ldw	r6,-8(r16)
    93e8:	80fffe04 	addi	r3,r16,-8
    93ec:	203ff11e 	bne	r4,zero,93b4 <__b2d+0xc0>
    93f0:	accffc34 	orhi	r19,r21,16368
    93f4:	3025883a 	mov	r18,r6
    93f8:	003fdf06 	br	9378 <__b2d+0x84>
    93fc:	18bfff17 	ldw	r2,-4(r3)
    9400:	110cd83a 	srl	r6,r2,r4
    9404:	003fd706 	br	9364 <__b2d+0x70>
    9408:	18bfff17 	ldw	r2,-4(r3)
    940c:	114ed83a 	srl	r7,r2,r5
    9410:	003fec06 	br	93c4 <__b2d+0xd0>

00009414 <__ratio>:
    9414:	defff904 	addi	sp,sp,-28
    9418:	dc400215 	stw	r17,8(sp)
    941c:	2823883a 	mov	r17,r5
    9420:	d80b883a 	mov	r5,sp
    9424:	dfc00615 	stw	ra,24(sp)
    9428:	dd000515 	stw	r20,20(sp)
    942c:	dcc00415 	stw	r19,16(sp)
    9430:	dc800315 	stw	r18,12(sp)
    9434:	2025883a 	mov	r18,r4
    9438:	00092f40 	call	92f4 <__b2d>
    943c:	8809883a 	mov	r4,r17
    9440:	d9400104 	addi	r5,sp,4
    9444:	1027883a 	mov	r19,r2
    9448:	1829883a 	mov	r20,r3
    944c:	00092f40 	call	92f4 <__b2d>
    9450:	89000417 	ldw	r4,16(r17)
    9454:	91c00417 	ldw	r7,16(r18)
    9458:	d9800117 	ldw	r6,4(sp)
    945c:	180b883a 	mov	r5,r3
    9460:	390fc83a 	sub	r7,r7,r4
    9464:	1009883a 	mov	r4,r2
    9468:	d8800017 	ldw	r2,0(sp)
    946c:	380e917a 	slli	r7,r7,5
    9470:	2011883a 	mov	r8,r4
    9474:	1185c83a 	sub	r2,r2,r6
    9478:	11c5883a 	add	r2,r2,r7
    947c:	1006953a 	slli	r3,r2,20
    9480:	2813883a 	mov	r9,r5
    9484:	00800d0e 	bge	zero,r2,94bc <__ratio+0xa8>
    9488:	1d29883a 	add	r20,r3,r20
    948c:	a00b883a 	mov	r5,r20
    9490:	480f883a 	mov	r7,r9
    9494:	9809883a 	mov	r4,r19
    9498:	400d883a 	mov	r6,r8
    949c:	000f0d80 	call	f0d8 <__divdf3>
    94a0:	dfc00617 	ldw	ra,24(sp)
    94a4:	dd000517 	ldw	r20,20(sp)
    94a8:	dcc00417 	ldw	r19,16(sp)
    94ac:	dc800317 	ldw	r18,12(sp)
    94b0:	dc400217 	ldw	r17,8(sp)
    94b4:	dec00704 	addi	sp,sp,28
    94b8:	f800283a 	ret
    94bc:	28d3c83a 	sub	r9,r5,r3
    94c0:	003ff206 	br	948c <__ratio+0x78>

000094c4 <_mprec_log10>:
    94c4:	defffe04 	addi	sp,sp,-8
    94c8:	008005c4 	movi	r2,23
    94cc:	dc000015 	stw	r16,0(sp)
    94d0:	dfc00115 	stw	ra,4(sp)
    94d4:	2021883a 	mov	r16,r4
    94d8:	11000c16 	blt	r2,r4,950c <_mprec_log10+0x48>
    94dc:	200490fa 	slli	r2,r4,3
    94e0:	00c00074 	movhi	r3,1
    94e4:	18cfb304 	addi	r3,r3,16076
    94e8:	10c5883a 	add	r2,r2,r3
    94ec:	12400117 	ldw	r9,4(r2)
    94f0:	12000017 	ldw	r8,0(r2)
    94f4:	4807883a 	mov	r3,r9
    94f8:	4005883a 	mov	r2,r8
    94fc:	dfc00117 	ldw	ra,4(sp)
    9500:	dc000017 	ldw	r16,0(sp)
    9504:	dec00204 	addi	sp,sp,8
    9508:	f800283a 	ret
    950c:	0011883a 	mov	r8,zero
    9510:	024ffc34 	movhi	r9,16368
    9514:	0005883a 	mov	r2,zero
    9518:	00d00934 	movhi	r3,16420
    951c:	480b883a 	mov	r5,r9
    9520:	4009883a 	mov	r4,r8
    9524:	180f883a 	mov	r7,r3
    9528:	100d883a 	mov	r6,r2
    952c:	000ed140 	call	ed14 <__muldf3>
    9530:	843fffc4 	addi	r16,r16,-1
    9534:	1011883a 	mov	r8,r2
    9538:	1813883a 	mov	r9,r3
    953c:	803ff51e 	bne	r16,zero,9514 <_mprec_log10+0x50>
    9540:	4005883a 	mov	r2,r8
    9544:	4807883a 	mov	r3,r9
    9548:	dfc00117 	ldw	ra,4(sp)
    954c:	dc000017 	ldw	r16,0(sp)
    9550:	dec00204 	addi	sp,sp,8
    9554:	f800283a 	ret

00009558 <__copybits>:
    9558:	297fffc4 	addi	r5,r5,-1
    955c:	30800417 	ldw	r2,16(r6)
    9560:	280bd17a 	srai	r5,r5,5
    9564:	31800504 	addi	r6,r6,20
    9568:	1085883a 	add	r2,r2,r2
    956c:	294b883a 	add	r5,r5,r5
    9570:	294b883a 	add	r5,r5,r5
    9574:	1085883a 	add	r2,r2,r2
    9578:	290b883a 	add	r5,r5,r4
    957c:	3087883a 	add	r3,r6,r2
    9580:	29400104 	addi	r5,r5,4
    9584:	30c0052e 	bgeu	r6,r3,959c <__copybits+0x44>
    9588:	30800017 	ldw	r2,0(r6)
    958c:	31800104 	addi	r6,r6,4
    9590:	20800015 	stw	r2,0(r4)
    9594:	21000104 	addi	r4,r4,4
    9598:	30fffb36 	bltu	r6,r3,9588 <__copybits+0x30>
    959c:	2140032e 	bgeu	r4,r5,95ac <__copybits+0x54>
    95a0:	20000015 	stw	zero,0(r4)
    95a4:	21000104 	addi	r4,r4,4
    95a8:	217ffd36 	bltu	r4,r5,95a0 <__copybits+0x48>
    95ac:	f800283a 	ret

000095b0 <__any_on>:
    95b0:	20800417 	ldw	r2,16(r4)
    95b4:	2807d17a 	srai	r3,r5,5
    95b8:	21000504 	addi	r4,r4,20
    95bc:	10c00d0e 	bge	r2,r3,95f4 <__any_on+0x44>
    95c0:	1085883a 	add	r2,r2,r2
    95c4:	1085883a 	add	r2,r2,r2
    95c8:	208d883a 	add	r6,r4,r2
    95cc:	2180182e 	bgeu	r4,r6,9630 <__any_on+0x80>
    95d0:	30bfff17 	ldw	r2,-4(r6)
    95d4:	30ffff04 	addi	r3,r6,-4
    95d8:	1000041e 	bne	r2,zero,95ec <__any_on+0x3c>
    95dc:	20c0142e 	bgeu	r4,r3,9630 <__any_on+0x80>
    95e0:	18ffff04 	addi	r3,r3,-4
    95e4:	18800017 	ldw	r2,0(r3)
    95e8:	103ffc26 	beq	r2,zero,95dc <__any_on+0x2c>
    95ec:	00800044 	movi	r2,1
    95f0:	f800283a 	ret
    95f4:	18800a0e 	bge	r3,r2,9620 <__any_on+0x70>
    95f8:	294007cc 	andi	r5,r5,31
    95fc:	28000826 	beq	r5,zero,9620 <__any_on+0x70>
    9600:	18c5883a 	add	r2,r3,r3
    9604:	1085883a 	add	r2,r2,r2
    9608:	208d883a 	add	r6,r4,r2
    960c:	30c00017 	ldw	r3,0(r6)
    9610:	1944d83a 	srl	r2,r3,r5
    9614:	1144983a 	sll	r2,r2,r5
    9618:	18bff41e 	bne	r3,r2,95ec <__any_on+0x3c>
    961c:	003feb06 	br	95cc <__any_on+0x1c>
    9620:	18c5883a 	add	r2,r3,r3
    9624:	1085883a 	add	r2,r2,r2
    9628:	208d883a 	add	r6,r4,r2
    962c:	003fe706 	br	95cc <__any_on+0x1c>
    9630:	0005883a 	mov	r2,zero
    9634:	f800283a 	ret

00009638 <_Balloc>:
    9638:	20c01317 	ldw	r3,76(r4)
    963c:	defffb04 	addi	sp,sp,-20
    9640:	dcc00315 	stw	r19,12(sp)
    9644:	dc800215 	stw	r18,8(sp)
    9648:	dfc00415 	stw	ra,16(sp)
    964c:	2825883a 	mov	r18,r5
    9650:	dc400115 	stw	r17,4(sp)
    9654:	dc000015 	stw	r16,0(sp)
    9658:	2027883a 	mov	r19,r4
    965c:	01800404 	movi	r6,16
    9660:	01400104 	movi	r5,4
    9664:	18001726 	beq	r3,zero,96c4 <_Balloc+0x8c>
    9668:	01400044 	movi	r5,1
    966c:	9485883a 	add	r2,r18,r18
    9670:	2ca2983a 	sll	r17,r5,r18
    9674:	1085883a 	add	r2,r2,r2
    9678:	10c7883a 	add	r3,r2,r3
    967c:	1c000017 	ldw	r16,0(r3)
    9680:	8c4d883a 	add	r6,r17,r17
    9684:	318d883a 	add	r6,r6,r6
    9688:	9809883a 	mov	r4,r19
    968c:	31800504 	addi	r6,r6,20
    9690:	80001226 	beq	r16,zero,96dc <_Balloc+0xa4>
    9694:	80800017 	ldw	r2,0(r16)
    9698:	18800015 	stw	r2,0(r3)
    969c:	80000415 	stw	zero,16(r16)
    96a0:	80000315 	stw	zero,12(r16)
    96a4:	8005883a 	mov	r2,r16
    96a8:	dfc00417 	ldw	ra,16(sp)
    96ac:	dcc00317 	ldw	r19,12(sp)
    96b0:	dc800217 	ldw	r18,8(sp)
    96b4:	dc400117 	ldw	r17,4(sp)
    96b8:	dc000017 	ldw	r16,0(sp)
    96bc:	dec00504 	addi	sp,sp,20
    96c0:	f800283a 	ret
    96c4:	000cda40 	call	cda4 <_calloc_r>
    96c8:	1007883a 	mov	r3,r2
    96cc:	0021883a 	mov	r16,zero
    96d0:	98801315 	stw	r2,76(r19)
    96d4:	103fe41e 	bne	r2,zero,9668 <_Balloc+0x30>
    96d8:	003ff206 	br	96a4 <_Balloc+0x6c>
    96dc:	000cda40 	call	cda4 <_calloc_r>
    96e0:	103ff026 	beq	r2,zero,96a4 <_Balloc+0x6c>
    96e4:	1021883a 	mov	r16,r2
    96e8:	14800115 	stw	r18,4(r2)
    96ec:	14400215 	stw	r17,8(r2)
    96f0:	003fea06 	br	969c <_Balloc+0x64>

000096f4 <__d2b>:
    96f4:	defff504 	addi	sp,sp,-44
    96f8:	dcc00515 	stw	r19,20(sp)
    96fc:	04c00044 	movi	r19,1
    9700:	dc000215 	stw	r16,8(sp)
    9704:	2821883a 	mov	r16,r5
    9708:	980b883a 	mov	r5,r19
    970c:	ddc00915 	stw	r23,36(sp)
    9710:	dd800815 	stw	r22,32(sp)
    9714:	dd400715 	stw	r21,28(sp)
    9718:	dd000615 	stw	r20,24(sp)
    971c:	dc800415 	stw	r18,16(sp)
    9720:	dc400315 	stw	r17,12(sp)
    9724:	dfc00a15 	stw	ra,40(sp)
    9728:	3023883a 	mov	r17,r6
    972c:	382d883a 	mov	r22,r7
    9730:	ddc00b17 	ldw	r23,44(sp)
    9734:	00096380 	call	9638 <_Balloc>
    9738:	1025883a 	mov	r18,r2
    973c:	00a00034 	movhi	r2,32768
    9740:	10bfffc4 	addi	r2,r2,-1
    9744:	8888703a 	and	r4,r17,r2
    9748:	202ad53a 	srli	r21,r4,20
    974c:	00800434 	movhi	r2,16
    9750:	10bfffc4 	addi	r2,r2,-1
    9754:	8886703a 	and	r3,r17,r2
    9758:	a829003a 	cmpeq	r20,r21,zero
    975c:	800b883a 	mov	r5,r16
    9760:	d8c00115 	stw	r3,4(sp)
    9764:	94000504 	addi	r16,r18,20
    9768:	a000021e 	bne	r20,zero,9774 <__d2b+0x80>
    976c:	18c00434 	orhi	r3,r3,16
    9770:	d8c00115 	stw	r3,4(sp)
    9774:	28002726 	beq	r5,zero,9814 <__d2b+0x120>
    9778:	d809883a 	mov	r4,sp
    977c:	d9400015 	stw	r5,0(sp)
    9780:	00091500 	call	9150 <__lo0bits>
    9784:	100d883a 	mov	r6,r2
    9788:	10003526 	beq	r2,zero,9860 <__d2b+0x16c>
    978c:	d8c00117 	ldw	r3,4(sp)
    9790:	00800804 	movi	r2,32
    9794:	1185c83a 	sub	r2,r2,r6
    9798:	d9000017 	ldw	r4,0(sp)
    979c:	1886983a 	sll	r3,r3,r2
    97a0:	1906b03a 	or	r3,r3,r4
    97a4:	90c00515 	stw	r3,20(r18)
    97a8:	d8c00117 	ldw	r3,4(sp)
    97ac:	1986d83a 	srl	r3,r3,r6
    97b0:	d8c00115 	stw	r3,4(sp)
    97b4:	180b003a 	cmpeq	r5,r3,zero
    97b8:	00800084 	movi	r2,2
    97bc:	114bc83a 	sub	r5,r2,r5
    97c0:	80c00115 	stw	r3,4(r16)
    97c4:	91400415 	stw	r5,16(r18)
    97c8:	a0001a1e 	bne	r20,zero,9834 <__d2b+0x140>
    97cc:	3545883a 	add	r2,r6,r21
    97d0:	10bef344 	addi	r2,r2,-1075
    97d4:	00c00d44 	movi	r3,53
    97d8:	b0800015 	stw	r2,0(r22)
    97dc:	1987c83a 	sub	r3,r3,r6
    97e0:	b8c00015 	stw	r3,0(r23)
    97e4:	9005883a 	mov	r2,r18
    97e8:	dfc00a17 	ldw	ra,40(sp)
    97ec:	ddc00917 	ldw	r23,36(sp)
    97f0:	dd800817 	ldw	r22,32(sp)
    97f4:	dd400717 	ldw	r21,28(sp)
    97f8:	dd000617 	ldw	r20,24(sp)
    97fc:	dcc00517 	ldw	r19,20(sp)
    9800:	dc800417 	ldw	r18,16(sp)
    9804:	dc400317 	ldw	r17,12(sp)
    9808:	dc000217 	ldw	r16,8(sp)
    980c:	dec00b04 	addi	sp,sp,44
    9810:	f800283a 	ret
    9814:	d9000104 	addi	r4,sp,4
    9818:	00091500 	call	9150 <__lo0bits>
    981c:	11800804 	addi	r6,r2,32
    9820:	d8800117 	ldw	r2,4(sp)
    9824:	94c00415 	stw	r19,16(r18)
    9828:	980b883a 	mov	r5,r19
    982c:	90800515 	stw	r2,20(r18)
    9830:	a03fe626 	beq	r20,zero,97cc <__d2b+0xd8>
    9834:	2945883a 	add	r2,r5,r5
    9838:	1085883a 	add	r2,r2,r2
    983c:	1405883a 	add	r2,r2,r16
    9840:	113fff17 	ldw	r4,-4(r2)
    9844:	30fef384 	addi	r3,r6,-1074
    9848:	2820917a 	slli	r16,r5,5
    984c:	b0c00015 	stw	r3,0(r22)
    9850:	00090e00 	call	90e0 <__hi0bits>
    9854:	80a1c83a 	sub	r16,r16,r2
    9858:	bc000015 	stw	r16,0(r23)
    985c:	003fe106 	br	97e4 <__d2b+0xf0>
    9860:	d8800017 	ldw	r2,0(sp)
    9864:	90800515 	stw	r2,20(r18)
    9868:	d8c00117 	ldw	r3,4(sp)
    986c:	003fd106 	br	97b4 <__d2b+0xc0>

00009870 <__mdiff>:
    9870:	defffb04 	addi	sp,sp,-20
    9874:	dc000015 	stw	r16,0(sp)
    9878:	2821883a 	mov	r16,r5
    987c:	dc800215 	stw	r18,8(sp)
    9880:	300b883a 	mov	r5,r6
    9884:	2025883a 	mov	r18,r4
    9888:	8009883a 	mov	r4,r16
    988c:	dc400115 	stw	r17,4(sp)
    9890:	dfc00415 	stw	ra,16(sp)
    9894:	dcc00315 	stw	r19,12(sp)
    9898:	3023883a 	mov	r17,r6
    989c:	00092140 	call	9214 <__mcmp>
    98a0:	10004226 	beq	r2,zero,99ac <__mdiff+0x13c>
    98a4:	10005016 	blt	r2,zero,99e8 <__mdiff+0x178>
    98a8:	0027883a 	mov	r19,zero
    98ac:	81400117 	ldw	r5,4(r16)
    98b0:	9009883a 	mov	r4,r18
    98b4:	00096380 	call	9638 <_Balloc>
    98b8:	1019883a 	mov	r12,r2
    98bc:	82800417 	ldw	r10,16(r16)
    98c0:	88800417 	ldw	r2,16(r17)
    98c4:	81800504 	addi	r6,r16,20
    98c8:	5287883a 	add	r3,r10,r10
    98cc:	1085883a 	add	r2,r2,r2
    98d0:	18c7883a 	add	r3,r3,r3
    98d4:	1085883a 	add	r2,r2,r2
    98d8:	8a000504 	addi	r8,r17,20
    98dc:	64c00315 	stw	r19,12(r12)
    98e0:	30db883a 	add	r13,r6,r3
    98e4:	4097883a 	add	r11,r8,r2
    98e8:	61c00504 	addi	r7,r12,20
    98ec:	0013883a 	mov	r9,zero
    98f0:	31000017 	ldw	r4,0(r6)
    98f4:	41400017 	ldw	r5,0(r8)
    98f8:	42000104 	addi	r8,r8,4
    98fc:	20bfffcc 	andi	r2,r4,65535
    9900:	28ffffcc 	andi	r3,r5,65535
    9904:	10c5c83a 	sub	r2,r2,r3
    9908:	1245883a 	add	r2,r2,r9
    990c:	2008d43a 	srli	r4,r4,16
    9910:	280ad43a 	srli	r5,r5,16
    9914:	1007d43a 	srai	r3,r2,16
    9918:	3880000d 	sth	r2,0(r7)
    991c:	2149c83a 	sub	r4,r4,r5
    9920:	20c9883a 	add	r4,r4,r3
    9924:	3900008d 	sth	r4,2(r7)
    9928:	31800104 	addi	r6,r6,4
    992c:	39c00104 	addi	r7,r7,4
    9930:	2013d43a 	srai	r9,r4,16
    9934:	42ffee36 	bltu	r8,r11,98f0 <__mdiff+0x80>
    9938:	33400c2e 	bgeu	r6,r13,996c <__mdiff+0xfc>
    993c:	30800017 	ldw	r2,0(r6)
    9940:	31800104 	addi	r6,r6,4
    9944:	10ffffcc 	andi	r3,r2,65535
    9948:	1a47883a 	add	r3,r3,r9
    994c:	1004d43a 	srli	r2,r2,16
    9950:	1809d43a 	srai	r4,r3,16
    9954:	38c0000d 	sth	r3,0(r7)
    9958:	1105883a 	add	r2,r2,r4
    995c:	3880008d 	sth	r2,2(r7)
    9960:	1013d43a 	srai	r9,r2,16
    9964:	39c00104 	addi	r7,r7,4
    9968:	337ff436 	bltu	r6,r13,993c <__mdiff+0xcc>
    996c:	38bfff17 	ldw	r2,-4(r7)
    9970:	38ffff04 	addi	r3,r7,-4
    9974:	1000041e 	bne	r2,zero,9988 <__mdiff+0x118>
    9978:	18ffff04 	addi	r3,r3,-4
    997c:	18800017 	ldw	r2,0(r3)
    9980:	52bfffc4 	addi	r10,r10,-1
    9984:	103ffc26 	beq	r2,zero,9978 <__mdiff+0x108>
    9988:	6005883a 	mov	r2,r12
    998c:	62800415 	stw	r10,16(r12)
    9990:	dfc00417 	ldw	ra,16(sp)
    9994:	dcc00317 	ldw	r19,12(sp)
    9998:	dc800217 	ldw	r18,8(sp)
    999c:	dc400117 	ldw	r17,4(sp)
    99a0:	dc000017 	ldw	r16,0(sp)
    99a4:	dec00504 	addi	sp,sp,20
    99a8:	f800283a 	ret
    99ac:	9009883a 	mov	r4,r18
    99b0:	000b883a 	mov	r5,zero
    99b4:	00096380 	call	9638 <_Balloc>
    99b8:	1019883a 	mov	r12,r2
    99bc:	00800044 	movi	r2,1
    99c0:	60800415 	stw	r2,16(r12)
    99c4:	6005883a 	mov	r2,r12
    99c8:	60000515 	stw	zero,20(r12)
    99cc:	dfc00417 	ldw	ra,16(sp)
    99d0:	dcc00317 	ldw	r19,12(sp)
    99d4:	dc800217 	ldw	r18,8(sp)
    99d8:	dc400117 	ldw	r17,4(sp)
    99dc:	dc000017 	ldw	r16,0(sp)
    99e0:	dec00504 	addi	sp,sp,20
    99e4:	f800283a 	ret
    99e8:	880d883a 	mov	r6,r17
    99ec:	04c00044 	movi	r19,1
    99f0:	8023883a 	mov	r17,r16
    99f4:	3021883a 	mov	r16,r6
    99f8:	003fac06 	br	98ac <__mdiff+0x3c>

000099fc <__lshift>:
    99fc:	defff904 	addi	sp,sp,-28
    9a00:	28800417 	ldw	r2,16(r5)
    9a04:	dc000015 	stw	r16,0(sp)
    9a08:	3021d17a 	srai	r16,r6,5
    9a0c:	28c00217 	ldw	r3,8(r5)
    9a10:	10800044 	addi	r2,r2,1
    9a14:	dc400115 	stw	r17,4(sp)
    9a18:	80a3883a 	add	r17,r16,r2
    9a1c:	dd400515 	stw	r21,20(sp)
    9a20:	dd000415 	stw	r20,16(sp)
    9a24:	dc800215 	stw	r18,8(sp)
    9a28:	dfc00615 	stw	ra,24(sp)
    9a2c:	2825883a 	mov	r18,r5
    9a30:	dcc00315 	stw	r19,12(sp)
    9a34:	3029883a 	mov	r20,r6
    9a38:	202b883a 	mov	r21,r4
    9a3c:	29400117 	ldw	r5,4(r5)
    9a40:	1c40030e 	bge	r3,r17,9a50 <__lshift+0x54>
    9a44:	18c7883a 	add	r3,r3,r3
    9a48:	29400044 	addi	r5,r5,1
    9a4c:	1c7ffd16 	blt	r3,r17,9a44 <__lshift+0x48>
    9a50:	a809883a 	mov	r4,r21
    9a54:	00096380 	call	9638 <_Balloc>
    9a58:	1027883a 	mov	r19,r2
    9a5c:	11400504 	addi	r5,r2,20
    9a60:	0400090e 	bge	zero,r16,9a88 <__lshift+0x8c>
    9a64:	2805883a 	mov	r2,r5
    9a68:	0007883a 	mov	r3,zero
    9a6c:	18c00044 	addi	r3,r3,1
    9a70:	10000015 	stw	zero,0(r2)
    9a74:	10800104 	addi	r2,r2,4
    9a78:	80fffc1e 	bne	r16,r3,9a6c <__lshift+0x70>
    9a7c:	8405883a 	add	r2,r16,r16
    9a80:	1085883a 	add	r2,r2,r2
    9a84:	288b883a 	add	r5,r5,r2
    9a88:	90800417 	ldw	r2,16(r18)
    9a8c:	91000504 	addi	r4,r18,20
    9a90:	a18007cc 	andi	r6,r20,31
    9a94:	1085883a 	add	r2,r2,r2
    9a98:	1085883a 	add	r2,r2,r2
    9a9c:	208f883a 	add	r7,r4,r2
    9aa0:	30001e26 	beq	r6,zero,9b1c <__lshift+0x120>
    9aa4:	00800804 	movi	r2,32
    9aa8:	1191c83a 	sub	r8,r2,r6
    9aac:	0007883a 	mov	r3,zero
    9ab0:	20800017 	ldw	r2,0(r4)
    9ab4:	1184983a 	sll	r2,r2,r6
    9ab8:	1884b03a 	or	r2,r3,r2
    9abc:	28800015 	stw	r2,0(r5)
    9ac0:	20c00017 	ldw	r3,0(r4)
    9ac4:	21000104 	addi	r4,r4,4
    9ac8:	29400104 	addi	r5,r5,4
    9acc:	1a06d83a 	srl	r3,r3,r8
    9ad0:	21fff736 	bltu	r4,r7,9ab0 <__lshift+0xb4>
    9ad4:	28c00015 	stw	r3,0(r5)
    9ad8:	18000126 	beq	r3,zero,9ae0 <__lshift+0xe4>
    9adc:	8c400044 	addi	r17,r17,1
    9ae0:	88bfffc4 	addi	r2,r17,-1
    9ae4:	98800415 	stw	r2,16(r19)
    9ae8:	a809883a 	mov	r4,r21
    9aec:	900b883a 	mov	r5,r18
    9af0:	00090b80 	call	90b8 <_Bfree>
    9af4:	9805883a 	mov	r2,r19
    9af8:	dfc00617 	ldw	ra,24(sp)
    9afc:	dd400517 	ldw	r21,20(sp)
    9b00:	dd000417 	ldw	r20,16(sp)
    9b04:	dcc00317 	ldw	r19,12(sp)
    9b08:	dc800217 	ldw	r18,8(sp)
    9b0c:	dc400117 	ldw	r17,4(sp)
    9b10:	dc000017 	ldw	r16,0(sp)
    9b14:	dec00704 	addi	sp,sp,28
    9b18:	f800283a 	ret
    9b1c:	20800017 	ldw	r2,0(r4)
    9b20:	21000104 	addi	r4,r4,4
    9b24:	28800015 	stw	r2,0(r5)
    9b28:	29400104 	addi	r5,r5,4
    9b2c:	21ffec2e 	bgeu	r4,r7,9ae0 <__lshift+0xe4>
    9b30:	20800017 	ldw	r2,0(r4)
    9b34:	21000104 	addi	r4,r4,4
    9b38:	28800015 	stw	r2,0(r5)
    9b3c:	29400104 	addi	r5,r5,4
    9b40:	21fff636 	bltu	r4,r7,9b1c <__lshift+0x120>
    9b44:	003fe606 	br	9ae0 <__lshift+0xe4>

00009b48 <__multiply>:
    9b48:	defff904 	addi	sp,sp,-28
    9b4c:	dcc00315 	stw	r19,12(sp)
    9b50:	dc800215 	stw	r18,8(sp)
    9b54:	2cc00417 	ldw	r19,16(r5)
    9b58:	34800417 	ldw	r18,16(r6)
    9b5c:	dd000415 	stw	r20,16(sp)
    9b60:	dc400115 	stw	r17,4(sp)
    9b64:	dfc00615 	stw	ra,24(sp)
    9b68:	dd400515 	stw	r21,20(sp)
    9b6c:	dc000015 	stw	r16,0(sp)
    9b70:	2823883a 	mov	r17,r5
    9b74:	3029883a 	mov	r20,r6
    9b78:	9c80040e 	bge	r19,r18,9b8c <__multiply+0x44>
    9b7c:	9027883a 	mov	r19,r18
    9b80:	2c800417 	ldw	r18,16(r5)
    9b84:	2829883a 	mov	r20,r5
    9b88:	3023883a 	mov	r17,r6
    9b8c:	88800217 	ldw	r2,8(r17)
    9b90:	9ca1883a 	add	r16,r19,r18
    9b94:	89400117 	ldw	r5,4(r17)
    9b98:	1400010e 	bge	r2,r16,9ba0 <__multiply+0x58>
    9b9c:	29400044 	addi	r5,r5,1
    9ba0:	00096380 	call	9638 <_Balloc>
    9ba4:	102b883a 	mov	r21,r2
    9ba8:	8405883a 	add	r2,r16,r16
    9bac:	1085883a 	add	r2,r2,r2
    9bb0:	a9000504 	addi	r4,r21,20
    9bb4:	209d883a 	add	r14,r4,r2
    9bb8:	2380042e 	bgeu	r4,r14,9bcc <__multiply+0x84>
    9bbc:	2005883a 	mov	r2,r4
    9bc0:	10000015 	stw	zero,0(r2)
    9bc4:	10800104 	addi	r2,r2,4
    9bc8:	13bffd36 	bltu	r2,r14,9bc0 <__multiply+0x78>
    9bcc:	9485883a 	add	r2,r18,r18
    9bd0:	9cc7883a 	add	r3,r19,r19
    9bd4:	a1800504 	addi	r6,r20,20
    9bd8:	1085883a 	add	r2,r2,r2
    9bdc:	8b400504 	addi	r13,r17,20
    9be0:	18c7883a 	add	r3,r3,r3
    9be4:	309f883a 	add	r15,r6,r2
    9be8:	68d7883a 	add	r11,r13,r3
    9bec:	33c03b2e 	bgeu	r6,r15,9cdc <__multiply+0x194>
    9bf0:	2019883a 	mov	r12,r4
    9bf4:	30800017 	ldw	r2,0(r6)
    9bf8:	127fffcc 	andi	r9,r2,65535
    9bfc:	48001826 	beq	r9,zero,9c60 <__multiply+0x118>
    9c00:	6811883a 	mov	r8,r13
    9c04:	600f883a 	mov	r7,r12
    9c08:	0015883a 	mov	r10,zero
    9c0c:	40c00017 	ldw	r3,0(r8)
    9c10:	39400017 	ldw	r5,0(r7)
    9c14:	42000104 	addi	r8,r8,4
    9c18:	193fffcc 	andi	r4,r3,65535
    9c1c:	4909383a 	mul	r4,r9,r4
    9c20:	1806d43a 	srli	r3,r3,16
    9c24:	28bfffcc 	andi	r2,r5,65535
    9c28:	5085883a 	add	r2,r10,r2
    9c2c:	2089883a 	add	r4,r4,r2
    9c30:	48c7383a 	mul	r3,r9,r3
    9c34:	280ad43a 	srli	r5,r5,16
    9c38:	2004d43a 	srli	r2,r4,16
    9c3c:	3900000d 	sth	r4,0(r7)
    9c40:	1947883a 	add	r3,r3,r5
    9c44:	10c5883a 	add	r2,r2,r3
    9c48:	3880008d 	sth	r2,2(r7)
    9c4c:	1014d43a 	srli	r10,r2,16
    9c50:	39c00104 	addi	r7,r7,4
    9c54:	42ffed36 	bltu	r8,r11,9c0c <__multiply+0xc4>
    9c58:	3a800015 	stw	r10,0(r7)
    9c5c:	30800017 	ldw	r2,0(r6)
    9c60:	1012d43a 	srli	r9,r2,16
    9c64:	48001926 	beq	r9,zero,9ccc <__multiply+0x184>
    9c68:	60800017 	ldw	r2,0(r12)
    9c6c:	6811883a 	mov	r8,r13
    9c70:	600f883a 	mov	r7,r12
    9c74:	0015883a 	mov	r10,zero
    9c78:	100b883a 	mov	r5,r2
    9c7c:	41000017 	ldw	r4,0(r8)
    9c80:	2806d43a 	srli	r3,r5,16
    9c84:	3880000d 	sth	r2,0(r7)
    9c88:	20bfffcc 	andi	r2,r4,65535
    9c8c:	4885383a 	mul	r2,r9,r2
    9c90:	50c7883a 	add	r3,r10,r3
    9c94:	2008d43a 	srli	r4,r4,16
    9c98:	10c5883a 	add	r2,r2,r3
    9c9c:	3880008d 	sth	r2,2(r7)
    9ca0:	39c00104 	addi	r7,r7,4
    9ca4:	39400017 	ldw	r5,0(r7)
    9ca8:	4909383a 	mul	r4,r9,r4
    9cac:	1004d43a 	srli	r2,r2,16
    9cb0:	28ffffcc 	andi	r3,r5,65535
    9cb4:	20c9883a 	add	r4,r4,r3
    9cb8:	1105883a 	add	r2,r2,r4
    9cbc:	42000104 	addi	r8,r8,4
    9cc0:	1014d43a 	srli	r10,r2,16
    9cc4:	42ffed36 	bltu	r8,r11,9c7c <__multiply+0x134>
    9cc8:	38800015 	stw	r2,0(r7)
    9ccc:	31800104 	addi	r6,r6,4
    9cd0:	33c0022e 	bgeu	r6,r15,9cdc <__multiply+0x194>
    9cd4:	63000104 	addi	r12,r12,4
    9cd8:	003fc606 	br	9bf4 <__multiply+0xac>
    9cdc:	0400090e 	bge	zero,r16,9d04 <__multiply+0x1bc>
    9ce0:	70bfff17 	ldw	r2,-4(r14)
    9ce4:	70ffff04 	addi	r3,r14,-4
    9ce8:	10000326 	beq	r2,zero,9cf8 <__multiply+0x1b0>
    9cec:	00000506 	br	9d04 <__multiply+0x1bc>
    9cf0:	18800017 	ldw	r2,0(r3)
    9cf4:	1000031e 	bne	r2,zero,9d04 <__multiply+0x1bc>
    9cf8:	843fffc4 	addi	r16,r16,-1
    9cfc:	18ffff04 	addi	r3,r3,-4
    9d00:	803ffb1e 	bne	r16,zero,9cf0 <__multiply+0x1a8>
    9d04:	a805883a 	mov	r2,r21
    9d08:	ac000415 	stw	r16,16(r21)
    9d0c:	dfc00617 	ldw	ra,24(sp)
    9d10:	dd400517 	ldw	r21,20(sp)
    9d14:	dd000417 	ldw	r20,16(sp)
    9d18:	dcc00317 	ldw	r19,12(sp)
    9d1c:	dc800217 	ldw	r18,8(sp)
    9d20:	dc400117 	ldw	r17,4(sp)
    9d24:	dc000017 	ldw	r16,0(sp)
    9d28:	dec00704 	addi	sp,sp,28
    9d2c:	f800283a 	ret

00009d30 <__i2b>:
    9d30:	defffd04 	addi	sp,sp,-12
    9d34:	dc000015 	stw	r16,0(sp)
    9d38:	04000044 	movi	r16,1
    9d3c:	dc800115 	stw	r18,4(sp)
    9d40:	2825883a 	mov	r18,r5
    9d44:	800b883a 	mov	r5,r16
    9d48:	dfc00215 	stw	ra,8(sp)
    9d4c:	00096380 	call	9638 <_Balloc>
    9d50:	14000415 	stw	r16,16(r2)
    9d54:	14800515 	stw	r18,20(r2)
    9d58:	dfc00217 	ldw	ra,8(sp)
    9d5c:	dc800117 	ldw	r18,4(sp)
    9d60:	dc000017 	ldw	r16,0(sp)
    9d64:	dec00304 	addi	sp,sp,12
    9d68:	f800283a 	ret

00009d6c <__multadd>:
    9d6c:	defffa04 	addi	sp,sp,-24
    9d70:	dc800215 	stw	r18,8(sp)
    9d74:	2c800417 	ldw	r18,16(r5)
    9d78:	dd000415 	stw	r20,16(sp)
    9d7c:	dcc00315 	stw	r19,12(sp)
    9d80:	dc000015 	stw	r16,0(sp)
    9d84:	dfc00515 	stw	ra,20(sp)
    9d88:	3821883a 	mov	r16,r7
    9d8c:	dc400115 	stw	r17,4(sp)
    9d90:	2827883a 	mov	r19,r5
    9d94:	2029883a 	mov	r20,r4
    9d98:	2a000504 	addi	r8,r5,20
    9d9c:	000f883a 	mov	r7,zero
    9da0:	40800017 	ldw	r2,0(r8)
    9da4:	39c00044 	addi	r7,r7,1
    9da8:	10ffffcc 	andi	r3,r2,65535
    9dac:	1987383a 	mul	r3,r3,r6
    9db0:	1004d43a 	srli	r2,r2,16
    9db4:	1c07883a 	add	r3,r3,r16
    9db8:	180ad43a 	srli	r5,r3,16
    9dbc:	1185383a 	mul	r2,r2,r6
    9dc0:	18ffffcc 	andi	r3,r3,65535
    9dc4:	1145883a 	add	r2,r2,r5
    9dc8:	1008943a 	slli	r4,r2,16
    9dcc:	1020d43a 	srli	r16,r2,16
    9dd0:	20c9883a 	add	r4,r4,r3
    9dd4:	41000015 	stw	r4,0(r8)
    9dd8:	42000104 	addi	r8,r8,4
    9ddc:	3cbff016 	blt	r7,r18,9da0 <__multadd+0x34>
    9de0:	80000826 	beq	r16,zero,9e04 <__multadd+0x98>
    9de4:	98800217 	ldw	r2,8(r19)
    9de8:	90800f0e 	bge	r18,r2,9e28 <__multadd+0xbc>
    9dec:	9485883a 	add	r2,r18,r18
    9df0:	1085883a 	add	r2,r2,r2
    9df4:	14c5883a 	add	r2,r2,r19
    9df8:	90c00044 	addi	r3,r18,1
    9dfc:	14000515 	stw	r16,20(r2)
    9e00:	98c00415 	stw	r3,16(r19)
    9e04:	9805883a 	mov	r2,r19
    9e08:	dfc00517 	ldw	ra,20(sp)
    9e0c:	dd000417 	ldw	r20,16(sp)
    9e10:	dcc00317 	ldw	r19,12(sp)
    9e14:	dc800217 	ldw	r18,8(sp)
    9e18:	dc400117 	ldw	r17,4(sp)
    9e1c:	dc000017 	ldw	r16,0(sp)
    9e20:	dec00604 	addi	sp,sp,24
    9e24:	f800283a 	ret
    9e28:	99400117 	ldw	r5,4(r19)
    9e2c:	a009883a 	mov	r4,r20
    9e30:	29400044 	addi	r5,r5,1
    9e34:	00096380 	call	9638 <_Balloc>
    9e38:	99800417 	ldw	r6,16(r19)
    9e3c:	99400304 	addi	r5,r19,12
    9e40:	11000304 	addi	r4,r2,12
    9e44:	318d883a 	add	r6,r6,r6
    9e48:	318d883a 	add	r6,r6,r6
    9e4c:	31800204 	addi	r6,r6,8
    9e50:	1023883a 	mov	r17,r2
    9e54:	0002f540 	call	2f54 <memcpy>
    9e58:	980b883a 	mov	r5,r19
    9e5c:	a009883a 	mov	r4,r20
    9e60:	00090b80 	call	90b8 <_Bfree>
    9e64:	8827883a 	mov	r19,r17
    9e68:	003fe006 	br	9dec <__multadd+0x80>

00009e6c <__pow5mult>:
    9e6c:	defffa04 	addi	sp,sp,-24
    9e70:	308000cc 	andi	r2,r6,3
    9e74:	dd000415 	stw	r20,16(sp)
    9e78:	dcc00315 	stw	r19,12(sp)
    9e7c:	dc000015 	stw	r16,0(sp)
    9e80:	dfc00515 	stw	ra,20(sp)
    9e84:	dc800215 	stw	r18,8(sp)
    9e88:	dc400115 	stw	r17,4(sp)
    9e8c:	3021883a 	mov	r16,r6
    9e90:	2027883a 	mov	r19,r4
    9e94:	2829883a 	mov	r20,r5
    9e98:	10002b1e 	bne	r2,zero,9f48 <__pow5mult+0xdc>
    9e9c:	8025d0ba 	srai	r18,r16,2
    9ea0:	90001b26 	beq	r18,zero,9f10 <__pow5mult+0xa4>
    9ea4:	9c001217 	ldw	r16,72(r19)
    9ea8:	8000081e 	bne	r16,zero,9ecc <__pow5mult+0x60>
    9eac:	00003006 	br	9f70 <__pow5mult+0x104>
    9eb0:	800b883a 	mov	r5,r16
    9eb4:	800d883a 	mov	r6,r16
    9eb8:	9809883a 	mov	r4,r19
    9ebc:	90001426 	beq	r18,zero,9f10 <__pow5mult+0xa4>
    9ec0:	80800017 	ldw	r2,0(r16)
    9ec4:	10001b26 	beq	r2,zero,9f34 <__pow5mult+0xc8>
    9ec8:	1021883a 	mov	r16,r2
    9ecc:	9080004c 	andi	r2,r18,1
    9ed0:	1005003a 	cmpeq	r2,r2,zero
    9ed4:	9025d07a 	srai	r18,r18,1
    9ed8:	800d883a 	mov	r6,r16
    9edc:	9809883a 	mov	r4,r19
    9ee0:	a00b883a 	mov	r5,r20
    9ee4:	103ff21e 	bne	r2,zero,9eb0 <__pow5mult+0x44>
    9ee8:	0009b480 	call	9b48 <__multiply>
    9eec:	a00b883a 	mov	r5,r20
    9ef0:	9809883a 	mov	r4,r19
    9ef4:	1023883a 	mov	r17,r2
    9ef8:	00090b80 	call	90b8 <_Bfree>
    9efc:	8829883a 	mov	r20,r17
    9f00:	800b883a 	mov	r5,r16
    9f04:	800d883a 	mov	r6,r16
    9f08:	9809883a 	mov	r4,r19
    9f0c:	903fec1e 	bne	r18,zero,9ec0 <__pow5mult+0x54>
    9f10:	a005883a 	mov	r2,r20
    9f14:	dfc00517 	ldw	ra,20(sp)
    9f18:	dd000417 	ldw	r20,16(sp)
    9f1c:	dcc00317 	ldw	r19,12(sp)
    9f20:	dc800217 	ldw	r18,8(sp)
    9f24:	dc400117 	ldw	r17,4(sp)
    9f28:	dc000017 	ldw	r16,0(sp)
    9f2c:	dec00604 	addi	sp,sp,24
    9f30:	f800283a 	ret
    9f34:	0009b480 	call	9b48 <__multiply>
    9f38:	80800015 	stw	r2,0(r16)
    9f3c:	1021883a 	mov	r16,r2
    9f40:	10000015 	stw	zero,0(r2)
    9f44:	003fe106 	br	9ecc <__pow5mult+0x60>
    9f48:	1085883a 	add	r2,r2,r2
    9f4c:	00c00074 	movhi	r3,1
    9f50:	18cff904 	addi	r3,r3,16356
    9f54:	1085883a 	add	r2,r2,r2
    9f58:	10c5883a 	add	r2,r2,r3
    9f5c:	11bfff17 	ldw	r6,-4(r2)
    9f60:	000f883a 	mov	r7,zero
    9f64:	0009d6c0 	call	9d6c <__multadd>
    9f68:	1029883a 	mov	r20,r2
    9f6c:	003fcb06 	br	9e9c <__pow5mult+0x30>
    9f70:	9809883a 	mov	r4,r19
    9f74:	01409c44 	movi	r5,625
    9f78:	0009d300 	call	9d30 <__i2b>
    9f7c:	98801215 	stw	r2,72(r19)
    9f80:	1021883a 	mov	r16,r2
    9f84:	10000015 	stw	zero,0(r2)
    9f88:	003fd006 	br	9ecc <__pow5mult+0x60>

00009f8c <__s2b>:
    9f8c:	defff904 	addi	sp,sp,-28
    9f90:	dcc00315 	stw	r19,12(sp)
    9f94:	dc800215 	stw	r18,8(sp)
    9f98:	2827883a 	mov	r19,r5
    9f9c:	2025883a 	mov	r18,r4
    9fa0:	01400244 	movi	r5,9
    9fa4:	39000204 	addi	r4,r7,8
    9fa8:	dd000415 	stw	r20,16(sp)
    9fac:	dc400115 	stw	r17,4(sp)
    9fb0:	dfc00615 	stw	ra,24(sp)
    9fb4:	dd400515 	stw	r21,20(sp)
    9fb8:	dc000015 	stw	r16,0(sp)
    9fbc:	3829883a 	mov	r20,r7
    9fc0:	3023883a 	mov	r17,r6
    9fc4:	000fab40 	call	fab4 <__divsi3>
    9fc8:	00c00044 	movi	r3,1
    9fcc:	1880350e 	bge	r3,r2,a0a4 <__s2b+0x118>
    9fd0:	000b883a 	mov	r5,zero
    9fd4:	18c7883a 	add	r3,r3,r3
    9fd8:	29400044 	addi	r5,r5,1
    9fdc:	18bffd16 	blt	r3,r2,9fd4 <__s2b+0x48>
    9fe0:	9009883a 	mov	r4,r18
    9fe4:	00096380 	call	9638 <_Balloc>
    9fe8:	1011883a 	mov	r8,r2
    9fec:	d8800717 	ldw	r2,28(sp)
    9ff0:	00c00044 	movi	r3,1
    9ff4:	01800244 	movi	r6,9
    9ff8:	40800515 	stw	r2,20(r8)
    9ffc:	40c00415 	stw	r3,16(r8)
    a000:	3440260e 	bge	r6,r17,a09c <__s2b+0x110>
    a004:	3021883a 	mov	r16,r6
    a008:	99ab883a 	add	r21,r19,r6
    a00c:	9c05883a 	add	r2,r19,r16
    a010:	11c00007 	ldb	r7,0(r2)
    a014:	400b883a 	mov	r5,r8
    a018:	9009883a 	mov	r4,r18
    a01c:	39fff404 	addi	r7,r7,-48
    a020:	01800284 	movi	r6,10
    a024:	0009d6c0 	call	9d6c <__multadd>
    a028:	84000044 	addi	r16,r16,1
    a02c:	1011883a 	mov	r8,r2
    a030:	8c3ff61e 	bne	r17,r16,a00c <__s2b+0x80>
    a034:	ac45883a 	add	r2,r21,r17
    a038:	117ffe04 	addi	r5,r2,-8
    a03c:	880d883a 	mov	r6,r17
    a040:	35000c0e 	bge	r6,r20,a074 <__s2b+0xe8>
    a044:	a185c83a 	sub	r2,r20,r6
    a048:	2821883a 	mov	r16,r5
    a04c:	28a3883a 	add	r17,r5,r2
    a050:	81c00007 	ldb	r7,0(r16)
    a054:	400b883a 	mov	r5,r8
    a058:	9009883a 	mov	r4,r18
    a05c:	39fff404 	addi	r7,r7,-48
    a060:	01800284 	movi	r6,10
    a064:	0009d6c0 	call	9d6c <__multadd>
    a068:	84000044 	addi	r16,r16,1
    a06c:	1011883a 	mov	r8,r2
    a070:	847ff71e 	bne	r16,r17,a050 <__s2b+0xc4>
    a074:	4005883a 	mov	r2,r8
    a078:	dfc00617 	ldw	ra,24(sp)
    a07c:	dd400517 	ldw	r21,20(sp)
    a080:	dd000417 	ldw	r20,16(sp)
    a084:	dcc00317 	ldw	r19,12(sp)
    a088:	dc800217 	ldw	r18,8(sp)
    a08c:	dc400117 	ldw	r17,4(sp)
    a090:	dc000017 	ldw	r16,0(sp)
    a094:	dec00704 	addi	sp,sp,28
    a098:	f800283a 	ret
    a09c:	99400284 	addi	r5,r19,10
    a0a0:	003fe706 	br	a040 <__s2b+0xb4>
    a0a4:	000b883a 	mov	r5,zero
    a0a8:	003fcd06 	br	9fe0 <__s2b+0x54>

0000a0ac <_read_r>:
    a0ac:	defffd04 	addi	sp,sp,-12
    a0b0:	dc000015 	stw	r16,0(sp)
    a0b4:	04000074 	movhi	r16,1
    a0b8:	841de504 	addi	r16,r16,30612
    a0bc:	dc400115 	stw	r17,4(sp)
    a0c0:	80000015 	stw	zero,0(r16)
    a0c4:	2023883a 	mov	r17,r4
    a0c8:	2809883a 	mov	r4,r5
    a0cc:	300b883a 	mov	r5,r6
    a0d0:	380d883a 	mov	r6,r7
    a0d4:	dfc00215 	stw	ra,8(sp)
    a0d8:	0010d9c0 	call	10d9c <read>
    a0dc:	1007883a 	mov	r3,r2
    a0e0:	00bfffc4 	movi	r2,-1
    a0e4:	18800626 	beq	r3,r2,a100 <_read_r+0x54>
    a0e8:	1805883a 	mov	r2,r3
    a0ec:	dfc00217 	ldw	ra,8(sp)
    a0f0:	dc400117 	ldw	r17,4(sp)
    a0f4:	dc000017 	ldw	r16,0(sp)
    a0f8:	dec00304 	addi	sp,sp,12
    a0fc:	f800283a 	ret
    a100:	80800017 	ldw	r2,0(r16)
    a104:	103ff826 	beq	r2,zero,a0e8 <_read_r+0x3c>
    a108:	88800015 	stw	r2,0(r17)
    a10c:	1805883a 	mov	r2,r3
    a110:	dfc00217 	ldw	ra,8(sp)
    a114:	dc400117 	ldw	r17,4(sp)
    a118:	dc000017 	ldw	r16,0(sp)
    a11c:	dec00304 	addi	sp,sp,12
    a120:	f800283a 	ret

0000a124 <_realloc_r>:
    a124:	defff404 	addi	sp,sp,-48
    a128:	dd800815 	stw	r22,32(sp)
    a12c:	dc800415 	stw	r18,16(sp)
    a130:	dc400315 	stw	r17,12(sp)
    a134:	dfc00b15 	stw	ra,44(sp)
    a138:	df000a15 	stw	fp,40(sp)
    a13c:	ddc00915 	stw	r23,36(sp)
    a140:	dd400715 	stw	r21,28(sp)
    a144:	dd000615 	stw	r20,24(sp)
    a148:	dcc00515 	stw	r19,20(sp)
    a14c:	dc000215 	stw	r16,8(sp)
    a150:	2825883a 	mov	r18,r5
    a154:	3023883a 	mov	r17,r6
    a158:	202d883a 	mov	r22,r4
    a15c:	2800c926 	beq	r5,zero,a484 <_realloc_r+0x360>
    a160:	0010a980 	call	10a98 <__malloc_lock>
    a164:	943ffe04 	addi	r16,r18,-8
    a168:	88c002c4 	addi	r3,r17,11
    a16c:	00800584 	movi	r2,22
    a170:	82000117 	ldw	r8,4(r16)
    a174:	10c01b2e 	bgeu	r2,r3,a1e4 <_realloc_r+0xc0>
    a178:	00bffe04 	movi	r2,-8
    a17c:	188e703a 	and	r7,r3,r2
    a180:	3839883a 	mov	fp,r7
    a184:	38001a16 	blt	r7,zero,a1f0 <_realloc_r+0xcc>
    a188:	e4401936 	bltu	fp,r17,a1f0 <_realloc_r+0xcc>
    a18c:	013fff04 	movi	r4,-4
    a190:	4126703a 	and	r19,r8,r4
    a194:	99c02616 	blt	r19,r7,a230 <_realloc_r+0x10c>
    a198:	802b883a 	mov	r21,r16
    a19c:	9829883a 	mov	r20,r19
    a1a0:	84000204 	addi	r16,r16,8
    a1a4:	a80f883a 	mov	r7,r21
    a1a8:	a70dc83a 	sub	r6,r20,fp
    a1ac:	008003c4 	movi	r2,15
    a1b0:	1180c136 	bltu	r2,r6,a4b8 <_realloc_r+0x394>
    a1b4:	38800117 	ldw	r2,4(r7)
    a1b8:	a549883a 	add	r4,r20,r21
    a1bc:	1080004c 	andi	r2,r2,1
    a1c0:	a084b03a 	or	r2,r20,r2
    a1c4:	38800115 	stw	r2,4(r7)
    a1c8:	20c00117 	ldw	r3,4(r4)
    a1cc:	18c00054 	ori	r3,r3,1
    a1d0:	20c00115 	stw	r3,4(r4)
    a1d4:	b009883a 	mov	r4,r22
    a1d8:	0010ab80 	call	10ab8 <__malloc_unlock>
    a1dc:	8023883a 	mov	r17,r16
    a1e0:	00000606 	br	a1fc <_realloc_r+0xd8>
    a1e4:	01c00404 	movi	r7,16
    a1e8:	3839883a 	mov	fp,r7
    a1ec:	e47fe72e 	bgeu	fp,r17,a18c <_realloc_r+0x68>
    a1f0:	00800304 	movi	r2,12
    a1f4:	0023883a 	mov	r17,zero
    a1f8:	b0800015 	stw	r2,0(r22)
    a1fc:	8805883a 	mov	r2,r17
    a200:	dfc00b17 	ldw	ra,44(sp)
    a204:	df000a17 	ldw	fp,40(sp)
    a208:	ddc00917 	ldw	r23,36(sp)
    a20c:	dd800817 	ldw	r22,32(sp)
    a210:	dd400717 	ldw	r21,28(sp)
    a214:	dd000617 	ldw	r20,24(sp)
    a218:	dcc00517 	ldw	r19,20(sp)
    a21c:	dc800417 	ldw	r18,16(sp)
    a220:	dc400317 	ldw	r17,12(sp)
    a224:	dc000217 	ldw	r16,8(sp)
    a228:	dec00c04 	addi	sp,sp,48
    a22c:	f800283a 	ret
    a230:	00800074 	movhi	r2,1
    a234:	10916604 	addi	r2,r2,17816
    a238:	12400217 	ldw	r9,8(r2)
    a23c:	84cd883a 	add	r6,r16,r19
    a240:	802b883a 	mov	r21,r16
    a244:	3240b926 	beq	r6,r9,a52c <_realloc_r+0x408>
    a248:	31400117 	ldw	r5,4(r6)
    a24c:	00bfff84 	movi	r2,-2
    a250:	2884703a 	and	r2,r5,r2
    a254:	1185883a 	add	r2,r2,r6
    a258:	10c00117 	ldw	r3,4(r2)
    a25c:	18c0004c 	andi	r3,r3,1
    a260:	1807003a 	cmpeq	r3,r3,zero
    a264:	1800a326 	beq	r3,zero,a4f4 <_realloc_r+0x3d0>
    a268:	2908703a 	and	r4,r5,r4
    a26c:	9929883a 	add	r20,r19,r4
    a270:	a1c0a30e 	bge	r20,r7,a500 <_realloc_r+0x3dc>
    a274:	4080004c 	andi	r2,r8,1
    a278:	1000551e 	bne	r2,zero,a3d0 <_realloc_r+0x2ac>
    a27c:	80800017 	ldw	r2,0(r16)
    a280:	80afc83a 	sub	r23,r16,r2
    a284:	b8c00117 	ldw	r3,4(r23)
    a288:	00bfff04 	movi	r2,-4
    a28c:	1884703a 	and	r2,r3,r2
    a290:	30002e26 	beq	r6,zero,a34c <_realloc_r+0x228>
    a294:	3240b926 	beq	r6,r9,a57c <_realloc_r+0x458>
    a298:	98a9883a 	add	r20,r19,r2
    a29c:	2509883a 	add	r4,r4,r20
    a2a0:	d9000015 	stw	r4,0(sp)
    a2a4:	21c02a16 	blt	r4,r7,a350 <_realloc_r+0x22c>
    a2a8:	30800317 	ldw	r2,12(r6)
    a2ac:	30c00217 	ldw	r3,8(r6)
    a2b0:	01400904 	movi	r5,36
    a2b4:	99bfff04 	addi	r6,r19,-4
    a2b8:	18800315 	stw	r2,12(r3)
    a2bc:	10c00215 	stw	r3,8(r2)
    a2c0:	b9000317 	ldw	r4,12(r23)
    a2c4:	b8800217 	ldw	r2,8(r23)
    a2c8:	b82b883a 	mov	r21,r23
    a2cc:	bc000204 	addi	r16,r23,8
    a2d0:	20800215 	stw	r2,8(r4)
    a2d4:	11000315 	stw	r4,12(r2)
    a2d8:	2980e436 	bltu	r5,r6,a66c <_realloc_r+0x548>
    a2dc:	008004c4 	movi	r2,19
    a2e0:	9009883a 	mov	r4,r18
    a2e4:	8011883a 	mov	r8,r16
    a2e8:	11800f2e 	bgeu	r2,r6,a328 <_realloc_r+0x204>
    a2ec:	90800017 	ldw	r2,0(r18)
    a2f0:	ba000404 	addi	r8,r23,16
    a2f4:	91000204 	addi	r4,r18,8
    a2f8:	b8800215 	stw	r2,8(r23)
    a2fc:	90c00117 	ldw	r3,4(r18)
    a300:	008006c4 	movi	r2,27
    a304:	b8c00315 	stw	r3,12(r23)
    a308:	1180072e 	bgeu	r2,r6,a328 <_realloc_r+0x204>
    a30c:	90c00217 	ldw	r3,8(r18)
    a310:	ba000604 	addi	r8,r23,24
    a314:	91000404 	addi	r4,r18,16
    a318:	b8c00415 	stw	r3,16(r23)
    a31c:	90800317 	ldw	r2,12(r18)
    a320:	b8800515 	stw	r2,20(r23)
    a324:	3140e726 	beq	r6,r5,a6c4 <_realloc_r+0x5a0>
    a328:	20800017 	ldw	r2,0(r4)
    a32c:	dd000017 	ldw	r20,0(sp)
    a330:	b80f883a 	mov	r7,r23
    a334:	40800015 	stw	r2,0(r8)
    a338:	20c00117 	ldw	r3,4(r4)
    a33c:	40c00115 	stw	r3,4(r8)
    a340:	20800217 	ldw	r2,8(r4)
    a344:	40800215 	stw	r2,8(r8)
    a348:	003f9706 	br	a1a8 <_realloc_r+0x84>
    a34c:	98a9883a 	add	r20,r19,r2
    a350:	a1c01f16 	blt	r20,r7,a3d0 <_realloc_r+0x2ac>
    a354:	b8c00317 	ldw	r3,12(r23)
    a358:	b8800217 	ldw	r2,8(r23)
    a35c:	99bfff04 	addi	r6,r19,-4
    a360:	01400904 	movi	r5,36
    a364:	b82b883a 	mov	r21,r23
    a368:	18800215 	stw	r2,8(r3)
    a36c:	10c00315 	stw	r3,12(r2)
    a370:	bc000204 	addi	r16,r23,8
    a374:	2980c336 	bltu	r5,r6,a684 <_realloc_r+0x560>
    a378:	008004c4 	movi	r2,19
    a37c:	9009883a 	mov	r4,r18
    a380:	8011883a 	mov	r8,r16
    a384:	11800f2e 	bgeu	r2,r6,a3c4 <_realloc_r+0x2a0>
    a388:	90800017 	ldw	r2,0(r18)
    a38c:	ba000404 	addi	r8,r23,16
    a390:	91000204 	addi	r4,r18,8
    a394:	b8800215 	stw	r2,8(r23)
    a398:	90c00117 	ldw	r3,4(r18)
    a39c:	008006c4 	movi	r2,27
    a3a0:	b8c00315 	stw	r3,12(r23)
    a3a4:	1180072e 	bgeu	r2,r6,a3c4 <_realloc_r+0x2a0>
    a3a8:	90c00217 	ldw	r3,8(r18)
    a3ac:	ba000604 	addi	r8,r23,24
    a3b0:	91000404 	addi	r4,r18,16
    a3b4:	b8c00415 	stw	r3,16(r23)
    a3b8:	90800317 	ldw	r2,12(r18)
    a3bc:	b8800515 	stw	r2,20(r23)
    a3c0:	3140c726 	beq	r6,r5,a6e0 <_realloc_r+0x5bc>
    a3c4:	20800017 	ldw	r2,0(r4)
    a3c8:	b80f883a 	mov	r7,r23
    a3cc:	003fd906 	br	a334 <_realloc_r+0x210>
    a3d0:	880b883a 	mov	r5,r17
    a3d4:	b009883a 	mov	r4,r22
    a3d8:	00028140 	call	2814 <_malloc_r>
    a3dc:	1023883a 	mov	r17,r2
    a3e0:	10002526 	beq	r2,zero,a478 <_realloc_r+0x354>
    a3e4:	80800117 	ldw	r2,4(r16)
    a3e8:	00ffff84 	movi	r3,-2
    a3ec:	893ffe04 	addi	r4,r17,-8
    a3f0:	10c4703a 	and	r2,r2,r3
    a3f4:	8085883a 	add	r2,r16,r2
    a3f8:	20809526 	beq	r4,r2,a650 <_realloc_r+0x52c>
    a3fc:	99bfff04 	addi	r6,r19,-4
    a400:	01c00904 	movi	r7,36
    a404:	39804536 	bltu	r7,r6,a51c <_realloc_r+0x3f8>
    a408:	008004c4 	movi	r2,19
    a40c:	9009883a 	mov	r4,r18
    a410:	880b883a 	mov	r5,r17
    a414:	11800f2e 	bgeu	r2,r6,a454 <_realloc_r+0x330>
    a418:	90800017 	ldw	r2,0(r18)
    a41c:	89400204 	addi	r5,r17,8
    a420:	91000204 	addi	r4,r18,8
    a424:	88800015 	stw	r2,0(r17)
    a428:	90c00117 	ldw	r3,4(r18)
    a42c:	008006c4 	movi	r2,27
    a430:	88c00115 	stw	r3,4(r17)
    a434:	1180072e 	bgeu	r2,r6,a454 <_realloc_r+0x330>
    a438:	90c00217 	ldw	r3,8(r18)
    a43c:	89400404 	addi	r5,r17,16
    a440:	91000404 	addi	r4,r18,16
    a444:	88c00215 	stw	r3,8(r17)
    a448:	90800317 	ldw	r2,12(r18)
    a44c:	88800315 	stw	r2,12(r17)
    a450:	31c09126 	beq	r6,r7,a698 <_realloc_r+0x574>
    a454:	20800017 	ldw	r2,0(r4)
    a458:	28800015 	stw	r2,0(r5)
    a45c:	20c00117 	ldw	r3,4(r4)
    a460:	28c00115 	stw	r3,4(r5)
    a464:	20800217 	ldw	r2,8(r4)
    a468:	28800215 	stw	r2,8(r5)
    a46c:	900b883a 	mov	r5,r18
    a470:	b009883a 	mov	r4,r22
    a474:	0001c840 	call	1c84 <_free_r>
    a478:	b009883a 	mov	r4,r22
    a47c:	0010ab80 	call	10ab8 <__malloc_unlock>
    a480:	003f5e06 	br	a1fc <_realloc_r+0xd8>
    a484:	300b883a 	mov	r5,r6
    a488:	dfc00b17 	ldw	ra,44(sp)
    a48c:	df000a17 	ldw	fp,40(sp)
    a490:	ddc00917 	ldw	r23,36(sp)
    a494:	dd800817 	ldw	r22,32(sp)
    a498:	dd400717 	ldw	r21,28(sp)
    a49c:	dd000617 	ldw	r20,24(sp)
    a4a0:	dcc00517 	ldw	r19,20(sp)
    a4a4:	dc800417 	ldw	r18,16(sp)
    a4a8:	dc400317 	ldw	r17,12(sp)
    a4ac:	dc000217 	ldw	r16,8(sp)
    a4b0:	dec00c04 	addi	sp,sp,48
    a4b4:	00028141 	jmpi	2814 <_malloc_r>
    a4b8:	38800117 	ldw	r2,4(r7)
    a4bc:	e54b883a 	add	r5,fp,r21
    a4c0:	31000054 	ori	r4,r6,1
    a4c4:	1080004c 	andi	r2,r2,1
    a4c8:	1704b03a 	or	r2,r2,fp
    a4cc:	38800115 	stw	r2,4(r7)
    a4d0:	29000115 	stw	r4,4(r5)
    a4d4:	2987883a 	add	r3,r5,r6
    a4d8:	18800117 	ldw	r2,4(r3)
    a4dc:	29400204 	addi	r5,r5,8
    a4e0:	b009883a 	mov	r4,r22
    a4e4:	10800054 	ori	r2,r2,1
    a4e8:	18800115 	stw	r2,4(r3)
    a4ec:	0001c840 	call	1c84 <_free_r>
    a4f0:	003f3806 	br	a1d4 <_realloc_r+0xb0>
    a4f4:	000d883a 	mov	r6,zero
    a4f8:	0009883a 	mov	r4,zero
    a4fc:	003f5d06 	br	a274 <_realloc_r+0x150>
    a500:	30c00217 	ldw	r3,8(r6)
    a504:	30800317 	ldw	r2,12(r6)
    a508:	800f883a 	mov	r7,r16
    a50c:	84000204 	addi	r16,r16,8
    a510:	10c00215 	stw	r3,8(r2)
    a514:	18800315 	stw	r2,12(r3)
    a518:	003f2306 	br	a1a8 <_realloc_r+0x84>
    a51c:	8809883a 	mov	r4,r17
    a520:	900b883a 	mov	r5,r18
    a524:	0008fd80 	call	8fd8 <memmove>
    a528:	003fd006 	br	a46c <_realloc_r+0x348>
    a52c:	30800117 	ldw	r2,4(r6)
    a530:	e0c00404 	addi	r3,fp,16
    a534:	1108703a 	and	r4,r2,r4
    a538:	9905883a 	add	r2,r19,r4
    a53c:	10ff4d16 	blt	r2,r3,a274 <_realloc_r+0x150>
    a540:	1705c83a 	sub	r2,r2,fp
    a544:	870b883a 	add	r5,r16,fp
    a548:	10800054 	ori	r2,r2,1
    a54c:	28800115 	stw	r2,4(r5)
    a550:	80c00117 	ldw	r3,4(r16)
    a554:	00800074 	movhi	r2,1
    a558:	10916604 	addi	r2,r2,17816
    a55c:	b009883a 	mov	r4,r22
    a560:	18c0004c 	andi	r3,r3,1
    a564:	e0c6b03a 	or	r3,fp,r3
    a568:	11400215 	stw	r5,8(r2)
    a56c:	80c00115 	stw	r3,4(r16)
    a570:	0010ab80 	call	10ab8 <__malloc_unlock>
    a574:	84400204 	addi	r17,r16,8
    a578:	003f2006 	br	a1fc <_realloc_r+0xd8>
    a57c:	98a9883a 	add	r20,r19,r2
    a580:	2509883a 	add	r4,r4,r20
    a584:	e0800404 	addi	r2,fp,16
    a588:	d9000115 	stw	r4,4(sp)
    a58c:	20bf7016 	blt	r4,r2,a350 <_realloc_r+0x22c>
    a590:	b8c00317 	ldw	r3,12(r23)
    a594:	b8800217 	ldw	r2,8(r23)
    a598:	99bfff04 	addi	r6,r19,-4
    a59c:	01400904 	movi	r5,36
    a5a0:	18800215 	stw	r2,8(r3)
    a5a4:	10c00315 	stw	r3,12(r2)
    a5a8:	bc400204 	addi	r17,r23,8
    a5ac:	29804136 	bltu	r5,r6,a6b4 <_realloc_r+0x590>
    a5b0:	008004c4 	movi	r2,19
    a5b4:	9009883a 	mov	r4,r18
    a5b8:	880f883a 	mov	r7,r17
    a5bc:	11800f2e 	bgeu	r2,r6,a5fc <_realloc_r+0x4d8>
    a5c0:	90800017 	ldw	r2,0(r18)
    a5c4:	b9c00404 	addi	r7,r23,16
    a5c8:	91000204 	addi	r4,r18,8
    a5cc:	b8800215 	stw	r2,8(r23)
    a5d0:	90c00117 	ldw	r3,4(r18)
    a5d4:	008006c4 	movi	r2,27
    a5d8:	b8c00315 	stw	r3,12(r23)
    a5dc:	1180072e 	bgeu	r2,r6,a5fc <_realloc_r+0x4d8>
    a5e0:	90c00217 	ldw	r3,8(r18)
    a5e4:	b9c00604 	addi	r7,r23,24
    a5e8:	91000404 	addi	r4,r18,16
    a5ec:	b8c00415 	stw	r3,16(r23)
    a5f0:	90800317 	ldw	r2,12(r18)
    a5f4:	b8800515 	stw	r2,20(r23)
    a5f8:	31404026 	beq	r6,r5,a6fc <_realloc_r+0x5d8>
    a5fc:	20800017 	ldw	r2,0(r4)
    a600:	38800015 	stw	r2,0(r7)
    a604:	20c00117 	ldw	r3,4(r4)
    a608:	38c00115 	stw	r3,4(r7)
    a60c:	20800217 	ldw	r2,8(r4)
    a610:	38800215 	stw	r2,8(r7)
    a614:	d8c00117 	ldw	r3,4(sp)
    a618:	bf0b883a 	add	r5,r23,fp
    a61c:	b009883a 	mov	r4,r22
    a620:	1f05c83a 	sub	r2,r3,fp
    a624:	10800054 	ori	r2,r2,1
    a628:	28800115 	stw	r2,4(r5)
    a62c:	b8c00117 	ldw	r3,4(r23)
    a630:	00800074 	movhi	r2,1
    a634:	10916604 	addi	r2,r2,17816
    a638:	11400215 	stw	r5,8(r2)
    a63c:	18c0004c 	andi	r3,r3,1
    a640:	e0c6b03a 	or	r3,fp,r3
    a644:	b8c00115 	stw	r3,4(r23)
    a648:	0010ab80 	call	10ab8 <__malloc_unlock>
    a64c:	003eeb06 	br	a1fc <_realloc_r+0xd8>
    a650:	20800117 	ldw	r2,4(r4)
    a654:	00ffff04 	movi	r3,-4
    a658:	800f883a 	mov	r7,r16
    a65c:	10c4703a 	and	r2,r2,r3
    a660:	98a9883a 	add	r20,r19,r2
    a664:	84000204 	addi	r16,r16,8
    a668:	003ecf06 	br	a1a8 <_realloc_r+0x84>
    a66c:	900b883a 	mov	r5,r18
    a670:	8009883a 	mov	r4,r16
    a674:	0008fd80 	call	8fd8 <memmove>
    a678:	dd000017 	ldw	r20,0(sp)
    a67c:	b80f883a 	mov	r7,r23
    a680:	003ec906 	br	a1a8 <_realloc_r+0x84>
    a684:	900b883a 	mov	r5,r18
    a688:	8009883a 	mov	r4,r16
    a68c:	0008fd80 	call	8fd8 <memmove>
    a690:	b80f883a 	mov	r7,r23
    a694:	003ec406 	br	a1a8 <_realloc_r+0x84>
    a698:	90c00417 	ldw	r3,16(r18)
    a69c:	89400604 	addi	r5,r17,24
    a6a0:	91000604 	addi	r4,r18,24
    a6a4:	88c00415 	stw	r3,16(r17)
    a6a8:	90800517 	ldw	r2,20(r18)
    a6ac:	88800515 	stw	r2,20(r17)
    a6b0:	003f6806 	br	a454 <_realloc_r+0x330>
    a6b4:	900b883a 	mov	r5,r18
    a6b8:	8809883a 	mov	r4,r17
    a6bc:	0008fd80 	call	8fd8 <memmove>
    a6c0:	003fd406 	br	a614 <_realloc_r+0x4f0>
    a6c4:	90c00417 	ldw	r3,16(r18)
    a6c8:	91000604 	addi	r4,r18,24
    a6cc:	ba000804 	addi	r8,r23,32
    a6d0:	b8c00615 	stw	r3,24(r23)
    a6d4:	90800517 	ldw	r2,20(r18)
    a6d8:	b8800715 	stw	r2,28(r23)
    a6dc:	003f1206 	br	a328 <_realloc_r+0x204>
    a6e0:	90c00417 	ldw	r3,16(r18)
    a6e4:	91000604 	addi	r4,r18,24
    a6e8:	ba000804 	addi	r8,r23,32
    a6ec:	b8c00615 	stw	r3,24(r23)
    a6f0:	90800517 	ldw	r2,20(r18)
    a6f4:	b8800715 	stw	r2,28(r23)
    a6f8:	003f3206 	br	a3c4 <_realloc_r+0x2a0>
    a6fc:	90c00417 	ldw	r3,16(r18)
    a700:	91000604 	addi	r4,r18,24
    a704:	b9c00804 	addi	r7,r23,32
    a708:	b8c00615 	stw	r3,24(r23)
    a70c:	90800517 	ldw	r2,20(r18)
    a710:	b8800715 	stw	r2,28(r23)
    a714:	003fb906 	br	a5fc <_realloc_r+0x4d8>

0000a718 <__isinfd>:
    a718:	200d883a 	mov	r6,r4
    a71c:	0109c83a 	sub	r4,zero,r4
    a720:	2188b03a 	or	r4,r4,r6
    a724:	2008d7fa 	srli	r4,r4,31
    a728:	00a00034 	movhi	r2,32768
    a72c:	10bfffc4 	addi	r2,r2,-1
    a730:	1144703a 	and	r2,r2,r5
    a734:	2088b03a 	or	r4,r4,r2
    a738:	009ffc34 	movhi	r2,32752
    a73c:	1105c83a 	sub	r2,r2,r4
    a740:	0087c83a 	sub	r3,zero,r2
    a744:	10c4b03a 	or	r2,r2,r3
    a748:	1004d7fa 	srli	r2,r2,31
    a74c:	00c00044 	movi	r3,1
    a750:	1885c83a 	sub	r2,r3,r2
    a754:	f800283a 	ret

0000a758 <__isnand>:
    a758:	200d883a 	mov	r6,r4
    a75c:	0109c83a 	sub	r4,zero,r4
    a760:	2188b03a 	or	r4,r4,r6
    a764:	2008d7fa 	srli	r4,r4,31
    a768:	00a00034 	movhi	r2,32768
    a76c:	10bfffc4 	addi	r2,r2,-1
    a770:	1144703a 	and	r2,r2,r5
    a774:	2088b03a 	or	r4,r4,r2
    a778:	009ffc34 	movhi	r2,32752
    a77c:	1105c83a 	sub	r2,r2,r4
    a780:	1004d7fa 	srli	r2,r2,31
    a784:	f800283a 	ret

0000a788 <__sccl>:
    a788:	28c00003 	ldbu	r3,0(r5)
    a78c:	00801784 	movi	r2,94
    a790:	2a000044 	addi	r8,r5,1
    a794:	18802526 	beq	r3,r2,a82c <__sccl+0xa4>
    a798:	180f883a 	mov	r7,r3
    a79c:	0013883a 	mov	r9,zero
    a7a0:	000d883a 	mov	r6,zero
    a7a4:	0007883a 	mov	r3,zero
    a7a8:	01404004 	movi	r5,256
    a7ac:	1905883a 	add	r2,r3,r4
    a7b0:	18c00044 	addi	r3,r3,1
    a7b4:	11800005 	stb	r6,0(r2)
    a7b8:	197ffc1e 	bne	r3,r5,a7ac <__sccl+0x24>
    a7bc:	38000c26 	beq	r7,zero,a7f0 <__sccl+0x68>
    a7c0:	00800044 	movi	r2,1
    a7c4:	124dc83a 	sub	r6,r2,r9
    a7c8:	3905883a 	add	r2,r7,r4
    a7cc:	11800005 	stb	r6,0(r2)
    a7d0:	41400044 	addi	r5,r8,1
    a7d4:	02400b44 	movi	r9,45
    a7d8:	02801744 	movi	r10,93
    a7dc:	28bfffc3 	ldbu	r2,-1(r5)
    a7e0:	2811883a 	mov	r8,r5
    a7e4:	12400726 	beq	r2,r9,a804 <__sccl+0x7c>
    a7e8:	12800226 	beq	r2,r10,a7f4 <__sccl+0x6c>
    a7ec:	1000031e 	bne	r2,zero,a7fc <__sccl+0x74>
    a7f0:	423fffc4 	addi	r8,r8,-1
    a7f4:	4005883a 	mov	r2,r8
    a7f8:	f800283a 	ret
    a7fc:	100f883a 	mov	r7,r2
    a800:	003ff106 	br	a7c8 <__sccl+0x40>
    a804:	28c00003 	ldbu	r3,0(r5)
    a808:	1a800d26 	beq	r3,r10,a840 <__sccl+0xb8>
    a80c:	19c00c16 	blt	r3,r7,a840 <__sccl+0xb8>
    a810:	21c5883a 	add	r2,r4,r7
    a814:	39c00044 	addi	r7,r7,1
    a818:	11800045 	stb	r6,1(r2)
    a81c:	10800044 	addi	r2,r2,1
    a820:	38fffc16 	blt	r7,r3,a814 <__sccl+0x8c>
    a824:	29400084 	addi	r5,r5,2
    a828:	003fec06 	br	a7dc <__sccl+0x54>
    a82c:	29c00043 	ldbu	r7,1(r5)
    a830:	02400044 	movi	r9,1
    a834:	2a000084 	addi	r8,r5,2
    a838:	480d883a 	mov	r6,r9
    a83c:	003fd906 	br	a7a4 <__sccl+0x1c>
    a840:	01c00b44 	movi	r7,45
    a844:	003fe006 	br	a7c8 <__sccl+0x40>

0000a848 <nanf>:
    a848:	009ff034 	movhi	r2,32704
    a84c:	f800283a 	ret

0000a850 <sprintf>:
    a850:	deffe504 	addi	sp,sp,-108
    a854:	2013883a 	mov	r9,r4
    a858:	dfc01815 	stw	ra,96(sp)
    a85c:	d9801915 	stw	r6,100(sp)
    a860:	d9c01a15 	stw	r7,104(sp)
    a864:	d8801904 	addi	r2,sp,100
    a868:	d8800015 	stw	r2,0(sp)
    a86c:	00800074 	movhi	r2,1
    a870:	10970104 	addi	r2,r2,23556
    a874:	11000017 	ldw	r4,0(r2)
    a878:	d9c00017 	ldw	r7,0(sp)
    a87c:	00808204 	movi	r2,520
    a880:	00e00034 	movhi	r3,32768
    a884:	18ffffc4 	addi	r3,r3,-1
    a888:	280d883a 	mov	r6,r5
    a88c:	d880040d 	sth	r2,16(sp)
    a890:	d9400104 	addi	r5,sp,4
    a894:	00bfffc4 	movi	r2,-1
    a898:	d8c00615 	stw	r3,24(sp)
    a89c:	d8c00315 	stw	r3,12(sp)
    a8a0:	da400515 	stw	r9,20(sp)
    a8a4:	d880048d 	sth	r2,18(sp)
    a8a8:	da400115 	stw	r9,4(sp)
    a8ac:	00036a00 	call	36a0 <___vfprintf_internal_r>
    a8b0:	d8c00117 	ldw	r3,4(sp)
    a8b4:	18000005 	stb	zero,0(r3)
    a8b8:	dfc01817 	ldw	ra,96(sp)
    a8bc:	dec01b04 	addi	sp,sp,108
    a8c0:	f800283a 	ret

0000a8c4 <_sprintf_r>:
    a8c4:	deffe604 	addi	sp,sp,-104
    a8c8:	2813883a 	mov	r9,r5
    a8cc:	dfc01815 	stw	ra,96(sp)
    a8d0:	d9c01915 	stw	r7,100(sp)
    a8d4:	d8801904 	addi	r2,sp,100
    a8d8:	d8800015 	stw	r2,0(sp)
    a8dc:	100f883a 	mov	r7,r2
    a8e0:	00808204 	movi	r2,520
    a8e4:	00e00034 	movhi	r3,32768
    a8e8:	18ffffc4 	addi	r3,r3,-1
    a8ec:	d880040d 	sth	r2,16(sp)
    a8f0:	d9400104 	addi	r5,sp,4
    a8f4:	00bfffc4 	movi	r2,-1
    a8f8:	d8c00615 	stw	r3,24(sp)
    a8fc:	d8c00315 	stw	r3,12(sp)
    a900:	da400515 	stw	r9,20(sp)
    a904:	d880048d 	sth	r2,18(sp)
    a908:	da400115 	stw	r9,4(sp)
    a90c:	00036a00 	call	36a0 <___vfprintf_internal_r>
    a910:	d8c00117 	ldw	r3,4(sp)
    a914:	18000005 	stb	zero,0(r3)
    a918:	dfc01817 	ldw	ra,96(sp)
    a91c:	dec01a04 	addi	sp,sp,104
    a920:	f800283a 	ret

0000a924 <strcmp>:
    a924:	2144b03a 	or	r2,r4,r5
    a928:	108000cc 	andi	r2,r2,3
    a92c:	10001d1e 	bne	r2,zero,a9a4 <strcmp+0x80>
    a930:	200f883a 	mov	r7,r4
    a934:	28800017 	ldw	r2,0(r5)
    a938:	21000017 	ldw	r4,0(r4)
    a93c:	280d883a 	mov	r6,r5
    a940:	2080161e 	bne	r4,r2,a99c <strcmp+0x78>
    a944:	023fbff4 	movhi	r8,65279
    a948:	423fbfc4 	addi	r8,r8,-257
    a94c:	2207883a 	add	r3,r4,r8
    a950:	01602074 	movhi	r5,32897
    a954:	29602004 	addi	r5,r5,-32640
    a958:	1946703a 	and	r3,r3,r5
    a95c:	0104303a 	nor	r2,zero,r4
    a960:	10c4703a 	and	r2,r2,r3
    a964:	10001c1e 	bne	r2,zero,a9d8 <strcmp+0xb4>
    a968:	4013883a 	mov	r9,r8
    a96c:	2811883a 	mov	r8,r5
    a970:	00000106 	br	a978 <strcmp+0x54>
    a974:	1800181e 	bne	r3,zero,a9d8 <strcmp+0xb4>
    a978:	39c00104 	addi	r7,r7,4
    a97c:	39000017 	ldw	r4,0(r7)
    a980:	31800104 	addi	r6,r6,4
    a984:	31400017 	ldw	r5,0(r6)
    a988:	2245883a 	add	r2,r4,r9
    a98c:	1204703a 	and	r2,r2,r8
    a990:	0106303a 	nor	r3,zero,r4
    a994:	1886703a 	and	r3,r3,r2
    a998:	217ff626 	beq	r4,r5,a974 <strcmp+0x50>
    a99c:	3809883a 	mov	r4,r7
    a9a0:	300b883a 	mov	r5,r6
    a9a4:	20c00007 	ldb	r3,0(r4)
    a9a8:	1800051e 	bne	r3,zero,a9c0 <strcmp+0x9c>
    a9ac:	00000606 	br	a9c8 <strcmp+0xa4>
    a9b0:	21000044 	addi	r4,r4,1
    a9b4:	20c00007 	ldb	r3,0(r4)
    a9b8:	29400044 	addi	r5,r5,1
    a9bc:	18000226 	beq	r3,zero,a9c8 <strcmp+0xa4>
    a9c0:	28800007 	ldb	r2,0(r5)
    a9c4:	18bffa26 	beq	r3,r2,a9b0 <strcmp+0x8c>
    a9c8:	20c00003 	ldbu	r3,0(r4)
    a9cc:	28800003 	ldbu	r2,0(r5)
    a9d0:	1885c83a 	sub	r2,r3,r2
    a9d4:	f800283a 	ret
    a9d8:	0005883a 	mov	r2,zero
    a9dc:	f800283a 	ret

0000a9e0 <match>:
    a9e0:	21800017 	ldw	r6,0(r4)
    a9e4:	01c01004 	movi	r7,64
    a9e8:	02001684 	movi	r8,90
    a9ec:	28800007 	ldb	r2,0(r5)
    a9f0:	29400044 	addi	r5,r5,1
    a9f4:	10000826 	beq	r2,zero,aa18 <match+0x38>
    a9f8:	31800044 	addi	r6,r6,1
    a9fc:	30c00007 	ldb	r3,0(r6)
    aa00:	38c0020e 	bge	r7,r3,aa0c <match+0x2c>
    aa04:	40c00116 	blt	r8,r3,aa0c <match+0x2c>
    aa08:	18c00804 	addi	r3,r3,32
    aa0c:	18bff726 	beq	r3,r2,a9ec <match+0xc>
    aa10:	0005883a 	mov	r2,zero
    aa14:	f800283a 	ret
    aa18:	30800044 	addi	r2,r6,1
    aa1c:	20800015 	stw	r2,0(r4)
    aa20:	00800044 	movi	r2,1
    aa24:	f800283a 	ret

0000aa28 <_strtod_r>:
    aa28:	deffde04 	addi	sp,sp,-136
    aa2c:	df002015 	stw	fp,128(sp)
    aa30:	dd401d15 	stw	r21,116(sp)
    aa34:	dc401915 	stw	r17,100(sp)
    aa38:	dfc02115 	stw	ra,132(sp)
    aa3c:	ddc01f15 	stw	r23,124(sp)
    aa40:	dd801e15 	stw	r22,120(sp)
    aa44:	dd001c15 	stw	r20,112(sp)
    aa48:	dcc01b15 	stw	r19,108(sp)
    aa4c:	dc801a15 	stw	r18,104(sp)
    aa50:	dc001815 	stw	r16,96(sp)
    aa54:	2823883a 	mov	r17,r5
    aa58:	202b883a 	mov	r21,r4
    aa5c:	d9801515 	stw	r6,84(sp)
    aa60:	d8000915 	stw	zero,36(sp)
    aa64:	d8000a15 	stw	zero,40(sp)
    aa68:	d9400415 	stw	r5,16(sp)
    aa6c:	df000904 	addi	fp,sp,36
    aa70:	da000417 	ldw	r8,16(sp)
    aa74:	00800b44 	movi	r2,45
    aa78:	40c00003 	ldbu	r3,0(r8)
    aa7c:	10c03536 	bltu	r2,r3,ab54 <_strtod_r+0x12c>
    aa80:	18c5883a 	add	r2,r3,r3
    aa84:	1085883a 	add	r2,r2,r2
    aa88:	00c00074 	movhi	r3,1
    aa8c:	18eaa704 	addi	r3,r3,-21860
    aa90:	10c5883a 	add	r2,r2,r3
    aa94:	11000017 	ldw	r4,0(r2)
    aa98:	2000683a 	jmp	r4
    aa9c:	0000ac90 	cmplti	zero,zero,690
    aaa0:	0000ab54 	movui	zero,685
    aaa4:	0000ab54 	movui	zero,685
    aaa8:	0000ab54 	movui	zero,685
    aaac:	0000ab54 	movui	zero,685
    aab0:	0000ab54 	movui	zero,685
    aab4:	0000ab54 	movui	zero,685
    aab8:	0000ab54 	movui	zero,685
    aabc:	0000ab54 	movui	zero,685
    aac0:	0000afa8 	cmpgeui	zero,zero,702
    aac4:	0000afa8 	cmpgeui	zero,zero,702
    aac8:	0000afa8 	cmpgeui	zero,zero,702
    aacc:	0000afa8 	cmpgeui	zero,zero,702
    aad0:	0000afa8 	cmpgeui	zero,zero,702
    aad4:	0000ab54 	movui	zero,685
    aad8:	0000ab54 	movui	zero,685
    aadc:	0000ab54 	movui	zero,685
    aae0:	0000ab54 	movui	zero,685
    aae4:	0000ab54 	movui	zero,685
    aae8:	0000ab54 	movui	zero,685
    aaec:	0000ab54 	movui	zero,685
    aaf0:	0000ab54 	movui	zero,685
    aaf4:	0000ab54 	movui	zero,685
    aaf8:	0000ab54 	movui	zero,685
    aafc:	0000ab54 	movui	zero,685
    ab00:	0000ab54 	movui	zero,685
    ab04:	0000ab54 	movui	zero,685
    ab08:	0000ab54 	movui	zero,685
    ab0c:	0000ab54 	movui	zero,685
    ab10:	0000ab54 	movui	zero,685
    ab14:	0000ab54 	movui	zero,685
    ab18:	0000ab54 	movui	zero,685
    ab1c:	0000afa8 	cmpgeui	zero,zero,702
    ab20:	0000ab54 	movui	zero,685
    ab24:	0000ab54 	movui	zero,685
    ab28:	0000ab54 	movui	zero,685
    ab2c:	0000ab54 	movui	zero,685
    ab30:	0000ab54 	movui	zero,685
    ab34:	0000ab54 	movui	zero,685
    ab38:	0000ab54 	movui	zero,685
    ab3c:	0000ab54 	movui	zero,685
    ab40:	0000ab54 	movui	zero,685
    ab44:	0000ab54 	movui	zero,685
    ab48:	0000af88 	cmpgei	zero,zero,702
    ab4c:	0000ab54 	movui	zero,685
    ab50:	0000afb4 	movhi	zero,702
    ab54:	d8001115 	stw	zero,68(sp)
    ab58:	40c00007 	ldb	r3,0(r8)
    ab5c:	00800c04 	movi	r2,48
    ab60:	1880d026 	beq	r3,r2,aea4 <_strtod_r+0x47c>
    ab64:	001f883a 	mov	r15,zero
    ab68:	41000007 	ldb	r4,0(r8)
    ab6c:	00c00bc4 	movi	r3,47
    ab70:	402d883a 	mov	r22,r8
    ab74:	1903470e 	bge	r3,r4,b894 <_strtod_r+0xe6c>
    ab78:	00800e44 	movi	r2,57
    ab7c:	11034516 	blt	r2,r4,b894 <_strtod_r+0xe6c>
    ab80:	180f883a 	mov	r7,r3
    ab84:	1013883a 	mov	r9,r2
    ab88:	4007883a 	mov	r3,r8
    ab8c:	000d883a 	mov	r6,zero
    ab90:	0029883a 	mov	r20,zero
    ab94:	0021883a 	mov	r16,zero
    ab98:	01400204 	movi	r5,8
    ab9c:	028003c4 	movi	r10,15
    aba0:	29803116 	blt	r5,r6,ac68 <_strtod_r+0x240>
    aba4:	a08002a4 	muli	r2,r20,10
    aba8:	1105883a 	add	r2,r2,r4
    abac:	153ff404 	addi	r20,r2,-48
    abb0:	1a000044 	addi	r8,r3,1
    abb4:	da000415 	stw	r8,16(sp)
    abb8:	41000007 	ldb	r4,0(r8)
    abbc:	31800044 	addi	r6,r6,1
    abc0:	4007883a 	mov	r3,r8
    abc4:	3900010e 	bge	r7,r4,abcc <_strtod_r+0x1a4>
    abc8:	493ff50e 	bge	r9,r4,aba0 <_strtod_r+0x178>
    abcc:	00800b84 	movi	r2,46
    abd0:	2080c126 	beq	r4,r2,aed8 <_strtod_r+0x4b0>
    abd4:	3027883a 	mov	r19,r6
    abd8:	0025883a 	mov	r18,zero
    abdc:	0015883a 	mov	r10,zero
    abe0:	000f883a 	mov	r7,zero
    abe4:	00801944 	movi	r2,101
    abe8:	20802426 	beq	r4,r2,ac7c <_strtod_r+0x254>
    abec:	00801144 	movi	r2,69
    abf0:	20802226 	beq	r4,r2,ac7c <_strtod_r+0x254>
    abf4:	9816c03a 	cmpne	r11,r19,zero
    abf8:	000b883a 	mov	r5,zero
    abfc:	5800631e 	bne	r11,zero,ad8c <_strtod_r+0x364>
    ac00:	3800c126 	beq	r7,zero,af08 <_strtod_r+0x4e0>
    ac04:	d8c01517 	ldw	r3,84(sp)
    ac08:	18000226 	beq	r3,zero,ac14 <_strtod_r+0x1ec>
    ac0c:	d8800417 	ldw	r2,16(sp)
    ac10:	18800015 	stw	r2,0(r3)
    ac14:	d9001117 	ldw	r4,68(sp)
    ac18:	2005003a 	cmpeq	r2,r4,zero
    ac1c:	10001f1e 	bne	r2,zero,ac9c <_strtod_r+0x274>
    ac20:	e0800017 	ldw	r2,0(fp)
    ac24:	e0c00117 	ldw	r3,4(fp)
    ac28:	1009883a 	mov	r4,r2
    ac2c:	1960003c 	xorhi	r5,r3,32768
    ac30:	2005883a 	mov	r2,r4
    ac34:	2807883a 	mov	r3,r5
    ac38:	dfc02117 	ldw	ra,132(sp)
    ac3c:	df002017 	ldw	fp,128(sp)
    ac40:	ddc01f17 	ldw	r23,124(sp)
    ac44:	dd801e17 	ldw	r22,120(sp)
    ac48:	dd401d17 	ldw	r21,116(sp)
    ac4c:	dd001c17 	ldw	r20,112(sp)
    ac50:	dcc01b17 	ldw	r19,108(sp)
    ac54:	dc801a17 	ldw	r18,104(sp)
    ac58:	dc401917 	ldw	r17,100(sp)
    ac5c:	dc001817 	ldw	r16,96(sp)
    ac60:	dec02204 	addi	sp,sp,136
    ac64:	f800283a 	ret
    ac68:	51bfd116 	blt	r10,r6,abb0 <_strtod_r+0x188>
    ac6c:	808002a4 	muli	r2,r16,10
    ac70:	1105883a 	add	r2,r2,r4
    ac74:	143ff404 	addi	r16,r2,-48
    ac78:	003fcd06 	br	abb0 <_strtod_r+0x188>
    ac7c:	9816c03a 	cmpne	r11,r19,zero
    ac80:	5800091e 	bne	r11,zero,aca8 <_strtod_r+0x280>
    ac84:	3800081e 	bne	r7,zero,aca8 <_strtod_r+0x280>
    ac88:	7805003a 	cmpeq	r2,r15,zero
    ac8c:	10000626 	beq	r2,zero,aca8 <_strtod_r+0x280>
    ac90:	d8001115 	stw	zero,68(sp)
    ac94:	dc400415 	stw	r17,16(sp)
    ac98:	003fda06 	br	ac04 <_strtod_r+0x1dc>
    ac9c:	e1000017 	ldw	r4,0(fp)
    aca0:	e1400117 	ldw	r5,4(fp)
    aca4:	003fe206 	br	ac30 <_strtod_r+0x208>
    aca8:	dc400417 	ldw	r17,16(sp)
    acac:	00800ac4 	movi	r2,43
    acb0:	8a000044 	addi	r8,r17,1
    acb4:	da000415 	stw	r8,16(sp)
    acb8:	88c00047 	ldb	r3,1(r17)
    acbc:	4009883a 	mov	r4,r8
    acc0:	1880bf26 	beq	r3,r2,afc0 <_strtod_r+0x598>
    acc4:	00800b44 	movi	r2,45
    acc8:	18834526 	beq	r3,r2,b9e0 <_strtod_r+0xfb8>
    accc:	1809883a 	mov	r4,r3
    acd0:	20fff404 	addi	r3,r4,-48
    acd4:	00800244 	movi	r2,9
    acd8:	001d883a 	mov	r14,zero
    acdc:	10c0bf36 	bltu	r2,r3,afdc <_strtod_r+0x5b4>
    ace0:	00800c04 	movi	r2,48
    ace4:	2080061e 	bne	r4,r2,ad00 <_strtod_r+0x2d8>
    ace8:	da000417 	ldw	r8,16(sp)
    acec:	2005883a 	mov	r2,r4
    acf0:	42000044 	addi	r8,r8,1
    acf4:	da000415 	stw	r8,16(sp)
    acf8:	41000007 	ldb	r4,0(r8)
    acfc:	20bffc26 	beq	r4,r2,acf0 <_strtod_r+0x2c8>
    ad00:	20fff3c4 	addi	r3,r4,-49
    ad04:	00800204 	movi	r2,8
    ad08:	10ffbb36 	bltu	r2,r3,abf8 <_strtod_r+0x1d0>
    ad0c:	da000417 	ldw	r8,16(sp)
    ad10:	227ff404 	addi	r9,r4,-48
    ad14:	03000bc4 	movi	r12,47
    ad18:	4007883a 	mov	r3,r8
    ad1c:	42000044 	addi	r8,r8,1
    ad20:	da000415 	stw	r8,16(sp)
    ad24:	41000007 	ldb	r4,0(r8)
    ad28:	61000d0e 	bge	r12,r4,ad60 <_strtod_r+0x338>
    ad2c:	00800e44 	movi	r2,57
    ad30:	11000b16 	blt	r2,r4,ad60 <_strtod_r+0x338>
    ad34:	601b883a 	mov	r13,r12
    ad38:	1019883a 	mov	r12,r2
    ad3c:	00000106 	br	ad44 <_strtod_r+0x31c>
    ad40:	61000716 	blt	r12,r4,ad60 <_strtod_r+0x338>
    ad44:	488002a4 	muli	r2,r9,10
    ad48:	42000044 	addi	r8,r8,1
    ad4c:	da000415 	stw	r8,16(sp)
    ad50:	2085883a 	add	r2,r4,r2
    ad54:	41000007 	ldb	r4,0(r8)
    ad58:	127ff404 	addi	r9,r2,-48
    ad5c:	693ff816 	blt	r13,r4,ad40 <_strtod_r+0x318>
    ad60:	40c7c83a 	sub	r3,r8,r3
    ad64:	00800204 	movi	r2,8
    ad68:	10c2e416 	blt	r2,r3,b8fc <_strtod_r+0xed4>
    ad6c:	009387c4 	movi	r2,19999
    ad70:	480b883a 	mov	r5,r9
    ad74:	1240010e 	bge	r2,r9,ad7c <_strtod_r+0x354>
    ad78:	100b883a 	mov	r5,r2
    ad7c:	7005003a 	cmpeq	r2,r14,zero
    ad80:	103f9e1e 	bne	r2,zero,abfc <_strtod_r+0x1d4>
    ad84:	014bc83a 	sub	r5,zero,r5
    ad88:	583f9d26 	beq	r11,zero,ac00 <_strtod_r+0x1d8>
    ad8c:	2a8bc83a 	sub	r5,r5,r10
    ad90:	d9400f15 	stw	r5,60(sp)
    ad94:	30007a1e 	bne	r6,zero,af80 <_strtod_r+0x558>
    ad98:	dcc01215 	stw	r19,72(sp)
    ad9c:	00800404 	movi	r2,16
    ada0:	9825883a 	mov	r18,r19
    ada4:	14c0010e 	bge	r2,r19,adac <_strtod_r+0x384>
    ada8:	1025883a 	mov	r18,r2
    adac:	a009883a 	mov	r4,r20
    adb0:	000f8a40 	call	f8a4 <__floatunsidf>
    adb4:	100f883a 	mov	r7,r2
    adb8:	e0800015 	stw	r2,0(fp)
    adbc:	00800244 	movi	r2,9
    adc0:	e0c00115 	stw	r3,4(fp)
    adc4:	1480160e 	bge	r2,r18,ae20 <_strtod_r+0x3f8>
    adc8:	900c90fa 	slli	r6,r18,3
    adcc:	01000074 	movhi	r4,1
    add0:	210fb304 	addi	r4,r4,16076
    add4:	180b883a 	mov	r5,r3
    add8:	310d883a 	add	r6,r6,r4
    addc:	30ffef17 	ldw	r3,-68(r6)
    ade0:	30bfee17 	ldw	r2,-72(r6)
    ade4:	3809883a 	mov	r4,r7
    ade8:	180f883a 	mov	r7,r3
    adec:	100d883a 	mov	r6,r2
    adf0:	000ed140 	call	ed14 <__muldf3>
    adf4:	8009883a 	mov	r4,r16
    adf8:	1823883a 	mov	r17,r3
    adfc:	1021883a 	mov	r16,r2
    ae00:	000f8a40 	call	f8a4 <__floatunsidf>
    ae04:	880b883a 	mov	r5,r17
    ae08:	180f883a 	mov	r7,r3
    ae0c:	8009883a 	mov	r4,r16
    ae10:	100d883a 	mov	r6,r2
    ae14:	000eca00 	call	eca0 <__adddf3>
    ae18:	e0c00115 	stw	r3,4(fp)
    ae1c:	e0800015 	stw	r2,0(fp)
    ae20:	010003c4 	movi	r4,15
    ae24:	24c09816 	blt	r4,r19,b088 <_strtod_r+0x660>
    ae28:	d9800f17 	ldw	r6,60(sp)
    ae2c:	303f7526 	beq	r6,zero,ac04 <_strtod_r+0x1dc>
    ae30:	0183be0e 	bge	zero,r6,bd2c <_strtod_r+0x1304>
    ae34:	00800584 	movi	r2,22
    ae38:	1182b20e 	bge	r2,r6,b904 <_strtod_r+0xedc>
    ae3c:	d8c00f17 	ldw	r3,60(sp)
    ae40:	24e3c83a 	sub	r17,r4,r19
    ae44:	88800584 	addi	r2,r17,22
    ae48:	10c08f16 	blt	r2,r3,b088 <_strtod_r+0x660>
    ae4c:	880890fa 	slli	r4,r17,3
    ae50:	04000074 	movhi	r16,1
    ae54:	840fb304 	addi	r16,r16,16076
    ae58:	e0800017 	ldw	r2,0(fp)
    ae5c:	2409883a 	add	r4,r4,r16
    ae60:	22000017 	ldw	r8,0(r4)
    ae64:	22400117 	ldw	r9,4(r4)
    ae68:	e0c00117 	ldw	r3,4(fp)
    ae6c:	1009883a 	mov	r4,r2
    ae70:	480f883a 	mov	r7,r9
    ae74:	180b883a 	mov	r5,r3
    ae78:	400d883a 	mov	r6,r8
    ae7c:	000ed140 	call	ed14 <__muldf3>
    ae80:	d9000f17 	ldw	r4,60(sp)
    ae84:	180b883a 	mov	r5,r3
    ae88:	2455c83a 	sub	r10,r4,r17
    ae8c:	501490fa 	slli	r10,r10,3
    ae90:	1009883a 	mov	r4,r2
    ae94:	5415883a 	add	r10,r10,r16
    ae98:	52000017 	ldw	r8,0(r10)
    ae9c:	52400117 	ldw	r9,4(r10)
    aea0:	0002a206 	br	b92c <_strtod_r+0xf04>
    aea4:	40c00047 	ldb	r3,1(r8)
    aea8:	00801604 	movi	r2,88
    aeac:	18804e26 	beq	r3,r2,afe8 <_strtod_r+0x5c0>
    aeb0:	00801e04 	movi	r2,120
    aeb4:	18804c26 	beq	r3,r2,afe8 <_strtod_r+0x5c0>
    aeb8:	42000044 	addi	r8,r8,1
    aebc:	da000415 	stw	r8,16(sp)
    aec0:	40c00007 	ldb	r3,0(r8)
    aec4:	00800c04 	movi	r2,48
    aec8:	18bffb26 	beq	r3,r2,aeb8 <_strtod_r+0x490>
    aecc:	183f4d26 	beq	r3,zero,ac04 <_strtod_r+0x1dc>
    aed0:	03c00044 	movi	r15,1
    aed4:	003f2406 	br	ab68 <_strtod_r+0x140>
    aed8:	42000044 	addi	r8,r8,1
    aedc:	da000415 	stw	r8,16(sp)
    aee0:	19000047 	ldb	r4,1(r3)
    aee4:	3000b726 	beq	r6,zero,b1c4 <_strtod_r+0x79c>
    aee8:	3027883a 	mov	r19,r6
    aeec:	0015883a 	mov	r10,zero
    aef0:	000f883a 	mov	r7,zero
    aef4:	227ff404 	addi	r9,r4,-48
    aef8:	00800244 	movi	r2,9
    aefc:	1242592e 	bgeu	r2,r9,b864 <_strtod_r+0xe3c>
    af00:	04800044 	movi	r18,1
    af04:	003f3706 	br	abe4 <_strtod_r+0x1bc>
    af08:	7804c03a 	cmpne	r2,r15,zero
    af0c:	103f3d1e 	bne	r2,zero,ac04 <_strtod_r+0x1dc>
    af10:	9004c03a 	cmpne	r2,r18,zero
    af14:	103f5e1e 	bne	r2,zero,ac90 <_strtod_r+0x268>
    af18:	00801384 	movi	r2,78
    af1c:	2083a226 	beq	r4,r2,bda8 <_strtod_r+0x1380>
    af20:	11039d16 	blt	r2,r4,bd98 <_strtod_r+0x1370>
    af24:	00801244 	movi	r2,73
    af28:	20bf591e 	bne	r4,r2,ac90 <_strtod_r+0x268>
    af2c:	dc000404 	addi	r16,sp,16
    af30:	8009883a 	mov	r4,r16
    af34:	01400074 	movhi	r5,1
    af38:	294ffc04 	addi	r5,r5,16368
    af3c:	000a9e00 	call	a9e0 <match>
    af40:	103f5326 	beq	r2,zero,ac90 <_strtod_r+0x268>
    af44:	d8800417 	ldw	r2,16(sp)
    af48:	8009883a 	mov	r4,r16
    af4c:	01400074 	movhi	r5,1
    af50:	294ffd04 	addi	r5,r5,16372
    af54:	123fffc4 	addi	r8,r2,-1
    af58:	da000415 	stw	r8,16(sp)
    af5c:	000a9e00 	call	a9e0 <match>
    af60:	1000031e 	bne	r2,zero,af70 <_strtod_r+0x548>
    af64:	d8800417 	ldw	r2,16(sp)
    af68:	12000044 	addi	r8,r2,1
    af6c:	da000415 	stw	r8,16(sp)
    af70:	019ffc34 	movhi	r6,32752
    af74:	e1800115 	stw	r6,4(fp)
    af78:	e0000015 	stw	zero,0(fp)
    af7c:	003f2106 	br	ac04 <_strtod_r+0x1dc>
    af80:	d9801215 	stw	r6,72(sp)
    af84:	003f8506 	br	ad9c <_strtod_r+0x374>
    af88:	d8001115 	stw	zero,68(sp)
    af8c:	42000044 	addi	r8,r8,1
    af90:	da000415 	stw	r8,16(sp)
    af94:	40800007 	ldb	r2,0(r8)
    af98:	103eef1e 	bne	r2,zero,ab58 <_strtod_r+0x130>
    af9c:	d8001115 	stw	zero,68(sp)
    afa0:	dc400415 	stw	r17,16(sp)
    afa4:	003f1706 	br	ac04 <_strtod_r+0x1dc>
    afa8:	42000044 	addi	r8,r8,1
    afac:	da000415 	stw	r8,16(sp)
    afb0:	003eaf06 	br	aa70 <_strtod_r+0x48>
    afb4:	00800044 	movi	r2,1
    afb8:	d8801115 	stw	r2,68(sp)
    afbc:	003ff306 	br	af8c <_strtod_r+0x564>
    afc0:	001d883a 	mov	r14,zero
    afc4:	42000044 	addi	r8,r8,1
    afc8:	da000415 	stw	r8,16(sp)
    afcc:	21000047 	ldb	r4,1(r4)
    afd0:	00800244 	movi	r2,9
    afd4:	20fff404 	addi	r3,r4,-48
    afd8:	10ff412e 	bgeu	r2,r3,ace0 <_strtod_r+0x2b8>
    afdc:	000b883a 	mov	r5,zero
    afe0:	dc400415 	stw	r17,16(sp)
    afe4:	003f0506 	br	abfc <_strtod_r+0x1d4>
    afe8:	d8c01117 	ldw	r3,68(sp)
    afec:	04800074 	movhi	r18,1
    aff0:	94927004 	addi	r18,r18,18880
    aff4:	d8800504 	addi	r2,sp,20
    aff8:	a809883a 	mov	r4,r21
    affc:	d9400404 	addi	r5,sp,16
    b000:	900d883a 	mov	r6,r18
    b004:	d9c00604 	addi	r7,sp,24
    b008:	d8800015 	stw	r2,0(sp)
    b00c:	d8c00115 	stw	r3,4(sp)
    b010:	000cf940 	call	cf94 <__gethex>
    b014:	140001cc 	andi	r16,r2,7
    b018:	1027883a 	mov	r19,r2
    b01c:	803ef926 	beq	r16,zero,ac04 <_strtod_r+0x1dc>
    b020:	05000184 	movi	r20,6
    b024:	853f1a26 	beq	r16,r20,ac90 <_strtod_r+0x268>
    b028:	d9800517 	ldw	r6,20(sp)
    b02c:	30000626 	beq	r6,zero,b048 <_strtod_r+0x620>
    b030:	91400017 	ldw	r5,0(r18)
    b034:	d9000d04 	addi	r4,sp,52
    b038:	00095580 	call	9558 <__copybits>
    b03c:	d9400517 	ldw	r5,20(sp)
    b040:	a809883a 	mov	r4,r21
    b044:	00090b80 	call	90b8 <_Bfree>
    b048:	d9400617 	ldw	r5,24(sp)
    b04c:	a4024136 	bltu	r20,r16,b954 <_strtod_r+0xf2c>
    b050:	8405883a 	add	r2,r16,r16
    b054:	1085883a 	add	r2,r2,r2
    b058:	00c00074 	movhi	r3,1
    b05c:	18ec1b04 	addi	r3,r3,-20372
    b060:	10c5883a 	add	r2,r2,r3
    b064:	11000017 	ldw	r4,0(r2)
    b068:	2000683a 	jmp	r4
    b06c:	0000b994 	movui	zero,742
    b070:	0000b9a0 	cmpeqi	zero,zero,742
    b074:	0000b944 	movi	zero,741
    b078:	0000b96c 	andhi	zero,zero,741
    b07c:	0000b97c 	xorhi	zero,zero,741
    b080:	0000b9a0 	cmpeqi	zero,zero,742
    b084:	0000b994 	movui	zero,742
    b088:	d8c00f17 	ldw	r3,60(sp)
    b08c:	9c85c83a 	sub	r2,r19,r18
    b090:	18a1883a 	add	r16,r3,r2
    b094:	0402d00e 	bge	zero,r16,bbd8 <_strtod_r+0x11b0>
    b098:	814003cc 	andi	r5,r16,15
    b09c:	28000f26 	beq	r5,zero,b0dc <_strtod_r+0x6b4>
    b0a0:	280a90fa 	slli	r5,r5,3
    b0a4:	01000074 	movhi	r4,1
    b0a8:	210fb304 	addi	r4,r4,16076
    b0ac:	e0800017 	ldw	r2,0(fp)
    b0b0:	290b883a 	add	r5,r5,r4
    b0b4:	2a000017 	ldw	r8,0(r5)
    b0b8:	e0c00117 	ldw	r3,4(fp)
    b0bc:	2a400117 	ldw	r9,4(r5)
    b0c0:	1009883a 	mov	r4,r2
    b0c4:	180b883a 	mov	r5,r3
    b0c8:	480f883a 	mov	r7,r9
    b0cc:	400d883a 	mov	r6,r8
    b0d0:	000ed140 	call	ed14 <__muldf3>
    b0d4:	e0c00115 	stw	r3,4(fp)
    b0d8:	e0800015 	stw	r2,0(fp)
    b0dc:	00bffc04 	movi	r2,-16
    b0e0:	808c703a 	and	r6,r16,r2
    b0e4:	30005b26 	beq	r6,zero,b254 <_strtod_r+0x82c>
    b0e8:	00804d04 	movi	r2,308
    b0ec:	1181fd16 	blt	r2,r6,b8e4 <_strtod_r+0xebc>
    b0f0:	3021d13a 	srai	r16,r6,4
    b0f4:	00800044 	movi	r2,1
    b0f8:	1403610e 	bge	r2,r16,be80 <_strtod_r+0x1458>
    b0fc:	102f883a 	mov	r23,r2
    b100:	0025883a 	mov	r18,zero
    b104:	04400074 	movhi	r17,1
    b108:	8c4fe504 	addi	r17,r17,16276
    b10c:	8080004c 	andi	r2,r16,1
    b110:	1005003a 	cmpeq	r2,r2,zero
    b114:	1000091e 	bne	r2,zero,b13c <_strtod_r+0x714>
    b118:	e0800017 	ldw	r2,0(fp)
    b11c:	e0c00117 	ldw	r3,4(fp)
    b120:	89800017 	ldw	r6,0(r17)
    b124:	89c00117 	ldw	r7,4(r17)
    b128:	180b883a 	mov	r5,r3
    b12c:	1009883a 	mov	r4,r2
    b130:	000ed140 	call	ed14 <__muldf3>
    b134:	e0c00115 	stw	r3,4(fp)
    b138:	e0800015 	stw	r2,0(fp)
    b13c:	8021d07a 	srai	r16,r16,1
    b140:	94800044 	addi	r18,r18,1
    b144:	8c400204 	addi	r17,r17,8
    b148:	bc3ff016 	blt	r23,r16,b10c <_strtod_r+0x6e4>
    b14c:	900e90fa 	slli	r7,r18,3
    b150:	01800074 	movhi	r6,1
    b154:	318fe504 	addi	r6,r6,16276
    b158:	e2000117 	ldw	r8,4(fp)
    b15c:	398f883a 	add	r7,r7,r6
    b160:	38800017 	ldw	r2,0(r7)
    b164:	38c00117 	ldw	r3,4(r7)
    b168:	e1000017 	ldw	r4,0(fp)
    b16c:	01bf2c34 	movhi	r6,64688
    b170:	418d883a 	add	r6,r8,r6
    b174:	300b883a 	mov	r5,r6
    b178:	180f883a 	mov	r7,r3
    b17c:	100d883a 	mov	r6,r2
    b180:	000ed140 	call	ed14 <__muldf3>
    b184:	1009883a 	mov	r4,r2
    b188:	180b883a 	mov	r5,r3
    b18c:	199ffc2c 	andhi	r6,r3,32752
    b190:	009f2834 	movhi	r2,31904
    b194:	e1000015 	stw	r4,0(fp)
    b198:	e1400115 	stw	r5,4(fp)
    b19c:	1181d136 	bltu	r2,r6,b8e4 <_strtod_r+0xebc>
    b1a0:	009f2434 	movhi	r2,31888
    b1a4:	1183202e 	bgeu	r2,r6,be28 <_strtod_r+0x1400>
    b1a8:	d8001415 	stw	zero,80(sp)
    b1ac:	019ffc34 	movhi	r6,32752
    b1b0:	31bfffc4 	addi	r6,r6,-1
    b1b4:	01ffffc4 	movi	r7,-1
    b1b8:	e1800115 	stw	r6,4(fp)
    b1bc:	e1c00015 	stw	r7,0(fp)
    b1c0:	00002506 	br	b258 <_strtod_r+0x830>
    b1c4:	00800c04 	movi	r2,48
    b1c8:	2083151e 	bne	r4,r2,be20 <_strtod_r+0x13f8>
    b1cc:	2005883a 	mov	r2,r4
    b1d0:	000f883a 	mov	r7,zero
    b1d4:	42000044 	addi	r8,r8,1
    b1d8:	da000415 	stw	r8,16(sp)
    b1dc:	41000007 	ldb	r4,0(r8)
    b1e0:	39c00044 	addi	r7,r7,1
    b1e4:	20bffb26 	beq	r4,r2,b1d4 <_strtod_r+0x7ac>
    b1e8:	20fff3c4 	addi	r3,r4,-49
    b1ec:	00800204 	movi	r2,8
    b1f0:	10c1b836 	bltu	r2,r3,b8d4 <_strtod_r+0xeac>
    b1f4:	dd800417 	ldw	r22,16(sp)
    b1f8:	3815883a 	mov	r10,r7
    b1fc:	227ff404 	addi	r9,r4,-48
    b200:	b011883a 	mov	r8,r22
    b204:	0027883a 	mov	r19,zero
    b208:	01c00044 	movi	r7,1
    b20c:	4801fe26 	beq	r9,zero,ba08 <_strtod_r+0xfe0>
    b210:	00800044 	movi	r2,1
    b214:	51d5883a 	add	r10,r10,r7
    b218:	11c31f0e 	bge	r2,r7,be98 <_strtod_r+0x1470>
    b21c:	1009883a 	mov	r4,r2
    b220:	9807883a 	mov	r3,r19
    b224:	02c00204 	movi	r11,8
    b228:	03000404 	movi	r12,16
    b22c:	00000306 	br	b23c <_strtod_r+0x814>
    b230:	a50002a4 	muli	r20,r20,10
    b234:	21000044 	addi	r4,r4,1
    b238:	21c1eb26 	beq	r4,r7,b9e8 <_strtod_r+0xfc0>
    b23c:	18c00044 	addi	r3,r3,1
    b240:	18bfffc4 	addi	r2,r3,-1
    b244:	58bffa0e 	bge	r11,r2,b230 <_strtod_r+0x808>
    b248:	60fffa16 	blt	r12,r3,b234 <_strtod_r+0x80c>
    b24c:	840002a4 	muli	r16,r16,10
    b250:	003ff806 	br	b234 <_strtod_r+0x80c>
    b254:	d8001415 	stw	zero,80(sp)
    b258:	d9801217 	ldw	r6,72(sp)
    b25c:	a809883a 	mov	r4,r21
    b260:	b00b883a 	mov	r5,r22
    b264:	980f883a 	mov	r7,r19
    b268:	dd000015 	stw	r20,0(sp)
    b26c:	0009f8c0 	call	9f8c <__s2b>
    b270:	d9800f17 	ldw	r6,60(sp)
    b274:	11000304 	addi	r4,r2,12
    b278:	d8801015 	stw	r2,64(sp)
    b27c:	300c803a 	cmplt	r6,r6,zero
    b280:	d9001715 	stw	r4,92(sp)
    b284:	d9801615 	stw	r6,88(sp)
    b288:	d8801017 	ldw	r2,64(sp)
    b28c:	a809883a 	mov	r4,r21
    b290:	11400117 	ldw	r5,4(r2)
    b294:	00096380 	call	9638 <_Balloc>
    b298:	d8c01017 	ldw	r3,64(sp)
    b29c:	d9401717 	ldw	r5,92(sp)
    b2a0:	11000304 	addi	r4,r2,12
    b2a4:	19800417 	ldw	r6,16(r3)
    b2a8:	102f883a 	mov	r23,r2
    b2ac:	318d883a 	add	r6,r6,r6
    b2b0:	318d883a 	add	r6,r6,r6
    b2b4:	31800204 	addi	r6,r6,8
    b2b8:	0002f540 	call	2f54 <memcpy>
    b2bc:	e2000017 	ldw	r8,0(fp)
    b2c0:	e2400117 	ldw	r9,4(fp)
    b2c4:	d9800304 	addi	r6,sp,12
    b2c8:	400b883a 	mov	r5,r8
    b2cc:	a809883a 	mov	r4,r21
    b2d0:	d9c00204 	addi	r7,sp,8
    b2d4:	d9800015 	stw	r6,0(sp)
    b2d8:	480d883a 	mov	r6,r9
    b2dc:	00096f40 	call	96f4 <__d2b>
    b2e0:	a809883a 	mov	r4,r21
    b2e4:	01400044 	movi	r5,1
    b2e8:	d8800515 	stw	r2,20(sp)
    b2ec:	0009d300 	call	9d30 <__i2b>
    b2f0:	102d883a 	mov	r22,r2
    b2f4:	d8801617 	ldw	r2,88(sp)
    b2f8:	1001051e 	bne	r2,zero,b710 <_strtod_r+0xce8>
    b2fc:	dd000f17 	ldw	r20,60(sp)
    b300:	000f883a 	mov	r7,zero
    b304:	0013883a 	mov	r9,zero
    b308:	a011883a 	mov	r8,r20
    b30c:	d8800217 	ldw	r2,8(sp)
    b310:	1000fd16 	blt	r2,zero,b708 <_strtod_r+0xce0>
    b314:	388f883a 	add	r7,r7,r2
    b318:	d9801417 	ldw	r6,80(sp)
    b31c:	d9400317 	ldw	r5,12(sp)
    b320:	00ff0084 	movi	r3,-1022
    b324:	1189c83a 	sub	r4,r2,r6
    b328:	2145883a 	add	r2,r4,r5
    b32c:	10bfffc4 	addi	r2,r2,-1
    b330:	10c09f0e 	bge	r2,r3,b5b0 <_strtod_r+0xb88>
    b334:	21810cc4 	addi	r6,r4,1075
    b338:	d8c01417 	ldw	r3,80(sp)
    b33c:	4185883a 	add	r2,r8,r6
    b340:	39a1883a 	add	r16,r7,r6
    b344:	18a5883a 	add	r18,r3,r2
    b348:	3807883a 	mov	r3,r7
    b34c:	81c0010e 	bge	r16,r7,b354 <_strtod_r+0x92c>
    b350:	8007883a 	mov	r3,r16
    b354:	9005883a 	mov	r2,r18
    b358:	1c80010e 	bge	r3,r18,b360 <_strtod_r+0x938>
    b35c:	1805883a 	mov	r2,r3
    b360:	0080e70e 	bge	zero,r2,b700 <_strtod_r+0xcd8>
    b364:	38a7c83a 	sub	r19,r7,r2
    b368:	80a1c83a 	sub	r16,r16,r2
    b36c:	90a5c83a 	sub	r18,r18,r2
    b370:	02400e0e 	bge	zero,r9,b3ac <_strtod_r+0x984>
    b374:	480d883a 	mov	r6,r9
    b378:	b00b883a 	mov	r5,r22
    b37c:	a809883a 	mov	r4,r21
    b380:	0009e6c0 	call	9e6c <__pow5mult>
    b384:	d9800517 	ldw	r6,20(sp)
    b388:	a809883a 	mov	r4,r21
    b38c:	100b883a 	mov	r5,r2
    b390:	102d883a 	mov	r22,r2
    b394:	0009b480 	call	9b48 <__multiply>
    b398:	d9400517 	ldw	r5,20(sp)
    b39c:	1023883a 	mov	r17,r2
    b3a0:	a809883a 	mov	r4,r21
    b3a4:	00090b80 	call	90b8 <_Bfree>
    b3a8:	dc400515 	stw	r17,20(sp)
    b3ac:	0400050e 	bge	zero,r16,b3c4 <_strtod_r+0x99c>
    b3b0:	d9400517 	ldw	r5,20(sp)
    b3b4:	800d883a 	mov	r6,r16
    b3b8:	a809883a 	mov	r4,r21
    b3bc:	00099fc0 	call	99fc <__lshift>
    b3c0:	d8800515 	stw	r2,20(sp)
    b3c4:	a000741e 	bne	r20,zero,b598 <_strtod_r+0xb70>
    b3c8:	0480050e 	bge	zero,r18,b3e0 <_strtod_r+0x9b8>
    b3cc:	b80b883a 	mov	r5,r23
    b3d0:	900d883a 	mov	r6,r18
    b3d4:	a809883a 	mov	r4,r21
    b3d8:	00099fc0 	call	99fc <__lshift>
    b3dc:	102f883a 	mov	r23,r2
    b3e0:	04c0050e 	bge	zero,r19,b3f8 <_strtod_r+0x9d0>
    b3e4:	b00b883a 	mov	r5,r22
    b3e8:	980d883a 	mov	r6,r19
    b3ec:	a809883a 	mov	r4,r21
    b3f0:	00099fc0 	call	99fc <__lshift>
    b3f4:	102d883a 	mov	r22,r2
    b3f8:	d9400517 	ldw	r5,20(sp)
    b3fc:	a809883a 	mov	r4,r21
    b400:	b80d883a 	mov	r6,r23
    b404:	00098700 	call	9870 <__mdiff>
    b408:	11000317 	ldw	r4,12(r2)
    b40c:	b00b883a 	mov	r5,r22
    b410:	10000315 	stw	zero,12(r2)
    b414:	d9001315 	stw	r4,76(sp)
    b418:	1009883a 	mov	r4,r2
    b41c:	1029883a 	mov	r20,r2
    b420:	00092140 	call	9214 <__mcmp>
    b424:	10017c16 	blt	r2,zero,ba18 <_strtod_r+0xff0>
    b428:	1001af26 	beq	r2,zero,bae8 <_strtod_r+0x10c0>
    b42c:	a009883a 	mov	r4,r20
    b430:	b00b883a 	mov	r5,r22
    b434:	00094140 	call	9414 <__ratio>
    b438:	0011883a 	mov	r8,zero
    b43c:	02500034 	movhi	r9,16384
    b440:	480f883a 	mov	r7,r9
    b444:	1009883a 	mov	r4,r2
    b448:	180b883a 	mov	r5,r3
    b44c:	400d883a 	mov	r6,r8
    b450:	1021883a 	mov	r16,r2
    b454:	1823883a 	mov	r17,r3
    b458:	000f5d80 	call	f5d8 <__ledf2>
    b45c:	00805716 	blt	zero,r2,b5bc <_strtod_r+0xb94>
    b460:	d9801317 	ldw	r6,76(sp)
    b464:	3025003a 	cmpeq	r18,r6,zero
    b468:	90008b1e 	bne	r18,zero,b698 <_strtod_r+0xc70>
    b46c:	008ffc34 	movhi	r2,16368
    b470:	0021883a 	mov	r16,zero
    b474:	1023883a 	mov	r17,r2
    b478:	d8000715 	stw	zero,28(sp)
    b47c:	d8800815 	stw	r2,32(sp)
    b480:	e1c00117 	ldw	r7,4(fp)
    b484:	009ff834 	movhi	r2,32736
    b488:	3cdffc2c 	andhi	r19,r7,32752
    b48c:	98805e26 	beq	r19,r2,b608 <_strtod_r+0xbe0>
    b490:	d8801417 	ldw	r2,80(sp)
    b494:	10001b26 	beq	r2,zero,b504 <_strtod_r+0xadc>
    b498:	0081a834 	movhi	r2,1696
    b49c:	14c01936 	bltu	r2,r19,b504 <_strtod_r+0xadc>
    b4a0:	00bff034 	movhi	r2,65472
    b4a4:	00d07834 	movhi	r3,16864
    b4a8:	18ffffc4 	addi	r3,r3,-1
    b4ac:	180f883a 	mov	r7,r3
    b4b0:	8009883a 	mov	r4,r16
    b4b4:	880b883a 	mov	r5,r17
    b4b8:	100d883a 	mov	r6,r2
    b4bc:	000f5d80 	call	f5d8 <__ledf2>
    b4c0:	00800b16 	blt	zero,r2,b4f0 <_strtod_r+0xac8>
    b4c4:	880b883a 	mov	r5,r17
    b4c8:	8009883a 	mov	r4,r16
    b4cc:	000da780 	call	da78 <__fixunsdfsi>
    b4d0:	1000df1e 	bne	r2,zero,b850 <_strtod_r+0xe28>
    b4d4:	0021883a 	mov	r16,zero
    b4d8:	044ffc34 	movhi	r17,16368
    b4dc:	9000d91e 	bne	r18,zero,b844 <_strtod_r+0xe1c>
    b4e0:	8005883a 	mov	r2,r16
    b4e4:	8807883a 	mov	r3,r17
    b4e8:	d8c00815 	stw	r3,32(sp)
    b4ec:	d8800715 	stw	r2,28(sp)
    b4f0:	d8800817 	ldw	r2,32(sp)
    b4f4:	00c1ac34 	movhi	r3,1712
    b4f8:	14c5c83a 	sub	r2,r2,r19
    b4fc:	10c5883a 	add	r2,r2,r3
    b500:	d8800815 	stw	r2,32(sp)
    b504:	e0800017 	ldw	r2,0(fp)
    b508:	e0c00117 	ldw	r3,4(fp)
    b50c:	1009883a 	mov	r4,r2
    b510:	180b883a 	mov	r5,r3
    b514:	00092740 	call	9274 <__ulp>
    b518:	d9800717 	ldw	r6,28(sp)
    b51c:	d9c00817 	ldw	r7,32(sp)
    b520:	180b883a 	mov	r5,r3
    b524:	1009883a 	mov	r4,r2
    b528:	000ed140 	call	ed14 <__muldf3>
    b52c:	e2000017 	ldw	r8,0(fp)
    b530:	e2400117 	ldw	r9,4(fp)
    b534:	180b883a 	mov	r5,r3
    b538:	1009883a 	mov	r4,r2
    b53c:	480f883a 	mov	r7,r9
    b540:	400d883a 	mov	r6,r8
    b544:	000eca00 	call	eca0 <__adddf3>
    b548:	e0c00115 	stw	r3,4(fp)
    b54c:	e0800015 	stw	r2,0(fp)
    b550:	d8c01417 	ldw	r3,80(sp)
    b554:	e4800117 	ldw	r18,4(fp)
    b558:	1800021e 	bne	r3,zero,b564 <_strtod_r+0xb3c>
    b55c:	909ffc2c 	andhi	r2,r18,32752
    b560:	98807b26 	beq	r19,r2,b750 <_strtod_r+0xd28>
    b564:	d9400517 	ldw	r5,20(sp)
    b568:	a809883a 	mov	r4,r21
    b56c:	00090b80 	call	90b8 <_Bfree>
    b570:	a809883a 	mov	r4,r21
    b574:	b80b883a 	mov	r5,r23
    b578:	00090b80 	call	90b8 <_Bfree>
    b57c:	a809883a 	mov	r4,r21
    b580:	b00b883a 	mov	r5,r22
    b584:	00090b80 	call	90b8 <_Bfree>
    b588:	a809883a 	mov	r4,r21
    b58c:	a00b883a 	mov	r5,r20
    b590:	00090b80 	call	90b8 <_Bfree>
    b594:	003f3c06 	br	b288 <_strtod_r+0x860>
    b598:	b80b883a 	mov	r5,r23
    b59c:	a00d883a 	mov	r6,r20
    b5a0:	a809883a 	mov	r4,r21
    b5a4:	0009e6c0 	call	9e6c <__pow5mult>
    b5a8:	102f883a 	mov	r23,r2
    b5ac:	003f8606 	br	b3c8 <_strtod_r+0x9a0>
    b5b0:	00800d84 	movi	r2,54
    b5b4:	114dc83a 	sub	r6,r2,r5
    b5b8:	003f5f06 	br	b338 <_strtod_r+0x910>
    b5bc:	0005883a 	mov	r2,zero
    b5c0:	00cff834 	movhi	r3,16352
    b5c4:	880b883a 	mov	r5,r17
    b5c8:	8009883a 	mov	r4,r16
    b5cc:	100d883a 	mov	r6,r2
    b5d0:	180f883a 	mov	r7,r3
    b5d4:	000ed140 	call	ed14 <__muldf3>
    b5d8:	d9801317 	ldw	r6,76(sp)
    b5dc:	1021883a 	mov	r16,r2
    b5e0:	1823883a 	mov	r17,r3
    b5e4:	3025003a 	cmpeq	r18,r6,zero
    b5e8:	90000126 	beq	r18,zero,b5f0 <_strtod_r+0xbc8>
    b5ec:	18e0003c 	xorhi	r3,r3,32768
    b5f0:	d8800715 	stw	r2,28(sp)
    b5f4:	d8c00815 	stw	r3,32(sp)
    b5f8:	e1c00117 	ldw	r7,4(fp)
    b5fc:	009ff834 	movhi	r2,32736
    b600:	3cdffc2c 	andhi	r19,r7,32752
    b604:	98bfa21e 	bne	r19,r2,b490 <_strtod_r+0xa68>
    b608:	e1000017 	ldw	r4,0(fp)
    b60c:	01bf2c34 	movhi	r6,64688
    b610:	398d883a 	add	r6,r7,r6
    b614:	d9000b15 	stw	r4,44(sp)
    b618:	d9c00c15 	stw	r7,48(sp)
    b61c:	300b883a 	mov	r5,r6
    b620:	e1800115 	stw	r6,4(fp)
    b624:	00092740 	call	9274 <__ulp>
    b628:	d9800717 	ldw	r6,28(sp)
    b62c:	d9c00817 	ldw	r7,32(sp)
    b630:	180b883a 	mov	r5,r3
    b634:	1009883a 	mov	r4,r2
    b638:	000ed140 	call	ed14 <__muldf3>
    b63c:	e2000017 	ldw	r8,0(fp)
    b640:	e2400117 	ldw	r9,4(fp)
    b644:	180b883a 	mov	r5,r3
    b648:	1009883a 	mov	r4,r2
    b64c:	480f883a 	mov	r7,r9
    b650:	400d883a 	mov	r6,r8
    b654:	000eca00 	call	eca0 <__adddf3>
    b658:	1009883a 	mov	r4,r2
    b65c:	180b883a 	mov	r5,r3
    b660:	009f2834 	movhi	r2,31904
    b664:	10bfffc4 	addi	r2,r2,-1
    b668:	18dffc2c 	andhi	r3,r3,32752
    b66c:	e1000015 	stw	r4,0(fp)
    b670:	e1400115 	stw	r5,4(fp)
    b674:	10c06f2e 	bgeu	r2,r3,b834 <_strtod_r+0xe0c>
    b678:	d8800c17 	ldw	r2,48(sp)
    b67c:	011ffc34 	movhi	r4,32752
    b680:	213fffc4 	addi	r4,r4,-1
    b684:	11007a26 	beq	r2,r4,b870 <_strtod_r+0xe48>
    b688:	01ffffc4 	movi	r7,-1
    b68c:	e1000115 	stw	r4,4(fp)
    b690:	e1c00015 	stw	r7,0(fp)
    b694:	003fb306 	br	b564 <_strtod_r+0xb3c>
    b698:	e0c00017 	ldw	r3,0(fp)
    b69c:	1800221e 	bne	r3,zero,b728 <_strtod_r+0xd00>
    b6a0:	e0800117 	ldw	r2,4(fp)
    b6a4:	00c00434 	movhi	r3,16
    b6a8:	18ffffc4 	addi	r3,r3,-1
    b6ac:	10c4703a 	and	r2,r2,r3
    b6b0:	1000211e 	bne	r2,zero,b738 <_strtod_r+0xd10>
    b6b4:	0005883a 	mov	r2,zero
    b6b8:	00cffc34 	movhi	r3,16368
    b6bc:	180f883a 	mov	r7,r3
    b6c0:	8009883a 	mov	r4,r16
    b6c4:	880b883a 	mov	r5,r17
    b6c8:	100d883a 	mov	r6,r2
    b6cc:	000f5500 	call	f550 <__ltdf2>
    b6d0:	10013c16 	blt	r2,zero,bbc4 <_strtod_r+0x119c>
    b6d4:	0005883a 	mov	r2,zero
    b6d8:	00cff834 	movhi	r3,16352
    b6dc:	880b883a 	mov	r5,r17
    b6e0:	8009883a 	mov	r4,r16
    b6e4:	180f883a 	mov	r7,r3
    b6e8:	100d883a 	mov	r6,r2
    b6ec:	000ed140 	call	ed14 <__muldf3>
    b6f0:	1823883a 	mov	r17,r3
    b6f4:	1021883a 	mov	r16,r2
    b6f8:	18e0003c 	xorhi	r3,r3,32768
    b6fc:	003fbc06 	br	b5f0 <_strtod_r+0xbc8>
    b700:	3827883a 	mov	r19,r7
    b704:	003f1a06 	br	b370 <_strtod_r+0x948>
    b708:	4091c83a 	sub	r8,r8,r2
    b70c:	003f0206 	br	b318 <_strtod_r+0x8f0>
    b710:	d8c00f17 	ldw	r3,60(sp)
    b714:	0011883a 	mov	r8,zero
    b718:	0029883a 	mov	r20,zero
    b71c:	00d3c83a 	sub	r9,zero,r3
    b720:	480f883a 	mov	r7,r9
    b724:	003ef906 	br	b30c <_strtod_r+0x8e4>
    b728:	00800044 	movi	r2,1
    b72c:	1880021e 	bne	r3,r2,b738 <_strtod_r+0xd10>
    b730:	e0800117 	ldw	r2,4(fp)
    b734:	1000a526 	beq	r2,zero,b9cc <_strtod_r+0xfa4>
    b738:	00affc34 	movhi	r2,49136
    b73c:	0021883a 	mov	r16,zero
    b740:	044ffc34 	movhi	r17,16368
    b744:	d8800815 	stw	r2,32(sp)
    b748:	d8000715 	stw	zero,28(sp)
    b74c:	003f4c06 	br	b480 <_strtod_r+0xa58>
    b750:	880b883a 	mov	r5,r17
    b754:	8009883a 	mov	r4,r16
    b758:	000f7580 	call	f758 <__fixdfsi>
    b75c:	1009883a 	mov	r4,r2
    b760:	000f6600 	call	f660 <__floatsidf>
    b764:	880b883a 	mov	r5,r17
    b768:	8009883a 	mov	r4,r16
    b76c:	100d883a 	mov	r6,r2
    b770:	180f883a 	mov	r7,r3
    b774:	000ec200 	call	ec20 <__subdf3>
    b778:	d9001317 	ldw	r4,76(sp)
    b77c:	100b883a 	mov	r5,r2
    b780:	180d883a 	mov	r6,r3
    b784:	1021883a 	mov	r16,r2
    b788:	1823883a 	mov	r17,r3
    b78c:	2000061e 	bne	r4,zero,b7a8 <_strtod_r+0xd80>
    b790:	e0800017 	ldw	r2,0(fp)
    b794:	1000041e 	bne	r2,zero,b7a8 <_strtod_r+0xd80>
    b798:	00c00434 	movhi	r3,16
    b79c:	18ffffc4 	addi	r3,r3,-1
    b7a0:	90c4703a 	and	r2,r18,r3
    b7a4:	10004026 	beq	r2,zero,b8a8 <_strtod_r+0xe80>
    b7a8:	00a52834 	movhi	r2,38048
    b7ac:	108d6544 	addi	r2,r2,13717
    b7b0:	00cff834 	movhi	r3,16352
    b7b4:	18ffffc4 	addi	r3,r3,-1
    b7b8:	180f883a 	mov	r7,r3
    b7bc:	8009883a 	mov	r4,r16
    b7c0:	880b883a 	mov	r5,r17
    b7c4:	100d883a 	mov	r6,r2
    b7c8:	000f5500 	call	f550 <__ltdf2>
    b7cc:	10000916 	blt	r2,zero,b7f4 <_strtod_r+0xdcc>
    b7d0:	008d6c34 	movhi	r2,13744
    b7d4:	10b94d44 	addi	r2,r2,-6859
    b7d8:	00cff834 	movhi	r3,16352
    b7dc:	880b883a 	mov	r5,r17
    b7e0:	180f883a 	mov	r7,r3
    b7e4:	8009883a 	mov	r4,r16
    b7e8:	100d883a 	mov	r6,r2
    b7ec:	000f4400 	call	f440 <__gtdf2>
    b7f0:	00bf5c0e 	bge	zero,r2,b564 <_strtod_r+0xb3c>
    b7f4:	d9400517 	ldw	r5,20(sp)
    b7f8:	a809883a 	mov	r4,r21
    b7fc:	00090b80 	call	90b8 <_Bfree>
    b800:	a809883a 	mov	r4,r21
    b804:	b80b883a 	mov	r5,r23
    b808:	00090b80 	call	90b8 <_Bfree>
    b80c:	a809883a 	mov	r4,r21
    b810:	b00b883a 	mov	r5,r22
    b814:	00090b80 	call	90b8 <_Bfree>
    b818:	d9401017 	ldw	r5,64(sp)
    b81c:	a809883a 	mov	r4,r21
    b820:	00090b80 	call	90b8 <_Bfree>
    b824:	a809883a 	mov	r4,r21
    b828:	a00b883a 	mov	r5,r20
    b82c:	00090b80 	call	90b8 <_Bfree>
    b830:	003cf406 	br	ac04 <_strtod_r+0x1dc>
    b834:	0080d434 	movhi	r2,848
    b838:	288d883a 	add	r6,r5,r2
    b83c:	e1800115 	stw	r6,4(fp)
    b840:	003f4306 	br	b550 <_strtod_r+0xb28>
    b844:	8005883a 	mov	r2,r16
    b848:	88e0003c 	xorhi	r3,r17,32768
    b84c:	003f2606 	br	b4e8 <_strtod_r+0xac0>
    b850:	1009883a 	mov	r4,r2
    b854:	000f8a40 	call	f8a4 <__floatunsidf>
    b858:	1021883a 	mov	r16,r2
    b85c:	1823883a 	mov	r17,r3
    b860:	003f1e06 	br	b4dc <_strtod_r+0xab4>
    b864:	da000417 	ldw	r8,16(sp)
    b868:	39c00044 	addi	r7,r7,1
    b86c:	003e6706 	br	b20c <_strtod_r+0x7e4>
    b870:	d8c00b17 	ldw	r3,44(sp)
    b874:	00bfffc4 	movi	r2,-1
    b878:	18bf831e 	bne	r3,r2,b688 <_strtod_r+0xc60>
    b87c:	00c00884 	movi	r3,34
    b880:	a8c00015 	stw	r3,0(r21)
    b884:	009ffc34 	movhi	r2,32752
    b888:	e0800115 	stw	r2,4(fp)
    b88c:	e0000015 	stw	zero,0(fp)
    b890:	003fd806 	br	b7f4 <_strtod_r+0xdcc>
    b894:	4007883a 	mov	r3,r8
    b898:	000d883a 	mov	r6,zero
    b89c:	0029883a 	mov	r20,zero
    b8a0:	0021883a 	mov	r16,zero
    b8a4:	003cc906 	br	abcc <_strtod_r+0x1a4>
    b8a8:	00a52834 	movhi	r2,38048
    b8ac:	108d6544 	addi	r2,r2,13717
    b8b0:	00cff434 	movhi	r3,16336
    b8b4:	18ffffc4 	addi	r3,r3,-1
    b8b8:	2809883a 	mov	r4,r5
    b8bc:	180f883a 	mov	r7,r3
    b8c0:	300b883a 	mov	r5,r6
    b8c4:	100d883a 	mov	r6,r2
    b8c8:	000f5500 	call	f550 <__ltdf2>
    b8cc:	103f250e 	bge	r2,zero,b564 <_strtod_r+0xb3c>
    b8d0:	003fc806 	br	b7f4 <_strtod_r+0xdcc>
    b8d4:	0027883a 	mov	r19,zero
    b8d8:	04800044 	movi	r18,1
    b8dc:	0015883a 	mov	r10,zero
    b8e0:	003cc006 	br	abe4 <_strtod_r+0x1bc>
    b8e4:	00800884 	movi	r2,34
    b8e8:	a8800015 	stw	r2,0(r21)
    b8ec:	019ffc34 	movhi	r6,32752
    b8f0:	e1800115 	stw	r6,4(fp)
    b8f4:	e0000015 	stw	zero,0(fp)
    b8f8:	003cc206 	br	ac04 <_strtod_r+0x1dc>
    b8fc:	015387c4 	movi	r5,19999
    b900:	003d1e06 	br	ad7c <_strtod_r+0x354>
    b904:	300a90fa 	slli	r5,r6,3
    b908:	e0800017 	ldw	r2,0(fp)
    b90c:	e0c00117 	ldw	r3,4(fp)
    b910:	01000074 	movhi	r4,1
    b914:	210fb304 	addi	r4,r4,16076
    b918:	290b883a 	add	r5,r5,r4
    b91c:	2a000017 	ldw	r8,0(r5)
    b920:	2a400117 	ldw	r9,4(r5)
    b924:	1009883a 	mov	r4,r2
    b928:	180b883a 	mov	r5,r3
    b92c:	480f883a 	mov	r7,r9
    b930:	400d883a 	mov	r6,r8
    b934:	000ed140 	call	ed14 <__muldf3>
    b938:	e0c00115 	stw	r3,4(fp)
    b93c:	e0800015 	stw	r2,0(fp)
    b940:	003cb006 	br	ac04 <_strtod_r+0x1dc>
    b944:	d8800d17 	ldw	r2,52(sp)
    b948:	e0800015 	stw	r2,0(fp)
    b94c:	d8c00e17 	ldw	r3,56(sp)
    b950:	e0c00115 	stw	r3,4(fp)
    b954:	9880020c 	andi	r2,r19,8
    b958:	103caa26 	beq	r2,zero,ac04 <_strtod_r+0x1dc>
    b95c:	e0800117 	ldw	r2,4(fp)
    b960:	10a00034 	orhi	r2,r2,32768
    b964:	e0800115 	stw	r2,4(fp)
    b968:	003ca606 	br	ac04 <_strtod_r+0x1dc>
    b96c:	009ffc34 	movhi	r2,32752
    b970:	e0800115 	stw	r2,4(fp)
    b974:	e0000015 	stw	zero,0(fp)
    b978:	003ff606 	br	b954 <_strtod_r+0xf2c>
    b97c:	00a00034 	movhi	r2,32768
    b980:	10bfffc4 	addi	r2,r2,-1
    b984:	00ffffc4 	movi	r3,-1
    b988:	e0800115 	stw	r2,4(fp)
    b98c:	e0c00015 	stw	r3,0(fp)
    b990:	003ff006 	br	b954 <_strtod_r+0xf2c>
    b994:	e0000115 	stw	zero,4(fp)
    b998:	e0000015 	stw	zero,0(fp)
    b99c:	003fed06 	br	b954 <_strtod_r+0xf2c>
    b9a0:	d8800e17 	ldw	r2,56(sp)
    b9a4:	29010cc4 	addi	r4,r5,1075
    b9a8:	00fffc34 	movhi	r3,65520
    b9ac:	18ffffc4 	addi	r3,r3,-1
    b9b0:	2008953a 	slli	r4,r4,20
    b9b4:	10c4703a 	and	r2,r2,r3
    b9b8:	d8c00d17 	ldw	r3,52(sp)
    b9bc:	1104b03a 	or	r2,r2,r4
    b9c0:	e0800115 	stw	r2,4(fp)
    b9c4:	e0c00015 	stw	r3,0(fp)
    b9c8:	003fe206 	br	b954 <_strtod_r+0xf2c>
    b9cc:	00800884 	movi	r2,34
    b9d0:	a8800015 	stw	r2,0(r21)
    b9d4:	e0000015 	stw	zero,0(fp)
    b9d8:	e0000115 	stw	zero,4(fp)
    b9dc:	003f8506 	br	b7f4 <_strtod_r+0xdcc>
    b9e0:	03800044 	movi	r14,1
    b9e4:	003d7706 	br	afc4 <_strtod_r+0x59c>
    b9e8:	99c5883a 	add	r2,r19,r7
    b9ec:	11ffffc4 	addi	r7,r2,-1
    b9f0:	00800204 	movi	r2,8
    b9f4:	3cc00044 	addi	r19,r7,1
    b9f8:	11c0df16 	blt	r2,r7,bd78 <_strtod_r+0x1350>
    b9fc:	a08002a4 	muli	r2,r20,10
    ba00:	000f883a 	mov	r7,zero
    ba04:	1269883a 	add	r20,r2,r9
    ba08:	42000044 	addi	r8,r8,1
    ba0c:	da000415 	stw	r8,16(sp)
    ba10:	41000007 	ldb	r4,0(r8)
    ba14:	003d3706 	br	aef4 <_strtod_r+0x4cc>
    ba18:	d9801317 	ldw	r6,76(sp)
    ba1c:	3000511e 	bne	r6,zero,bb64 <_strtod_r+0x113c>
    ba20:	e0800017 	ldw	r2,0(fp)
    ba24:	1000d81e 	bne	r2,zero,bd88 <_strtod_r+0x1360>
    ba28:	e0c00117 	ldw	r3,4(fp)
    ba2c:	01000434 	movhi	r4,16
    ba30:	213fffc4 	addi	r4,r4,-1
    ba34:	1904703a 	and	r2,r3,r4
    ba38:	1000b01e 	bne	r2,zero,bcfc <_strtod_r+0x12d4>
    ba3c:	18dffc2c 	andhi	r3,r3,32752
    ba40:	0081ac34 	movhi	r2,1712
    ba44:	10c1102e 	bgeu	r2,r3,be88 <_strtod_r+0x1460>
    ba48:	a0800517 	ldw	r2,20(r20)
    ba4c:	1000031e 	bne	r2,zero,ba5c <_strtod_r+0x1034>
    ba50:	a0c00417 	ldw	r3,16(r20)
    ba54:	00800044 	movi	r2,1
    ba58:	10c0420e 	bge	r2,r3,bb64 <_strtod_r+0x113c>
    ba5c:	a00b883a 	mov	r5,r20
    ba60:	a809883a 	mov	r4,r21
    ba64:	01800044 	movi	r6,1
    ba68:	00099fc0 	call	99fc <__lshift>
    ba6c:	1009883a 	mov	r4,r2
    ba70:	b00b883a 	mov	r5,r22
    ba74:	1029883a 	mov	r20,r2
    ba78:	00092140 	call	9214 <__mcmp>
    ba7c:	0080c20e 	bge	zero,r2,bd88 <_strtod_r+0x1360>
    ba80:	e1800117 	ldw	r6,4(fp)
    ba84:	d9001417 	ldw	r4,80(sp)
    ba88:	2013003a 	cmpeq	r9,r4,zero
    ba8c:	4800ef1e 	bne	r9,zero,be4c <_strtod_r+0x1424>
    ba90:	30dffc2c 	andhi	r3,r6,32752
    ba94:	0081ac34 	movhi	r2,1712
    ba98:	10c0ec36 	bltu	r2,r3,be4c <_strtod_r+0x1424>
    ba9c:	0080dc34 	movhi	r2,880
    baa0:	10ffca2e 	bgeu	r2,r3,b9cc <_strtod_r+0xfa4>
    baa4:	e0800017 	ldw	r2,0(fp)
    baa8:	e0c00117 	ldw	r3,4(fp)
    baac:	020e5434 	movhi	r8,14672
    bab0:	000d883a 	mov	r6,zero
    bab4:	400f883a 	mov	r7,r8
    bab8:	180b883a 	mov	r5,r3
    babc:	1009883a 	mov	r4,r2
    bac0:	da000c15 	stw	r8,48(sp)
    bac4:	d8000b15 	stw	zero,44(sp)
    bac8:	000ed140 	call	ed14 <__muldf3>
    bacc:	e0800015 	stw	r2,0(fp)
    bad0:	e0c00115 	stw	r3,4(fp)
    bad4:	183f471e 	bne	r3,zero,b7f4 <_strtod_r+0xdcc>
    bad8:	103f461e 	bne	r2,zero,b7f4 <_strtod_r+0xdcc>
    badc:	00800884 	movi	r2,34
    bae0:	a8800015 	stw	r2,0(r21)
    bae4:	003f4306 	br	b7f4 <_strtod_r+0xdcc>
    bae8:	d8801317 	ldw	r2,76(sp)
    baec:	1025003a 	cmpeq	r18,r2,zero
    baf0:	9000861e 	bne	r18,zero,bd0c <_strtod_r+0x12e4>
    baf4:	e1400117 	ldw	r5,4(fp)
    baf8:	00c00434 	movhi	r3,16
    bafc:	18ffffc4 	addi	r3,r3,-1
    bb00:	28c4703a 	and	r2,r5,r3
    bb04:	10c01b26 	beq	r2,r3,bb74 <_strtod_r+0x114c>
    bb08:	e1c00017 	ldw	r7,0(fp)
    bb0c:	3880004c 	andi	r2,r7,1
    bb10:	1005003a 	cmpeq	r2,r2,zero
    bb14:	1000791e 	bne	r2,zero,bcfc <_strtod_r+0x12d4>
    bb18:	9000b126 	beq	r18,zero,bde0 <_strtod_r+0x13b8>
    bb1c:	e4400117 	ldw	r17,4(fp)
    bb20:	3809883a 	mov	r4,r7
    bb24:	3821883a 	mov	r16,r7
    bb28:	880b883a 	mov	r5,r17
    bb2c:	00092740 	call	9274 <__ulp>
    bb30:	180f883a 	mov	r7,r3
    bb34:	880b883a 	mov	r5,r17
    bb38:	8009883a 	mov	r4,r16
    bb3c:	100d883a 	mov	r6,r2
    bb40:	000ec200 	call	ec20 <__subdf3>
    bb44:	1009883a 	mov	r4,r2
    bb48:	000d883a 	mov	r6,zero
    bb4c:	000f883a 	mov	r7,zero
    bb50:	180b883a 	mov	r5,r3
    bb54:	e0800015 	stw	r2,0(fp)
    bb58:	e0c00115 	stw	r3,4(fp)
    bb5c:	000f3b80 	call	f3b8 <__nedf2>
    bb60:	103f9a26 	beq	r2,zero,b9cc <_strtod_r+0xfa4>
    bb64:	d9001417 	ldw	r4,80(sp)
    bb68:	2013003a 	cmpeq	r9,r4,zero
    bb6c:	483f211e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    bb70:	003fcc06 	br	baa4 <_strtod_r+0x107c>
    bb74:	d9001417 	ldw	r4,80(sp)
    bb78:	e1c00017 	ldw	r7,0(fp)
    bb7c:	2013003a 	cmpeq	r9,r4,zero
    bb80:	4800bd1e 	bne	r9,zero,be78 <_strtod_r+0x1450>
    bb84:	28dffc2c 	andhi	r3,r5,32752
    bb88:	0081a834 	movhi	r2,1696
    bb8c:	10c0ba36 	bltu	r2,r3,be78 <_strtod_r+0x1450>
    bb90:	1804d53a 	srli	r2,r3,20
    bb94:	00c01ac4 	movi	r3,107
    bb98:	013fffc4 	movi	r4,-1
    bb9c:	1887c83a 	sub	r3,r3,r2
    bba0:	20c4983a 	sll	r2,r4,r3
    bba4:	11ffd91e 	bne	r2,r7,bb0c <_strtod_r+0x10e4>
    bba8:	28dffc2c 	andhi	r3,r5,32752
    bbac:	00800434 	movhi	r2,16
    bbb0:	188d883a 	add	r6,r3,r2
    bbb4:	e1800115 	stw	r6,4(fp)
    bbb8:	e0000015 	stw	zero,0(fp)
    bbbc:	483f0d1e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    bbc0:	003fb806 	br	baa4 <_strtod_r+0x107c>
    bbc4:	0021883a 	mov	r16,zero
    bbc8:	0005883a 	mov	r2,zero
    bbcc:	044ff834 	movhi	r17,16352
    bbd0:	00eff834 	movhi	r3,49120
    bbd4:	003e8606 	br	b5f0 <_strtod_r+0xbc8>
    bbd8:	803d9e26 	beq	r16,zero,b254 <_strtod_r+0x82c>
    bbdc:	0421c83a 	sub	r16,zero,r16
    bbe0:	814003cc 	andi	r5,r16,15
    bbe4:	28000f26 	beq	r5,zero,bc24 <_strtod_r+0x11fc>
    bbe8:	280a90fa 	slli	r5,r5,3
    bbec:	01000074 	movhi	r4,1
    bbf0:	210fb304 	addi	r4,r4,16076
    bbf4:	e0800017 	ldw	r2,0(fp)
    bbf8:	290b883a 	add	r5,r5,r4
    bbfc:	2a000017 	ldw	r8,0(r5)
    bc00:	e0c00117 	ldw	r3,4(fp)
    bc04:	2a400117 	ldw	r9,4(r5)
    bc08:	1009883a 	mov	r4,r2
    bc0c:	180b883a 	mov	r5,r3
    bc10:	480f883a 	mov	r7,r9
    bc14:	400d883a 	mov	r6,r8
    bc18:	000f0d80 	call	f0d8 <__divdf3>
    bc1c:	e0c00115 	stw	r3,4(fp)
    bc20:	e0800015 	stw	r2,0(fp)
    bc24:	8021d13a 	srai	r16,r16,4
    bc28:	803d8a26 	beq	r16,zero,b254 <_strtod_r+0x82c>
    bc2c:	008007c4 	movi	r2,31
    bc30:	14002d16 	blt	r2,r16,bce8 <_strtod_r+0x12c0>
    bc34:	8080040c 	andi	r2,r16,16
    bc38:	10009926 	beq	r2,zero,bea0 <_strtod_r+0x1478>
    bc3c:	00801a84 	movi	r2,106
    bc40:	d8801415 	stw	r2,80(sp)
    bc44:	0400110e 	bge	zero,r16,bc8c <_strtod_r+0x1264>
    bc48:	04400074 	movhi	r17,1
    bc4c:	8c500004 	addi	r17,r17,16384
    bc50:	8080004c 	andi	r2,r16,1
    bc54:	1005003a 	cmpeq	r2,r2,zero
    bc58:	1000091e 	bne	r2,zero,bc80 <_strtod_r+0x1258>
    bc5c:	e0800017 	ldw	r2,0(fp)
    bc60:	e0c00117 	ldw	r3,4(fp)
    bc64:	89800017 	ldw	r6,0(r17)
    bc68:	89c00117 	ldw	r7,4(r17)
    bc6c:	180b883a 	mov	r5,r3
    bc70:	1009883a 	mov	r4,r2
    bc74:	000ed140 	call	ed14 <__muldf3>
    bc78:	e0c00115 	stw	r3,4(fp)
    bc7c:	e0800015 	stw	r2,0(fp)
    bc80:	8021d07a 	srai	r16,r16,1
    bc84:	8c400204 	addi	r17,r17,8
    bc88:	043ff116 	blt	zero,r16,bc50 <_strtod_r+0x1228>
    bc8c:	d8c01417 	ldw	r3,80(sp)
    bc90:	18000d26 	beq	r3,zero,bcc8 <_strtod_r+0x12a0>
    bc94:	e1000117 	ldw	r4,4(fp)
    bc98:	00c01ac4 	movi	r3,107
    bc9c:	209ffc2c 	andhi	r2,r4,32752
    bca0:	1004d53a 	srli	r2,r2,20
    bca4:	1887c83a 	sub	r3,r3,r2
    bca8:	00c0070e 	bge	zero,r3,bcc8 <_strtod_r+0x12a0>
    bcac:	008007c4 	movi	r2,31
    bcb0:	10c0900e 	bge	r2,r3,bef4 <_strtod_r+0x14cc>
    bcb4:	00800d04 	movi	r2,52
    bcb8:	e0000015 	stw	zero,0(fp)
    bcbc:	10c0870e 	bge	r2,r3,bedc <_strtod_r+0x14b4>
    bcc0:	0180dc34 	movhi	r6,880
    bcc4:	e1800115 	stw	r6,4(fp)
    bcc8:	e0800017 	ldw	r2,0(fp)
    bccc:	e0c00117 	ldw	r3,4(fp)
    bcd0:	000d883a 	mov	r6,zero
    bcd4:	000f883a 	mov	r7,zero
    bcd8:	180b883a 	mov	r5,r3
    bcdc:	1009883a 	mov	r4,r2
    bce0:	000f3b80 	call	f3b8 <__nedf2>
    bce4:	103d5c1e 	bne	r2,zero,b258 <_strtod_r+0x830>
    bce8:	00800884 	movi	r2,34
    bcec:	a8800015 	stw	r2,0(r21)
    bcf0:	e0000015 	stw	zero,0(fp)
    bcf4:	e0000115 	stw	zero,4(fp)
    bcf8:	003bc206 	br	ac04 <_strtod_r+0x1dc>
    bcfc:	d8801417 	ldw	r2,80(sp)
    bd00:	1013003a 	cmpeq	r9,r2,zero
    bd04:	483ebb1e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    bd08:	003f6606 	br	baa4 <_strtod_r+0x107c>
    bd0c:	e1800117 	ldw	r6,4(fp)
    bd10:	00c00434 	movhi	r3,16
    bd14:	18ffffc4 	addi	r3,r3,-1
    bd18:	30c4703a 	and	r2,r6,r3
    bd1c:	103f7a1e 	bne	r2,zero,bb08 <_strtod_r+0x10e0>
    bd20:	e1c00017 	ldw	r7,0(fp)
    bd24:	383f791e 	bne	r7,zero,bb0c <_strtod_r+0x10e4>
    bd28:	003f5606 	br	ba84 <_strtod_r+0x105c>
    bd2c:	d9800f17 	ldw	r6,60(sp)
    bd30:	00bffa84 	movi	r2,-22
    bd34:	30bcd416 	blt	r6,r2,b088 <_strtod_r+0x660>
    bd38:	317ffe24 	muli	r5,r6,-8
    bd3c:	01000074 	movhi	r4,1
    bd40:	210fb304 	addi	r4,r4,16076
    bd44:	e0800017 	ldw	r2,0(fp)
    bd48:	290b883a 	add	r5,r5,r4
    bd4c:	2a000017 	ldw	r8,0(r5)
    bd50:	e0c00117 	ldw	r3,4(fp)
    bd54:	2a400117 	ldw	r9,4(r5)
    bd58:	1009883a 	mov	r4,r2
    bd5c:	180b883a 	mov	r5,r3
    bd60:	480f883a 	mov	r7,r9
    bd64:	400d883a 	mov	r6,r8
    bd68:	000f0d80 	call	f0d8 <__divdf3>
    bd6c:	e0c00115 	stw	r3,4(fp)
    bd70:	e0800015 	stw	r2,0(fp)
    bd74:	003ba306 	br	ac04 <_strtod_r+0x1dc>
    bd78:	00800404 	movi	r2,16
    bd7c:	14c02f0e 	bge	r2,r19,be3c <_strtod_r+0x1414>
    bd80:	000f883a 	mov	r7,zero
    bd84:	003f2006 	br	ba08 <_strtod_r+0xfe0>
    bd88:	d9801417 	ldw	r6,80(sp)
    bd8c:	3013003a 	cmpeq	r9,r6,zero
    bd90:	483e981e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    bd94:	003f4306 	br	baa4 <_strtod_r+0x107c>
    bd98:	00801a44 	movi	r2,105
    bd9c:	20bc6326 	beq	r4,r2,af2c <_strtod_r+0x504>
    bda0:	00801b84 	movi	r2,110
    bda4:	20bbba1e 	bne	r4,r2,ac90 <_strtod_r+0x268>
    bda8:	dc000404 	addi	r16,sp,16
    bdac:	8009883a 	mov	r4,r16
    bdb0:	01400074 	movhi	r5,1
    bdb4:	294fff04 	addi	r5,r5,16380
    bdb8:	000a9e00 	call	a9e0 <match>
    bdbc:	103bb426 	beq	r2,zero,ac90 <_strtod_r+0x268>
    bdc0:	d8800417 	ldw	r2,16(sp)
    bdc4:	00c00a04 	movi	r3,40
    bdc8:	11000007 	ldb	r4,0(r2)
    bdcc:	20c03626 	beq	r4,r3,bea8 <_strtod_r+0x1480>
    bdd0:	01bffe34 	movhi	r6,65528
    bdd4:	e1800115 	stw	r6,4(fp)
    bdd8:	e0000015 	stw	zero,0(fp)
    bddc:	003b8906 	br	ac04 <_strtod_r+0x1dc>
    bde0:	e4400117 	ldw	r17,4(fp)
    bde4:	3809883a 	mov	r4,r7
    bde8:	3821883a 	mov	r16,r7
    bdec:	880b883a 	mov	r5,r17
    bdf0:	00092740 	call	9274 <__ulp>
    bdf4:	100d883a 	mov	r6,r2
    bdf8:	880b883a 	mov	r5,r17
    bdfc:	180f883a 	mov	r7,r3
    be00:	8009883a 	mov	r4,r16
    be04:	000eca00 	call	eca0 <__adddf3>
    be08:	d9801417 	ldw	r6,80(sp)
    be0c:	e0c00115 	stw	r3,4(fp)
    be10:	e0800015 	stw	r2,0(fp)
    be14:	3013003a 	cmpeq	r9,r6,zero
    be18:	483e761e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    be1c:	003f2106 	br	baa4 <_strtod_r+0x107c>
    be20:	000f883a 	mov	r7,zero
    be24:	003cf006 	br	b1e8 <_strtod_r+0x7c0>
    be28:	0080d434 	movhi	r2,848
    be2c:	188d883a 	add	r6,r3,r2
    be30:	d8001415 	stw	zero,80(sp)
    be34:	e1800115 	stw	r6,4(fp)
    be38:	003d0706 	br	b258 <_strtod_r+0x830>
    be3c:	808002a4 	muli	r2,r16,10
    be40:	000f883a 	mov	r7,zero
    be44:	1261883a 	add	r16,r2,r9
    be48:	003eef06 	br	ba08 <_strtod_r+0xfe0>
    be4c:	309ffc2c 	andhi	r2,r6,32752
    be50:	00fffc34 	movhi	r3,65520
    be54:	10c5883a 	add	r2,r2,r3
    be58:	00c00434 	movhi	r3,16
    be5c:	18ffffc4 	addi	r3,r3,-1
    be60:	10ccb03a 	or	r6,r2,r3
    be64:	01ffffc4 	movi	r7,-1
    be68:	e1800115 	stw	r6,4(fp)
    be6c:	e1c00015 	stw	r7,0(fp)
    be70:	483e601e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    be74:	003f0b06 	br	baa4 <_strtod_r+0x107c>
    be78:	00bfffc4 	movi	r2,-1
    be7c:	003f4906 	br	bba4 <_strtod_r+0x117c>
    be80:	0025883a 	mov	r18,zero
    be84:	003cb106 	br	b14c <_strtod_r+0x724>
    be88:	d8c01417 	ldw	r3,80(sp)
    be8c:	1813003a 	cmpeq	r9,r3,zero
    be90:	483e581e 	bne	r9,zero,b7f4 <_strtod_r+0xdcc>
    be94:	003f0306 	br	baa4 <_strtod_r+0x107c>
    be98:	980f883a 	mov	r7,r19
    be9c:	003ed406 	br	b9f0 <_strtod_r+0xfc8>
    bea0:	d8001415 	stw	zero,80(sp)
    bea4:	003f6706 	br	bc44 <_strtod_r+0x121c>
    bea8:	8009883a 	mov	r4,r16
    beac:	01400074 	movhi	r5,1
    beb0:	29526b04 	addi	r5,r5,18860
    beb4:	d9800d04 	addi	r6,sp,52
    beb8:	000d7980 	call	d798 <__hexnan>
    bebc:	00c00144 	movi	r3,5
    bec0:	10ffc31e 	bne	r2,r3,bdd0 <_strtod_r+0x13a8>
    bec4:	d8800e17 	ldw	r2,56(sp)
    bec8:	d9c00d17 	ldw	r7,52(sp)
    becc:	119ffc34 	orhi	r6,r2,32752
    bed0:	e1800115 	stw	r6,4(fp)
    bed4:	e1c00015 	stw	r7,0(fp)
    bed8:	003b4a06 	br	ac04 <_strtod_r+0x1dc>
    bedc:	18fff804 	addi	r3,r3,-32
    bee0:	00bfffc4 	movi	r2,-1
    bee4:	10c4983a 	sll	r2,r2,r3
    bee8:	208c703a 	and	r6,r4,r2
    beec:	e1800115 	stw	r6,4(fp)
    bef0:	003f7506 	br	bcc8 <_strtod_r+0x12a0>
    bef4:	00bfffc4 	movi	r2,-1
    bef8:	10c4983a 	sll	r2,r2,r3
    befc:	e0c00017 	ldw	r3,0(fp)
    bf00:	188e703a 	and	r7,r3,r2
    bf04:	e1c00015 	stw	r7,0(fp)
    bf08:	003f6f06 	br	bcc8 <_strtod_r+0x12a0>

0000bf0c <strtof>:
    bf0c:	defffa04 	addi	sp,sp,-24
    bf10:	dd000415 	stw	r20,16(sp)
    bf14:	05000074 	movhi	r20,1
    bf18:	a5170104 	addi	r20,r20,23556
    bf1c:	2007883a 	mov	r3,r4
    bf20:	a1000017 	ldw	r4,0(r20)
    bf24:	280d883a 	mov	r6,r5
    bf28:	180b883a 	mov	r5,r3
    bf2c:	dfc00515 	stw	ra,20(sp)
    bf30:	dcc00315 	stw	r19,12(sp)
    bf34:	dc800215 	stw	r18,8(sp)
    bf38:	dc400115 	stw	r17,4(sp)
    bf3c:	dc000015 	stw	r16,0(sp)
    bf40:	000aa280 	call	aa28 <_strtod_r>
    bf44:	180b883a 	mov	r5,r3
    bf48:	1009883a 	mov	r4,r2
    bf4c:	1823883a 	mov	r17,r3
    bf50:	1021883a 	mov	r16,r2
    bf54:	000f8300 	call	f830 <__truncdfsf2>
    bf58:	1009883a 	mov	r4,r2
    bf5c:	000b883a 	mov	r5,zero
    bf60:	1025883a 	mov	r18,r2
    bf64:	1027883a 	mov	r19,r2
    bf68:	000e6a80 	call	e6a8 <__nesf2>
    bf6c:	000d883a 	mov	r6,zero
    bf70:	000f883a 	mov	r7,zero
    bf74:	8009883a 	mov	r4,r16
    bf78:	880b883a 	mov	r5,r17
    bf7c:	10000e1e 	bne	r2,zero,bfb8 <strtof+0xac>
    bf80:	000f3b80 	call	f3b8 <__nedf2>
    bf84:	10000c26 	beq	r2,zero,bfb8 <strtof+0xac>
    bf88:	a0c00017 	ldw	r3,0(r20)
    bf8c:	00800884 	movi	r2,34
    bf90:	18800015 	stw	r2,0(r3)
    bf94:	9805883a 	mov	r2,r19
    bf98:	dfc00517 	ldw	ra,20(sp)
    bf9c:	dd000417 	ldw	r20,16(sp)
    bfa0:	dcc00317 	ldw	r19,12(sp)
    bfa4:	dc800217 	ldw	r18,8(sp)
    bfa8:	dc400117 	ldw	r17,4(sp)
    bfac:	dc000017 	ldw	r16,0(sp)
    bfb0:	dec00604 	addi	sp,sp,24
    bfb4:	f800283a 	ret
    bfb8:	9009883a 	mov	r4,r18
    bfbc:	015fe034 	movhi	r5,32640
    bfc0:	297fffc4 	addi	r5,r5,-1
    bfc4:	000e7200 	call	e720 <__gtsf2>
    bfc8:	00ffffc4 	movi	r3,-1
    bfcc:	011ffc34 	movhi	r4,32752
    bfd0:	213fffc4 	addi	r4,r4,-1
    bfd4:	200f883a 	mov	r7,r4
    bfd8:	180d883a 	mov	r6,r3
    bfdc:	8009883a 	mov	r4,r16
    bfe0:	880b883a 	mov	r5,r17
    bfe4:	00800f16 	blt	zero,r2,c024 <strtof+0x118>
    bfe8:	9009883a 	mov	r4,r18
    bfec:	017fe034 	movhi	r5,65408
    bff0:	297fffc4 	addi	r5,r5,-1
    bff4:	000e7980 	call	e798 <__ltsf2>
    bff8:	023fffc4 	movi	r8,-1
    bffc:	027ffc34 	movhi	r9,65520
    c000:	4a7fffc4 	addi	r9,r9,-1
    c004:	880b883a 	mov	r5,r17
    c008:	480f883a 	mov	r7,r9
    c00c:	8009883a 	mov	r4,r16
    c010:	400d883a 	mov	r6,r8
    c014:	103fdf0e 	bge	r2,zero,bf94 <strtof+0x88>
    c018:	000f5500 	call	f550 <__ltdf2>
    c01c:	103fda0e 	bge	r2,zero,bf88 <strtof+0x7c>
    c020:	003fdc06 	br	bf94 <strtof+0x88>
    c024:	000f4400 	call	f440 <__gtdf2>
    c028:	00bfd70e 	bge	zero,r2,bf88 <strtof+0x7c>
    c02c:	003fee06 	br	bfe8 <strtof+0xdc>

0000c030 <strtod>:
    c030:	01800074 	movhi	r6,1
    c034:	31970104 	addi	r6,r6,23556
    c038:	2007883a 	mov	r3,r4
    c03c:	31000017 	ldw	r4,0(r6)
    c040:	280d883a 	mov	r6,r5
    c044:	180b883a 	mov	r5,r3
    c048:	000aa281 	jmpi	aa28 <_strtod_r>

0000c04c <_strtol_r>:
    c04c:	defff304 	addi	sp,sp,-52
    c050:	00800074 	movhi	r2,1
    c054:	10970504 	addi	r2,r2,23572
    c058:	dcc00615 	stw	r19,24(sp)
    c05c:	14c00017 	ldw	r19,0(r2)
    c060:	ddc00a15 	stw	r23,40(sp)
    c064:	dc000315 	stw	r16,12(sp)
    c068:	dfc00c15 	stw	ra,48(sp)
    c06c:	df000b15 	stw	fp,44(sp)
    c070:	dd800915 	stw	r22,36(sp)
    c074:	dd400815 	stw	r21,32(sp)
    c078:	dd000715 	stw	r20,28(sp)
    c07c:	dc800515 	stw	r18,20(sp)
    c080:	dc400415 	stw	r17,16(sp)
    c084:	282f883a 	mov	r23,r5
    c088:	d9000015 	stw	r4,0(sp)
    c08c:	d9800115 	stw	r6,4(sp)
    c090:	2821883a 	mov	r16,r5
    c094:	84400007 	ldb	r17,0(r16)
    c098:	84000044 	addi	r16,r16,1
    c09c:	9c47883a 	add	r3,r19,r17
    c0a0:	18800003 	ldbu	r2,0(r3)
    c0a4:	1080020c 	andi	r2,r2,8
    c0a8:	103ffa1e 	bne	r2,zero,c094 <_strtol_r+0x48>
    c0ac:	00800b44 	movi	r2,45
    c0b0:	88805c26 	beq	r17,r2,c224 <_strtol_r+0x1d8>
    c0b4:	00800ac4 	movi	r2,43
    c0b8:	88805726 	beq	r17,r2,c218 <_strtol_r+0x1cc>
    c0bc:	0039883a 	mov	fp,zero
    c0c0:	3807003a 	cmpeq	r3,r7,zero
    c0c4:	1800431e 	bne	r3,zero,c1d4 <_strtol_r+0x188>
    c0c8:	00800404 	movi	r2,16
    c0cc:	38804126 	beq	r7,r2,c1d4 <_strtol_r+0x188>
    c0d0:	3829883a 	mov	r20,r7
    c0d4:	e02cc03a 	cmpne	r22,fp,zero
    c0d8:	b0004b1e 	bne	r22,zero,c208 <_strtol_r+0x1bc>
    c0dc:	04a00034 	movhi	r18,32768
    c0e0:	94bfffc4 	addi	r18,r18,-1
    c0e4:	9009883a 	mov	r4,r18
    c0e8:	a00b883a 	mov	r5,r20
    c0ec:	d9c00215 	stw	r7,8(sp)
    c0f0:	000fb7c0 	call	fb7c <__umodsi3>
    c0f4:	9009883a 	mov	r4,r18
    c0f8:	a00b883a 	mov	r5,r20
    c0fc:	102b883a 	mov	r21,r2
    c100:	000fb740 	call	fb74 <__udivsi3>
    c104:	1011883a 	mov	r8,r2
    c108:	9c45883a 	add	r2,r19,r17
    c10c:	11000003 	ldbu	r4,0(r2)
    c110:	000b883a 	mov	r5,zero
    c114:	000d883a 	mov	r6,zero
    c118:	20c0010c 	andi	r3,r4,4
    c11c:	d9c00217 	ldw	r7,8(sp)
    c120:	18000e26 	beq	r3,zero,c15c <_strtol_r+0x110>
    c124:	88fff404 	addi	r3,r17,-48
    c128:	19c0140e 	bge	r3,r7,c17c <_strtol_r+0x130>
    c12c:	30003116 	blt	r6,zero,c1f4 <_strtol_r+0x1a8>
    c130:	41403036 	bltu	r8,r5,c1f4 <_strtol_r+0x1a8>
    c134:	2a002e26 	beq	r5,r8,c1f0 <_strtol_r+0x1a4>
    c138:	2d05383a 	mul	r2,r5,r20
    c13c:	01800044 	movi	r6,1
    c140:	10cb883a 	add	r5,r2,r3
    c144:	84400007 	ldb	r17,0(r16)
    c148:	84000044 	addi	r16,r16,1
    c14c:	9c45883a 	add	r2,r19,r17
    c150:	11000003 	ldbu	r4,0(r2)
    c154:	20c0010c 	andi	r3,r4,4
    c158:	183ff21e 	bne	r3,zero,c124 <_strtol_r+0xd8>
    c15c:	208000cc 	andi	r2,r4,3
    c160:	10000626 	beq	r2,zero,c17c <_strtol_r+0x130>
    c164:	2080004c 	andi	r2,r4,1
    c168:	1005003a 	cmpeq	r2,r2,zero
    c16c:	1000231e 	bne	r2,zero,c1fc <_strtol_r+0x1b0>
    c170:	00800dc4 	movi	r2,55
    c174:	8887c83a 	sub	r3,r17,r2
    c178:	19ffec16 	blt	r3,r7,c12c <_strtol_r+0xe0>
    c17c:	30002d16 	blt	r6,zero,c234 <_strtol_r+0x1e8>
    c180:	b000231e 	bne	r22,zero,c210 <_strtol_r+0x1c4>
    c184:	2807883a 	mov	r3,r5
    c188:	d8800117 	ldw	r2,4(sp)
    c18c:	10000426 	beq	r2,zero,c1a0 <_strtol_r+0x154>
    c190:	30000126 	beq	r6,zero,c198 <_strtol_r+0x14c>
    c194:	85ffffc4 	addi	r23,r16,-1
    c198:	d9000117 	ldw	r4,4(sp)
    c19c:	25c00015 	stw	r23,0(r4)
    c1a0:	1805883a 	mov	r2,r3
    c1a4:	dfc00c17 	ldw	ra,48(sp)
    c1a8:	df000b17 	ldw	fp,44(sp)
    c1ac:	ddc00a17 	ldw	r23,40(sp)
    c1b0:	dd800917 	ldw	r22,36(sp)
    c1b4:	dd400817 	ldw	r21,32(sp)
    c1b8:	dd000717 	ldw	r20,28(sp)
    c1bc:	dcc00617 	ldw	r19,24(sp)
    c1c0:	dc800517 	ldw	r18,20(sp)
    c1c4:	dc400417 	ldw	r17,16(sp)
    c1c8:	dc000317 	ldw	r16,12(sp)
    c1cc:	dec00d04 	addi	sp,sp,52
    c1d0:	f800283a 	ret
    c1d4:	00800c04 	movi	r2,48
    c1d8:	88801d26 	beq	r17,r2,c250 <_strtol_r+0x204>
    c1dc:	183fbc26 	beq	r3,zero,c0d0 <_strtol_r+0x84>
    c1e0:	00800c04 	movi	r2,48
    c1e4:	88802726 	beq	r17,r2,c284 <_strtol_r+0x238>
    c1e8:	01c00284 	movi	r7,10
    c1ec:	003fb806 	br	c0d0 <_strtol_r+0x84>
    c1f0:	a8ffd10e 	bge	r21,r3,c138 <_strtol_r+0xec>
    c1f4:	01bfffc4 	movi	r6,-1
    c1f8:	003fd206 	br	c144 <_strtol_r+0xf8>
    c1fc:	008015c4 	movi	r2,87
    c200:	8887c83a 	sub	r3,r17,r2
    c204:	003fdc06 	br	c178 <_strtol_r+0x12c>
    c208:	04a00034 	movhi	r18,32768
    c20c:	003fb506 	br	c0e4 <_strtol_r+0x98>
    c210:	0147c83a 	sub	r3,zero,r5
    c214:	003fdc06 	br	c188 <_strtol_r+0x13c>
    c218:	84400007 	ldb	r17,0(r16)
    c21c:	84000044 	addi	r16,r16,1
    c220:	003fa606 	br	c0bc <_strtol_r+0x70>
    c224:	84400007 	ldb	r17,0(r16)
    c228:	07000044 	movi	fp,1
    c22c:	84000044 	addi	r16,r16,1
    c230:	003fa306 	br	c0c0 <_strtol_r+0x74>
    c234:	e005003a 	cmpeq	r2,fp,zero
    c238:	10000f1e 	bne	r2,zero,c278 <_strtol_r+0x22c>
    c23c:	00e00034 	movhi	r3,32768
    c240:	d9000017 	ldw	r4,0(sp)
    c244:	00800884 	movi	r2,34
    c248:	20800015 	stw	r2,0(r4)
    c24c:	003fce06 	br	c188 <_strtol_r+0x13c>
    c250:	81000007 	ldb	r4,0(r16)
    c254:	00801e04 	movi	r2,120
    c258:	20800226 	beq	r4,r2,c264 <_strtol_r+0x218>
    c25c:	00801604 	movi	r2,88
    c260:	20bfde1e 	bne	r4,r2,c1dc <_strtol_r+0x190>
    c264:	84400047 	ldb	r17,1(r16)
    c268:	01c00404 	movi	r7,16
    c26c:	84000084 	addi	r16,r16,2
    c270:	3829883a 	mov	r20,r7
    c274:	003f9706 	br	c0d4 <_strtol_r+0x88>
    c278:	00e00034 	movhi	r3,32768
    c27c:	18ffffc4 	addi	r3,r3,-1
    c280:	003fef06 	br	c240 <_strtol_r+0x1f4>
    c284:	01c00204 	movi	r7,8
    c288:	3829883a 	mov	r20,r7
    c28c:	003f9106 	br	c0d4 <_strtol_r+0x88>

0000c290 <strtol>:
    c290:	00800074 	movhi	r2,1
    c294:	10970104 	addi	r2,r2,23556
    c298:	2013883a 	mov	r9,r4
    c29c:	11000017 	ldw	r4,0(r2)
    c2a0:	2805883a 	mov	r2,r5
    c2a4:	300f883a 	mov	r7,r6
    c2a8:	480b883a 	mov	r5,r9
    c2ac:	100d883a 	mov	r6,r2
    c2b0:	000c04c1 	jmpi	c04c <_strtol_r>

0000c2b4 <_strtoll_r>:
    c2b4:	defff004 	addi	sp,sp,-64
    c2b8:	00800074 	movhi	r2,1
    c2bc:	10970504 	addi	r2,r2,23572
    c2c0:	df000e15 	stw	fp,56(sp)
    c2c4:	17000017 	ldw	fp,0(r2)
    c2c8:	ddc00d15 	stw	r23,52(sp)
    c2cc:	dd000a15 	stw	r20,40(sp)
    c2d0:	dfc00f15 	stw	ra,60(sp)
    c2d4:	dd800c15 	stw	r22,48(sp)
    c2d8:	dd400b15 	stw	r21,44(sp)
    c2dc:	dcc00915 	stw	r19,36(sp)
    c2e0:	dc800815 	stw	r18,32(sp)
    c2e4:	dc400715 	stw	r17,28(sp)
    c2e8:	dc000615 	stw	r16,24(sp)
    c2ec:	d9400315 	stw	r5,12(sp)
    c2f0:	d9000215 	stw	r4,8(sp)
    c2f4:	d9800415 	stw	r6,16(sp)
    c2f8:	382f883a 	mov	r23,r7
    c2fc:	2829883a 	mov	r20,r5
    c300:	a4c00007 	ldb	r19,0(r20)
    c304:	a5000044 	addi	r20,r20,1
    c308:	e4c7883a 	add	r3,fp,r19
    c30c:	18800003 	ldbu	r2,0(r3)
    c310:	1080020c 	andi	r2,r2,8
    c314:	103ffa1e 	bne	r2,zero,c300 <_strtoll_r+0x4c>
    c318:	00800b44 	movi	r2,45
    c31c:	98808826 	beq	r19,r2,c540 <_strtoll_r+0x28c>
    c320:	00800ac4 	movi	r2,43
    c324:	98808326 	beq	r19,r2,c534 <_strtoll_r+0x280>
    c328:	d8000115 	stw	zero,4(sp)
    c32c:	b807003a 	cmpeq	r3,r23,zero
    c330:	18005f1e 	bne	r3,zero,c4b0 <_strtoll_r+0x1fc>
    c334:	00800404 	movi	r2,16
    c338:	b8805d26 	beq	r23,r2,c4b0 <_strtoll_r+0x1fc>
    c33c:	b82dd7fa 	srai	r22,r23,31
    c340:	b82b883a 	mov	r21,r23
    c344:	d8c00117 	ldw	r3,4(sp)
    c348:	1806c03a 	cmpne	r3,r3,zero
    c34c:	d8c00515 	stw	r3,20(sp)
    c350:	1800631e 	bne	r3,zero,c4e0 <_strtoll_r+0x22c>
    c354:	043fffc4 	movi	r16,-1
    c358:	04600034 	movhi	r17,32768
    c35c:	8c7fffc4 	addi	r17,r17,-1
    c360:	880b883a 	mov	r5,r17
    c364:	8009883a 	mov	r4,r16
    c368:	a80d883a 	mov	r6,r21
    c36c:	b00f883a 	mov	r7,r22
    c370:	000e0f80 	call	e0f8 <__umoddi3>
    c374:	880b883a 	mov	r5,r17
    c378:	8009883a 	mov	r4,r16
    c37c:	b00f883a 	mov	r7,r22
    c380:	a80d883a 	mov	r6,r21
    c384:	d8800015 	stw	r2,0(sp)
    c388:	000db1c0 	call	db1c <__udivdi3>
    c38c:	1023883a 	mov	r17,r2
    c390:	e4c5883a 	add	r2,fp,r19
    c394:	11000003 	ldbu	r4,0(r2)
    c398:	1825883a 	mov	r18,r3
    c39c:	0015883a 	mov	r10,zero
    c3a0:	20c0010c 	andi	r3,r4,4
    c3a4:	0017883a 	mov	r11,zero
    c3a8:	000f883a 	mov	r7,zero
    c3ac:	18001a26 	beq	r3,zero,c418 <_strtoll_r+0x164>
    c3b0:	9c3ff404 	addi	r16,r19,-48
    c3b4:	85c0200e 	bge	r16,r23,c438 <_strtoll_r+0x184>
    c3b8:	38003b16 	blt	r7,zero,c4a8 <_strtoll_r+0x1f4>
    c3bc:	92c03a36 	bltu	r18,r11,c4a8 <_strtoll_r+0x1f4>
    c3c0:	5c803826 	beq	r11,r18,c4a4 <_strtoll_r+0x1f0>
    c3c4:	54404c26 	beq	r10,r17,c4f8 <_strtoll_r+0x244>
    c3c8:	580b883a 	mov	r5,r11
    c3cc:	5009883a 	mov	r4,r10
    c3d0:	a80d883a 	mov	r6,r21
    c3d4:	b00f883a 	mov	r7,r22
    c3d8:	000d9e00 	call	d9e0 <__muldi3>
    c3dc:	8013d7fa 	srai	r9,r16,31
    c3e0:	100d883a 	mov	r6,r2
    c3e4:	1405883a 	add	r2,r2,r16
    c3e8:	118d803a 	cmpltu	r6,r2,r6
    c3ec:	1a47883a 	add	r3,r3,r9
    c3f0:	30cd883a 	add	r6,r6,r3
    c3f4:	1015883a 	mov	r10,r2
    c3f8:	3017883a 	mov	r11,r6
    c3fc:	01c00044 	movi	r7,1
    c400:	a4c00007 	ldb	r19,0(r20)
    c404:	a5000044 	addi	r20,r20,1
    c408:	e4c5883a 	add	r2,fp,r19
    c40c:	11000003 	ldbu	r4,0(r2)
    c410:	20c0010c 	andi	r3,r4,4
    c414:	183fe61e 	bne	r3,zero,c3b0 <_strtoll_r+0xfc>
    c418:	208000cc 	andi	r2,r4,3
    c41c:	10000626 	beq	r2,zero,c438 <_strtoll_r+0x184>
    c420:	2080004c 	andi	r2,r4,1
    c424:	1005003a 	cmpeq	r2,r2,zero
    c428:	1000301e 	bne	r2,zero,c4ec <_strtoll_r+0x238>
    c42c:	02000dc4 	movi	r8,55
    c430:	9a21c83a 	sub	r16,r19,r8
    c434:	85ffe016 	blt	r16,r23,c3b8 <_strtoll_r+0x104>
    c438:	38004616 	blt	r7,zero,c554 <_strtoll_r+0x2a0>
    c43c:	d8800517 	ldw	r2,20(sp)
    c440:	1000341e 	bne	r2,zero,c514 <_strtoll_r+0x260>
    c444:	500b883a 	mov	r5,r10
    c448:	580d883a 	mov	r6,r11
    c44c:	d8c00417 	ldw	r3,16(sp)
    c450:	18000626 	beq	r3,zero,c46c <_strtoll_r+0x1b8>
    c454:	38000226 	beq	r7,zero,c460 <_strtoll_r+0x1ac>
    c458:	a53fffc4 	addi	r20,r20,-1
    c45c:	dd000315 	stw	r20,12(sp)
    c460:	d8c00317 	ldw	r3,12(sp)
    c464:	d8800417 	ldw	r2,16(sp)
    c468:	10c00015 	stw	r3,0(r2)
    c46c:	2805883a 	mov	r2,r5
    c470:	3007883a 	mov	r3,r6
    c474:	dfc00f17 	ldw	ra,60(sp)
    c478:	df000e17 	ldw	fp,56(sp)
    c47c:	ddc00d17 	ldw	r23,52(sp)
    c480:	dd800c17 	ldw	r22,48(sp)
    c484:	dd400b17 	ldw	r21,44(sp)
    c488:	dd000a17 	ldw	r20,40(sp)
    c48c:	dcc00917 	ldw	r19,36(sp)
    c490:	dc800817 	ldw	r18,32(sp)
    c494:	dc400717 	ldw	r17,28(sp)
    c498:	dc000617 	ldw	r16,24(sp)
    c49c:	dec01004 	addi	sp,sp,64
    c4a0:	f800283a 	ret
    c4a4:	8abfc72e 	bgeu	r17,r10,c3c4 <_strtoll_r+0x110>
    c4a8:	01ffffc4 	movi	r7,-1
    c4ac:	003fd406 	br	c400 <_strtoll_r+0x14c>
    c4b0:	00800c04 	movi	r2,48
    c4b4:	98803226 	beq	r19,r2,c580 <_strtoll_r+0x2cc>
    c4b8:	183fa026 	beq	r3,zero,c33c <_strtoll_r+0x88>
    c4bc:	00800c04 	movi	r2,48
    c4c0:	98803e26 	beq	r19,r2,c5bc <_strtoll_r+0x308>
    c4c4:	d8c00117 	ldw	r3,4(sp)
    c4c8:	05c00284 	movi	r23,10
    c4cc:	b82b883a 	mov	r21,r23
    c4d0:	1806c03a 	cmpne	r3,r3,zero
    c4d4:	002d883a 	mov	r22,zero
    c4d8:	d8c00515 	stw	r3,20(sp)
    c4dc:	183f9d26 	beq	r3,zero,c354 <_strtoll_r+0xa0>
    c4e0:	0021883a 	mov	r16,zero
    c4e4:	04600034 	movhi	r17,32768
    c4e8:	003f9d06 	br	c360 <_strtoll_r+0xac>
    c4ec:	020015c4 	movi	r8,87
    c4f0:	9a21c83a 	sub	r16,r19,r8
    c4f4:	003fcf06 	br	c434 <_strtoll_r+0x180>
    c4f8:	5cbfb31e 	bne	r11,r18,c3c8 <_strtoll_r+0x114>
    c4fc:	d8800017 	ldw	r2,0(sp)
    c500:	143fb10e 	bge	r2,r16,c3c8 <_strtoll_r+0x114>
    c504:	8815883a 	mov	r10,r17
    c508:	9017883a 	mov	r11,r18
    c50c:	01ffffc4 	movi	r7,-1
    c510:	003fbb06 	br	c400 <_strtoll_r+0x14c>
    c514:	0009883a 	mov	r4,zero
    c518:	2285c83a 	sub	r2,r4,r10
    c51c:	2089803a 	cmpltu	r4,r4,r2
    c520:	02c7c83a 	sub	r3,zero,r11
    c524:	1909c83a 	sub	r4,r3,r4
    c528:	100b883a 	mov	r5,r2
    c52c:	200d883a 	mov	r6,r4
    c530:	003fc606 	br	c44c <_strtoll_r+0x198>
    c534:	a4c00007 	ldb	r19,0(r20)
    c538:	a5000044 	addi	r20,r20,1
    c53c:	003f7a06 	br	c328 <_strtoll_r+0x74>
    c540:	a4c00007 	ldb	r19,0(r20)
    c544:	00800044 	movi	r2,1
    c548:	a5000044 	addi	r20,r20,1
    c54c:	d8800115 	stw	r2,4(sp)
    c550:	003f7606 	br	c32c <_strtoll_r+0x78>
    c554:	d8c00117 	ldw	r3,4(sp)
    c558:	1805003a 	cmpeq	r2,r3,zero
    c55c:	1000131e 	bne	r2,zero,c5ac <_strtoll_r+0x2f8>
    c560:	0005883a 	mov	r2,zero
    c564:	00e00034 	movhi	r3,32768
    c568:	100b883a 	mov	r5,r2
    c56c:	180d883a 	mov	r6,r3
    c570:	d8c00217 	ldw	r3,8(sp)
    c574:	00800884 	movi	r2,34
    c578:	18800015 	stw	r2,0(r3)
    c57c:	003fb306 	br	c44c <_strtoll_r+0x198>
    c580:	a1000007 	ldb	r4,0(r20)
    c584:	00801e04 	movi	r2,120
    c588:	20800226 	beq	r4,r2,c594 <_strtoll_r+0x2e0>
    c58c:	00801604 	movi	r2,88
    c590:	20bfc91e 	bne	r4,r2,c4b8 <_strtoll_r+0x204>
    c594:	a4c00047 	ldb	r19,1(r20)
    c598:	05c00404 	movi	r23,16
    c59c:	b82b883a 	mov	r21,r23
    c5a0:	a5000084 	addi	r20,r20,2
    c5a4:	002d883a 	mov	r22,zero
    c5a8:	003f6606 	br	c344 <_strtoll_r+0x90>
    c5ac:	017fffc4 	movi	r5,-1
    c5b0:	01a00034 	movhi	r6,32768
    c5b4:	31bfffc4 	addi	r6,r6,-1
    c5b8:	003fed06 	br	c570 <_strtoll_r+0x2bc>
    c5bc:	05c00204 	movi	r23,8
    c5c0:	b82b883a 	mov	r21,r23
    c5c4:	002d883a 	mov	r22,zero
    c5c8:	003f5e06 	br	c344 <_strtoll_r+0x90>

0000c5cc <_strtoul_r>:
    c5cc:	defff604 	addi	sp,sp,-40
    c5d0:	00800074 	movhi	r2,1
    c5d4:	10970504 	addi	r2,r2,23572
    c5d8:	dd000415 	stw	r20,16(sp)
    c5dc:	15000017 	ldw	r20,0(r2)
    c5e0:	ddc00715 	stw	r23,28(sp)
    c5e4:	dd800615 	stw	r22,24(sp)
    c5e8:	dd400515 	stw	r21,20(sp)
    c5ec:	dc800215 	stw	r18,8(sp)
    c5f0:	dc000015 	stw	r16,0(sp)
    c5f4:	dfc00915 	stw	ra,36(sp)
    c5f8:	df000815 	stw	fp,32(sp)
    c5fc:	dcc00315 	stw	r19,12(sp)
    c600:	dc400115 	stw	r17,4(sp)
    c604:	282b883a 	mov	r21,r5
    c608:	202f883a 	mov	r23,r4
    c60c:	302d883a 	mov	r22,r6
    c610:	3825883a 	mov	r18,r7
    c614:	2821883a 	mov	r16,r5
    c618:	84400007 	ldb	r17,0(r16)
    c61c:	84000044 	addi	r16,r16,1
    c620:	a447883a 	add	r3,r20,r17
    c624:	18800003 	ldbu	r2,0(r3)
    c628:	1080020c 	andi	r2,r2,8
    c62c:	103ffa1e 	bne	r2,zero,c618 <_strtoul_r+0x4c>
    c630:	00800b44 	movi	r2,45
    c634:	88805626 	beq	r17,r2,c790 <_strtoul_r+0x1c4>
    c638:	00800ac4 	movi	r2,43
    c63c:	88805126 	beq	r17,r2,c784 <_strtoul_r+0x1b8>
    c640:	0039883a 	mov	fp,zero
    c644:	9007003a 	cmpeq	r3,r18,zero
    c648:	18003b1e 	bne	r3,zero,c738 <_strtoul_r+0x16c>
    c64c:	00800404 	movi	r2,16
    c650:	90803926 	beq	r18,r2,c738 <_strtoul_r+0x16c>
    c654:	013fffc4 	movi	r4,-1
    c658:	900b883a 	mov	r5,r18
    c65c:	000fb740 	call	fb74 <__udivsi3>
    c660:	013fffc4 	movi	r4,-1
    c664:	900b883a 	mov	r5,r18
    c668:	1027883a 	mov	r19,r2
    c66c:	000fb7c0 	call	fb7c <__umodsi3>
    c670:	1011883a 	mov	r8,r2
    c674:	900f883a 	mov	r7,r18
    c678:	a445883a 	add	r2,r20,r17
    c67c:	11000003 	ldbu	r4,0(r2)
    c680:	000b883a 	mov	r5,zero
    c684:	000d883a 	mov	r6,zero
    c688:	20c0010c 	andi	r3,r4,4
    c68c:	18000e26 	beq	r3,zero,c6c8 <_strtoul_r+0xfc>
    c690:	88fff404 	addi	r3,r17,-48
    c694:	1c80140e 	bge	r3,r18,c6e8 <_strtoul_r+0x11c>
    c698:	30003316 	blt	r6,zero,c768 <_strtoul_r+0x19c>
    c69c:	99403236 	bltu	r19,r5,c768 <_strtoul_r+0x19c>
    c6a0:	2cc03026 	beq	r5,r19,c764 <_strtoul_r+0x198>
    c6a4:	29c5383a 	mul	r2,r5,r7
    c6a8:	01800044 	movi	r6,1
    c6ac:	10cb883a 	add	r5,r2,r3
    c6b0:	84400007 	ldb	r17,0(r16)
    c6b4:	84000044 	addi	r16,r16,1
    c6b8:	a445883a 	add	r2,r20,r17
    c6bc:	11000003 	ldbu	r4,0(r2)
    c6c0:	20c0010c 	andi	r3,r4,4
    c6c4:	183ff21e 	bne	r3,zero,c690 <_strtoul_r+0xc4>
    c6c8:	208000cc 	andi	r2,r4,3
    c6cc:	10000626 	beq	r2,zero,c6e8 <_strtoul_r+0x11c>
    c6d0:	2080004c 	andi	r2,r4,1
    c6d4:	1005003a 	cmpeq	r2,r2,zero
    c6d8:	1000251e 	bne	r2,zero,c770 <_strtoul_r+0x1a4>
    c6dc:	00800dc4 	movi	r2,55
    c6e0:	8887c83a 	sub	r3,r17,r2
    c6e4:	1cbfec16 	blt	r3,r18,c698 <_strtoul_r+0xcc>
    c6e8:	3000400e 	bge	r6,zero,c7ec <_strtoul_r+0x220>
    c6ec:	00800884 	movi	r2,34
    c6f0:	017fffc4 	movi	r5,-1
    c6f4:	b8800015 	stw	r2,0(r23)
    c6f8:	b0000226 	beq	r22,zero,c704 <_strtoul_r+0x138>
    c6fc:	30001f1e 	bne	r6,zero,c77c <_strtoul_r+0x1b0>
    c700:	b5400015 	stw	r21,0(r22)
    c704:	2805883a 	mov	r2,r5
    c708:	dfc00917 	ldw	ra,36(sp)
    c70c:	df000817 	ldw	fp,32(sp)
    c710:	ddc00717 	ldw	r23,28(sp)
    c714:	dd800617 	ldw	r22,24(sp)
    c718:	dd400517 	ldw	r21,20(sp)
    c71c:	dd000417 	ldw	r20,16(sp)
    c720:	dcc00317 	ldw	r19,12(sp)
    c724:	dc800217 	ldw	r18,8(sp)
    c728:	dc400117 	ldw	r17,4(sp)
    c72c:	dc000017 	ldw	r16,0(sp)
    c730:	dec00a04 	addi	sp,sp,40
    c734:	f800283a 	ret
    c738:	00800c04 	movi	r2,48
    c73c:	88801826 	beq	r17,r2,c7a0 <_strtoul_r+0x1d4>
    c740:	183fc426 	beq	r3,zero,c654 <_strtoul_r+0x88>
    c744:	00800c04 	movi	r2,48
    c748:	88802226 	beq	r17,r2,c7d4 <_strtoul_r+0x208>
    c74c:	04800284 	movi	r18,10
    c750:	900f883a 	mov	r7,r18
    c754:	04c666b4 	movhi	r19,6554
    c758:	9ce66644 	addi	r19,r19,-26215
    c75c:	02000144 	movi	r8,5
    c760:	003fc506 	br	c678 <_strtoul_r+0xac>
    c764:	40ffcf0e 	bge	r8,r3,c6a4 <_strtoul_r+0xd8>
    c768:	01bfffc4 	movi	r6,-1
    c76c:	003fd006 	br	c6b0 <_strtoul_r+0xe4>
    c770:	008015c4 	movi	r2,87
    c774:	8887c83a 	sub	r3,r17,r2
    c778:	003fda06 	br	c6e4 <_strtoul_r+0x118>
    c77c:	857fffc4 	addi	r21,r16,-1
    c780:	003fdf06 	br	c700 <_strtoul_r+0x134>
    c784:	84400007 	ldb	r17,0(r16)
    c788:	84000044 	addi	r16,r16,1
    c78c:	003fac06 	br	c640 <_strtoul_r+0x74>
    c790:	84400007 	ldb	r17,0(r16)
    c794:	07000044 	movi	fp,1
    c798:	84000044 	addi	r16,r16,1
    c79c:	003fa906 	br	c644 <_strtoul_r+0x78>
    c7a0:	81000007 	ldb	r4,0(r16)
    c7a4:	00801e04 	movi	r2,120
    c7a8:	20800226 	beq	r4,r2,c7b4 <_strtoul_r+0x1e8>
    c7ac:	00801604 	movi	r2,88
    c7b0:	20bfe31e 	bne	r4,r2,c740 <_strtoul_r+0x174>
    c7b4:	84400047 	ldb	r17,1(r16)
    c7b8:	04800404 	movi	r18,16
    c7bc:	84000084 	addi	r16,r16,2
    c7c0:	900f883a 	mov	r7,r18
    c7c4:	04c40034 	movhi	r19,4096
    c7c8:	9cffffc4 	addi	r19,r19,-1
    c7cc:	020003c4 	movi	r8,15
    c7d0:	003fa906 	br	c678 <_strtoul_r+0xac>
    c7d4:	04800204 	movi	r18,8
    c7d8:	900f883a 	mov	r7,r18
    c7dc:	04c80034 	movhi	r19,8192
    c7e0:	9cffffc4 	addi	r19,r19,-1
    c7e4:	020001c4 	movi	r8,7
    c7e8:	003fa306 	br	c678 <_strtoul_r+0xac>
    c7ec:	e005003a 	cmpeq	r2,fp,zero
    c7f0:	103fc11e 	bne	r2,zero,c6f8 <_strtoul_r+0x12c>
    c7f4:	014bc83a 	sub	r5,zero,r5
    c7f8:	003fbf06 	br	c6f8 <_strtoul_r+0x12c>

0000c7fc <strtoul>:
    c7fc:	00800074 	movhi	r2,1
    c800:	10970104 	addi	r2,r2,23556
    c804:	2013883a 	mov	r9,r4
    c808:	11000017 	ldw	r4,0(r2)
    c80c:	2805883a 	mov	r2,r5
    c810:	300f883a 	mov	r7,r6
    c814:	480b883a 	mov	r5,r9
    c818:	100d883a 	mov	r6,r2
    c81c:	000c5cc1 	jmpi	c5cc <_strtoul_r>

0000c820 <_strtoull_r>:
    c820:	defff104 	addi	sp,sp,-60
    c824:	00800074 	movhi	r2,1
    c828:	10970504 	addi	r2,r2,23572
    c82c:	df000d15 	stw	fp,52(sp)
    c830:	17000017 	ldw	fp,0(r2)
    c834:	ddc00c15 	stw	r23,48(sp)
    c838:	dcc00815 	stw	r19,32(sp)
    c83c:	dfc00e15 	stw	ra,56(sp)
    c840:	dd800b15 	stw	r22,44(sp)
    c844:	dd400a15 	stw	r21,40(sp)
    c848:	dd000915 	stw	r20,36(sp)
    c84c:	dc800715 	stw	r18,28(sp)
    c850:	dc400615 	stw	r17,24(sp)
    c854:	dc000515 	stw	r16,20(sp)
    c858:	d9400215 	stw	r5,8(sp)
    c85c:	d9000115 	stw	r4,4(sp)
    c860:	d9800315 	stw	r6,12(sp)
    c864:	382f883a 	mov	r23,r7
    c868:	2827883a 	mov	r19,r5
    c86c:	9d000007 	ldb	r20,0(r19)
    c870:	9cc00044 	addi	r19,r19,1
    c874:	e507883a 	add	r3,fp,r20
    c878:	18800003 	ldbu	r2,0(r3)
    c87c:	1080020c 	andi	r2,r2,8
    c880:	103ffa1e 	bne	r2,zero,c86c <_strtoull_r+0x4c>
    c884:	00800b44 	movi	r2,45
    c888:	a0807a26 	beq	r20,r2,ca74 <_strtoull_r+0x254>
    c88c:	00800ac4 	movi	r2,43
    c890:	a0807526 	beq	r20,r2,ca68 <_strtoull_r+0x248>
    c894:	d8000015 	stw	zero,0(sp)
    c898:	b807003a 	cmpeq	r3,r23,zero
    c89c:	18005a1e 	bne	r3,zero,ca08 <_strtoull_r+0x1e8>
    c8a0:	00800404 	movi	r2,16
    c8a4:	b8805826 	beq	r23,r2,ca08 <_strtoull_r+0x1e8>
    c8a8:	b82dd7fa 	srai	r22,r23,31
    c8ac:	043fffc4 	movi	r16,-1
    c8b0:	8009883a 	mov	r4,r16
    c8b4:	800b883a 	mov	r5,r16
    c8b8:	b80d883a 	mov	r6,r23
    c8bc:	b00f883a 	mov	r7,r22
    c8c0:	000db1c0 	call	db1c <__udivdi3>
    c8c4:	8009883a 	mov	r4,r16
    c8c8:	800b883a 	mov	r5,r16
    c8cc:	b80d883a 	mov	r6,r23
    c8d0:	b00f883a 	mov	r7,r22
    c8d4:	1023883a 	mov	r17,r2
    c8d8:	1825883a 	mov	r18,r3
    c8dc:	000e0f80 	call	e0f8 <__umoddi3>
    c8e0:	b82b883a 	mov	r21,r23
    c8e4:	1019883a 	mov	r12,r2
    c8e8:	e505883a 	add	r2,fp,r20
    c8ec:	11000003 	ldbu	r4,0(r2)
    c8f0:	0015883a 	mov	r10,zero
    c8f4:	0017883a 	mov	r11,zero
    c8f8:	20c0010c 	andi	r3,r4,4
    c8fc:	000d883a 	mov	r6,zero
    c900:	18001c26 	beq	r3,zero,c974 <_strtoull_r+0x154>
    c904:	a43ff404 	addi	r16,r20,-48
    c908:	85c0220e 	bge	r16,r23,c994 <_strtoull_r+0x174>
    c90c:	30003c16 	blt	r6,zero,ca00 <_strtoull_r+0x1e0>
    c910:	92c03b36 	bltu	r18,r11,ca00 <_strtoull_r+0x1e0>
    c914:	5c803926 	beq	r11,r18,c9fc <_strtoull_r+0x1dc>
    c918:	54404c26 	beq	r10,r17,ca4c <_strtoull_r+0x22c>
    c91c:	580b883a 	mov	r5,r11
    c920:	5009883a 	mov	r4,r10
    c924:	a80d883a 	mov	r6,r21
    c928:	b00f883a 	mov	r7,r22
    c92c:	db000415 	stw	r12,16(sp)
    c930:	000d9e00 	call	d9e0 <__muldi3>
    c934:	8013d7fa 	srai	r9,r16,31
    c938:	100d883a 	mov	r6,r2
    c93c:	1405883a 	add	r2,r2,r16
    c940:	118d803a 	cmpltu	r6,r2,r6
    c944:	1a47883a 	add	r3,r3,r9
    c948:	db000417 	ldw	r12,16(sp)
    c94c:	30cd883a 	add	r6,r6,r3
    c950:	3017883a 	mov	r11,r6
    c954:	1015883a 	mov	r10,r2
    c958:	01800044 	movi	r6,1
    c95c:	9d000007 	ldb	r20,0(r19)
    c960:	9cc00044 	addi	r19,r19,1
    c964:	e505883a 	add	r2,fp,r20
    c968:	11000003 	ldbu	r4,0(r2)
    c96c:	20c0010c 	andi	r3,r4,4
    c970:	183fe41e 	bne	r3,zero,c904 <_strtoull_r+0xe4>
    c974:	208000cc 	andi	r2,r4,3
    c978:	10000626 	beq	r2,zero,c994 <_strtoull_r+0x174>
    c97c:	2080004c 	andi	r2,r4,1
    c980:	1005003a 	cmpeq	r2,r2,zero
    c984:	10002e1e 	bne	r2,zero,ca40 <_strtoull_r+0x220>
    c988:	02000dc4 	movi	r8,55
    c98c:	a221c83a 	sub	r16,r20,r8
    c990:	85ffde16 	blt	r16,r23,c90c <_strtoull_r+0xec>
    c994:	3000530e 	bge	r6,zero,cae4 <_strtoull_r+0x2c4>
    c998:	d8c00117 	ldw	r3,4(sp)
    c99c:	02bfffc4 	movi	r10,-1
    c9a0:	00800884 	movi	r2,34
    c9a4:	5017883a 	mov	r11,r10
    c9a8:	18800015 	stw	r2,0(r3)
    c9ac:	d8800317 	ldw	r2,12(sp)
    c9b0:	10000426 	beq	r2,zero,c9c4 <_strtoull_r+0x1a4>
    c9b4:	3000291e 	bne	r6,zero,ca5c <_strtoull_r+0x23c>
    c9b8:	d8800217 	ldw	r2,8(sp)
    c9bc:	d8c00317 	ldw	r3,12(sp)
    c9c0:	18800015 	stw	r2,0(r3)
    c9c4:	5005883a 	mov	r2,r10
    c9c8:	5807883a 	mov	r3,r11
    c9cc:	dfc00e17 	ldw	ra,56(sp)
    c9d0:	df000d17 	ldw	fp,52(sp)
    c9d4:	ddc00c17 	ldw	r23,48(sp)
    c9d8:	dd800b17 	ldw	r22,44(sp)
    c9dc:	dd400a17 	ldw	r21,40(sp)
    c9e0:	dd000917 	ldw	r20,36(sp)
    c9e4:	dcc00817 	ldw	r19,32(sp)
    c9e8:	dc800717 	ldw	r18,28(sp)
    c9ec:	dc400617 	ldw	r17,24(sp)
    c9f0:	dc000517 	ldw	r16,20(sp)
    c9f4:	dec00f04 	addi	sp,sp,60
    c9f8:	f800283a 	ret
    c9fc:	8abfc62e 	bgeu	r17,r10,c918 <_strtoull_r+0xf8>
    ca00:	01bfffc4 	movi	r6,-1
    ca04:	003fd506 	br	c95c <_strtoull_r+0x13c>
    ca08:	00800c04 	movi	r2,48
    ca0c:	a0801e26 	beq	r20,r2,ca88 <_strtoull_r+0x268>
    ca10:	183fa526 	beq	r3,zero,c8a8 <_strtoull_r+0x88>
    ca14:	00800c04 	movi	r2,48
    ca18:	a0802a26 	beq	r20,r2,cac4 <_strtoull_r+0x2a4>
    ca1c:	05c00284 	movi	r23,10
    ca20:	b82b883a 	mov	r21,r23
    ca24:	046666b4 	movhi	r17,39322
    ca28:	8c666644 	addi	r17,r17,-26215
    ca2c:	002d883a 	mov	r22,zero
    ca30:	048666b4 	movhi	r18,6554
    ca34:	94a66644 	addi	r18,r18,-26215
    ca38:	03000144 	movi	r12,5
    ca3c:	003faa06 	br	c8e8 <_strtoull_r+0xc8>
    ca40:	020015c4 	movi	r8,87
    ca44:	a221c83a 	sub	r16,r20,r8
    ca48:	003fd106 	br	c990 <_strtoull_r+0x170>
    ca4c:	5cbfb31e 	bne	r11,r18,c91c <_strtoull_r+0xfc>
    ca50:	643fb20e 	bge	r12,r16,c91c <_strtoull_r+0xfc>
    ca54:	01bfffc4 	movi	r6,-1
    ca58:	003fc006 	br	c95c <_strtoull_r+0x13c>
    ca5c:	9cffffc4 	addi	r19,r19,-1
    ca60:	dcc00215 	stw	r19,8(sp)
    ca64:	003fd406 	br	c9b8 <_strtoull_r+0x198>
    ca68:	9d000007 	ldb	r20,0(r19)
    ca6c:	9cc00044 	addi	r19,r19,1
    ca70:	003f8806 	br	c894 <_strtoull_r+0x74>
    ca74:	9d000007 	ldb	r20,0(r19)
    ca78:	00800044 	movi	r2,1
    ca7c:	9cc00044 	addi	r19,r19,1
    ca80:	d8800015 	stw	r2,0(sp)
    ca84:	003f8406 	br	c898 <_strtoull_r+0x78>
    ca88:	99000007 	ldb	r4,0(r19)
    ca8c:	00801e04 	movi	r2,120
    ca90:	20800226 	beq	r4,r2,ca9c <_strtoull_r+0x27c>
    ca94:	00801604 	movi	r2,88
    ca98:	20bfdd1e 	bne	r4,r2,ca10 <_strtoull_r+0x1f0>
    ca9c:	9d000047 	ldb	r20,1(r19)
    caa0:	05c00404 	movi	r23,16
    caa4:	b82b883a 	mov	r21,r23
    caa8:	047fffc4 	movi	r17,-1
    caac:	9cc00084 	addi	r19,r19,2
    cab0:	002d883a 	mov	r22,zero
    cab4:	04840034 	movhi	r18,4096
    cab8:	94bfffc4 	addi	r18,r18,-1
    cabc:	030003c4 	movi	r12,15
    cac0:	003f8906 	br	c8e8 <_strtoull_r+0xc8>
    cac4:	05c00204 	movi	r23,8
    cac8:	b82b883a 	mov	r21,r23
    cacc:	047fffc4 	movi	r17,-1
    cad0:	002d883a 	mov	r22,zero
    cad4:	04880034 	movhi	r18,8192
    cad8:	94bfffc4 	addi	r18,r18,-1
    cadc:	030001c4 	movi	r12,7
    cae0:	003f8106 	br	c8e8 <_strtoull_r+0xc8>
    cae4:	d8c00017 	ldw	r3,0(sp)
    cae8:	1805003a 	cmpeq	r2,r3,zero
    caec:	103faf1e 	bne	r2,zero,c9ac <_strtoull_r+0x18c>
    caf0:	0009883a 	mov	r4,zero
    caf4:	2285c83a 	sub	r2,r4,r10
    caf8:	02c7c83a 	sub	r3,zero,r11
    cafc:	2089803a 	cmpltu	r4,r4,r2
    cb00:	1909c83a 	sub	r4,r3,r4
    cb04:	1015883a 	mov	r10,r2
    cb08:	2017883a 	mov	r11,r4
    cb0c:	003fa706 	br	c9ac <_strtoull_r+0x18c>

0000cb10 <__submore>:
    cb10:	defffa04 	addi	sp,sp,-24
    cb14:	28c00c17 	ldw	r3,48(r5)
    cb18:	dc800215 	stw	r18,8(sp)
    cb1c:	2825883a 	mov	r18,r5
    cb20:	dc000015 	stw	r16,0(sp)
    cb24:	90801004 	addi	r2,r18,64
    cb28:	04010004 	movi	r16,1024
    cb2c:	dfc00515 	stw	ra,20(sp)
    cb30:	dd000415 	stw	r20,16(sp)
    cb34:	dcc00315 	stw	r19,12(sp)
    cb38:	dc400115 	stw	r17,4(sp)
    cb3c:	800b883a 	mov	r5,r16
    cb40:	18801b26 	beq	r3,r2,cbb0 <__submore+0xa0>
    cb44:	94400d17 	ldw	r17,52(r18)
    cb48:	180b883a 	mov	r5,r3
    cb4c:	8c69883a 	add	r20,r17,r17
    cb50:	a00d883a 	mov	r6,r20
    cb54:	000a1240 	call	a124 <_realloc_r>
    cb58:	1467883a 	add	r19,r2,r17
    cb5c:	1021883a 	mov	r16,r2
    cb60:	880d883a 	mov	r6,r17
    cb64:	9809883a 	mov	r4,r19
    cb68:	100b883a 	mov	r5,r2
    cb6c:	10000e26 	beq	r2,zero,cba8 <__submore+0x98>
    cb70:	0002f540 	call	2f54 <memcpy>
    cb74:	000d883a 	mov	r6,zero
    cb78:	95000d15 	stw	r20,52(r18)
    cb7c:	94c00015 	stw	r19,0(r18)
    cb80:	94000c15 	stw	r16,48(r18)
    cb84:	3005883a 	mov	r2,r6
    cb88:	dfc00517 	ldw	ra,20(sp)
    cb8c:	dd000417 	ldw	r20,16(sp)
    cb90:	dcc00317 	ldw	r19,12(sp)
    cb94:	dc800217 	ldw	r18,8(sp)
    cb98:	dc400117 	ldw	r17,4(sp)
    cb9c:	dc000017 	ldw	r16,0(sp)
    cba0:	dec00604 	addi	sp,sp,24
    cba4:	f800283a 	ret
    cba8:	01bfffc4 	movi	r6,-1
    cbac:	003ff506 	br	cb84 <__submore+0x74>
    cbb0:	00028140 	call	2814 <_malloc_r>
    cbb4:	1009883a 	mov	r4,r2
    cbb8:	1140ff44 	addi	r5,r2,1021
    cbbc:	000d883a 	mov	r6,zero
    cbc0:	103ff926 	beq	r2,zero,cba8 <__submore+0x98>
    cbc4:	90801083 	ldbu	r2,66(r18)
    cbc8:	94000d15 	stw	r16,52(r18)
    cbcc:	91000c15 	stw	r4,48(r18)
    cbd0:	28800085 	stb	r2,2(r5)
    cbd4:	90c01043 	ldbu	r3,65(r18)
    cbd8:	28c00045 	stb	r3,1(r5)
    cbdc:	90801003 	ldbu	r2,64(r18)
    cbe0:	2080ff45 	stb	r2,1021(r4)
    cbe4:	91400015 	stw	r5,0(r18)
    cbe8:	003fe606 	br	cb84 <__submore+0x74>

0000cbec <_ungetc_r>:
    cbec:	defffc04 	addi	sp,sp,-16
    cbf0:	00bfffc4 	movi	r2,-1
    cbf4:	dc400215 	stw	r17,8(sp)
    cbf8:	dc000115 	stw	r16,4(sp)
    cbfc:	dfc00315 	stw	ra,12(sp)
    cc00:	2821883a 	mov	r16,r5
    cc04:	2023883a 	mov	r17,r4
    cc08:	28801826 	beq	r5,r2,cc6c <_ungetc_r+0x80>
    cc0c:	20000226 	beq	r4,zero,cc18 <_ungetc_r+0x2c>
    cc10:	20800e17 	ldw	r2,56(r4)
    cc14:	10001b26 	beq	r2,zero,cc84 <_ungetc_r+0x98>
    cc18:	3100030b 	ldhu	r4,12(r6)
    cc1c:	00bff7c4 	movi	r2,-33
    cc20:	2084703a 	and	r2,r4,r2
    cc24:	117fffcc 	andi	r5,r2,65535
    cc28:	28c0010c 	andi	r3,r5,4
    cc2c:	1009883a 	mov	r4,r2
    cc30:	3080030d 	sth	r2,12(r6)
    cc34:	18003526 	beq	r3,zero,cd0c <_ungetc_r+0x120>
    cc38:	30800c17 	ldw	r2,48(r6)
    cc3c:	84003fcc 	andi	r16,r16,255
    cc40:	10001426 	beq	r2,zero,cc94 <_ungetc_r+0xa8>
    cc44:	30c00117 	ldw	r3,4(r6)
    cc48:	30800d17 	ldw	r2,52(r6)
    cc4c:	1880380e 	bge	r3,r2,cd30 <_ungetc_r+0x144>
    cc50:	30c00017 	ldw	r3,0(r6)
    cc54:	19ffffc4 	addi	r7,r3,-1
    cc58:	31c00015 	stw	r7,0(r6)
    cc5c:	1c3fffc5 	stb	r16,-1(r3)
    cc60:	30800117 	ldw	r2,4(r6)
    cc64:	10800044 	addi	r2,r2,1
    cc68:	30800115 	stw	r2,4(r6)
    cc6c:	8005883a 	mov	r2,r16
    cc70:	dfc00317 	ldw	ra,12(sp)
    cc74:	dc400217 	ldw	r17,8(sp)
    cc78:	dc000117 	ldw	r16,4(sp)
    cc7c:	dec00404 	addi	sp,sp,16
    cc80:	f800283a 	ret
    cc84:	d9800015 	stw	r6,0(sp)
    cc88:	00015b40 	call	15b4 <__sinit>
    cc8c:	d9800017 	ldw	r6,0(sp)
    cc90:	003fe106 	br	cc18 <_ungetc_r+0x2c>
    cc94:	30800417 	ldw	r2,16(r6)
    cc98:	10002326 	beq	r2,zero,cd28 <_ungetc_r+0x13c>
    cc9c:	31c00017 	ldw	r7,0(r6)
    cca0:	11c0022e 	bgeu	r2,r7,ccac <_ungetc_r+0xc0>
    cca4:	38bfffc3 	ldbu	r2,-1(r7)
    cca8:	80801226 	beq	r16,r2,ccf4 <_ungetc_r+0x108>
    ccac:	30c00117 	ldw	r3,4(r6)
    ccb0:	00800044 	movi	r2,1
    ccb4:	30800115 	stw	r2,4(r6)
    ccb8:	008000c4 	movi	r2,3
    ccbc:	31001004 	addi	r4,r6,64
    ccc0:	31401084 	addi	r5,r6,66
    ccc4:	30800d15 	stw	r2,52(r6)
    ccc8:	8005883a 	mov	r2,r16
    cccc:	30c00f15 	stw	r3,60(r6)
    ccd0:	31c00e15 	stw	r7,56(r6)
    ccd4:	31000c15 	stw	r4,48(r6)
    ccd8:	31400015 	stw	r5,0(r6)
    ccdc:	34001085 	stb	r16,66(r6)
    cce0:	dfc00317 	ldw	ra,12(sp)
    cce4:	dc400217 	ldw	r17,8(sp)
    cce8:	dc000117 	ldw	r16,4(sp)
    ccec:	dec00404 	addi	sp,sp,16
    ccf0:	f800283a 	ret
    ccf4:	30800117 	ldw	r2,4(r6)
    ccf8:	39ffffc4 	addi	r7,r7,-1
    ccfc:	31c00015 	stw	r7,0(r6)
    cd00:	10800044 	addi	r2,r2,1
    cd04:	30800115 	stw	r2,4(r6)
    cd08:	003fd806 	br	cc6c <_ungetc_r+0x80>
    cd0c:	2880040c 	andi	r2,r5,16
    cd10:	10000d26 	beq	r2,zero,cd48 <_ungetc_r+0x15c>
    cd14:	2880020c 	andi	r2,r5,8
    cd18:	10000d1e 	bne	r2,zero,cd50 <_ungetc_r+0x164>
    cd1c:	20800114 	ori	r2,r4,4
    cd20:	3080030d 	sth	r2,12(r6)
    cd24:	003fc406 	br	cc38 <_ungetc_r+0x4c>
    cd28:	31c00017 	ldw	r7,0(r6)
    cd2c:	003fdf06 	br	ccac <_ungetc_r+0xc0>
    cd30:	300b883a 	mov	r5,r6
    cd34:	8809883a 	mov	r4,r17
    cd38:	d9800015 	stw	r6,0(sp)
    cd3c:	000cb100 	call	cb10 <__submore>
    cd40:	d9800017 	ldw	r6,0(sp)
    cd44:	103fc226 	beq	r2,zero,cc50 <_ungetc_r+0x64>
    cd48:	043fffc4 	movi	r16,-1
    cd4c:	003fc706 	br	cc6c <_ungetc_r+0x80>
    cd50:	300b883a 	mov	r5,r6
    cd54:	8809883a 	mov	r4,r17
    cd58:	d9800015 	stw	r6,0(sp)
    cd5c:	000131c0 	call	131c <_fflush_r>
    cd60:	d9800017 	ldw	r6,0(sp)
    cd64:	103ff81e 	bne	r2,zero,cd48 <_ungetc_r+0x15c>
    cd68:	3100030b 	ldhu	r4,12(r6)
    cd6c:	00bffdc4 	movi	r2,-9
    cd70:	30000215 	stw	zero,8(r6)
    cd74:	2084703a 	and	r2,r4,r2
    cd78:	1009883a 	mov	r4,r2
    cd7c:	3080030d 	sth	r2,12(r6)
    cd80:	30000615 	stw	zero,24(r6)
    cd84:	003fe506 	br	cd1c <_ungetc_r+0x130>

0000cd88 <ungetc>:
    cd88:	01800074 	movhi	r6,1
    cd8c:	31970104 	addi	r6,r6,23556
    cd90:	2007883a 	mov	r3,r4
    cd94:	31000017 	ldw	r4,0(r6)
    cd98:	280d883a 	mov	r6,r5
    cd9c:	180b883a 	mov	r5,r3
    cda0:	000cbec1 	jmpi	cbec <_ungetc_r>

0000cda4 <_calloc_r>:
    cda4:	298b383a 	mul	r5,r5,r6
    cda8:	defffe04 	addi	sp,sp,-8
    cdac:	dc000015 	stw	r16,0(sp)
    cdb0:	dfc00115 	stw	ra,4(sp)
    cdb4:	00028140 	call	2814 <_malloc_r>
    cdb8:	1021883a 	mov	r16,r2
    cdbc:	01c00904 	movi	r7,36
    cdc0:	10000d26 	beq	r2,zero,cdf8 <_calloc_r+0x54>
    cdc4:	10ffff17 	ldw	r3,-4(r2)
    cdc8:	1009883a 	mov	r4,r2
    cdcc:	00bfff04 	movi	r2,-4
    cdd0:	1886703a 	and	r3,r3,r2
    cdd4:	1887883a 	add	r3,r3,r2
    cdd8:	180d883a 	mov	r6,r3
    cddc:	000b883a 	mov	r5,zero
    cde0:	38c01736 	bltu	r7,r3,ce40 <_calloc_r+0x9c>
    cde4:	008004c4 	movi	r2,19
    cde8:	10c00836 	bltu	r2,r3,ce0c <_calloc_r+0x68>
    cdec:	20000215 	stw	zero,8(r4)
    cdf0:	20000015 	stw	zero,0(r4)
    cdf4:	20000115 	stw	zero,4(r4)
    cdf8:	8005883a 	mov	r2,r16
    cdfc:	dfc00117 	ldw	ra,4(sp)
    ce00:	dc000017 	ldw	r16,0(sp)
    ce04:	dec00204 	addi	sp,sp,8
    ce08:	f800283a 	ret
    ce0c:	008006c4 	movi	r2,27
    ce10:	80000015 	stw	zero,0(r16)
    ce14:	80000115 	stw	zero,4(r16)
    ce18:	81000204 	addi	r4,r16,8
    ce1c:	10fff32e 	bgeu	r2,r3,cdec <_calloc_r+0x48>
    ce20:	80000215 	stw	zero,8(r16)
    ce24:	80000315 	stw	zero,12(r16)
    ce28:	81000404 	addi	r4,r16,16
    ce2c:	19ffef1e 	bne	r3,r7,cdec <_calloc_r+0x48>
    ce30:	81000604 	addi	r4,r16,24
    ce34:	80000415 	stw	zero,16(r16)
    ce38:	80000515 	stw	zero,20(r16)
    ce3c:	003feb06 	br	cdec <_calloc_r+0x48>
    ce40:	0002ff40 	call	2ff4 <memset>
    ce44:	8005883a 	mov	r2,r16
    ce48:	dfc00117 	ldw	ra,4(sp)
    ce4c:	dc000017 	ldw	r16,0(sp)
    ce50:	dec00204 	addi	sp,sp,8
    ce54:	f800283a 	ret

0000ce58 <htinit>:
    ce58:	28800003 	ldbu	r2,0(r5)
    ce5c:	10000626 	beq	r2,zero,ce78 <htinit+0x20>
    ce60:	1105883a 	add	r2,r2,r4
    ce64:	11800005 	stb	r6,0(r2)
    ce68:	28800043 	ldbu	r2,1(r5)
    ce6c:	31800044 	addi	r6,r6,1
    ce70:	29400044 	addi	r5,r5,1
    ce74:	103ffa1e 	bne	r2,zero,ce60 <htinit+0x8>
    ce78:	f800283a 	ret

0000ce7c <__hexdig_init>:
    ce7c:	defffd04 	addi	sp,sp,-12
    ce80:	dc400015 	stw	r17,0(sp)
    ce84:	04400074 	movhi	r17,1
    ce88:	8c5f3c04 	addi	r17,r17,31984
    ce8c:	dcc00115 	stw	r19,4(sp)
    ce90:	8809883a 	mov	r4,r17
    ce94:	04c00684 	movi	r19,26
    ce98:	01400074 	movhi	r5,1
    ce9c:	29500a04 	addi	r5,r5,16424
    cea0:	01800404 	movi	r6,16
    cea4:	dfc00215 	stw	ra,8(sp)
    cea8:	000ce580 	call	ce58 <htinit>
    ceac:	980d883a 	mov	r6,r19
    ceb0:	8809883a 	mov	r4,r17
    ceb4:	01400074 	movhi	r5,1
    ceb8:	29500d04 	addi	r5,r5,16436
    cebc:	000ce580 	call	ce58 <htinit>
    cec0:	8809883a 	mov	r4,r17
    cec4:	980d883a 	mov	r6,r19
    cec8:	01400074 	movhi	r5,1
    cecc:	29500f04 	addi	r5,r5,16444
    ced0:	dfc00217 	ldw	ra,8(sp)
    ced4:	dcc00117 	ldw	r19,4(sp)
    ced8:	dc400017 	ldw	r17,0(sp)
    cedc:	dec00304 	addi	sp,sp,12
    cee0:	000ce581 	jmpi	ce58 <htinit>

0000cee4 <rshift>:
    cee4:	2807d17a 	srai	r3,r5,5
    cee8:	20800417 	ldw	r2,16(r4)
    ceec:	22400504 	addi	r9,r4,20
    cef0:	480f883a 	mov	r7,r9
    cef4:	1880190e 	bge	r3,r2,cf5c <rshift+0x78>
    cef8:	1085883a 	add	r2,r2,r2
    cefc:	18c7883a 	add	r3,r3,r3
    cf00:	1085883a 	add	r2,r2,r2
    cf04:	18c7883a 	add	r3,r3,r3
    cf08:	294007cc 	andi	r5,r5,31
    cf0c:	4891883a 	add	r8,r9,r2
    cf10:	48cd883a 	add	r6,r9,r3
    cf14:	28001726 	beq	r5,zero,cf74 <rshift+0x90>
    cf18:	30c00017 	ldw	r3,0(r6)
    cf1c:	00800804 	movi	r2,32
    cf20:	31800104 	addi	r6,r6,4
    cf24:	1155c83a 	sub	r10,r2,r5
    cf28:	1946d83a 	srl	r3,r3,r5
    cf2c:	3200092e 	bgeu	r6,r8,cf54 <rshift+0x70>
    cf30:	30800017 	ldw	r2,0(r6)
    cf34:	1284983a 	sll	r2,r2,r10
    cf38:	10c4b03a 	or	r2,r2,r3
    cf3c:	38800015 	stw	r2,0(r7)
    cf40:	30c00017 	ldw	r3,0(r6)
    cf44:	31800104 	addi	r6,r6,4
    cf48:	39c00104 	addi	r7,r7,4
    cf4c:	1946d83a 	srl	r3,r3,r5
    cf50:	323ff736 	bltu	r6,r8,cf30 <rshift+0x4c>
    cf54:	38c00015 	stw	r3,0(r7)
    cf58:	18000c1e 	bne	r3,zero,cf8c <rshift+0xa8>
    cf5c:	3a45c83a 	sub	r2,r7,r9
    cf60:	1005d0ba 	srai	r2,r2,2
    cf64:	20800415 	stw	r2,16(r4)
    cf68:	1000011e 	bne	r2,zero,cf70 <rshift+0x8c>
    cf6c:	20000515 	stw	zero,20(r4)
    cf70:	f800283a 	ret
    cf74:	323ff92e 	bgeu	r6,r8,cf5c <rshift+0x78>
    cf78:	30800017 	ldw	r2,0(r6)
    cf7c:	31800104 	addi	r6,r6,4
    cf80:	38800015 	stw	r2,0(r7)
    cf84:	39c00104 	addi	r7,r7,4
    cf88:	003ffa06 	br	cf74 <rshift+0x90>
    cf8c:	39c00104 	addi	r7,r7,4
    cf90:	003ff206 	br	cf5c <rshift+0x78>

0000cf94 <__gethex>:
    cf94:	defff304 	addi	sp,sp,-52
    cf98:	dd400815 	stw	r21,32(sp)
    cf9c:	dd000715 	stw	r20,28(sp)
    cfa0:	dcc00615 	stw	r19,24(sp)
    cfa4:	dc400415 	stw	r17,16(sp)
    cfa8:	dfc00c15 	stw	ra,48(sp)
    cfac:	df000b15 	stw	fp,44(sp)
    cfb0:	ddc00a15 	stw	r23,40(sp)
    cfb4:	dd800915 	stw	r22,36(sp)
    cfb8:	dc800515 	stw	r18,20(sp)
    cfbc:	dc000315 	stw	r16,12(sp)
    cfc0:	04400074 	movhi	r17,1
    cfc4:	8c5f3c04 	addi	r17,r17,31984
    cfc8:	88800c03 	ldbu	r2,48(r17)
    cfcc:	202b883a 	mov	r21,r4
    cfd0:	2827883a 	mov	r19,r5
    cfd4:	3029883a 	mov	r20,r6
    cfd8:	d9c00115 	stw	r7,4(sp)
    cfdc:	10006e26 	beq	r2,zero,d198 <__gethex+0x204>
    cfe0:	99800017 	ldw	r6,0(r19)
    cfe4:	00800c04 	movi	r2,48
    cfe8:	31000083 	ldbu	r4,2(r6)
    cfec:	30c00084 	addi	r3,r6,2
    cff0:	20806f1e 	bne	r4,r2,d1b0 <__gethex+0x21c>
    cff4:	200b883a 	mov	r5,r4
    cff8:	3007883a 	mov	r3,r6
    cffc:	188000c3 	ldbu	r2,3(r3)
    d000:	18c00044 	addi	r3,r3,1
    d004:	1009883a 	mov	r4,r2
    d008:	117ffc26 	beq	r2,r5,cffc <__gethex+0x68>
    d00c:	1997c83a 	sub	r11,r3,r6
    d010:	19400084 	addi	r5,r3,2
    d014:	2445883a 	add	r2,r4,r17
    d018:	10c00003 	ldbu	r3,0(r2)
    d01c:	18002d26 	beq	r3,zero,d0d4 <__gethex+0x140>
    d020:	29000003 	ldbu	r4,0(r5)
    d024:	2825883a 	mov	r18,r5
    d028:	000d883a 	mov	r6,zero
    d02c:	0013883a 	mov	r9,zero
    d030:	21003fcc 	andi	r4,r4,255
    d034:	2445883a 	add	r2,r4,r17
    d038:	10c00003 	ldbu	r3,0(r2)
    d03c:	18000526 	beq	r3,zero,d054 <__gethex+0xc0>
    d040:	29400044 	addi	r5,r5,1
    d044:	29000003 	ldbu	r4,0(r5)
    d048:	2445883a 	add	r2,r4,r17
    d04c:	10c00003 	ldbu	r3,0(r2)
    d050:	183ffb1e 	bne	r3,zero,d040 <__gethex+0xac>
    d054:	00800b84 	movi	r2,46
    d058:	20805826 	beq	r4,r2,d1bc <__gethex+0x228>
    d05c:	30007a26 	beq	r6,zero,d248 <__gethex+0x2b4>
    d060:	2985c83a 	sub	r2,r5,r6
    d064:	1085883a 	add	r2,r2,r2
    d068:	1085883a 	add	r2,r2,r2
    d06c:	00adc83a 	sub	r22,zero,r2
    d070:	2821883a 	mov	r16,r5
    d074:	80c00003 	ldbu	r3,0(r16)
    d078:	00801404 	movi	r2,80
    d07c:	18801e26 	beq	r3,r2,d0f8 <__gethex+0x164>
    d080:	00801c04 	movi	r2,112
    d084:	18801c26 	beq	r3,r2,d0f8 <__gethex+0x164>
    d088:	800d883a 	mov	r6,r16
    d08c:	4805003a 	cmpeq	r2,r9,zero
    d090:	99800015 	stw	r6,0(r19)
    d094:	1000861e 	bne	r2,zero,d2b0 <__gethex+0x31c>
    d098:	58003d26 	beq	r11,zero,d190 <__gethex+0x1fc>
    d09c:	0025883a 	mov	r18,zero
    d0a0:	9005883a 	mov	r2,r18
    d0a4:	dfc00c17 	ldw	ra,48(sp)
    d0a8:	df000b17 	ldw	fp,44(sp)
    d0ac:	ddc00a17 	ldw	r23,40(sp)
    d0b0:	dd800917 	ldw	r22,36(sp)
    d0b4:	dd400817 	ldw	r21,32(sp)
    d0b8:	dd000717 	ldw	r20,28(sp)
    d0bc:	dcc00617 	ldw	r19,24(sp)
    d0c0:	dc800517 	ldw	r18,20(sp)
    d0c4:	dc400417 	ldw	r17,16(sp)
    d0c8:	dc000317 	ldw	r16,12(sp)
    d0cc:	dec00d04 	addi	sp,sp,52
    d0d0:	f800283a 	ret
    d0d4:	00800b84 	movi	r2,46
    d0d8:	20804a26 	beq	r4,r2,d204 <__gethex+0x270>
    d0dc:	2821883a 	mov	r16,r5
    d0e0:	80c00003 	ldbu	r3,0(r16)
    d0e4:	00801404 	movi	r2,80
    d0e8:	2825883a 	mov	r18,r5
    d0ec:	02400044 	movi	r9,1
    d0f0:	002d883a 	mov	r22,zero
    d0f4:	18bfe21e 	bne	r3,r2,d080 <__gethex+0xec>
    d0f8:	80c00043 	ldbu	r3,1(r16)
    d0fc:	00800ac4 	movi	r2,43
    d100:	81000044 	addi	r4,r16,1
    d104:	18804a26 	beq	r3,r2,d230 <__gethex+0x29c>
    d108:	00800b44 	movi	r2,45
    d10c:	18804c26 	beq	r3,r2,d240 <__gethex+0x2ac>
    d110:	0015883a 	mov	r10,zero
    d114:	1c45883a 	add	r2,r3,r17
    d118:	10800003 	ldbu	r2,0(r2)
    d11c:	103fda26 	beq	r2,zero,d088 <__gethex+0xf4>
    d120:	02000644 	movi	r8,25
    d124:	40bfd816 	blt	r8,r2,d088 <__gethex+0xf4>
    d128:	20c00043 	ldbu	r3,1(r4)
    d12c:	11fffc04 	addi	r7,r2,-16
    d130:	00800074 	movhi	r2,1
    d134:	109f3c04 	addi	r2,r2,31984
    d138:	1887883a 	add	r3,r3,r2
    d13c:	18800003 	ldbu	r2,0(r3)
    d140:	21800044 	addi	r6,r4,1
    d144:	10000d26 	beq	r2,zero,d17c <__gethex+0x1e8>
    d148:	100b883a 	mov	r5,r2
    d14c:	4080020e 	bge	r8,r2,d158 <__gethex+0x1c4>
    d150:	00000a06 	br	d17c <__gethex+0x1e8>
    d154:	41000916 	blt	r8,r4,d17c <__gethex+0x1e8>
    d158:	31800044 	addi	r6,r6,1
    d15c:	30800003 	ldbu	r2,0(r6)
    d160:	38c002a4 	muli	r3,r7,10
    d164:	1445883a 	add	r2,r2,r17
    d168:	11000003 	ldbu	r4,0(r2)
    d16c:	1947883a 	add	r3,r3,r5
    d170:	19fffc04 	addi	r7,r3,-16
    d174:	200b883a 	mov	r5,r4
    d178:	203ff61e 	bne	r4,zero,d154 <__gethex+0x1c0>
    d17c:	5005003a 	cmpeq	r2,r10,zero
    d180:	1000011e 	bne	r2,zero,d188 <__gethex+0x1f4>
    d184:	01cfc83a 	sub	r7,zero,r7
    d188:	b1ed883a 	add	r22,r22,r7
    d18c:	003fbf06 	br	d08c <__gethex+0xf8>
    d190:	04800184 	movi	r18,6
    d194:	003fc206 	br	d0a0 <__gethex+0x10c>
    d198:	000ce7c0 	call	ce7c <__hexdig_init>
    d19c:	99800017 	ldw	r6,0(r19)
    d1a0:	00800c04 	movi	r2,48
    d1a4:	31000083 	ldbu	r4,2(r6)
    d1a8:	30c00084 	addi	r3,r6,2
    d1ac:	20bf9126 	beq	r4,r2,cff4 <__gethex+0x60>
    d1b0:	180b883a 	mov	r5,r3
    d1b4:	0017883a 	mov	r11,zero
    d1b8:	003f9606 	br	d014 <__gethex+0x80>
    d1bc:	303fa81e 	bne	r6,zero,d060 <__gethex+0xcc>
    d1c0:	29400044 	addi	r5,r5,1
    d1c4:	28800003 	ldbu	r2,0(r5)
    d1c8:	1445883a 	add	r2,r2,r17
    d1cc:	10c00003 	ldbu	r3,0(r2)
    d1d0:	1800ad26 	beq	r3,zero,d488 <__gethex+0x4f4>
    d1d4:	2809883a 	mov	r4,r5
    d1d8:	21000044 	addi	r4,r4,1
    d1dc:	20800003 	ldbu	r2,0(r4)
    d1e0:	1445883a 	add	r2,r2,r17
    d1e4:	10c00003 	ldbu	r3,0(r2)
    d1e8:	183ffb1e 	bne	r3,zero,d1d8 <__gethex+0x244>
    d1ec:	2145c83a 	sub	r2,r4,r5
    d1f0:	1085883a 	add	r2,r2,r2
    d1f4:	1085883a 	add	r2,r2,r2
    d1f8:	00adc83a 	sub	r22,zero,r2
    d1fc:	200b883a 	mov	r5,r4
    d200:	003f9b06 	br	d070 <__gethex+0xdc>
    d204:	29000043 	ldbu	r4,1(r5)
    d208:	00800074 	movhi	r2,1
    d20c:	109f3c04 	addi	r2,r2,31984
    d210:	2c000044 	addi	r16,r5,1
    d214:	2085883a 	add	r2,r4,r2
    d218:	10c00003 	ldbu	r3,0(r2)
    d21c:	18000d1e 	bne	r3,zero,d254 <__gethex+0x2c0>
    d220:	2825883a 	mov	r18,r5
    d224:	02400044 	movi	r9,1
    d228:	002d883a 	mov	r22,zero
    d22c:	003f9106 	br	d074 <__gethex+0xe0>
    d230:	0015883a 	mov	r10,zero
    d234:	21000044 	addi	r4,r4,1
    d238:	20c00003 	ldbu	r3,0(r4)
    d23c:	003fb506 	br	d114 <__gethex+0x180>
    d240:	02800044 	movi	r10,1
    d244:	003ffb06 	br	d234 <__gethex+0x2a0>
    d248:	2821883a 	mov	r16,r5
    d24c:	002d883a 	mov	r22,zero
    d250:	003f8806 	br	d074 <__gethex+0xe0>
    d254:	00800c04 	movi	r2,48
    d258:	20800e1e 	bne	r4,r2,d294 <__gethex+0x300>
    d25c:	2007883a 	mov	r3,r4
    d260:	800b883a 	mov	r5,r16
    d264:	29400044 	addi	r5,r5,1
    d268:	29000003 	ldbu	r4,0(r5)
    d26c:	20803fcc 	andi	r2,r4,255
    d270:	10fffc26 	beq	r2,r3,d264 <__gethex+0x2d0>
    d274:	1445883a 	add	r2,r2,r17
    d278:	10c00003 	ldbu	r3,0(r2)
    d27c:	1800071e 	bne	r3,zero,d29c <__gethex+0x308>
    d280:	02c00044 	movi	r11,1
    d284:	800d883a 	mov	r6,r16
    d288:	2825883a 	mov	r18,r5
    d28c:	5813883a 	mov	r9,r11
    d290:	003f6706 	br	d030 <__gethex+0x9c>
    d294:	81000003 	ldbu	r4,0(r16)
    d298:	800b883a 	mov	r5,r16
    d29c:	800d883a 	mov	r6,r16
    d2a0:	2825883a 	mov	r18,r5
    d2a4:	02c00044 	movi	r11,1
    d2a8:	0013883a 	mov	r9,zero
    d2ac:	003f6006 	br	d030 <__gethex+0x9c>
    d2b0:	8485c83a 	sub	r2,r16,r18
    d2b4:	10bfffc4 	addi	r2,r2,-1
    d2b8:	00c001c4 	movi	r3,7
    d2bc:	1880700e 	bge	r3,r2,d480 <__gethex+0x4ec>
    d2c0:	000b883a 	mov	r5,zero
    d2c4:	1005d07a 	srai	r2,r2,1
    d2c8:	29400044 	addi	r5,r5,1
    d2cc:	18bffd16 	blt	r3,r2,d2c4 <__gethex+0x330>
    d2d0:	a809883a 	mov	r4,r21
    d2d4:	00096380 	call	9638 <_Balloc>
    d2d8:	1027883a 	mov	r19,r2
    d2dc:	10800504 	addi	r2,r2,20
    d2e0:	d8800215 	stw	r2,8(sp)
    d2e4:	9400522e 	bgeu	r18,r16,d430 <__gethex+0x49c>
    d2e8:	da000217 	ldw	r8,8(sp)
    d2ec:	800b883a 	mov	r5,r16
    d2f0:	000f883a 	mov	r7,zero
    d2f4:	0009883a 	mov	r4,zero
    d2f8:	02400b84 	movi	r9,46
    d2fc:	02800804 	movi	r10,32
    d300:	297fffc4 	addi	r5,r5,-1
    d304:	28c00003 	ldbu	r3,0(r5)
    d308:	1a400826 	beq	r3,r9,d32c <__gethex+0x398>
    d30c:	380d883a 	mov	r6,r7
    d310:	3a802726 	beq	r7,r10,d3b0 <__gethex+0x41c>
    d314:	39c00104 	addi	r7,r7,4
    d318:	1c47883a 	add	r3,r3,r17
    d31c:	18800003 	ldbu	r2,0(r3)
    d320:	108003cc 	andi	r2,r2,15
    d324:	1184983a 	sll	r2,r2,r6
    d328:	2088b03a 	or	r4,r4,r2
    d32c:	917ff436 	bltu	r18,r5,d300 <__gethex+0x36c>
    d330:	d8c00217 	ldw	r3,8(sp)
    d334:	40800104 	addi	r2,r8,4
    d338:	41000015 	stw	r4,0(r8)
    d33c:	10c5c83a 	sub	r2,r2,r3
    d340:	1021d0ba 	srai	r16,r2,2
    d344:	9c000415 	stw	r16,16(r19)
    d348:	00090e00 	call	90e0 <__hi0bits>
    d34c:	8006917a 	slli	r3,r16,5
    d350:	a5c00017 	ldw	r23,0(r20)
    d354:	1885c83a 	sub	r2,r3,r2
    d358:	b8801c16 	blt	r23,r2,d3cc <__gethex+0x438>
    d35c:	15c00a16 	blt	r2,r23,d388 <__gethex+0x3f4>
    d360:	0039883a 	mov	fp,zero
    d364:	a0800217 	ldw	r2,8(r20)
    d368:	1580340e 	bge	r2,r22,d43c <__gethex+0x4a8>
    d36c:	a809883a 	mov	r4,r21
    d370:	980b883a 	mov	r5,r19
    d374:	00090b80 	call	90b8 <_Bfree>
    d378:	d8c00d17 	ldw	r3,52(sp)
    d37c:	048028c4 	movi	r18,163
    d380:	18000015 	stw	zero,0(r3)
    d384:	003f4606 	br	d0a0 <__gethex+0x10c>
    d388:	b8a1c83a 	sub	r16,r23,r2
    d38c:	980b883a 	mov	r5,r19
    d390:	a809883a 	mov	r4,r21
    d394:	800d883a 	mov	r6,r16
    d398:	00099fc0 	call	99fc <__lshift>
    d39c:	1027883a 	mov	r19,r2
    d3a0:	b42dc83a 	sub	r22,r22,r16
    d3a4:	10800504 	addi	r2,r2,20
    d3a8:	d8800215 	stw	r2,8(sp)
    d3ac:	003fec06 	br	d360 <__gethex+0x3cc>
    d3b0:	41000015 	stw	r4,0(r8)
    d3b4:	28c00003 	ldbu	r3,0(r5)
    d3b8:	01c00104 	movi	r7,4
    d3bc:	000d883a 	mov	r6,zero
    d3c0:	41d1883a 	add	r8,r8,r7
    d3c4:	0009883a 	mov	r4,zero
    d3c8:	003fd306 	br	d318 <__gethex+0x384>
    d3cc:	15e1c83a 	sub	r16,r2,r23
    d3d0:	9809883a 	mov	r4,r19
    d3d4:	800b883a 	mov	r5,r16
    d3d8:	00095b00 	call	95b0 <__any_on>
    d3dc:	1000061e 	bne	r2,zero,d3f8 <__gethex+0x464>
    d3e0:	0039883a 	mov	fp,zero
    d3e4:	9809883a 	mov	r4,r19
    d3e8:	800b883a 	mov	r5,r16
    d3ec:	000cee40 	call	cee4 <rshift>
    d3f0:	b42d883a 	add	r22,r22,r16
    d3f4:	003fdb06 	br	d364 <__gethex+0x3d0>
    d3f8:	817fffc4 	addi	r5,r16,-1
    d3fc:	2805d17a 	srai	r2,r5,5
    d400:	d8c00217 	ldw	r3,8(sp)
    d404:	290007cc 	andi	r4,r5,31
    d408:	1085883a 	add	r2,r2,r2
    d40c:	1085883a 	add	r2,r2,r2
    d410:	01800044 	movi	r6,1
    d414:	10c5883a 	add	r2,r2,r3
    d418:	3108983a 	sll	r4,r6,r4
    d41c:	10c00017 	ldw	r3,0(r2)
    d420:	20c8703a 	and	r4,r4,r3
    d424:	20001a1e 	bne	r4,zero,d490 <__gethex+0x4fc>
    d428:	3039883a 	mov	fp,r6
    d42c:	003fed06 	br	d3e4 <__gethex+0x450>
    d430:	1011883a 	mov	r8,r2
    d434:	0009883a 	mov	r4,zero
    d438:	003fbd06 	br	d330 <__gethex+0x39c>
    d43c:	a1000117 	ldw	r4,4(r20)
    d440:	b1001a16 	blt	r22,r4,d4ac <__gethex+0x518>
    d444:	04800044 	movi	r18,1
    d448:	e0000826 	beq	fp,zero,d46c <__gethex+0x4d8>
    d44c:	a1000317 	ldw	r4,12(r20)
    d450:	00800084 	movi	r2,2
    d454:	20809426 	beq	r4,r2,d6a8 <__gethex+0x714>
    d458:	008000c4 	movi	r2,3
    d45c:	20805826 	beq	r4,r2,d5c0 <__gethex+0x62c>
    d460:	00800044 	movi	r2,1
    d464:	20803f26 	beq	r4,r2,d564 <__gethex+0x5d0>
    d468:	94800414 	ori	r18,r18,16
    d46c:	d8800d17 	ldw	r2,52(sp)
    d470:	d8c00117 	ldw	r3,4(sp)
    d474:	14c00015 	stw	r19,0(r2)
    d478:	1d800015 	stw	r22,0(r3)
    d47c:	003f0806 	br	d0a0 <__gethex+0x10c>
    d480:	000b883a 	mov	r5,zero
    d484:	003f9206 	br	d2d0 <__gethex+0x33c>
    d488:	002d883a 	mov	r22,zero
    d48c:	003ef806 	br	d070 <__gethex+0xdc>
    d490:	3140160e 	bge	r6,r5,d4ec <__gethex+0x558>
    d494:	9809883a 	mov	r4,r19
    d498:	817fff84 	addi	r5,r16,-2
    d49c:	00095b00 	call	95b0 <__any_on>
    d4a0:	10001226 	beq	r2,zero,d4ec <__gethex+0x558>
    d4a4:	070000c4 	movi	fp,3
    d4a8:	003fce06 	br	d3e4 <__gethex+0x450>
    d4ac:	25a3c83a 	sub	r17,r4,r22
    d4b0:	8dc01016 	blt	r17,r23,d4f4 <__gethex+0x560>
    d4b4:	a0c00317 	ldw	r3,12(r20)
    d4b8:	00800084 	movi	r2,2
    d4bc:	18809326 	beq	r3,r2,d70c <__gethex+0x778>
    d4c0:	008000c4 	movi	r2,3
    d4c4:	18808e26 	beq	r3,r2,d700 <__gethex+0x76c>
    d4c8:	00800044 	movi	r2,1
    d4cc:	18807b26 	beq	r3,r2,d6bc <__gethex+0x728>
    d4d0:	a809883a 	mov	r4,r21
    d4d4:	980b883a 	mov	r5,r19
    d4d8:	00090b80 	call	90b8 <_Bfree>
    d4dc:	d8c00d17 	ldw	r3,52(sp)
    d4e0:	04801404 	movi	r18,80
    d4e4:	18000015 	stw	zero,0(r3)
    d4e8:	003eed06 	br	d0a0 <__gethex+0x10c>
    d4ec:	07000084 	movi	fp,2
    d4f0:	003fbc06 	br	d3e4 <__gethex+0x450>
    d4f4:	8c3fffc4 	addi	r16,r17,-1
    d4f8:	e0001426 	beq	fp,zero,d54c <__gethex+0x5b8>
    d4fc:	07000044 	movi	fp,1
    d500:	8005d17a 	srai	r2,r16,5
    d504:	d8c00217 	ldw	r3,8(sp)
    d508:	814007cc 	andi	r5,r16,31
    d50c:	1085883a 	add	r2,r2,r2
    d510:	1085883a 	add	r2,r2,r2
    d514:	10c5883a 	add	r2,r2,r3
    d518:	00c00044 	movi	r3,1
    d51c:	1946983a 	sll	r3,r3,r5
    d520:	11000017 	ldw	r4,0(r2)
    d524:	1906703a 	and	r3,r3,r4
    d528:	18000126 	beq	r3,zero,d530 <__gethex+0x59c>
    d52c:	e7000094 	ori	fp,fp,2
    d530:	880b883a 	mov	r5,r17
    d534:	9809883a 	mov	r4,r19
    d538:	000cee40 	call	cee4 <rshift>
    d53c:	a5800117 	ldw	r22,4(r20)
    d540:	bc6fc83a 	sub	r23,r23,r17
    d544:	04800084 	movi	r18,2
    d548:	003fbf06 	br	d448 <__gethex+0x4b4>
    d54c:	043fec0e 	bge	zero,r16,d500 <__gethex+0x56c>
    d550:	9809883a 	mov	r4,r19
    d554:	800b883a 	mov	r5,r16
    d558:	00095b00 	call	95b0 <__any_on>
    d55c:	1039883a 	mov	fp,r2
    d560:	003fe706 	br	d500 <__gethex+0x56c>
    d564:	e080008c 	andi	r2,fp,2
    d568:	103fbf26 	beq	r2,zero,d468 <__gethex+0x4d4>
    d56c:	d8c00217 	ldw	r3,8(sp)
    d570:	18800017 	ldw	r2,0(r3)
    d574:	e084b03a 	or	r2,fp,r2
    d578:	1104703a 	and	r2,r2,r4
    d57c:	103fba26 	beq	r2,zero,d468 <__gethex+0x4d4>
    d580:	9c000417 	ldw	r16,16(r19)
    d584:	d8c00217 	ldw	r3,8(sp)
    d588:	017fffc4 	movi	r5,-1
    d58c:	8405883a 	add	r2,r16,r16
    d590:	10b9883a 	add	fp,r2,r2
    d594:	1f09883a 	add	r4,r3,fp
    d598:	dc000015 	stw	r16,0(sp)
    d59c:	00000306 	br	d5ac <__gethex+0x618>
    d5a0:	18000015 	stw	zero,0(r3)
    d5a4:	18c00104 	addi	r3,r3,4
    d5a8:	1900082e 	bgeu	r3,r4,d5cc <__gethex+0x638>
    d5ac:	18800017 	ldw	r2,0(r3)
    d5b0:	117ffb26 	beq	r2,r5,d5a0 <__gethex+0x60c>
    d5b4:	10800044 	addi	r2,r2,1
    d5b8:	18800015 	stw	r2,0(r3)
    d5bc:	00001f06 	br	d63c <__gethex+0x6a8>
    d5c0:	d8800e17 	ldw	r2,56(sp)
    d5c4:	103fa826 	beq	r2,zero,d468 <__gethex+0x4d4>
    d5c8:	003fed06 	br	d580 <__gethex+0x5ec>
    d5cc:	98800217 	ldw	r2,8(r19)
    d5d0:	80801316 	blt	r16,r2,d620 <__gethex+0x68c>
    d5d4:	99400117 	ldw	r5,4(r19)
    d5d8:	a809883a 	mov	r4,r21
    d5dc:	29400044 	addi	r5,r5,1
    d5e0:	00096380 	call	9638 <_Balloc>
    d5e4:	99800417 	ldw	r6,16(r19)
    d5e8:	99400304 	addi	r5,r19,12
    d5ec:	11000304 	addi	r4,r2,12
    d5f0:	318d883a 	add	r6,r6,r6
    d5f4:	318d883a 	add	r6,r6,r6
    d5f8:	31800204 	addi	r6,r6,8
    d5fc:	1023883a 	mov	r17,r2
    d600:	0002f540 	call	2f54 <memcpy>
    d604:	980b883a 	mov	r5,r19
    d608:	a809883a 	mov	r4,r21
    d60c:	00090b80 	call	90b8 <_Bfree>
    d610:	8c000417 	ldw	r16,16(r17)
    d614:	88800504 	addi	r2,r17,20
    d618:	8827883a 	mov	r19,r17
    d61c:	d8800215 	stw	r2,8(sp)
    d620:	8405883a 	add	r2,r16,r16
    d624:	1085883a 	add	r2,r2,r2
    d628:	14c5883a 	add	r2,r2,r19
    d62c:	84000044 	addi	r16,r16,1
    d630:	00c00044 	movi	r3,1
    d634:	10c00515 	stw	r3,20(r2)
    d638:	9c000415 	stw	r16,16(r19)
    d63c:	00800084 	movi	r2,2
    d640:	90801426 	beq	r18,r2,d694 <__gethex+0x700>
    d644:	d8800017 	ldw	r2,0(sp)
    d648:	14000b16 	blt	r2,r16,d678 <__gethex+0x6e4>
    d64c:	bc0007cc 	andi	r16,r23,31
    d650:	8000021e 	bne	r16,zero,d65c <__gethex+0x6c8>
    d654:	94800814 	ori	r18,r18,32
    d658:	003f8406 	br	d46c <__gethex+0x4d8>
    d65c:	d8c00217 	ldw	r3,8(sp)
    d660:	1f05883a 	add	r2,r3,fp
    d664:	113fff17 	ldw	r4,-4(r2)
    d668:	00090e00 	call	90e0 <__hi0bits>
    d66c:	00c00804 	movi	r3,32
    d670:	1c07c83a 	sub	r3,r3,r16
    d674:	10fff70e 	bge	r2,r3,d654 <__gethex+0x6c0>
    d678:	9809883a 	mov	r4,r19
    d67c:	01400044 	movi	r5,1
    d680:	000cee40 	call	cee4 <rshift>
    d684:	a0800217 	ldw	r2,8(r20)
    d688:	b5800044 	addi	r22,r22,1
    d68c:	15bf3716 	blt	r2,r22,d36c <__gethex+0x3d8>
    d690:	003ff006 	br	d654 <__gethex+0x6c0>
    d694:	a0800017 	ldw	r2,0(r20)
    d698:	10bfffc4 	addi	r2,r2,-1
    d69c:	b8801e26 	beq	r23,r2,d718 <__gethex+0x784>
    d6a0:	04800884 	movi	r18,34
    d6a4:	003f7106 	br	d46c <__gethex+0x4d8>
    d6a8:	d8c00e17 	ldw	r3,56(sp)
    d6ac:	00800044 	movi	r2,1
    d6b0:	10c5c83a 	sub	r2,r2,r3
    d6b4:	103f6c26 	beq	r2,zero,d468 <__gethex+0x4d4>
    d6b8:	003fb106 	br	d580 <__gethex+0x5ec>
    d6bc:	bc7f841e 	bne	r23,r17,d4d0 <__gethex+0x53c>
    d6c0:	1dc0050e 	bge	r3,r23,d6d8 <__gethex+0x744>
    d6c4:	b8cbc83a 	sub	r5,r23,r3
    d6c8:	9809883a 	mov	r4,r19
    d6cc:	00095b00 	call	95b0 <__any_on>
    d6d0:	103f7f26 	beq	r2,zero,d4d0 <__gethex+0x53c>
    d6d4:	a1000117 	ldw	r4,4(r20)
    d6d8:	d8800117 	ldw	r2,4(sp)
    d6dc:	d8c00217 	ldw	r3,8(sp)
    d6e0:	04000044 	movi	r16,1
    d6e4:	11000015 	stw	r4,0(r2)
    d6e8:	d8800d17 	ldw	r2,52(sp)
    d6ec:	04801884 	movi	r18,98
    d6f0:	1c000015 	stw	r16,0(r3)
    d6f4:	14c00015 	stw	r19,0(r2)
    d6f8:	9c000415 	stw	r16,16(r19)
    d6fc:	003e6806 	br	d0a0 <__gethex+0x10c>
    d700:	d8c00e17 	ldw	r3,56(sp)
    d704:	183f7226 	beq	r3,zero,d4d0 <__gethex+0x53c>
    d708:	003ff306 	br	d6d8 <__gethex+0x744>
    d70c:	d8800e17 	ldw	r2,56(sp)
    d710:	103ff126 	beq	r2,zero,d6d8 <__gethex+0x744>
    d714:	003f6e06 	br	d4d0 <__gethex+0x53c>
    d718:	b805d17a 	srai	r2,r23,5
    d71c:	d8c00217 	ldw	r3,8(sp)
    d720:	b94007cc 	andi	r5,r23,31
    d724:	1085883a 	add	r2,r2,r2
    d728:	1085883a 	add	r2,r2,r2
    d72c:	10c5883a 	add	r2,r2,r3
    d730:	00c00044 	movi	r3,1
    d734:	1946983a 	sll	r3,r3,r5
    d738:	11000017 	ldw	r4,0(r2)
    d73c:	1906703a 	and	r3,r3,r4
    d740:	183fd726 	beq	r3,zero,d6a0 <__gethex+0x70c>
    d744:	04800844 	movi	r18,33
    d748:	003f4806 	br	d46c <__gethex+0x4d8>

0000d74c <L_shift>:
    d74c:	00800204 	movi	r2,8
    d750:	1185c83a 	sub	r2,r2,r6
    d754:	1085883a 	add	r2,r2,r2
    d758:	21c00017 	ldw	r7,0(r4)
    d75c:	1093883a 	add	r9,r2,r2
    d760:	00800804 	movi	r2,32
    d764:	200d883a 	mov	r6,r4
    d768:	1251c83a 	sub	r8,r2,r9
    d76c:	31800104 	addi	r6,r6,4
    d770:	3805883a 	mov	r2,r7
    d774:	31c00017 	ldw	r7,0(r6)
    d778:	3a08983a 	sll	r4,r7,r8
    d77c:	3a46d83a 	srl	r3,r7,r9
    d780:	1104b03a 	or	r2,r2,r4
    d784:	180f883a 	mov	r7,r3
    d788:	30bfff15 	stw	r2,-4(r6)
    d78c:	30c00015 	stw	r3,0(r6)
    d790:	317ff636 	bltu	r6,r5,d76c <L_shift+0x20>
    d794:	f800283a 	ret

0000d798 <__hexnan>:
    d798:	defff404 	addi	sp,sp,-48
    d79c:	dd800815 	stw	r22,32(sp)
    d7a0:	05800074 	movhi	r22,1
    d7a4:	b59f3c04 	addi	r22,r22,31984
    d7a8:	b0800c03 	ldbu	r2,48(r22)
    d7ac:	dcc00515 	stw	r19,20(sp)
    d7b0:	dc000215 	stw	r16,8(sp)
    d7b4:	dfc00b15 	stw	ra,44(sp)
    d7b8:	df000a15 	stw	fp,40(sp)
    d7bc:	ddc00915 	stw	r23,36(sp)
    d7c0:	dd400715 	stw	r21,28(sp)
    d7c4:	dd000615 	stw	r20,24(sp)
    d7c8:	dc800415 	stw	r18,16(sp)
    d7cc:	dc400315 	stw	r17,12(sp)
    d7d0:	d9000115 	stw	r4,4(sp)
    d7d4:	2821883a 	mov	r16,r5
    d7d8:	3027883a 	mov	r19,r6
    d7dc:	10007426 	beq	r2,zero,d9b0 <__hexnan+0x218>
    d7e0:	80c00017 	ldw	r3,0(r16)
    d7e4:	1805d17a 	srai	r2,r3,5
    d7e8:	18c007cc 	andi	r3,r3,31
    d7ec:	1839003a 	cmpeq	fp,r3,zero
    d7f0:	1085883a 	add	r2,r2,r2
    d7f4:	1085883a 	add	r2,r2,r2
    d7f8:	d8c00015 	stw	r3,0(sp)
    d7fc:	14c5883a 	add	r2,r2,r19
    d800:	e000011e 	bne	fp,zero,d808 <__hexnan+0x70>
    d804:	10800104 	addi	r2,r2,4
    d808:	d8c00117 	ldw	r3,4(sp)
    d80c:	153fff04 	addi	r20,r2,-4
    d810:	a021883a 	mov	r16,r20
    d814:	1c400017 	ldw	r17,0(r3)
    d818:	a02b883a 	mov	r21,r20
    d81c:	0025883a 	mov	r18,zero
    d820:	002f883a 	mov	r23,zero
    d824:	000d883a 	mov	r6,zero
    d828:	103fff15 	stw	zero,-4(r2)
    d82c:	8c400044 	addi	r17,r17,1
    d830:	89000003 	ldbu	r4,0(r17)
    d834:	20000e26 	beq	r4,zero,d870 <__hexnan+0xd8>
    d838:	2585883a 	add	r2,r4,r22
    d83c:	10c00003 	ldbu	r3,0(r2)
    d840:	18002e1e 	bne	r3,zero,d8fc <__hexnan+0x164>
    d844:	00800804 	movi	r2,32
    d848:	11005536 	bltu	r2,r4,d9a0 <__hexnan+0x208>
    d84c:	bcbff70e 	bge	r23,r18,d82c <__hexnan+0x94>
    d850:	8540022e 	bgeu	r16,r21,d85c <__hexnan+0xc4>
    d854:	008001c4 	movi	r2,7
    d858:	11803c0e 	bge	r2,r6,d94c <__hexnan+0x1b4>
    d85c:	9c003536 	bltu	r19,r16,d934 <__hexnan+0x19c>
    d860:	8c400044 	addi	r17,r17,1
    d864:	89000003 	ldbu	r4,0(r17)
    d868:	01800204 	movi	r6,8
    d86c:	203ff21e 	bne	r4,zero,d838 <__hexnan+0xa0>
    d870:	90004d26 	beq	r18,zero,d9a8 <__hexnan+0x210>
    d874:	85404336 	bltu	r16,r21,d984 <__hexnan+0x1ec>
    d878:	9c00382e 	bgeu	r19,r16,d95c <__hexnan+0x1c4>
    d87c:	9807883a 	mov	r3,r19
    d880:	80800017 	ldw	r2,0(r16)
    d884:	84000104 	addi	r16,r16,4
    d888:	18800015 	stw	r2,0(r3)
    d88c:	18c00104 	addi	r3,r3,4
    d890:	a43ffb2e 	bgeu	r20,r16,d880 <__hexnan+0xe8>
    d894:	18000015 	stw	zero,0(r3)
    d898:	18c00104 	addi	r3,r3,4
    d89c:	a0fffd2e 	bgeu	r20,r3,d894 <__hexnan+0xfc>
    d8a0:	a0800017 	ldw	r2,0(r20)
    d8a4:	1000071e 	bne	r2,zero,d8c4 <__hexnan+0x12c>
    d8a8:	9d004326 	beq	r19,r20,d9b8 <__hexnan+0x220>
    d8ac:	a007883a 	mov	r3,r20
    d8b0:	00000106 	br	d8b8 <__hexnan+0x120>
    d8b4:	98c04026 	beq	r19,r3,d9b8 <__hexnan+0x220>
    d8b8:	18ffff04 	addi	r3,r3,-4
    d8bc:	18800017 	ldw	r2,0(r3)
    d8c0:	103ffc26 	beq	r2,zero,d8b4 <__hexnan+0x11c>
    d8c4:	00c00144 	movi	r3,5
    d8c8:	1805883a 	mov	r2,r3
    d8cc:	dfc00b17 	ldw	ra,44(sp)
    d8d0:	df000a17 	ldw	fp,40(sp)
    d8d4:	ddc00917 	ldw	r23,36(sp)
    d8d8:	dd800817 	ldw	r22,32(sp)
    d8dc:	dd400717 	ldw	r21,28(sp)
    d8e0:	dd000617 	ldw	r20,24(sp)
    d8e4:	dcc00517 	ldw	r19,20(sp)
    d8e8:	dc800417 	ldw	r18,16(sp)
    d8ec:	dc400317 	ldw	r17,12(sp)
    d8f0:	dc000217 	ldw	r16,8(sp)
    d8f4:	dec00c04 	addi	sp,sp,48
    d8f8:	f800283a 	ret
    d8fc:	31800044 	addi	r6,r6,1
    d900:	00800204 	movi	r2,8
    d904:	94800044 	addi	r18,r18,1
    d908:	1180040e 	bge	r2,r6,d91c <__hexnan+0x184>
    d90c:	9c3fc72e 	bgeu	r19,r16,d82c <__hexnan+0x94>
    d910:	843fff04 	addi	r16,r16,-4
    d914:	80000015 	stw	zero,0(r16)
    d918:	01800044 	movi	r6,1
    d91c:	80800017 	ldw	r2,0(r16)
    d920:	18c003cc 	andi	r3,r3,15
    d924:	1004913a 	slli	r2,r2,4
    d928:	10c4b03a 	or	r2,r2,r3
    d92c:	80800015 	stw	r2,0(r16)
    d930:	003fbe06 	br	d82c <__hexnan+0x94>
    d934:	843fff04 	addi	r16,r16,-4
    d938:	802b883a 	mov	r21,r16
    d93c:	902f883a 	mov	r23,r18
    d940:	000d883a 	mov	r6,zero
    d944:	80000015 	stw	zero,0(r16)
    d948:	003fb806 	br	d82c <__hexnan+0x94>
    d94c:	8009883a 	mov	r4,r16
    d950:	a80b883a 	mov	r5,r21
    d954:	000d74c0 	call	d74c <L_shift>
    d958:	003fc006 	br	d85c <__hexnan+0xc4>
    d95c:	e03fd01e 	bne	fp,zero,d8a0 <__hexnan+0x108>
    d960:	d8c00017 	ldw	r3,0(sp)
    d964:	00800804 	movi	r2,32
    d968:	10c5c83a 	sub	r2,r2,r3
    d96c:	00ffffc4 	movi	r3,-1
    d970:	1886d83a 	srl	r3,r3,r2
    d974:	a0800017 	ldw	r2,0(r20)
    d978:	10c4703a 	and	r2,r2,r3
    d97c:	a0800015 	stw	r2,0(r20)
    d980:	003fc806 	br	d8a4 <__hexnan+0x10c>
    d984:	008001c4 	movi	r2,7
    d988:	11bfbb16 	blt	r2,r6,d878 <__hexnan+0xe0>
    d98c:	a80b883a 	mov	r5,r21
    d990:	8009883a 	mov	r4,r16
    d994:	000d74c0 	call	d74c <L_shift>
    d998:	9c3ff02e 	bgeu	r19,r16,d95c <__hexnan+0x1c4>
    d99c:	003fb706 	br	d87c <__hexnan+0xe4>
    d9a0:	00800a44 	movi	r2,41
    d9a4:	20800826 	beq	r4,r2,d9c8 <__hexnan+0x230>
    d9a8:	00c00104 	movi	r3,4
    d9ac:	003fc606 	br	d8c8 <__hexnan+0x130>
    d9b0:	000ce7c0 	call	ce7c <__hexdig_init>
    d9b4:	003f8a06 	br	d7e0 <__hexnan+0x48>
    d9b8:	00800044 	movi	r2,1
    d9bc:	00c00144 	movi	r3,5
    d9c0:	98800015 	stw	r2,0(r19)
    d9c4:	003fc006 	br	d8c8 <__hexnan+0x130>
    d9c8:	903ff726 	beq	r18,zero,d9a8 <__hexnan+0x210>
    d9cc:	d8c00117 	ldw	r3,4(sp)
    d9d0:	88800044 	addi	r2,r17,1
    d9d4:	18800015 	stw	r2,0(r3)
    d9d8:	857fa72e 	bgeu	r16,r21,d878 <__hexnan+0xe0>
    d9dc:	003fe906 	br	d984 <__hexnan+0x1ec>

0000d9e0 <__muldi3>:
    d9e0:	2011883a 	mov	r8,r4
    d9e4:	427fffcc 	andi	r9,r8,65535
    d9e8:	4018d43a 	srli	r12,r8,16
    d9ec:	32bfffcc 	andi	r10,r6,65535
    d9f0:	3016d43a 	srli	r11,r6,16
    d9f4:	4a85383a 	mul	r2,r9,r10
    d9f8:	6295383a 	mul	r10,r12,r10
    d9fc:	4ad3383a 	mul	r9,r9,r11
    da00:	113fffcc 	andi	r4,r2,65535
    da04:	1004d43a 	srli	r2,r2,16
    da08:	4a93883a 	add	r9,r9,r10
    da0c:	3807883a 	mov	r3,r7
    da10:	1245883a 	add	r2,r2,r9
    da14:	280f883a 	mov	r7,r5
    da18:	180b883a 	mov	r5,r3
    da1c:	1006943a 	slli	r3,r2,16
    da20:	defffd04 	addi	sp,sp,-12
    da24:	dc800215 	stw	r18,8(sp)
    da28:	1907883a 	add	r3,r3,r4
    da2c:	dc400115 	stw	r17,4(sp)
    da30:	dc000015 	stw	r16,0(sp)
    da34:	4165383a 	mul	r18,r8,r5
    da38:	31e3383a 	mul	r17,r6,r7
    da3c:	1012d43a 	srli	r9,r2,16
    da40:	62d9383a 	mul	r12,r12,r11
    da44:	181f883a 	mov	r15,r3
    da48:	1280022e 	bgeu	r2,r10,da54 <__muldi3+0x74>
    da4c:	00800074 	movhi	r2,1
    da50:	6099883a 	add	r12,r12,r2
    da54:	624d883a 	add	r6,r12,r9
    da58:	9187883a 	add	r3,r18,r6
    da5c:	88c7883a 	add	r3,r17,r3
    da60:	7805883a 	mov	r2,r15
    da64:	dc800217 	ldw	r18,8(sp)
    da68:	dc400117 	ldw	r17,4(sp)
    da6c:	dc000017 	ldw	r16,0(sp)
    da70:	dec00304 	addi	sp,sp,12
    da74:	f800283a 	ret

0000da78 <__fixunsdfsi>:
    da78:	defffb04 	addi	sp,sp,-20
    da7c:	dc400115 	stw	r17,4(sp)
    da80:	dc000015 	stw	r16,0(sp)
    da84:	04507834 	movhi	r17,16864
    da88:	0021883a 	mov	r16,zero
    da8c:	800d883a 	mov	r6,r16
    da90:	880f883a 	mov	r7,r17
    da94:	dcc00315 	stw	r19,12(sp)
    da98:	dc800215 	stw	r18,8(sp)
    da9c:	2827883a 	mov	r19,r5
    daa0:	2025883a 	mov	r18,r4
    daa4:	dfc00415 	stw	ra,16(sp)
    daa8:	000f4c80 	call	f4c8 <__gedf2>
    daac:	000d883a 	mov	r6,zero
    dab0:	880f883a 	mov	r7,r17
    dab4:	980b883a 	mov	r5,r19
    dab8:	9009883a 	mov	r4,r18
    dabc:	10000d16 	blt	r2,zero,daf4 <__fixunsdfsi+0x7c>
    dac0:	000ec200 	call	ec20 <__subdf3>
    dac4:	180b883a 	mov	r5,r3
    dac8:	1009883a 	mov	r4,r2
    dacc:	000f7580 	call	f758 <__fixdfsi>
    dad0:	00e00034 	movhi	r3,32768
    dad4:	10c5883a 	add	r2,r2,r3
    dad8:	dfc00417 	ldw	ra,16(sp)
    dadc:	dcc00317 	ldw	r19,12(sp)
    dae0:	dc800217 	ldw	r18,8(sp)
    dae4:	dc400117 	ldw	r17,4(sp)
    dae8:	dc000017 	ldw	r16,0(sp)
    daec:	dec00504 	addi	sp,sp,20
    daf0:	f800283a 	ret
    daf4:	980b883a 	mov	r5,r19
    daf8:	9009883a 	mov	r4,r18
    dafc:	000f7580 	call	f758 <__fixdfsi>
    db00:	dfc00417 	ldw	ra,16(sp)
    db04:	dcc00317 	ldw	r19,12(sp)
    db08:	dc800217 	ldw	r18,8(sp)
    db0c:	dc400117 	ldw	r17,4(sp)
    db10:	dc000017 	ldw	r16,0(sp)
    db14:	dec00504 	addi	sp,sp,20
    db18:	f800283a 	ret

0000db1c <__udivdi3>:
    db1c:	defff004 	addi	sp,sp,-64
    db20:	2005883a 	mov	r2,r4
    db24:	3011883a 	mov	r8,r6
    db28:	df000e15 	stw	fp,56(sp)
    db2c:	dd000a15 	stw	r20,40(sp)
    db30:	dc000615 	stw	r16,24(sp)
    db34:	dfc00f15 	stw	ra,60(sp)
    db38:	ddc00d15 	stw	r23,52(sp)
    db3c:	dd800c15 	stw	r22,48(sp)
    db40:	dd400b15 	stw	r21,44(sp)
    db44:	dcc00915 	stw	r19,36(sp)
    db48:	dc800815 	stw	r18,32(sp)
    db4c:	dc400715 	stw	r17,28(sp)
    db50:	4021883a 	mov	r16,r8
    db54:	1039883a 	mov	fp,r2
    db58:	2829883a 	mov	r20,r5
    db5c:	38003b1e 	bne	r7,zero,dc4c <__udivdi3+0x130>
    db60:	2a005c36 	bltu	r5,r8,dcd4 <__udivdi3+0x1b8>
    db64:	4000a626 	beq	r8,zero,de00 <__udivdi3+0x2e4>
    db68:	00bfffd4 	movui	r2,65535
    db6c:	14009e36 	bltu	r2,r16,dde8 <__udivdi3+0x2cc>
    db70:	00803fc4 	movi	r2,255
    db74:	14013d36 	bltu	r2,r16,e06c <__udivdi3+0x550>
    db78:	000b883a 	mov	r5,zero
    db7c:	0005883a 	mov	r2,zero
    db80:	8084d83a 	srl	r2,r16,r2
    db84:	01000074 	movhi	r4,1
    db88:	21101604 	addi	r4,r4,16472
    db8c:	01800804 	movi	r6,32
    db90:	1105883a 	add	r2,r2,r4
    db94:	10c00003 	ldbu	r3,0(r2)
    db98:	28c7883a 	add	r3,r5,r3
    db9c:	30edc83a 	sub	r22,r6,r3
    dba0:	b000ee1e 	bne	r22,zero,df5c <__udivdi3+0x440>
    dba4:	802ad43a 	srli	r21,r16,16
    dba8:	00800044 	movi	r2,1
    dbac:	a423c83a 	sub	r17,r20,r16
    dbb0:	85ffffcc 	andi	r23,r16,65535
    dbb4:	d8800315 	stw	r2,12(sp)
    dbb8:	8809883a 	mov	r4,r17
    dbbc:	a80b883a 	mov	r5,r21
    dbc0:	000fb740 	call	fb74 <__udivsi3>
    dbc4:	8809883a 	mov	r4,r17
    dbc8:	a80b883a 	mov	r5,r21
    dbcc:	102d883a 	mov	r22,r2
    dbd0:	000fb7c0 	call	fb7c <__umodsi3>
    dbd4:	1004943a 	slli	r2,r2,16
    dbd8:	e006d43a 	srli	r3,fp,16
    dbdc:	bda3383a 	mul	r17,r23,r22
    dbe0:	10c4b03a 	or	r2,r2,r3
    dbe4:	1440042e 	bgeu	r2,r17,dbf8 <__udivdi3+0xdc>
    dbe8:	1405883a 	add	r2,r2,r16
    dbec:	b5bfffc4 	addi	r22,r22,-1
    dbf0:	14000136 	bltu	r2,r16,dbf8 <__udivdi3+0xdc>
    dbf4:	14413d36 	bltu	r2,r17,e0ec <__udivdi3+0x5d0>
    dbf8:	1463c83a 	sub	r17,r2,r17
    dbfc:	8809883a 	mov	r4,r17
    dc00:	a80b883a 	mov	r5,r21
    dc04:	000fb740 	call	fb74 <__udivsi3>
    dc08:	8809883a 	mov	r4,r17
    dc0c:	a80b883a 	mov	r5,r21
    dc10:	1029883a 	mov	r20,r2
    dc14:	000fb7c0 	call	fb7c <__umodsi3>
    dc18:	1004943a 	slli	r2,r2,16
    dc1c:	bd09383a 	mul	r4,r23,r20
    dc20:	e0ffffcc 	andi	r3,fp,65535
    dc24:	10c4b03a 	or	r2,r2,r3
    dc28:	1100042e 	bgeu	r2,r4,dc3c <__udivdi3+0x120>
    dc2c:	8085883a 	add	r2,r16,r2
    dc30:	a53fffc4 	addi	r20,r20,-1
    dc34:	14000136 	bltu	r2,r16,dc3c <__udivdi3+0x120>
    dc38:	11012036 	bltu	r2,r4,e0bc <__udivdi3+0x5a0>
    dc3c:	b004943a 	slli	r2,r22,16
    dc40:	d9000317 	ldw	r4,12(sp)
    dc44:	a084b03a 	or	r2,r20,r2
    dc48:	00001506 	br	dca0 <__udivdi3+0x184>
    dc4c:	380d883a 	mov	r6,r7
    dc50:	29c06236 	bltu	r5,r7,dddc <__udivdi3+0x2c0>
    dc54:	00bfffd4 	movui	r2,65535
    dc58:	11c05a36 	bltu	r2,r7,ddc4 <__udivdi3+0x2a8>
    dc5c:	00803fc4 	movi	r2,255
    dc60:	11c0fc36 	bltu	r2,r7,e054 <__udivdi3+0x538>
    dc64:	000b883a 	mov	r5,zero
    dc68:	0005883a 	mov	r2,zero
    dc6c:	3084d83a 	srl	r2,r6,r2
    dc70:	01000074 	movhi	r4,1
    dc74:	21101604 	addi	r4,r4,16472
    dc78:	01c00804 	movi	r7,32
    dc7c:	1105883a 	add	r2,r2,r4
    dc80:	10c00003 	ldbu	r3,0(r2)
    dc84:	28c7883a 	add	r3,r5,r3
    dc88:	38efc83a 	sub	r23,r7,r3
    dc8c:	b800691e 	bne	r23,zero,de34 <__udivdi3+0x318>
    dc90:	35000136 	bltu	r6,r20,dc98 <__udivdi3+0x17c>
    dc94:	e4005136 	bltu	fp,r16,dddc <__udivdi3+0x2c0>
    dc98:	00800044 	movi	r2,1
    dc9c:	0009883a 	mov	r4,zero
    dca0:	2007883a 	mov	r3,r4
    dca4:	dfc00f17 	ldw	ra,60(sp)
    dca8:	df000e17 	ldw	fp,56(sp)
    dcac:	ddc00d17 	ldw	r23,52(sp)
    dcb0:	dd800c17 	ldw	r22,48(sp)
    dcb4:	dd400b17 	ldw	r21,44(sp)
    dcb8:	dd000a17 	ldw	r20,40(sp)
    dcbc:	dcc00917 	ldw	r19,36(sp)
    dcc0:	dc800817 	ldw	r18,32(sp)
    dcc4:	dc400717 	ldw	r17,28(sp)
    dcc8:	dc000617 	ldw	r16,24(sp)
    dccc:	dec01004 	addi	sp,sp,64
    dcd0:	f800283a 	ret
    dcd4:	00bfffd4 	movui	r2,65535
    dcd8:	12005036 	bltu	r2,r8,de1c <__udivdi3+0x300>
    dcdc:	00803fc4 	movi	r2,255
    dce0:	1200e836 	bltu	r2,r8,e084 <__udivdi3+0x568>
    dce4:	000b883a 	mov	r5,zero
    dce8:	0005883a 	mov	r2,zero
    dcec:	8084d83a 	srl	r2,r16,r2
    dcf0:	01000074 	movhi	r4,1
    dcf4:	21101604 	addi	r4,r4,16472
    dcf8:	01800804 	movi	r6,32
    dcfc:	1105883a 	add	r2,r2,r4
    dd00:	10c00003 	ldbu	r3,0(r2)
    dd04:	28c7883a 	add	r3,r5,r3
    dd08:	30cbc83a 	sub	r5,r6,r3
    dd0c:	28000626 	beq	r5,zero,dd28 <__udivdi3+0x20c>
    dd10:	3145c83a 	sub	r2,r6,r5
    dd14:	e084d83a 	srl	r2,fp,r2
    dd18:	a146983a 	sll	r3,r20,r5
    dd1c:	e178983a 	sll	fp,fp,r5
    dd20:	8160983a 	sll	r16,r16,r5
    dd24:	18a8b03a 	or	r20,r3,r2
    dd28:	802ad43a 	srli	r21,r16,16
    dd2c:	a009883a 	mov	r4,r20
    dd30:	85ffffcc 	andi	r23,r16,65535
    dd34:	a80b883a 	mov	r5,r21
    dd38:	000fb740 	call	fb74 <__udivsi3>
    dd3c:	a009883a 	mov	r4,r20
    dd40:	a80b883a 	mov	r5,r21
    dd44:	102d883a 	mov	r22,r2
    dd48:	000fb7c0 	call	fb7c <__umodsi3>
    dd4c:	1004943a 	slli	r2,r2,16
    dd50:	e006d43a 	srli	r3,fp,16
    dd54:	bda3383a 	mul	r17,r23,r22
    dd58:	10c4b03a 	or	r2,r2,r3
    dd5c:	1440042e 	bgeu	r2,r17,dd70 <__udivdi3+0x254>
    dd60:	1405883a 	add	r2,r2,r16
    dd64:	b5bfffc4 	addi	r22,r22,-1
    dd68:	14000136 	bltu	r2,r16,dd70 <__udivdi3+0x254>
    dd6c:	1440d536 	bltu	r2,r17,e0c4 <__udivdi3+0x5a8>
    dd70:	1463c83a 	sub	r17,r2,r17
    dd74:	8809883a 	mov	r4,r17
    dd78:	a80b883a 	mov	r5,r21
    dd7c:	000fb740 	call	fb74 <__udivsi3>
    dd80:	8809883a 	mov	r4,r17
    dd84:	a80b883a 	mov	r5,r21
    dd88:	1029883a 	mov	r20,r2
    dd8c:	000fb7c0 	call	fb7c <__umodsi3>
    dd90:	1004943a 	slli	r2,r2,16
    dd94:	bd09383a 	mul	r4,r23,r20
    dd98:	e0ffffcc 	andi	r3,fp,65535
    dd9c:	10c4b03a 	or	r2,r2,r3
    dda0:	1100042e 	bgeu	r2,r4,ddb4 <__udivdi3+0x298>
    dda4:	8085883a 	add	r2,r16,r2
    dda8:	a53fffc4 	addi	r20,r20,-1
    ddac:	14000136 	bltu	r2,r16,ddb4 <__udivdi3+0x298>
    ddb0:	1100c736 	bltu	r2,r4,e0d0 <__udivdi3+0x5b4>
    ddb4:	b004943a 	slli	r2,r22,16
    ddb8:	0009883a 	mov	r4,zero
    ddbc:	a084b03a 	or	r2,r20,r2
    ddc0:	003fb706 	br	dca0 <__udivdi3+0x184>
    ddc4:	00804034 	movhi	r2,256
    ddc8:	10bfffc4 	addi	r2,r2,-1
    ddcc:	11c0a436 	bltu	r2,r7,e060 <__udivdi3+0x544>
    ddd0:	01400404 	movi	r5,16
    ddd4:	2805883a 	mov	r2,r5
    ddd8:	003fa406 	br	dc6c <__udivdi3+0x150>
    dddc:	0005883a 	mov	r2,zero
    dde0:	0009883a 	mov	r4,zero
    dde4:	003fae06 	br	dca0 <__udivdi3+0x184>
    dde8:	00804034 	movhi	r2,256
    ddec:	10bfffc4 	addi	r2,r2,-1
    ddf0:	1400a136 	bltu	r2,r16,e078 <__udivdi3+0x55c>
    ddf4:	01400404 	movi	r5,16
    ddf8:	2805883a 	mov	r2,r5
    ddfc:	003f6006 	br	db80 <__udivdi3+0x64>
    de00:	01000044 	movi	r4,1
    de04:	000b883a 	mov	r5,zero
    de08:	000fb740 	call	fb74 <__udivsi3>
    de0c:	1021883a 	mov	r16,r2
    de10:	00bfffd4 	movui	r2,65535
    de14:	143ff436 	bltu	r2,r16,dde8 <__udivdi3+0x2cc>
    de18:	003f5506 	br	db70 <__udivdi3+0x54>
    de1c:	00804034 	movhi	r2,256
    de20:	10bfffc4 	addi	r2,r2,-1
    de24:	12009a36 	bltu	r2,r8,e090 <__udivdi3+0x574>
    de28:	01400404 	movi	r5,16
    de2c:	2805883a 	mov	r2,r5
    de30:	003fae06 	br	dcec <__udivdi3+0x1d0>
    de34:	3dc5c83a 	sub	r2,r7,r23
    de38:	35c8983a 	sll	r4,r6,r23
    de3c:	8086d83a 	srl	r3,r16,r2
    de40:	a0a2d83a 	srl	r17,r20,r2
    de44:	e084d83a 	srl	r2,fp,r2
    de48:	20eab03a 	or	r21,r4,r3
    de4c:	a82cd43a 	srli	r22,r21,16
    de50:	a5c6983a 	sll	r3,r20,r23
    de54:	8809883a 	mov	r4,r17
    de58:	b00b883a 	mov	r5,r22
    de5c:	1886b03a 	or	r3,r3,r2
    de60:	d8c00215 	stw	r3,8(sp)
    de64:	000fb740 	call	fb74 <__udivsi3>
    de68:	8809883a 	mov	r4,r17
    de6c:	b00b883a 	mov	r5,r22
    de70:	1029883a 	mov	r20,r2
    de74:	000fb7c0 	call	fb7c <__umodsi3>
    de78:	a8ffffcc 	andi	r3,r21,65535
    de7c:	d8c00515 	stw	r3,20(sp)
    de80:	d9000217 	ldw	r4,8(sp)
    de84:	d9400517 	ldw	r5,20(sp)
    de88:	1004943a 	slli	r2,r2,16
    de8c:	2006d43a 	srli	r3,r4,16
    de90:	85e0983a 	sll	r16,r16,r23
    de94:	2d23383a 	mul	r17,r5,r20
    de98:	10c4b03a 	or	r2,r2,r3
    de9c:	dc000015 	stw	r16,0(sp)
    dea0:	1440032e 	bgeu	r2,r17,deb0 <__udivdi3+0x394>
    dea4:	1545883a 	add	r2,r2,r21
    dea8:	a53fffc4 	addi	r20,r20,-1
    deac:	15407f2e 	bgeu	r2,r21,e0ac <__udivdi3+0x590>
    deb0:	1463c83a 	sub	r17,r2,r17
    deb4:	8809883a 	mov	r4,r17
    deb8:	b00b883a 	mov	r5,r22
    debc:	000fb740 	call	fb74 <__udivsi3>
    dec0:	8809883a 	mov	r4,r17
    dec4:	b00b883a 	mov	r5,r22
    dec8:	1021883a 	mov	r16,r2
    decc:	000fb7c0 	call	fb7c <__umodsi3>
    ded0:	d8c00517 	ldw	r3,20(sp)
    ded4:	d9000217 	ldw	r4,8(sp)
    ded8:	1004943a 	slli	r2,r2,16
    dedc:	1c0f383a 	mul	r7,r3,r16
    dee0:	20ffffcc 	andi	r3,r4,65535
    dee4:	10e2b03a 	or	r17,r2,r3
    dee8:	89c0032e 	bgeu	r17,r7,def8 <__udivdi3+0x3dc>
    deec:	8d63883a 	add	r17,r17,r21
    def0:	843fffc4 	addi	r16,r16,-1
    def4:	8d40692e 	bgeu	r17,r21,e09c <__udivdi3+0x580>
    def8:	a008943a 	slli	r4,r20,16
    defc:	d9400017 	ldw	r5,0(sp)
    df00:	89e3c83a 	sub	r17,r17,r7
    df04:	8110b03a 	or	r8,r16,r4
    df08:	280cd43a 	srli	r6,r5,16
    df0c:	28ffffcc 	andi	r3,r5,65535
    df10:	40bfffcc 	andi	r2,r8,65535
    df14:	400ad43a 	srli	r5,r8,16
    df18:	10d3383a 	mul	r9,r2,r3
    df1c:	1185383a 	mul	r2,r2,r6
    df20:	28c7383a 	mul	r3,r5,r3
    df24:	4808d43a 	srli	r4,r9,16
    df28:	298b383a 	mul	r5,r5,r6
    df2c:	10c5883a 	add	r2,r2,r3
    df30:	2089883a 	add	r4,r4,r2
    df34:	20c0022e 	bgeu	r4,r3,df40 <__udivdi3+0x424>
    df38:	00800074 	movhi	r2,1
    df3c:	288b883a 	add	r5,r5,r2
    df40:	2004d43a 	srli	r2,r4,16
    df44:	288b883a 	add	r5,r5,r2
    df48:	89403f36 	bltu	r17,r5,e048 <__udivdi3+0x52c>
    df4c:	89403926 	beq	r17,r5,e034 <__udivdi3+0x518>
    df50:	4005883a 	mov	r2,r8
    df54:	0009883a 	mov	r4,zero
    df58:	003f5106 	br	dca0 <__udivdi3+0x184>
    df5c:	85a0983a 	sll	r16,r16,r22
    df60:	3585c83a 	sub	r2,r6,r22
    df64:	a0a2d83a 	srl	r17,r20,r2
    df68:	802ad43a 	srli	r21,r16,16
    df6c:	e084d83a 	srl	r2,fp,r2
    df70:	a586983a 	sll	r3,r20,r22
    df74:	8809883a 	mov	r4,r17
    df78:	a80b883a 	mov	r5,r21
    df7c:	1886b03a 	or	r3,r3,r2
    df80:	d8c00115 	stw	r3,4(sp)
    df84:	000fb740 	call	fb74 <__udivsi3>
    df88:	8809883a 	mov	r4,r17
    df8c:	a80b883a 	mov	r5,r21
    df90:	d8800415 	stw	r2,16(sp)
    df94:	000fb7c0 	call	fb7c <__umodsi3>
    df98:	d9000117 	ldw	r4,4(sp)
    df9c:	d9400417 	ldw	r5,16(sp)
    dfa0:	1004943a 	slli	r2,r2,16
    dfa4:	85ffffcc 	andi	r23,r16,65535
    dfa8:	2006d43a 	srli	r3,r4,16
    dfac:	b963383a 	mul	r17,r23,r5
    dfb0:	10c4b03a 	or	r2,r2,r3
    dfb4:	1440042e 	bgeu	r2,r17,dfc8 <__udivdi3+0x4ac>
    dfb8:	297fffc4 	addi	r5,r5,-1
    dfbc:	1405883a 	add	r2,r2,r16
    dfc0:	d9400415 	stw	r5,16(sp)
    dfc4:	1400442e 	bgeu	r2,r16,e0d8 <__udivdi3+0x5bc>
    dfc8:	1463c83a 	sub	r17,r2,r17
    dfcc:	8809883a 	mov	r4,r17
    dfd0:	a80b883a 	mov	r5,r21
    dfd4:	000fb740 	call	fb74 <__udivsi3>
    dfd8:	8809883a 	mov	r4,r17
    dfdc:	a80b883a 	mov	r5,r21
    dfe0:	1029883a 	mov	r20,r2
    dfe4:	000fb7c0 	call	fb7c <__umodsi3>
    dfe8:	d9400117 	ldw	r5,4(sp)
    dfec:	1004943a 	slli	r2,r2,16
    dff0:	bd09383a 	mul	r4,r23,r20
    dff4:	28ffffcc 	andi	r3,r5,65535
    dff8:	10c6b03a 	or	r3,r2,r3
    dffc:	1900062e 	bgeu	r3,r4,e018 <__udivdi3+0x4fc>
    e000:	1c07883a 	add	r3,r3,r16
    e004:	a53fffc4 	addi	r20,r20,-1
    e008:	1c000336 	bltu	r3,r16,e018 <__udivdi3+0x4fc>
    e00c:	1900022e 	bgeu	r3,r4,e018 <__udivdi3+0x4fc>
    e010:	a53fffc4 	addi	r20,r20,-1
    e014:	1c07883a 	add	r3,r3,r16
    e018:	d9400417 	ldw	r5,16(sp)
    e01c:	e5b8983a 	sll	fp,fp,r22
    e020:	1923c83a 	sub	r17,r3,r4
    e024:	2804943a 	slli	r2,r5,16
    e028:	a0a8b03a 	or	r20,r20,r2
    e02c:	dd000315 	stw	r20,12(sp)
    e030:	003ee106 	br	dbb8 <__udivdi3+0x9c>
    e034:	2004943a 	slli	r2,r4,16
    e038:	e5c8983a 	sll	r4,fp,r23
    e03c:	48ffffcc 	andi	r3,r9,65535
    e040:	10c5883a 	add	r2,r2,r3
    e044:	20bfc22e 	bgeu	r4,r2,df50 <__udivdi3+0x434>
    e048:	40bfffc4 	addi	r2,r8,-1
    e04c:	0009883a 	mov	r4,zero
    e050:	003f1306 	br	dca0 <__udivdi3+0x184>
    e054:	01400204 	movi	r5,8
    e058:	2805883a 	mov	r2,r5
    e05c:	003f0306 	br	dc6c <__udivdi3+0x150>
    e060:	01400604 	movi	r5,24
    e064:	2805883a 	mov	r2,r5
    e068:	003f0006 	br	dc6c <__udivdi3+0x150>
    e06c:	01400204 	movi	r5,8
    e070:	2805883a 	mov	r2,r5
    e074:	003ec206 	br	db80 <__udivdi3+0x64>
    e078:	01400604 	movi	r5,24
    e07c:	2805883a 	mov	r2,r5
    e080:	003ebf06 	br	db80 <__udivdi3+0x64>
    e084:	01400204 	movi	r5,8
    e088:	2805883a 	mov	r2,r5
    e08c:	003f1706 	br	dcec <__udivdi3+0x1d0>
    e090:	01400604 	movi	r5,24
    e094:	2805883a 	mov	r2,r5
    e098:	003f1406 	br	dcec <__udivdi3+0x1d0>
    e09c:	89ff962e 	bgeu	r17,r7,def8 <__udivdi3+0x3dc>
    e0a0:	8d63883a 	add	r17,r17,r21
    e0a4:	843fffc4 	addi	r16,r16,-1
    e0a8:	003f9306 	br	def8 <__udivdi3+0x3dc>
    e0ac:	147f802e 	bgeu	r2,r17,deb0 <__udivdi3+0x394>
    e0b0:	a53fffc4 	addi	r20,r20,-1
    e0b4:	1545883a 	add	r2,r2,r21
    e0b8:	003f7d06 	br	deb0 <__udivdi3+0x394>
    e0bc:	a53fffc4 	addi	r20,r20,-1
    e0c0:	003ede06 	br	dc3c <__udivdi3+0x120>
    e0c4:	b5bfffc4 	addi	r22,r22,-1
    e0c8:	1405883a 	add	r2,r2,r16
    e0cc:	003f2806 	br	dd70 <__udivdi3+0x254>
    e0d0:	a53fffc4 	addi	r20,r20,-1
    e0d4:	003f3706 	br	ddb4 <__udivdi3+0x298>
    e0d8:	147fbb2e 	bgeu	r2,r17,dfc8 <__udivdi3+0x4ac>
    e0dc:	297fffc4 	addi	r5,r5,-1
    e0e0:	1405883a 	add	r2,r2,r16
    e0e4:	d9400415 	stw	r5,16(sp)
    e0e8:	003fb706 	br	dfc8 <__udivdi3+0x4ac>
    e0ec:	b5bfffc4 	addi	r22,r22,-1
    e0f0:	1405883a 	add	r2,r2,r16
    e0f4:	003ec006 	br	dbf8 <__udivdi3+0xdc>

0000e0f8 <__umoddi3>:
    e0f8:	defff104 	addi	sp,sp,-60
    e0fc:	dd800b15 	stw	r22,44(sp)
    e100:	dd000915 	stw	r20,36(sp)
    e104:	dc000515 	stw	r16,20(sp)
    e108:	dfc00e15 	stw	ra,56(sp)
    e10c:	df000d15 	stw	fp,52(sp)
    e110:	ddc00c15 	stw	r23,48(sp)
    e114:	dd400a15 	stw	r21,40(sp)
    e118:	dcc00815 	stw	r19,32(sp)
    e11c:	dc800715 	stw	r18,28(sp)
    e120:	dc400615 	stw	r17,24(sp)
    e124:	3021883a 	mov	r16,r6
    e128:	202d883a 	mov	r22,r4
    e12c:	2829883a 	mov	r20,r5
    e130:	38002b1e 	bne	r7,zero,e1e0 <__umoddi3+0xe8>
    e134:	29805036 	bltu	r5,r6,e278 <__umoddi3+0x180>
    e138:	30008a26 	beq	r6,zero,e364 <__umoddi3+0x26c>
    e13c:	00bfffd4 	movui	r2,65535
    e140:	14008236 	bltu	r2,r16,e34c <__umoddi3+0x254>
    e144:	00803fc4 	movi	r2,255
    e148:	14013636 	bltu	r2,r16,e624 <__umoddi3+0x52c>
    e14c:	000b883a 	mov	r5,zero
    e150:	0005883a 	mov	r2,zero
    e154:	8084d83a 	srl	r2,r16,r2
    e158:	01000074 	movhi	r4,1
    e15c:	21101604 	addi	r4,r4,16472
    e160:	01800804 	movi	r6,32
    e164:	1105883a 	add	r2,r2,r4
    e168:	10c00003 	ldbu	r3,0(r2)
    e16c:	28c7883a 	add	r3,r5,r3
    e170:	30efc83a 	sub	r23,r6,r3
    e174:	b800941e 	bne	r23,zero,e3c8 <__umoddi3+0x2d0>
    e178:	802ad43a 	srli	r21,r16,16
    e17c:	a423c83a 	sub	r17,r20,r16
    e180:	0039883a 	mov	fp,zero
    e184:	853fffcc 	andi	r20,r16,65535
    e188:	8809883a 	mov	r4,r17
    e18c:	a80b883a 	mov	r5,r21
    e190:	000fb740 	call	fb74 <__udivsi3>
    e194:	8809883a 	mov	r4,r17
    e198:	a80b883a 	mov	r5,r21
    e19c:	a0a3383a 	mul	r17,r20,r2
    e1a0:	000fb7c0 	call	fb7c <__umodsi3>
    e1a4:	1004943a 	slli	r2,r2,16
    e1a8:	b006d43a 	srli	r3,r22,16
    e1ac:	10c4b03a 	or	r2,r2,r3
    e1b0:	1440032e 	bgeu	r2,r17,e1c0 <__umoddi3+0xc8>
    e1b4:	1405883a 	add	r2,r2,r16
    e1b8:	14000136 	bltu	r2,r16,e1c0 <__umoddi3+0xc8>
    e1bc:	14413536 	bltu	r2,r17,e694 <__umoddi3+0x59c>
    e1c0:	1463c83a 	sub	r17,r2,r17
    e1c4:	8809883a 	mov	r4,r17
    e1c8:	a80b883a 	mov	r5,r21
    e1cc:	000fb740 	call	fb74 <__udivsi3>
    e1d0:	8809883a 	mov	r4,r17
    e1d4:	a0a3383a 	mul	r17,r20,r2
    e1d8:	a80b883a 	mov	r5,r21
    e1dc:	00004d06 	br	e314 <__umoddi3+0x21c>
    e1e0:	380d883a 	mov	r6,r7
    e1e4:	29c0102e 	bgeu	r5,r7,e228 <__umoddi3+0x130>
    e1e8:	2011883a 	mov	r8,r4
    e1ec:	2813883a 	mov	r9,r5
    e1f0:	4005883a 	mov	r2,r8
    e1f4:	4807883a 	mov	r3,r9
    e1f8:	dfc00e17 	ldw	ra,56(sp)
    e1fc:	df000d17 	ldw	fp,52(sp)
    e200:	ddc00c17 	ldw	r23,48(sp)
    e204:	dd800b17 	ldw	r22,44(sp)
    e208:	dd400a17 	ldw	r21,40(sp)
    e20c:	dd000917 	ldw	r20,36(sp)
    e210:	dcc00817 	ldw	r19,32(sp)
    e214:	dc800717 	ldw	r18,28(sp)
    e218:	dc400617 	ldw	r17,24(sp)
    e21c:	dc000517 	ldw	r16,20(sp)
    e220:	dec00f04 	addi	sp,sp,60
    e224:	f800283a 	ret
    e228:	00bfffd4 	movui	r2,65535
    e22c:	11c05a36 	bltu	r2,r7,e398 <__umoddi3+0x2a0>
    e230:	00803fc4 	movi	r2,255
    e234:	11c0fe36 	bltu	r2,r7,e630 <__umoddi3+0x538>
    e238:	000b883a 	mov	r5,zero
    e23c:	0005883a 	mov	r2,zero
    e240:	3084d83a 	srl	r2,r6,r2
    e244:	01000074 	movhi	r4,1
    e248:	21101604 	addi	r4,r4,16472
    e24c:	01c00804 	movi	r7,32
    e250:	1105883a 	add	r2,r2,r4
    e254:	10c00003 	ldbu	r3,0(r2)
    e258:	28c7883a 	add	r3,r5,r3
    e25c:	38ebc83a 	sub	r21,r7,r3
    e260:	a800851e 	bne	r21,zero,e478 <__umoddi3+0x380>
    e264:	35005236 	bltu	r6,r20,e3b0 <__umoddi3+0x2b8>
    e268:	b400512e 	bgeu	r22,r16,e3b0 <__umoddi3+0x2b8>
    e26c:	b011883a 	mov	r8,r22
    e270:	a013883a 	mov	r9,r20
    e274:	003fde06 	br	e1f0 <__umoddi3+0xf8>
    e278:	00bfffd4 	movui	r2,65535
    e27c:	11804036 	bltu	r2,r6,e380 <__umoddi3+0x288>
    e280:	00803fc4 	movi	r2,255
    e284:	1180ed36 	bltu	r2,r6,e63c <__umoddi3+0x544>
    e288:	000b883a 	mov	r5,zero
    e28c:	0005883a 	mov	r2,zero
    e290:	8084d83a 	srl	r2,r16,r2
    e294:	01000074 	movhi	r4,1
    e298:	21101604 	addi	r4,r4,16472
    e29c:	01800804 	movi	r6,32
    e2a0:	1105883a 	add	r2,r2,r4
    e2a4:	10c00003 	ldbu	r3,0(r2)
    e2a8:	28c7883a 	add	r3,r5,r3
    e2ac:	30c7c83a 	sub	r3,r6,r3
    e2b0:	1800bf1e 	bne	r3,zero,e5b0 <__umoddi3+0x4b8>
    e2b4:	0039883a 	mov	fp,zero
    e2b8:	802ad43a 	srli	r21,r16,16
    e2bc:	a009883a 	mov	r4,r20
    e2c0:	85ffffcc 	andi	r23,r16,65535
    e2c4:	a80b883a 	mov	r5,r21
    e2c8:	000fb740 	call	fb74 <__udivsi3>
    e2cc:	a009883a 	mov	r4,r20
    e2d0:	a80b883a 	mov	r5,r21
    e2d4:	b8a3383a 	mul	r17,r23,r2
    e2d8:	000fb7c0 	call	fb7c <__umodsi3>
    e2dc:	1004943a 	slli	r2,r2,16
    e2e0:	b006d43a 	srli	r3,r22,16
    e2e4:	10c4b03a 	or	r2,r2,r3
    e2e8:	1440032e 	bgeu	r2,r17,e2f8 <__umoddi3+0x200>
    e2ec:	1405883a 	add	r2,r2,r16
    e2f0:	14000136 	bltu	r2,r16,e2f8 <__umoddi3+0x200>
    e2f4:	1440e536 	bltu	r2,r17,e68c <__umoddi3+0x594>
    e2f8:	1463c83a 	sub	r17,r2,r17
    e2fc:	8809883a 	mov	r4,r17
    e300:	a80b883a 	mov	r5,r21
    e304:	000fb740 	call	fb74 <__udivsi3>
    e308:	8809883a 	mov	r4,r17
    e30c:	b8a3383a 	mul	r17,r23,r2
    e310:	a80b883a 	mov	r5,r21
    e314:	000fb7c0 	call	fb7c <__umodsi3>
    e318:	1004943a 	slli	r2,r2,16
    e31c:	b0ffffcc 	andi	r3,r22,65535
    e320:	10c4b03a 	or	r2,r2,r3
    e324:	1440042e 	bgeu	r2,r17,e338 <__umoddi3+0x240>
    e328:	1405883a 	add	r2,r2,r16
    e32c:	14000236 	bltu	r2,r16,e338 <__umoddi3+0x240>
    e330:	1440012e 	bgeu	r2,r17,e338 <__umoddi3+0x240>
    e334:	1405883a 	add	r2,r2,r16
    e338:	1445c83a 	sub	r2,r2,r17
    e33c:	1724d83a 	srl	r18,r2,fp
    e340:	0013883a 	mov	r9,zero
    e344:	9011883a 	mov	r8,r18
    e348:	003fa906 	br	e1f0 <__umoddi3+0xf8>
    e34c:	00804034 	movhi	r2,256
    e350:	10bfffc4 	addi	r2,r2,-1
    e354:	1400b036 	bltu	r2,r16,e618 <__umoddi3+0x520>
    e358:	01400404 	movi	r5,16
    e35c:	2805883a 	mov	r2,r5
    e360:	003f7c06 	br	e154 <__umoddi3+0x5c>
    e364:	01000044 	movi	r4,1
    e368:	000b883a 	mov	r5,zero
    e36c:	000fb740 	call	fb74 <__udivsi3>
    e370:	1021883a 	mov	r16,r2
    e374:	00bfffd4 	movui	r2,65535
    e378:	143ff436 	bltu	r2,r16,e34c <__umoddi3+0x254>
    e37c:	003f7106 	br	e144 <__umoddi3+0x4c>
    e380:	00804034 	movhi	r2,256
    e384:	10bfffc4 	addi	r2,r2,-1
    e388:	1180af36 	bltu	r2,r6,e648 <__umoddi3+0x550>
    e38c:	01400404 	movi	r5,16
    e390:	2805883a 	mov	r2,r5
    e394:	003fbe06 	br	e290 <__umoddi3+0x198>
    e398:	00804034 	movhi	r2,256
    e39c:	10bfffc4 	addi	r2,r2,-1
    e3a0:	11c0ac36 	bltu	r2,r7,e654 <__umoddi3+0x55c>
    e3a4:	01400404 	movi	r5,16
    e3a8:	2805883a 	mov	r2,r5
    e3ac:	003fa406 	br	e240 <__umoddi3+0x148>
    e3b0:	b409c83a 	sub	r4,r22,r16
    e3b4:	b105803a 	cmpltu	r2,r22,r4
    e3b8:	a187c83a 	sub	r3,r20,r6
    e3bc:	18a9c83a 	sub	r20,r3,r2
    e3c0:	202d883a 	mov	r22,r4
    e3c4:	003fa906 	br	e26c <__umoddi3+0x174>
    e3c8:	85e0983a 	sll	r16,r16,r23
    e3cc:	35c5c83a 	sub	r2,r6,r23
    e3d0:	a0a2d83a 	srl	r17,r20,r2
    e3d4:	802ad43a 	srli	r21,r16,16
    e3d8:	b084d83a 	srl	r2,r22,r2
    e3dc:	a5c6983a 	sll	r3,r20,r23
    e3e0:	8809883a 	mov	r4,r17
    e3e4:	a80b883a 	mov	r5,r21
    e3e8:	1886b03a 	or	r3,r3,r2
    e3ec:	d8c00115 	stw	r3,4(sp)
    e3f0:	853fffcc 	andi	r20,r16,65535
    e3f4:	000fb740 	call	fb74 <__udivsi3>
    e3f8:	8809883a 	mov	r4,r17
    e3fc:	a80b883a 	mov	r5,r21
    e400:	a0a3383a 	mul	r17,r20,r2
    e404:	000fb7c0 	call	fb7c <__umodsi3>
    e408:	d9000117 	ldw	r4,4(sp)
    e40c:	1004943a 	slli	r2,r2,16
    e410:	b839883a 	mov	fp,r23
    e414:	2006d43a 	srli	r3,r4,16
    e418:	10c4b03a 	or	r2,r2,r3
    e41c:	1440022e 	bgeu	r2,r17,e428 <__umoddi3+0x330>
    e420:	1405883a 	add	r2,r2,r16
    e424:	1400962e 	bgeu	r2,r16,e680 <__umoddi3+0x588>
    e428:	1463c83a 	sub	r17,r2,r17
    e42c:	8809883a 	mov	r4,r17
    e430:	a80b883a 	mov	r5,r21
    e434:	000fb740 	call	fb74 <__udivsi3>
    e438:	8809883a 	mov	r4,r17
    e43c:	a80b883a 	mov	r5,r21
    e440:	a0a3383a 	mul	r17,r20,r2
    e444:	000fb7c0 	call	fb7c <__umodsi3>
    e448:	d9400117 	ldw	r5,4(sp)
    e44c:	1004943a 	slli	r2,r2,16
    e450:	28ffffcc 	andi	r3,r5,65535
    e454:	10c4b03a 	or	r2,r2,r3
    e458:	1440042e 	bgeu	r2,r17,e46c <__umoddi3+0x374>
    e45c:	1405883a 	add	r2,r2,r16
    e460:	14000236 	bltu	r2,r16,e46c <__umoddi3+0x374>
    e464:	1440012e 	bgeu	r2,r17,e46c <__umoddi3+0x374>
    e468:	1405883a 	add	r2,r2,r16
    e46c:	b5ec983a 	sll	r22,r22,r23
    e470:	1463c83a 	sub	r17,r2,r17
    e474:	003f4406 	br	e188 <__umoddi3+0x90>
    e478:	3d4fc83a 	sub	r7,r7,r21
    e47c:	3546983a 	sll	r3,r6,r21
    e480:	81c4d83a 	srl	r2,r16,r7
    e484:	a1e2d83a 	srl	r17,r20,r7
    e488:	a54c983a 	sll	r6,r20,r21
    e48c:	18aeb03a 	or	r23,r3,r2
    e490:	b828d43a 	srli	r20,r23,16
    e494:	b1c4d83a 	srl	r2,r22,r7
    e498:	8809883a 	mov	r4,r17
    e49c:	a00b883a 	mov	r5,r20
    e4a0:	308cb03a 	or	r6,r6,r2
    e4a4:	d9c00315 	stw	r7,12(sp)
    e4a8:	d9800215 	stw	r6,8(sp)
    e4ac:	000fb740 	call	fb74 <__udivsi3>
    e4b0:	8809883a 	mov	r4,r17
    e4b4:	a00b883a 	mov	r5,r20
    e4b8:	1039883a 	mov	fp,r2
    e4bc:	000fb7c0 	call	fb7c <__umodsi3>
    e4c0:	b8ffffcc 	andi	r3,r23,65535
    e4c4:	d8c00415 	stw	r3,16(sp)
    e4c8:	d9000217 	ldw	r4,8(sp)
    e4cc:	d9400417 	ldw	r5,16(sp)
    e4d0:	1004943a 	slli	r2,r2,16
    e4d4:	2006d43a 	srli	r3,r4,16
    e4d8:	8560983a 	sll	r16,r16,r21
    e4dc:	2f23383a 	mul	r17,r5,fp
    e4e0:	10c4b03a 	or	r2,r2,r3
    e4e4:	dc000015 	stw	r16,0(sp)
    e4e8:	b56c983a 	sll	r22,r22,r21
    e4ec:	1440032e 	bgeu	r2,r17,e4fc <__umoddi3+0x404>
    e4f0:	15c5883a 	add	r2,r2,r23
    e4f4:	e73fffc4 	addi	fp,fp,-1
    e4f8:	15c05d2e 	bgeu	r2,r23,e670 <__umoddi3+0x578>
    e4fc:	1463c83a 	sub	r17,r2,r17
    e500:	8809883a 	mov	r4,r17
    e504:	a00b883a 	mov	r5,r20
    e508:	000fb740 	call	fb74 <__udivsi3>
    e50c:	8809883a 	mov	r4,r17
    e510:	a00b883a 	mov	r5,r20
    e514:	1021883a 	mov	r16,r2
    e518:	000fb7c0 	call	fb7c <__umodsi3>
    e51c:	d8c00417 	ldw	r3,16(sp)
    e520:	d9000217 	ldw	r4,8(sp)
    e524:	1004943a 	slli	r2,r2,16
    e528:	1c23383a 	mul	r17,r3,r16
    e52c:	20ffffcc 	andi	r3,r4,65535
    e530:	10ceb03a 	or	r7,r2,r3
    e534:	3c40032e 	bgeu	r7,r17,e544 <__umoddi3+0x44c>
    e538:	3dcf883a 	add	r7,r7,r23
    e53c:	843fffc4 	addi	r16,r16,-1
    e540:	3dc0472e 	bgeu	r7,r23,e660 <__umoddi3+0x568>
    e544:	e004943a 	slli	r2,fp,16
    e548:	d9400017 	ldw	r5,0(sp)
    e54c:	3c4fc83a 	sub	r7,r7,r17
    e550:	8084b03a 	or	r2,r16,r2
    e554:	28ffffcc 	andi	r3,r5,65535
    e558:	280cd43a 	srli	r6,r5,16
    e55c:	100ad43a 	srli	r5,r2,16
    e560:	10bfffcc 	andi	r2,r2,65535
    e564:	10d1383a 	mul	r8,r2,r3
    e568:	28c7383a 	mul	r3,r5,r3
    e56c:	1185383a 	mul	r2,r2,r6
    e570:	4008d43a 	srli	r4,r8,16
    e574:	298b383a 	mul	r5,r5,r6
    e578:	10c5883a 	add	r2,r2,r3
    e57c:	2089883a 	add	r4,r4,r2
    e580:	20c0022e 	bgeu	r4,r3,e58c <__umoddi3+0x494>
    e584:	00800074 	movhi	r2,1
    e588:	288b883a 	add	r5,r5,r2
    e58c:	2004d43a 	srli	r2,r4,16
    e590:	2008943a 	slli	r4,r4,16
    e594:	40ffffcc 	andi	r3,r8,65535
    e598:	288b883a 	add	r5,r5,r2
    e59c:	20c9883a 	add	r4,r4,r3
    e5a0:	39400b36 	bltu	r7,r5,e5d0 <__umoddi3+0x4d8>
    e5a4:	39403d26 	beq	r7,r5,e69c <__umoddi3+0x5a4>
    e5a8:	394bc83a 	sub	r5,r7,r5
    e5ac:	00000f06 	br	e5ec <__umoddi3+0x4f4>
    e5b0:	30c5c83a 	sub	r2,r6,r3
    e5b4:	1839883a 	mov	fp,r3
    e5b8:	b084d83a 	srl	r2,r22,r2
    e5bc:	a0c6983a 	sll	r3,r20,r3
    e5c0:	8720983a 	sll	r16,r16,fp
    e5c4:	b72c983a 	sll	r22,r22,fp
    e5c8:	18a8b03a 	or	r20,r3,r2
    e5cc:	003f3a06 	br	e2b8 <__umoddi3+0x1c0>
    e5d0:	d8c00017 	ldw	r3,0(sp)
    e5d4:	20c5c83a 	sub	r2,r4,r3
    e5d8:	2089803a 	cmpltu	r4,r4,r2
    e5dc:	2dc7c83a 	sub	r3,r5,r23
    e5e0:	1907c83a 	sub	r3,r3,r4
    e5e4:	38cbc83a 	sub	r5,r7,r3
    e5e8:	1009883a 	mov	r4,r2
    e5ec:	b105c83a 	sub	r2,r22,r4
    e5f0:	b087803a 	cmpltu	r3,r22,r2
    e5f4:	28c7c83a 	sub	r3,r5,r3
    e5f8:	d9400317 	ldw	r5,12(sp)
    e5fc:	1544d83a 	srl	r2,r2,r21
    e600:	1948983a 	sll	r4,r3,r5
    e604:	1d46d83a 	srl	r3,r3,r21
    e608:	20a4b03a 	or	r18,r4,r2
    e60c:	9011883a 	mov	r8,r18
    e610:	1813883a 	mov	r9,r3
    e614:	003ef606 	br	e1f0 <__umoddi3+0xf8>
    e618:	01400604 	movi	r5,24
    e61c:	2805883a 	mov	r2,r5
    e620:	003ecc06 	br	e154 <__umoddi3+0x5c>
    e624:	01400204 	movi	r5,8
    e628:	2805883a 	mov	r2,r5
    e62c:	003ec906 	br	e154 <__umoddi3+0x5c>
    e630:	01400204 	movi	r5,8
    e634:	2805883a 	mov	r2,r5
    e638:	003f0106 	br	e240 <__umoddi3+0x148>
    e63c:	01400204 	movi	r5,8
    e640:	2805883a 	mov	r2,r5
    e644:	003f1206 	br	e290 <__umoddi3+0x198>
    e648:	01400604 	movi	r5,24
    e64c:	2805883a 	mov	r2,r5
    e650:	003f0f06 	br	e290 <__umoddi3+0x198>
    e654:	01400604 	movi	r5,24
    e658:	2805883a 	mov	r2,r5
    e65c:	003ef806 	br	e240 <__umoddi3+0x148>
    e660:	3c7fb82e 	bgeu	r7,r17,e544 <__umoddi3+0x44c>
    e664:	843fffc4 	addi	r16,r16,-1
    e668:	3dcf883a 	add	r7,r7,r23
    e66c:	003fb506 	br	e544 <__umoddi3+0x44c>
    e670:	147fa22e 	bgeu	r2,r17,e4fc <__umoddi3+0x404>
    e674:	e73fffc4 	addi	fp,fp,-1
    e678:	15c5883a 	add	r2,r2,r23
    e67c:	003f9f06 	br	e4fc <__umoddi3+0x404>
    e680:	147f692e 	bgeu	r2,r17,e428 <__umoddi3+0x330>
    e684:	1405883a 	add	r2,r2,r16
    e688:	003f6706 	br	e428 <__umoddi3+0x330>
    e68c:	1405883a 	add	r2,r2,r16
    e690:	003f1906 	br	e2f8 <__umoddi3+0x200>
    e694:	1405883a 	add	r2,r2,r16
    e698:	003ec906 	br	e1c0 <__umoddi3+0xc8>
    e69c:	b13fcc36 	bltu	r22,r4,e5d0 <__umoddi3+0x4d8>
    e6a0:	000b883a 	mov	r5,zero
    e6a4:	003fd106 	br	e5ec <__umoddi3+0x4f4>

0000e6a8 <__nesf2>:
    e6a8:	defff304 	addi	sp,sp,-52
    e6ac:	dc400b15 	stw	r17,44(sp)
    e6b0:	dc400204 	addi	r17,sp,8
    e6b4:	dc000a15 	stw	r16,40(sp)
    e6b8:	d9000015 	stw	r4,0(sp)
    e6bc:	d9400115 	stw	r5,4(sp)
    e6c0:	d809883a 	mov	r4,sp
    e6c4:	880b883a 	mov	r5,r17
    e6c8:	dc000604 	addi	r16,sp,24
    e6cc:	dfc00c15 	stw	ra,48(sp)
    e6d0:	000fc040 	call	fc04 <__unpack_f>
    e6d4:	d9000104 	addi	r4,sp,4
    e6d8:	800b883a 	mov	r5,r16
    e6dc:	000fc040 	call	fc04 <__unpack_f>
    e6e0:	d8800217 	ldw	r2,8(sp)
    e6e4:	00c00044 	movi	r3,1
    e6e8:	180d883a 	mov	r6,r3
    e6ec:	1880062e 	bgeu	r3,r2,e708 <__nesf2+0x60>
    e6f0:	d8800617 	ldw	r2,24(sp)
    e6f4:	8809883a 	mov	r4,r17
    e6f8:	800b883a 	mov	r5,r16
    e6fc:	1880022e 	bgeu	r3,r2,e708 <__nesf2+0x60>
    e700:	000fccc0 	call	fccc <__fpcmp_parts_f>
    e704:	100d883a 	mov	r6,r2
    e708:	3005883a 	mov	r2,r6
    e70c:	dfc00c17 	ldw	ra,48(sp)
    e710:	dc400b17 	ldw	r17,44(sp)
    e714:	dc000a17 	ldw	r16,40(sp)
    e718:	dec00d04 	addi	sp,sp,52
    e71c:	f800283a 	ret

0000e720 <__gtsf2>:
    e720:	defff304 	addi	sp,sp,-52
    e724:	dc400b15 	stw	r17,44(sp)
    e728:	dc400204 	addi	r17,sp,8
    e72c:	dc000a15 	stw	r16,40(sp)
    e730:	d9000015 	stw	r4,0(sp)
    e734:	d9400115 	stw	r5,4(sp)
    e738:	d809883a 	mov	r4,sp
    e73c:	880b883a 	mov	r5,r17
    e740:	dc000604 	addi	r16,sp,24
    e744:	dfc00c15 	stw	ra,48(sp)
    e748:	000fc040 	call	fc04 <__unpack_f>
    e74c:	d9000104 	addi	r4,sp,4
    e750:	800b883a 	mov	r5,r16
    e754:	000fc040 	call	fc04 <__unpack_f>
    e758:	d8800217 	ldw	r2,8(sp)
    e75c:	00c00044 	movi	r3,1
    e760:	01bfffc4 	movi	r6,-1
    e764:	1880062e 	bgeu	r3,r2,e780 <__gtsf2+0x60>
    e768:	d8800617 	ldw	r2,24(sp)
    e76c:	8809883a 	mov	r4,r17
    e770:	800b883a 	mov	r5,r16
    e774:	1880022e 	bgeu	r3,r2,e780 <__gtsf2+0x60>
    e778:	000fccc0 	call	fccc <__fpcmp_parts_f>
    e77c:	100d883a 	mov	r6,r2
    e780:	3005883a 	mov	r2,r6
    e784:	dfc00c17 	ldw	ra,48(sp)
    e788:	dc400b17 	ldw	r17,44(sp)
    e78c:	dc000a17 	ldw	r16,40(sp)
    e790:	dec00d04 	addi	sp,sp,52
    e794:	f800283a 	ret

0000e798 <__ltsf2>:
    e798:	defff304 	addi	sp,sp,-52
    e79c:	dc400b15 	stw	r17,44(sp)
    e7a0:	dc400204 	addi	r17,sp,8
    e7a4:	dc000a15 	stw	r16,40(sp)
    e7a8:	d9000015 	stw	r4,0(sp)
    e7ac:	d9400115 	stw	r5,4(sp)
    e7b0:	d809883a 	mov	r4,sp
    e7b4:	880b883a 	mov	r5,r17
    e7b8:	dc000604 	addi	r16,sp,24
    e7bc:	dfc00c15 	stw	ra,48(sp)
    e7c0:	000fc040 	call	fc04 <__unpack_f>
    e7c4:	d9000104 	addi	r4,sp,4
    e7c8:	800b883a 	mov	r5,r16
    e7cc:	000fc040 	call	fc04 <__unpack_f>
    e7d0:	d8800217 	ldw	r2,8(sp)
    e7d4:	00c00044 	movi	r3,1
    e7d8:	180d883a 	mov	r6,r3
    e7dc:	1880062e 	bgeu	r3,r2,e7f8 <__ltsf2+0x60>
    e7e0:	d8800617 	ldw	r2,24(sp)
    e7e4:	8809883a 	mov	r4,r17
    e7e8:	800b883a 	mov	r5,r16
    e7ec:	1880022e 	bgeu	r3,r2,e7f8 <__ltsf2+0x60>
    e7f0:	000fccc0 	call	fccc <__fpcmp_parts_f>
    e7f4:	100d883a 	mov	r6,r2
    e7f8:	3005883a 	mov	r2,r6
    e7fc:	dfc00c17 	ldw	ra,48(sp)
    e800:	dc400b17 	ldw	r17,44(sp)
    e804:	dc000a17 	ldw	r16,40(sp)
    e808:	dec00d04 	addi	sp,sp,52
    e80c:	f800283a 	ret

0000e810 <_fpadd_parts>:
    e810:	defff804 	addi	sp,sp,-32
    e814:	dcc00315 	stw	r19,12(sp)
    e818:	2027883a 	mov	r19,r4
    e81c:	21000017 	ldw	r4,0(r4)
    e820:	00c00044 	movi	r3,1
    e824:	dd400515 	stw	r21,20(sp)
    e828:	dd000415 	stw	r20,16(sp)
    e82c:	ddc00715 	stw	r23,28(sp)
    e830:	dd800615 	stw	r22,24(sp)
    e834:	dc800215 	stw	r18,8(sp)
    e838:	dc400115 	stw	r17,4(sp)
    e83c:	dc000015 	stw	r16,0(sp)
    e840:	282b883a 	mov	r21,r5
    e844:	3029883a 	mov	r20,r6
    e848:	1900632e 	bgeu	r3,r4,e9d8 <_fpadd_parts+0x1c8>
    e84c:	28800017 	ldw	r2,0(r5)
    e850:	1880812e 	bgeu	r3,r2,ea58 <_fpadd_parts+0x248>
    e854:	00c00104 	movi	r3,4
    e858:	20c0dc26 	beq	r4,r3,ebcc <_fpadd_parts+0x3bc>
    e85c:	10c07e26 	beq	r2,r3,ea58 <_fpadd_parts+0x248>
    e860:	00c00084 	movi	r3,2
    e864:	10c06726 	beq	r2,r3,ea04 <_fpadd_parts+0x1f4>
    e868:	20c07b26 	beq	r4,r3,ea58 <_fpadd_parts+0x248>
    e86c:	9dc00217 	ldw	r23,8(r19)
    e870:	28c00217 	ldw	r3,8(r5)
    e874:	9c400317 	ldw	r17,12(r19)
    e878:	2bc00317 	ldw	r15,12(r5)
    e87c:	b8cdc83a 	sub	r6,r23,r3
    e880:	9c800417 	ldw	r18,16(r19)
    e884:	2c000417 	ldw	r16,16(r5)
    e888:	3009883a 	mov	r4,r6
    e88c:	30009716 	blt	r6,zero,eaec <_fpadd_parts+0x2dc>
    e890:	00800fc4 	movi	r2,63
    e894:	11806b16 	blt	r2,r6,ea44 <_fpadd_parts+0x234>
    e898:	0100a40e 	bge	zero,r4,eb2c <_fpadd_parts+0x31c>
    e89c:	35bff804 	addi	r22,r6,-32
    e8a0:	b000bc16 	blt	r22,zero,eb94 <_fpadd_parts+0x384>
    e8a4:	8596d83a 	srl	r11,r16,r22
    e8a8:	0019883a 	mov	r12,zero
    e8ac:	0013883a 	mov	r9,zero
    e8b0:	01000044 	movi	r4,1
    e8b4:	0015883a 	mov	r10,zero
    e8b8:	b000be16 	blt	r22,zero,ebb4 <_fpadd_parts+0x3a4>
    e8bc:	2590983a 	sll	r8,r4,r22
    e8c0:	000f883a 	mov	r7,zero
    e8c4:	00bfffc4 	movi	r2,-1
    e8c8:	3889883a 	add	r4,r7,r2
    e8cc:	408b883a 	add	r5,r8,r2
    e8d0:	21cd803a 	cmpltu	r6,r4,r7
    e8d4:	314b883a 	add	r5,r6,r5
    e8d8:	7904703a 	and	r2,r15,r4
    e8dc:	8146703a 	and	r3,r16,r5
    e8e0:	10c4b03a 	or	r2,r2,r3
    e8e4:	10000226 	beq	r2,zero,e8f0 <_fpadd_parts+0xe0>
    e8e8:	02400044 	movi	r9,1
    e8ec:	0015883a 	mov	r10,zero
    e8f0:	5a5eb03a 	or	r15,r11,r9
    e8f4:	62a0b03a 	or	r16,r12,r10
    e8f8:	99400117 	ldw	r5,4(r19)
    e8fc:	a8800117 	ldw	r2,4(r21)
    e900:	28806e26 	beq	r5,r2,eabc <_fpadd_parts+0x2ac>
    e904:	28006626 	beq	r5,zero,eaa0 <_fpadd_parts+0x290>
    e908:	7c45c83a 	sub	r2,r15,r17
    e90c:	7889803a 	cmpltu	r4,r15,r2
    e910:	8487c83a 	sub	r3,r16,r18
    e914:	1909c83a 	sub	r4,r3,r4
    e918:	100d883a 	mov	r6,r2
    e91c:	200f883a 	mov	r7,r4
    e920:	38007716 	blt	r7,zero,eb00 <_fpadd_parts+0x2f0>
    e924:	a5c00215 	stw	r23,8(r20)
    e928:	a1c00415 	stw	r7,16(r20)
    e92c:	a0000115 	stw	zero,4(r20)
    e930:	a1800315 	stw	r6,12(r20)
    e934:	a2000317 	ldw	r8,12(r20)
    e938:	a2400417 	ldw	r9,16(r20)
    e93c:	00bfffc4 	movi	r2,-1
    e940:	408b883a 	add	r5,r8,r2
    e944:	2a09803a 	cmpltu	r4,r5,r8
    e948:	488d883a 	add	r6,r9,r2
    e94c:	01c40034 	movhi	r7,4096
    e950:	39ffffc4 	addi	r7,r7,-1
    e954:	218d883a 	add	r6,r4,r6
    e958:	39801736 	bltu	r7,r6,e9b8 <_fpadd_parts+0x1a8>
    e95c:	31c06526 	beq	r6,r7,eaf4 <_fpadd_parts+0x2e4>
    e960:	a3000217 	ldw	r12,8(r20)
    e964:	4209883a 	add	r4,r8,r8
    e968:	00bfffc4 	movi	r2,-1
    e96c:	220f803a 	cmpltu	r7,r4,r8
    e970:	4a4b883a 	add	r5,r9,r9
    e974:	394f883a 	add	r7,r7,r5
    e978:	2095883a 	add	r10,r4,r2
    e97c:	3897883a 	add	r11,r7,r2
    e980:	510d803a 	cmpltu	r6,r10,r4
    e984:	6099883a 	add	r12,r12,r2
    e988:	32d7883a 	add	r11,r6,r11
    e98c:	00840034 	movhi	r2,4096
    e990:	10bfffc4 	addi	r2,r2,-1
    e994:	2011883a 	mov	r8,r4
    e998:	3813883a 	mov	r9,r7
    e99c:	a1000315 	stw	r4,12(r20)
    e9a0:	a1c00415 	stw	r7,16(r20)
    e9a4:	a3000215 	stw	r12,8(r20)
    e9a8:	12c00336 	bltu	r2,r11,e9b8 <_fpadd_parts+0x1a8>
    e9ac:	58bfed1e 	bne	r11,r2,e964 <_fpadd_parts+0x154>
    e9b0:	00bfff84 	movi	r2,-2
    e9b4:	12bfeb2e 	bgeu	r2,r10,e964 <_fpadd_parts+0x154>
    e9b8:	a2800417 	ldw	r10,16(r20)
    e9bc:	008000c4 	movi	r2,3
    e9c0:	00c80034 	movhi	r3,8192
    e9c4:	18ffffc4 	addi	r3,r3,-1
    e9c8:	a2400317 	ldw	r9,12(r20)
    e9cc:	a0800015 	stw	r2,0(r20)
    e9d0:	1a802336 	bltu	r3,r10,ea60 <_fpadd_parts+0x250>
    e9d4:	a027883a 	mov	r19,r20
    e9d8:	9805883a 	mov	r2,r19
    e9dc:	ddc00717 	ldw	r23,28(sp)
    e9e0:	dd800617 	ldw	r22,24(sp)
    e9e4:	dd400517 	ldw	r21,20(sp)
    e9e8:	dd000417 	ldw	r20,16(sp)
    e9ec:	dcc00317 	ldw	r19,12(sp)
    e9f0:	dc800217 	ldw	r18,8(sp)
    e9f4:	dc400117 	ldw	r17,4(sp)
    e9f8:	dc000017 	ldw	r16,0(sp)
    e9fc:	dec00804 	addi	sp,sp,32
    ea00:	f800283a 	ret
    ea04:	20fff41e 	bne	r4,r3,e9d8 <_fpadd_parts+0x1c8>
    ea08:	31000015 	stw	r4,0(r6)
    ea0c:	98800117 	ldw	r2,4(r19)
    ea10:	30800115 	stw	r2,4(r6)
    ea14:	98c00217 	ldw	r3,8(r19)
    ea18:	30c00215 	stw	r3,8(r6)
    ea1c:	98800317 	ldw	r2,12(r19)
    ea20:	30800315 	stw	r2,12(r6)
    ea24:	98c00417 	ldw	r3,16(r19)
    ea28:	30c00415 	stw	r3,16(r6)
    ea2c:	98800117 	ldw	r2,4(r19)
    ea30:	28c00117 	ldw	r3,4(r5)
    ea34:	3027883a 	mov	r19,r6
    ea38:	10c4703a 	and	r2,r2,r3
    ea3c:	30800115 	stw	r2,4(r6)
    ea40:	003fe506 	br	e9d8 <_fpadd_parts+0x1c8>
    ea44:	1dc02616 	blt	r3,r23,eae0 <_fpadd_parts+0x2d0>
    ea48:	0023883a 	mov	r17,zero
    ea4c:	182f883a 	mov	r23,r3
    ea50:	0025883a 	mov	r18,zero
    ea54:	003fa806 	br	e8f8 <_fpadd_parts+0xe8>
    ea58:	a827883a 	mov	r19,r21
    ea5c:	003fde06 	br	e9d8 <_fpadd_parts+0x1c8>
    ea60:	01800044 	movi	r6,1
    ea64:	500497fa 	slli	r2,r10,31
    ea68:	4808d07a 	srli	r4,r9,1
    ea6c:	518ad83a 	srl	r5,r10,r6
    ea70:	a2000217 	ldw	r8,8(r20)
    ea74:	1108b03a 	or	r4,r2,r4
    ea78:	0007883a 	mov	r3,zero
    ea7c:	4984703a 	and	r2,r9,r6
    ea80:	208cb03a 	or	r6,r4,r2
    ea84:	28ceb03a 	or	r7,r5,r3
    ea88:	42000044 	addi	r8,r8,1
    ea8c:	a027883a 	mov	r19,r20
    ea90:	a1c00415 	stw	r7,16(r20)
    ea94:	a2000215 	stw	r8,8(r20)
    ea98:	a1800315 	stw	r6,12(r20)
    ea9c:	003fce06 	br	e9d8 <_fpadd_parts+0x1c8>
    eaa0:	8bc5c83a 	sub	r2,r17,r15
    eaa4:	8889803a 	cmpltu	r4,r17,r2
    eaa8:	9407c83a 	sub	r3,r18,r16
    eaac:	1909c83a 	sub	r4,r3,r4
    eab0:	100d883a 	mov	r6,r2
    eab4:	200f883a 	mov	r7,r4
    eab8:	003f9906 	br	e920 <_fpadd_parts+0x110>
    eabc:	7c45883a 	add	r2,r15,r17
    eac0:	13c9803a 	cmpltu	r4,r2,r15
    eac4:	8487883a 	add	r3,r16,r18
    eac8:	20c9883a 	add	r4,r4,r3
    eacc:	a1400115 	stw	r5,4(r20)
    ead0:	a5c00215 	stw	r23,8(r20)
    ead4:	a0800315 	stw	r2,12(r20)
    ead8:	a1000415 	stw	r4,16(r20)
    eadc:	003fb606 	br	e9b8 <_fpadd_parts+0x1a8>
    eae0:	001f883a 	mov	r15,zero
    eae4:	0021883a 	mov	r16,zero
    eae8:	003f8306 	br	e8f8 <_fpadd_parts+0xe8>
    eaec:	018dc83a 	sub	r6,zero,r6
    eaf0:	003f6706 	br	e890 <_fpadd_parts+0x80>
    eaf4:	00bfff84 	movi	r2,-2
    eaf8:	117faf36 	bltu	r2,r5,e9b8 <_fpadd_parts+0x1a8>
    eafc:	003f9806 	br	e960 <_fpadd_parts+0x150>
    eb00:	0005883a 	mov	r2,zero
    eb04:	1189c83a 	sub	r4,r2,r6
    eb08:	1105803a 	cmpltu	r2,r2,r4
    eb0c:	01cbc83a 	sub	r5,zero,r7
    eb10:	2885c83a 	sub	r2,r5,r2
    eb14:	01800044 	movi	r6,1
    eb18:	a1800115 	stw	r6,4(r20)
    eb1c:	a5c00215 	stw	r23,8(r20)
    eb20:	a1000315 	stw	r4,12(r20)
    eb24:	a0800415 	stw	r2,16(r20)
    eb28:	003f8206 	br	e934 <_fpadd_parts+0x124>
    eb2c:	203f7226 	beq	r4,zero,e8f8 <_fpadd_parts+0xe8>
    eb30:	35bff804 	addi	r22,r6,-32
    eb34:	b9af883a 	add	r23,r23,r6
    eb38:	b0003116 	blt	r22,zero,ec00 <_fpadd_parts+0x3f0>
    eb3c:	959ad83a 	srl	r13,r18,r22
    eb40:	001d883a 	mov	r14,zero
    eb44:	000f883a 	mov	r7,zero
    eb48:	01000044 	movi	r4,1
    eb4c:	0011883a 	mov	r8,zero
    eb50:	b0002516 	blt	r22,zero,ebe8 <_fpadd_parts+0x3d8>
    eb54:	2594983a 	sll	r10,r4,r22
    eb58:	0013883a 	mov	r9,zero
    eb5c:	00bfffc4 	movi	r2,-1
    eb60:	4889883a 	add	r4,r9,r2
    eb64:	508b883a 	add	r5,r10,r2
    eb68:	224d803a 	cmpltu	r6,r4,r9
    eb6c:	314b883a 	add	r5,r6,r5
    eb70:	8904703a 	and	r2,r17,r4
    eb74:	9146703a 	and	r3,r18,r5
    eb78:	10c4b03a 	or	r2,r2,r3
    eb7c:	10000226 	beq	r2,zero,eb88 <_fpadd_parts+0x378>
    eb80:	01c00044 	movi	r7,1
    eb84:	0011883a 	mov	r8,zero
    eb88:	69e2b03a 	or	r17,r13,r7
    eb8c:	7224b03a 	or	r18,r14,r8
    eb90:	003f5906 	br	e8f8 <_fpadd_parts+0xe8>
    eb94:	8407883a 	add	r3,r16,r16
    eb98:	008007c4 	movi	r2,31
    eb9c:	1185c83a 	sub	r2,r2,r6
    eba0:	1886983a 	sll	r3,r3,r2
    eba4:	7996d83a 	srl	r11,r15,r6
    eba8:	8198d83a 	srl	r12,r16,r6
    ebac:	1ad6b03a 	or	r11,r3,r11
    ebb0:	003f3e06 	br	e8ac <_fpadd_parts+0x9c>
    ebb4:	2006d07a 	srli	r3,r4,1
    ebb8:	008007c4 	movi	r2,31
    ebbc:	1185c83a 	sub	r2,r2,r6
    ebc0:	1890d83a 	srl	r8,r3,r2
    ebc4:	218e983a 	sll	r7,r4,r6
    ebc8:	003f3e06 	br	e8c4 <_fpadd_parts+0xb4>
    ebcc:	113f821e 	bne	r2,r4,e9d8 <_fpadd_parts+0x1c8>
    ebd0:	28c00117 	ldw	r3,4(r5)
    ebd4:	98800117 	ldw	r2,4(r19)
    ebd8:	10ff7f26 	beq	r2,r3,e9d8 <_fpadd_parts+0x1c8>
    ebdc:	04c00074 	movhi	r19,1
    ebe0:	9cd01104 	addi	r19,r19,16452
    ebe4:	003f7c06 	br	e9d8 <_fpadd_parts+0x1c8>
    ebe8:	2006d07a 	srli	r3,r4,1
    ebec:	008007c4 	movi	r2,31
    ebf0:	1185c83a 	sub	r2,r2,r6
    ebf4:	1894d83a 	srl	r10,r3,r2
    ebf8:	2192983a 	sll	r9,r4,r6
    ebfc:	003fd706 	br	eb5c <_fpadd_parts+0x34c>
    ec00:	9487883a 	add	r3,r18,r18
    ec04:	008007c4 	movi	r2,31
    ec08:	1185c83a 	sub	r2,r2,r6
    ec0c:	1886983a 	sll	r3,r3,r2
    ec10:	899ad83a 	srl	r13,r17,r6
    ec14:	919cd83a 	srl	r14,r18,r6
    ec18:	1b5ab03a 	or	r13,r3,r13
    ec1c:	003fc906 	br	eb44 <_fpadd_parts+0x334>

0000ec20 <__subdf3>:
    ec20:	deffea04 	addi	sp,sp,-88
    ec24:	dcc01415 	stw	r19,80(sp)
    ec28:	dcc00404 	addi	r19,sp,16
    ec2c:	2011883a 	mov	r8,r4
    ec30:	2813883a 	mov	r9,r5
    ec34:	dc401315 	stw	r17,76(sp)
    ec38:	d809883a 	mov	r4,sp
    ec3c:	980b883a 	mov	r5,r19
    ec40:	dc400904 	addi	r17,sp,36
    ec44:	dfc01515 	stw	ra,84(sp)
    ec48:	da400115 	stw	r9,4(sp)
    ec4c:	d9c00315 	stw	r7,12(sp)
    ec50:	da000015 	stw	r8,0(sp)
    ec54:	d9800215 	stw	r6,8(sp)
    ec58:	00100b40 	call	100b4 <__unpack_d>
    ec5c:	d9000204 	addi	r4,sp,8
    ec60:	880b883a 	mov	r5,r17
    ec64:	00100b40 	call	100b4 <__unpack_d>
    ec68:	d8800a17 	ldw	r2,40(sp)
    ec6c:	880b883a 	mov	r5,r17
    ec70:	9809883a 	mov	r4,r19
    ec74:	d9800e04 	addi	r6,sp,56
    ec78:	1080005c 	xori	r2,r2,1
    ec7c:	d8800a15 	stw	r2,40(sp)
    ec80:	000e8100 	call	e810 <_fpadd_parts>
    ec84:	1009883a 	mov	r4,r2
    ec88:	000fda00 	call	fda0 <__pack_d>
    ec8c:	dfc01517 	ldw	ra,84(sp)
    ec90:	dcc01417 	ldw	r19,80(sp)
    ec94:	dc401317 	ldw	r17,76(sp)
    ec98:	dec01604 	addi	sp,sp,88
    ec9c:	f800283a 	ret

0000eca0 <__adddf3>:
    eca0:	deffea04 	addi	sp,sp,-88
    eca4:	dcc01415 	stw	r19,80(sp)
    eca8:	dcc00404 	addi	r19,sp,16
    ecac:	2011883a 	mov	r8,r4
    ecb0:	2813883a 	mov	r9,r5
    ecb4:	dc401315 	stw	r17,76(sp)
    ecb8:	d809883a 	mov	r4,sp
    ecbc:	980b883a 	mov	r5,r19
    ecc0:	dc400904 	addi	r17,sp,36
    ecc4:	dfc01515 	stw	ra,84(sp)
    ecc8:	da400115 	stw	r9,4(sp)
    eccc:	d9c00315 	stw	r7,12(sp)
    ecd0:	da000015 	stw	r8,0(sp)
    ecd4:	d9800215 	stw	r6,8(sp)
    ecd8:	00100b40 	call	100b4 <__unpack_d>
    ecdc:	d9000204 	addi	r4,sp,8
    ece0:	880b883a 	mov	r5,r17
    ece4:	00100b40 	call	100b4 <__unpack_d>
    ece8:	d9800e04 	addi	r6,sp,56
    ecec:	9809883a 	mov	r4,r19
    ecf0:	880b883a 	mov	r5,r17
    ecf4:	000e8100 	call	e810 <_fpadd_parts>
    ecf8:	1009883a 	mov	r4,r2
    ecfc:	000fda00 	call	fda0 <__pack_d>
    ed00:	dfc01517 	ldw	ra,84(sp)
    ed04:	dcc01417 	ldw	r19,80(sp)
    ed08:	dc401317 	ldw	r17,76(sp)
    ed0c:	dec01604 	addi	sp,sp,88
    ed10:	f800283a 	ret

0000ed14 <__muldf3>:
    ed14:	deffe004 	addi	sp,sp,-128
    ed18:	dc401815 	stw	r17,96(sp)
    ed1c:	dc400404 	addi	r17,sp,16
    ed20:	2011883a 	mov	r8,r4
    ed24:	2813883a 	mov	r9,r5
    ed28:	dc001715 	stw	r16,92(sp)
    ed2c:	d809883a 	mov	r4,sp
    ed30:	880b883a 	mov	r5,r17
    ed34:	dc000904 	addi	r16,sp,36
    ed38:	dfc01f15 	stw	ra,124(sp)
    ed3c:	da400115 	stw	r9,4(sp)
    ed40:	d9c00315 	stw	r7,12(sp)
    ed44:	da000015 	stw	r8,0(sp)
    ed48:	d9800215 	stw	r6,8(sp)
    ed4c:	ddc01e15 	stw	r23,120(sp)
    ed50:	dd801d15 	stw	r22,116(sp)
    ed54:	dd401c15 	stw	r21,112(sp)
    ed58:	dd001b15 	stw	r20,108(sp)
    ed5c:	dcc01a15 	stw	r19,104(sp)
    ed60:	dc801915 	stw	r18,100(sp)
    ed64:	00100b40 	call	100b4 <__unpack_d>
    ed68:	d9000204 	addi	r4,sp,8
    ed6c:	800b883a 	mov	r5,r16
    ed70:	00100b40 	call	100b4 <__unpack_d>
    ed74:	d9000417 	ldw	r4,16(sp)
    ed78:	00800044 	movi	r2,1
    ed7c:	1100102e 	bgeu	r2,r4,edc0 <__muldf3+0xac>
    ed80:	d8c00917 	ldw	r3,36(sp)
    ed84:	10c0062e 	bgeu	r2,r3,eda0 <__muldf3+0x8c>
    ed88:	00800104 	movi	r2,4
    ed8c:	20800a26 	beq	r4,r2,edb8 <__muldf3+0xa4>
    ed90:	1880cc26 	beq	r3,r2,f0c4 <__muldf3+0x3b0>
    ed94:	00800084 	movi	r2,2
    ed98:	20800926 	beq	r4,r2,edc0 <__muldf3+0xac>
    ed9c:	1880191e 	bne	r3,r2,ee04 <__muldf3+0xf0>
    eda0:	d8c00a17 	ldw	r3,40(sp)
    eda4:	d8800517 	ldw	r2,20(sp)
    eda8:	8009883a 	mov	r4,r16
    edac:	10c4c03a 	cmpne	r2,r2,r3
    edb0:	d8800a15 	stw	r2,40(sp)
    edb4:	00000706 	br	edd4 <__muldf3+0xc0>
    edb8:	00800084 	movi	r2,2
    edbc:	1880c326 	beq	r3,r2,f0cc <__muldf3+0x3b8>
    edc0:	d8800517 	ldw	r2,20(sp)
    edc4:	d8c00a17 	ldw	r3,40(sp)
    edc8:	8809883a 	mov	r4,r17
    edcc:	10c4c03a 	cmpne	r2,r2,r3
    edd0:	d8800515 	stw	r2,20(sp)
    edd4:	000fda00 	call	fda0 <__pack_d>
    edd8:	dfc01f17 	ldw	ra,124(sp)
    eddc:	ddc01e17 	ldw	r23,120(sp)
    ede0:	dd801d17 	ldw	r22,116(sp)
    ede4:	dd401c17 	ldw	r21,112(sp)
    ede8:	dd001b17 	ldw	r20,108(sp)
    edec:	dcc01a17 	ldw	r19,104(sp)
    edf0:	dc801917 	ldw	r18,100(sp)
    edf4:	dc401817 	ldw	r17,96(sp)
    edf8:	dc001717 	ldw	r16,92(sp)
    edfc:	dec02004 	addi	sp,sp,128
    ee00:	f800283a 	ret
    ee04:	dd800717 	ldw	r22,28(sp)
    ee08:	dc800c17 	ldw	r18,48(sp)
    ee0c:	002b883a 	mov	r21,zero
    ee10:	0023883a 	mov	r17,zero
    ee14:	a80b883a 	mov	r5,r21
    ee18:	b00d883a 	mov	r6,r22
    ee1c:	880f883a 	mov	r7,r17
    ee20:	ddc00817 	ldw	r23,32(sp)
    ee24:	dcc00d17 	ldw	r19,52(sp)
    ee28:	9009883a 	mov	r4,r18
    ee2c:	000d9e00 	call	d9e0 <__muldi3>
    ee30:	001b883a 	mov	r13,zero
    ee34:	680f883a 	mov	r7,r13
    ee38:	b009883a 	mov	r4,r22
    ee3c:	000b883a 	mov	r5,zero
    ee40:	980d883a 	mov	r6,r19
    ee44:	b82d883a 	mov	r22,r23
    ee48:	002f883a 	mov	r23,zero
    ee4c:	db401615 	stw	r13,88(sp)
    ee50:	d8801315 	stw	r2,76(sp)
    ee54:	d8c01415 	stw	r3,80(sp)
    ee58:	dcc01515 	stw	r19,84(sp)
    ee5c:	000d9e00 	call	d9e0 <__muldi3>
    ee60:	b00d883a 	mov	r6,r22
    ee64:	000b883a 	mov	r5,zero
    ee68:	9009883a 	mov	r4,r18
    ee6c:	b80f883a 	mov	r7,r23
    ee70:	1021883a 	mov	r16,r2
    ee74:	1823883a 	mov	r17,r3
    ee78:	000d9e00 	call	d9e0 <__muldi3>
    ee7c:	8085883a 	add	r2,r16,r2
    ee80:	140d803a 	cmpltu	r6,r2,r16
    ee84:	88c7883a 	add	r3,r17,r3
    ee88:	30cd883a 	add	r6,r6,r3
    ee8c:	1029883a 	mov	r20,r2
    ee90:	302b883a 	mov	r21,r6
    ee94:	da801317 	ldw	r10,76(sp)
    ee98:	dac01417 	ldw	r11,80(sp)
    ee9c:	db001517 	ldw	r12,84(sp)
    eea0:	db401617 	ldw	r13,88(sp)
    eea4:	3440612e 	bgeu	r6,r17,f02c <__muldf3+0x318>
    eea8:	0009883a 	mov	r4,zero
    eeac:	5105883a 	add	r2,r10,r4
    eeb0:	128d803a 	cmpltu	r6,r2,r10
    eeb4:	5d07883a 	add	r3,r11,r20
    eeb8:	30cd883a 	add	r6,r6,r3
    eebc:	0021883a 	mov	r16,zero
    eec0:	04400044 	movi	r17,1
    eec4:	1025883a 	mov	r18,r2
    eec8:	3027883a 	mov	r19,r6
    eecc:	32c06236 	bltu	r6,r11,f058 <__muldf3+0x344>
    eed0:	59807a26 	beq	r11,r6,f0bc <__muldf3+0x3a8>
    eed4:	680b883a 	mov	r5,r13
    eed8:	b80f883a 	mov	r7,r23
    eedc:	6009883a 	mov	r4,r12
    eee0:	b00d883a 	mov	r6,r22
    eee4:	000d9e00 	call	d9e0 <__muldi3>
    eee8:	1009883a 	mov	r4,r2
    eeec:	000f883a 	mov	r7,zero
    eef0:	1545883a 	add	r2,r2,r21
    eef4:	1111803a 	cmpltu	r8,r2,r4
    eef8:	19c7883a 	add	r3,r3,r7
    eefc:	40c7883a 	add	r3,r8,r3
    ef00:	88cb883a 	add	r5,r17,r3
    ef04:	d8c00617 	ldw	r3,24(sp)
    ef08:	8089883a 	add	r4,r16,r2
    ef0c:	d8800b17 	ldw	r2,44(sp)
    ef10:	18c00104 	addi	r3,r3,4
    ef14:	240d803a 	cmpltu	r6,r4,r16
    ef18:	10c7883a 	add	r3,r2,r3
    ef1c:	2013883a 	mov	r9,r4
    ef20:	d8800a17 	ldw	r2,40(sp)
    ef24:	d9000517 	ldw	r4,20(sp)
    ef28:	314d883a 	add	r6,r6,r5
    ef2c:	3015883a 	mov	r10,r6
    ef30:	2088c03a 	cmpne	r4,r4,r2
    ef34:	00880034 	movhi	r2,8192
    ef38:	10bfffc4 	addi	r2,r2,-1
    ef3c:	d9000f15 	stw	r4,60(sp)
    ef40:	d8c01015 	stw	r3,64(sp)
    ef44:	1180162e 	bgeu	r2,r6,efa0 <__muldf3+0x28c>
    ef48:	1811883a 	mov	r8,r3
    ef4c:	101f883a 	mov	r15,r2
    ef50:	980497fa 	slli	r2,r19,31
    ef54:	9016d07a 	srli	r11,r18,1
    ef58:	500697fa 	slli	r3,r10,31
    ef5c:	480cd07a 	srli	r6,r9,1
    ef60:	500ed07a 	srli	r7,r10,1
    ef64:	12d6b03a 	or	r11,r2,r11
    ef68:	00800044 	movi	r2,1
    ef6c:	198cb03a 	or	r6,r3,r6
    ef70:	4888703a 	and	r4,r9,r2
    ef74:	9818d07a 	srli	r12,r19,1
    ef78:	001b883a 	mov	r13,zero
    ef7c:	03a00034 	movhi	r14,32768
    ef80:	3013883a 	mov	r9,r6
    ef84:	3815883a 	mov	r10,r7
    ef88:	4091883a 	add	r8,r8,r2
    ef8c:	20000226 	beq	r4,zero,ef98 <__muldf3+0x284>
    ef90:	5b64b03a 	or	r18,r11,r13
    ef94:	63a6b03a 	or	r19,r12,r14
    ef98:	7abfed36 	bltu	r15,r10,ef50 <__muldf3+0x23c>
    ef9c:	da001015 	stw	r8,64(sp)
    efa0:	00840034 	movhi	r2,4096
    efa4:	10bfffc4 	addi	r2,r2,-1
    efa8:	12801436 	bltu	r2,r10,effc <__muldf3+0x2e8>
    efac:	da001017 	ldw	r8,64(sp)
    efb0:	101f883a 	mov	r15,r2
    efb4:	4a45883a 	add	r2,r9,r9
    efb8:	124d803a 	cmpltu	r6,r2,r9
    efbc:	5287883a 	add	r3,r10,r10
    efc0:	9497883a 	add	r11,r18,r18
    efc4:	5c8f803a 	cmpltu	r7,r11,r18
    efc8:	9cd9883a 	add	r12,r19,r19
    efcc:	01000044 	movi	r4,1
    efd0:	30cd883a 	add	r6,r6,r3
    efd4:	3b0f883a 	add	r7,r7,r12
    efd8:	423fffc4 	addi	r8,r8,-1
    efdc:	1013883a 	mov	r9,r2
    efe0:	3015883a 	mov	r10,r6
    efe4:	111ab03a 	or	r13,r2,r4
    efe8:	98003016 	blt	r19,zero,f0ac <__muldf3+0x398>
    efec:	5825883a 	mov	r18,r11
    eff0:	3827883a 	mov	r19,r7
    eff4:	7abfef2e 	bgeu	r15,r10,efb4 <__muldf3+0x2a0>
    eff8:	da001015 	stw	r8,64(sp)
    effc:	00803fc4 	movi	r2,255
    f000:	488e703a 	and	r7,r9,r2
    f004:	00802004 	movi	r2,128
    f008:	0007883a 	mov	r3,zero
    f00c:	0011883a 	mov	r8,zero
    f010:	38801826 	beq	r7,r2,f074 <__muldf3+0x360>
    f014:	008000c4 	movi	r2,3
    f018:	d9000e04 	addi	r4,sp,56
    f01c:	da801215 	stw	r10,72(sp)
    f020:	d8800e15 	stw	r2,56(sp)
    f024:	da401115 	stw	r9,68(sp)
    f028:	003f6a06 	br	edd4 <__muldf3+0xc0>
    f02c:	89802126 	beq	r17,r6,f0b4 <__muldf3+0x3a0>
    f030:	0009883a 	mov	r4,zero
    f034:	5105883a 	add	r2,r10,r4
    f038:	128d803a 	cmpltu	r6,r2,r10
    f03c:	5d07883a 	add	r3,r11,r20
    f040:	30cd883a 	add	r6,r6,r3
    f044:	0021883a 	mov	r16,zero
    f048:	0023883a 	mov	r17,zero
    f04c:	1025883a 	mov	r18,r2
    f050:	3027883a 	mov	r19,r6
    f054:	32ff9e2e 	bgeu	r6,r11,eed0 <__muldf3+0x1bc>
    f058:	00800044 	movi	r2,1
    f05c:	8089883a 	add	r4,r16,r2
    f060:	240d803a 	cmpltu	r6,r4,r16
    f064:	344d883a 	add	r6,r6,r17
    f068:	2021883a 	mov	r16,r4
    f06c:	3023883a 	mov	r17,r6
    f070:	003f9806 	br	eed4 <__muldf3+0x1c0>
    f074:	403fe71e 	bne	r8,zero,f014 <__muldf3+0x300>
    f078:	01004004 	movi	r4,256
    f07c:	4904703a 	and	r2,r9,r4
    f080:	10c4b03a 	or	r2,r2,r3
    f084:	103fe31e 	bne	r2,zero,f014 <__muldf3+0x300>
    f088:	94c4b03a 	or	r2,r18,r19
    f08c:	103fe126 	beq	r2,zero,f014 <__muldf3+0x300>
    f090:	49c5883a 	add	r2,r9,r7
    f094:	1251803a 	cmpltu	r8,r2,r9
    f098:	4291883a 	add	r8,r8,r10
    f09c:	013fc004 	movi	r4,-256
    f0a0:	1112703a 	and	r9,r2,r4
    f0a4:	4015883a 	mov	r10,r8
    f0a8:	003fda06 	br	f014 <__muldf3+0x300>
    f0ac:	6813883a 	mov	r9,r13
    f0b0:	003fce06 	br	efec <__muldf3+0x2d8>
    f0b4:	143f7c36 	bltu	r2,r16,eea8 <__muldf3+0x194>
    f0b8:	003fdd06 	br	f030 <__muldf3+0x31c>
    f0bc:	12bf852e 	bgeu	r2,r10,eed4 <__muldf3+0x1c0>
    f0c0:	003fe506 	br	f058 <__muldf3+0x344>
    f0c4:	00800084 	movi	r2,2
    f0c8:	20bf351e 	bne	r4,r2,eda0 <__muldf3+0x8c>
    f0cc:	01000074 	movhi	r4,1
    f0d0:	21101104 	addi	r4,r4,16452
    f0d4:	003f3f06 	br	edd4 <__muldf3+0xc0>

0000f0d8 <__divdf3>:
    f0d8:	deffed04 	addi	sp,sp,-76
    f0dc:	dcc01115 	stw	r19,68(sp)
    f0e0:	dcc00404 	addi	r19,sp,16
    f0e4:	2011883a 	mov	r8,r4
    f0e8:	2813883a 	mov	r9,r5
    f0ec:	dc000e15 	stw	r16,56(sp)
    f0f0:	d809883a 	mov	r4,sp
    f0f4:	980b883a 	mov	r5,r19
    f0f8:	dc000904 	addi	r16,sp,36
    f0fc:	dfc01215 	stw	ra,72(sp)
    f100:	da400115 	stw	r9,4(sp)
    f104:	d9c00315 	stw	r7,12(sp)
    f108:	da000015 	stw	r8,0(sp)
    f10c:	d9800215 	stw	r6,8(sp)
    f110:	dc801015 	stw	r18,64(sp)
    f114:	dc400f15 	stw	r17,60(sp)
    f118:	00100b40 	call	100b4 <__unpack_d>
    f11c:	d9000204 	addi	r4,sp,8
    f120:	800b883a 	mov	r5,r16
    f124:	00100b40 	call	100b4 <__unpack_d>
    f128:	d9000417 	ldw	r4,16(sp)
    f12c:	00800044 	movi	r2,1
    f130:	11000b2e 	bgeu	r2,r4,f160 <__divdf3+0x88>
    f134:	d9400917 	ldw	r5,36(sp)
    f138:	1140762e 	bgeu	r2,r5,f314 <__divdf3+0x23c>
    f13c:	d8800517 	ldw	r2,20(sp)
    f140:	d8c00a17 	ldw	r3,40(sp)
    f144:	01800104 	movi	r6,4
    f148:	10c4f03a 	xor	r2,r2,r3
    f14c:	d8800515 	stw	r2,20(sp)
    f150:	21800226 	beq	r4,r6,f15c <__divdf3+0x84>
    f154:	00800084 	movi	r2,2
    f158:	2080141e 	bne	r4,r2,f1ac <__divdf3+0xd4>
    f15c:	29000926 	beq	r5,r4,f184 <__divdf3+0xac>
    f160:	9809883a 	mov	r4,r19
    f164:	000fda00 	call	fda0 <__pack_d>
    f168:	dfc01217 	ldw	ra,72(sp)
    f16c:	dcc01117 	ldw	r19,68(sp)
    f170:	dc801017 	ldw	r18,64(sp)
    f174:	dc400f17 	ldw	r17,60(sp)
    f178:	dc000e17 	ldw	r16,56(sp)
    f17c:	dec01304 	addi	sp,sp,76
    f180:	f800283a 	ret
    f184:	01000074 	movhi	r4,1
    f188:	21101104 	addi	r4,r4,16452
    f18c:	000fda00 	call	fda0 <__pack_d>
    f190:	dfc01217 	ldw	ra,72(sp)
    f194:	dcc01117 	ldw	r19,68(sp)
    f198:	dc801017 	ldw	r18,64(sp)
    f19c:	dc400f17 	ldw	r17,60(sp)
    f1a0:	dc000e17 	ldw	r16,56(sp)
    f1a4:	dec01304 	addi	sp,sp,76
    f1a8:	f800283a 	ret
    f1ac:	29805b26 	beq	r5,r6,f31c <__divdf3+0x244>
    f1b0:	28802d26 	beq	r5,r2,f268 <__divdf3+0x190>
    f1b4:	d8c00617 	ldw	r3,24(sp)
    f1b8:	d8800b17 	ldw	r2,44(sp)
    f1bc:	d9c00817 	ldw	r7,32(sp)
    f1c0:	dc400d17 	ldw	r17,52(sp)
    f1c4:	188bc83a 	sub	r5,r3,r2
    f1c8:	d9800717 	ldw	r6,28(sp)
    f1cc:	dc000c17 	ldw	r16,48(sp)
    f1d0:	d9400615 	stw	r5,24(sp)
    f1d4:	3c403836 	bltu	r7,r17,f2b8 <__divdf3+0x1e0>
    f1d8:	89c03626 	beq	r17,r7,f2b4 <__divdf3+0x1dc>
    f1dc:	0015883a 	mov	r10,zero
    f1e0:	001d883a 	mov	r14,zero
    f1e4:	02c40034 	movhi	r11,4096
    f1e8:	001f883a 	mov	r15,zero
    f1ec:	003f883a 	mov	ra,zero
    f1f0:	04800f44 	movi	r18,61
    f1f4:	00000f06 	br	f234 <__divdf3+0x15c>
    f1f8:	601d883a 	mov	r14,r12
    f1fc:	681f883a 	mov	r15,r13
    f200:	400d883a 	mov	r6,r8
    f204:	100f883a 	mov	r7,r2
    f208:	3191883a 	add	r8,r6,r6
    f20c:	5808d07a 	srli	r4,r11,1
    f210:	4185803a 	cmpltu	r2,r8,r6
    f214:	39d3883a 	add	r9,r7,r7
    f218:	28c6b03a 	or	r3,r5,r3
    f21c:	1245883a 	add	r2,r2,r9
    f220:	1815883a 	mov	r10,r3
    f224:	2017883a 	mov	r11,r4
    f228:	400d883a 	mov	r6,r8
    f22c:	100f883a 	mov	r7,r2
    f230:	fc801726 	beq	ra,r18,f290 <__divdf3+0x1b8>
    f234:	580a97fa 	slli	r5,r11,31
    f238:	5006d07a 	srli	r3,r10,1
    f23c:	ffc00044 	addi	ra,ra,1
    f240:	3c7ff136 	bltu	r7,r17,f208 <__divdf3+0x130>
    f244:	3411c83a 	sub	r8,r6,r16
    f248:	3205803a 	cmpltu	r2,r6,r8
    f24c:	3c53c83a 	sub	r9,r7,r17
    f250:	7298b03a 	or	r12,r14,r10
    f254:	7adab03a 	or	r13,r15,r11
    f258:	4885c83a 	sub	r2,r9,r2
    f25c:	89ffe61e 	bne	r17,r7,f1f8 <__divdf3+0x120>
    f260:	343fe936 	bltu	r6,r16,f208 <__divdf3+0x130>
    f264:	003fe406 	br	f1f8 <__divdf3+0x120>
    f268:	9809883a 	mov	r4,r19
    f26c:	d9800415 	stw	r6,16(sp)
    f270:	000fda00 	call	fda0 <__pack_d>
    f274:	dfc01217 	ldw	ra,72(sp)
    f278:	dcc01117 	ldw	r19,68(sp)
    f27c:	dc801017 	ldw	r18,64(sp)
    f280:	dc400f17 	ldw	r17,60(sp)
    f284:	dc000e17 	ldw	r16,56(sp)
    f288:	dec01304 	addi	sp,sp,76
    f28c:	f800283a 	ret
    f290:	00803fc4 	movi	r2,255
    f294:	7090703a 	and	r8,r14,r2
    f298:	00802004 	movi	r2,128
    f29c:	0007883a 	mov	r3,zero
    f2a0:	0013883a 	mov	r9,zero
    f2a4:	40800d26 	beq	r8,r2,f2dc <__divdf3+0x204>
    f2a8:	dbc00815 	stw	r15,32(sp)
    f2ac:	db800715 	stw	r14,28(sp)
    f2b0:	003fab06 	br	f160 <__divdf3+0x88>
    f2b4:	343fc92e 	bgeu	r6,r16,f1dc <__divdf3+0x104>
    f2b8:	3185883a 	add	r2,r6,r6
    f2bc:	1189803a 	cmpltu	r4,r2,r6
    f2c0:	39c7883a 	add	r3,r7,r7
    f2c4:	20c9883a 	add	r4,r4,r3
    f2c8:	297fffc4 	addi	r5,r5,-1
    f2cc:	100d883a 	mov	r6,r2
    f2d0:	200f883a 	mov	r7,r4
    f2d4:	d9400615 	stw	r5,24(sp)
    f2d8:	003fc006 	br	f1dc <__divdf3+0x104>
    f2dc:	483ff21e 	bne	r9,zero,f2a8 <__divdf3+0x1d0>
    f2e0:	01004004 	movi	r4,256
    f2e4:	7104703a 	and	r2,r14,r4
    f2e8:	10c4b03a 	or	r2,r2,r3
    f2ec:	103fee1e 	bne	r2,zero,f2a8 <__divdf3+0x1d0>
    f2f0:	31c4b03a 	or	r2,r6,r7
    f2f4:	103fec26 	beq	r2,zero,f2a8 <__divdf3+0x1d0>
    f2f8:	7205883a 	add	r2,r14,r8
    f2fc:	1391803a 	cmpltu	r8,r2,r14
    f300:	43d1883a 	add	r8,r8,r15
    f304:	013fc004 	movi	r4,-256
    f308:	111c703a 	and	r14,r2,r4
    f30c:	401f883a 	mov	r15,r8
    f310:	003fe506 	br	f2a8 <__divdf3+0x1d0>
    f314:	8009883a 	mov	r4,r16
    f318:	003f9206 	br	f164 <__divdf3+0x8c>
    f31c:	9809883a 	mov	r4,r19
    f320:	d8000715 	stw	zero,28(sp)
    f324:	d8000815 	stw	zero,32(sp)
    f328:	d8000615 	stw	zero,24(sp)
    f32c:	003f8d06 	br	f164 <__divdf3+0x8c>

0000f330 <__eqdf2>:
    f330:	deffef04 	addi	sp,sp,-68
    f334:	dc400f15 	stw	r17,60(sp)
    f338:	dc400404 	addi	r17,sp,16
    f33c:	2005883a 	mov	r2,r4
    f340:	2807883a 	mov	r3,r5
    f344:	dc000e15 	stw	r16,56(sp)
    f348:	d809883a 	mov	r4,sp
    f34c:	880b883a 	mov	r5,r17
    f350:	dc000904 	addi	r16,sp,36
    f354:	d8c00115 	stw	r3,4(sp)
    f358:	d8800015 	stw	r2,0(sp)
    f35c:	d9800215 	stw	r6,8(sp)
    f360:	dfc01015 	stw	ra,64(sp)
    f364:	d9c00315 	stw	r7,12(sp)
    f368:	00100b40 	call	100b4 <__unpack_d>
    f36c:	d9000204 	addi	r4,sp,8
    f370:	800b883a 	mov	r5,r16
    f374:	00100b40 	call	100b4 <__unpack_d>
    f378:	d8800417 	ldw	r2,16(sp)
    f37c:	00c00044 	movi	r3,1
    f380:	180d883a 	mov	r6,r3
    f384:	1880062e 	bgeu	r3,r2,f3a0 <__eqdf2+0x70>
    f388:	d8800917 	ldw	r2,36(sp)
    f38c:	8809883a 	mov	r4,r17
    f390:	800b883a 	mov	r5,r16
    f394:	1880022e 	bgeu	r3,r2,f3a0 <__eqdf2+0x70>
    f398:	00101ec0 	call	101ec <__fpcmp_parts_d>
    f39c:	100d883a 	mov	r6,r2
    f3a0:	3005883a 	mov	r2,r6
    f3a4:	dfc01017 	ldw	ra,64(sp)
    f3a8:	dc400f17 	ldw	r17,60(sp)
    f3ac:	dc000e17 	ldw	r16,56(sp)
    f3b0:	dec01104 	addi	sp,sp,68
    f3b4:	f800283a 	ret

0000f3b8 <__nedf2>:
    f3b8:	deffef04 	addi	sp,sp,-68
    f3bc:	dc400f15 	stw	r17,60(sp)
    f3c0:	dc400404 	addi	r17,sp,16
    f3c4:	2005883a 	mov	r2,r4
    f3c8:	2807883a 	mov	r3,r5
    f3cc:	dc000e15 	stw	r16,56(sp)
    f3d0:	d809883a 	mov	r4,sp
    f3d4:	880b883a 	mov	r5,r17
    f3d8:	dc000904 	addi	r16,sp,36
    f3dc:	d8c00115 	stw	r3,4(sp)
    f3e0:	d8800015 	stw	r2,0(sp)
    f3e4:	d9800215 	stw	r6,8(sp)
    f3e8:	dfc01015 	stw	ra,64(sp)
    f3ec:	d9c00315 	stw	r7,12(sp)
    f3f0:	00100b40 	call	100b4 <__unpack_d>
    f3f4:	d9000204 	addi	r4,sp,8
    f3f8:	800b883a 	mov	r5,r16
    f3fc:	00100b40 	call	100b4 <__unpack_d>
    f400:	d8800417 	ldw	r2,16(sp)
    f404:	00c00044 	movi	r3,1
    f408:	180d883a 	mov	r6,r3
    f40c:	1880062e 	bgeu	r3,r2,f428 <__nedf2+0x70>
    f410:	d8800917 	ldw	r2,36(sp)
    f414:	8809883a 	mov	r4,r17
    f418:	800b883a 	mov	r5,r16
    f41c:	1880022e 	bgeu	r3,r2,f428 <__nedf2+0x70>
    f420:	00101ec0 	call	101ec <__fpcmp_parts_d>
    f424:	100d883a 	mov	r6,r2
    f428:	3005883a 	mov	r2,r6
    f42c:	dfc01017 	ldw	ra,64(sp)
    f430:	dc400f17 	ldw	r17,60(sp)
    f434:	dc000e17 	ldw	r16,56(sp)
    f438:	dec01104 	addi	sp,sp,68
    f43c:	f800283a 	ret

0000f440 <__gtdf2>:
    f440:	deffef04 	addi	sp,sp,-68
    f444:	dc400f15 	stw	r17,60(sp)
    f448:	dc400404 	addi	r17,sp,16
    f44c:	2005883a 	mov	r2,r4
    f450:	2807883a 	mov	r3,r5
    f454:	dc000e15 	stw	r16,56(sp)
    f458:	d809883a 	mov	r4,sp
    f45c:	880b883a 	mov	r5,r17
    f460:	dc000904 	addi	r16,sp,36
    f464:	d8c00115 	stw	r3,4(sp)
    f468:	d8800015 	stw	r2,0(sp)
    f46c:	d9800215 	stw	r6,8(sp)
    f470:	dfc01015 	stw	ra,64(sp)
    f474:	d9c00315 	stw	r7,12(sp)
    f478:	00100b40 	call	100b4 <__unpack_d>
    f47c:	d9000204 	addi	r4,sp,8
    f480:	800b883a 	mov	r5,r16
    f484:	00100b40 	call	100b4 <__unpack_d>
    f488:	d8800417 	ldw	r2,16(sp)
    f48c:	00c00044 	movi	r3,1
    f490:	01bfffc4 	movi	r6,-1
    f494:	1880062e 	bgeu	r3,r2,f4b0 <__gtdf2+0x70>
    f498:	d8800917 	ldw	r2,36(sp)
    f49c:	8809883a 	mov	r4,r17
    f4a0:	800b883a 	mov	r5,r16
    f4a4:	1880022e 	bgeu	r3,r2,f4b0 <__gtdf2+0x70>
    f4a8:	00101ec0 	call	101ec <__fpcmp_parts_d>
    f4ac:	100d883a 	mov	r6,r2
    f4b0:	3005883a 	mov	r2,r6
    f4b4:	dfc01017 	ldw	ra,64(sp)
    f4b8:	dc400f17 	ldw	r17,60(sp)
    f4bc:	dc000e17 	ldw	r16,56(sp)
    f4c0:	dec01104 	addi	sp,sp,68
    f4c4:	f800283a 	ret

0000f4c8 <__gedf2>:
    f4c8:	deffef04 	addi	sp,sp,-68
    f4cc:	dc400f15 	stw	r17,60(sp)
    f4d0:	dc400404 	addi	r17,sp,16
    f4d4:	2005883a 	mov	r2,r4
    f4d8:	2807883a 	mov	r3,r5
    f4dc:	dc000e15 	stw	r16,56(sp)
    f4e0:	d809883a 	mov	r4,sp
    f4e4:	880b883a 	mov	r5,r17
    f4e8:	dc000904 	addi	r16,sp,36
    f4ec:	d8c00115 	stw	r3,4(sp)
    f4f0:	d8800015 	stw	r2,0(sp)
    f4f4:	d9800215 	stw	r6,8(sp)
    f4f8:	dfc01015 	stw	ra,64(sp)
    f4fc:	d9c00315 	stw	r7,12(sp)
    f500:	00100b40 	call	100b4 <__unpack_d>
    f504:	d9000204 	addi	r4,sp,8
    f508:	800b883a 	mov	r5,r16
    f50c:	00100b40 	call	100b4 <__unpack_d>
    f510:	d8800417 	ldw	r2,16(sp)
    f514:	00c00044 	movi	r3,1
    f518:	01bfffc4 	movi	r6,-1
    f51c:	1880062e 	bgeu	r3,r2,f538 <__gedf2+0x70>
    f520:	d8800917 	ldw	r2,36(sp)
    f524:	8809883a 	mov	r4,r17
    f528:	800b883a 	mov	r5,r16
    f52c:	1880022e 	bgeu	r3,r2,f538 <__gedf2+0x70>
    f530:	00101ec0 	call	101ec <__fpcmp_parts_d>
    f534:	100d883a 	mov	r6,r2
    f538:	3005883a 	mov	r2,r6
    f53c:	dfc01017 	ldw	ra,64(sp)
    f540:	dc400f17 	ldw	r17,60(sp)
    f544:	dc000e17 	ldw	r16,56(sp)
    f548:	dec01104 	addi	sp,sp,68
    f54c:	f800283a 	ret

0000f550 <__ltdf2>:
    f550:	deffef04 	addi	sp,sp,-68
    f554:	dc400f15 	stw	r17,60(sp)
    f558:	dc400404 	addi	r17,sp,16
    f55c:	2005883a 	mov	r2,r4
    f560:	2807883a 	mov	r3,r5
    f564:	dc000e15 	stw	r16,56(sp)
    f568:	d809883a 	mov	r4,sp
    f56c:	880b883a 	mov	r5,r17
    f570:	dc000904 	addi	r16,sp,36
    f574:	d8c00115 	stw	r3,4(sp)
    f578:	d8800015 	stw	r2,0(sp)
    f57c:	d9800215 	stw	r6,8(sp)
    f580:	dfc01015 	stw	ra,64(sp)
    f584:	d9c00315 	stw	r7,12(sp)
    f588:	00100b40 	call	100b4 <__unpack_d>
    f58c:	d9000204 	addi	r4,sp,8
    f590:	800b883a 	mov	r5,r16
    f594:	00100b40 	call	100b4 <__unpack_d>
    f598:	d8800417 	ldw	r2,16(sp)
    f59c:	00c00044 	movi	r3,1
    f5a0:	180d883a 	mov	r6,r3
    f5a4:	1880062e 	bgeu	r3,r2,f5c0 <__ltdf2+0x70>
    f5a8:	d8800917 	ldw	r2,36(sp)
    f5ac:	8809883a 	mov	r4,r17
    f5b0:	800b883a 	mov	r5,r16
    f5b4:	1880022e 	bgeu	r3,r2,f5c0 <__ltdf2+0x70>
    f5b8:	00101ec0 	call	101ec <__fpcmp_parts_d>
    f5bc:	100d883a 	mov	r6,r2
    f5c0:	3005883a 	mov	r2,r6
    f5c4:	dfc01017 	ldw	ra,64(sp)
    f5c8:	dc400f17 	ldw	r17,60(sp)
    f5cc:	dc000e17 	ldw	r16,56(sp)
    f5d0:	dec01104 	addi	sp,sp,68
    f5d4:	f800283a 	ret

0000f5d8 <__ledf2>:
    f5d8:	deffef04 	addi	sp,sp,-68
    f5dc:	dc400f15 	stw	r17,60(sp)
    f5e0:	dc400404 	addi	r17,sp,16
    f5e4:	2005883a 	mov	r2,r4
    f5e8:	2807883a 	mov	r3,r5
    f5ec:	dc000e15 	stw	r16,56(sp)
    f5f0:	d809883a 	mov	r4,sp
    f5f4:	880b883a 	mov	r5,r17
    f5f8:	dc000904 	addi	r16,sp,36
    f5fc:	d8c00115 	stw	r3,4(sp)
    f600:	d8800015 	stw	r2,0(sp)
    f604:	d9800215 	stw	r6,8(sp)
    f608:	dfc01015 	stw	ra,64(sp)
    f60c:	d9c00315 	stw	r7,12(sp)
    f610:	00100b40 	call	100b4 <__unpack_d>
    f614:	d9000204 	addi	r4,sp,8
    f618:	800b883a 	mov	r5,r16
    f61c:	00100b40 	call	100b4 <__unpack_d>
    f620:	d8800417 	ldw	r2,16(sp)
    f624:	00c00044 	movi	r3,1
    f628:	180d883a 	mov	r6,r3
    f62c:	1880062e 	bgeu	r3,r2,f648 <__ledf2+0x70>
    f630:	d8800917 	ldw	r2,36(sp)
    f634:	8809883a 	mov	r4,r17
    f638:	800b883a 	mov	r5,r16
    f63c:	1880022e 	bgeu	r3,r2,f648 <__ledf2+0x70>
    f640:	00101ec0 	call	101ec <__fpcmp_parts_d>
    f644:	100d883a 	mov	r6,r2
    f648:	3005883a 	mov	r2,r6
    f64c:	dfc01017 	ldw	ra,64(sp)
    f650:	dc400f17 	ldw	r17,60(sp)
    f654:	dc000e17 	ldw	r16,56(sp)
    f658:	dec01104 	addi	sp,sp,68
    f65c:	f800283a 	ret

0000f660 <__floatsidf>:
    f660:	2006d7fa 	srli	r3,r4,31
    f664:	defff604 	addi	sp,sp,-40
    f668:	008000c4 	movi	r2,3
    f66c:	dfc00915 	stw	ra,36(sp)
    f670:	dcc00815 	stw	r19,32(sp)
    f674:	dc800715 	stw	r18,28(sp)
    f678:	dc400615 	stw	r17,24(sp)
    f67c:	dc000515 	stw	r16,20(sp)
    f680:	d8800015 	stw	r2,0(sp)
    f684:	d8c00115 	stw	r3,4(sp)
    f688:	20000f1e 	bne	r4,zero,f6c8 <__floatsidf+0x68>
    f68c:	00800084 	movi	r2,2
    f690:	d8800015 	stw	r2,0(sp)
    f694:	d809883a 	mov	r4,sp
    f698:	000fda00 	call	fda0 <__pack_d>
    f69c:	1009883a 	mov	r4,r2
    f6a0:	180b883a 	mov	r5,r3
    f6a4:	2005883a 	mov	r2,r4
    f6a8:	2807883a 	mov	r3,r5
    f6ac:	dfc00917 	ldw	ra,36(sp)
    f6b0:	dcc00817 	ldw	r19,32(sp)
    f6b4:	dc800717 	ldw	r18,28(sp)
    f6b8:	dc400617 	ldw	r17,24(sp)
    f6bc:	dc000517 	ldw	r16,20(sp)
    f6c0:	dec00a04 	addi	sp,sp,40
    f6c4:	f800283a 	ret
    f6c8:	00800f04 	movi	r2,60
    f6cc:	1807003a 	cmpeq	r3,r3,zero
    f6d0:	d8800215 	stw	r2,8(sp)
    f6d4:	18001126 	beq	r3,zero,f71c <__floatsidf+0xbc>
    f6d8:	0027883a 	mov	r19,zero
    f6dc:	2025883a 	mov	r18,r4
    f6e0:	d9000315 	stw	r4,12(sp)
    f6e4:	dcc00415 	stw	r19,16(sp)
    f6e8:	000fb840 	call	fb84 <__clzsi2>
    f6ec:	11000744 	addi	r4,r2,29
    f6f0:	013fe80e 	bge	zero,r4,f694 <__floatsidf+0x34>
    f6f4:	10bfff44 	addi	r2,r2,-3
    f6f8:	10000c16 	blt	r2,zero,f72c <__floatsidf+0xcc>
    f6fc:	90a2983a 	sll	r17,r18,r2
    f700:	0021883a 	mov	r16,zero
    f704:	d8800217 	ldw	r2,8(sp)
    f708:	dc400415 	stw	r17,16(sp)
    f70c:	dc000315 	stw	r16,12(sp)
    f710:	1105c83a 	sub	r2,r2,r4
    f714:	d8800215 	stw	r2,8(sp)
    f718:	003fde06 	br	f694 <__floatsidf+0x34>
    f71c:	00a00034 	movhi	r2,32768
    f720:	20800a26 	beq	r4,r2,f74c <__floatsidf+0xec>
    f724:	0109c83a 	sub	r4,zero,r4
    f728:	003feb06 	br	f6d8 <__floatsidf+0x78>
    f72c:	9006d07a 	srli	r3,r18,1
    f730:	008007c4 	movi	r2,31
    f734:	1105c83a 	sub	r2,r2,r4
    f738:	1886d83a 	srl	r3,r3,r2
    f73c:	9922983a 	sll	r17,r19,r4
    f740:	9120983a 	sll	r16,r18,r4
    f744:	1c62b03a 	or	r17,r3,r17
    f748:	003fee06 	br	f704 <__floatsidf+0xa4>
    f74c:	0009883a 	mov	r4,zero
    f750:	01707834 	movhi	r5,49632
    f754:	003fd306 	br	f6a4 <__floatsidf+0x44>

0000f758 <__fixdfsi>:
    f758:	defff804 	addi	sp,sp,-32
    f75c:	2005883a 	mov	r2,r4
    f760:	2807883a 	mov	r3,r5
    f764:	d809883a 	mov	r4,sp
    f768:	d9400204 	addi	r5,sp,8
    f76c:	d8c00115 	stw	r3,4(sp)
    f770:	d8800015 	stw	r2,0(sp)
    f774:	dfc00715 	stw	ra,28(sp)
    f778:	00100b40 	call	100b4 <__unpack_d>
    f77c:	d8c00217 	ldw	r3,8(sp)
    f780:	00800084 	movi	r2,2
    f784:	1880051e 	bne	r3,r2,f79c <__fixdfsi+0x44>
    f788:	0007883a 	mov	r3,zero
    f78c:	1805883a 	mov	r2,r3
    f790:	dfc00717 	ldw	ra,28(sp)
    f794:	dec00804 	addi	sp,sp,32
    f798:	f800283a 	ret
    f79c:	00800044 	movi	r2,1
    f7a0:	10fff92e 	bgeu	r2,r3,f788 <__fixdfsi+0x30>
    f7a4:	00800104 	movi	r2,4
    f7a8:	18800426 	beq	r3,r2,f7bc <__fixdfsi+0x64>
    f7ac:	d8c00417 	ldw	r3,16(sp)
    f7b0:	183ff516 	blt	r3,zero,f788 <__fixdfsi+0x30>
    f7b4:	00800784 	movi	r2,30
    f7b8:	10c0080e 	bge	r2,r3,f7dc <__fixdfsi+0x84>
    f7bc:	d8800317 	ldw	r2,12(sp)
    f7c0:	1000121e 	bne	r2,zero,f80c <__fixdfsi+0xb4>
    f7c4:	00e00034 	movhi	r3,32768
    f7c8:	18ffffc4 	addi	r3,r3,-1
    f7cc:	1805883a 	mov	r2,r3
    f7d0:	dfc00717 	ldw	ra,28(sp)
    f7d4:	dec00804 	addi	sp,sp,32
    f7d8:	f800283a 	ret
    f7dc:	00800f04 	movi	r2,60
    f7e0:	10d1c83a 	sub	r8,r2,r3
    f7e4:	40bff804 	addi	r2,r8,-32
    f7e8:	d9800517 	ldw	r6,20(sp)
    f7ec:	d9c00617 	ldw	r7,24(sp)
    f7f0:	10000816 	blt	r2,zero,f814 <__fixdfsi+0xbc>
    f7f4:	3888d83a 	srl	r4,r7,r2
    f7f8:	d8800317 	ldw	r2,12(sp)
    f7fc:	2007883a 	mov	r3,r4
    f800:	103fe226 	beq	r2,zero,f78c <__fixdfsi+0x34>
    f804:	0107c83a 	sub	r3,zero,r4
    f808:	003fe006 	br	f78c <__fixdfsi+0x34>
    f80c:	00e00034 	movhi	r3,32768
    f810:	003fde06 	br	f78c <__fixdfsi+0x34>
    f814:	39c7883a 	add	r3,r7,r7
    f818:	008007c4 	movi	r2,31
    f81c:	1205c83a 	sub	r2,r2,r8
    f820:	1886983a 	sll	r3,r3,r2
    f824:	3208d83a 	srl	r4,r6,r8
    f828:	1908b03a 	or	r4,r3,r4
    f82c:	003ff206 	br	f7f8 <__fixdfsi+0xa0>

0000f830 <__truncdfsf2>:
    f830:	defff804 	addi	sp,sp,-32
    f834:	2005883a 	mov	r2,r4
    f838:	2807883a 	mov	r3,r5
    f83c:	d809883a 	mov	r4,sp
    f840:	d9400204 	addi	r5,sp,8
    f844:	d8c00115 	stw	r3,4(sp)
    f848:	d8800015 	stw	r2,0(sp)
    f84c:	dfc00715 	stw	ra,28(sp)
    f850:	00100b40 	call	100b4 <__unpack_d>
    f854:	d9c00517 	ldw	r7,20(sp)
    f858:	da000617 	ldw	r8,24(sp)
    f85c:	02d00034 	movhi	r11,16384
    f860:	5affffc4 	addi	r11,r11,-1
    f864:	3812d7ba 	srli	r9,r7,30
    f868:	401a90ba 	slli	r13,r8,2
    f86c:	3ac4703a 	and	r2,r7,r11
    f870:	0007883a 	mov	r3,zero
    f874:	6a52b03a 	or	r9,r13,r9
    f878:	10c4b03a 	or	r2,r2,r3
    f87c:	d9000217 	ldw	r4,8(sp)
    f880:	d9400317 	ldw	r5,12(sp)
    f884:	d9800417 	ldw	r6,16(sp)
    f888:	480f883a 	mov	r7,r9
    f88c:	10000126 	beq	r2,zero,f894 <__truncdfsf2+0x64>
    f890:	49c00054 	ori	r7,r9,1
    f894:	000fd740 	call	fd74 <__make_fp>
    f898:	dfc00717 	ldw	ra,28(sp)
    f89c:	dec00804 	addi	sp,sp,32
    f8a0:	f800283a 	ret

0000f8a4 <__floatunsidf>:
    f8a4:	defff204 	addi	sp,sp,-56
    f8a8:	dfc00d15 	stw	ra,52(sp)
    f8ac:	ddc00c15 	stw	r23,48(sp)
    f8b0:	dd800b15 	stw	r22,44(sp)
    f8b4:	dd400a15 	stw	r21,40(sp)
    f8b8:	dd000915 	stw	r20,36(sp)
    f8bc:	dcc00815 	stw	r19,32(sp)
    f8c0:	dc800715 	stw	r18,28(sp)
    f8c4:	dc400615 	stw	r17,24(sp)
    f8c8:	dc000515 	stw	r16,20(sp)
    f8cc:	d8000115 	stw	zero,4(sp)
    f8d0:	20000f1e 	bne	r4,zero,f910 <__floatunsidf+0x6c>
    f8d4:	00800084 	movi	r2,2
    f8d8:	d8800015 	stw	r2,0(sp)
    f8dc:	d809883a 	mov	r4,sp
    f8e0:	000fda00 	call	fda0 <__pack_d>
    f8e4:	dfc00d17 	ldw	ra,52(sp)
    f8e8:	ddc00c17 	ldw	r23,48(sp)
    f8ec:	dd800b17 	ldw	r22,44(sp)
    f8f0:	dd400a17 	ldw	r21,40(sp)
    f8f4:	dd000917 	ldw	r20,36(sp)
    f8f8:	dcc00817 	ldw	r19,32(sp)
    f8fc:	dc800717 	ldw	r18,28(sp)
    f900:	dc400617 	ldw	r17,24(sp)
    f904:	dc000517 	ldw	r16,20(sp)
    f908:	dec00e04 	addi	sp,sp,56
    f90c:	f800283a 	ret
    f910:	008000c4 	movi	r2,3
    f914:	00c00f04 	movi	r3,60
    f918:	002f883a 	mov	r23,zero
    f91c:	202d883a 	mov	r22,r4
    f920:	d8800015 	stw	r2,0(sp)
    f924:	d8c00215 	stw	r3,8(sp)
    f928:	d9000315 	stw	r4,12(sp)
    f92c:	ddc00415 	stw	r23,16(sp)
    f930:	000fb840 	call	fb84 <__clzsi2>
    f934:	12400744 	addi	r9,r2,29
    f938:	48000b16 	blt	r9,zero,f968 <__floatunsidf+0xc4>
    f93c:	483fe726 	beq	r9,zero,f8dc <__floatunsidf+0x38>
    f940:	10bfff44 	addi	r2,r2,-3
    f944:	10002e16 	blt	r2,zero,fa00 <__floatunsidf+0x15c>
    f948:	b0a2983a 	sll	r17,r22,r2
    f94c:	0021883a 	mov	r16,zero
    f950:	d8800217 	ldw	r2,8(sp)
    f954:	dc400415 	stw	r17,16(sp)
    f958:	dc000315 	stw	r16,12(sp)
    f95c:	1245c83a 	sub	r2,r2,r9
    f960:	d8800215 	stw	r2,8(sp)
    f964:	003fdd06 	br	f8dc <__floatunsidf+0x38>
    f968:	0255c83a 	sub	r10,zero,r9
    f96c:	51bff804 	addi	r6,r10,-32
    f970:	30001b16 	blt	r6,zero,f9e0 <__floatunsidf+0x13c>
    f974:	b9a8d83a 	srl	r20,r23,r6
    f978:	002b883a 	mov	r21,zero
    f97c:	000f883a 	mov	r7,zero
    f980:	01000044 	movi	r4,1
    f984:	0011883a 	mov	r8,zero
    f988:	30002516 	blt	r6,zero,fa20 <__floatunsidf+0x17c>
    f98c:	21a6983a 	sll	r19,r4,r6
    f990:	0025883a 	mov	r18,zero
    f994:	00bfffc4 	movi	r2,-1
    f998:	9089883a 	add	r4,r18,r2
    f99c:	988b883a 	add	r5,r19,r2
    f9a0:	248d803a 	cmpltu	r6,r4,r18
    f9a4:	314b883a 	add	r5,r6,r5
    f9a8:	b104703a 	and	r2,r22,r4
    f9ac:	b946703a 	and	r3,r23,r5
    f9b0:	10c4b03a 	or	r2,r2,r3
    f9b4:	10000226 	beq	r2,zero,f9c0 <__floatunsidf+0x11c>
    f9b8:	01c00044 	movi	r7,1
    f9bc:	0011883a 	mov	r8,zero
    f9c0:	d9000217 	ldw	r4,8(sp)
    f9c4:	a1c4b03a 	or	r2,r20,r7
    f9c8:	aa06b03a 	or	r3,r21,r8
    f9cc:	2249c83a 	sub	r4,r4,r9
    f9d0:	d8c00415 	stw	r3,16(sp)
    f9d4:	d9000215 	stw	r4,8(sp)
    f9d8:	d8800315 	stw	r2,12(sp)
    f9dc:	003fbf06 	br	f8dc <__floatunsidf+0x38>
    f9e0:	bdc7883a 	add	r3,r23,r23
    f9e4:	008007c4 	movi	r2,31
    f9e8:	1285c83a 	sub	r2,r2,r10
    f9ec:	1886983a 	sll	r3,r3,r2
    f9f0:	b2a8d83a 	srl	r20,r22,r10
    f9f4:	baaad83a 	srl	r21,r23,r10
    f9f8:	1d28b03a 	or	r20,r3,r20
    f9fc:	003fdf06 	br	f97c <__floatunsidf+0xd8>
    fa00:	b006d07a 	srli	r3,r22,1
    fa04:	008007c4 	movi	r2,31
    fa08:	1245c83a 	sub	r2,r2,r9
    fa0c:	1886d83a 	srl	r3,r3,r2
    fa10:	ba62983a 	sll	r17,r23,r9
    fa14:	b260983a 	sll	r16,r22,r9
    fa18:	1c62b03a 	or	r17,r3,r17
    fa1c:	003fcc06 	br	f950 <__floatunsidf+0xac>
    fa20:	2006d07a 	srli	r3,r4,1
    fa24:	008007c4 	movi	r2,31
    fa28:	1285c83a 	sub	r2,r2,r10
    fa2c:	18a6d83a 	srl	r19,r3,r2
    fa30:	22a4983a 	sll	r18,r4,r10
    fa34:	003fd706 	br	f994 <__floatunsidf+0xf0>

0000fa38 <udivmodsi4>:
    fa38:	29001b2e 	bgeu	r5,r4,faa8 <udivmodsi4+0x70>
    fa3c:	28001a16 	blt	r5,zero,faa8 <udivmodsi4+0x70>
    fa40:	00800044 	movi	r2,1
    fa44:	0007883a 	mov	r3,zero
    fa48:	01c007c4 	movi	r7,31
    fa4c:	00000306 	br	fa5c <udivmodsi4+0x24>
    fa50:	19c01326 	beq	r3,r7,faa0 <udivmodsi4+0x68>
    fa54:	18c00044 	addi	r3,r3,1
    fa58:	28000416 	blt	r5,zero,fa6c <udivmodsi4+0x34>
    fa5c:	294b883a 	add	r5,r5,r5
    fa60:	1085883a 	add	r2,r2,r2
    fa64:	293ffa36 	bltu	r5,r4,fa50 <udivmodsi4+0x18>
    fa68:	10000d26 	beq	r2,zero,faa0 <udivmodsi4+0x68>
    fa6c:	0007883a 	mov	r3,zero
    fa70:	21400236 	bltu	r4,r5,fa7c <udivmodsi4+0x44>
    fa74:	2149c83a 	sub	r4,r4,r5
    fa78:	1886b03a 	or	r3,r3,r2
    fa7c:	1004d07a 	srli	r2,r2,1
    fa80:	280ad07a 	srli	r5,r5,1
    fa84:	103ffa1e 	bne	r2,zero,fa70 <udivmodsi4+0x38>
    fa88:	30000226 	beq	r6,zero,fa94 <udivmodsi4+0x5c>
    fa8c:	2005883a 	mov	r2,r4
    fa90:	f800283a 	ret
    fa94:	1809883a 	mov	r4,r3
    fa98:	2005883a 	mov	r2,r4
    fa9c:	f800283a 	ret
    faa0:	0007883a 	mov	r3,zero
    faa4:	003ff806 	br	fa88 <udivmodsi4+0x50>
    faa8:	00800044 	movi	r2,1
    faac:	0007883a 	mov	r3,zero
    fab0:	003fef06 	br	fa70 <udivmodsi4+0x38>

0000fab4 <__divsi3>:
    fab4:	defffe04 	addi	sp,sp,-8
    fab8:	dc000015 	stw	r16,0(sp)
    fabc:	dfc00115 	stw	ra,4(sp)
    fac0:	0021883a 	mov	r16,zero
    fac4:	20000c16 	blt	r4,zero,faf8 <__divsi3+0x44>
    fac8:	000d883a 	mov	r6,zero
    facc:	28000e16 	blt	r5,zero,fb08 <__divsi3+0x54>
    fad0:	000fa380 	call	fa38 <udivmodsi4>
    fad4:	1007883a 	mov	r3,r2
    fad8:	8005003a 	cmpeq	r2,r16,zero
    fadc:	1000011e 	bne	r2,zero,fae4 <__divsi3+0x30>
    fae0:	00c7c83a 	sub	r3,zero,r3
    fae4:	1805883a 	mov	r2,r3
    fae8:	dfc00117 	ldw	ra,4(sp)
    faec:	dc000017 	ldw	r16,0(sp)
    faf0:	dec00204 	addi	sp,sp,8
    faf4:	f800283a 	ret
    faf8:	0109c83a 	sub	r4,zero,r4
    fafc:	04000044 	movi	r16,1
    fb00:	000d883a 	mov	r6,zero
    fb04:	283ff20e 	bge	r5,zero,fad0 <__divsi3+0x1c>
    fb08:	014bc83a 	sub	r5,zero,r5
    fb0c:	8021003a 	cmpeq	r16,r16,zero
    fb10:	003fef06 	br	fad0 <__divsi3+0x1c>

0000fb14 <__modsi3>:
    fb14:	deffff04 	addi	sp,sp,-4
    fb18:	dfc00015 	stw	ra,0(sp)
    fb1c:	01800044 	movi	r6,1
    fb20:	2807883a 	mov	r3,r5
    fb24:	20000416 	blt	r4,zero,fb38 <__modsi3+0x24>
    fb28:	28000c16 	blt	r5,zero,fb5c <__modsi3+0x48>
    fb2c:	dfc00017 	ldw	ra,0(sp)
    fb30:	dec00104 	addi	sp,sp,4
    fb34:	000fa381 	jmpi	fa38 <udivmodsi4>
    fb38:	0109c83a 	sub	r4,zero,r4
    fb3c:	28000b16 	blt	r5,zero,fb6c <__modsi3+0x58>
    fb40:	180b883a 	mov	r5,r3
    fb44:	01800044 	movi	r6,1
    fb48:	000fa380 	call	fa38 <udivmodsi4>
    fb4c:	0085c83a 	sub	r2,zero,r2
    fb50:	dfc00017 	ldw	ra,0(sp)
    fb54:	dec00104 	addi	sp,sp,4
    fb58:	f800283a 	ret
    fb5c:	014bc83a 	sub	r5,zero,r5
    fb60:	dfc00017 	ldw	ra,0(sp)
    fb64:	dec00104 	addi	sp,sp,4
    fb68:	000fa381 	jmpi	fa38 <udivmodsi4>
    fb6c:	0147c83a 	sub	r3,zero,r5
    fb70:	003ff306 	br	fb40 <__modsi3+0x2c>

0000fb74 <__udivsi3>:
    fb74:	000d883a 	mov	r6,zero
    fb78:	000fa381 	jmpi	fa38 <udivmodsi4>

0000fb7c <__umodsi3>:
    fb7c:	01800044 	movi	r6,1
    fb80:	000fa381 	jmpi	fa38 <udivmodsi4>

0000fb84 <__clzsi2>:
    fb84:	00bfffd4 	movui	r2,65535
    fb88:	11000e36 	bltu	r2,r4,fbc4 <__clzsi2+0x40>
    fb8c:	00803fc4 	movi	r2,255
    fb90:	01400204 	movi	r5,8
    fb94:	0007883a 	mov	r3,zero
    fb98:	11001036 	bltu	r2,r4,fbdc <__clzsi2+0x58>
    fb9c:	000b883a 	mov	r5,zero
    fba0:	20c6d83a 	srl	r3,r4,r3
    fba4:	00800074 	movhi	r2,1
    fba8:	10901604 	addi	r2,r2,16472
    fbac:	1887883a 	add	r3,r3,r2
    fbb0:	18800003 	ldbu	r2,0(r3)
    fbb4:	00c00804 	movi	r3,32
    fbb8:	2885883a 	add	r2,r5,r2
    fbbc:	1885c83a 	sub	r2,r3,r2
    fbc0:	f800283a 	ret
    fbc4:	01400404 	movi	r5,16
    fbc8:	00804034 	movhi	r2,256
    fbcc:	10bfffc4 	addi	r2,r2,-1
    fbd0:	2807883a 	mov	r3,r5
    fbd4:	113ff22e 	bgeu	r2,r4,fba0 <__clzsi2+0x1c>
    fbd8:	01400604 	movi	r5,24
    fbdc:	2807883a 	mov	r3,r5
    fbe0:	20c6d83a 	srl	r3,r4,r3
    fbe4:	00800074 	movhi	r2,1
    fbe8:	10901604 	addi	r2,r2,16472
    fbec:	1887883a 	add	r3,r3,r2
    fbf0:	18800003 	ldbu	r2,0(r3)
    fbf4:	00c00804 	movi	r3,32
    fbf8:	2885883a 	add	r2,r5,r2
    fbfc:	1885c83a 	sub	r2,r3,r2
    fc00:	f800283a 	ret

0000fc04 <__unpack_f>:
    fc04:	21800017 	ldw	r6,0(r4)
    fc08:	00c02034 	movhi	r3,128
    fc0c:	18ffffc4 	addi	r3,r3,-1
    fc10:	3004d5fa 	srli	r2,r6,23
    fc14:	3008d7fa 	srli	r4,r6,31
    fc18:	30ce703a 	and	r7,r6,r3
    fc1c:	10c03fcc 	andi	r3,r2,255
    fc20:	29000115 	stw	r4,4(r5)
    fc24:	1800131e 	bne	r3,zero,fc74 <__unpack_f+0x70>
    fc28:	38000f26 	beq	r7,zero,fc68 <__unpack_f+0x64>
    fc2c:	380691fa 	slli	r3,r7,7
    fc30:	01bfe084 	movi	r6,-126
    fc34:	008000c4 	movi	r2,3
    fc38:	01100034 	movhi	r4,16384
    fc3c:	213fffc4 	addi	r4,r4,-1
    fc40:	28800015 	stw	r2,0(r5)
    fc44:	29800215 	stw	r6,8(r5)
    fc48:	20c00536 	bltu	r4,r3,fc60 <__unpack_f+0x5c>
    fc4c:	3005883a 	mov	r2,r6
    fc50:	18c7883a 	add	r3,r3,r3
    fc54:	10bfffc4 	addi	r2,r2,-1
    fc58:	20fffd2e 	bgeu	r4,r3,fc50 <__unpack_f+0x4c>
    fc5c:	28800215 	stw	r2,8(r5)
    fc60:	28c00315 	stw	r3,12(r5)
    fc64:	f800283a 	ret
    fc68:	00800084 	movi	r2,2
    fc6c:	28800015 	stw	r2,0(r5)
    fc70:	f800283a 	ret
    fc74:	00803fc4 	movi	r2,255
    fc78:	18800826 	beq	r3,r2,fc9c <__unpack_f+0x98>
    fc7c:	380491fa 	slli	r2,r7,7
    fc80:	18ffe044 	addi	r3,r3,-127
    fc84:	28c00215 	stw	r3,8(r5)
    fc88:	10900034 	orhi	r2,r2,16384
    fc8c:	28800315 	stw	r2,12(r5)
    fc90:	008000c4 	movi	r2,3
    fc94:	28800015 	stw	r2,0(r5)
    fc98:	f800283a 	ret
    fc9c:	3800031e 	bne	r7,zero,fcac <__unpack_f+0xa8>
    fca0:	00800104 	movi	r2,4
    fca4:	28800015 	stw	r2,0(r5)
    fca8:	f800283a 	ret
    fcac:	3080042c 	andhi	r2,r6,16
    fcb0:	10000426 	beq	r2,zero,fcc4 <__unpack_f+0xc0>
    fcb4:	00800044 	movi	r2,1
    fcb8:	28800015 	stw	r2,0(r5)
    fcbc:	29c00315 	stw	r7,12(r5)
    fcc0:	f800283a 	ret
    fcc4:	28000015 	stw	zero,0(r5)
    fcc8:	003ffc06 	br	fcbc <__unpack_f+0xb8>

0000fccc <__fpcmp_parts_f>:
    fccc:	21800017 	ldw	r6,0(r4)
    fcd0:	00c00044 	movi	r3,1
    fcd4:	19800a2e 	bgeu	r3,r6,fd00 <__fpcmp_parts_f+0x34>
    fcd8:	28800017 	ldw	r2,0(r5)
    fcdc:	1880082e 	bgeu	r3,r2,fd00 <__fpcmp_parts_f+0x34>
    fce0:	00c00104 	movi	r3,4
    fce4:	30c01e26 	beq	r6,r3,fd60 <__fpcmp_parts_f+0x94>
    fce8:	10c01a26 	beq	r2,r3,fd54 <__fpcmp_parts_f+0x88>
    fcec:	00c00084 	movi	r3,2
    fcf0:	30c00526 	beq	r6,r3,fd08 <__fpcmp_parts_f+0x3c>
    fcf4:	10c0071e 	bne	r2,r3,fd14 <__fpcmp_parts_f+0x48>
    fcf8:	20800117 	ldw	r2,4(r4)
    fcfc:	1000091e 	bne	r2,zero,fd24 <__fpcmp_parts_f+0x58>
    fd00:	00800044 	movi	r2,1
    fd04:	f800283a 	ret
    fd08:	10c0121e 	bne	r2,r3,fd54 <__fpcmp_parts_f+0x88>
    fd0c:	0005883a 	mov	r2,zero
    fd10:	f800283a 	ret
    fd14:	20c00117 	ldw	r3,4(r4)
    fd18:	28800117 	ldw	r2,4(r5)
    fd1c:	18800326 	beq	r3,r2,fd2c <__fpcmp_parts_f+0x60>
    fd20:	183ff726 	beq	r3,zero,fd00 <__fpcmp_parts_f+0x34>
    fd24:	00bfffc4 	movi	r2,-1
    fd28:	f800283a 	ret
    fd2c:	21800217 	ldw	r6,8(r4)
    fd30:	28800217 	ldw	r2,8(r5)
    fd34:	11bffa16 	blt	r2,r6,fd20 <__fpcmp_parts_f+0x54>
    fd38:	30800416 	blt	r6,r2,fd4c <__fpcmp_parts_f+0x80>
    fd3c:	21000317 	ldw	r4,12(r4)
    fd40:	29400317 	ldw	r5,12(r5)
    fd44:	293ff636 	bltu	r5,r4,fd20 <__fpcmp_parts_f+0x54>
    fd48:	217ff02e 	bgeu	r4,r5,fd0c <__fpcmp_parts_f+0x40>
    fd4c:	183fec1e 	bne	r3,zero,fd00 <__fpcmp_parts_f+0x34>
    fd50:	003ff406 	br	fd24 <__fpcmp_parts_f+0x58>
    fd54:	28800117 	ldw	r2,4(r5)
    fd58:	103fe91e 	bne	r2,zero,fd00 <__fpcmp_parts_f+0x34>
    fd5c:	003ff106 	br	fd24 <__fpcmp_parts_f+0x58>
    fd60:	11bfe51e 	bne	r2,r6,fcf8 <__fpcmp_parts_f+0x2c>
    fd64:	28c00117 	ldw	r3,4(r5)
    fd68:	20800117 	ldw	r2,4(r4)
    fd6c:	1885c83a 	sub	r2,r3,r2
    fd70:	f800283a 	ret

0000fd74 <__make_fp>:
    fd74:	defffb04 	addi	sp,sp,-20
    fd78:	d9000015 	stw	r4,0(sp)
    fd7c:	d809883a 	mov	r4,sp
    fd80:	dfc00415 	stw	ra,16(sp)
    fd84:	d9400115 	stw	r5,4(sp)
    fd88:	d9800215 	stw	r6,8(sp)
    fd8c:	d9c00315 	stw	r7,12(sp)
    fd90:	00102b40 	call	102b4 <__pack_f>
    fd94:	dfc00417 	ldw	ra,16(sp)
    fd98:	dec00504 	addi	sp,sp,20
    fd9c:	f800283a 	ret

0000fda0 <__pack_d>:
    fda0:	20c00017 	ldw	r3,0(r4)
    fda4:	defffd04 	addi	sp,sp,-12
    fda8:	dc000015 	stw	r16,0(sp)
    fdac:	dc800215 	stw	r18,8(sp)
    fdb0:	dc400115 	stw	r17,4(sp)
    fdb4:	00800044 	movi	r2,1
    fdb8:	22000317 	ldw	r8,12(r4)
    fdbc:	001f883a 	mov	r15,zero
    fdc0:	22400417 	ldw	r9,16(r4)
    fdc4:	24000117 	ldw	r16,4(r4)
    fdc8:	10c0552e 	bgeu	r2,r3,ff20 <__pack_d+0x180>
    fdcc:	00800104 	movi	r2,4
    fdd0:	18804f26 	beq	r3,r2,ff10 <__pack_d+0x170>
    fdd4:	00800084 	movi	r2,2
    fdd8:	18800226 	beq	r3,r2,fde4 <__pack_d+0x44>
    fddc:	4244b03a 	or	r2,r8,r9
    fde0:	10001a1e 	bne	r2,zero,fe4c <__pack_d+0xac>
    fde4:	000d883a 	mov	r6,zero
    fde8:	000f883a 	mov	r7,zero
    fdec:	0011883a 	mov	r8,zero
    fdf0:	00800434 	movhi	r2,16
    fdf4:	10bfffc4 	addi	r2,r2,-1
    fdf8:	301d883a 	mov	r14,r6
    fdfc:	3884703a 	and	r2,r7,r2
    fe00:	400a953a 	slli	r5,r8,20
    fe04:	79bffc2c 	andhi	r6,r15,65520
    fe08:	308cb03a 	or	r6,r6,r2
    fe0c:	00e00434 	movhi	r3,32784
    fe10:	18ffffc4 	addi	r3,r3,-1
    fe14:	800497fa 	slli	r2,r16,31
    fe18:	30c6703a 	and	r3,r6,r3
    fe1c:	1946b03a 	or	r3,r3,r5
    fe20:	01600034 	movhi	r5,32768
    fe24:	297fffc4 	addi	r5,r5,-1
    fe28:	194a703a 	and	r5,r3,r5
    fe2c:	288ab03a 	or	r5,r5,r2
    fe30:	2807883a 	mov	r3,r5
    fe34:	7005883a 	mov	r2,r14
    fe38:	dc800217 	ldw	r18,8(sp)
    fe3c:	dc400117 	ldw	r17,4(sp)
    fe40:	dc000017 	ldw	r16,0(sp)
    fe44:	dec00304 	addi	sp,sp,12
    fe48:	f800283a 	ret
    fe4c:	21000217 	ldw	r4,8(r4)
    fe50:	00bf0084 	movi	r2,-1022
    fe54:	20803f16 	blt	r4,r2,ff54 <__pack_d+0x1b4>
    fe58:	0080ffc4 	movi	r2,1023
    fe5c:	11002c16 	blt	r2,r4,ff10 <__pack_d+0x170>
    fe60:	00803fc4 	movi	r2,255
    fe64:	408c703a 	and	r6,r8,r2
    fe68:	00802004 	movi	r2,128
    fe6c:	0007883a 	mov	r3,zero
    fe70:	000f883a 	mov	r7,zero
    fe74:	2280ffc4 	addi	r10,r4,1023
    fe78:	30801e26 	beq	r6,r2,fef4 <__pack_d+0x154>
    fe7c:	00801fc4 	movi	r2,127
    fe80:	4089883a 	add	r4,r8,r2
    fe84:	220d803a 	cmpltu	r6,r4,r8
    fe88:	324d883a 	add	r6,r6,r9
    fe8c:	2011883a 	mov	r8,r4
    fe90:	3013883a 	mov	r9,r6
    fe94:	00880034 	movhi	r2,8192
    fe98:	10bfffc4 	addi	r2,r2,-1
    fe9c:	12400d36 	bltu	r2,r9,fed4 <__pack_d+0x134>
    fea0:	4804963a 	slli	r2,r9,24
    fea4:	400cd23a 	srli	r6,r8,8
    fea8:	480ed23a 	srli	r7,r9,8
    feac:	013fffc4 	movi	r4,-1
    feb0:	118cb03a 	or	r6,r2,r6
    feb4:	01400434 	movhi	r5,16
    feb8:	297fffc4 	addi	r5,r5,-1
    febc:	3104703a 	and	r2,r6,r4
    fec0:	3946703a 	and	r3,r7,r5
    fec4:	5201ffcc 	andi	r8,r10,2047
    fec8:	100d883a 	mov	r6,r2
    fecc:	180f883a 	mov	r7,r3
    fed0:	003fc706 	br	fdf0 <__pack_d+0x50>
    fed4:	480897fa 	slli	r4,r9,31
    fed8:	4004d07a 	srli	r2,r8,1
    fedc:	4806d07a 	srli	r3,r9,1
    fee0:	52800044 	addi	r10,r10,1
    fee4:	2084b03a 	or	r2,r4,r2
    fee8:	1011883a 	mov	r8,r2
    feec:	1813883a 	mov	r9,r3
    fef0:	003feb06 	br	fea0 <__pack_d+0x100>
    fef4:	383fe11e 	bne	r7,zero,fe7c <__pack_d+0xdc>
    fef8:	01004004 	movi	r4,256
    fefc:	4104703a 	and	r2,r8,r4
    ff00:	10c4b03a 	or	r2,r2,r3
    ff04:	103fe326 	beq	r2,zero,fe94 <__pack_d+0xf4>
    ff08:	3005883a 	mov	r2,r6
    ff0c:	003fdc06 	br	fe80 <__pack_d+0xe0>
    ff10:	000d883a 	mov	r6,zero
    ff14:	000f883a 	mov	r7,zero
    ff18:	0201ffc4 	movi	r8,2047
    ff1c:	003fb406 	br	fdf0 <__pack_d+0x50>
    ff20:	0005883a 	mov	r2,zero
    ff24:	00c00234 	movhi	r3,8
    ff28:	408cb03a 	or	r6,r8,r2
    ff2c:	48ceb03a 	or	r7,r9,r3
    ff30:	013fffc4 	movi	r4,-1
    ff34:	01400434 	movhi	r5,16
    ff38:	297fffc4 	addi	r5,r5,-1
    ff3c:	3104703a 	and	r2,r6,r4
    ff40:	3946703a 	and	r3,r7,r5
    ff44:	100d883a 	mov	r6,r2
    ff48:	180f883a 	mov	r7,r3
    ff4c:	0201ffc4 	movi	r8,2047
    ff50:	003fa706 	br	fdf0 <__pack_d+0x50>
    ff54:	1109c83a 	sub	r4,r2,r4
    ff58:	00800e04 	movi	r2,56
    ff5c:	11004316 	blt	r2,r4,1006c <__pack_d+0x2cc>
    ff60:	21fff804 	addi	r7,r4,-32
    ff64:	38004516 	blt	r7,zero,1007c <__pack_d+0x2dc>
    ff68:	49d8d83a 	srl	r12,r9,r7
    ff6c:	001b883a 	mov	r13,zero
    ff70:	0023883a 	mov	r17,zero
    ff74:	01400044 	movi	r5,1
    ff78:	0025883a 	mov	r18,zero
    ff7c:	38004716 	blt	r7,zero,1009c <__pack_d+0x2fc>
    ff80:	29d6983a 	sll	r11,r5,r7
    ff84:	0015883a 	mov	r10,zero
    ff88:	00bfffc4 	movi	r2,-1
    ff8c:	5089883a 	add	r4,r10,r2
    ff90:	588b883a 	add	r5,r11,r2
    ff94:	228d803a 	cmpltu	r6,r4,r10
    ff98:	314b883a 	add	r5,r6,r5
    ff9c:	4104703a 	and	r2,r8,r4
    ffa0:	4946703a 	and	r3,r9,r5
    ffa4:	10c4b03a 	or	r2,r2,r3
    ffa8:	10000226 	beq	r2,zero,ffb4 <__pack_d+0x214>
    ffac:	04400044 	movi	r17,1
    ffb0:	0025883a 	mov	r18,zero
    ffb4:	00803fc4 	movi	r2,255
    ffb8:	644eb03a 	or	r7,r12,r17
    ffbc:	3892703a 	and	r9,r7,r2
    ffc0:	00802004 	movi	r2,128
    ffc4:	6c90b03a 	or	r8,r13,r18
    ffc8:	0015883a 	mov	r10,zero
    ffcc:	48801626 	beq	r9,r2,10028 <__pack_d+0x288>
    ffd0:	01001fc4 	movi	r4,127
    ffd4:	3905883a 	add	r2,r7,r4
    ffd8:	11cd803a 	cmpltu	r6,r2,r7
    ffdc:	320d883a 	add	r6,r6,r8
    ffe0:	100f883a 	mov	r7,r2
    ffe4:	00840034 	movhi	r2,4096
    ffe8:	10bfffc4 	addi	r2,r2,-1
    ffec:	3011883a 	mov	r8,r6
    fff0:	0007883a 	mov	r3,zero
    fff4:	11801b36 	bltu	r2,r6,10064 <__pack_d+0x2c4>
    fff8:	4004963a 	slli	r2,r8,24
    fffc:	3808d23a 	srli	r4,r7,8
   10000:	400ad23a 	srli	r5,r8,8
   10004:	1813883a 	mov	r9,r3
   10008:	1108b03a 	or	r4,r2,r4
   1000c:	00bfffc4 	movi	r2,-1
   10010:	00c00434 	movhi	r3,16
   10014:	18ffffc4 	addi	r3,r3,-1
   10018:	208c703a 	and	r6,r4,r2
   1001c:	28ce703a 	and	r7,r5,r3
   10020:	4a01ffcc 	andi	r8,r9,2047
   10024:	003f7206 	br	fdf0 <__pack_d+0x50>
   10028:	503fe91e 	bne	r10,zero,ffd0 <__pack_d+0x230>
   1002c:	01004004 	movi	r4,256
   10030:	3904703a 	and	r2,r7,r4
   10034:	0007883a 	mov	r3,zero
   10038:	10c4b03a 	or	r2,r2,r3
   1003c:	10000626 	beq	r2,zero,10058 <__pack_d+0x2b8>
   10040:	3a45883a 	add	r2,r7,r9
   10044:	11cd803a 	cmpltu	r6,r2,r7
   10048:	320d883a 	add	r6,r6,r8
   1004c:	100f883a 	mov	r7,r2
   10050:	3011883a 	mov	r8,r6
   10054:	0007883a 	mov	r3,zero
   10058:	00840034 	movhi	r2,4096
   1005c:	10bfffc4 	addi	r2,r2,-1
   10060:	123fe52e 	bgeu	r2,r8,fff8 <__pack_d+0x258>
   10064:	00c00044 	movi	r3,1
   10068:	003fe306 	br	fff8 <__pack_d+0x258>
   1006c:	0009883a 	mov	r4,zero
   10070:	0013883a 	mov	r9,zero
   10074:	000b883a 	mov	r5,zero
   10078:	003fe406 	br	1000c <__pack_d+0x26c>
   1007c:	4a47883a 	add	r3,r9,r9
   10080:	008007c4 	movi	r2,31
   10084:	1105c83a 	sub	r2,r2,r4
   10088:	1886983a 	sll	r3,r3,r2
   1008c:	4118d83a 	srl	r12,r8,r4
   10090:	491ad83a 	srl	r13,r9,r4
   10094:	1b18b03a 	or	r12,r3,r12
   10098:	003fb506 	br	ff70 <__pack_d+0x1d0>
   1009c:	2806d07a 	srli	r3,r5,1
   100a0:	008007c4 	movi	r2,31
   100a4:	1105c83a 	sub	r2,r2,r4
   100a8:	1896d83a 	srl	r11,r3,r2
   100ac:	2914983a 	sll	r10,r5,r4
   100b0:	003fb506 	br	ff88 <__pack_d+0x1e8>

000100b4 <__unpack_d>:
   100b4:	20c00117 	ldw	r3,4(r4)
   100b8:	22400017 	ldw	r9,0(r4)
   100bc:	00800434 	movhi	r2,16
   100c0:	10bfffc4 	addi	r2,r2,-1
   100c4:	1808d53a 	srli	r4,r3,20
   100c8:	180cd7fa 	srli	r6,r3,31
   100cc:	1894703a 	and	r10,r3,r2
   100d0:	2201ffcc 	andi	r8,r4,2047
   100d4:	281b883a 	mov	r13,r5
   100d8:	4817883a 	mov	r11,r9
   100dc:	29800115 	stw	r6,4(r5)
   100e0:	5019883a 	mov	r12,r10
   100e4:	40001e1e 	bne	r8,zero,10160 <__unpack_d+0xac>
   100e8:	4a84b03a 	or	r2,r9,r10
   100ec:	10001926 	beq	r2,zero,10154 <__unpack_d+0xa0>
   100f0:	4804d63a 	srli	r2,r9,24
   100f4:	500c923a 	slli	r6,r10,8
   100f8:	013f0084 	movi	r4,-1022
   100fc:	00c40034 	movhi	r3,4096
   10100:	18ffffc4 	addi	r3,r3,-1
   10104:	118cb03a 	or	r6,r2,r6
   10108:	008000c4 	movi	r2,3
   1010c:	480a923a 	slli	r5,r9,8
   10110:	68800015 	stw	r2,0(r13)
   10114:	69000215 	stw	r4,8(r13)
   10118:	19800b36 	bltu	r3,r6,10148 <__unpack_d+0x94>
   1011c:	200f883a 	mov	r7,r4
   10120:	1811883a 	mov	r8,r3
   10124:	2945883a 	add	r2,r5,r5
   10128:	1149803a 	cmpltu	r4,r2,r5
   1012c:	3187883a 	add	r3,r6,r6
   10130:	20c9883a 	add	r4,r4,r3
   10134:	100b883a 	mov	r5,r2
   10138:	200d883a 	mov	r6,r4
   1013c:	39ffffc4 	addi	r7,r7,-1
   10140:	413ff82e 	bgeu	r8,r4,10124 <__unpack_d+0x70>
   10144:	69c00215 	stw	r7,8(r13)
   10148:	69800415 	stw	r6,16(r13)
   1014c:	69400315 	stw	r5,12(r13)
   10150:	f800283a 	ret
   10154:	00800084 	movi	r2,2
   10158:	28800015 	stw	r2,0(r5)
   1015c:	f800283a 	ret
   10160:	0081ffc4 	movi	r2,2047
   10164:	40800f26 	beq	r8,r2,101a4 <__unpack_d+0xf0>
   10168:	480cd63a 	srli	r6,r9,24
   1016c:	5006923a 	slli	r3,r10,8
   10170:	4804923a 	slli	r2,r9,8
   10174:	0009883a 	mov	r4,zero
   10178:	30c6b03a 	or	r3,r6,r3
   1017c:	01440034 	movhi	r5,4096
   10180:	110cb03a 	or	r6,r2,r4
   10184:	423f0044 	addi	r8,r8,-1023
   10188:	194eb03a 	or	r7,r3,r5
   1018c:	008000c4 	movi	r2,3
   10190:	69c00415 	stw	r7,16(r13)
   10194:	6a000215 	stw	r8,8(r13)
   10198:	68800015 	stw	r2,0(r13)
   1019c:	69800315 	stw	r6,12(r13)
   101a0:	f800283a 	ret
   101a4:	4a84b03a 	or	r2,r9,r10
   101a8:	1000031e 	bne	r2,zero,101b8 <__unpack_d+0x104>
   101ac:	00800104 	movi	r2,4
   101b0:	28800015 	stw	r2,0(r5)
   101b4:	f800283a 	ret
   101b8:	0009883a 	mov	r4,zero
   101bc:	01400234 	movhi	r5,8
   101c0:	4904703a 	and	r2,r9,r4
   101c4:	5146703a 	and	r3,r10,r5
   101c8:	10c4b03a 	or	r2,r2,r3
   101cc:	10000526 	beq	r2,zero,101e4 <__unpack_d+0x130>
   101d0:	00800044 	movi	r2,1
   101d4:	68800015 	stw	r2,0(r13)
   101d8:	6b000415 	stw	r12,16(r13)
   101dc:	6ac00315 	stw	r11,12(r13)
   101e0:	f800283a 	ret
   101e4:	68000015 	stw	zero,0(r13)
   101e8:	003ffb06 	br	101d8 <__unpack_d+0x124>

000101ec <__fpcmp_parts_d>:
   101ec:	21800017 	ldw	r6,0(r4)
   101f0:	00c00044 	movi	r3,1
   101f4:	19800a2e 	bgeu	r3,r6,10220 <__fpcmp_parts_d+0x34>
   101f8:	28800017 	ldw	r2,0(r5)
   101fc:	1880082e 	bgeu	r3,r2,10220 <__fpcmp_parts_d+0x34>
   10200:	00c00104 	movi	r3,4
   10204:	30c02626 	beq	r6,r3,102a0 <__fpcmp_parts_d+0xb4>
   10208:	10c02226 	beq	r2,r3,10294 <__fpcmp_parts_d+0xa8>
   1020c:	00c00084 	movi	r3,2
   10210:	30c00526 	beq	r6,r3,10228 <__fpcmp_parts_d+0x3c>
   10214:	10c0071e 	bne	r2,r3,10234 <__fpcmp_parts_d+0x48>
   10218:	20800117 	ldw	r2,4(r4)
   1021c:	1000091e 	bne	r2,zero,10244 <__fpcmp_parts_d+0x58>
   10220:	00800044 	movi	r2,1
   10224:	f800283a 	ret
   10228:	10c01a1e 	bne	r2,r3,10294 <__fpcmp_parts_d+0xa8>
   1022c:	0005883a 	mov	r2,zero
   10230:	f800283a 	ret
   10234:	22000117 	ldw	r8,4(r4)
   10238:	28800117 	ldw	r2,4(r5)
   1023c:	40800326 	beq	r8,r2,1024c <__fpcmp_parts_d+0x60>
   10240:	403ff726 	beq	r8,zero,10220 <__fpcmp_parts_d+0x34>
   10244:	00bfffc4 	movi	r2,-1
   10248:	f800283a 	ret
   1024c:	20c00217 	ldw	r3,8(r4)
   10250:	28800217 	ldw	r2,8(r5)
   10254:	10fffa16 	blt	r2,r3,10240 <__fpcmp_parts_d+0x54>
   10258:	18800916 	blt	r3,r2,10280 <__fpcmp_parts_d+0x94>
   1025c:	21c00417 	ldw	r7,16(r4)
   10260:	28c00417 	ldw	r3,16(r5)
   10264:	21800317 	ldw	r6,12(r4)
   10268:	28800317 	ldw	r2,12(r5)
   1026c:	19fff436 	bltu	r3,r7,10240 <__fpcmp_parts_d+0x54>
   10270:	38c00526 	beq	r7,r3,10288 <__fpcmp_parts_d+0x9c>
   10274:	38c00236 	bltu	r7,r3,10280 <__fpcmp_parts_d+0x94>
   10278:	19ffec1e 	bne	r3,r7,1022c <__fpcmp_parts_d+0x40>
   1027c:	30bfeb2e 	bgeu	r6,r2,1022c <__fpcmp_parts_d+0x40>
   10280:	403fe71e 	bne	r8,zero,10220 <__fpcmp_parts_d+0x34>
   10284:	003fef06 	br	10244 <__fpcmp_parts_d+0x58>
   10288:	11bffa2e 	bgeu	r2,r6,10274 <__fpcmp_parts_d+0x88>
   1028c:	403fe426 	beq	r8,zero,10220 <__fpcmp_parts_d+0x34>
   10290:	003fec06 	br	10244 <__fpcmp_parts_d+0x58>
   10294:	28800117 	ldw	r2,4(r5)
   10298:	103fe11e 	bne	r2,zero,10220 <__fpcmp_parts_d+0x34>
   1029c:	003fe906 	br	10244 <__fpcmp_parts_d+0x58>
   102a0:	11bfdd1e 	bne	r2,r6,10218 <__fpcmp_parts_d+0x2c>
   102a4:	28c00117 	ldw	r3,4(r5)
   102a8:	20800117 	ldw	r2,4(r4)
   102ac:	1885c83a 	sub	r2,r3,r2
   102b0:	f800283a 	ret

000102b4 <__pack_f>:
   102b4:	20c00017 	ldw	r3,0(r4)
   102b8:	01c00044 	movi	r7,1
   102bc:	21800317 	ldw	r6,12(r4)
   102c0:	21400117 	ldw	r5,4(r4)
   102c4:	38c02d2e 	bgeu	r7,r3,1037c <__pack_f+0xc8>
   102c8:	00800104 	movi	r2,4
   102cc:	18802826 	beq	r3,r2,10370 <__pack_f+0xbc>
   102d0:	00800084 	movi	r2,2
   102d4:	18800126 	beq	r3,r2,102dc <__pack_f+0x28>
   102d8:	3000101e 	bne	r6,zero,1031c <__pack_f+0x68>
   102dc:	000d883a 	mov	r6,zero
   102e0:	0007883a 	mov	r3,zero
   102e4:	19003fcc 	andi	r4,r3,255
   102e8:	200895fa 	slli	r4,r4,23
   102ec:	00c02034 	movhi	r3,128
   102f0:	18ffffc4 	addi	r3,r3,-1
   102f4:	30c6703a 	and	r3,r6,r3
   102f8:	10a0002c 	andhi	r2,r2,32768
   102fc:	10c4b03a 	or	r2,r2,r3
   10300:	280a97fa 	slli	r5,r5,31
   10304:	1104b03a 	or	r2,r2,r4
   10308:	00e00034 	movhi	r3,32768
   1030c:	18ffffc4 	addi	r3,r3,-1
   10310:	10c4703a 	and	r2,r2,r3
   10314:	1144b03a 	or	r2,r2,r5
   10318:	f800283a 	ret
   1031c:	21000217 	ldw	r4,8(r4)
   10320:	00bfe084 	movi	r2,-126
   10324:	20801b16 	blt	r4,r2,10394 <__pack_f+0xe0>
   10328:	00801fc4 	movi	r2,127
   1032c:	11001016 	blt	r2,r4,10370 <__pack_f+0xbc>
   10330:	308e703a 	and	r7,r6,r2
   10334:	2087883a 	add	r3,r4,r2
   10338:	00801004 	movi	r2,64
   1033c:	38800526 	beq	r7,r2,10354 <__pack_f+0xa0>
   10340:	31800fc4 	addi	r6,r6,63
   10344:	30000716 	blt	r6,zero,10364 <__pack_f+0xb0>
   10348:	300490ba 	slli	r2,r6,2
   1034c:	100cd27a 	srli	r6,r2,9
   10350:	003fe406 	br	102e4 <__pack_f+0x30>
   10354:	3080200c 	andi	r2,r6,128
   10358:	103ffa26 	beq	r2,zero,10344 <__pack_f+0x90>
   1035c:	31cd883a 	add	r6,r6,r7
   10360:	003ff806 	br	10344 <__pack_f+0x90>
   10364:	300cd07a 	srli	r6,r6,1
   10368:	18c00044 	addi	r3,r3,1
   1036c:	003ff606 	br	10348 <__pack_f+0x94>
   10370:	000d883a 	mov	r6,zero
   10374:	00ffffc4 	movi	r3,-1
   10378:	003fda06 	br	102e4 <__pack_f+0x30>
   1037c:	31800434 	orhi	r6,r6,16
   10380:	00802034 	movhi	r2,128
   10384:	10bfffc4 	addi	r2,r2,-1
   10388:	308c703a 	and	r6,r6,r2
   1038c:	00ffffc4 	movi	r3,-1
   10390:	003fd406 	br	102e4 <__pack_f+0x30>
   10394:	1109c83a 	sub	r4,r2,r4
   10398:	00800644 	movi	r2,25
   1039c:	11001216 	blt	r2,r4,103e8 <__pack_f+0x134>
   103a0:	3904983a 	sll	r2,r7,r4
   103a4:	3106d83a 	srl	r3,r6,r4
   103a8:	10bfffc4 	addi	r2,r2,-1
   103ac:	3084703a 	and	r2,r6,r2
   103b0:	1004c03a 	cmpne	r2,r2,zero
   103b4:	1886b03a 	or	r3,r3,r2
   103b8:	19001fcc 	andi	r4,r3,127
   103bc:	00801004 	movi	r2,64
   103c0:	20800c26 	beq	r4,r2,103f4 <__pack_f+0x140>
   103c4:	18c00fc4 	addi	r3,r3,63
   103c8:	00900034 	movhi	r2,16384
   103cc:	10bfffc4 	addi	r2,r2,-1
   103d0:	180cd1fa 	srli	r6,r3,7
   103d4:	10c7803a 	cmpltu	r3,r2,r3
   103d8:	00802034 	movhi	r2,128
   103dc:	10bfffc4 	addi	r2,r2,-1
   103e0:	308c703a 	and	r6,r6,r2
   103e4:	003fbf06 	br	102e4 <__pack_f+0x30>
   103e8:	0007883a 	mov	r3,zero
   103ec:	000d883a 	mov	r6,zero
   103f0:	003ff906 	br	103d8 <__pack_f+0x124>
   103f4:	1880200c 	andi	r2,r3,128
   103f8:	10000126 	beq	r2,zero,10400 <__pack_f+0x14c>
   103fc:	1907883a 	add	r3,r3,r4
   10400:	180cd1fa 	srli	r6,r3,7
   10404:	00900034 	movhi	r2,16384
   10408:	10bfffc4 	addi	r2,r2,-1
   1040c:	10c7803a 	cmpltu	r3,r2,r3
   10410:	003ff106 	br	103d8 <__pack_f+0x124>

00010414 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10414:	defff804 	addi	sp,sp,-32
   10418:	dfc00715 	stw	ra,28(sp)
   1041c:	df000615 	stw	fp,24(sp)
   10420:	df000604 	addi	fp,sp,24
   10424:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10428:	e0bffc17 	ldw	r2,-16(fp)
   1042c:	1004803a 	cmplt	r2,r2,zero
   10430:	1000081e 	bne	r2,zero,10454 <close+0x40>
   10434:	e0bffc17 	ldw	r2,-16(fp)
   10438:	10800324 	muli	r2,r2,12
   1043c:	1007883a 	mov	r3,r2
   10440:	00800074 	movhi	r2,1
   10444:	10927f04 	addi	r2,r2,18940
   10448:	1887883a 	add	r3,r3,r2
   1044c:	e0ffff15 	stw	r3,-4(fp)
   10450:	00000106 	br	10458 <close+0x44>
   10454:	e03fff15 	stw	zero,-4(fp)
   10458:	e0bfff17 	ldw	r2,-4(fp)
   1045c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   10460:	e0bffb17 	ldw	r2,-20(fp)
   10464:	1005003a 	cmpeq	r2,r2,zero
   10468:	10001d1e 	bne	r2,zero,104e0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1046c:	e0bffb17 	ldw	r2,-20(fp)
   10470:	10800017 	ldw	r2,0(r2)
   10474:	10800417 	ldw	r2,16(r2)
   10478:	1005003a 	cmpeq	r2,r2,zero
   1047c:	1000071e 	bne	r2,zero,1049c <close+0x88>
   10480:	e0bffb17 	ldw	r2,-20(fp)
   10484:	10800017 	ldw	r2,0(r2)
   10488:	10800417 	ldw	r2,16(r2)
   1048c:	e13ffb17 	ldw	r4,-20(fp)
   10490:	103ee83a 	callr	r2
   10494:	e0bffe15 	stw	r2,-8(fp)
   10498:	00000106 	br	104a0 <close+0x8c>
   1049c:	e03ffe15 	stw	zero,-8(fp)
   104a0:	e0bffe17 	ldw	r2,-8(fp)
   104a4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   104a8:	e13ffc17 	ldw	r4,-16(fp)
   104ac:	0010f1c0 	call	10f1c <alt_release_fd>
    if (rval < 0)
   104b0:	e0bffa17 	ldw	r2,-24(fp)
   104b4:	1004403a 	cmpge	r2,r2,zero
   104b8:	1000071e 	bne	r2,zero,104d8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   104bc:	00105100 	call	10510 <alt_get_errno>
   104c0:	e0fffa17 	ldw	r3,-24(fp)
   104c4:	00c7c83a 	sub	r3,zero,r3
   104c8:	10c00015 	stw	r3,0(r2)
      return -1;
   104cc:	00bfffc4 	movi	r2,-1
   104d0:	e0bffd15 	stw	r2,-12(fp)
   104d4:	00000806 	br	104f8 <close+0xe4>
    }
    return 0;
   104d8:	e03ffd15 	stw	zero,-12(fp)
   104dc:	00000606 	br	104f8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   104e0:	00105100 	call	10510 <alt_get_errno>
   104e4:	1007883a 	mov	r3,r2
   104e8:	00801444 	movi	r2,81
   104ec:	18800015 	stw	r2,0(r3)
    return -1;
   104f0:	00bfffc4 	movi	r2,-1
   104f4:	e0bffd15 	stw	r2,-12(fp)
   104f8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   104fc:	e037883a 	mov	sp,fp
   10500:	dfc00117 	ldw	ra,4(sp)
   10504:	df000017 	ldw	fp,0(sp)
   10508:	dec00204 	addi	sp,sp,8
   1050c:	f800283a 	ret

00010510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10510:	defffd04 	addi	sp,sp,-12
   10514:	dfc00215 	stw	ra,8(sp)
   10518:	df000115 	stw	fp,4(sp)
   1051c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10520:	00800074 	movhi	r2,1
   10524:	10970d04 	addi	r2,r2,23604
   10528:	10800017 	ldw	r2,0(r2)
   1052c:	1005003a 	cmpeq	r2,r2,zero
   10530:	1000061e 	bne	r2,zero,1054c <alt_get_errno+0x3c>
   10534:	00800074 	movhi	r2,1
   10538:	10970d04 	addi	r2,r2,23604
   1053c:	10800017 	ldw	r2,0(r2)
   10540:	103ee83a 	callr	r2
   10544:	e0bfff15 	stw	r2,-4(fp)
   10548:	00000306 	br	10558 <alt_get_errno+0x48>
   1054c:	00800074 	movhi	r2,1
   10550:	109de504 	addi	r2,r2,30612
   10554:	e0bfff15 	stw	r2,-4(fp)
   10558:	e0bfff17 	ldw	r2,-4(fp)
}
   1055c:	e037883a 	mov	sp,fp
   10560:	dfc00117 	ldw	ra,4(sp)
   10564:	df000017 	ldw	fp,0(sp)
   10568:	dec00204 	addi	sp,sp,8
   1056c:	f800283a 	ret

00010570 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10570:	defffc04 	addi	sp,sp,-16
   10574:	df000315 	stw	fp,12(sp)
   10578:	df000304 	addi	fp,sp,12
   1057c:	e13ffd15 	stw	r4,-12(fp)
   10580:	e17ffe15 	stw	r5,-8(fp)
   10584:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10588:	e0bfff17 	ldw	r2,-4(fp)
}
   1058c:	e037883a 	mov	sp,fp
   10590:	df000017 	ldw	fp,0(sp)
   10594:	dec00104 	addi	sp,sp,4
   10598:	f800283a 	ret

0001059c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1059c:	defff904 	addi	sp,sp,-28
   105a0:	dfc00615 	stw	ra,24(sp)
   105a4:	df000515 	stw	fp,20(sp)
   105a8:	df000504 	addi	fp,sp,20
   105ac:	e13ffc15 	stw	r4,-16(fp)
   105b0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   105b4:	e0bffc17 	ldw	r2,-16(fp)
   105b8:	1004803a 	cmplt	r2,r2,zero
   105bc:	1000081e 	bne	r2,zero,105e0 <fstat+0x44>
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	10800324 	muli	r2,r2,12
   105c8:	1007883a 	mov	r3,r2
   105cc:	00800074 	movhi	r2,1
   105d0:	10927f04 	addi	r2,r2,18940
   105d4:	1887883a 	add	r3,r3,r2
   105d8:	e0ffff15 	stw	r3,-4(fp)
   105dc:	00000106 	br	105e4 <fstat+0x48>
   105e0:	e03fff15 	stw	zero,-4(fp)
   105e4:	e0bfff17 	ldw	r2,-4(fp)
   105e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   105ec:	e0bffb17 	ldw	r2,-20(fp)
   105f0:	1005003a 	cmpeq	r2,r2,zero
   105f4:	1000121e 	bne	r2,zero,10640 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   105f8:	e0bffb17 	ldw	r2,-20(fp)
   105fc:	10800017 	ldw	r2,0(r2)
   10600:	10800817 	ldw	r2,32(r2)
   10604:	1005003a 	cmpeq	r2,r2,zero
   10608:	1000081e 	bne	r2,zero,1062c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   1060c:	e0bffb17 	ldw	r2,-20(fp)
   10610:	10800017 	ldw	r2,0(r2)
   10614:	10800817 	ldw	r2,32(r2)
   10618:	e13ffb17 	ldw	r4,-20(fp)
   1061c:	e17ffd17 	ldw	r5,-12(fp)
   10620:	103ee83a 	callr	r2
   10624:	e0bffe15 	stw	r2,-8(fp)
   10628:	00000b06 	br	10658 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1062c:	e0fffd17 	ldw	r3,-12(fp)
   10630:	00880004 	movi	r2,8192
   10634:	18800115 	stw	r2,4(r3)
      return 0;
   10638:	e03ffe15 	stw	zero,-8(fp)
   1063c:	00000606 	br	10658 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10640:	00106700 	call	10670 <alt_get_errno>
   10644:	1007883a 	mov	r3,r2
   10648:	00801444 	movi	r2,81
   1064c:	18800015 	stw	r2,0(r3)
    return -1;
   10650:	00bfffc4 	movi	r2,-1
   10654:	e0bffe15 	stw	r2,-8(fp)
   10658:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1065c:	e037883a 	mov	sp,fp
   10660:	dfc00117 	ldw	ra,4(sp)
   10664:	df000017 	ldw	fp,0(sp)
   10668:	dec00204 	addi	sp,sp,8
   1066c:	f800283a 	ret

00010670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10670:	defffd04 	addi	sp,sp,-12
   10674:	dfc00215 	stw	ra,8(sp)
   10678:	df000115 	stw	fp,4(sp)
   1067c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10680:	00800074 	movhi	r2,1
   10684:	10970d04 	addi	r2,r2,23604
   10688:	10800017 	ldw	r2,0(r2)
   1068c:	1005003a 	cmpeq	r2,r2,zero
   10690:	1000061e 	bne	r2,zero,106ac <alt_get_errno+0x3c>
   10694:	00800074 	movhi	r2,1
   10698:	10970d04 	addi	r2,r2,23604
   1069c:	10800017 	ldw	r2,0(r2)
   106a0:	103ee83a 	callr	r2
   106a4:	e0bfff15 	stw	r2,-4(fp)
   106a8:	00000306 	br	106b8 <alt_get_errno+0x48>
   106ac:	00800074 	movhi	r2,1
   106b0:	109de504 	addi	r2,r2,30612
   106b4:	e0bfff15 	stw	r2,-4(fp)
   106b8:	e0bfff17 	ldw	r2,-4(fp)
}
   106bc:	e037883a 	mov	sp,fp
   106c0:	dfc00117 	ldw	ra,4(sp)
   106c4:	df000017 	ldw	fp,0(sp)
   106c8:	dec00204 	addi	sp,sp,8
   106cc:	f800283a 	ret

000106d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   106d0:	deffeb04 	addi	sp,sp,-84
   106d4:	dfc01415 	stw	ra,80(sp)
   106d8:	df001315 	stw	fp,76(sp)
   106dc:	df001304 	addi	fp,sp,76
   106e0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   106e4:	e0bffd17 	ldw	r2,-12(fp)
   106e8:	1004803a 	cmplt	r2,r2,zero
   106ec:	1000081e 	bne	r2,zero,10710 <isatty+0x40>
   106f0:	e0bffd17 	ldw	r2,-12(fp)
   106f4:	10800324 	muli	r2,r2,12
   106f8:	1007883a 	mov	r3,r2
   106fc:	00800074 	movhi	r2,1
   10700:	10927f04 	addi	r2,r2,18940
   10704:	1887883a 	add	r3,r3,r2
   10708:	e0ffff15 	stw	r3,-4(fp)
   1070c:	00000106 	br	10714 <isatty+0x44>
   10710:	e03fff15 	stw	zero,-4(fp)
   10714:	e0bfff17 	ldw	r2,-4(fp)
   10718:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   1071c:	e0bfed17 	ldw	r2,-76(fp)
   10720:	1005003a 	cmpeq	r2,r2,zero
   10724:	10000f1e 	bne	r2,zero,10764 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10728:	e0bfed17 	ldw	r2,-76(fp)
   1072c:	10800017 	ldw	r2,0(r2)
   10730:	10800817 	ldw	r2,32(r2)
   10734:	1004c03a 	cmpne	r2,r2,zero
   10738:	1000031e 	bne	r2,zero,10748 <isatty+0x78>
    {
      return 1;
   1073c:	00800044 	movi	r2,1
   10740:	e0bffe15 	stw	r2,-8(fp)
   10744:	00000c06 	br	10778 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10748:	e17fee04 	addi	r5,fp,-72
   1074c:	e13ffd17 	ldw	r4,-12(fp)
   10750:	001059c0 	call	1059c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10754:	e0bfef17 	ldw	r2,-68(fp)
   10758:	10880020 	cmpeqi	r2,r2,8192
   1075c:	e0bffe15 	stw	r2,-8(fp)
   10760:	00000506 	br	10778 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10764:	00107900 	call	10790 <alt_get_errno>
   10768:	1007883a 	mov	r3,r2
   1076c:	00801444 	movi	r2,81
   10770:	18800015 	stw	r2,0(r3)
    return 0;
   10774:	e03ffe15 	stw	zero,-8(fp)
   10778:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1077c:	e037883a 	mov	sp,fp
   10780:	dfc00117 	ldw	ra,4(sp)
   10784:	df000017 	ldw	fp,0(sp)
   10788:	dec00204 	addi	sp,sp,8
   1078c:	f800283a 	ret

00010790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10790:	defffd04 	addi	sp,sp,-12
   10794:	dfc00215 	stw	ra,8(sp)
   10798:	df000115 	stw	fp,4(sp)
   1079c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   107a0:	00800074 	movhi	r2,1
   107a4:	10970d04 	addi	r2,r2,23604
   107a8:	10800017 	ldw	r2,0(r2)
   107ac:	1005003a 	cmpeq	r2,r2,zero
   107b0:	1000061e 	bne	r2,zero,107cc <alt_get_errno+0x3c>
   107b4:	00800074 	movhi	r2,1
   107b8:	10970d04 	addi	r2,r2,23604
   107bc:	10800017 	ldw	r2,0(r2)
   107c0:	103ee83a 	callr	r2
   107c4:	e0bfff15 	stw	r2,-4(fp)
   107c8:	00000306 	br	107d8 <alt_get_errno+0x48>
   107cc:	00800074 	movhi	r2,1
   107d0:	109de504 	addi	r2,r2,30612
   107d4:	e0bfff15 	stw	r2,-4(fp)
   107d8:	e0bfff17 	ldw	r2,-4(fp)
}
   107dc:	e037883a 	mov	sp,fp
   107e0:	dfc00117 	ldw	ra,4(sp)
   107e4:	df000017 	ldw	fp,0(sp)
   107e8:	dec00204 	addi	sp,sp,8
   107ec:	f800283a 	ret

000107f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   107f0:	defffe04 	addi	sp,sp,-8
   107f4:	dfc00115 	stw	ra,4(sp)
   107f8:	df000015 	stw	fp,0(sp)
   107fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10800:	01000074 	movhi	r4,1
   10804:	21172404 	addi	r4,r4,23696
   10808:	01400074 	movhi	r5,1
   1080c:	29506604 	addi	r5,r5,16792
   10810:	01800074 	movhi	r6,1
   10814:	31972404 	addi	r6,r6,23696
   10818:	00108700 	call	10870 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1081c:	01000034 	movhi	r4,0
   10820:	21000804 	addi	r4,r4,32
   10824:	01400034 	movhi	r5,0
   10828:	29400804 	addi	r5,r5,32
   1082c:	01800034 	movhi	r6,0
   10830:	31806d04 	addi	r6,r6,436
   10834:	00108700 	call	10870 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10838:	01000074 	movhi	r4,1
   1083c:	210ec304 	addi	r4,r4,15116
   10840:	01400074 	movhi	r5,1
   10844:	294ec304 	addi	r5,r5,15116
   10848:	01800074 	movhi	r6,1
   1084c:	31906604 	addi	r6,r6,16792
   10850:	00108700 	call	10870 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10854:	0012b800 	call	12b80 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10858:	00130740 	call	13074 <alt_icache_flush_all>
}
   1085c:	e037883a 	mov	sp,fp
   10860:	dfc00117 	ldw	ra,4(sp)
   10864:	df000017 	ldw	fp,0(sp)
   10868:	dec00204 	addi	sp,sp,8
   1086c:	f800283a 	ret

00010870 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10870:	defffc04 	addi	sp,sp,-16
   10874:	df000315 	stw	fp,12(sp)
   10878:	df000304 	addi	fp,sp,12
   1087c:	e13ffd15 	stw	r4,-12(fp)
   10880:	e17ffe15 	stw	r5,-8(fp)
   10884:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10888:	e0fffe17 	ldw	r3,-8(fp)
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	18800e26 	beq	r3,r2,108cc <alt_load_section+0x5c>
  {
    while( to != end )
   10894:	00000a06 	br	108c0 <alt_load_section+0x50>
    {
      *to++ = *from++;
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10c00017 	ldw	r3,0(r2)
   108a0:	e0bffe17 	ldw	r2,-8(fp)
   108a4:	10c00015 	stw	r3,0(r2)
   108a8:	e0bffe17 	ldw	r2,-8(fp)
   108ac:	10800104 	addi	r2,r2,4
   108b0:	e0bffe15 	stw	r2,-8(fp)
   108b4:	e0bffd17 	ldw	r2,-12(fp)
   108b8:	10800104 	addi	r2,r2,4
   108bc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   108c0:	e0fffe17 	ldw	r3,-8(fp)
   108c4:	e0bfff17 	ldw	r2,-4(fp)
   108c8:	18bff31e 	bne	r3,r2,10898 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   108cc:	e037883a 	mov	sp,fp
   108d0:	df000017 	ldw	fp,0(sp)
   108d4:	dec00104 	addi	sp,sp,4
   108d8:	f800283a 	ret

000108dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   108dc:	defff804 	addi	sp,sp,-32
   108e0:	dfc00715 	stw	ra,28(sp)
   108e4:	df000615 	stw	fp,24(sp)
   108e8:	df000604 	addi	fp,sp,24
   108ec:	e13ffc15 	stw	r4,-16(fp)
   108f0:	e17ffd15 	stw	r5,-12(fp)
   108f4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   108f8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   108fc:	e0bffc17 	ldw	r2,-16(fp)
   10900:	1004803a 	cmplt	r2,r2,zero
   10904:	1000081e 	bne	r2,zero,10928 <lseek+0x4c>
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	10800324 	muli	r2,r2,12
   10910:	1007883a 	mov	r3,r2
   10914:	00800074 	movhi	r2,1
   10918:	10927f04 	addi	r2,r2,18940
   1091c:	1887883a 	add	r3,r3,r2
   10920:	e0ffff15 	stw	r3,-4(fp)
   10924:	00000106 	br	1092c <lseek+0x50>
   10928:	e03fff15 	stw	zero,-4(fp)
   1092c:	e0bfff17 	ldw	r2,-4(fp)
   10930:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   10934:	e0bffb17 	ldw	r2,-20(fp)
   10938:	1005003a 	cmpeq	r2,r2,zero
   1093c:	1000111e 	bne	r2,zero,10984 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10940:	e0bffb17 	ldw	r2,-20(fp)
   10944:	10800017 	ldw	r2,0(r2)
   10948:	10800717 	ldw	r2,28(r2)
   1094c:	1005003a 	cmpeq	r2,r2,zero
   10950:	1000091e 	bne	r2,zero,10978 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10954:	e0bffb17 	ldw	r2,-20(fp)
   10958:	10800017 	ldw	r2,0(r2)
   1095c:	10800717 	ldw	r2,28(r2)
   10960:	e13ffb17 	ldw	r4,-20(fp)
   10964:	e17ffd17 	ldw	r5,-12(fp)
   10968:	e1bffe17 	ldw	r6,-8(fp)
   1096c:	103ee83a 	callr	r2
   10970:	e0bffa15 	stw	r2,-24(fp)
   10974:	00000506 	br	1098c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10978:	00bfde84 	movi	r2,-134
   1097c:	e0bffa15 	stw	r2,-24(fp)
   10980:	00000206 	br	1098c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10984:	00bfebc4 	movi	r2,-81
   10988:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1098c:	e0bffa17 	ldw	r2,-24(fp)
   10990:	1004403a 	cmpge	r2,r2,zero
   10994:	1000071e 	bne	r2,zero,109b4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   10998:	00109cc0 	call	109cc <alt_get_errno>
   1099c:	1007883a 	mov	r3,r2
   109a0:	e0bffa17 	ldw	r2,-24(fp)
   109a4:	0085c83a 	sub	r2,zero,r2
   109a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   109ac:	00bfffc4 	movi	r2,-1
   109b0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   109b4:	e0bffa17 	ldw	r2,-24(fp)
}
   109b8:	e037883a 	mov	sp,fp
   109bc:	dfc00117 	ldw	ra,4(sp)
   109c0:	df000017 	ldw	fp,0(sp)
   109c4:	dec00204 	addi	sp,sp,8
   109c8:	f800283a 	ret

000109cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   109cc:	defffd04 	addi	sp,sp,-12
   109d0:	dfc00215 	stw	ra,8(sp)
   109d4:	df000115 	stw	fp,4(sp)
   109d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   109dc:	00800074 	movhi	r2,1
   109e0:	10970d04 	addi	r2,r2,23604
   109e4:	10800017 	ldw	r2,0(r2)
   109e8:	1005003a 	cmpeq	r2,r2,zero
   109ec:	1000061e 	bne	r2,zero,10a08 <alt_get_errno+0x3c>
   109f0:	00800074 	movhi	r2,1
   109f4:	10970d04 	addi	r2,r2,23604
   109f8:	10800017 	ldw	r2,0(r2)
   109fc:	103ee83a 	callr	r2
   10a00:	e0bfff15 	stw	r2,-4(fp)
   10a04:	00000306 	br	10a14 <alt_get_errno+0x48>
   10a08:	00800074 	movhi	r2,1
   10a0c:	109de504 	addi	r2,r2,30612
   10a10:	e0bfff15 	stw	r2,-4(fp)
   10a14:	e0bfff17 	ldw	r2,-4(fp)
}
   10a18:	e037883a 	mov	sp,fp
   10a1c:	dfc00117 	ldw	ra,4(sp)
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00204 	addi	sp,sp,8
   10a28:	f800283a 	ret

00010a2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10a2c:	defffd04 	addi	sp,sp,-12
   10a30:	dfc00215 	stw	ra,8(sp)
   10a34:	df000115 	stw	fp,4(sp)
   10a38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10a3c:	0009883a 	mov	r4,zero
   10a40:	00112ac0 	call	112ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10a44:	00112e00 	call	112e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10a48:	01000074 	movhi	r4,1
   10a4c:	21105904 	addi	r4,r4,16740
   10a50:	01400074 	movhi	r5,1
   10a54:	29505904 	addi	r5,r5,16740
   10a58:	01800074 	movhi	r6,1
   10a5c:	31905904 	addi	r6,r6,16740
   10a60:	00134340 	call	13434 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10a64:	0012cb00 	call	12cb0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10a68:	01000074 	movhi	r4,1
   10a6c:	210b4504 	addi	r4,r4,11540
   10a70:	00137000 	call	13700 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10a74:	d126eb17 	ldw	r4,-25684(gp)
   10a78:	d166ec17 	ldw	r5,-25680(gp)
   10a7c:	d1a6ed17 	ldw	r6,-25676(gp)
   10a80:	0000e100 	call	e10 <main>
   10a84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10a88:	01000044 	movi	r4,1
   10a8c:	00104140 	call	10414 <close>
  exit (result);
   10a90:	e13fff17 	ldw	r4,-4(fp)
   10a94:	00137140 	call	13714 <exit>

00010a98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10a98:	defffe04 	addi	sp,sp,-8
   10a9c:	df000115 	stw	fp,4(sp)
   10aa0:	df000104 	addi	fp,sp,4
   10aa4:	e13fff15 	stw	r4,-4(fp)
}
   10aa8:	e037883a 	mov	sp,fp
   10aac:	df000017 	ldw	fp,0(sp)
   10ab0:	dec00104 	addi	sp,sp,4
   10ab4:	f800283a 	ret

00010ab8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10ab8:	defffe04 	addi	sp,sp,-8
   10abc:	df000115 	stw	fp,4(sp)
   10ac0:	df000104 	addi	fp,sp,4
   10ac4:	e13fff15 	stw	r4,-4(fp)
}
   10ac8:	e037883a 	mov	sp,fp
   10acc:	df000017 	ldw	fp,0(sp)
   10ad0:	dec00104 	addi	sp,sp,4
   10ad4:	f800283a 	ret

00010ad8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10ad8:	defffc04 	addi	sp,sp,-16
   10adc:	df000315 	stw	fp,12(sp)
   10ae0:	df000304 	addi	fp,sp,12
   10ae4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10ae8:	e0bffe17 	ldw	r2,-8(fp)
   10aec:	10800217 	ldw	r2,8(r2)
   10af0:	10d00034 	orhi	r3,r2,16384
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10afc:	e03ffd15 	stw	zero,-12(fp)
   10b00:	00002006 	br	10b84 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b04:	e0bffd17 	ldw	r2,-12(fp)
   10b08:	00c00074 	movhi	r3,1
   10b0c:	18d27f04 	addi	r3,r3,18940
   10b10:	10800324 	muli	r2,r2,12
   10b14:	10c5883a 	add	r2,r2,r3
   10b18:	10c00017 	ldw	r3,0(r2)
   10b1c:	e0bffe17 	ldw	r2,-8(fp)
   10b20:	10800017 	ldw	r2,0(r2)
   10b24:	1880141e 	bne	r3,r2,10b78 <alt_file_locked+0xa0>
   10b28:	e0bffd17 	ldw	r2,-12(fp)
   10b2c:	00c00074 	movhi	r3,1
   10b30:	18d27f04 	addi	r3,r3,18940
   10b34:	10800324 	muli	r2,r2,12
   10b38:	10c5883a 	add	r2,r2,r3
   10b3c:	10800204 	addi	r2,r2,8
   10b40:	10800017 	ldw	r2,0(r2)
   10b44:	1004403a 	cmpge	r2,r2,zero
   10b48:	10000b1e 	bne	r2,zero,10b78 <alt_file_locked+0xa0>
   10b4c:	e0bffd17 	ldw	r2,-12(fp)
   10b50:	10800324 	muli	r2,r2,12
   10b54:	1007883a 	mov	r3,r2
   10b58:	00800074 	movhi	r2,1
   10b5c:	10927f04 	addi	r2,r2,18940
   10b60:	1887883a 	add	r3,r3,r2
   10b64:	e0bffe17 	ldw	r2,-8(fp)
   10b68:	18800326 	beq	r3,r2,10b78 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10b6c:	00bffcc4 	movi	r2,-13
   10b70:	e0bfff15 	stw	r2,-4(fp)
   10b74:	00000a06 	br	10ba0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10b78:	e0bffd17 	ldw	r2,-12(fp)
   10b7c:	10800044 	addi	r2,r2,1
   10b80:	e0bffd15 	stw	r2,-12(fp)
   10b84:	00800074 	movhi	r2,1
   10b88:	10970c04 	addi	r2,r2,23600
   10b8c:	10800017 	ldw	r2,0(r2)
   10b90:	1007883a 	mov	r3,r2
   10b94:	e0bffd17 	ldw	r2,-12(fp)
   10b98:	18bfda2e 	bgeu	r3,r2,10b04 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10b9c:	e03fff15 	stw	zero,-4(fp)
   10ba0:	e0bfff17 	ldw	r2,-4(fp)
}
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	df000017 	ldw	fp,0(sp)
   10bac:	dec00104 	addi	sp,sp,4
   10bb0:	f800283a 	ret

00010bb4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10bb4:	defff404 	addi	sp,sp,-48
   10bb8:	dfc00b15 	stw	ra,44(sp)
   10bbc:	df000a15 	stw	fp,40(sp)
   10bc0:	df000a04 	addi	fp,sp,40
   10bc4:	e13ffb15 	stw	r4,-20(fp)
   10bc8:	e17ffc15 	stw	r5,-16(fp)
   10bcc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10bd0:	00bfffc4 	movi	r2,-1
   10bd4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   10bd8:	00bffb44 	movi	r2,-19
   10bdc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   10be0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10be4:	e13ffb17 	ldw	r4,-20(fp)
   10be8:	01400074 	movhi	r5,1
   10bec:	29570a04 	addi	r5,r5,23592
   10bf0:	0012d780 	call	12d78 <alt_find_dev>
   10bf4:	e0bffa15 	stw	r2,-24(fp)
   10bf8:	e0bffa17 	ldw	r2,-24(fp)
   10bfc:	1004c03a 	cmpne	r2,r2,zero
   10c00:	1000051e 	bne	r2,zero,10c18 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10c04:	e13ffb17 	ldw	r4,-20(fp)
   10c08:	0012e0c0 	call	12e0c <alt_find_file>
   10c0c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   10c10:	00800044 	movi	r2,1
   10c14:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10c18:	e0bffa17 	ldw	r2,-24(fp)
   10c1c:	1005003a 	cmpeq	r2,r2,zero
   10c20:	1000301e 	bne	r2,zero,10ce4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10c24:	e13ffa17 	ldw	r4,-24(fp)
   10c28:	0012fbc0 	call	12fbc <alt_get_fd>
   10c2c:	e0bff815 	stw	r2,-32(fp)
   10c30:	e0bff817 	ldw	r2,-32(fp)
   10c34:	1004403a 	cmpge	r2,r2,zero
   10c38:	1000031e 	bne	r2,zero,10c48 <open+0x94>
    {
      status = index;
   10c3c:	e0bff817 	ldw	r2,-32(fp)
   10c40:	e0bff715 	stw	r2,-36(fp)
   10c44:	00002906 	br	10cec <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   10c48:	e0bff817 	ldw	r2,-32(fp)
   10c4c:	10800324 	muli	r2,r2,12
   10c50:	1007883a 	mov	r3,r2
   10c54:	00800074 	movhi	r2,1
   10c58:	10927f04 	addi	r2,r2,18940
   10c5c:	1885883a 	add	r2,r3,r2
   10c60:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10c64:	e0fffc17 	ldw	r3,-16(fp)
   10c68:	00900034 	movhi	r2,16384
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	1886703a 	and	r3,r3,r2
   10c74:	e0bff917 	ldw	r2,-28(fp)
   10c78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10c7c:	e0bff617 	ldw	r2,-40(fp)
   10c80:	1004c03a 	cmpne	r2,r2,zero
   10c84:	1000061e 	bne	r2,zero,10ca0 <open+0xec>
   10c88:	e13ff917 	ldw	r4,-28(fp)
   10c8c:	0010ad80 	call	10ad8 <alt_file_locked>
   10c90:	e0bff715 	stw	r2,-36(fp)
   10c94:	e0bff717 	ldw	r2,-36(fp)
   10c98:	1004803a 	cmplt	r2,r2,zero
   10c9c:	1000131e 	bne	r2,zero,10cec <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10ca0:	e0bffa17 	ldw	r2,-24(fp)
   10ca4:	10800317 	ldw	r2,12(r2)
   10ca8:	1005003a 	cmpeq	r2,r2,zero
   10cac:	1000091e 	bne	r2,zero,10cd4 <open+0x120>
   10cb0:	e0bffa17 	ldw	r2,-24(fp)
   10cb4:	10800317 	ldw	r2,12(r2)
   10cb8:	e13ff917 	ldw	r4,-28(fp)
   10cbc:	e17ffb17 	ldw	r5,-20(fp)
   10cc0:	e1bffc17 	ldw	r6,-16(fp)
   10cc4:	e1fffd17 	ldw	r7,-12(fp)
   10cc8:	103ee83a 	callr	r2
   10ccc:	e0bfff15 	stw	r2,-4(fp)
   10cd0:	00000106 	br	10cd8 <open+0x124>
   10cd4:	e03fff15 	stw	zero,-4(fp)
   10cd8:	e0bfff17 	ldw	r2,-4(fp)
   10cdc:	e0bff715 	stw	r2,-36(fp)
   10ce0:	00000206 	br	10cec <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10ce4:	00bffb44 	movi	r2,-19
   10ce8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10cec:	e0bff717 	ldw	r2,-36(fp)
   10cf0:	1004403a 	cmpge	r2,r2,zero
   10cf4:	1000091e 	bne	r2,zero,10d1c <open+0x168>
  {
    alt_release_fd (index);  
   10cf8:	e13ff817 	ldw	r4,-32(fp)
   10cfc:	0010f1c0 	call	10f1c <alt_release_fd>
    ALT_ERRNO = -status;
   10d00:	0010d3c0 	call	10d3c <alt_get_errno>
   10d04:	e0fff717 	ldw	r3,-36(fp)
   10d08:	00c7c83a 	sub	r3,zero,r3
   10d0c:	10c00015 	stw	r3,0(r2)
    return -1;
   10d10:	00bfffc4 	movi	r2,-1
   10d14:	e0bffe15 	stw	r2,-8(fp)
   10d18:	00000206 	br	10d24 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   10d1c:	e0bff817 	ldw	r2,-32(fp)
   10d20:	e0bffe15 	stw	r2,-8(fp)
   10d24:	e0bffe17 	ldw	r2,-8(fp)
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	dfc00117 	ldw	ra,4(sp)
   10d30:	df000017 	ldw	fp,0(sp)
   10d34:	dec00204 	addi	sp,sp,8
   10d38:	f800283a 	ret

00010d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d3c:	defffd04 	addi	sp,sp,-12
   10d40:	dfc00215 	stw	ra,8(sp)
   10d44:	df000115 	stw	fp,4(sp)
   10d48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10d4c:	00800074 	movhi	r2,1
   10d50:	10970d04 	addi	r2,r2,23604
   10d54:	10800017 	ldw	r2,0(r2)
   10d58:	1005003a 	cmpeq	r2,r2,zero
   10d5c:	1000061e 	bne	r2,zero,10d78 <alt_get_errno+0x3c>
   10d60:	00800074 	movhi	r2,1
   10d64:	10970d04 	addi	r2,r2,23604
   10d68:	10800017 	ldw	r2,0(r2)
   10d6c:	103ee83a 	callr	r2
   10d70:	e0bfff15 	stw	r2,-4(fp)
   10d74:	00000306 	br	10d84 <alt_get_errno+0x48>
   10d78:	00800074 	movhi	r2,1
   10d7c:	109de504 	addi	r2,r2,30612
   10d80:	e0bfff15 	stw	r2,-4(fp)
   10d84:	e0bfff17 	ldw	r2,-4(fp)
}
   10d88:	e037883a 	mov	sp,fp
   10d8c:	dfc00117 	ldw	ra,4(sp)
   10d90:	df000017 	ldw	fp,0(sp)
   10d94:	dec00204 	addi	sp,sp,8
   10d98:	f800283a 	ret

00010d9c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10d9c:	defff704 	addi	sp,sp,-36
   10da0:	dfc00815 	stw	ra,32(sp)
   10da4:	df000715 	stw	fp,28(sp)
   10da8:	df000704 	addi	fp,sp,28
   10dac:	e13ffb15 	stw	r4,-20(fp)
   10db0:	e17ffc15 	stw	r5,-16(fp)
   10db4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10db8:	e0bffb17 	ldw	r2,-20(fp)
   10dbc:	1004803a 	cmplt	r2,r2,zero
   10dc0:	1000081e 	bne	r2,zero,10de4 <read+0x48>
   10dc4:	e0bffb17 	ldw	r2,-20(fp)
   10dc8:	10800324 	muli	r2,r2,12
   10dcc:	1007883a 	mov	r3,r2
   10dd0:	00800074 	movhi	r2,1
   10dd4:	10927f04 	addi	r2,r2,18940
   10dd8:	1887883a 	add	r3,r3,r2
   10ddc:	e0ffff15 	stw	r3,-4(fp)
   10de0:	00000106 	br	10de8 <read+0x4c>
   10de4:	e03fff15 	stw	zero,-4(fp)
   10de8:	e0bfff17 	ldw	r2,-4(fp)
   10dec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   10df0:	e0bffa17 	ldw	r2,-24(fp)
   10df4:	1005003a 	cmpeq	r2,r2,zero
   10df8:	1000241e 	bne	r2,zero,10e8c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10dfc:	e0bffa17 	ldw	r2,-24(fp)
   10e00:	10800217 	ldw	r2,8(r2)
   10e04:	108000cc 	andi	r2,r2,3
   10e08:	10800060 	cmpeqi	r2,r2,1
   10e0c:	10001a1e 	bne	r2,zero,10e78 <read+0xdc>
   10e10:	e0bffa17 	ldw	r2,-24(fp)
   10e14:	10800017 	ldw	r2,0(r2)
   10e18:	10800517 	ldw	r2,20(r2)
   10e1c:	1005003a 	cmpeq	r2,r2,zero
   10e20:	1000151e 	bne	r2,zero,10e78 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10e24:	e0bffa17 	ldw	r2,-24(fp)
   10e28:	10800017 	ldw	r2,0(r2)
   10e2c:	10800517 	ldw	r2,20(r2)
   10e30:	e17ffc17 	ldw	r5,-16(fp)
   10e34:	e1bffd17 	ldw	r6,-12(fp)
   10e38:	e13ffa17 	ldw	r4,-24(fp)
   10e3c:	103ee83a 	callr	r2
   10e40:	e0bff915 	stw	r2,-28(fp)
   10e44:	e0bff917 	ldw	r2,-28(fp)
   10e48:	1004403a 	cmpge	r2,r2,zero
   10e4c:	1000071e 	bne	r2,zero,10e6c <read+0xd0>
        {
          ALT_ERRNO = -rval;
   10e50:	0010ebc0 	call	10ebc <alt_get_errno>
   10e54:	e0fff917 	ldw	r3,-28(fp)
   10e58:	00c7c83a 	sub	r3,zero,r3
   10e5c:	10c00015 	stw	r3,0(r2)
          return -1;
   10e60:	00bfffc4 	movi	r2,-1
   10e64:	e0bffe15 	stw	r2,-8(fp)
   10e68:	00000e06 	br	10ea4 <read+0x108>
        }
        return rval;
   10e6c:	e0bff917 	ldw	r2,-28(fp)
   10e70:	e0bffe15 	stw	r2,-8(fp)
   10e74:	00000b06 	br	10ea4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10e78:	0010ebc0 	call	10ebc <alt_get_errno>
   10e7c:	1007883a 	mov	r3,r2
   10e80:	00800344 	movi	r2,13
   10e84:	18800015 	stw	r2,0(r3)
   10e88:	00000406 	br	10e9c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10e8c:	0010ebc0 	call	10ebc <alt_get_errno>
   10e90:	1007883a 	mov	r3,r2
   10e94:	00801444 	movi	r2,81
   10e98:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10e9c:	00bfffc4 	movi	r2,-1
   10ea0:	e0bffe15 	stw	r2,-8(fp)
   10ea4:	e0bffe17 	ldw	r2,-8(fp)
}
   10ea8:	e037883a 	mov	sp,fp
   10eac:	dfc00117 	ldw	ra,4(sp)
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00204 	addi	sp,sp,8
   10eb8:	f800283a 	ret

00010ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10ebc:	defffd04 	addi	sp,sp,-12
   10ec0:	dfc00215 	stw	ra,8(sp)
   10ec4:	df000115 	stw	fp,4(sp)
   10ec8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10ecc:	00800074 	movhi	r2,1
   10ed0:	10970d04 	addi	r2,r2,23604
   10ed4:	10800017 	ldw	r2,0(r2)
   10ed8:	1005003a 	cmpeq	r2,r2,zero
   10edc:	1000061e 	bne	r2,zero,10ef8 <alt_get_errno+0x3c>
   10ee0:	00800074 	movhi	r2,1
   10ee4:	10970d04 	addi	r2,r2,23604
   10ee8:	10800017 	ldw	r2,0(r2)
   10eec:	103ee83a 	callr	r2
   10ef0:	e0bfff15 	stw	r2,-4(fp)
   10ef4:	00000306 	br	10f04 <alt_get_errno+0x48>
   10ef8:	00800074 	movhi	r2,1
   10efc:	109de504 	addi	r2,r2,30612
   10f00:	e0bfff15 	stw	r2,-4(fp)
   10f04:	e0bfff17 	ldw	r2,-4(fp)
}
   10f08:	e037883a 	mov	sp,fp
   10f0c:	dfc00117 	ldw	ra,4(sp)
   10f10:	df000017 	ldw	fp,0(sp)
   10f14:	dec00204 	addi	sp,sp,8
   10f18:	f800283a 	ret

00010f1c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10f1c:	defffe04 	addi	sp,sp,-8
   10f20:	df000115 	stw	fp,4(sp)
   10f24:	df000104 	addi	fp,sp,4
   10f28:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10f2c:	e0bfff17 	ldw	r2,-4(fp)
   10f30:	108000d0 	cmplti	r2,r2,3
   10f34:	10000d1e 	bne	r2,zero,10f6c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10f38:	e0bfff17 	ldw	r2,-4(fp)
   10f3c:	00c00074 	movhi	r3,1
   10f40:	18d27f04 	addi	r3,r3,18940
   10f44:	10800324 	muli	r2,r2,12
   10f48:	10c5883a 	add	r2,r2,r3
   10f4c:	10800204 	addi	r2,r2,8
   10f50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10f54:	e0bfff17 	ldw	r2,-4(fp)
   10f58:	00c00074 	movhi	r3,1
   10f5c:	18d27f04 	addi	r3,r3,18940
   10f60:	10800324 	muli	r2,r2,12
   10f64:	10c5883a 	add	r2,r2,r3
   10f68:	10000015 	stw	zero,0(r2)
  }
}
   10f6c:	e037883a 	mov	sp,fp
   10f70:	df000017 	ldw	fp,0(sp)
   10f74:	dec00104 	addi	sp,sp,4
   10f78:	f800283a 	ret

00010f7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10f7c:	defff804 	addi	sp,sp,-32
   10f80:	df000715 	stw	fp,28(sp)
   10f84:	df000704 	addi	fp,sp,28
   10f88:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f8c:	0005303a 	rdctl	r2,status
   10f90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f94:	e0fffb17 	ldw	r3,-20(fp)
   10f98:	00bfff84 	movi	r2,-2
   10f9c:	1884703a 	and	r2,r3,r2
   10fa0:	1001703a 	wrctl	status,r2
  
  return context;
   10fa4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10fa8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10fac:	d0a00d17 	ldw	r2,-32716(gp)
   10fb0:	10c000c4 	addi	r3,r2,3
   10fb4:	00bfff04 	movi	r2,-4
   10fb8:	1884703a 	and	r2,r3,r2
   10fbc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10fc0:	d0e00d17 	ldw	r3,-32716(gp)
   10fc4:	e0bffe17 	ldw	r2,-8(fp)
   10fc8:	1887883a 	add	r3,r3,r2
   10fcc:	00805574 	movhi	r2,341
   10fd0:	10955404 	addi	r2,r2,21840
   10fd4:	10c0072e 	bgeu	r2,r3,10ff4 <sbrk+0x78>
   10fd8:	e0bffd17 	ldw	r2,-12(fp)
   10fdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fe0:	e0bffa17 	ldw	r2,-24(fp)
   10fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10fe8:	00bfffc4 	movi	r2,-1
   10fec:	e0bfff15 	stw	r2,-4(fp)
   10ff0:	00000c06 	br	11024 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   10ff4:	d0a00d17 	ldw	r2,-32716(gp)
   10ff8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   10ffc:	d0e00d17 	ldw	r3,-32716(gp)
   11000:	e0bffe17 	ldw	r2,-8(fp)
   11004:	1885883a 	add	r2,r3,r2
   11008:	d0a00d15 	stw	r2,-32716(gp)
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	e0bff915 	stw	r2,-28(fp)
   11014:	e0bff917 	ldw	r2,-28(fp)
   11018:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1101c:	e0bffc17 	ldw	r2,-16(fp)
   11020:	e0bfff15 	stw	r2,-4(fp)
   11024:	e0bfff17 	ldw	r2,-4(fp)
} 
   11028:	e037883a 	mov	sp,fp
   1102c:	df000017 	ldw	fp,0(sp)
   11030:	dec00104 	addi	sp,sp,4
   11034:	f800283a 	ret

00011038 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   11038:	defffb04 	addi	sp,sp,-20
   1103c:	dfc00415 	stw	ra,16(sp)
   11040:	df000315 	stw	fp,12(sp)
   11044:	df000304 	addi	fp,sp,12
   11048:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1104c:	00800074 	movhi	r2,1
   11050:	109df104 	addi	r2,r2,30660
   11054:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
   11058:	e0bffd15 	stw	r2,-12(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1105c:	00800074 	movhi	r2,1
   11060:	109df004 	addi	r2,r2,30656
   11064:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   11068:	1004c03a 	cmpne	r2,r2,zero
   1106c:	1000061e 	bne	r2,zero,11088 <times+0x50>
  {
    ALT_ERRNO = ENOSYS;
   11070:	00110cc0 	call	110cc <alt_get_errno>
   11074:	1007883a 	mov	r3,r2
   11078:	00801604 	movi	r2,88
   1107c:	18800015 	stw	r2,0(r3)
    return 0;
   11080:	e03fff15 	stw	zero,-4(fp)
   11084:	00000b06 	br	110b4 <times+0x7c>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   11088:	e0bffe17 	ldw	r2,-8(fp)
   1108c:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   11090:	e0fffe17 	ldw	r3,-8(fp)
   11094:	e0bffd17 	ldw	r2,-12(fp)
   11098:	18800115 	stw	r2,4(r3)
  buf->tms_cutime = 0;
   1109c:	e0bffe17 	ldw	r2,-8(fp)
   110a0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   110a4:	e0bffe17 	ldw	r2,-8(fp)
   110a8:	10000315 	stw	zero,12(r2)

  return ticks;
   110ac:	e0bffd17 	ldw	r2,-12(fp)
   110b0:	e0bfff15 	stw	r2,-4(fp)
   110b4:	e0bfff17 	ldw	r2,-4(fp)
}
   110b8:	e037883a 	mov	sp,fp
   110bc:	dfc00117 	ldw	ra,4(sp)
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00204 	addi	sp,sp,8
   110c8:	f800283a 	ret

000110cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   110cc:	defffd04 	addi	sp,sp,-12
   110d0:	dfc00215 	stw	ra,8(sp)
   110d4:	df000115 	stw	fp,4(sp)
   110d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   110dc:	00800074 	movhi	r2,1
   110e0:	10970d04 	addi	r2,r2,23604
   110e4:	10800017 	ldw	r2,0(r2)
   110e8:	1005003a 	cmpeq	r2,r2,zero
   110ec:	1000061e 	bne	r2,zero,11108 <alt_get_errno+0x3c>
   110f0:	00800074 	movhi	r2,1
   110f4:	10970d04 	addi	r2,r2,23604
   110f8:	10800017 	ldw	r2,0(r2)
   110fc:	103ee83a 	callr	r2
   11100:	e0bfff15 	stw	r2,-4(fp)
   11104:	00000306 	br	11114 <alt_get_errno+0x48>
   11108:	00800074 	movhi	r2,1
   1110c:	109de504 	addi	r2,r2,30612
   11110:	e0bfff15 	stw	r2,-4(fp)
   11114:	e0bfff17 	ldw	r2,-4(fp)
}
   11118:	e037883a 	mov	sp,fp
   1111c:	dfc00117 	ldw	ra,4(sp)
   11120:	df000017 	ldw	fp,0(sp)
   11124:	dec00204 	addi	sp,sp,8
   11128:	f800283a 	ret

0001112c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1112c:	defff704 	addi	sp,sp,-36
   11130:	dfc00815 	stw	ra,32(sp)
   11134:	df000715 	stw	fp,28(sp)
   11138:	df000704 	addi	fp,sp,28
   1113c:	e13ffb15 	stw	r4,-20(fp)
   11140:	e17ffc15 	stw	r5,-16(fp)
   11144:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11148:	e0bffb17 	ldw	r2,-20(fp)
   1114c:	1004803a 	cmplt	r2,r2,zero
   11150:	1000081e 	bne	r2,zero,11174 <write+0x48>
   11154:	e0bffb17 	ldw	r2,-20(fp)
   11158:	10800324 	muli	r2,r2,12
   1115c:	1007883a 	mov	r3,r2
   11160:	00800074 	movhi	r2,1
   11164:	10927f04 	addi	r2,r2,18940
   11168:	1887883a 	add	r3,r3,r2
   1116c:	e0ffff15 	stw	r3,-4(fp)
   11170:	00000106 	br	11178 <write+0x4c>
   11174:	e03fff15 	stw	zero,-4(fp)
   11178:	e0bfff17 	ldw	r2,-4(fp)
   1117c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   11180:	e0bffa17 	ldw	r2,-24(fp)
   11184:	1005003a 	cmpeq	r2,r2,zero
   11188:	1000241e 	bne	r2,zero,1121c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1118c:	e0bffa17 	ldw	r2,-24(fp)
   11190:	10800217 	ldw	r2,8(r2)
   11194:	108000cc 	andi	r2,r2,3
   11198:	1005003a 	cmpeq	r2,r2,zero
   1119c:	10001a1e 	bne	r2,zero,11208 <write+0xdc>
   111a0:	e0bffa17 	ldw	r2,-24(fp)
   111a4:	10800017 	ldw	r2,0(r2)
   111a8:	10800617 	ldw	r2,24(r2)
   111ac:	1005003a 	cmpeq	r2,r2,zero
   111b0:	1000151e 	bne	r2,zero,11208 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   111b4:	e0bffa17 	ldw	r2,-24(fp)
   111b8:	10800017 	ldw	r2,0(r2)
   111bc:	10800617 	ldw	r2,24(r2)
   111c0:	e17ffc17 	ldw	r5,-16(fp)
   111c4:	e1bffd17 	ldw	r6,-12(fp)
   111c8:	e13ffa17 	ldw	r4,-24(fp)
   111cc:	103ee83a 	callr	r2
   111d0:	e0bff915 	stw	r2,-28(fp)
   111d4:	e0bff917 	ldw	r2,-28(fp)
   111d8:	1004403a 	cmpge	r2,r2,zero
   111dc:	1000071e 	bne	r2,zero,111fc <write+0xd0>
      {
        ALT_ERRNO = -rval;
   111e0:	001124c0 	call	1124c <alt_get_errno>
   111e4:	e0fff917 	ldw	r3,-28(fp)
   111e8:	00c7c83a 	sub	r3,zero,r3
   111ec:	10c00015 	stw	r3,0(r2)
        return -1;
   111f0:	00bfffc4 	movi	r2,-1
   111f4:	e0bffe15 	stw	r2,-8(fp)
   111f8:	00000e06 	br	11234 <write+0x108>
      }
      return rval;
   111fc:	e0bff917 	ldw	r2,-28(fp)
   11200:	e0bffe15 	stw	r2,-8(fp)
   11204:	00000b06 	br	11234 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   11208:	001124c0 	call	1124c <alt_get_errno>
   1120c:	1007883a 	mov	r3,r2
   11210:	00800344 	movi	r2,13
   11214:	18800015 	stw	r2,0(r3)
   11218:	00000406 	br	1122c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1121c:	001124c0 	call	1124c <alt_get_errno>
   11220:	1007883a 	mov	r3,r2
   11224:	00801444 	movi	r2,81
   11228:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1122c:	00bfffc4 	movi	r2,-1
   11230:	e0bffe15 	stw	r2,-8(fp)
   11234:	e0bffe17 	ldw	r2,-8(fp)
}
   11238:	e037883a 	mov	sp,fp
   1123c:	dfc00117 	ldw	ra,4(sp)
   11240:	df000017 	ldw	fp,0(sp)
   11244:	dec00204 	addi	sp,sp,8
   11248:	f800283a 	ret

0001124c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1124c:	defffd04 	addi	sp,sp,-12
   11250:	dfc00215 	stw	ra,8(sp)
   11254:	df000115 	stw	fp,4(sp)
   11258:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1125c:	00800074 	movhi	r2,1
   11260:	10970d04 	addi	r2,r2,23604
   11264:	10800017 	ldw	r2,0(r2)
   11268:	1005003a 	cmpeq	r2,r2,zero
   1126c:	1000061e 	bne	r2,zero,11288 <alt_get_errno+0x3c>
   11270:	00800074 	movhi	r2,1
   11274:	10970d04 	addi	r2,r2,23604
   11278:	10800017 	ldw	r2,0(r2)
   1127c:	103ee83a 	callr	r2
   11280:	e0bfff15 	stw	r2,-4(fp)
   11284:	00000306 	br	11294 <alt_get_errno+0x48>
   11288:	00800074 	movhi	r2,1
   1128c:	109de504 	addi	r2,r2,30612
   11290:	e0bfff15 	stw	r2,-4(fp)
   11294:	e0bfff17 	ldw	r2,-4(fp)
}
   11298:	e037883a 	mov	sp,fp
   1129c:	dfc00117 	ldw	ra,4(sp)
   112a0:	df000017 	ldw	fp,0(sp)
   112a4:	dec00204 	addi	sp,sp,8
   112a8:	f800283a 	ret

000112ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   112ac:	defffd04 	addi	sp,sp,-12
   112b0:	dfc00215 	stw	ra,8(sp)
   112b4:	df000115 	stw	fp,4(sp)
   112b8:	df000104 	addi	fp,sp,4
   112bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   112c0:	00136500 	call	13650 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   112c4:	00800044 	movi	r2,1
   112c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   112cc:	e037883a 	mov	sp,fp
   112d0:	dfc00117 	ldw	ra,4(sp)
   112d4:	df000017 	ldw	fp,0(sp)
   112d8:	dec00204 	addi	sp,sp,8
   112dc:	f800283a 	ret

000112e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   112e0:	defffe04 	addi	sp,sp,-8
   112e4:	dfc00115 	stw	ra,4(sp)
   112e8:	df000015 	stw	fp,0(sp)
   112ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   112f0:	01020034 	movhi	r4,2048
   112f4:	21043004 	addi	r4,r4,4288
   112f8:	000b883a 	mov	r5,zero
   112fc:	01800044 	movi	r6,1
   11300:	01c0fa04 	movi	r7,1000
   11304:	00123fc0 	call	123fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_1_STAGE1_TO_2, fifo_1_stage1_to_2);
    ALTERA_AVALON_FIFO_INIT ( FIFO_2_STAGE1_TO_2, fifo_2_stage1_to_2);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE1_TO_4, fifo_stage1_to_4);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE1_TO_5, fifo_stage1_to_5);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE1_TO_6, fifo_stage1_to_6);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   11308:	01000074 	movhi	r4,1
   1130c:	2112e904 	addi	r4,r4,19364
   11310:	000b883a 	mov	r5,zero
   11314:	01800404 	movi	r6,16
   11318:	0011a280 	call	11a28 <altera_avalon_jtag_uart_init>
   1131c:	01000074 	movhi	r4,1
   11320:	2112df04 	addi	r4,r4,19324
   11324:	00113480 	call	11348 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   11328:	01000074 	movhi	r4,1
   1132c:	2116f704 	addi	r4,r4,23516
   11330:	0012f2c0 	call	12f2c <alt_fs_reg>
}
   11334:	e037883a 	mov	sp,fp
   11338:	dfc00117 	ldw	ra,4(sp)
   1133c:	df000017 	ldw	fp,0(sp)
   11340:	dec00204 	addi	sp,sp,8
   11344:	f800283a 	ret

00011348 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11348:	defffd04 	addi	sp,sp,-12
   1134c:	dfc00215 	stw	ra,8(sp)
   11350:	df000115 	stw	fp,4(sp)
   11354:	df000104 	addi	fp,sp,4
   11358:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1135c:	e13fff17 	ldw	r4,-4(fp)
   11360:	01400074 	movhi	r5,1
   11364:	29570a04 	addi	r5,r5,23592
   11368:	0012b9c0 	call	12b9c <alt_dev_llist_insert>
}
   1136c:	e037883a 	mov	sp,fp
   11370:	dfc00117 	ldw	ra,4(sp)
   11374:	df000017 	ldw	fp,0(sp)
   11378:	dec00204 	addi	sp,sp,8
   1137c:	f800283a 	ret

00011380 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
   11380:	defff904 	addi	sp,sp,-28
   11384:	dfc00615 	stw	ra,24(sp)
   11388:	df000515 	stw	fp,20(sp)
   1138c:	df000504 	addi	fp,sp,20
   11390:	e13ffb15 	stw	r4,-20(fp)
   11394:	e17ffc15 	stw	r5,-16(fp)
   11398:	e1bffd15 	stw	r6,-12(fp)
   1139c:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
   113a0:	e13ffb17 	ldw	r4,-20(fp)
   113a4:	01400fc4 	movi	r5,63
   113a8:	00115700 	call	11570 <altera_avalon_fifo_clear_event>
   113ac:	1005003a 	cmpeq	r2,r2,zero
   113b0:	1000031e 	bne	r2,zero,113c0 <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   113b4:	00bfffc4 	movi	r2,-1
   113b8:	e0bfff15 	stw	r2,-4(fp)
   113bc:	00001906 	br	11424 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
   113c0:	e13ffb17 	ldw	r4,-20(fp)
   113c4:	e17ffc17 	ldw	r5,-16(fp)
   113c8:	00115d80 	call	115d8 <altera_avalon_fifo_write_ienable>
   113cc:	1005003a 	cmpeq	r2,r2,zero
   113d0:	1000031e 	bne	r2,zero,113e0 <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   113d4:	00bfff84 	movi	r2,-2
   113d8:	e0bfff15 	stw	r2,-4(fp)
   113dc:	00001106 	br	11424 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
   113e0:	e13ffb17 	ldw	r4,-20(fp)
   113e4:	e17ffe17 	ldw	r5,-8(fp)
   113e8:	00116380 	call	11638 <altera_avalon_fifo_write_almostfull>
   113ec:	1005003a 	cmpeq	r2,r2,zero
   113f0:	1000031e 	bne	r2,zero,11400 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   113f4:	00bfff44 	movi	r2,-3
   113f8:	e0bfff15 	stw	r2,-4(fp)
   113fc:	00000906 	br	11424 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
   11400:	e13ffb17 	ldw	r4,-20(fp)
   11404:	e17ffd17 	ldw	r5,-12(fp)
   11408:	00116980 	call	11698 <altera_avalon_fifo_write_almostempty>
   1140c:	1005003a 	cmpeq	r2,r2,zero
   11410:	1000031e 	bne	r2,zero,11420 <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   11414:	00bfff44 	movi	r2,-3
   11418:	e0bfff15 	stw	r2,-4(fp)
   1141c:	00000106 	br	11424 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
   11420:	e03fff15 	stw	zero,-4(fp)
   11424:	e0bfff17 	ldw	r2,-4(fp)
}
   11428:	e037883a 	mov	sp,fp
   1142c:	dfc00117 	ldw	ra,4(sp)
   11430:	df000017 	ldw	fp,0(sp)
   11434:	dec00204 	addi	sp,sp,8
   11438:	f800283a 	ret

0001143c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
   1143c:	defffd04 	addi	sp,sp,-12
   11440:	df000215 	stw	fp,8(sp)
   11444:	df000204 	addi	fp,sp,8
   11448:	e13ffe15 	stw	r4,-8(fp)
   1144c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
   11450:	e0bffe17 	ldw	r2,-8(fp)
   11454:	10800104 	addi	r2,r2,4
   11458:	10800037 	ldwio	r2,0(r2)
   1145c:	1007883a 	mov	r3,r2
   11460:	e0bfff17 	ldw	r2,-4(fp)
   11464:	1884703a 	and	r2,r3,r2
}
   11468:	e037883a 	mov	sp,fp
   1146c:	df000017 	ldw	fp,0(sp)
   11470:	dec00104 	addi	sp,sp,4
   11474:	f800283a 	ret

00011478 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
   11478:	defffd04 	addi	sp,sp,-12
   1147c:	df000215 	stw	fp,8(sp)
   11480:	df000204 	addi	fp,sp,8
   11484:	e13ffe15 	stw	r4,-8(fp)
   11488:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
   1148c:	e0bffe17 	ldw	r2,-8(fp)
   11490:	10800304 	addi	r2,r2,12
   11494:	10800037 	ldwio	r2,0(r2)
   11498:	1007883a 	mov	r3,r2
   1149c:	e0bfff17 	ldw	r2,-4(fp)
   114a0:	1884703a 	and	r2,r3,r2
}
   114a4:	e037883a 	mov	sp,fp
   114a8:	df000017 	ldw	fp,0(sp)
   114ac:	dec00104 	addi	sp,sp,4
   114b0:	f800283a 	ret

000114b4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
   114b4:	defffe04 	addi	sp,sp,-8
   114b8:	df000115 	stw	fp,4(sp)
   114bc:	df000104 	addi	fp,sp,4
   114c0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
   114c4:	e0bfff17 	ldw	r2,-4(fp)
   114c8:	10800404 	addi	r2,r2,16
   114cc:	10800037 	ldwio	r2,0(r2)
}
   114d0:	e037883a 	mov	sp,fp
   114d4:	df000017 	ldw	fp,0(sp)
   114d8:	dec00104 	addi	sp,sp,4
   114dc:	f800283a 	ret

000114e0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
   114e0:	defffe04 	addi	sp,sp,-8
   114e4:	df000115 	stw	fp,4(sp)
   114e8:	df000104 	addi	fp,sp,4
   114ec:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
   114f0:	e0bfff17 	ldw	r2,-4(fp)
   114f4:	10800504 	addi	r2,r2,20
   114f8:	10800037 	ldwio	r2,0(r2)
}
   114fc:	e037883a 	mov	sp,fp
   11500:	df000017 	ldw	fp,0(sp)
   11504:	dec00104 	addi	sp,sp,4
   11508:	f800283a 	ret

0001150c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
   1150c:	defffd04 	addi	sp,sp,-12
   11510:	df000215 	stw	fp,8(sp)
   11514:	df000204 	addi	fp,sp,8
   11518:	e13ffe15 	stw	r4,-8(fp)
   1151c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
   11520:	e0bffe17 	ldw	r2,-8(fp)
   11524:	10800204 	addi	r2,r2,8
   11528:	10800037 	ldwio	r2,0(r2)
   1152c:	1007883a 	mov	r3,r2
   11530:	e0bfff17 	ldw	r2,-4(fp)
   11534:	1884703a 	and	r2,r3,r2
}
   11538:	e037883a 	mov	sp,fp
   1153c:	df000017 	ldw	fp,0(sp)
   11540:	dec00104 	addi	sp,sp,4
   11544:	f800283a 	ret

00011548 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
   11548:	defffe04 	addi	sp,sp,-8
   1154c:	df000115 	stw	fp,4(sp)
   11550:	df000104 	addi	fp,sp,4
   11554:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
   11558:	e0bfff17 	ldw	r2,-4(fp)
   1155c:	10800037 	ldwio	r2,0(r2)
}
   11560:	e037883a 	mov	sp,fp
   11564:	df000017 	ldw	fp,0(sp)
   11568:	dec00104 	addi	sp,sp,4
   1156c:	f800283a 	ret

00011570 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
   11570:	defffc04 	addi	sp,sp,-16
   11574:	df000315 	stw	fp,12(sp)
   11578:	df000304 	addi	fp,sp,12
   1157c:	e13ffd15 	stw	r4,-12(fp)
   11580:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
   11584:	e0bffd17 	ldw	r2,-12(fp)
   11588:	10800204 	addi	r2,r2,8
   1158c:	e0fffe17 	ldw	r3,-8(fp)
   11590:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	10800204 	addi	r2,r2,8
   1159c:	10800037 	ldwio	r2,0(r2)
   115a0:	1007883a 	mov	r3,r2
   115a4:	e0bffe17 	ldw	r2,-8(fp)
   115a8:	1884703a 	and	r2,r3,r2
   115ac:	1004c03a 	cmpne	r2,r2,zero
   115b0:	1000021e 	bne	r2,zero,115bc <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
   115b4:	e03fff15 	stw	zero,-4(fp)
   115b8:	00000206 	br	115c4 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
   115bc:	00bfffc4 	movi	r2,-1
   115c0:	e0bfff15 	stw	r2,-4(fp)
   115c4:	e0bfff17 	ldw	r2,-4(fp)
}
   115c8:	e037883a 	mov	sp,fp
   115cc:	df000017 	ldw	fp,0(sp)
   115d0:	dec00104 	addi	sp,sp,4
   115d4:	f800283a 	ret

000115d8 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
   115d8:	defffc04 	addi	sp,sp,-16
   115dc:	df000315 	stw	fp,12(sp)
   115e0:	df000304 	addi	fp,sp,12
   115e4:	e13ffd15 	stw	r4,-12(fp)
   115e8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
   115ec:	e0bffd17 	ldw	r2,-12(fp)
   115f0:	10800304 	addi	r2,r2,12
   115f4:	e0fffe17 	ldw	r3,-8(fp)
   115f8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
   115fc:	e0bffd17 	ldw	r2,-12(fp)
   11600:	10800304 	addi	r2,r2,12
   11604:	10800037 	ldwio	r2,0(r2)
   11608:	1007883a 	mov	r3,r2
   1160c:	e0bffe17 	ldw	r2,-8(fp)
   11610:	1880021e 	bne	r3,r2,1161c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
   11614:	e03fff15 	stw	zero,-4(fp)
   11618:	00000206 	br	11624 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
   1161c:	00bfff84 	movi	r2,-2
   11620:	e0bfff15 	stw	r2,-4(fp)
   11624:	e0bfff17 	ldw	r2,-4(fp)
}
   11628:	e037883a 	mov	sp,fp
   1162c:	df000017 	ldw	fp,0(sp)
   11630:	dec00104 	addi	sp,sp,4
   11634:	f800283a 	ret

00011638 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
   11638:	defffc04 	addi	sp,sp,-16
   1163c:	df000315 	stw	fp,12(sp)
   11640:	df000304 	addi	fp,sp,12
   11644:	e13ffd15 	stw	r4,-12(fp)
   11648:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
   1164c:	e0bffd17 	ldw	r2,-12(fp)
   11650:	10800404 	addi	r2,r2,16
   11654:	e0fffe17 	ldw	r3,-8(fp)
   11658:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
   1165c:	e0bffd17 	ldw	r2,-12(fp)
   11660:	10800404 	addi	r2,r2,16
   11664:	10800037 	ldwio	r2,0(r2)
   11668:	1007883a 	mov	r3,r2
   1166c:	e0bffe17 	ldw	r2,-8(fp)
   11670:	1880021e 	bne	r3,r2,1167c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
   11674:	e03fff15 	stw	zero,-4(fp)
   11678:	00000206 	br	11684 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   1167c:	00bfff44 	movi	r2,-3
   11680:	e0bfff15 	stw	r2,-4(fp)
   11684:	e0bfff17 	ldw	r2,-4(fp)
}
   11688:	e037883a 	mov	sp,fp
   1168c:	df000017 	ldw	fp,0(sp)
   11690:	dec00104 	addi	sp,sp,4
   11694:	f800283a 	ret

00011698 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
   11698:	defffc04 	addi	sp,sp,-16
   1169c:	df000315 	stw	fp,12(sp)
   116a0:	df000304 	addi	fp,sp,12
   116a4:	e13ffd15 	stw	r4,-12(fp)
   116a8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
   116ac:	e0bffd17 	ldw	r2,-12(fp)
   116b0:	10800504 	addi	r2,r2,20
   116b4:	e0fffe17 	ldw	r3,-8(fp)
   116b8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
   116bc:	e0bffd17 	ldw	r2,-12(fp)
   116c0:	10800504 	addi	r2,r2,20
   116c4:	10800037 	ldwio	r2,0(r2)
   116c8:	1007883a 	mov	r3,r2
   116cc:	e0bffe17 	ldw	r2,-8(fp)
   116d0:	1880021e 	bne	r3,r2,116dc <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
   116d4:	e03fff15 	stw	zero,-4(fp)
   116d8:	00000206 	br	116e4 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
   116dc:	00bfff44 	movi	r2,-3
   116e0:	e0bfff15 	stw	r2,-4(fp)
   116e4:	e0bfff17 	ldw	r2,-4(fp)
}
   116e8:	e037883a 	mov	sp,fp
   116ec:	df000017 	ldw	fp,0(sp)
   116f0:	dec00104 	addi	sp,sp,4
   116f4:	f800283a 	ret

000116f8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
   116f8:	defffa04 	addi	sp,sp,-24
   116fc:	dfc00515 	stw	ra,20(sp)
   11700:	df000415 	stw	fp,16(sp)
   11704:	df000404 	addi	fp,sp,16
   11708:	e13ffc15 	stw	r4,-16(fp)
   1170c:	e17ffd15 	stw	r5,-12(fp)
   11710:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11714:	e13ffd17 	ldw	r4,-12(fp)
   11718:	01400044 	movi	r5,1
   1171c:	001143c0 	call	1143c <altera_avalon_fifo_read_status>
   11720:	1004c03a 	cmpne	r2,r2,zero
   11724:	1000051e 	bne	r2,zero,1173c <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
   11728:	e0bffc17 	ldw	r2,-16(fp)
   1172c:	e0fffe17 	ldw	r3,-8(fp)
   11730:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
   11734:	e03fff15 	stw	zero,-4(fp)
   11738:	00000206 	br	11744 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
   1173c:	00bfff04 	movi	r2,-4
   11740:	e0bfff15 	stw	r2,-4(fp)
   11744:	e0bfff17 	ldw	r2,-4(fp)
    }
}
   11748:	e037883a 	mov	sp,fp
   1174c:	dfc00117 	ldw	ra,4(sp)
   11750:	df000017 	ldw	fp,0(sp)
   11754:	dec00204 	addi	sp,sp,8
   11758:	f800283a 	ret

0001175c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
   1175c:	defffa04 	addi	sp,sp,-24
   11760:	dfc00515 	stw	ra,20(sp)
   11764:	df000415 	stw	fp,16(sp)
   11768:	df000404 	addi	fp,sp,16
   1176c:	e13ffd15 	stw	r4,-12(fp)
   11770:	e17ffe15 	stw	r5,-8(fp)
   11774:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
   11778:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
   1177c:	e0bfff17 	ldw	r2,-4(fp)
   11780:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   11784:	e13ffe17 	ldw	r4,-8(fp)
   11788:	01400084 	movi	r5,2
   1178c:	001143c0 	call	1143c <altera_avalon_fifo_read_status>
   11790:	1004c03a 	cmpne	r2,r2,zero
   11794:	1000071e 	bne	r2,zero,117b4 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
   11798:	e13ffe17 	ldw	r4,-8(fp)
   1179c:	00115480 	call	11548 <altera_avalon_fifo_read_level>
   117a0:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   117a4:	e0bffd17 	ldw	r2,-12(fp)
   117a8:	10c00037 	ldwio	r3,0(r2)
   117ac:	e0bfff17 	ldw	r2,-4(fp)
   117b0:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
   117b4:	e0bffc17 	ldw	r2,-16(fp)
}
   117b8:	e037883a 	mov	sp,fp
   117bc:	dfc00117 	ldw	ra,4(sp)
   117c0:	df000017 	ldw	fp,0(sp)
   117c4:	dec00204 	addi	sp,sp,8
   117c8:	f800283a 	ret

000117cc <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
   117cc:	defffb04 	addi	sp,sp,-20
   117d0:	dfc00415 	stw	ra,16(sp)
   117d4:	df000315 	stw	fp,12(sp)
   117d8:	df000304 	addi	fp,sp,12
   117dc:	e13ffd15 	stw	r4,-12(fp)
   117e0:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
   117e4:	e13ffe17 	ldw	r4,-8(fp)
   117e8:	01400084 	movi	r5,2
   117ec:	001143c0 	call	1143c <altera_avalon_fifo_read_status>
   117f0:	1004c03a 	cmpne	r2,r2,zero
   117f4:	1000041e 	bne	r2,zero,11808 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
   117f8:	e0bffd17 	ldw	r2,-12(fp)
   117fc:	10800037 	ldwio	r2,0(r2)
   11800:	e0bfff15 	stw	r2,-4(fp)
   11804:	00000106 	br	1180c <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
   11808:	e03fff15 	stw	zero,-4(fp)
   1180c:	e0bfff17 	ldw	r2,-4(fp)
}
   11810:	e037883a 	mov	sp,fp
   11814:	dfc00117 	ldw	ra,4(sp)
   11818:	df000017 	ldw	fp,0(sp)
   1181c:	dec00204 	addi	sp,sp,8
   11820:	f800283a 	ret

00011824 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
   11824:	defffa04 	addi	sp,sp,-24
   11828:	dfc00515 	stw	ra,20(sp)
   1182c:	df000415 	stw	fp,16(sp)
   11830:	df000404 	addi	fp,sp,16
   11834:	e13ffc15 	stw	r4,-16(fp)
   11838:	e17ffd15 	stw	r5,-12(fp)
   1183c:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
   11840:	e13ffd17 	ldw	r4,-12(fp)
   11844:	01400044 	movi	r5,1
   11848:	001143c0 	call	1143c <altera_avalon_fifo_read_status>
   1184c:	1004c03a 	cmpne	r2,r2,zero
   11850:	1000061e 	bne	r2,zero,1186c <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
   11854:	e0bffc17 	ldw	r2,-16(fp)
   11858:	10800104 	addi	r2,r2,4
   1185c:	e0fffe17 	ldw	r3,-8(fp)
   11860:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
   11864:	e03fff15 	stw	zero,-4(fp)
   11868:	00000206 	br	11874 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
   1186c:	00bfff04 	movi	r2,-4
   11870:	e0bfff15 	stw	r2,-4(fp)
   11874:	e0bfff17 	ldw	r2,-4(fp)
    }
}
   11878:	e037883a 	mov	sp,fp
   1187c:	dfc00117 	ldw	ra,4(sp)
   11880:	df000017 	ldw	fp,0(sp)
   11884:	dec00204 	addi	sp,sp,8
   11888:	f800283a 	ret

0001188c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
   1188c:	defffe04 	addi	sp,sp,-8
   11890:	df000115 	stw	fp,4(sp)
   11894:	df000104 	addi	fp,sp,4
   11898:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
   1189c:	e0bfff17 	ldw	r2,-4(fp)
   118a0:	10800104 	addi	r2,r2,4
   118a4:	10800037 	ldwio	r2,0(r2)
}
   118a8:	e037883a 	mov	sp,fp
   118ac:	df000017 	ldw	fp,0(sp)
   118b0:	dec00104 	addi	sp,sp,4
   118b4:	f800283a 	ret

000118b8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
   118b8:	defffe04 	addi	sp,sp,-8
   118bc:	df000115 	stw	fp,4(sp)
   118c0:	df000104 	addi	fp,sp,4
   118c4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
   118c8:	e0bfff17 	ldw	r2,-4(fp)
   118cc:	10800037 	ldwio	r2,0(r2)
}
   118d0:	e037883a 	mov	sp,fp
   118d4:	df000017 	ldw	fp,0(sp)
   118d8:	dec00104 	addi	sp,sp,4
   118dc:	f800283a 	ret

000118e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   118e0:	defffa04 	addi	sp,sp,-24
   118e4:	dfc00515 	stw	ra,20(sp)
   118e8:	df000415 	stw	fp,16(sp)
   118ec:	df000404 	addi	fp,sp,16
   118f0:	e13ffd15 	stw	r4,-12(fp)
   118f4:	e17ffe15 	stw	r5,-8(fp)
   118f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   118fc:	e0bffd17 	ldw	r2,-12(fp)
   11900:	10800017 	ldw	r2,0(r2)
   11904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11908:	e0bffc17 	ldw	r2,-16(fp)
   1190c:	11000a04 	addi	r4,r2,40
   11910:	e0bffd17 	ldw	r2,-12(fp)
   11914:	11c00217 	ldw	r7,8(r2)
   11918:	e17ffe17 	ldw	r5,-8(fp)
   1191c:	e1bfff17 	ldw	r6,-4(fp)
   11920:	0011f280 	call	11f28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11924:	e037883a 	mov	sp,fp
   11928:	dfc00117 	ldw	ra,4(sp)
   1192c:	df000017 	ldw	fp,0(sp)
   11930:	dec00204 	addi	sp,sp,8
   11934:	f800283a 	ret

00011938 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11938:	defffa04 	addi	sp,sp,-24
   1193c:	dfc00515 	stw	ra,20(sp)
   11940:	df000415 	stw	fp,16(sp)
   11944:	df000404 	addi	fp,sp,16
   11948:	e13ffd15 	stw	r4,-12(fp)
   1194c:	e17ffe15 	stw	r5,-8(fp)
   11950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11954:	e0bffd17 	ldw	r2,-12(fp)
   11958:	10800017 	ldw	r2,0(r2)
   1195c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11960:	e0bffc17 	ldw	r2,-16(fp)
   11964:	11000a04 	addi	r4,r2,40
   11968:	e0bffd17 	ldw	r2,-12(fp)
   1196c:	11c00217 	ldw	r7,8(r2)
   11970:	e17ffe17 	ldw	r5,-8(fp)
   11974:	e1bfff17 	ldw	r6,-4(fp)
   11978:	001214c0 	call	1214c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1197c:	e037883a 	mov	sp,fp
   11980:	dfc00117 	ldw	ra,4(sp)
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00204 	addi	sp,sp,8
   1198c:	f800283a 	ret

00011990 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11990:	defffc04 	addi	sp,sp,-16
   11994:	dfc00315 	stw	ra,12(sp)
   11998:	df000215 	stw	fp,8(sp)
   1199c:	df000204 	addi	fp,sp,8
   119a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   119a4:	e0bfff17 	ldw	r2,-4(fp)
   119a8:	10800017 	ldw	r2,0(r2)
   119ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   119b0:	e0bffe17 	ldw	r2,-8(fp)
   119b4:	11000a04 	addi	r4,r2,40
   119b8:	e0bfff17 	ldw	r2,-4(fp)
   119bc:	11400217 	ldw	r5,8(r2)
   119c0:	0011dc00 	call	11dc0 <altera_avalon_jtag_uart_close>
}
   119c4:	e037883a 	mov	sp,fp
   119c8:	dfc00117 	ldw	ra,4(sp)
   119cc:	df000017 	ldw	fp,0(sp)
   119d0:	dec00204 	addi	sp,sp,8
   119d4:	f800283a 	ret

000119d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   119d8:	defffa04 	addi	sp,sp,-24
   119dc:	dfc00515 	stw	ra,20(sp)
   119e0:	df000415 	stw	fp,16(sp)
   119e4:	df000404 	addi	fp,sp,16
   119e8:	e13ffd15 	stw	r4,-12(fp)
   119ec:	e17ffe15 	stw	r5,-8(fp)
   119f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	10800017 	ldw	r2,0(r2)
   119fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11a00:	e0bffc17 	ldw	r2,-16(fp)
   11a04:	11000a04 	addi	r4,r2,40
   11a08:	e17ffe17 	ldw	r5,-8(fp)
   11a0c:	e1bfff17 	ldw	r6,-4(fp)
   11a10:	0011e340 	call	11e34 <altera_avalon_jtag_uart_ioctl>
}
   11a14:	e037883a 	mov	sp,fp
   11a18:	dfc00117 	ldw	ra,4(sp)
   11a1c:	df000017 	ldw	fp,0(sp)
   11a20:	dec00204 	addi	sp,sp,8
   11a24:	f800283a 	ret

00011a28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11a28:	defffa04 	addi	sp,sp,-24
   11a2c:	dfc00515 	stw	ra,20(sp)
   11a30:	df000415 	stw	fp,16(sp)
   11a34:	df000404 	addi	fp,sp,16
   11a38:	e13ffd15 	stw	r4,-12(fp)
   11a3c:	e17ffe15 	stw	r5,-8(fp)
   11a40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11a44:	e0fffd17 	ldw	r3,-12(fp)
   11a48:	00800044 	movi	r2,1
   11a4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11a50:	e0bffd17 	ldw	r2,-12(fp)
   11a54:	10800017 	ldw	r2,0(r2)
   11a58:	11000104 	addi	r4,r2,4
   11a5c:	e0bffd17 	ldw	r2,-12(fp)
   11a60:	10800817 	ldw	r2,32(r2)
   11a64:	1007883a 	mov	r3,r2
   11a68:	2005883a 	mov	r2,r4
   11a6c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   11a70:	e13ffe17 	ldw	r4,-8(fp)
   11a74:	e17fff17 	ldw	r5,-4(fp)
   11a78:	d8000015 	stw	zero,0(sp)
   11a7c:	01800074 	movhi	r6,1
   11a80:	3186ba04 	addi	r6,r6,6888
   11a84:	e1fffd17 	ldw	r7,-12(fp)
   11a88:	00130a40 	call	130a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11a8c:	e0bffd17 	ldw	r2,-12(fp)
   11a90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11a94:	e0bffd17 	ldw	r2,-12(fp)
   11a98:	11000204 	addi	r4,r2,8
   11a9c:	00800074 	movhi	r2,1
   11aa0:	109df004 	addi	r2,r2,30656
   11aa4:	10800017 	ldw	r2,0(r2)
   11aa8:	100b883a 	mov	r5,r2
   11aac:	01800074 	movhi	r6,1
   11ab0:	31874404 	addi	r6,r6,7440
   11ab4:	e1fffd17 	ldw	r7,-12(fp)
   11ab8:	0012a2c0 	call	12a2c <alt_alarm_start>
   11abc:	1004403a 	cmpge	r2,r2,zero
   11ac0:	1000041e 	bne	r2,zero,11ad4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11ac4:	e0fffd17 	ldw	r3,-12(fp)
   11ac8:	00a00034 	movhi	r2,32768
   11acc:	10bfffc4 	addi	r2,r2,-1
   11ad0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11ad4:	e037883a 	mov	sp,fp
   11ad8:	dfc00117 	ldw	ra,4(sp)
   11adc:	df000017 	ldw	fp,0(sp)
   11ae0:	dec00204 	addi	sp,sp,8
   11ae4:	f800283a 	ret

00011ae8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11ae8:	defff804 	addi	sp,sp,-32
   11aec:	df000715 	stw	fp,28(sp)
   11af0:	df000704 	addi	fp,sp,28
   11af4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11af8:	e0bfff17 	ldw	r2,-4(fp)
   11afc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   11b00:	e0bffe17 	ldw	r2,-8(fp)
   11b04:	10800017 	ldw	r2,0(r2)
   11b08:	e0bffd15 	stw	r2,-12(fp)
   11b0c:	00000006 	br	11b10 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11b10:	e0bffd17 	ldw	r2,-12(fp)
   11b14:	10800104 	addi	r2,r2,4
   11b18:	10800037 	ldwio	r2,0(r2)
   11b1c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11b20:	e0bffc17 	ldw	r2,-16(fp)
   11b24:	1080c00c 	andi	r2,r2,768
   11b28:	1005003a 	cmpeq	r2,r2,zero
   11b2c:	1000741e 	bne	r2,zero,11d00 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11b30:	e0bffc17 	ldw	r2,-16(fp)
   11b34:	1080400c 	andi	r2,r2,256
   11b38:	1005003a 	cmpeq	r2,r2,zero
   11b3c:	1000351e 	bne	r2,zero,11c14 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11b40:	00800074 	movhi	r2,1
   11b44:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11b48:	e0bffe17 	ldw	r2,-8(fp)
   11b4c:	10800a17 	ldw	r2,40(r2)
   11b50:	10800044 	addi	r2,r2,1
   11b54:	1081ffcc 	andi	r2,r2,2047
   11b58:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   11b5c:	e0bffe17 	ldw	r2,-8(fp)
   11b60:	10c00b17 	ldw	r3,44(r2)
   11b64:	e0bffa17 	ldw	r2,-24(fp)
   11b68:	18801626 	beq	r3,r2,11bc4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11b6c:	e0bffd17 	ldw	r2,-12(fp)
   11b70:	10800037 	ldwio	r2,0(r2)
   11b74:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11b78:	e0bffb17 	ldw	r2,-20(fp)
   11b7c:	10a0000c 	andi	r2,r2,32768
   11b80:	1005003a 	cmpeq	r2,r2,zero
   11b84:	10000f1e 	bne	r2,zero,11bc4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11b88:	e0bffe17 	ldw	r2,-8(fp)
   11b8c:	10c00a17 	ldw	r3,40(r2)
   11b90:	e0bffb17 	ldw	r2,-20(fp)
   11b94:	1009883a 	mov	r4,r2
   11b98:	e0bffe17 	ldw	r2,-8(fp)
   11b9c:	1885883a 	add	r2,r3,r2
   11ba0:	10800e04 	addi	r2,r2,56
   11ba4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11ba8:	e0bffe17 	ldw	r2,-8(fp)
   11bac:	10800a17 	ldw	r2,40(r2)
   11bb0:	10800044 	addi	r2,r2,1
   11bb4:	10c1ffcc 	andi	r3,r2,2047
   11bb8:	e0bffe17 	ldw	r2,-8(fp)
   11bbc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11bc0:	003fe106 	br	11b48 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11bc4:	e0bffb17 	ldw	r2,-20(fp)
   11bc8:	10bfffec 	andhi	r2,r2,65535
   11bcc:	1005003a 	cmpeq	r2,r2,zero
   11bd0:	1000101e 	bne	r2,zero,11c14 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11bd4:	e0bffe17 	ldw	r2,-8(fp)
   11bd8:	10c00817 	ldw	r3,32(r2)
   11bdc:	00bfff84 	movi	r2,-2
   11be0:	1886703a 	and	r3,r3,r2
   11be4:	e0bffe17 	ldw	r2,-8(fp)
   11be8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11bec:	e0bffd17 	ldw	r2,-12(fp)
   11bf0:	11000104 	addi	r4,r2,4
   11bf4:	e0bffe17 	ldw	r2,-8(fp)
   11bf8:	10800817 	ldw	r2,32(r2)
   11bfc:	1007883a 	mov	r3,r2
   11c00:	2005883a 	mov	r2,r4
   11c04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11c08:	e0bffd17 	ldw	r2,-12(fp)
   11c0c:	10800104 	addi	r2,r2,4
   11c10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   11c14:	e0bffc17 	ldw	r2,-16(fp)
   11c18:	1080800c 	andi	r2,r2,512
   11c1c:	1005003a 	cmpeq	r2,r2,zero
   11c20:	103fbb1e 	bne	r2,zero,11b10 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11c24:	e0bffc17 	ldw	r2,-16(fp)
   11c28:	10bfffec 	andhi	r2,r2,65535
   11c2c:	1004d43a 	srli	r2,r2,16
   11c30:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11c34:	00001506 	br	11c8c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11c38:	e13ffd17 	ldw	r4,-12(fp)
   11c3c:	e0bffe17 	ldw	r2,-8(fp)
   11c40:	10c00d17 	ldw	r3,52(r2)
   11c44:	e0bffe17 	ldw	r2,-8(fp)
   11c48:	1885883a 	add	r2,r3,r2
   11c4c:	10820e04 	addi	r2,r2,2104
   11c50:	10800003 	ldbu	r2,0(r2)
   11c54:	10c03fcc 	andi	r3,r2,255
   11c58:	18c0201c 	xori	r3,r3,128
   11c5c:	18ffe004 	addi	r3,r3,-128
   11c60:	2005883a 	mov	r2,r4
   11c64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11c68:	e0bffe17 	ldw	r2,-8(fp)
   11c6c:	10800d17 	ldw	r2,52(r2)
   11c70:	10800044 	addi	r2,r2,1
   11c74:	10c1ffcc 	andi	r3,r2,2047
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11c80:	e0bff917 	ldw	r2,-28(fp)
   11c84:	10bfffc4 	addi	r2,r2,-1
   11c88:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11c8c:	e0bff917 	ldw	r2,-28(fp)
   11c90:	1005003a 	cmpeq	r2,r2,zero
   11c94:	1000051e 	bne	r2,zero,11cac <altera_avalon_jtag_uart_irq+0x1c4>
   11c98:	e0bffe17 	ldw	r2,-8(fp)
   11c9c:	10c00d17 	ldw	r3,52(r2)
   11ca0:	e0bffe17 	ldw	r2,-8(fp)
   11ca4:	10800c17 	ldw	r2,48(r2)
   11ca8:	18bfe31e 	bne	r3,r2,11c38 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11cac:	e0bff917 	ldw	r2,-28(fp)
   11cb0:	1005003a 	cmpeq	r2,r2,zero
   11cb4:	103f961e 	bne	r2,zero,11b10 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11cb8:	e0bffe17 	ldw	r2,-8(fp)
   11cbc:	10c00817 	ldw	r3,32(r2)
   11cc0:	00bfff44 	movi	r2,-3
   11cc4:	1886703a 	and	r3,r3,r2
   11cc8:	e0bffe17 	ldw	r2,-8(fp)
   11ccc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11cd0:	e0bffe17 	ldw	r2,-8(fp)
   11cd4:	10800017 	ldw	r2,0(r2)
   11cd8:	11000104 	addi	r4,r2,4
   11cdc:	e0bffe17 	ldw	r2,-8(fp)
   11ce0:	10800817 	ldw	r2,32(r2)
   11ce4:	1007883a 	mov	r3,r2
   11ce8:	2005883a 	mov	r2,r4
   11cec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11cf0:	e0bffd17 	ldw	r2,-12(fp)
   11cf4:	10800104 	addi	r2,r2,4
   11cf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   11cfc:	003f8406 	br	11b10 <altera_avalon_jtag_uart_irq+0x28>
}
   11d00:	e037883a 	mov	sp,fp
   11d04:	df000017 	ldw	fp,0(sp)
   11d08:	dec00104 	addi	sp,sp,4
   11d0c:	f800283a 	ret

00011d10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11d10:	defffc04 	addi	sp,sp,-16
   11d14:	df000315 	stw	fp,12(sp)
   11d18:	df000304 	addi	fp,sp,12
   11d1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11d20:	e0bfff17 	ldw	r2,-4(fp)
   11d24:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11d28:	e0bffe17 	ldw	r2,-8(fp)
   11d2c:	10800017 	ldw	r2,0(r2)
   11d30:	10800104 	addi	r2,r2,4
   11d34:	10800037 	ldwio	r2,0(r2)
   11d38:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11d3c:	e0bffd17 	ldw	r2,-12(fp)
   11d40:	1081000c 	andi	r2,r2,1024
   11d44:	1005003a 	cmpeq	r2,r2,zero
   11d48:	10000c1e 	bne	r2,zero,11d7c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11d4c:	e0bffe17 	ldw	r2,-8(fp)
   11d50:	10800017 	ldw	r2,0(r2)
   11d54:	11000104 	addi	r4,r2,4
   11d58:	e0bffe17 	ldw	r2,-8(fp)
   11d5c:	10800817 	ldw	r2,32(r2)
   11d60:	10810014 	ori	r2,r2,1024
   11d64:	1007883a 	mov	r3,r2
   11d68:	2005883a 	mov	r2,r4
   11d6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   11d70:	e0bffe17 	ldw	r2,-8(fp)
   11d74:	10000915 	stw	zero,36(r2)
   11d78:	00000a06 	br	11da4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11d7c:	e0bffe17 	ldw	r2,-8(fp)
   11d80:	10c00917 	ldw	r3,36(r2)
   11d84:	00a00034 	movhi	r2,32768
   11d88:	10bfff04 	addi	r2,r2,-4
   11d8c:	10c00536 	bltu	r2,r3,11da4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   11d90:	e0bffe17 	ldw	r2,-8(fp)
   11d94:	10800917 	ldw	r2,36(r2)
   11d98:	10c00044 	addi	r3,r2,1
   11d9c:	e0bffe17 	ldw	r2,-8(fp)
   11da0:	10c00915 	stw	r3,36(r2)
   11da4:	00800074 	movhi	r2,1
   11da8:	109df004 	addi	r2,r2,30656
   11dac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11db0:	e037883a 	mov	sp,fp
   11db4:	df000017 	ldw	fp,0(sp)
   11db8:	dec00104 	addi	sp,sp,4
   11dbc:	f800283a 	ret

00011dc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11dc0:	defffc04 	addi	sp,sp,-16
   11dc4:	df000315 	stw	fp,12(sp)
   11dc8:	df000304 	addi	fp,sp,12
   11dcc:	e13ffd15 	stw	r4,-12(fp)
   11dd0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11dd4:	00000706 	br	11df4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   11dd8:	e0bffe17 	ldw	r2,-8(fp)
   11ddc:	1090000c 	andi	r2,r2,16384
   11de0:	1005003a 	cmpeq	r2,r2,zero
   11de4:	1000031e 	bne	r2,zero,11df4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   11de8:	00bffd44 	movi	r2,-11
   11dec:	e0bfff15 	stw	r2,-4(fp)
   11df0:	00000b06 	br	11e20 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11df4:	e0bffd17 	ldw	r2,-12(fp)
   11df8:	10c00d17 	ldw	r3,52(r2)
   11dfc:	e0bffd17 	ldw	r2,-12(fp)
   11e00:	10800c17 	ldw	r2,48(r2)
   11e04:	18800526 	beq	r3,r2,11e1c <altera_avalon_jtag_uart_close+0x5c>
   11e08:	e0bffd17 	ldw	r2,-12(fp)
   11e0c:	10c00917 	ldw	r3,36(r2)
   11e10:	e0bffd17 	ldw	r2,-12(fp)
   11e14:	10800117 	ldw	r2,4(r2)
   11e18:	18bfef36 	bltu	r3,r2,11dd8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11e1c:	e03fff15 	stw	zero,-4(fp)
   11e20:	e0bfff17 	ldw	r2,-4(fp)
}
   11e24:	e037883a 	mov	sp,fp
   11e28:	df000017 	ldw	fp,0(sp)
   11e2c:	dec00104 	addi	sp,sp,4
   11e30:	f800283a 	ret

00011e34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11e34:	defff804 	addi	sp,sp,-32
   11e38:	df000715 	stw	fp,28(sp)
   11e3c:	df000704 	addi	fp,sp,28
   11e40:	e13ffb15 	stw	r4,-20(fp)
   11e44:	e17ffc15 	stw	r5,-16(fp)
   11e48:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   11e4c:	00bff9c4 	movi	r2,-25
   11e50:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   11e54:	e0bffc17 	ldw	r2,-16(fp)
   11e58:	e0bfff15 	stw	r2,-4(fp)
   11e5c:	e0ffff17 	ldw	r3,-4(fp)
   11e60:	189a8060 	cmpeqi	r2,r3,27137
   11e64:	1000041e 	bne	r2,zero,11e78 <altera_avalon_jtag_uart_ioctl+0x44>
   11e68:	e0ffff17 	ldw	r3,-4(fp)
   11e6c:	189a80a0 	cmpeqi	r2,r3,27138
   11e70:	10001b1e 	bne	r2,zero,11ee0 <altera_avalon_jtag_uart_ioctl+0xac>
   11e74:	00002706 	br	11f14 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11e78:	e0bffb17 	ldw	r2,-20(fp)
   11e7c:	10c00117 	ldw	r3,4(r2)
   11e80:	00a00034 	movhi	r2,32768
   11e84:	10bfffc4 	addi	r2,r2,-1
   11e88:	18802226 	beq	r3,r2,11f14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   11e8c:	e0bffd17 	ldw	r2,-12(fp)
   11e90:	10800017 	ldw	r2,0(r2)
   11e94:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11e98:	e0bff917 	ldw	r2,-28(fp)
   11e9c:	10800090 	cmplti	r2,r2,2
   11ea0:	1000071e 	bne	r2,zero,11ec0 <altera_avalon_jtag_uart_ioctl+0x8c>
   11ea4:	e0fff917 	ldw	r3,-28(fp)
   11ea8:	00a00034 	movhi	r2,32768
   11eac:	10bfffc4 	addi	r2,r2,-1
   11eb0:	18800326 	beq	r3,r2,11ec0 <altera_avalon_jtag_uart_ioctl+0x8c>
   11eb4:	e0bff917 	ldw	r2,-28(fp)
   11eb8:	e0bffe15 	stw	r2,-8(fp)
   11ebc:	00000306 	br	11ecc <altera_avalon_jtag_uart_ioctl+0x98>
   11ec0:	00e00034 	movhi	r3,32768
   11ec4:	18ffff84 	addi	r3,r3,-2
   11ec8:	e0fffe15 	stw	r3,-8(fp)
   11ecc:	e0bffb17 	ldw	r2,-20(fp)
   11ed0:	e0fffe17 	ldw	r3,-8(fp)
   11ed4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   11ed8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   11edc:	00000d06 	br	11f14 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11ee0:	e0bffb17 	ldw	r2,-20(fp)
   11ee4:	10c00117 	ldw	r3,4(r2)
   11ee8:	00a00034 	movhi	r2,32768
   11eec:	10bfffc4 	addi	r2,r2,-1
   11ef0:	18800826 	beq	r3,r2,11f14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11ef4:	e13ffd17 	ldw	r4,-12(fp)
   11ef8:	e0bffb17 	ldw	r2,-20(fp)
   11efc:	10c00917 	ldw	r3,36(r2)
   11f00:	e0bffb17 	ldw	r2,-20(fp)
   11f04:	10800117 	ldw	r2,4(r2)
   11f08:	1885803a 	cmpltu	r2,r3,r2
   11f0c:	20800015 	stw	r2,0(r4)
      rc = 0;
   11f10:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   11f14:	e0bffa17 	ldw	r2,-24(fp)
}
   11f18:	e037883a 	mov	sp,fp
   11f1c:	df000017 	ldw	fp,0(sp)
   11f20:	dec00104 	addi	sp,sp,4
   11f24:	f800283a 	ret

00011f28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11f28:	defff204 	addi	sp,sp,-56
   11f2c:	dfc00d15 	stw	ra,52(sp)
   11f30:	df000c15 	stw	fp,48(sp)
   11f34:	df000c04 	addi	fp,sp,48
   11f38:	e13ffb15 	stw	r4,-20(fp)
   11f3c:	e17ffc15 	stw	r5,-16(fp)
   11f40:	e1bffd15 	stw	r6,-12(fp)
   11f44:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   11f48:	e0bffc17 	ldw	r2,-16(fp)
   11f4c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11f50:	00004806 	br	12074 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11f54:	e0bffb17 	ldw	r2,-20(fp)
   11f58:	10800a17 	ldw	r2,40(r2)
   11f5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11f60:	e0bffb17 	ldw	r2,-20(fp)
   11f64:	10800b17 	ldw	r2,44(r2)
   11f68:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   11f6c:	e0fff717 	ldw	r3,-36(fp)
   11f70:	e0bff617 	ldw	r2,-40(fp)
   11f74:	18800536 	bltu	r3,r2,11f8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   11f78:	e0bff717 	ldw	r2,-36(fp)
   11f7c:	e0fff617 	ldw	r3,-40(fp)
   11f80:	10c5c83a 	sub	r2,r2,r3
   11f84:	e0bff815 	stw	r2,-32(fp)
   11f88:	00000406 	br	11f9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11f8c:	00820004 	movi	r2,2048
   11f90:	e0fff617 	ldw	r3,-40(fp)
   11f94:	10c5c83a 	sub	r2,r2,r3
   11f98:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   11f9c:	e0bff817 	ldw	r2,-32(fp)
   11fa0:	1005003a 	cmpeq	r2,r2,zero
   11fa4:	10001f1e 	bne	r2,zero,12024 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   11fa8:	e0fffd17 	ldw	r3,-12(fp)
   11fac:	e0bff817 	ldw	r2,-32(fp)
   11fb0:	1880022e 	bgeu	r3,r2,11fbc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   11fb4:	e0bffd17 	ldw	r2,-12(fp)
   11fb8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11fbc:	e0bffb17 	ldw	r2,-20(fp)
   11fc0:	10c00e04 	addi	r3,r2,56
   11fc4:	e0bff617 	ldw	r2,-40(fp)
   11fc8:	1887883a 	add	r3,r3,r2
   11fcc:	e0bffa17 	ldw	r2,-24(fp)
   11fd0:	1009883a 	mov	r4,r2
   11fd4:	180b883a 	mov	r5,r3
   11fd8:	e1bff817 	ldw	r6,-32(fp)
   11fdc:	0002f540 	call	2f54 <memcpy>
      ptr   += n;
   11fe0:	e0fff817 	ldw	r3,-32(fp)
   11fe4:	e0bffa17 	ldw	r2,-24(fp)
   11fe8:	10c5883a 	add	r2,r2,r3
   11fec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   11ff0:	e0fffd17 	ldw	r3,-12(fp)
   11ff4:	e0bff817 	ldw	r2,-32(fp)
   11ff8:	1885c83a 	sub	r2,r3,r2
   11ffc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12000:	e0fff617 	ldw	r3,-40(fp)
   12004:	e0bff817 	ldw	r2,-32(fp)
   12008:	1885883a 	add	r2,r3,r2
   1200c:	10c1ffcc 	andi	r3,r2,2047
   12010:	e0bffb17 	ldw	r2,-20(fp)
   12014:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12018:	e0bffd17 	ldw	r2,-12(fp)
   1201c:	10800048 	cmpgei	r2,r2,1
   12020:	103fcc1e 	bne	r2,zero,11f54 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   12024:	e0fffa17 	ldw	r3,-24(fp)
   12028:	e0bffc17 	ldw	r2,-16(fp)
   1202c:	1880141e 	bne	r3,r2,12080 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12030:	e0bffe17 	ldw	r2,-8(fp)
   12034:	1090000c 	andi	r2,r2,16384
   12038:	1004c03a 	cmpne	r2,r2,zero
   1203c:	1000101e 	bne	r2,zero,12080 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12040:	e0bffb17 	ldw	r2,-20(fp)
   12044:	10c00a17 	ldw	r3,40(r2)
   12048:	e0bff717 	ldw	r2,-36(fp)
   1204c:	1880051e 	bne	r3,r2,12064 <altera_avalon_jtag_uart_read+0x13c>
   12050:	e0bffb17 	ldw	r2,-20(fp)
   12054:	10c00917 	ldw	r3,36(r2)
   12058:	e0bffb17 	ldw	r2,-20(fp)
   1205c:	10800117 	ldw	r2,4(r2)
   12060:	18bff736 	bltu	r3,r2,12040 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12064:	e0bffb17 	ldw	r2,-20(fp)
   12068:	10c00a17 	ldw	r3,40(r2)
   1206c:	e0bff717 	ldw	r2,-36(fp)
   12070:	18800326 	beq	r3,r2,12080 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12074:	e0bffd17 	ldw	r2,-12(fp)
   12078:	10800048 	cmpgei	r2,r2,1
   1207c:	103fb51e 	bne	r2,zero,11f54 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12080:	e0fffa17 	ldw	r3,-24(fp)
   12084:	e0bffc17 	ldw	r2,-16(fp)
   12088:	18801926 	beq	r3,r2,120f0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1208c:	0005303a 	rdctl	r2,status
   12090:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12094:	e0fff517 	ldw	r3,-44(fp)
   12098:	00bfff84 	movi	r2,-2
   1209c:	1884703a 	and	r2,r3,r2
   120a0:	1001703a 	wrctl	status,r2
  
  return context;
   120a4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   120a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   120ac:	e0bffb17 	ldw	r2,-20(fp)
   120b0:	10800817 	ldw	r2,32(r2)
   120b4:	10c00054 	ori	r3,r2,1
   120b8:	e0bffb17 	ldw	r2,-20(fp)
   120bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   120c0:	e0bffb17 	ldw	r2,-20(fp)
   120c4:	10800017 	ldw	r2,0(r2)
   120c8:	11000104 	addi	r4,r2,4
   120cc:	e0bffb17 	ldw	r2,-20(fp)
   120d0:	10800817 	ldw	r2,32(r2)
   120d4:	1007883a 	mov	r3,r2
   120d8:	2005883a 	mov	r2,r4
   120dc:	10c00035 	stwio	r3,0(r2)
   120e0:	e0bff917 	ldw	r2,-28(fp)
   120e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120e8:	e0bff417 	ldw	r2,-48(fp)
   120ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   120f0:	e0fffa17 	ldw	r3,-24(fp)
   120f4:	e0bffc17 	ldw	r2,-16(fp)
   120f8:	18800526 	beq	r3,r2,12110 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   120fc:	e0fffa17 	ldw	r3,-24(fp)
   12100:	e0bffc17 	ldw	r2,-16(fp)
   12104:	1887c83a 	sub	r3,r3,r2
   12108:	e0ffff15 	stw	r3,-4(fp)
   1210c:	00000906 	br	12134 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   12110:	e0bffe17 	ldw	r2,-8(fp)
   12114:	1090000c 	andi	r2,r2,16384
   12118:	1005003a 	cmpeq	r2,r2,zero
   1211c:	1000031e 	bne	r2,zero,1212c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   12120:	00bffd44 	movi	r2,-11
   12124:	e0bfff15 	stw	r2,-4(fp)
   12128:	00000206 	br	12134 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1212c:	00bffec4 	movi	r2,-5
   12130:	e0bfff15 	stw	r2,-4(fp)
   12134:	e0bfff17 	ldw	r2,-4(fp)
}
   12138:	e037883a 	mov	sp,fp
   1213c:	dfc00117 	ldw	ra,4(sp)
   12140:	df000017 	ldw	fp,0(sp)
   12144:	dec00204 	addi	sp,sp,8
   12148:	f800283a 	ret

0001214c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1214c:	defff204 	addi	sp,sp,-56
   12150:	dfc00d15 	stw	ra,52(sp)
   12154:	df000c15 	stw	fp,48(sp)
   12158:	df000c04 	addi	fp,sp,48
   1215c:	e13ffb15 	stw	r4,-20(fp)
   12160:	e17ffc15 	stw	r5,-16(fp)
   12164:	e1bffd15 	stw	r6,-12(fp)
   12168:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1216c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12170:	e0bffc17 	ldw	r2,-16(fp)
   12174:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12178:	00003a06 	br	12264 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1217c:	e0bffb17 	ldw	r2,-20(fp)
   12180:	10800c17 	ldw	r2,48(r2)
   12184:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   12188:	e0bffb17 	ldw	r2,-20(fp)
   1218c:	10800d17 	ldw	r2,52(r2)
   12190:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   12194:	e0fffa17 	ldw	r3,-24(fp)
   12198:	e0bff917 	ldw	r2,-28(fp)
   1219c:	1880062e 	bgeu	r3,r2,121b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   121a0:	e0fff917 	ldw	r3,-28(fp)
   121a4:	e0bffa17 	ldw	r2,-24(fp)
   121a8:	1885c83a 	sub	r2,r3,r2
   121ac:	10bfffc4 	addi	r2,r2,-1
   121b0:	e0bff815 	stw	r2,-32(fp)
   121b4:	00000c06 	br	121e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   121b8:	e0bff917 	ldw	r2,-28(fp)
   121bc:	1005003a 	cmpeq	r2,r2,zero
   121c0:	1000051e 	bne	r2,zero,121d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   121c4:	00820004 	movi	r2,2048
   121c8:	e0fffa17 	ldw	r3,-24(fp)
   121cc:	10c5c83a 	sub	r2,r2,r3
   121d0:	e0bff815 	stw	r2,-32(fp)
   121d4:	00000406 	br	121e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   121d8:	0081ffc4 	movi	r2,2047
   121dc:	e0fffa17 	ldw	r3,-24(fp)
   121e0:	10c5c83a 	sub	r2,r2,r3
   121e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   121e8:	e0bff817 	ldw	r2,-32(fp)
   121ec:	1005003a 	cmpeq	r2,r2,zero
   121f0:	10001f1e 	bne	r2,zero,12270 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   121f4:	e0fffd17 	ldw	r3,-12(fp)
   121f8:	e0bff817 	ldw	r2,-32(fp)
   121fc:	1880022e 	bgeu	r3,r2,12208 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   12200:	e0bffd17 	ldw	r2,-12(fp)
   12204:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12208:	e0bffb17 	ldw	r2,-20(fp)
   1220c:	10c20e04 	addi	r3,r2,2104
   12210:	e0bffa17 	ldw	r2,-24(fp)
   12214:	1885883a 	add	r2,r3,r2
   12218:	e0fffc17 	ldw	r3,-16(fp)
   1221c:	1009883a 	mov	r4,r2
   12220:	180b883a 	mov	r5,r3
   12224:	e1bff817 	ldw	r6,-32(fp)
   12228:	0002f540 	call	2f54 <memcpy>
      ptr   += n;
   1222c:	e0fff817 	ldw	r3,-32(fp)
   12230:	e0bffc17 	ldw	r2,-16(fp)
   12234:	10c5883a 	add	r2,r2,r3
   12238:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1223c:	e0fffd17 	ldw	r3,-12(fp)
   12240:	e0bff817 	ldw	r2,-32(fp)
   12244:	1885c83a 	sub	r2,r3,r2
   12248:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1224c:	e0fffa17 	ldw	r3,-24(fp)
   12250:	e0bff817 	ldw	r2,-32(fp)
   12254:	1885883a 	add	r2,r3,r2
   12258:	10c1ffcc 	andi	r3,r2,2047
   1225c:	e0bffb17 	ldw	r2,-20(fp)
   12260:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12264:	e0bffd17 	ldw	r2,-12(fp)
   12268:	10800048 	cmpgei	r2,r2,1
   1226c:	103fc31e 	bne	r2,zero,1217c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12270:	0005303a 	rdctl	r2,status
   12274:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12278:	e0fff517 	ldw	r3,-44(fp)
   1227c:	00bfff84 	movi	r2,-2
   12280:	1884703a 	and	r2,r3,r2
   12284:	1001703a 	wrctl	status,r2
  
  return context;
   12288:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1228c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12290:	e0bffb17 	ldw	r2,-20(fp)
   12294:	10800817 	ldw	r2,32(r2)
   12298:	10c00094 	ori	r3,r2,2
   1229c:	e0bffb17 	ldw	r2,-20(fp)
   122a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   122a4:	e0bffb17 	ldw	r2,-20(fp)
   122a8:	10800017 	ldw	r2,0(r2)
   122ac:	11000104 	addi	r4,r2,4
   122b0:	e0bffb17 	ldw	r2,-20(fp)
   122b4:	10800817 	ldw	r2,32(r2)
   122b8:	1007883a 	mov	r3,r2
   122bc:	2005883a 	mov	r2,r4
   122c0:	10c00035 	stwio	r3,0(r2)
   122c4:	e0bff717 	ldw	r2,-36(fp)
   122c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122cc:	e0bff417 	ldw	r2,-48(fp)
   122d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   122d4:	e0bffd17 	ldw	r2,-12(fp)
   122d8:	10800050 	cmplti	r2,r2,1
   122dc:	1000111e 	bne	r2,zero,12324 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   122e0:	e0bffe17 	ldw	r2,-8(fp)
   122e4:	1090000c 	andi	r2,r2,16384
   122e8:	1004c03a 	cmpne	r2,r2,zero
   122ec:	1000101e 	bne	r2,zero,12330 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   122f0:	e0bffb17 	ldw	r2,-20(fp)
   122f4:	10c00d17 	ldw	r3,52(r2)
   122f8:	e0bff917 	ldw	r2,-28(fp)
   122fc:	1880051e 	bne	r3,r2,12314 <altera_avalon_jtag_uart_write+0x1c8>
   12300:	e0bffb17 	ldw	r2,-20(fp)
   12304:	10c00917 	ldw	r3,36(r2)
   12308:	e0bffb17 	ldw	r2,-20(fp)
   1230c:	10800117 	ldw	r2,4(r2)
   12310:	18bff736 	bltu	r3,r2,122f0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   12314:	e0bffb17 	ldw	r2,-20(fp)
   12318:	10c00d17 	ldw	r3,52(r2)
   1231c:	e0bff917 	ldw	r2,-28(fp)
   12320:	18800326 	beq	r3,r2,12330 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   12324:	e0bffd17 	ldw	r2,-12(fp)
   12328:	10800048 	cmpgei	r2,r2,1
   1232c:	103fcd1e 	bne	r2,zero,12264 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12330:	e0fffc17 	ldw	r3,-16(fp)
   12334:	e0bff617 	ldw	r2,-40(fp)
   12338:	18800526 	beq	r3,r2,12350 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1233c:	e0fffc17 	ldw	r3,-16(fp)
   12340:	e0bff617 	ldw	r2,-40(fp)
   12344:	1887c83a 	sub	r3,r3,r2
   12348:	e0ffff15 	stw	r3,-4(fp)
   1234c:	00000906 	br	12374 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   12350:	e0bffe17 	ldw	r2,-8(fp)
   12354:	1090000c 	andi	r2,r2,16384
   12358:	1005003a 	cmpeq	r2,r2,zero
   1235c:	1000031e 	bne	r2,zero,1236c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   12360:	00bffd44 	movi	r2,-11
   12364:	e0bfff15 	stw	r2,-4(fp)
   12368:	00000206 	br	12374 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   1236c:	00bffec4 	movi	r2,-5
   12370:	e0bfff15 	stw	r2,-4(fp)
   12374:	e0bfff17 	ldw	r2,-4(fp)
}
   12378:	e037883a 	mov	sp,fp
   1237c:	dfc00117 	ldw	ra,4(sp)
   12380:	df000017 	ldw	fp,0(sp)
   12384:	dec00204 	addi	sp,sp,8
   12388:	f800283a 	ret

0001238c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1238c:	defffa04 	addi	sp,sp,-24
   12390:	dfc00515 	stw	ra,20(sp)
   12394:	df000415 	stw	fp,16(sp)
   12398:	df000404 	addi	fp,sp,16
   1239c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   123a0:	e0bfff17 	ldw	r2,-4(fp)
   123a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   123a8:	e0bfff17 	ldw	r2,-4(fp)
   123ac:	10800104 	addi	r2,r2,4
   123b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123b4:	0005303a 	rdctl	r2,status
   123b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123bc:	e0fffd17 	ldw	r3,-12(fp)
   123c0:	00bfff84 	movi	r2,-2
   123c4:	1884703a 	and	r2,r3,r2
   123c8:	1001703a 	wrctl	status,r2
  
  return context;
   123cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   123d0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   123d4:	00135440 	call	13544 <alt_tick>
   123d8:	e0bffe17 	ldw	r2,-8(fp)
   123dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123e0:	e0bffc17 	ldw	r2,-16(fp)
   123e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   123e8:	e037883a 	mov	sp,fp
   123ec:	dfc00117 	ldw	ra,4(sp)
   123f0:	df000017 	ldw	fp,0(sp)
   123f4:	dec00204 	addi	sp,sp,8
   123f8:	f800283a 	ret

000123fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   123fc:	defff804 	addi	sp,sp,-32
   12400:	dfc00715 	stw	ra,28(sp)
   12404:	df000615 	stw	fp,24(sp)
   12408:	df000604 	addi	fp,sp,24
   1240c:	e13ffc15 	stw	r4,-16(fp)
   12410:	e17ffd15 	stw	r5,-12(fp)
   12414:	e1bffe15 	stw	r6,-8(fp)
   12418:	e1ffff15 	stw	r7,-4(fp)
   1241c:	e0bfff17 	ldw	r2,-4(fp)
   12420:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   12424:	00800074 	movhi	r2,1
   12428:	109df004 	addi	r2,r2,30656
   1242c:	10800017 	ldw	r2,0(r2)
   12430:	1004c03a 	cmpne	r2,r2,zero
   12434:	1000041e 	bne	r2,zero,12448 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   12438:	00c00074 	movhi	r3,1
   1243c:	18ddf004 	addi	r3,r3,30656
   12440:	e0bffb17 	ldw	r2,-20(fp)
   12444:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12448:	e0bffc17 	ldw	r2,-16(fp)
   1244c:	10800104 	addi	r2,r2,4
   12450:	1007883a 	mov	r3,r2
   12454:	008001c4 	movi	r2,7
   12458:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1245c:	d8000015 	stw	zero,0(sp)
   12460:	e13ffd17 	ldw	r4,-12(fp)
   12464:	e17ffe17 	ldw	r5,-8(fp)
   12468:	01800074 	movhi	r6,1
   1246c:	3188e304 	addi	r6,r6,9100
   12470:	e1fffc17 	ldw	r7,-16(fp)
   12474:	00130a40 	call	130a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   12478:	e037883a 	mov	sp,fp
   1247c:	dfc00117 	ldw	ra,4(sp)
   12480:	df000017 	ldw	fp,0(sp)
   12484:	dec00204 	addi	sp,sp,8
   12488:	f800283a 	ret

0001248c <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   1248c:	deffee04 	addi	sp,sp,-72
   12490:	df001115 	stw	fp,68(sp)
   12494:	df001104 	addi	fp,sp,68
   12498:	e13ffc15 	stw	r4,-16(fp)
   1249c:	e17ffd15 	stw	r5,-12(fp)
   124a0:	e1bffe15 	stw	r6,-8(fp)
   124a4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   124a8:	e0bffc17 	ldw	r2,-16(fp)
   124ac:	10800017 	ldw	r2,0(r2)
   124b0:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   124b4:	e0bffb17 	ldw	r2,-20(fp)
   124b8:	10800217 	ldw	r2,8(r2)
   124bc:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   124c0:	e0bff117 	ldw	r2,-60(fp)
   124c4:	10bfffc4 	addi	r2,r2,-1
   124c8:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
   124cc:	e0bff217 	ldw	r2,-56(fp)
   124d0:	10800044 	addi	r2,r2,1
   124d4:	e0bff215 	stw	r2,-56(fp)
   124d8:	e0bff217 	ldw	r2,-56(fp)
   124dc:	10800003 	ldbu	r2,0(r2)
   124e0:	10803fcc 	andi	r2,r2,255
   124e4:	1080201c 	xori	r2,r2,128
   124e8:	10bfe004 	addi	r2,r2,-128
   124ec:	1004c03a 	cmpne	r2,r2,zero
   124f0:	103ff61e 	bne	r2,zero,124cc <alt_hostfs_open+0x40>
    ;

  return ptr - string;
   124f4:	e0fff217 	ldw	r3,-56(fp)
   124f8:	e0bff117 	ldw	r2,-60(fp)
   124fc:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   12500:	1007883a 	mov	r3,r2
   12504:	e0bffd17 	ldw	r2,-12(fp)
   12508:	1885883a 	add	r2,r3,r2
   1250c:	10800044 	addi	r2,r2,1
   12510:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   12514:	d0a00e04 	addi	r2,gp,-32712
   12518:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
   1251c:	e0bffd17 	ldw	r2,-12(fp)
   12520:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
   12524:	e0bffe17 	ldw	r2,-8(fp)
   12528:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
   1252c:	e0bfff17 	ldw	r2,-4(fp)
   12530:	e0bff415 	stw	r2,-48(fp)
   12534:	e0bffd17 	ldw	r2,-12(fp)
   12538:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   1253c:	e0bfef17 	ldw	r2,-68(fp)
   12540:	10bfffc4 	addi	r2,r2,-1
   12544:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
   12548:	e0bff017 	ldw	r2,-64(fp)
   1254c:	10800044 	addi	r2,r2,1
   12550:	e0bff015 	stw	r2,-64(fp)
   12554:	e0bff017 	ldw	r2,-64(fp)
   12558:	10800003 	ldbu	r2,0(r2)
   1255c:	10803fcc 	andi	r2,r2,255
   12560:	1080201c 	xori	r2,r2,128
   12564:	10bfe004 	addi	r2,r2,-128
   12568:	1004c03a 	cmpne	r2,r2,zero
   1256c:	103ff61e 	bne	r2,zero,12548 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   12570:	e0fff017 	ldw	r3,-64(fp)
   12574:	e0bfef17 	ldw	r2,-68(fp)
   12578:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   1257c:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   12580:	e13ff617 	ldw	r4,-40(fp)
   12584:	e17ff517 	ldw	r5,-44(fp)
   12588:	e1bff417 	ldw	r6,-48(fp)
   1258c:	e1fff317 	ldw	r7,-52(fp)
   12590:	e0fff717 	ldw	r3,-36(fp)
   12594:	003da07a 	break	1
   12598:	e0bff815 	stw	r2,-32(fp)
   1259c:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
   125a0:	e0bff817 	ldw	r2,-32(fp)
   125a4:	e0bff915 	stw	r2,-28(fp)
  error = r3;
   125a8:	e0bff717 	ldw	r2,-36(fp)
   125ac:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
   125b0:	e0bffa17 	ldw	r2,-24(fp)
   125b4:	1004c03a 	cmpne	r2,r2,zero
   125b8:	1000031e 	bne	r2,zero,125c8 <alt_hostfs_open+0x13c>
    fd->priv = handle;
   125bc:	e0fff917 	ldw	r3,-28(fp)
   125c0:	e0bffc17 	ldw	r2,-16(fp)
   125c4:	10c00115 	stw	r3,4(r2)

  return -error;
   125c8:	e0bffa17 	ldw	r2,-24(fp)
   125cc:	0085c83a 	sub	r2,zero,r2
}
   125d0:	e037883a 	mov	sp,fp
   125d4:	df000017 	ldw	fp,0(sp)
   125d8:	dec00104 	addi	sp,sp,4
   125dc:	f800283a 	ret

000125e0 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   125e0:	defffb04 	addi	sp,sp,-20
   125e4:	df000415 	stw	fp,16(sp)
   125e8:	df000404 	addi	fp,sp,16
   125ec:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   125f0:	d0a01104 	addi	r2,gp,-32700
   125f4:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
   125f8:	e0bfff17 	ldw	r2,-4(fp)
   125fc:	10800117 	ldw	r2,4(r2)
   12600:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   12604:	e13ffc17 	ldw	r4,-16(fp)
   12608:	e0fffd17 	ldw	r3,-12(fp)
   1260c:	003da07a 	break	1
   12610:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
   12614:	e0bffd17 	ldw	r2,-12(fp)
   12618:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   1261c:	e0bffe17 	ldw	r2,-8(fp)
   12620:	0085c83a 	sub	r2,zero,r2
}
   12624:	e037883a 	mov	sp,fp
   12628:	df000017 	ldw	fp,0(sp)
   1262c:	dec00104 	addi	sp,sp,4
   12630:	f800283a 	ret

00012634 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   12634:	defff404 	addi	sp,sp,-48
   12638:	df000b15 	stw	fp,44(sp)
   1263c:	df000b04 	addi	fp,sp,44
   12640:	e13ffc15 	stw	r4,-16(fp)
   12644:	e17ffd15 	stw	r5,-12(fp)
   12648:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1264c:	d0a01404 	addi	r2,gp,-32688
   12650:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   12654:	e0bffc17 	ldw	r2,-16(fp)
   12658:	10800117 	ldw	r2,4(r2)
   1265c:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
   12660:	e0bffd17 	ldw	r2,-12(fp)
   12664:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
   12668:	e0bffe17 	ldw	r2,-8(fp)
   1266c:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   12670:	e13ff717 	ldw	r4,-36(fp)
   12674:	e17ff617 	ldw	r5,-40(fp)
   12678:	e1bff517 	ldw	r6,-44(fp)
   1267c:	e0fff817 	ldw	r3,-32(fp)
   12680:	003da07a 	break	1
   12684:	e0bff915 	stw	r2,-28(fp)
   12688:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   1268c:	e0bff917 	ldw	r2,-28(fp)
   12690:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   12694:	e0bff817 	ldw	r2,-32(fp)
   12698:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1269c:	e0bffb17 	ldw	r2,-20(fp)
   126a0:	1005003a 	cmpeq	r2,r2,zero
   126a4:	1000041e 	bne	r2,zero,126b8 <alt_hostfs_read+0x84>
   126a8:	e0bffb17 	ldw	r2,-20(fp)
   126ac:	0085c83a 	sub	r2,zero,r2
   126b0:	e0bfff15 	stw	r2,-4(fp)
   126b4:	00000206 	br	126c0 <alt_hostfs_read+0x8c>
   126b8:	e0bffa17 	ldw	r2,-24(fp)
   126bc:	e0bfff15 	stw	r2,-4(fp)
   126c0:	e0bfff17 	ldw	r2,-4(fp)
}
   126c4:	e037883a 	mov	sp,fp
   126c8:	df000017 	ldw	fp,0(sp)
   126cc:	dec00104 	addi	sp,sp,4
   126d0:	f800283a 	ret

000126d4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   126d4:	defff404 	addi	sp,sp,-48
   126d8:	df000b15 	stw	fp,44(sp)
   126dc:	df000b04 	addi	fp,sp,44
   126e0:	e13ffc15 	stw	r4,-16(fp)
   126e4:	e17ffd15 	stw	r5,-12(fp)
   126e8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   126ec:	d0a01704 	addi	r2,gp,-32676
   126f0:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   126f4:	e0bffc17 	ldw	r2,-16(fp)
   126f8:	10800117 	ldw	r2,4(r2)
   126fc:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
   12700:	e0bffd17 	ldw	r2,-12(fp)
   12704:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
   12708:	e0bffe17 	ldw	r2,-8(fp)
   1270c:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   12710:	e13ff717 	ldw	r4,-36(fp)
   12714:	e17ff617 	ldw	r5,-40(fp)
   12718:	e1bff517 	ldw	r6,-44(fp)
   1271c:	e0fff817 	ldw	r3,-32(fp)
   12720:	003da07a 	break	1
   12724:	e0bff915 	stw	r2,-28(fp)
   12728:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   1272c:	e0bff917 	ldw	r2,-28(fp)
   12730:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   12734:	e0bff817 	ldw	r2,-32(fp)
   12738:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1273c:	e0bffb17 	ldw	r2,-20(fp)
   12740:	1005003a 	cmpeq	r2,r2,zero
   12744:	1000041e 	bne	r2,zero,12758 <alt_hostfs_write+0x84>
   12748:	e0bffb17 	ldw	r2,-20(fp)
   1274c:	0085c83a 	sub	r2,zero,r2
   12750:	e0bfff15 	stw	r2,-4(fp)
   12754:	00000206 	br	12760 <alt_hostfs_write+0x8c>
   12758:	e0bffa17 	ldw	r2,-24(fp)
   1275c:	e0bfff15 	stw	r2,-4(fp)
   12760:	e0bfff17 	ldw	r2,-4(fp)
}
   12764:	e037883a 	mov	sp,fp
   12768:	df000017 	ldw	fp,0(sp)
   1276c:	dec00104 	addi	sp,sp,4
   12770:	f800283a 	ret

00012774 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   12774:	defff404 	addi	sp,sp,-48
   12778:	df000b15 	stw	fp,44(sp)
   1277c:	df000b04 	addi	fp,sp,44
   12780:	e13ffc15 	stw	r4,-16(fp)
   12784:	e17ffd15 	stw	r5,-12(fp)
   12788:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1278c:	d0a01a04 	addi	r2,gp,-32664
   12790:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   12794:	e0bffc17 	ldw	r2,-16(fp)
   12798:	10800117 	ldw	r2,4(r2)
   1279c:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
   127a0:	e0bffd17 	ldw	r2,-12(fp)
   127a4:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
   127a8:	e0bffe17 	ldw	r2,-8(fp)
   127ac:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   127b0:	e13ff717 	ldw	r4,-36(fp)
   127b4:	e17ff617 	ldw	r5,-40(fp)
   127b8:	e1bff517 	ldw	r6,-44(fp)
   127bc:	e0fff817 	ldw	r3,-32(fp)
   127c0:	003da07a 	break	1
   127c4:	e0bff915 	stw	r2,-28(fp)
   127c8:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   127cc:	e0bff917 	ldw	r2,-28(fp)
   127d0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   127d4:	e0bff817 	ldw	r2,-32(fp)
   127d8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   127dc:	e0bffb17 	ldw	r2,-20(fp)
   127e0:	1005003a 	cmpeq	r2,r2,zero
   127e4:	1000041e 	bne	r2,zero,127f8 <alt_hostfs_seek+0x84>
   127e8:	e0bffb17 	ldw	r2,-20(fp)
   127ec:	0085c83a 	sub	r2,zero,r2
   127f0:	e0bfff15 	stw	r2,-4(fp)
   127f4:	00000206 	br	12800 <alt_hostfs_seek+0x8c>
   127f8:	e0bffa17 	ldw	r2,-24(fp)
   127fc:	e0bfff15 	stw	r2,-4(fp)
   12800:	e0bfff17 	ldw	r2,-4(fp)
}
   12804:	e037883a 	mov	sp,fp
   12808:	df000017 	ldw	fp,0(sp)
   1280c:	dec00104 	addi	sp,sp,4
   12810:	f800283a 	ret

00012814 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   12814:	deffe404 	addi	sp,sp,-112
   12818:	df001b15 	stw	fp,108(sp)
   1281c:	df001b04 	addi	fp,sp,108
   12820:	e13ffd15 	stw	r4,-12(fp)
   12824:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   12828:	d0a01d04 	addi	r2,gp,-32652
   1282c:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
   12830:	e0bffd17 	ldw	r2,-12(fp)
   12834:	10800117 	ldw	r2,4(r2)
   12838:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
   1283c:	e0bfed04 	addi	r2,fp,-76
   12840:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   12844:	e13fe817 	ldw	r4,-96(fp)
   12848:	e17fe717 	ldw	r5,-100(fp)
   1284c:	e0ffe917 	ldw	r3,-92(fp)
   12850:	003da07a 	break	1
   12854:	e0bfea15 	stw	r2,-88(fp)
   12858:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
   1285c:	e0bfea17 	ldw	r2,-88(fp)
   12860:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   12864:	e0bfe917 	ldw	r2,-92(fp)
   12868:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
   1286c:	e0bfec17 	ldw	r2,-80(fp)
   12870:	1004c03a 	cmpne	r2,r2,zero
   12874:	1000651e 	bne	r2,zero,12a0c <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   12878:	e0bfed04 	addi	r2,fp,-76
   1287c:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   12880:	e0bfe617 	ldw	r2,-104(fp)
   12884:	10801004 	addi	r2,r2,64
   12888:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
   1288c:	00001806 	br	128f0 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   12890:	e0bfe617 	ldw	r2,-104(fp)
   12894:	10800017 	ldw	r2,0(r2)
   12898:	10bfc02c 	andhi	r2,r2,65280
   1289c:	1006d63a 	srli	r3,r2,24
   128a0:	e0bfe617 	ldw	r2,-104(fp)
   128a4:	10800017 	ldw	r2,0(r2)
   128a8:	10803fec 	andhi	r2,r2,255
   128ac:	1004d23a 	srli	r2,r2,8
   128b0:	1886b03a 	or	r3,r3,r2
   128b4:	e0bfe617 	ldw	r2,-104(fp)
   128b8:	10800017 	ldw	r2,0(r2)
   128bc:	10bfc00c 	andi	r2,r2,65280
   128c0:	1004923a 	slli	r2,r2,8
   128c4:	1886b03a 	or	r3,r3,r2
   128c8:	e0bfe617 	ldw	r2,-104(fp)
   128cc:	10800017 	ldw	r2,0(r2)
   128d0:	10803fcc 	andi	r2,r2,255
   128d4:	1004963a 	slli	r2,r2,24
   128d8:	1886b03a 	or	r3,r3,r2
   128dc:	e0bfe617 	ldw	r2,-104(fp)
   128e0:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   128e4:	e0bfe617 	ldw	r2,-104(fp)
   128e8:	10800104 	addi	r2,r2,4
   128ec:	e0bfe615 	stw	r2,-104(fp)
   128f0:	e0ffe617 	ldw	r3,-104(fp)
   128f4:	e0bfe517 	ldw	r2,-108(fp)
   128f8:	18bfe536 	bltu	r3,r2,12890 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   128fc:	e0bffe17 	ldw	r2,-8(fp)
   12900:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   12904:	e0bfe617 	ldw	r2,-104(fp)
   12908:	10800f04 	addi	r2,r2,60
   1290c:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
   12910:	00000506 	br	12928 <alt_hostfs_fstat+0x114>
      *ptr = 0;
   12914:	e0bfe617 	ldw	r2,-104(fp)
   12918:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   1291c:	e0bfe617 	ldw	r2,-104(fp)
   12920:	10800104 	addi	r2,r2,4
   12924:	e0bfe615 	stw	r2,-104(fp)
   12928:	e0ffe617 	ldw	r3,-104(fp)
   1292c:	e0bfe517 	ldw	r2,-108(fp)
   12930:	18bff836 	bltu	r3,r2,12914 <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   12934:	e0bfed17 	ldw	r2,-76(fp)
   12938:	1007883a 	mov	r3,r2
   1293c:	e0bffe17 	ldw	r2,-8(fp)
   12940:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   12944:	e0bfee17 	ldw	r2,-72(fp)
   12948:	1007883a 	mov	r3,r2
   1294c:	e0bffe17 	ldw	r2,-8(fp)
   12950:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   12954:	e0ffef17 	ldw	r3,-68(fp)
   12958:	e0bffe17 	ldw	r2,-8(fp)
   1295c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   12960:	e0bff017 	ldw	r2,-64(fp)
   12964:	1007883a 	mov	r3,r2
   12968:	e0bffe17 	ldw	r2,-8(fp)
   1296c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   12970:	e0bff117 	ldw	r2,-60(fp)
   12974:	1007883a 	mov	r3,r2
   12978:	e0bffe17 	ldw	r2,-8(fp)
   1297c:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   12980:	e0bff217 	ldw	r2,-56(fp)
   12984:	1007883a 	mov	r3,r2
   12988:	e0bffe17 	ldw	r2,-8(fp)
   1298c:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   12990:	e0bff317 	ldw	r2,-52(fp)
   12994:	1007883a 	mov	r3,r2
   12998:	e0bffe17 	ldw	r2,-8(fp)
   1299c:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   129a0:	e0bff517 	ldw	r2,-44(fp)
   129a4:	1007883a 	mov	r3,r2
   129a8:	e0bffe17 	ldw	r2,-8(fp)
   129ac:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   129b0:	e0bffa17 	ldw	r2,-24(fp)
   129b4:	1007883a 	mov	r3,r2
   129b8:	e0bffe17 	ldw	r2,-8(fp)
   129bc:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   129c0:	e0bffb17 	ldw	r2,-20(fp)
   129c4:	1007883a 	mov	r3,r2
   129c8:	e0bffe17 	ldw	r2,-8(fp)
   129cc:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   129d0:	e0bffc17 	ldw	r2,-16(fp)
   129d4:	1007883a 	mov	r3,r2
   129d8:	e0bffe17 	ldw	r2,-8(fp)
   129dc:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   129e0:	e0bff717 	ldw	r2,-36(fp)
   129e4:	1007883a 	mov	r3,r2
   129e8:	e0bffe17 	ldw	r2,-8(fp)
   129ec:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   129f0:	e0bff917 	ldw	r2,-28(fp)
   129f4:	1007883a 	mov	r3,r2
   129f8:	e0bffe17 	ldw	r2,-8(fp)
   129fc:	10c00c15 	stw	r3,48(r2)

    return rc;
   12a00:	e0bfeb17 	ldw	r2,-84(fp)
   12a04:	e0bfff15 	stw	r2,-4(fp)
   12a08:	00000306 	br	12a18 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
   12a0c:	e0bfec17 	ldw	r2,-80(fp)
   12a10:	0085c83a 	sub	r2,zero,r2
   12a14:	e0bfff15 	stw	r2,-4(fp)
   12a18:	e0bfff17 	ldw	r2,-4(fp)
}
   12a1c:	e037883a 	mov	sp,fp
   12a20:	df000017 	ldw	fp,0(sp)
   12a24:	dec00104 	addi	sp,sp,4
   12a28:	f800283a 	ret

00012a2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12a2c:	defff404 	addi	sp,sp,-48
   12a30:	df000b15 	stw	fp,44(sp)
   12a34:	df000b04 	addi	fp,sp,44
   12a38:	e13ffb15 	stw	r4,-20(fp)
   12a3c:	e17ffc15 	stw	r5,-16(fp)
   12a40:	e1bffd15 	stw	r6,-12(fp)
   12a44:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   12a48:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12a4c:	00800074 	movhi	r2,1
   12a50:	109df004 	addi	r2,r2,30656
   12a54:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   12a58:	1005003a 	cmpeq	r2,r2,zero
   12a5c:	1000411e 	bne	r2,zero,12b64 <alt_alarm_start+0x138>
  {
    if (alarm)
   12a60:	e0bffb17 	ldw	r2,-20(fp)
   12a64:	1005003a 	cmpeq	r2,r2,zero
   12a68:	10003b1e 	bne	r2,zero,12b58 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   12a6c:	e0fffb17 	ldw	r3,-20(fp)
   12a70:	e0bffd17 	ldw	r2,-12(fp)
   12a74:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   12a78:	e0fffb17 	ldw	r3,-20(fp)
   12a7c:	e0bffe17 	ldw	r2,-8(fp)
   12a80:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a84:	0005303a 	rdctl	r2,status
   12a88:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a8c:	e0fff817 	ldw	r3,-32(fp)
   12a90:	00bfff84 	movi	r2,-2
   12a94:	1884703a 	and	r2,r3,r2
   12a98:	1001703a 	wrctl	status,r2
  
  return context;
   12a9c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   12aa0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12aa4:	00800074 	movhi	r2,1
   12aa8:	109df104 	addi	r2,r2,30660
   12aac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   12ab0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12ab4:	e0fffc17 	ldw	r3,-16(fp)
   12ab8:	e0bff917 	ldw	r2,-28(fp)
   12abc:	1885883a 	add	r2,r3,r2
   12ac0:	10c00044 	addi	r3,r2,1
   12ac4:	e0bffb17 	ldw	r2,-20(fp)
   12ac8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12acc:	e0bffb17 	ldw	r2,-20(fp)
   12ad0:	10c00217 	ldw	r3,8(r2)
   12ad4:	e0bff917 	ldw	r2,-28(fp)
   12ad8:	1880042e 	bgeu	r3,r2,12aec <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   12adc:	e0fffb17 	ldw	r3,-20(fp)
   12ae0:	00800044 	movi	r2,1
   12ae4:	18800405 	stb	r2,16(r3)
   12ae8:	00000206 	br	12af4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   12aec:	e0bffb17 	ldw	r2,-20(fp)
   12af0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   12af4:	e0fffb17 	ldw	r3,-20(fp)
   12af8:	00800074 	movhi	r2,1
   12afc:	10972204 	addi	r2,r2,23688
   12b00:	e0bff615 	stw	r2,-40(fp)
   12b04:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12b08:	e0fff717 	ldw	r3,-36(fp)
   12b0c:	e0bff617 	ldw	r2,-40(fp)
   12b10:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   12b14:	e0bff617 	ldw	r2,-40(fp)
   12b18:	10c00017 	ldw	r3,0(r2)
   12b1c:	e0bff717 	ldw	r2,-36(fp)
   12b20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12b24:	e0bff617 	ldw	r2,-40(fp)
   12b28:	10c00017 	ldw	r3,0(r2)
   12b2c:	e0bff717 	ldw	r2,-36(fp)
   12b30:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   12b34:	e0fff617 	ldw	r3,-40(fp)
   12b38:	e0bff717 	ldw	r2,-36(fp)
   12b3c:	18800015 	stw	r2,0(r3)
   12b40:	e0bffa17 	ldw	r2,-24(fp)
   12b44:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b48:	e0bff517 	ldw	r2,-44(fp)
   12b4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12b50:	e03fff15 	stw	zero,-4(fp)
   12b54:	00000506 	br	12b6c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   12b58:	00bffa84 	movi	r2,-22
   12b5c:	e0bfff15 	stw	r2,-4(fp)
   12b60:	00000206 	br	12b6c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   12b64:	00bfde84 	movi	r2,-134
   12b68:	e0bfff15 	stw	r2,-4(fp)
   12b6c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   12b70:	e037883a 	mov	sp,fp
   12b74:	df000017 	ldw	fp,0(sp)
   12b78:	dec00104 	addi	sp,sp,4
   12b7c:	f800283a 	ret

00012b80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12b80:	deffff04 	addi	sp,sp,-4
   12b84:	df000015 	stw	fp,0(sp)
   12b88:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12b8c:	e037883a 	mov	sp,fp
   12b90:	df000017 	ldw	fp,0(sp)
   12b94:	dec00104 	addi	sp,sp,4
   12b98:	f800283a 	ret

00012b9c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12b9c:	defff904 	addi	sp,sp,-28
   12ba0:	dfc00615 	stw	ra,24(sp)
   12ba4:	df000515 	stw	fp,20(sp)
   12ba8:	df000504 	addi	fp,sp,20
   12bac:	e13ffd15 	stw	r4,-12(fp)
   12bb0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12bb4:	e0bffd17 	ldw	r2,-12(fp)
   12bb8:	1005003a 	cmpeq	r2,r2,zero
   12bbc:	1000041e 	bne	r2,zero,12bd0 <alt_dev_llist_insert+0x34>
   12bc0:	e0bffd17 	ldw	r2,-12(fp)
   12bc4:	10800217 	ldw	r2,8(r2)
   12bc8:	1004c03a 	cmpne	r2,r2,zero
   12bcc:	1000071e 	bne	r2,zero,12bec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   12bd0:	0012c500 	call	12c50 <alt_get_errno>
   12bd4:	1007883a 	mov	r3,r2
   12bd8:	00800584 	movi	r2,22
   12bdc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12be0:	00bffa84 	movi	r2,-22
   12be4:	e0bfff15 	stw	r2,-4(fp)
   12be8:	00001306 	br	12c38 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12bec:	e0fffd17 	ldw	r3,-12(fp)
   12bf0:	e0bffe17 	ldw	r2,-8(fp)
   12bf4:	e0bffb15 	stw	r2,-20(fp)
   12bf8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12bfc:	e0fffc17 	ldw	r3,-16(fp)
   12c00:	e0bffb17 	ldw	r2,-20(fp)
   12c04:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   12c08:	e0bffb17 	ldw	r2,-20(fp)
   12c0c:	10c00017 	ldw	r3,0(r2)
   12c10:	e0bffc17 	ldw	r2,-16(fp)
   12c14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12c18:	e0bffb17 	ldw	r2,-20(fp)
   12c1c:	10c00017 	ldw	r3,0(r2)
   12c20:	e0bffc17 	ldw	r2,-16(fp)
   12c24:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   12c28:	e0fffb17 	ldw	r3,-20(fp)
   12c2c:	e0bffc17 	ldw	r2,-16(fp)
   12c30:	18800015 	stw	r2,0(r3)

  return 0;  
   12c34:	e03fff15 	stw	zero,-4(fp)
   12c38:	e0bfff17 	ldw	r2,-4(fp)
}
   12c3c:	e037883a 	mov	sp,fp
   12c40:	dfc00117 	ldw	ra,4(sp)
   12c44:	df000017 	ldw	fp,0(sp)
   12c48:	dec00204 	addi	sp,sp,8
   12c4c:	f800283a 	ret

00012c50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c50:	defffd04 	addi	sp,sp,-12
   12c54:	dfc00215 	stw	ra,8(sp)
   12c58:	df000115 	stw	fp,4(sp)
   12c5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12c60:	00800074 	movhi	r2,1
   12c64:	10970d04 	addi	r2,r2,23604
   12c68:	10800017 	ldw	r2,0(r2)
   12c6c:	1005003a 	cmpeq	r2,r2,zero
   12c70:	1000061e 	bne	r2,zero,12c8c <alt_get_errno+0x3c>
   12c74:	00800074 	movhi	r2,1
   12c78:	10970d04 	addi	r2,r2,23604
   12c7c:	10800017 	ldw	r2,0(r2)
   12c80:	103ee83a 	callr	r2
   12c84:	e0bfff15 	stw	r2,-4(fp)
   12c88:	00000306 	br	12c98 <alt_get_errno+0x48>
   12c8c:	00800074 	movhi	r2,1
   12c90:	109de504 	addi	r2,r2,30612
   12c94:	e0bfff15 	stw	r2,-4(fp)
   12c98:	e0bfff17 	ldw	r2,-4(fp)
}
   12c9c:	e037883a 	mov	sp,fp
   12ca0:	dfc00117 	ldw	ra,4(sp)
   12ca4:	df000017 	ldw	fp,0(sp)
   12ca8:	dec00204 	addi	sp,sp,8
   12cac:	f800283a 	ret

00012cb0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12cb0:	defffd04 	addi	sp,sp,-12
   12cb4:	dfc00215 	stw	ra,8(sp)
   12cb8:	df000115 	stw	fp,4(sp)
   12cbc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12cc0:	00bfff04 	movi	r2,-4
   12cc4:	00c00074 	movhi	r3,1
   12cc8:	18cec304 	addi	r3,r3,15116
   12ccc:	1885883a 	add	r2,r3,r2
   12cd0:	e0bfff15 	stw	r2,-4(fp)
   12cd4:	00000606 	br	12cf0 <_do_ctors+0x40>
        (*ctor) (); 
   12cd8:	e0bfff17 	ldw	r2,-4(fp)
   12cdc:	10800017 	ldw	r2,0(r2)
   12ce0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12ce4:	e0bfff17 	ldw	r2,-4(fp)
   12ce8:	10bfff04 	addi	r2,r2,-4
   12cec:	e0bfff15 	stw	r2,-4(fp)
   12cf0:	e0ffff17 	ldw	r3,-4(fp)
   12cf4:	00800074 	movhi	r2,1
   12cf8:	108ec204 	addi	r2,r2,15112
   12cfc:	18bff62e 	bgeu	r3,r2,12cd8 <_do_ctors+0x28>
        (*ctor) (); 
}
   12d00:	e037883a 	mov	sp,fp
   12d04:	dfc00117 	ldw	ra,4(sp)
   12d08:	df000017 	ldw	fp,0(sp)
   12d0c:	dec00204 	addi	sp,sp,8
   12d10:	f800283a 	ret

00012d14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   12d14:	defffd04 	addi	sp,sp,-12
   12d18:	dfc00215 	stw	ra,8(sp)
   12d1c:	df000115 	stw	fp,4(sp)
   12d20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12d24:	00bfff04 	movi	r2,-4
   12d28:	00c00074 	movhi	r3,1
   12d2c:	18cec304 	addi	r3,r3,15116
   12d30:	1885883a 	add	r2,r3,r2
   12d34:	e0bfff15 	stw	r2,-4(fp)
   12d38:	00000606 	br	12d54 <_do_dtors+0x40>
        (*dtor) (); 
   12d3c:	e0bfff17 	ldw	r2,-4(fp)
   12d40:	10800017 	ldw	r2,0(r2)
   12d44:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12d48:	e0bfff17 	ldw	r2,-4(fp)
   12d4c:	10bfff04 	addi	r2,r2,-4
   12d50:	e0bfff15 	stw	r2,-4(fp)
   12d54:	e0ffff17 	ldw	r3,-4(fp)
   12d58:	00800074 	movhi	r2,1
   12d5c:	108ec304 	addi	r2,r2,15116
   12d60:	18bff62e 	bgeu	r3,r2,12d3c <_do_dtors+0x28>
        (*dtor) (); 
}
   12d64:	e037883a 	mov	sp,fp
   12d68:	dfc00117 	ldw	ra,4(sp)
   12d6c:	df000017 	ldw	fp,0(sp)
   12d70:	dec00204 	addi	sp,sp,8
   12d74:	f800283a 	ret

00012d78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12d78:	defff904 	addi	sp,sp,-28
   12d7c:	dfc00615 	stw	ra,24(sp)
   12d80:	df000515 	stw	fp,20(sp)
   12d84:	df000504 	addi	fp,sp,20
   12d88:	e13ffd15 	stw	r4,-12(fp)
   12d8c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12d90:	e0bffe17 	ldw	r2,-8(fp)
   12d94:	10800017 	ldw	r2,0(r2)
   12d98:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12d9c:	e13ffd17 	ldw	r4,-12(fp)
   12da0:	00035cc0 	call	35cc <strlen>
   12da4:	10800044 	addi	r2,r2,1
   12da8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12dac:	00000d06 	br	12de4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12db0:	e0bffc17 	ldw	r2,-16(fp)
   12db4:	11000217 	ldw	r4,8(r2)
   12db8:	e1bffb17 	ldw	r6,-20(fp)
   12dbc:	e17ffd17 	ldw	r5,-12(fp)
   12dc0:	001374c0 	call	1374c <memcmp>
   12dc4:	1004c03a 	cmpne	r2,r2,zero
   12dc8:	1000031e 	bne	r2,zero,12dd8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12dcc:	e0bffc17 	ldw	r2,-16(fp)
   12dd0:	e0bfff15 	stw	r2,-4(fp)
   12dd4:	00000706 	br	12df4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12dd8:	e0bffc17 	ldw	r2,-16(fp)
   12ddc:	10800017 	ldw	r2,0(r2)
   12de0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12de4:	e0fffe17 	ldw	r3,-8(fp)
   12de8:	e0bffc17 	ldw	r2,-16(fp)
   12dec:	10fff01e 	bne	r2,r3,12db0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12df0:	e03fff15 	stw	zero,-4(fp)
   12df4:	e0bfff17 	ldw	r2,-4(fp)
}
   12df8:	e037883a 	mov	sp,fp
   12dfc:	dfc00117 	ldw	ra,4(sp)
   12e00:	df000017 	ldw	fp,0(sp)
   12e04:	dec00204 	addi	sp,sp,8
   12e08:	f800283a 	ret

00012e0c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12e0c:	defffa04 	addi	sp,sp,-24
   12e10:	dfc00515 	stw	ra,20(sp)
   12e14:	df000415 	stw	fp,16(sp)
   12e18:	df000404 	addi	fp,sp,16
   12e1c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12e20:	00800074 	movhi	r2,1
   12e24:	10970804 	addi	r2,r2,23584
   12e28:	10800017 	ldw	r2,0(r2)
   12e2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12e30:	00003306 	br	12f00 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   12e34:	e0bffd17 	ldw	r2,-12(fp)
   12e38:	11000217 	ldw	r4,8(r2)
   12e3c:	00035cc0 	call	35cc <strlen>
   12e40:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   12e44:	e0bffd17 	ldw	r2,-12(fp)
   12e48:	10c00217 	ldw	r3,8(r2)
   12e4c:	e0bffc17 	ldw	r2,-16(fp)
   12e50:	1885883a 	add	r2,r3,r2
   12e54:	10bfffc4 	addi	r2,r2,-1
   12e58:	10800003 	ldbu	r2,0(r2)
   12e5c:	10803fcc 	andi	r2,r2,255
   12e60:	1080201c 	xori	r2,r2,128
   12e64:	10bfe004 	addi	r2,r2,-128
   12e68:	10800bd8 	cmpnei	r2,r2,47
   12e6c:	1000031e 	bne	r2,zero,12e7c <alt_find_file+0x70>
    {
      len -= 1;
   12e70:	e0bffc17 	ldw	r2,-16(fp)
   12e74:	10bfffc4 	addi	r2,r2,-1
   12e78:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12e7c:	e0bffc17 	ldw	r2,-16(fp)
   12e80:	1007883a 	mov	r3,r2
   12e84:	e0bffe17 	ldw	r2,-8(fp)
   12e88:	1885883a 	add	r2,r3,r2
   12e8c:	10800003 	ldbu	r2,0(r2)
   12e90:	10803fcc 	andi	r2,r2,255
   12e94:	1080201c 	xori	r2,r2,128
   12e98:	10bfe004 	addi	r2,r2,-128
   12e9c:	10800be0 	cmpeqi	r2,r2,47
   12ea0:	10000a1e 	bne	r2,zero,12ecc <alt_find_file+0xc0>
   12ea4:	e0bffc17 	ldw	r2,-16(fp)
   12ea8:	1007883a 	mov	r3,r2
   12eac:	e0bffe17 	ldw	r2,-8(fp)
   12eb0:	1885883a 	add	r2,r3,r2
   12eb4:	10800003 	ldbu	r2,0(r2)
   12eb8:	10803fcc 	andi	r2,r2,255
   12ebc:	1080201c 	xori	r2,r2,128
   12ec0:	10bfe004 	addi	r2,r2,-128
   12ec4:	1004c03a 	cmpne	r2,r2,zero
   12ec8:	10000a1e 	bne	r2,zero,12ef4 <alt_find_file+0xe8>
   12ecc:	e0bffd17 	ldw	r2,-12(fp)
   12ed0:	11000217 	ldw	r4,8(r2)
   12ed4:	e1bffc17 	ldw	r6,-16(fp)
   12ed8:	e17ffe17 	ldw	r5,-8(fp)
   12edc:	001374c0 	call	1374c <memcmp>
   12ee0:	1004c03a 	cmpne	r2,r2,zero
   12ee4:	1000031e 	bne	r2,zero,12ef4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12ee8:	e0bffd17 	ldw	r2,-12(fp)
   12eec:	e0bfff15 	stw	r2,-4(fp)
   12ef0:	00000806 	br	12f14 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   12ef4:	e0bffd17 	ldw	r2,-12(fp)
   12ef8:	10800017 	ldw	r2,0(r2)
   12efc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12f00:	00c00074 	movhi	r3,1
   12f04:	18d70804 	addi	r3,r3,23584
   12f08:	e0bffd17 	ldw	r2,-12(fp)
   12f0c:	10ffc91e 	bne	r2,r3,12e34 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12f10:	e03fff15 	stw	zero,-4(fp)
   12f14:	e0bfff17 	ldw	r2,-4(fp)
}
   12f18:	e037883a 	mov	sp,fp
   12f1c:	dfc00117 	ldw	ra,4(sp)
   12f20:	df000017 	ldw	fp,0(sp)
   12f24:	dec00204 	addi	sp,sp,8
   12f28:	f800283a 	ret

00012f2c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   12f2c:	defffb04 	addi	sp,sp,-20
   12f30:	df000415 	stw	fp,16(sp)
   12f34:	df000404 	addi	fp,sp,16
   12f38:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   12f3c:	e0bffe17 	ldw	r2,-8(fp)
   12f40:	10800217 	ldw	r2,8(r2)
   12f44:	1004c03a 	cmpne	r2,r2,zero
   12f48:	1000031e 	bne	r2,zero,12f58 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
   12f4c:	00bffb44 	movi	r2,-19
   12f50:	e0bfff15 	stw	r2,-4(fp)
   12f54:	00001406 	br	12fa8 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   12f58:	e0fffe17 	ldw	r3,-8(fp)
   12f5c:	00800074 	movhi	r2,1
   12f60:	10970804 	addi	r2,r2,23584
   12f64:	e0bffc15 	stw	r2,-16(fp)
   12f68:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12f6c:	e0fffd17 	ldw	r3,-12(fp)
   12f70:	e0bffc17 	ldw	r2,-16(fp)
   12f74:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   12f78:	e0bffc17 	ldw	r2,-16(fp)
   12f7c:	10c00017 	ldw	r3,0(r2)
   12f80:	e0bffd17 	ldw	r2,-12(fp)
   12f84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12f88:	e0bffc17 	ldw	r2,-16(fp)
   12f8c:	10c00017 	ldw	r3,0(r2)
   12f90:	e0bffd17 	ldw	r2,-12(fp)
   12f94:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   12f98:	e0fffc17 	ldw	r3,-16(fp)
   12f9c:	e0bffd17 	ldw	r2,-12(fp)
   12fa0:	18800015 	stw	r2,0(r3)

  return 0;
   12fa4:	e03fff15 	stw	zero,-4(fp)
   12fa8:	e0bfff17 	ldw	r2,-4(fp)
} 
   12fac:	e037883a 	mov	sp,fp
   12fb0:	df000017 	ldw	fp,0(sp)
   12fb4:	dec00104 	addi	sp,sp,4
   12fb8:	f800283a 	ret

00012fbc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12fbc:	defffc04 	addi	sp,sp,-16
   12fc0:	df000315 	stw	fp,12(sp)
   12fc4:	df000304 	addi	fp,sp,12
   12fc8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12fcc:	00bffa04 	movi	r2,-24
   12fd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12fd4:	e03ffe15 	stw	zero,-8(fp)
   12fd8:	00001e06 	br	13054 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   12fdc:	e0bffe17 	ldw	r2,-8(fp)
   12fe0:	00c00074 	movhi	r3,1
   12fe4:	18d27f04 	addi	r3,r3,18940
   12fe8:	10800324 	muli	r2,r2,12
   12fec:	10c5883a 	add	r2,r2,r3
   12ff0:	10800017 	ldw	r2,0(r2)
   12ff4:	1004c03a 	cmpne	r2,r2,zero
   12ff8:	1000131e 	bne	r2,zero,13048 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   12ffc:	e0bffe17 	ldw	r2,-8(fp)
   13000:	00c00074 	movhi	r3,1
   13004:	18d27f04 	addi	r3,r3,18940
   13008:	10800324 	muli	r2,r2,12
   1300c:	10c7883a 	add	r3,r2,r3
   13010:	e0bfff17 	ldw	r2,-4(fp)
   13014:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   13018:	00800074 	movhi	r2,1
   1301c:	10970c04 	addi	r2,r2,23600
   13020:	10c00017 	ldw	r3,0(r2)
   13024:	e0bffe17 	ldw	r2,-8(fp)
   13028:	1880040e 	bge	r3,r2,1303c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1302c:	00c00074 	movhi	r3,1
   13030:	18d70c04 	addi	r3,r3,23600
   13034:	e0bffe17 	ldw	r2,-8(fp)
   13038:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1303c:	e0bffe17 	ldw	r2,-8(fp)
   13040:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   13044:	00000606 	br	13060 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13048:	e0bffe17 	ldw	r2,-8(fp)
   1304c:	10800044 	addi	r2,r2,1
   13050:	e0bffe15 	stw	r2,-8(fp)
   13054:	e0bffe17 	ldw	r2,-8(fp)
   13058:	10800810 	cmplti	r2,r2,32
   1305c:	103fdf1e 	bne	r2,zero,12fdc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13060:	e0bffd17 	ldw	r2,-12(fp)
}
   13064:	e037883a 	mov	sp,fp
   13068:	df000017 	ldw	fp,0(sp)
   1306c:	dec00104 	addi	sp,sp,4
   13070:	f800283a 	ret

00013074 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13074:	defffe04 	addi	sp,sp,-8
   13078:	dfc00115 	stw	ra,4(sp)
   1307c:	df000015 	stw	fp,0(sp)
   13080:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13084:	0009883a 	mov	r4,zero
   13088:	01440004 	movi	r5,4096
   1308c:	00136700 	call	13670 <alt_icache_flush>
#endif
}
   13090:	e037883a 	mov	sp,fp
   13094:	dfc00117 	ldw	ra,4(sp)
   13098:	df000017 	ldw	fp,0(sp)
   1309c:	dec00204 	addi	sp,sp,8
   130a0:	f800283a 	ret

000130a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   130a4:	defff904 	addi	sp,sp,-28
   130a8:	dfc00615 	stw	ra,24(sp)
   130ac:	df000515 	stw	fp,20(sp)
   130b0:	df000504 	addi	fp,sp,20
   130b4:	e13ffc15 	stw	r4,-16(fp)
   130b8:	e17ffd15 	stw	r5,-12(fp)
   130bc:	e1bffe15 	stw	r6,-8(fp)
   130c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   130c4:	e0800217 	ldw	r2,8(fp)
   130c8:	d8800015 	stw	r2,0(sp)
   130cc:	e13ffc17 	ldw	r4,-16(fp)
   130d0:	e17ffd17 	ldw	r5,-12(fp)
   130d4:	e1bffe17 	ldw	r6,-8(fp)
   130d8:	e1ffff17 	ldw	r7,-4(fp)
   130dc:	00132780 	call	13278 <alt_iic_isr_register>
}  
   130e0:	e037883a 	mov	sp,fp
   130e4:	dfc00117 	ldw	ra,4(sp)
   130e8:	df000017 	ldw	fp,0(sp)
   130ec:	dec00204 	addi	sp,sp,8
   130f0:	f800283a 	ret

000130f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   130f4:	defff904 	addi	sp,sp,-28
   130f8:	df000615 	stw	fp,24(sp)
   130fc:	df000604 	addi	fp,sp,24
   13100:	e13ffe15 	stw	r4,-8(fp)
   13104:	e17fff15 	stw	r5,-4(fp)
   13108:	e0bfff17 	ldw	r2,-4(fp)
   1310c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13110:	0005303a 	rdctl	r2,status
   13114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13118:	e0fffb17 	ldw	r3,-20(fp)
   1311c:	00bfff84 	movi	r2,-2
   13120:	1884703a 	and	r2,r3,r2
   13124:	1001703a 	wrctl	status,r2
  
  return context;
   13128:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1312c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   13130:	e0fffc17 	ldw	r3,-16(fp)
   13134:	00800044 	movi	r2,1
   13138:	10c4983a 	sll	r2,r2,r3
   1313c:	1007883a 	mov	r3,r2
   13140:	00800074 	movhi	r2,1
   13144:	109def04 	addi	r2,r2,30652
   13148:	10800017 	ldw	r2,0(r2)
   1314c:	1886b03a 	or	r3,r3,r2
   13150:	00800074 	movhi	r2,1
   13154:	109def04 	addi	r2,r2,30652
   13158:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1315c:	00800074 	movhi	r2,1
   13160:	109def04 	addi	r2,r2,30652
   13164:	10800017 	ldw	r2,0(r2)
   13168:	100170fa 	wrctl	ienable,r2
   1316c:	e0bffd17 	ldw	r2,-12(fp)
   13170:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13174:	e0bffa17 	ldw	r2,-24(fp)
   13178:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1317c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   13180:	e037883a 	mov	sp,fp
   13184:	df000017 	ldw	fp,0(sp)
   13188:	dec00104 	addi	sp,sp,4
   1318c:	f800283a 	ret

00013190 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13190:	defff904 	addi	sp,sp,-28
   13194:	df000615 	stw	fp,24(sp)
   13198:	df000604 	addi	fp,sp,24
   1319c:	e13ffe15 	stw	r4,-8(fp)
   131a0:	e17fff15 	stw	r5,-4(fp)
   131a4:	e0bfff17 	ldw	r2,-4(fp)
   131a8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131ac:	0005303a 	rdctl	r2,status
   131b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131b4:	e0fffb17 	ldw	r3,-20(fp)
   131b8:	00bfff84 	movi	r2,-2
   131bc:	1884703a 	and	r2,r3,r2
   131c0:	1001703a 	wrctl	status,r2
  
  return context;
   131c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   131c8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   131cc:	e0fffc17 	ldw	r3,-16(fp)
   131d0:	00800044 	movi	r2,1
   131d4:	10c4983a 	sll	r2,r2,r3
   131d8:	0084303a 	nor	r2,zero,r2
   131dc:	1007883a 	mov	r3,r2
   131e0:	00800074 	movhi	r2,1
   131e4:	109def04 	addi	r2,r2,30652
   131e8:	10800017 	ldw	r2,0(r2)
   131ec:	1886703a 	and	r3,r3,r2
   131f0:	00800074 	movhi	r2,1
   131f4:	109def04 	addi	r2,r2,30652
   131f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   131fc:	00800074 	movhi	r2,1
   13200:	109def04 	addi	r2,r2,30652
   13204:	10800017 	ldw	r2,0(r2)
   13208:	100170fa 	wrctl	ienable,r2
   1320c:	e0bffd17 	ldw	r2,-12(fp)
   13210:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13214:	e0bffa17 	ldw	r2,-24(fp)
   13218:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1321c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   13220:	e037883a 	mov	sp,fp
   13224:	df000017 	ldw	fp,0(sp)
   13228:	dec00104 	addi	sp,sp,4
   1322c:	f800283a 	ret

00013230 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13230:	defffc04 	addi	sp,sp,-16
   13234:	df000315 	stw	fp,12(sp)
   13238:	df000304 	addi	fp,sp,12
   1323c:	e13ffe15 	stw	r4,-8(fp)
   13240:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   13244:	000530fa 	rdctl	r2,ienable
   13248:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1324c:	e0ffff17 	ldw	r3,-4(fp)
   13250:	00800044 	movi	r2,1
   13254:	10c4983a 	sll	r2,r2,r3
   13258:	1007883a 	mov	r3,r2
   1325c:	e0bffd17 	ldw	r2,-12(fp)
   13260:	1884703a 	and	r2,r3,r2
   13264:	1004c03a 	cmpne	r2,r2,zero
}
   13268:	e037883a 	mov	sp,fp
   1326c:	df000017 	ldw	fp,0(sp)
   13270:	dec00104 	addi	sp,sp,4
   13274:	f800283a 	ret

00013278 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13278:	defff404 	addi	sp,sp,-48
   1327c:	dfc00b15 	stw	ra,44(sp)
   13280:	df000a15 	stw	fp,40(sp)
   13284:	df000a04 	addi	fp,sp,40
   13288:	e13ffb15 	stw	r4,-20(fp)
   1328c:	e17ffc15 	stw	r5,-16(fp)
   13290:	e1bffd15 	stw	r6,-12(fp)
   13294:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   13298:	00bffa84 	movi	r2,-22
   1329c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   132a0:	e0bffc17 	ldw	r2,-16(fp)
   132a4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   132a8:	e0bff917 	ldw	r2,-28(fp)
   132ac:	10800808 	cmpgei	r2,r2,32
   132b0:	1000291e 	bne	r2,zero,13358 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132b4:	0005303a 	rdctl	r2,status
   132b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132bc:	e0fff717 	ldw	r3,-36(fp)
   132c0:	00bfff84 	movi	r2,-2
   132c4:	1884703a 	and	r2,r3,r2
   132c8:	1001703a 	wrctl	status,r2
  
  return context;
   132cc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   132d0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   132d4:	e0bff917 	ldw	r2,-28(fp)
   132d8:	00c00074 	movhi	r3,1
   132dc:	18df7c04 	addi	r3,r3,32240
   132e0:	100490fa 	slli	r2,r2,3
   132e4:	10c7883a 	add	r3,r2,r3
   132e8:	e0bffd17 	ldw	r2,-12(fp)
   132ec:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   132f0:	e0bff917 	ldw	r2,-28(fp)
   132f4:	00c00074 	movhi	r3,1
   132f8:	18df7c04 	addi	r3,r3,32240
   132fc:	100490fa 	slli	r2,r2,3
   13300:	10c5883a 	add	r2,r2,r3
   13304:	10c00104 	addi	r3,r2,4
   13308:	e0bffe17 	ldw	r2,-8(fp)
   1330c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13310:	e0bffd17 	ldw	r2,-12(fp)
   13314:	1005003a 	cmpeq	r2,r2,zero
   13318:	1000051e 	bne	r2,zero,13330 <alt_iic_isr_register+0xb8>
   1331c:	e17ff917 	ldw	r5,-28(fp)
   13320:	e13ffb17 	ldw	r4,-20(fp)
   13324:	00130f40 	call	130f4 <alt_ic_irq_enable>
   13328:	e0bfff15 	stw	r2,-4(fp)
   1332c:	00000406 	br	13340 <alt_iic_isr_register+0xc8>
   13330:	e17ff917 	ldw	r5,-28(fp)
   13334:	e13ffb17 	ldw	r4,-20(fp)
   13338:	00131900 	call	13190 <alt_ic_irq_disable>
   1333c:	e0bfff15 	stw	r2,-4(fp)
   13340:	e0bfff17 	ldw	r2,-4(fp)
   13344:	e0bffa15 	stw	r2,-24(fp)
   13348:	e0bff817 	ldw	r2,-32(fp)
   1334c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13350:	e0bff617 	ldw	r2,-40(fp)
   13354:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13358:	e0bffa17 	ldw	r2,-24(fp)
}
   1335c:	e037883a 	mov	sp,fp
   13360:	dfc00117 	ldw	ra,4(sp)
   13364:	df000017 	ldw	fp,0(sp)
   13368:	dec00204 	addi	sp,sp,8
   1336c:	f800283a 	ret

00013370 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13370:	defff904 	addi	sp,sp,-28
   13374:	dfc00615 	stw	ra,24(sp)
   13378:	df000515 	stw	fp,20(sp)
   1337c:	df000504 	addi	fp,sp,20
   13380:	e13ffc15 	stw	r4,-16(fp)
   13384:	e17ffd15 	stw	r5,-12(fp)
   13388:	e1bffe15 	stw	r6,-8(fp)
   1338c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13390:	e13ffd17 	ldw	r4,-12(fp)
   13394:	e17ffe17 	ldw	r5,-8(fp)
   13398:	e1bfff17 	ldw	r6,-4(fp)
   1339c:	0010bb40 	call	10bb4 <open>
   133a0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   133a4:	e0bffb17 	ldw	r2,-20(fp)
   133a8:	1004803a 	cmplt	r2,r2,zero
   133ac:	10001c1e 	bne	r2,zero,13420 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   133b0:	e0bffb17 	ldw	r2,-20(fp)
   133b4:	00c00074 	movhi	r3,1
   133b8:	18d27f04 	addi	r3,r3,18940
   133bc:	10800324 	muli	r2,r2,12
   133c0:	10c5883a 	add	r2,r2,r3
   133c4:	10c00017 	ldw	r3,0(r2)
   133c8:	e0bffc17 	ldw	r2,-16(fp)
   133cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   133d0:	e0bffb17 	ldw	r2,-20(fp)
   133d4:	00c00074 	movhi	r3,1
   133d8:	18d27f04 	addi	r3,r3,18940
   133dc:	10800324 	muli	r2,r2,12
   133e0:	10c5883a 	add	r2,r2,r3
   133e4:	10800104 	addi	r2,r2,4
   133e8:	10c00017 	ldw	r3,0(r2)
   133ec:	e0bffc17 	ldw	r2,-16(fp)
   133f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   133f4:	e0bffb17 	ldw	r2,-20(fp)
   133f8:	00c00074 	movhi	r3,1
   133fc:	18d27f04 	addi	r3,r3,18940
   13400:	10800324 	muli	r2,r2,12
   13404:	10c5883a 	add	r2,r2,r3
   13408:	10800204 	addi	r2,r2,8
   1340c:	10c00017 	ldw	r3,0(r2)
   13410:	e0bffc17 	ldw	r2,-16(fp)
   13414:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13418:	e13ffb17 	ldw	r4,-20(fp)
   1341c:	0010f1c0 	call	10f1c <alt_release_fd>
  }
} 
   13420:	e037883a 	mov	sp,fp
   13424:	dfc00117 	ldw	ra,4(sp)
   13428:	df000017 	ldw	fp,0(sp)
   1342c:	dec00204 	addi	sp,sp,8
   13430:	f800283a 	ret

00013434 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13434:	defffb04 	addi	sp,sp,-20
   13438:	dfc00415 	stw	ra,16(sp)
   1343c:	df000315 	stw	fp,12(sp)
   13440:	df000304 	addi	fp,sp,12
   13444:	e13ffd15 	stw	r4,-12(fp)
   13448:	e17ffe15 	stw	r5,-8(fp)
   1344c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13450:	01000074 	movhi	r4,1
   13454:	21128204 	addi	r4,r4,18952
   13458:	e17ffd17 	ldw	r5,-12(fp)
   1345c:	01800044 	movi	r6,1
   13460:	01c07fc4 	movi	r7,511
   13464:	00133700 	call	13370 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13468:	01000074 	movhi	r4,1
   1346c:	21127f04 	addi	r4,r4,18940
   13470:	e17ffe17 	ldw	r5,-8(fp)
   13474:	000d883a 	mov	r6,zero
   13478:	01c07fc4 	movi	r7,511
   1347c:	00133700 	call	13370 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13480:	01000074 	movhi	r4,1
   13484:	21128504 	addi	r4,r4,18964
   13488:	e17fff17 	ldw	r5,-4(fp)
   1348c:	01800044 	movi	r6,1
   13490:	01c07fc4 	movi	r7,511
   13494:	00133700 	call	13370 <alt_open_fd>
}  
   13498:	e037883a 	mov	sp,fp
   1349c:	dfc00117 	ldw	ra,4(sp)
   134a0:	df000017 	ldw	fp,0(sp)
   134a4:	dec00204 	addi	sp,sp,8
   134a8:	f800283a 	ret

000134ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   134ac:	defffa04 	addi	sp,sp,-24
   134b0:	df000515 	stw	fp,20(sp)
   134b4:	df000504 	addi	fp,sp,20
   134b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134bc:	0005303a 	rdctl	r2,status
   134c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134c4:	e0fffd17 	ldw	r3,-12(fp)
   134c8:	00bfff84 	movi	r2,-2
   134cc:	1884703a 	and	r2,r3,r2
   134d0:	1001703a 	wrctl	status,r2
  
  return context;
   134d4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   134d8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   134dc:	e0bfff17 	ldw	r2,-4(fp)
   134e0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   134e4:	e0bffc17 	ldw	r2,-16(fp)
   134e8:	10c00017 	ldw	r3,0(r2)
   134ec:	e0bffc17 	ldw	r2,-16(fp)
   134f0:	10800117 	ldw	r2,4(r2)
   134f4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   134f8:	e0bffc17 	ldw	r2,-16(fp)
   134fc:	10c00117 	ldw	r3,4(r2)
   13500:	e0bffc17 	ldw	r2,-16(fp)
   13504:	10800017 	ldw	r2,0(r2)
   13508:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1350c:	e0fffc17 	ldw	r3,-16(fp)
   13510:	e0bffc17 	ldw	r2,-16(fp)
   13514:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   13518:	e0fffc17 	ldw	r3,-16(fp)
   1351c:	e0bffc17 	ldw	r2,-16(fp)
   13520:	18800015 	stw	r2,0(r3)
   13524:	e0bffe17 	ldw	r2,-8(fp)
   13528:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1352c:	e0bffb17 	ldw	r2,-20(fp)
   13530:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13534:	e037883a 	mov	sp,fp
   13538:	df000017 	ldw	fp,0(sp)
   1353c:	dec00104 	addi	sp,sp,4
   13540:	f800283a 	ret

00013544 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13544:	defffb04 	addi	sp,sp,-20
   13548:	dfc00415 	stw	ra,16(sp)
   1354c:	df000315 	stw	fp,12(sp)
   13550:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13554:	d0a02117 	ldw	r2,-32636(gp)
   13558:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1355c:	d0a6f017 	ldw	r2,-25664(gp)
   13560:	10800044 	addi	r2,r2,1
   13564:	d0a6f015 	stw	r2,-25664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13568:	00003106 	br	13630 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1356c:	e0bffe17 	ldw	r2,-8(fp)
   13570:	10800017 	ldw	r2,0(r2)
   13574:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13578:	e0bffe17 	ldw	r2,-8(fp)
   1357c:	10800403 	ldbu	r2,16(r2)
   13580:	10803fcc 	andi	r2,r2,255
   13584:	1005003a 	cmpeq	r2,r2,zero
   13588:	1000051e 	bne	r2,zero,135a0 <alt_tick+0x5c>
   1358c:	d0a6f017 	ldw	r2,-25664(gp)
   13590:	1004c03a 	cmpne	r2,r2,zero
   13594:	1000021e 	bne	r2,zero,135a0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   13598:	e0bffe17 	ldw	r2,-8(fp)
   1359c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   135a0:	e0bffe17 	ldw	r2,-8(fp)
   135a4:	10c00217 	ldw	r3,8(r2)
   135a8:	d0a6f017 	ldw	r2,-25664(gp)
   135ac:	10c01e36 	bltu	r2,r3,13628 <alt_tick+0xe4>
   135b0:	e0bffe17 	ldw	r2,-8(fp)
   135b4:	10800403 	ldbu	r2,16(r2)
   135b8:	10803fcc 	andi	r2,r2,255
   135bc:	1004c03a 	cmpne	r2,r2,zero
   135c0:	1000191e 	bne	r2,zero,13628 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   135c4:	e0bffe17 	ldw	r2,-8(fp)
   135c8:	10c00317 	ldw	r3,12(r2)
   135cc:	e0bffe17 	ldw	r2,-8(fp)
   135d0:	11000517 	ldw	r4,20(r2)
   135d4:	183ee83a 	callr	r3
   135d8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   135dc:	e0bffd17 	ldw	r2,-12(fp)
   135e0:	1004c03a 	cmpne	r2,r2,zero
   135e4:	1000031e 	bne	r2,zero,135f4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   135e8:	e13ffe17 	ldw	r4,-8(fp)
   135ec:	00134ac0 	call	134ac <alt_alarm_stop>
   135f0:	00000d06 	br	13628 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   135f4:	e0bffe17 	ldw	r2,-8(fp)
   135f8:	10c00217 	ldw	r3,8(r2)
   135fc:	e0bffd17 	ldw	r2,-12(fp)
   13600:	1887883a 	add	r3,r3,r2
   13604:	e0bffe17 	ldw	r2,-8(fp)
   13608:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1360c:	e0bffe17 	ldw	r2,-8(fp)
   13610:	10c00217 	ldw	r3,8(r2)
   13614:	d0a6f017 	ldw	r2,-25664(gp)
   13618:	1880032e 	bgeu	r3,r2,13628 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1361c:	e0fffe17 	ldw	r3,-8(fp)
   13620:	00800044 	movi	r2,1
   13624:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   13628:	e0bfff17 	ldw	r2,-4(fp)
   1362c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13630:	d0e02104 	addi	r3,gp,-32636
   13634:	e0bffe17 	ldw	r2,-8(fp)
   13638:	10ffcc1e 	bne	r2,r3,1356c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1363c:	e037883a 	mov	sp,fp
   13640:	dfc00117 	ldw	ra,4(sp)
   13644:	df000017 	ldw	fp,0(sp)
   13648:	dec00204 	addi	sp,sp,8
   1364c:	f800283a 	ret

00013650 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   13650:	deffff04 	addi	sp,sp,-4
   13654:	df000015 	stw	fp,0(sp)
   13658:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1365c:	000170fa 	wrctl	ienable,zero
}
   13660:	e037883a 	mov	sp,fp
   13664:	df000017 	ldw	fp,0(sp)
   13668:	dec00104 	addi	sp,sp,4
   1366c:	f800283a 	ret

00013670 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   13670:	defffb04 	addi	sp,sp,-20
   13674:	df000415 	stw	fp,16(sp)
   13678:	df000404 	addi	fp,sp,16
   1367c:	e13ffe15 	stw	r4,-8(fp)
   13680:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   13684:	e0bfff17 	ldw	r2,-4(fp)
   13688:	10840070 	cmpltui	r2,r2,4097
   1368c:	1000021e 	bne	r2,zero,13698 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13690:	00840004 	movi	r2,4096
   13694:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   13698:	e0fffe17 	ldw	r3,-8(fp)
   1369c:	e0bfff17 	ldw	r2,-4(fp)
   136a0:	1885883a 	add	r2,r3,r2
   136a4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   136a8:	e0bffe17 	ldw	r2,-8(fp)
   136ac:	e0bffd15 	stw	r2,-12(fp)
   136b0:	00000506 	br	136c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   136b4:	e0bffd17 	ldw	r2,-12(fp)
   136b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   136bc:	e0bffd17 	ldw	r2,-12(fp)
   136c0:	10800804 	addi	r2,r2,32
   136c4:	e0bffd15 	stw	r2,-12(fp)
   136c8:	e0fffd17 	ldw	r3,-12(fp)
   136cc:	e0bffc17 	ldw	r2,-16(fp)
   136d0:	18bff836 	bltu	r3,r2,136b4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   136d4:	e0bffe17 	ldw	r2,-8(fp)
   136d8:	108007cc 	andi	r2,r2,31
   136dc:	1005003a 	cmpeq	r2,r2,zero
   136e0:	1000021e 	bne	r2,zero,136ec <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   136e4:	e0bffd17 	ldw	r2,-12(fp)
   136e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   136ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   136f0:	e037883a 	mov	sp,fp
   136f4:	df000017 	ldw	fp,0(sp)
   136f8:	dec00104 	addi	sp,sp,4
   136fc:	f800283a 	ret

00013700 <atexit>:
   13700:	200b883a 	mov	r5,r4
   13704:	000d883a 	mov	r6,zero
   13708:	0009883a 	mov	r4,zero
   1370c:	000f883a 	mov	r7,zero
   13710:	00137c01 	jmpi	137c0 <__register_exitproc>

00013714 <exit>:
   13714:	defffe04 	addi	sp,sp,-8
   13718:	000b883a 	mov	r5,zero
   1371c:	dc000015 	stw	r16,0(sp)
   13720:	dfc00115 	stw	ra,4(sp)
   13724:	2021883a 	mov	r16,r4
   13728:	00138f80 	call	138f8 <__call_exitprocs>
   1372c:	00800074 	movhi	r2,1
   13730:	10970204 	addi	r2,r2,23560
   13734:	11000017 	ldw	r4,0(r2)
   13738:	20800f17 	ldw	r2,60(r4)
   1373c:	10000126 	beq	r2,zero,13744 <exit+0x30>
   13740:	103ee83a 	callr	r2
   13744:	8009883a 	mov	r4,r16
   13748:	0013ae80 	call	13ae8 <_exit>

0001374c <memcmp>:
   1374c:	00c000c4 	movi	r3,3
   13750:	1980032e 	bgeu	r3,r6,13760 <memcmp+0x14>
   13754:	2144b03a 	or	r2,r4,r5
   13758:	10c4703a 	and	r2,r2,r3
   1375c:	10000f26 	beq	r2,zero,1379c <memcmp+0x50>
   13760:	31ffffc4 	addi	r7,r6,-1
   13764:	3000061e 	bne	r6,zero,13780 <memcmp+0x34>
   13768:	00000a06 	br	13794 <memcmp+0x48>
   1376c:	39ffffc4 	addi	r7,r7,-1
   13770:	00bfffc4 	movi	r2,-1
   13774:	21000044 	addi	r4,r4,1
   13778:	29400044 	addi	r5,r5,1
   1377c:	38800526 	beq	r7,r2,13794 <memcmp+0x48>
   13780:	20c00003 	ldbu	r3,0(r4)
   13784:	28800003 	ldbu	r2,0(r5)
   13788:	18bff826 	beq	r3,r2,1376c <memcmp+0x20>
   1378c:	1885c83a 	sub	r2,r3,r2
   13790:	f800283a 	ret
   13794:	0005883a 	mov	r2,zero
   13798:	f800283a 	ret
   1379c:	180f883a 	mov	r7,r3
   137a0:	20c00017 	ldw	r3,0(r4)
   137a4:	28800017 	ldw	r2,0(r5)
   137a8:	18bfed1e 	bne	r3,r2,13760 <memcmp+0x14>
   137ac:	31bfff04 	addi	r6,r6,-4
   137b0:	21000104 	addi	r4,r4,4
   137b4:	29400104 	addi	r5,r5,4
   137b8:	39bff936 	bltu	r7,r6,137a0 <memcmp+0x54>
   137bc:	003fe806 	br	13760 <memcmp+0x14>

000137c0 <__register_exitproc>:
   137c0:	defffa04 	addi	sp,sp,-24
   137c4:	00800074 	movhi	r2,1
   137c8:	10970204 	addi	r2,r2,23560
   137cc:	dc000015 	stw	r16,0(sp)
   137d0:	14000017 	ldw	r16,0(r2)
   137d4:	dd000415 	stw	r20,16(sp)
   137d8:	2829883a 	mov	r20,r5
   137dc:	81405217 	ldw	r5,328(r16)
   137e0:	dcc00315 	stw	r19,12(sp)
   137e4:	dc800215 	stw	r18,8(sp)
   137e8:	dc400115 	stw	r17,4(sp)
   137ec:	dfc00515 	stw	ra,20(sp)
   137f0:	2023883a 	mov	r17,r4
   137f4:	3027883a 	mov	r19,r6
   137f8:	3825883a 	mov	r18,r7
   137fc:	28002526 	beq	r5,zero,13894 <__register_exitproc+0xd4>
   13800:	29000117 	ldw	r4,4(r5)
   13804:	008007c4 	movi	r2,31
   13808:	11002716 	blt	r2,r4,138a8 <__register_exitproc+0xe8>
   1380c:	8800101e 	bne	r17,zero,13850 <__register_exitproc+0x90>
   13810:	2105883a 	add	r2,r4,r4
   13814:	1085883a 	add	r2,r2,r2
   13818:	20c00044 	addi	r3,r4,1
   1381c:	1145883a 	add	r2,r2,r5
   13820:	0009883a 	mov	r4,zero
   13824:	15000215 	stw	r20,8(r2)
   13828:	28c00115 	stw	r3,4(r5)
   1382c:	2005883a 	mov	r2,r4
   13830:	dfc00517 	ldw	ra,20(sp)
   13834:	dd000417 	ldw	r20,16(sp)
   13838:	dcc00317 	ldw	r19,12(sp)
   1383c:	dc800217 	ldw	r18,8(sp)
   13840:	dc400117 	ldw	r17,4(sp)
   13844:	dc000017 	ldw	r16,0(sp)
   13848:	dec00604 	addi	sp,sp,24
   1384c:	f800283a 	ret
   13850:	29802204 	addi	r6,r5,136
   13854:	00800044 	movi	r2,1
   13858:	110e983a 	sll	r7,r2,r4
   1385c:	30c04017 	ldw	r3,256(r6)
   13860:	2105883a 	add	r2,r4,r4
   13864:	1085883a 	add	r2,r2,r2
   13868:	1185883a 	add	r2,r2,r6
   1386c:	19c6b03a 	or	r3,r3,r7
   13870:	14802015 	stw	r18,128(r2)
   13874:	14c00015 	stw	r19,0(r2)
   13878:	00800084 	movi	r2,2
   1387c:	30c04015 	stw	r3,256(r6)
   13880:	88bfe31e 	bne	r17,r2,13810 <__register_exitproc+0x50>
   13884:	30804117 	ldw	r2,260(r6)
   13888:	11c4b03a 	or	r2,r2,r7
   1388c:	30804115 	stw	r2,260(r6)
   13890:	003fdf06 	br	13810 <__register_exitproc+0x50>
   13894:	00800074 	movhi	r2,1
   13898:	109fbc04 	addi	r2,r2,32496
   1389c:	100b883a 	mov	r5,r2
   138a0:	80805215 	stw	r2,328(r16)
   138a4:	003fd606 	br	13800 <__register_exitproc+0x40>
   138a8:	00800034 	movhi	r2,0
   138ac:	108a0004 	addi	r2,r2,10240
   138b0:	1000021e 	bne	r2,zero,138bc <__register_exitproc+0xfc>
   138b4:	013fffc4 	movi	r4,-1
   138b8:	003fdc06 	br	1382c <__register_exitproc+0x6c>
   138bc:	01006404 	movi	r4,400
   138c0:	103ee83a 	callr	r2
   138c4:	1007883a 	mov	r3,r2
   138c8:	103ffa26 	beq	r2,zero,138b4 <__register_exitproc+0xf4>
   138cc:	80805217 	ldw	r2,328(r16)
   138d0:	180b883a 	mov	r5,r3
   138d4:	18000115 	stw	zero,4(r3)
   138d8:	18800015 	stw	r2,0(r3)
   138dc:	80c05215 	stw	r3,328(r16)
   138e0:	18006215 	stw	zero,392(r3)
   138e4:	18006315 	stw	zero,396(r3)
   138e8:	0009883a 	mov	r4,zero
   138ec:	883fc826 	beq	r17,zero,13810 <__register_exitproc+0x50>
   138f0:	003fd706 	br	13850 <__register_exitproc+0x90>

000138f4 <register_fini>:
   138f4:	f800283a 	ret

000138f8 <__call_exitprocs>:
   138f8:	00800074 	movhi	r2,1
   138fc:	10970204 	addi	r2,r2,23560
   13900:	10800017 	ldw	r2,0(r2)
   13904:	defff304 	addi	sp,sp,-52
   13908:	df000b15 	stw	fp,44(sp)
   1390c:	d8800115 	stw	r2,4(sp)
   13910:	00800034 	movhi	r2,0
   13914:	1089fb04 	addi	r2,r2,10220
   13918:	1005003a 	cmpeq	r2,r2,zero
   1391c:	d8800215 	stw	r2,8(sp)
   13920:	d8800117 	ldw	r2,4(sp)
   13924:	dd400815 	stw	r21,32(sp)
   13928:	dd000715 	stw	r20,28(sp)
   1392c:	10805204 	addi	r2,r2,328
   13930:	dfc00c15 	stw	ra,48(sp)
   13934:	ddc00a15 	stw	r23,40(sp)
   13938:	dd800915 	stw	r22,36(sp)
   1393c:	dcc00615 	stw	r19,24(sp)
   13940:	dc800515 	stw	r18,20(sp)
   13944:	dc400415 	stw	r17,16(sp)
   13948:	dc000315 	stw	r16,12(sp)
   1394c:	282b883a 	mov	r21,r5
   13950:	2039883a 	mov	fp,r4
   13954:	d8800015 	stw	r2,0(sp)
   13958:	2829003a 	cmpeq	r20,r5,zero
   1395c:	d8800117 	ldw	r2,4(sp)
   13960:	14405217 	ldw	r17,328(r2)
   13964:	88001026 	beq	r17,zero,139a8 <__call_exitprocs+0xb0>
   13968:	ddc00017 	ldw	r23,0(sp)
   1396c:	88800117 	ldw	r2,4(r17)
   13970:	8c802204 	addi	r18,r17,136
   13974:	143fffc4 	addi	r16,r2,-1
   13978:	80000916 	blt	r16,zero,139a0 <__call_exitprocs+0xa8>
   1397c:	05bfffc4 	movi	r22,-1
   13980:	a000151e 	bne	r20,zero,139d8 <__call_exitprocs+0xe0>
   13984:	8409883a 	add	r4,r16,r16
   13988:	2105883a 	add	r2,r4,r4
   1398c:	1485883a 	add	r2,r2,r18
   13990:	10c02017 	ldw	r3,128(r2)
   13994:	a8c01126 	beq	r21,r3,139dc <__call_exitprocs+0xe4>
   13998:	843fffc4 	addi	r16,r16,-1
   1399c:	85bff81e 	bne	r16,r22,13980 <__call_exitprocs+0x88>
   139a0:	d8800217 	ldw	r2,8(sp)
   139a4:	10003126 	beq	r2,zero,13a6c <__call_exitprocs+0x174>
   139a8:	dfc00c17 	ldw	ra,48(sp)
   139ac:	df000b17 	ldw	fp,44(sp)
   139b0:	ddc00a17 	ldw	r23,40(sp)
   139b4:	dd800917 	ldw	r22,36(sp)
   139b8:	dd400817 	ldw	r21,32(sp)
   139bc:	dd000717 	ldw	r20,28(sp)
   139c0:	dcc00617 	ldw	r19,24(sp)
   139c4:	dc800517 	ldw	r18,20(sp)
   139c8:	dc400417 	ldw	r17,16(sp)
   139cc:	dc000317 	ldw	r16,12(sp)
   139d0:	dec00d04 	addi	sp,sp,52
   139d4:	f800283a 	ret
   139d8:	8409883a 	add	r4,r16,r16
   139dc:	88c00117 	ldw	r3,4(r17)
   139e0:	2105883a 	add	r2,r4,r4
   139e4:	1445883a 	add	r2,r2,r17
   139e8:	18ffffc4 	addi	r3,r3,-1
   139ec:	11800217 	ldw	r6,8(r2)
   139f0:	1c001526 	beq	r3,r16,13a48 <__call_exitprocs+0x150>
   139f4:	10000215 	stw	zero,8(r2)
   139f8:	303fe726 	beq	r6,zero,13998 <__call_exitprocs+0xa0>
   139fc:	00c00044 	movi	r3,1
   13a00:	1c06983a 	sll	r3,r3,r16
   13a04:	90804017 	ldw	r2,256(r18)
   13a08:	8cc00117 	ldw	r19,4(r17)
   13a0c:	1884703a 	and	r2,r3,r2
   13a10:	10001426 	beq	r2,zero,13a64 <__call_exitprocs+0x16c>
   13a14:	90804117 	ldw	r2,260(r18)
   13a18:	1884703a 	and	r2,r3,r2
   13a1c:	10000c1e 	bne	r2,zero,13a50 <__call_exitprocs+0x158>
   13a20:	2105883a 	add	r2,r4,r4
   13a24:	1485883a 	add	r2,r2,r18
   13a28:	11400017 	ldw	r5,0(r2)
   13a2c:	e009883a 	mov	r4,fp
   13a30:	303ee83a 	callr	r6
   13a34:	88800117 	ldw	r2,4(r17)
   13a38:	98bfc81e 	bne	r19,r2,1395c <__call_exitprocs+0x64>
   13a3c:	b8800017 	ldw	r2,0(r23)
   13a40:	147fd526 	beq	r2,r17,13998 <__call_exitprocs+0xa0>
   13a44:	003fc506 	br	1395c <__call_exitprocs+0x64>
   13a48:	8c000115 	stw	r16,4(r17)
   13a4c:	003fea06 	br	139f8 <__call_exitprocs+0x100>
   13a50:	2105883a 	add	r2,r4,r4
   13a54:	1485883a 	add	r2,r2,r18
   13a58:	11000017 	ldw	r4,0(r2)
   13a5c:	303ee83a 	callr	r6
   13a60:	003ff406 	br	13a34 <__call_exitprocs+0x13c>
   13a64:	303ee83a 	callr	r6
   13a68:	003ff206 	br	13a34 <__call_exitprocs+0x13c>
   13a6c:	88800117 	ldw	r2,4(r17)
   13a70:	1000081e 	bne	r2,zero,13a94 <__call_exitprocs+0x19c>
   13a74:	89000017 	ldw	r4,0(r17)
   13a78:	20000726 	beq	r4,zero,13a98 <__call_exitprocs+0x1a0>
   13a7c:	b9000015 	stw	r4,0(r23)
   13a80:	8809883a 	mov	r4,r17
   13a84:	00027ec0 	call	27ec <free>
   13a88:	bc400017 	ldw	r17,0(r23)
   13a8c:	883fb71e 	bne	r17,zero,1396c <__call_exitprocs+0x74>
   13a90:	003fc506 	br	139a8 <__call_exitprocs+0xb0>
   13a94:	89000017 	ldw	r4,0(r17)
   13a98:	882f883a 	mov	r23,r17
   13a9c:	2023883a 	mov	r17,r4
   13aa0:	883fb21e 	bne	r17,zero,1396c <__call_exitprocs+0x74>
   13aa4:	003fc006 	br	139a8 <__call_exitprocs+0xb0>

00013aa8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   13aa8:	defffd04 	addi	sp,sp,-12
   13aac:	df000215 	stw	fp,8(sp)
   13ab0:	df000204 	addi	fp,sp,8
   13ab4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   13ab8:	e0bfff17 	ldw	r2,-4(fp)
   13abc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13ac0:	e0bffe17 	ldw	r2,-8(fp)
   13ac4:	1005003a 	cmpeq	r2,r2,zero
   13ac8:	1000021e 	bne	r2,zero,13ad4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   13acc:	002af070 	cmpltui	zero,zero,43969
   13ad0:	00000106 	br	13ad8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   13ad4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   13ad8:	e037883a 	mov	sp,fp
   13adc:	df000017 	ldw	fp,0(sp)
   13ae0:	dec00104 	addi	sp,sp,4
   13ae4:	f800283a 	ret

00013ae8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13ae8:	defffd04 	addi	sp,sp,-12
   13aec:	dfc00215 	stw	ra,8(sp)
   13af0:	df000115 	stw	fp,4(sp)
   13af4:	df000104 	addi	fp,sp,4
   13af8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   13afc:	e13fff17 	ldw	r4,-4(fp)
   13b00:	0013aa80 	call	13aa8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13b04:	003fff06 	br	13b04 <_exit+0x1c>
   13b08:	000138f4 	movhi	zero,1251
