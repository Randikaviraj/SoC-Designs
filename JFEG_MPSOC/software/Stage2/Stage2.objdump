
Stage2.elf:     file format elf32-littlenios2
Stage2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02aaac34

Program Header:
    LOAD off    0x00000000 vaddr 0x08001000 paddr 0x02aaa280 align 2**12
         filesz 0x000009b4 memsz 0x000009b4 flags r-x
    LOAD off    0x00000c34 vaddr 0x02aaac34 paddr 0x02aaac34 align 2**12
         filesz 0x000040a0 memsz 0x000040a0 flags r-x
    LOAD off    0x00004cd4 vaddr 0x02aaecd4 paddr 0x02ab0730 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x0000718c vaddr 0x02ab218c paddr 0x02ab218c align 2**12
         filesz 0x00000000 memsz 0x000002e4 flags rw-
    LOAD off    0x00006800 vaddr 0x08001800 paddr 0x08001800 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08001800  08001800  00006800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08001820  02aaaaa0  00000820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004068  02aaac34  02aaac34  00000c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  02aaec9c  02aaec9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  02aaecd4  02ab0730  00004cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e4  02ab218c  02ab218c  0000718c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006820  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000638  00000000  00000000  00006848  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000c0f  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000e518  00000000  00000000  00007a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fcb  00000000  00000000  00015fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007f15  00000000  00000000  00018f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c0c  00000000  00000000  00020e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000df1  00000000  00000000  00021a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000021a1  00000000  00000000  00022885  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00024a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00024a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00026cd4  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00026cd7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00026cdc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00026cdd  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00026cde  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00026ce9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00026cf4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  00026cff  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00026d02  2**0
                  CONTENTS, READONLY
 26 .jdi          000190dd  00000000  00000000  00026d36  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00164bd4  00000000  00000000  0003fe13  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08001800 l    d  .entry	00000000 .entry
08001820 l    d  .exceptions	00000000 .exceptions
02aaac34 l    d  .text	00000000 .text
02aaec9c l    d  .rodata	00000000 .rodata
02aaecd4 l    d  .rwdata	00000000 .rwdata
02ab218c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
02aaac6c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 dct.c
02ab06e4 l     O .rwdata	00000002 s3.1409
02ab06e6 l     O .rwdata	00000002 s2.1408
02ab06e8 l     O .rwdata	00000002 s1.1407
02ab06ea l     O .rwdata	00000002 c7.1406
02ab06ec l     O .rwdata	00000002 c6.1405
02ab06ee l     O .rwdata	00000002 c5.1404
02ab06f0 l     O .rwdata	00000002 c3.1403
02ab06f2 l     O .rwdata	00000002 c2.1402
02ab06f4 l     O .rwdata	00000002 c1.1401
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
02aaf0dc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
02aac2e4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02ab0708 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
02aaf4dc l     O .rwdata	00001060 jtag_uart_2
02aac548 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02aacce8 l     F .text	00000228 altera_avalon_jtag_uart_irq
02aacf10 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02aad58c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
02aad8dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02aad958 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02aada38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02aade5c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02aadf98 l     F .text	000000dc alt_file_locked
02aae1fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02aaea84 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
02aaec38 l     F .text	00000040 alt_sim_halt
02aac350 g     F .text	0000006c alt_main
02ab21e0 g     O .bss	00000100 alt_irq
02aac838 g     F .text	00000060 altera_avalon_fifo_write_almostfull
02ab0730 g       *ABS*	00000000 __flash_rwdata_start
02ab2470 g       *ABS*	00000000 __alt_heap_start
02aac3dc g     F .text	00000020 __malloc_unlock
02aac580 g     F .text	000000bc altera_avalon_fifo_init
02aac8f8 g     F .text	00000064 altera_avalon_fifo_write_fifo
08001800 g       *ABS*	00000000 __alt_mem_instruction_mem_2
00000000  w      *UND*	00000000 __errno
08001800 g     F .entry	0000001c __reset
02aacab8 g     F .text	00000028 altera_avalon_fifo_read_backpressure
02aaaaa0 g       *ABS*	00000000 __flash_exceptions_start
02ab219c g     O .bss	00000004 errno
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02ab21a4 g     O .bss	00000004 alt_argv
02ab86e4 g       *ABS*	00000000 _gp
02aac770 g     F .text	00000068 altera_avalon_fifo_clear_event
02ab0564 g     O .rwdata	00000180 alt_fd_list
02aae480 g     F .text	00000094 alt_find_dev
02aae83c g     F .text	000000a0 memcpy
02aadf20 g     F .text	00000078 alt_io_redirect
02aaec9c g       *ABS*	00000000 __DTOR_END__
02aad128 g     F .text	00000224 altera_avalon_jtag_uart_read
02aab660 g     F .text	00000014 malloc
02aae6ec g     F .text	00000090 alt_icache_flush
02ab2190 g     O .bss	00000004 __malloc_top_pad
02aabdb4 g     F .text	00000070 _sbrk_r
02ab071c g     O .rwdata	00000004 alt_max_fd
02ab2194 g     O .bss	00000004 __malloc_max_sbrked_mem
02ab0704 g     O .rwdata	00000004 _global_impure_ptr
02ab2470 g       *ABS*	00000000 __bss_end
02aadd64 g     F .text	000000f8 alt_iic_isr_register
02aae354 g     F .text	0000010c alt_tick
02aadd1c g     F .text	00000048 alt_ic_irq_enabled
02aae2bc g     F .text	00000098 alt_alarm_stop
02ab21ac g     O .bss	00000004 alt_irq_active
080018ec g     F .exceptions	000000c8 alt_irq_handler
02ab053c g     O .rwdata	00000028 alt_dev_null
02aad93c g     F .text	0000001c alt_dcache_flush_all
02aac7d8 g     F .text	00000060 altera_avalon_fifo_write_ienable
02ab0730 g       *ABS*	00000000 __ram_rwdata_end
02aac6e0 g     F .text	0000002c altera_avalon_fifo_read_almostempty
02ab0714 g     O .rwdata	00000008 alt_dev_list
02aaecd4 g       *ABS*	00000000 __ram_rodata_end
02ab2470 g       *ABS*	00000000 end
02aacc28 g     F .text	000000c0 altera_avalon_jtag_uart_init
02aac70c g     F .text	0000003c altera_avalon_fifo_read_event
02aaec98 g       *ABS*	00000000 __CTOR_LIST__
03fffff0 g       *ABS*	00000000 __alt_stack_pointer
02aad5fc g     F .text	00000090 alt_avalon_timer_sc_init
02aad34c g     F .text	00000240 altera_avalon_jtag_uart_write
02aac9cc g     F .text	00000058 altera_avalon_fifo_read_fifo
02aabf50 g     F .text	00000314 _free_r
02aaea88 g     F .text	000001b0 __call_exitprocs
02ab06fc g     O .rwdata	00000004 __malloc_sbrk_base
02aaac34 g     F .text	0000003c _start
02ab21b0 g     O .bss	00000004 _alt_tick_rate
02ab21b4 g     O .bss	00000004 _alt_nticks
02aac4ec g     F .text	0000005c alt_sys_init
02aae950 g     F .text	00000134 __register_exitproc
02aacfc0 g     F .text	00000074 altera_avalon_jtag_uart_close
02aaecd4 g       *ABS*	00000000 __ram_rwdata_start
02aaec9c g       *ABS*	00000000 __ram_rodata_start
02ab21b8 g     O .bss	00000028 __malloc_current_mallinfo
02aacae0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02aae634 g     F .text	000000b8 alt_get_fd
02aae7c8 g     F .text	00000074 memcmp
02aacb90 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02ab2470 g       *ABS*	00000000 __alt_stack_base
02aacbd8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02aac63c g     F .text	0000003c altera_avalon_fifo_read_status
02aaecd4 g     O .rwdata	00000408 __malloc_av_
02aaca8c g     F .text	0000002c altera_avalon_fifo_read_other_info
02aae514 g     F .text	00000120 alt_find_file
02aad984 g     F .text	000000b4 alt_dev_llist_insert
02aac3bc g     F .text	00000020 __malloc_lock
02aac3fc g     F .text	000000bc sbrk
02ab218c g       *ABS*	00000000 __bss_start
02ab218c g     O .bss	00000004 data
02aab620 g     F .text	0000002c main
02ab21a8 g     O .bss	00000004 alt_envp
02ab2198 g     O .bss	00000004 __malloc_max_total_mem
02aacb38 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02aac748 g     F .text	00000028 altera_avalon_fifo_read_level
03fffff0 g       *ABS*	00000000 __alt_heap_limit
02ab22e0 g     O .bss	00000190 _atexit0
02aab674 g     F .text	00000740 _malloc_r
02ab0720 g     O .rwdata	00000004 alt_errno
02aabe24 g     F .text	0000012c _malloc_trim_r
02aaec9c g       *ABS*	00000000 __CTOR_END__
02aaec9c g       *ABS*	00000000 __flash_rodata_start
02aaec9c g       *ABS*	00000000 __DTOR_LIST__
02aaac70 g     F .text	000009b0 DCT
02aac4b8 g     F .text	00000034 alt_irq_init
02aae25c g     F .text	00000060 alt_release_fd
02aae77c g     F .text	00000014 atexit
02ab0700 g     O .rwdata	00000004 _impure_ptr
02ab21a0 g     O .bss	00000004 alt_argc
02aadafc g     F .text	00000064 _do_dtors
08001820 g       .exceptions	00000000 alt_irq_entry
02ab070c g     O .rwdata	00000008 alt_fs_list
08001820 g       *ABS*	00000000 __ram_exceptions_start
02aaca24 g     F .text	00000068 altera_avalon_fifo_write_other_info
02aadb90 g     F .text	00000050 alt_ic_isr_register
02ab0730 g       *ABS*	00000000 _edata
02ab2470 g       *ABS*	00000000 _end
080019b4 g       *ABS*	00000000 __ram_exceptions_end
02aad034 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02aadc7c g     F .text	000000a0 alt_ic_irq_disable
02ab06f8 g     O .rwdata	00000004 __malloc_trim_threshold
02aae460 g     F .text	00000020 altera_nios2_qsys_irq_init
02aae790 g     F .text	00000038 exit
02aac678 g     F .text	0000003c altera_avalon_fifo_read_ienable
03fffff0 g       *ABS*	00000000 __alt_data_end
08001820 g     F .exceptions	00000000 alt_exception
02aaec78 g     F .text	00000020 _exit
02aad68c g     F .text	00000154 alt_alarm_start
02aac6b4 g     F .text	0000002c altera_avalon_fifo_read_almostfull
02aae8dc g     F .text	00000074 strlen
02aae074 g     F .text	00000188 open
02aac95c g     F .text	00000070 altera_avalon_read_fifo
02aadb60 g     F .text	00000030 alt_icache_flush_all
02ab0724 g     O .rwdata	00000004 alt_priority_mask
02aadbe0 g     F .text	0000009c alt_ic_irq_enable
02aac898 g     F .text	00000060 altera_avalon_fifo_write_almostempty
02ab0728 g     O .rwdata	00000008 alt_alarm_list
02aada98 g     F .text	00000064 _do_ctors
02aad7e0 g     F .text	000000fc close
02aac264 g     F .text	00000080 alt_load
02aab64c g     F .text	00000014 free



Disassembly of section .entry:

08001800 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8001800:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8001804:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8001808:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800180c:	00bffd16 	blt	zero,r2,8001804 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8001810:	0040aab4 	movhi	at,682
    ori r1, r1, %lo(_start)
 8001814:	086b0d14 	ori	at,at,44084
    jmp r1
 8001818:	0800683a 	jmp	at
 800181c:	00000000 	call	0 <__alt_mem_sdram_controller>

Disassembly of section .exceptions:

08001820 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8001820:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8001824:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8001828:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800182c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8001830:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8001834:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8001838:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800183c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8001840:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8001844:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8001848:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800184c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8001850:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8001854:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8001858:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800185c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8001860:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8001864:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8001868:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800186c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8001870:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8001874:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8001878:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800187c:	10000326 	beq	r2,zero,800188c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8001880:	20000226 	beq	r4,zero,800188c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8001884:	80018ec0 	call	80018ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8001888:	00000306 	br	8001898 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800188c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8001890:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8001894:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8001898:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800189c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80018a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80018a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80018a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80018ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80018b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80018b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80018b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80018bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80018c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80018c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80018c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80018cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80018d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80018d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80018d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80018dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80018e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80018e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80018e8:	ef80083a 	eret

080018ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80018ec:	defff904 	addi	sp,sp,-28
 80018f0:	dfc00615 	stw	ra,24(sp)
 80018f4:	df000515 	stw	fp,20(sp)
 80018f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80018fc:	0005313a 	rdctl	r2,ipending
 8001900:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8001904:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8001908:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800190c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8001910:	00800044 	movi	r2,1
 8001914:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8001918:	e0ffff17 	ldw	r3,-4(fp)
 800191c:	e0bffe17 	ldw	r2,-8(fp)
 8001920:	1884703a 	and	r2,r3,r2
 8001924:	1005003a 	cmpeq	r2,r2,zero
 8001928:	1000161e 	bne	r2,zero,8001984 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800192c:	e0bffd17 	ldw	r2,-12(fp)
 8001930:	00c0aaf4 	movhi	r3,683
 8001934:	18c87804 	addi	r3,r3,8672
 8001938:	100490fa 	slli	r2,r2,3
 800193c:	10c5883a 	add	r2,r2,r3
 8001940:	11400017 	ldw	r5,0(r2)
 8001944:	e0bffd17 	ldw	r2,-12(fp)
 8001948:	00c0aaf4 	movhi	r3,683
 800194c:	18c87804 	addi	r3,r3,8672
 8001950:	100490fa 	slli	r2,r2,3
 8001954:	10c5883a 	add	r2,r2,r3
 8001958:	10800104 	addi	r2,r2,4
 800195c:	11000017 	ldw	r4,0(r2)
 8001960:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8001964:	0005313a 	rdctl	r2,ipending
 8001968:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800196c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8001970:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8001974:	e0bfff17 	ldw	r2,-4(fp)
 8001978:	1004c03a 	cmpne	r2,r2,zero
 800197c:	103fe31e 	bne	r2,zero,800190c <alt_irq_handler+0x20>
 8001980:	00000706 	br	80019a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8001984:	e0bffe17 	ldw	r2,-8(fp)
 8001988:	1085883a 	add	r2,r2,r2
 800198c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8001990:	e0bffd17 	ldw	r2,-12(fp)
 8001994:	10800044 	addi	r2,r2,1
 8001998:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800199c:	003fde06 	br	8001918 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80019a0:	e037883a 	mov	sp,fp
 80019a4:	dfc00117 	ldw	ra,4(sp)
 80019a8:	df000017 	ldw	fp,0(sp)
 80019ac:	dec00204 	addi	sp,sp,8
 80019b0:	f800283a 	ret

Disassembly of section .text:

02aaac34 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2aaac34:	06c0fff4 	movhi	sp,1023
    ori sp, sp, %lo(__alt_stack_pointer)
 2aaac38:	defffc14 	ori	sp,sp,65520

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 2aaac3c:	0680aaf4 	movhi	gp,683
    ori gp, gp, %lo(_gp)
 2aaac40:	d6a1b914 	ori	gp,gp,34532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2aaac44:	0080aaf4 	movhi	r2,683
    ori r2, r2, %lo(__bss_start)
 2aaac48:	10886314 	ori	r2,r2,8588

    movhi r3, %hi(__bss_end)
 2aaac4c:	00c0aaf4 	movhi	r3,683
    ori r3, r3, %lo(__bss_end)
 2aaac50:	18c91c14 	ori	r3,r3,9328

    beq r2, r3, 1f
 2aaac54:	10c00326 	beq	r2,r3,2aaac64 <_start+0x30>

0:
    stw zero, (r2)
 2aaac58:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2aaac5c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2aaac60:	10fffd36 	bltu	r2,r3,2aaac58 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2aaac64:	2aac2640 	call	2aac264 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2aaac68:	2aac3500 	call	2aac350 <alt_main>

02aaac6c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2aaac6c:	003fff06 	br	2aaac6c <alt_after_alt_main>

02aaac70 <DCT>:

INT16 *data;
//
/* DCT for One block(8x8) */
void DCT (void)
{
 2aaac70:	defff304 	addi	sp,sp,-52
 2aaac74:	dfc00c15 	stw	ra,48(sp)
 2aaac78:	df000b15 	stw	fp,44(sp)
 2aaac7c:	dc000a15 	stw	r16,40(sp)
 2aaac80:	df000a04 	addi	fp,sp,40
	static const UINT16 s1=3;
	static const UINT16 s2=10;
	static const UINT16 s3=13;

	/* read back from queue */
	for (i=0; i<64; i++)
 2aaac84:	e03fff0d 	sth	zero,-4(fp)
 2aaac88:	00000c06 	br	2aaacbc <DCT+0x4c>
	{
					//xt_iss_profile_disable();
		//data [i] = (INT16)RECV();
		data [i] = (INT16)altera_avalon_fifo_read_fifo(0x386c,0x3800);
 2aaac8c:	e0bfff0b 	ldhu	r2,-4(fp)
 2aaac90:	1085883a 	add	r2,r2,r2
 2aaac94:	1007883a 	mov	r3,r2
 2aaac98:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaac9c:	18a1883a 	add	r16,r3,r2
 2aaaca0:	010e1b04 	movi	r4,14444
 2aaaca4:	014e0004 	movi	r5,14336
 2aaaca8:	2aac9cc0 	call	2aac9cc <altera_avalon_fifo_read_fifo>
 2aaacac:	8080000d 	sth	r2,0(r16)
	static const UINT16 s1=3;
	static const UINT16 s2=10;
	static const UINT16 s3=13;

	/* read back from queue */
	for (i=0; i<64; i++)
 2aaacb0:	e0bfff0b 	ldhu	r2,-4(fp)
 2aaacb4:	10800044 	addi	r2,r2,1
 2aaacb8:	e0bfff0d 	sth	r2,-4(fp)
 2aaacbc:	e0bfff0b 	ldhu	r2,-4(fp)
 2aaacc0:	10801030 	cmpltui	r2,r2,64
 2aaacc4:	103ff11e 	bne	r2,zero,2aaac8c <DCT+0x1c>
		//data [i] = (INT16)RECV();
		data [i] = (INT16)altera_avalon_fifo_read_fifo(0x386c,0x3800);
					//xt_iss_profile_enable();
	}

	for (i=8; i>0; i--)
 2aaacc8:	00800204 	movi	r2,8
 2aaaccc:	e0bfff0d 	sth	r2,-4(fp)
 2aaacd0:	00011306 	br	2aab120 <DCT+0x4b0>
	{
		x8 = data [0] + data [7];
 2aaacd4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaacd8:	1080000b 	ldhu	r2,0(r2)
 2aaacdc:	10ffffcc 	andi	r3,r2,65535
 2aaace0:	18e0001c 	xori	r3,r3,32768
 2aaace4:	18e00004 	addi	r3,r3,-32768
 2aaace8:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaacec:	10800384 	addi	r2,r2,14
 2aaacf0:	1080000b 	ldhu	r2,0(r2)
 2aaacf4:	10bfffcc 	andi	r2,r2,65535
 2aaacf8:	10a0001c 	xori	r2,r2,32768
 2aaacfc:	10a00004 	addi	r2,r2,-32768
 2aaad00:	1885883a 	add	r2,r3,r2
 2aaad04:	e0bff615 	stw	r2,-40(fp)
		x0 = data [0] - data [7];
 2aaad08:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaad0c:	1080000b 	ldhu	r2,0(r2)
 2aaad10:	10ffffcc 	andi	r3,r2,65535
 2aaad14:	18e0001c 	xori	r3,r3,32768
 2aaad18:	18e00004 	addi	r3,r3,-32768
 2aaad1c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaad20:	10800384 	addi	r2,r2,14
 2aaad24:	1080000b 	ldhu	r2,0(r2)
 2aaad28:	10bfffcc 	andi	r2,r2,65535
 2aaad2c:	10a0001c 	xori	r2,r2,32768
 2aaad30:	10a00004 	addi	r2,r2,-32768
 2aaad34:	1885c83a 	sub	r2,r3,r2
 2aaad38:	e0bffe15 	stw	r2,-8(fp)

		x7 = data [1] + data [6];
 2aaad3c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaad40:	10800084 	addi	r2,r2,2
 2aaad44:	1080000b 	ldhu	r2,0(r2)
 2aaad48:	10ffffcc 	andi	r3,r2,65535
 2aaad4c:	18e0001c 	xori	r3,r3,32768
 2aaad50:	18e00004 	addi	r3,r3,-32768
 2aaad54:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaad58:	10800304 	addi	r2,r2,12
 2aaad5c:	1080000b 	ldhu	r2,0(r2)
 2aaad60:	10bfffcc 	andi	r2,r2,65535
 2aaad64:	10a0001c 	xori	r2,r2,32768
 2aaad68:	10a00004 	addi	r2,r2,-32768
 2aaad6c:	1885883a 	add	r2,r3,r2
 2aaad70:	e0bff715 	stw	r2,-36(fp)
		x1 = data [1] - data [6];
 2aaad74:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaad78:	10800084 	addi	r2,r2,2
 2aaad7c:	1080000b 	ldhu	r2,0(r2)
 2aaad80:	10ffffcc 	andi	r3,r2,65535
 2aaad84:	18e0001c 	xori	r3,r3,32768
 2aaad88:	18e00004 	addi	r3,r3,-32768
 2aaad8c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaad90:	10800304 	addi	r2,r2,12
 2aaad94:	1080000b 	ldhu	r2,0(r2)
 2aaad98:	10bfffcc 	andi	r2,r2,65535
 2aaad9c:	10a0001c 	xori	r2,r2,32768
 2aaada0:	10a00004 	addi	r2,r2,-32768
 2aaada4:	1885c83a 	sub	r2,r3,r2
 2aaada8:	e0bffd15 	stw	r2,-12(fp)

		x6 = data [2] + data [5];
 2aaadac:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaadb0:	10800104 	addi	r2,r2,4
 2aaadb4:	1080000b 	ldhu	r2,0(r2)
 2aaadb8:	10ffffcc 	andi	r3,r2,65535
 2aaadbc:	18e0001c 	xori	r3,r3,32768
 2aaadc0:	18e00004 	addi	r3,r3,-32768
 2aaadc4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaadc8:	10800284 	addi	r2,r2,10
 2aaadcc:	1080000b 	ldhu	r2,0(r2)
 2aaadd0:	10bfffcc 	andi	r2,r2,65535
 2aaadd4:	10a0001c 	xori	r2,r2,32768
 2aaadd8:	10a00004 	addi	r2,r2,-32768
 2aaaddc:	1885883a 	add	r2,r3,r2
 2aaade0:	e0bff815 	stw	r2,-32(fp)
		x2 = data [2] - data [5];
 2aaade4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaade8:	10800104 	addi	r2,r2,4
 2aaadec:	1080000b 	ldhu	r2,0(r2)
 2aaadf0:	10ffffcc 	andi	r3,r2,65535
 2aaadf4:	18e0001c 	xori	r3,r3,32768
 2aaadf8:	18e00004 	addi	r3,r3,-32768
 2aaadfc:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaae00:	10800284 	addi	r2,r2,10
 2aaae04:	1080000b 	ldhu	r2,0(r2)
 2aaae08:	10bfffcc 	andi	r2,r2,65535
 2aaae0c:	10a0001c 	xori	r2,r2,32768
 2aaae10:	10a00004 	addi	r2,r2,-32768
 2aaae14:	1885c83a 	sub	r2,r3,r2
 2aaae18:	e0bffc15 	stw	r2,-16(fp)

		x5 = data [3] + data [4];
 2aaae1c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaae20:	10800184 	addi	r2,r2,6
 2aaae24:	1080000b 	ldhu	r2,0(r2)
 2aaae28:	10ffffcc 	andi	r3,r2,65535
 2aaae2c:	18e0001c 	xori	r3,r3,32768
 2aaae30:	18e00004 	addi	r3,r3,-32768
 2aaae34:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaae38:	10800204 	addi	r2,r2,8
 2aaae3c:	1080000b 	ldhu	r2,0(r2)
 2aaae40:	10bfffcc 	andi	r2,r2,65535
 2aaae44:	10a0001c 	xori	r2,r2,32768
 2aaae48:	10a00004 	addi	r2,r2,-32768
 2aaae4c:	1885883a 	add	r2,r3,r2
 2aaae50:	e0bff915 	stw	r2,-28(fp)
		x3 = data [3] - data [4];
 2aaae54:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaae58:	10800184 	addi	r2,r2,6
 2aaae5c:	1080000b 	ldhu	r2,0(r2)
 2aaae60:	10ffffcc 	andi	r3,r2,65535
 2aaae64:	18e0001c 	xori	r3,r3,32768
 2aaae68:	18e00004 	addi	r3,r3,-32768
 2aaae6c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaae70:	10800204 	addi	r2,r2,8
 2aaae74:	1080000b 	ldhu	r2,0(r2)
 2aaae78:	10bfffcc 	andi	r2,r2,65535
 2aaae7c:	10a0001c 	xori	r2,r2,32768
 2aaae80:	10a00004 	addi	r2,r2,-32768
 2aaae84:	1885c83a 	sub	r2,r3,r2
 2aaae88:	e0bffb15 	stw	r2,-20(fp)

		x4 = x8 + x5;
 2aaae8c:	e0fff617 	ldw	r3,-40(fp)
 2aaae90:	e0bff917 	ldw	r2,-28(fp)
 2aaae94:	1885883a 	add	r2,r3,r2
 2aaae98:	e0bffa15 	stw	r2,-24(fp)
		x8 -= x5;
 2aaae9c:	e0fff617 	ldw	r3,-40(fp)
 2aaaea0:	e0bff917 	ldw	r2,-28(fp)
 2aaaea4:	1885c83a 	sub	r2,r3,r2
 2aaaea8:	e0bff615 	stw	r2,-40(fp)

		x5 = x7 + x6;
 2aaaeac:	e0fff717 	ldw	r3,-36(fp)
 2aaaeb0:	e0bff817 	ldw	r2,-32(fp)
 2aaaeb4:	1885883a 	add	r2,r3,r2
 2aaaeb8:	e0bff915 	stw	r2,-28(fp)
		x7 -= x6;
 2aaaebc:	e0fff717 	ldw	r3,-36(fp)
 2aaaec0:	e0bff817 	ldw	r2,-32(fp)
 2aaaec4:	1885c83a 	sub	r2,r3,r2
 2aaaec8:	e0bff715 	stw	r2,-36(fp)

		data [0] = (INT16) (x4 + x5);
 2aaaecc:	d126aa17 	ldw	r4,-25944(gp)
 2aaaed0:	e0bffa17 	ldw	r2,-24(fp)
 2aaaed4:	1007883a 	mov	r3,r2
 2aaaed8:	e0bff917 	ldw	r2,-28(fp)
 2aaaedc:	1885883a 	add	r2,r3,r2
 2aaaee0:	2080000d 	sth	r2,0(r4)
		data [4] = (INT16) (x4 - x5);
 2aaaee4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaaee8:	11000204 	addi	r4,r2,8
 2aaaeec:	e0bffa17 	ldw	r2,-24(fp)
 2aaaef0:	1007883a 	mov	r3,r2
 2aaaef4:	e0bff917 	ldw	r2,-28(fp)
 2aaaef8:	1885c83a 	sub	r2,r3,r2
 2aaaefc:	2080000d 	sth	r2,0(r4)

		data [2] = (INT16) ((x8*c2 + x7*c6) >> s2);
 2aaaf00:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaaf04:	11400104 	addi	r5,r2,4
 2aaaf08:	d0a0038b 	ldhu	r2,-32754(gp)
 2aaaf0c:	10ffffcc 	andi	r3,r2,65535
 2aaaf10:	e0bff617 	ldw	r2,-40(fp)
 2aaaf14:	1889383a 	mul	r4,r3,r2
 2aaaf18:	d0a0020b 	ldhu	r2,-32760(gp)
 2aaaf1c:	10ffffcc 	andi	r3,r2,65535
 2aaaf20:	e0bff717 	ldw	r2,-36(fp)
 2aaaf24:	1885383a 	mul	r2,r3,r2
 2aaaf28:	2087883a 	add	r3,r4,r2
 2aaaf2c:	d0a0008b 	ldhu	r2,-32766(gp)
 2aaaf30:	10bfffcc 	andi	r2,r2,65535
 2aaaf34:	1885d83a 	sra	r2,r3,r2
 2aaaf38:	2880000d 	sth	r2,0(r5)
		data [6] = (INT16) ((x8*c6 - x7*c2) >> s2);
 2aaaf3c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaaf40:	11400304 	addi	r5,r2,12
 2aaaf44:	d0a0020b 	ldhu	r2,-32760(gp)
 2aaaf48:	10ffffcc 	andi	r3,r2,65535
 2aaaf4c:	e0bff617 	ldw	r2,-40(fp)
 2aaaf50:	1889383a 	mul	r4,r3,r2
 2aaaf54:	d0a0038b 	ldhu	r2,-32754(gp)
 2aaaf58:	10ffffcc 	andi	r3,r2,65535
 2aaaf5c:	e0bff717 	ldw	r2,-36(fp)
 2aaaf60:	1885383a 	mul	r2,r3,r2
 2aaaf64:	2087c83a 	sub	r3,r4,r2
 2aaaf68:	d0a0008b 	ldhu	r2,-32766(gp)
 2aaaf6c:	10bfffcc 	andi	r2,r2,65535
 2aaaf70:	1885d83a 	sra	r2,r3,r2
 2aaaf74:	2880000d 	sth	r2,0(r5)

		data [7] = (INT16) ((x0*c7 - x1*c5 + x2*c3 - x3*c1) >> s2);
 2aaaf78:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaaf7c:	11400384 	addi	r5,r2,14
 2aaaf80:	d0a0018b 	ldhu	r2,-32762(gp)
 2aaaf84:	10ffffcc 	andi	r3,r2,65535
 2aaaf88:	e0bffe17 	ldw	r2,-8(fp)
 2aaaf8c:	1889383a 	mul	r4,r3,r2
 2aaaf90:	d0a0028b 	ldhu	r2,-32758(gp)
 2aaaf94:	10ffffcc 	andi	r3,r2,65535
 2aaaf98:	e0bffd17 	ldw	r2,-12(fp)
 2aaaf9c:	1885383a 	mul	r2,r3,r2
 2aaafa0:	2089c83a 	sub	r4,r4,r2
 2aaafa4:	d0a0030b 	ldhu	r2,-32756(gp)
 2aaafa8:	10ffffcc 	andi	r3,r2,65535
 2aaafac:	e0bffc17 	ldw	r2,-16(fp)
 2aaafb0:	1885383a 	mul	r2,r3,r2
 2aaafb4:	2089883a 	add	r4,r4,r2
 2aaafb8:	d0a0040b 	ldhu	r2,-32752(gp)
 2aaafbc:	10ffffcc 	andi	r3,r2,65535
 2aaafc0:	e0bffb17 	ldw	r2,-20(fp)
 2aaafc4:	1885383a 	mul	r2,r3,r2
 2aaafc8:	2087c83a 	sub	r3,r4,r2
 2aaafcc:	d0a0008b 	ldhu	r2,-32766(gp)
 2aaafd0:	10bfffcc 	andi	r2,r2,65535
 2aaafd4:	1885d83a 	sra	r2,r3,r2
 2aaafd8:	2880000d 	sth	r2,0(r5)
		data [5] = (INT16) ((x0*c5 - x1*c1 + x2*c7 + x3*c3) >> s2);
 2aaafdc:	d0a6aa17 	ldw	r2,-25944(gp)
 2aaafe0:	11800284 	addi	r6,r2,10
 2aaafe4:	d0a0028b 	ldhu	r2,-32758(gp)
 2aaafe8:	10ffffcc 	andi	r3,r2,65535
 2aaafec:	e0bffe17 	ldw	r2,-8(fp)
 2aaaff0:	1889383a 	mul	r4,r3,r2
 2aaaff4:	d0a0040b 	ldhu	r2,-32752(gp)
 2aaaff8:	10ffffcc 	andi	r3,r2,65535
 2aaaffc:	e0bffd17 	ldw	r2,-12(fp)
 2aab000:	1885383a 	mul	r2,r3,r2
 2aab004:	208bc83a 	sub	r5,r4,r2
 2aab008:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab00c:	10ffffcc 	andi	r3,r2,65535
 2aab010:	e0bffb17 	ldw	r2,-20(fp)
 2aab014:	1889383a 	mul	r4,r3,r2
 2aab018:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab01c:	10ffffcc 	andi	r3,r2,65535
 2aab020:	e0bffc17 	ldw	r2,-16(fp)
 2aab024:	1885383a 	mul	r2,r3,r2
 2aab028:	2085883a 	add	r2,r4,r2
 2aab02c:	2887883a 	add	r3,r5,r2
 2aab030:	d0a0008b 	ldhu	r2,-32766(gp)
 2aab034:	10bfffcc 	andi	r2,r2,65535
 2aab038:	1885d83a 	sra	r2,r3,r2
 2aab03c:	3080000d 	sth	r2,0(r6)
		data [3] = (INT16) ((x0*c3 - x1*c7 - x2*c1 - x3*c5) >> s2);
 2aab040:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab044:	11400184 	addi	r5,r2,6
 2aab048:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab04c:	10ffffcc 	andi	r3,r2,65535
 2aab050:	e0bffe17 	ldw	r2,-8(fp)
 2aab054:	1889383a 	mul	r4,r3,r2
 2aab058:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab05c:	10ffffcc 	andi	r3,r2,65535
 2aab060:	e0bffd17 	ldw	r2,-12(fp)
 2aab064:	1885383a 	mul	r2,r3,r2
 2aab068:	2089c83a 	sub	r4,r4,r2
 2aab06c:	d0a0040b 	ldhu	r2,-32752(gp)
 2aab070:	10ffffcc 	andi	r3,r2,65535
 2aab074:	e0bffc17 	ldw	r2,-16(fp)
 2aab078:	1885383a 	mul	r2,r3,r2
 2aab07c:	2089c83a 	sub	r4,r4,r2
 2aab080:	d0a0028b 	ldhu	r2,-32758(gp)
 2aab084:	10ffffcc 	andi	r3,r2,65535
 2aab088:	e0bffb17 	ldw	r2,-20(fp)
 2aab08c:	1885383a 	mul	r2,r3,r2
 2aab090:	2087c83a 	sub	r3,r4,r2
 2aab094:	d0a0008b 	ldhu	r2,-32766(gp)
 2aab098:	10bfffcc 	andi	r2,r2,65535
 2aab09c:	1885d83a 	sra	r2,r3,r2
 2aab0a0:	2880000d 	sth	r2,0(r5)
		data [1] = (INT16) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s2);
 2aab0a4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab0a8:	11800084 	addi	r6,r2,2
 2aab0ac:	d0a0040b 	ldhu	r2,-32752(gp)
 2aab0b0:	10ffffcc 	andi	r3,r2,65535
 2aab0b4:	e0bffe17 	ldw	r2,-8(fp)
 2aab0b8:	1889383a 	mul	r4,r3,r2
 2aab0bc:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab0c0:	10ffffcc 	andi	r3,r2,65535
 2aab0c4:	e0bffd17 	ldw	r2,-12(fp)
 2aab0c8:	1885383a 	mul	r2,r3,r2
 2aab0cc:	208b883a 	add	r5,r4,r2
 2aab0d0:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab0d4:	10ffffcc 	andi	r3,r2,65535
 2aab0d8:	e0bffb17 	ldw	r2,-20(fp)
 2aab0dc:	1889383a 	mul	r4,r3,r2
 2aab0e0:	d0a0028b 	ldhu	r2,-32758(gp)
 2aab0e4:	10ffffcc 	andi	r3,r2,65535
 2aab0e8:	e0bffc17 	ldw	r2,-16(fp)
 2aab0ec:	1885383a 	mul	r2,r3,r2
 2aab0f0:	2085883a 	add	r2,r4,r2
 2aab0f4:	2887883a 	add	r3,r5,r2
 2aab0f8:	d0a0008b 	ldhu	r2,-32766(gp)
 2aab0fc:	10bfffcc 	andi	r2,r2,65535
 2aab100:	1885d83a 	sra	r2,r3,r2
 2aab104:	3080000d 	sth	r2,0(r6)

		data += 8;
 2aab108:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab10c:	10800404 	addi	r2,r2,16
 2aab110:	d0a6aa15 	stw	r2,-25944(gp)
		//data [i] = (INT16)RECV();
		data [i] = (INT16)altera_avalon_fifo_read_fifo(0x386c,0x3800);
					//xt_iss_profile_enable();
	}

	for (i=8; i>0; i--)
 2aab114:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab118:	10bfffc4 	addi	r2,r2,-1
 2aab11c:	e0bfff0d 	sth	r2,-4(fp)
 2aab120:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab124:	1004c03a 	cmpne	r2,r2,zero
 2aab128:	103eea1e 	bne	r2,zero,2aaacd4 <DCT+0x64>
		data [1] = (INT16) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s2);

		data += 8;
	}

	data -= 64;
 2aab12c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab130:	10bfe004 	addi	r2,r2,-128
 2aab134:	d0a6aa15 	stw	r2,-25944(gp)

	for (i=8; i>0; i--)
 2aab138:	00800204 	movi	r2,8
 2aab13c:	e0bfff0d 	sth	r2,-4(fp)
 2aab140:	00011706 	br	2aab5a0 <DCT+0x930>
	{
		x8 = data [0] + data [56];
 2aab144:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab148:	1080000b 	ldhu	r2,0(r2)
 2aab14c:	10ffffcc 	andi	r3,r2,65535
 2aab150:	18e0001c 	xori	r3,r3,32768
 2aab154:	18e00004 	addi	r3,r3,-32768
 2aab158:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab15c:	10801c04 	addi	r2,r2,112
 2aab160:	1080000b 	ldhu	r2,0(r2)
 2aab164:	10bfffcc 	andi	r2,r2,65535
 2aab168:	10a0001c 	xori	r2,r2,32768
 2aab16c:	10a00004 	addi	r2,r2,-32768
 2aab170:	1885883a 	add	r2,r3,r2
 2aab174:	e0bff615 	stw	r2,-40(fp)
		x0 = data [0] - data [56];
 2aab178:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab17c:	1080000b 	ldhu	r2,0(r2)
 2aab180:	10ffffcc 	andi	r3,r2,65535
 2aab184:	18e0001c 	xori	r3,r3,32768
 2aab188:	18e00004 	addi	r3,r3,-32768
 2aab18c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab190:	10801c04 	addi	r2,r2,112
 2aab194:	1080000b 	ldhu	r2,0(r2)
 2aab198:	10bfffcc 	andi	r2,r2,65535
 2aab19c:	10a0001c 	xori	r2,r2,32768
 2aab1a0:	10a00004 	addi	r2,r2,-32768
 2aab1a4:	1885c83a 	sub	r2,r3,r2
 2aab1a8:	e0bffe15 	stw	r2,-8(fp)

		x7 = data [8] + data [48];
 2aab1ac:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab1b0:	10800404 	addi	r2,r2,16
 2aab1b4:	1080000b 	ldhu	r2,0(r2)
 2aab1b8:	10ffffcc 	andi	r3,r2,65535
 2aab1bc:	18e0001c 	xori	r3,r3,32768
 2aab1c0:	18e00004 	addi	r3,r3,-32768
 2aab1c4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab1c8:	10801804 	addi	r2,r2,96
 2aab1cc:	1080000b 	ldhu	r2,0(r2)
 2aab1d0:	10bfffcc 	andi	r2,r2,65535
 2aab1d4:	10a0001c 	xori	r2,r2,32768
 2aab1d8:	10a00004 	addi	r2,r2,-32768
 2aab1dc:	1885883a 	add	r2,r3,r2
 2aab1e0:	e0bff715 	stw	r2,-36(fp)
		x1 = data [8] - data [48];
 2aab1e4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab1e8:	10800404 	addi	r2,r2,16
 2aab1ec:	1080000b 	ldhu	r2,0(r2)
 2aab1f0:	10ffffcc 	andi	r3,r2,65535
 2aab1f4:	18e0001c 	xori	r3,r3,32768
 2aab1f8:	18e00004 	addi	r3,r3,-32768
 2aab1fc:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab200:	10801804 	addi	r2,r2,96
 2aab204:	1080000b 	ldhu	r2,0(r2)
 2aab208:	10bfffcc 	andi	r2,r2,65535
 2aab20c:	10a0001c 	xori	r2,r2,32768
 2aab210:	10a00004 	addi	r2,r2,-32768
 2aab214:	1885c83a 	sub	r2,r3,r2
 2aab218:	e0bffd15 	stw	r2,-12(fp)

		x6 = data [16] + data [40];
 2aab21c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab220:	10800804 	addi	r2,r2,32
 2aab224:	1080000b 	ldhu	r2,0(r2)
 2aab228:	10ffffcc 	andi	r3,r2,65535
 2aab22c:	18e0001c 	xori	r3,r3,32768
 2aab230:	18e00004 	addi	r3,r3,-32768
 2aab234:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab238:	10801404 	addi	r2,r2,80
 2aab23c:	1080000b 	ldhu	r2,0(r2)
 2aab240:	10bfffcc 	andi	r2,r2,65535
 2aab244:	10a0001c 	xori	r2,r2,32768
 2aab248:	10a00004 	addi	r2,r2,-32768
 2aab24c:	1885883a 	add	r2,r3,r2
 2aab250:	e0bff815 	stw	r2,-32(fp)
		x2 = data [16] - data [40];
 2aab254:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab258:	10800804 	addi	r2,r2,32
 2aab25c:	1080000b 	ldhu	r2,0(r2)
 2aab260:	10ffffcc 	andi	r3,r2,65535
 2aab264:	18e0001c 	xori	r3,r3,32768
 2aab268:	18e00004 	addi	r3,r3,-32768
 2aab26c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab270:	10801404 	addi	r2,r2,80
 2aab274:	1080000b 	ldhu	r2,0(r2)
 2aab278:	10bfffcc 	andi	r2,r2,65535
 2aab27c:	10a0001c 	xori	r2,r2,32768
 2aab280:	10a00004 	addi	r2,r2,-32768
 2aab284:	1885c83a 	sub	r2,r3,r2
 2aab288:	e0bffc15 	stw	r2,-16(fp)

		x5 = data [24] + data [32];
 2aab28c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab290:	10800c04 	addi	r2,r2,48
 2aab294:	1080000b 	ldhu	r2,0(r2)
 2aab298:	10ffffcc 	andi	r3,r2,65535
 2aab29c:	18e0001c 	xori	r3,r3,32768
 2aab2a0:	18e00004 	addi	r3,r3,-32768
 2aab2a4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab2a8:	10801004 	addi	r2,r2,64
 2aab2ac:	1080000b 	ldhu	r2,0(r2)
 2aab2b0:	10bfffcc 	andi	r2,r2,65535
 2aab2b4:	10a0001c 	xori	r2,r2,32768
 2aab2b8:	10a00004 	addi	r2,r2,-32768
 2aab2bc:	1885883a 	add	r2,r3,r2
 2aab2c0:	e0bff915 	stw	r2,-28(fp)
		x3 = data [24] - data [32];
 2aab2c4:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab2c8:	10800c04 	addi	r2,r2,48
 2aab2cc:	1080000b 	ldhu	r2,0(r2)
 2aab2d0:	10ffffcc 	andi	r3,r2,65535
 2aab2d4:	18e0001c 	xori	r3,r3,32768
 2aab2d8:	18e00004 	addi	r3,r3,-32768
 2aab2dc:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab2e0:	10801004 	addi	r2,r2,64
 2aab2e4:	1080000b 	ldhu	r2,0(r2)
 2aab2e8:	10bfffcc 	andi	r2,r2,65535
 2aab2ec:	10a0001c 	xori	r2,r2,32768
 2aab2f0:	10a00004 	addi	r2,r2,-32768
 2aab2f4:	1885c83a 	sub	r2,r3,r2
 2aab2f8:	e0bffb15 	stw	r2,-20(fp)

		x4 = x8 + x5;
 2aab2fc:	e0fff617 	ldw	r3,-40(fp)
 2aab300:	e0bff917 	ldw	r2,-28(fp)
 2aab304:	1885883a 	add	r2,r3,r2
 2aab308:	e0bffa15 	stw	r2,-24(fp)
		x8 -= x5;
 2aab30c:	e0fff617 	ldw	r3,-40(fp)
 2aab310:	e0bff917 	ldw	r2,-28(fp)
 2aab314:	1885c83a 	sub	r2,r3,r2
 2aab318:	e0bff615 	stw	r2,-40(fp)

		x5 = x7 + x6;
 2aab31c:	e0fff717 	ldw	r3,-36(fp)
 2aab320:	e0bff817 	ldw	r2,-32(fp)
 2aab324:	1885883a 	add	r2,r3,r2
 2aab328:	e0bff915 	stw	r2,-28(fp)
		x7 -= x6;
 2aab32c:	e0fff717 	ldw	r3,-36(fp)
 2aab330:	e0bff817 	ldw	r2,-32(fp)
 2aab334:	1885c83a 	sub	r2,r3,r2
 2aab338:	e0bff715 	stw	r2,-36(fp)

		data [0] = (INT16) ((x4 + x5) >> s1);
 2aab33c:	d126aa17 	ldw	r4,-25944(gp)
 2aab340:	e0fffa17 	ldw	r3,-24(fp)
 2aab344:	e0bff917 	ldw	r2,-28(fp)
 2aab348:	1887883a 	add	r3,r3,r2
 2aab34c:	d0a0010b 	ldhu	r2,-32764(gp)
 2aab350:	10bfffcc 	andi	r2,r2,65535
 2aab354:	1885d83a 	sra	r2,r3,r2
 2aab358:	2080000d 	sth	r2,0(r4)
		data [32] = (INT16) ((x4 - x5) >> s1);
 2aab35c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab360:	11001004 	addi	r4,r2,64
 2aab364:	e0fffa17 	ldw	r3,-24(fp)
 2aab368:	e0bff917 	ldw	r2,-28(fp)
 2aab36c:	1887c83a 	sub	r3,r3,r2
 2aab370:	d0a0010b 	ldhu	r2,-32764(gp)
 2aab374:	10bfffcc 	andi	r2,r2,65535
 2aab378:	1885d83a 	sra	r2,r3,r2
 2aab37c:	2080000d 	sth	r2,0(r4)

		data [16] = (INT16) ((x8*c2 + x7*c6) >> s3);
 2aab380:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab384:	11400804 	addi	r5,r2,32
 2aab388:	d0a0038b 	ldhu	r2,-32754(gp)
 2aab38c:	10ffffcc 	andi	r3,r2,65535
 2aab390:	e0bff617 	ldw	r2,-40(fp)
 2aab394:	1889383a 	mul	r4,r3,r2
 2aab398:	d0a0020b 	ldhu	r2,-32760(gp)
 2aab39c:	10ffffcc 	andi	r3,r2,65535
 2aab3a0:	e0bff717 	ldw	r2,-36(fp)
 2aab3a4:	1885383a 	mul	r2,r3,r2
 2aab3a8:	2087883a 	add	r3,r4,r2
 2aab3ac:	d0a0000b 	ldhu	r2,-32768(gp)
 2aab3b0:	10bfffcc 	andi	r2,r2,65535
 2aab3b4:	1885d83a 	sra	r2,r3,r2
 2aab3b8:	2880000d 	sth	r2,0(r5)
		data [48] = (INT16) ((x8*c6 - x7*c2) >> s3);
 2aab3bc:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab3c0:	11401804 	addi	r5,r2,96
 2aab3c4:	d0a0020b 	ldhu	r2,-32760(gp)
 2aab3c8:	10ffffcc 	andi	r3,r2,65535
 2aab3cc:	e0bff617 	ldw	r2,-40(fp)
 2aab3d0:	1889383a 	mul	r4,r3,r2
 2aab3d4:	d0a0038b 	ldhu	r2,-32754(gp)
 2aab3d8:	10ffffcc 	andi	r3,r2,65535
 2aab3dc:	e0bff717 	ldw	r2,-36(fp)
 2aab3e0:	1885383a 	mul	r2,r3,r2
 2aab3e4:	2087c83a 	sub	r3,r4,r2
 2aab3e8:	d0a0000b 	ldhu	r2,-32768(gp)
 2aab3ec:	10bfffcc 	andi	r2,r2,65535
 2aab3f0:	1885d83a 	sra	r2,r3,r2
 2aab3f4:	2880000d 	sth	r2,0(r5)

		data [56] = (INT16) ((x0*c7 - x1*c5 + x2*c3 - x3*c1) >> s3);
 2aab3f8:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab3fc:	11401c04 	addi	r5,r2,112
 2aab400:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab404:	10ffffcc 	andi	r3,r2,65535
 2aab408:	e0bffe17 	ldw	r2,-8(fp)
 2aab40c:	1889383a 	mul	r4,r3,r2
 2aab410:	d0a0028b 	ldhu	r2,-32758(gp)
 2aab414:	10ffffcc 	andi	r3,r2,65535
 2aab418:	e0bffd17 	ldw	r2,-12(fp)
 2aab41c:	1885383a 	mul	r2,r3,r2
 2aab420:	2089c83a 	sub	r4,r4,r2
 2aab424:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab428:	10ffffcc 	andi	r3,r2,65535
 2aab42c:	e0bffc17 	ldw	r2,-16(fp)
 2aab430:	1885383a 	mul	r2,r3,r2
 2aab434:	2089883a 	add	r4,r4,r2
 2aab438:	d0a0040b 	ldhu	r2,-32752(gp)
 2aab43c:	10ffffcc 	andi	r3,r2,65535
 2aab440:	e0bffb17 	ldw	r2,-20(fp)
 2aab444:	1885383a 	mul	r2,r3,r2
 2aab448:	2087c83a 	sub	r3,r4,r2
 2aab44c:	d0a0000b 	ldhu	r2,-32768(gp)
 2aab450:	10bfffcc 	andi	r2,r2,65535
 2aab454:	1885d83a 	sra	r2,r3,r2
 2aab458:	2880000d 	sth	r2,0(r5)
		data [40] = (INT16) ((x0*c5 - x1*c1 + x2*c7 + x3*c3) >> s3);
 2aab45c:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab460:	11801404 	addi	r6,r2,80
 2aab464:	d0a0028b 	ldhu	r2,-32758(gp)
 2aab468:	10ffffcc 	andi	r3,r2,65535
 2aab46c:	e0bffe17 	ldw	r2,-8(fp)
 2aab470:	1889383a 	mul	r4,r3,r2
 2aab474:	d0a0040b 	ldhu	r2,-32752(gp)
 2aab478:	10ffffcc 	andi	r3,r2,65535
 2aab47c:	e0bffd17 	ldw	r2,-12(fp)
 2aab480:	1885383a 	mul	r2,r3,r2
 2aab484:	208bc83a 	sub	r5,r4,r2
 2aab488:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab48c:	10ffffcc 	andi	r3,r2,65535
 2aab490:	e0bffb17 	ldw	r2,-20(fp)
 2aab494:	1889383a 	mul	r4,r3,r2
 2aab498:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab49c:	10ffffcc 	andi	r3,r2,65535
 2aab4a0:	e0bffc17 	ldw	r2,-16(fp)
 2aab4a4:	1885383a 	mul	r2,r3,r2
 2aab4a8:	2085883a 	add	r2,r4,r2
 2aab4ac:	2887883a 	add	r3,r5,r2
 2aab4b0:	d0a0000b 	ldhu	r2,-32768(gp)
 2aab4b4:	10bfffcc 	andi	r2,r2,65535
 2aab4b8:	1885d83a 	sra	r2,r3,r2
 2aab4bc:	3080000d 	sth	r2,0(r6)
		data [24] = (INT16) ((x0*c3 - x1*c7 - x2*c1 - x3*c5) >> s3);
 2aab4c0:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab4c4:	11400c04 	addi	r5,r2,48
 2aab4c8:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab4cc:	10ffffcc 	andi	r3,r2,65535
 2aab4d0:	e0bffe17 	ldw	r2,-8(fp)
 2aab4d4:	1889383a 	mul	r4,r3,r2
 2aab4d8:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab4dc:	10ffffcc 	andi	r3,r2,65535
 2aab4e0:	e0bffd17 	ldw	r2,-12(fp)
 2aab4e4:	1885383a 	mul	r2,r3,r2
 2aab4e8:	2089c83a 	sub	r4,r4,r2
 2aab4ec:	d0a0040b 	ldhu	r2,-32752(gp)
 2aab4f0:	10ffffcc 	andi	r3,r2,65535
 2aab4f4:	e0bffc17 	ldw	r2,-16(fp)
 2aab4f8:	1885383a 	mul	r2,r3,r2
 2aab4fc:	2089c83a 	sub	r4,r4,r2
 2aab500:	d0a0028b 	ldhu	r2,-32758(gp)
 2aab504:	10ffffcc 	andi	r3,r2,65535
 2aab508:	e0bffb17 	ldw	r2,-20(fp)
 2aab50c:	1885383a 	mul	r2,r3,r2
 2aab510:	2087c83a 	sub	r3,r4,r2
 2aab514:	d0a0000b 	ldhu	r2,-32768(gp)
 2aab518:	10bfffcc 	andi	r2,r2,65535
 2aab51c:	1885d83a 	sra	r2,r3,r2
 2aab520:	2880000d 	sth	r2,0(r5)
		data [8] = (INT16) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s3);
 2aab524:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab528:	11800404 	addi	r6,r2,16
 2aab52c:	d0a0040b 	ldhu	r2,-32752(gp)
 2aab530:	10ffffcc 	andi	r3,r2,65535
 2aab534:	e0bffe17 	ldw	r2,-8(fp)
 2aab538:	1889383a 	mul	r4,r3,r2
 2aab53c:	d0a0030b 	ldhu	r2,-32756(gp)
 2aab540:	10ffffcc 	andi	r3,r2,65535
 2aab544:	e0bffd17 	ldw	r2,-12(fp)
 2aab548:	1885383a 	mul	r2,r3,r2
 2aab54c:	208b883a 	add	r5,r4,r2
 2aab550:	d0a0018b 	ldhu	r2,-32762(gp)
 2aab554:	10ffffcc 	andi	r3,r2,65535
 2aab558:	e0bffb17 	ldw	r2,-20(fp)
 2aab55c:	1889383a 	mul	r4,r3,r2
 2aab560:	d0a0028b 	ldhu	r2,-32758(gp)
 2aab564:	10ffffcc 	andi	r3,r2,65535
 2aab568:	e0bffc17 	ldw	r2,-16(fp)
 2aab56c:	1885383a 	mul	r2,r3,r2
 2aab570:	2085883a 	add	r2,r4,r2
 2aab574:	2887883a 	add	r3,r5,r2
 2aab578:	d0a0000b 	ldhu	r2,-32768(gp)
 2aab57c:	10bfffcc 	andi	r2,r2,65535
 2aab580:	1885d83a 	sra	r2,r3,r2
 2aab584:	3080000d 	sth	r2,0(r6)

		data++;
 2aab588:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab58c:	10800084 	addi	r2,r2,2
 2aab590:	d0a6aa15 	stw	r2,-25944(gp)
		data += 8;
	}

	data -= 64;

	for (i=8; i>0; i--)
 2aab594:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab598:	10bfffc4 	addi	r2,r2,-1
 2aab59c:	e0bfff0d 	sth	r2,-4(fp)
 2aab5a0:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab5a4:	1004c03a 	cmpne	r2,r2,zero
 2aab5a8:	103ee61e 	bne	r2,zero,2aab144 <DCT+0x4d4>
		data [8] = (INT16) ((x0*c1 + x1*c3 + x2*c5 + x3*c7) >> s3);

		data++;
	}

	data -= 8;
 2aab5ac:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab5b0:	10bffc04 	addi	r2,r2,-16
 2aab5b4:	d0a6aa15 	stw	r2,-25944(gp)

	/* write out to queue */
	for (i=0; i<64; i++)
 2aab5b8:	e03fff0d 	sth	zero,-4(fp)
 2aab5bc:	00000f06 	br	2aab5fc <DCT+0x98c>
	{
		//SEND(data [i]);
		altera_avalon_fifo_write_fifo(0x3868,0x3820,data [i]);
 2aab5c0:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab5c4:	1085883a 	add	r2,r2,r2
 2aab5c8:	1007883a 	mov	r3,r2
 2aab5cc:	d0a6aa17 	ldw	r2,-25944(gp)
 2aab5d0:	1885883a 	add	r2,r3,r2
 2aab5d4:	1080000b 	ldhu	r2,0(r2)
 2aab5d8:	11bfffcc 	andi	r6,r2,65535
 2aab5dc:	31a0001c 	xori	r6,r6,32768
 2aab5e0:	31a00004 	addi	r6,r6,-32768
 2aab5e4:	010e1a04 	movi	r4,14440
 2aab5e8:	014e0804 	movi	r5,14368
 2aab5ec:	2aac8f80 	call	2aac8f8 <altera_avalon_fifo_write_fifo>
	}

	data -= 8;

	/* write out to queue */
	for (i=0; i<64; i++)
 2aab5f0:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab5f4:	10800044 	addi	r2,r2,1
 2aab5f8:	e0bfff0d 	sth	r2,-4(fp)
 2aab5fc:	e0bfff0b 	ldhu	r2,-4(fp)
 2aab600:	10801030 	cmpltui	r2,r2,64
 2aab604:	103fee1e 	bne	r2,zero,2aab5c0 <DCT+0x950>
	{
		//SEND(data [i]);
		altera_avalon_fifo_write_fifo(0x3868,0x3820,data [i]);
	}
}
 2aab608:	e037883a 	mov	sp,fp
 2aab60c:	dfc00217 	ldw	ra,8(sp)
 2aab610:	df000117 	ldw	fp,4(sp)
 2aab614:	dc000017 	ldw	r16,0(sp)
 2aab618:	dec00304 	addi	sp,sp,12
 2aab61c:	f800283a 	ret

02aab620 <main>:

int main(void){
 2aab620:	defffe04 	addi	sp,sp,-8
 2aab624:	dfc00115 	stw	ra,4(sp)
 2aab628:	df000015 	stw	fp,0(sp)
 2aab62c:	d839883a 	mov	fp,sp
	data = (INT16*)malloc(sizeof(INT16)*64);
 2aab630:	01002004 	movi	r4,128
 2aab634:	2aab6600 	call	2aab660 <malloc>
 2aab638:	d0a6aa15 	stw	r2,-25944(gp)
    
	while(1){
		DCT();
 2aab63c:	2aaac700 	call	2aaac70 <DCT>
		/* changed by haris */
		DCT();
 2aab640:	2aaac700 	call	2aaac70 <DCT>
		DCT();
 2aab644:	2aaac700 	call	2aaac70 <DCT>
	//	#pragma flush //added by haris
	
	//break;
	}
 2aab648:	003ffc06 	br	2aab63c <main+0x1c>

02aab64c <free>:
 2aab64c:	0080aaf4 	movhi	r2,683
 2aab650:	1081c004 	addi	r2,r2,1792
 2aab654:	200b883a 	mov	r5,r4
 2aab658:	11000017 	ldw	r4,0(r2)
 2aab65c:	2aabf501 	jmpi	2aabf50 <_free_r>

02aab660 <malloc>:
 2aab660:	0080aaf4 	movhi	r2,683
 2aab664:	1081c004 	addi	r2,r2,1792
 2aab668:	200b883a 	mov	r5,r4
 2aab66c:	11000017 	ldw	r4,0(r2)
 2aab670:	2aab6741 	jmpi	2aab674 <_malloc_r>

02aab674 <_malloc_r>:
 2aab674:	defff604 	addi	sp,sp,-40
 2aab678:	28c002c4 	addi	r3,r5,11
 2aab67c:	00800584 	movi	r2,22
 2aab680:	dc800215 	stw	r18,8(sp)
 2aab684:	dfc00915 	stw	ra,36(sp)
 2aab688:	df000815 	stw	fp,32(sp)
 2aab68c:	ddc00715 	stw	r23,28(sp)
 2aab690:	dd800615 	stw	r22,24(sp)
 2aab694:	dd400515 	stw	r21,20(sp)
 2aab698:	dd000415 	stw	r20,16(sp)
 2aab69c:	dcc00315 	stw	r19,12(sp)
 2aab6a0:	dc400115 	stw	r17,4(sp)
 2aab6a4:	dc000015 	stw	r16,0(sp)
 2aab6a8:	2025883a 	mov	r18,r4
 2aab6ac:	10c01236 	bltu	r2,r3,2aab6f8 <_malloc_r+0x84>
 2aab6b0:	04400404 	movi	r17,16
 2aab6b4:	8940142e 	bgeu	r17,r5,2aab708 <_malloc_r+0x94>
 2aab6b8:	00800304 	movi	r2,12
 2aab6bc:	0007883a 	mov	r3,zero
 2aab6c0:	90800015 	stw	r2,0(r18)
 2aab6c4:	1805883a 	mov	r2,r3
 2aab6c8:	dfc00917 	ldw	ra,36(sp)
 2aab6cc:	df000817 	ldw	fp,32(sp)
 2aab6d0:	ddc00717 	ldw	r23,28(sp)
 2aab6d4:	dd800617 	ldw	r22,24(sp)
 2aab6d8:	dd400517 	ldw	r21,20(sp)
 2aab6dc:	dd000417 	ldw	r20,16(sp)
 2aab6e0:	dcc00317 	ldw	r19,12(sp)
 2aab6e4:	dc800217 	ldw	r18,8(sp)
 2aab6e8:	dc400117 	ldw	r17,4(sp)
 2aab6ec:	dc000017 	ldw	r16,0(sp)
 2aab6f0:	dec00a04 	addi	sp,sp,40
 2aab6f4:	f800283a 	ret
 2aab6f8:	00bffe04 	movi	r2,-8
 2aab6fc:	18a2703a 	and	r17,r3,r2
 2aab700:	883fed16 	blt	r17,zero,2aab6b8 <_malloc_r+0x44>
 2aab704:	897fec36 	bltu	r17,r5,2aab6b8 <_malloc_r+0x44>
 2aab708:	9009883a 	mov	r4,r18
 2aab70c:	2aac3bc0 	call	2aac3bc <__malloc_lock>
 2aab710:	00807dc4 	movi	r2,503
 2aab714:	14402b2e 	bgeu	r2,r17,2aab7c4 <_malloc_r+0x150>
 2aab718:	8806d27a 	srli	r3,r17,9
 2aab71c:	18003f1e 	bne	r3,zero,2aab81c <_malloc_r+0x1a8>
 2aab720:	880cd0fa 	srli	r6,r17,3
 2aab724:	300490fa 	slli	r2,r6,3
 2aab728:	02c0aaf4 	movhi	r11,683
 2aab72c:	5afb3504 	addi	r11,r11,-4908
 2aab730:	12cb883a 	add	r5,r2,r11
 2aab734:	2c000317 	ldw	r16,12(r5)
 2aab738:	580f883a 	mov	r7,r11
 2aab73c:	2c00041e 	bne	r5,r16,2aab750 <_malloc_r+0xdc>
 2aab740:	00000a06 	br	2aab76c <_malloc_r+0xf8>
 2aab744:	1800860e 	bge	r3,zero,2aab960 <_malloc_r+0x2ec>
 2aab748:	84000317 	ldw	r16,12(r16)
 2aab74c:	2c000726 	beq	r5,r16,2aab76c <_malloc_r+0xf8>
 2aab750:	80800117 	ldw	r2,4(r16)
 2aab754:	00ffff04 	movi	r3,-4
 2aab758:	10c8703a 	and	r4,r2,r3
 2aab75c:	2447c83a 	sub	r3,r4,r17
 2aab760:	008003c4 	movi	r2,15
 2aab764:	10fff70e 	bge	r2,r3,2aab744 <_malloc_r+0xd0>
 2aab768:	31bfffc4 	addi	r6,r6,-1
 2aab76c:	32400044 	addi	r9,r6,1
 2aab770:	0280aaf4 	movhi	r10,683
 2aab774:	52bb3704 	addi	r10,r10,-4900
 2aab778:	54000217 	ldw	r16,8(r10)
 2aab77c:	8280a026 	beq	r16,r10,2aaba00 <_malloc_r+0x38c>
 2aab780:	80800117 	ldw	r2,4(r16)
 2aab784:	00ffff04 	movi	r3,-4
 2aab788:	10ca703a 	and	r5,r2,r3
 2aab78c:	2c4dc83a 	sub	r6,r5,r17
 2aab790:	008003c4 	movi	r2,15
 2aab794:	11808316 	blt	r2,r6,2aab9a4 <_malloc_r+0x330>
 2aab798:	52800315 	stw	r10,12(r10)
 2aab79c:	52800215 	stw	r10,8(r10)
 2aab7a0:	30002916 	blt	r6,zero,2aab848 <_malloc_r+0x1d4>
 2aab7a4:	8147883a 	add	r3,r16,r5
 2aab7a8:	18800117 	ldw	r2,4(r3)
 2aab7ac:	9009883a 	mov	r4,r18
 2aab7b0:	10800054 	ori	r2,r2,1
 2aab7b4:	18800115 	stw	r2,4(r3)
 2aab7b8:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aab7bc:	80c00204 	addi	r3,r16,8
 2aab7c0:	003fc006 	br	2aab6c4 <_malloc_r+0x50>
 2aab7c4:	02c0aaf4 	movhi	r11,683
 2aab7c8:	5afb3504 	addi	r11,r11,-4908
 2aab7cc:	8ac5883a 	add	r2,r17,r11
 2aab7d0:	14000317 	ldw	r16,12(r2)
 2aab7d4:	580f883a 	mov	r7,r11
 2aab7d8:	8806d0fa 	srli	r3,r17,3
 2aab7dc:	14006c26 	beq	r2,r16,2aab990 <_malloc_r+0x31c>
 2aab7e0:	80c00117 	ldw	r3,4(r16)
 2aab7e4:	00bfff04 	movi	r2,-4
 2aab7e8:	81800317 	ldw	r6,12(r16)
 2aab7ec:	1886703a 	and	r3,r3,r2
 2aab7f0:	80c7883a 	add	r3,r16,r3
 2aab7f4:	18800117 	ldw	r2,4(r3)
 2aab7f8:	81400217 	ldw	r5,8(r16)
 2aab7fc:	9009883a 	mov	r4,r18
 2aab800:	10800054 	ori	r2,r2,1
 2aab804:	18800115 	stw	r2,4(r3)
 2aab808:	31400215 	stw	r5,8(r6)
 2aab80c:	29800315 	stw	r6,12(r5)
 2aab810:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aab814:	80c00204 	addi	r3,r16,8
 2aab818:	003faa06 	br	2aab6c4 <_malloc_r+0x50>
 2aab81c:	00800104 	movi	r2,4
 2aab820:	10c0052e 	bgeu	r2,r3,2aab838 <_malloc_r+0x1c4>
 2aab824:	00800504 	movi	r2,20
 2aab828:	10c07836 	bltu	r2,r3,2aaba0c <_malloc_r+0x398>
 2aab82c:	198016c4 	addi	r6,r3,91
 2aab830:	300490fa 	slli	r2,r6,3
 2aab834:	003fbc06 	br	2aab728 <_malloc_r+0xb4>
 2aab838:	8804d1ba 	srli	r2,r17,6
 2aab83c:	11800e04 	addi	r6,r2,56
 2aab840:	300490fa 	slli	r2,r6,3
 2aab844:	003fb806 	br	2aab728 <_malloc_r+0xb4>
 2aab848:	00807fc4 	movi	r2,511
 2aab84c:	1140bb36 	bltu	r2,r5,2aabb3c <_malloc_r+0x4c8>
 2aab850:	2806d0fa 	srli	r3,r5,3
 2aab854:	573ffe04 	addi	fp,r10,-8
 2aab858:	00800044 	movi	r2,1
 2aab85c:	180890fa 	slli	r4,r3,3
 2aab860:	1807d0ba 	srai	r3,r3,2
 2aab864:	e1c00117 	ldw	r7,4(fp)
 2aab868:	5909883a 	add	r4,r11,r4
 2aab86c:	21400217 	ldw	r5,8(r4)
 2aab870:	10c4983a 	sll	r2,r2,r3
 2aab874:	81000315 	stw	r4,12(r16)
 2aab878:	81400215 	stw	r5,8(r16)
 2aab87c:	388eb03a 	or	r7,r7,r2
 2aab880:	2c000315 	stw	r16,12(r5)
 2aab884:	24000215 	stw	r16,8(r4)
 2aab888:	e1c00115 	stw	r7,4(fp)
 2aab88c:	4807883a 	mov	r3,r9
 2aab890:	4800cd16 	blt	r9,zero,2aabbc8 <_malloc_r+0x554>
 2aab894:	1807d0ba 	srai	r3,r3,2
 2aab898:	00800044 	movi	r2,1
 2aab89c:	10c8983a 	sll	r4,r2,r3
 2aab8a0:	39004436 	bltu	r7,r4,2aab9b4 <_malloc_r+0x340>
 2aab8a4:	21c4703a 	and	r2,r4,r7
 2aab8a8:	10000a1e 	bne	r2,zero,2aab8d4 <_malloc_r+0x260>
 2aab8ac:	2109883a 	add	r4,r4,r4
 2aab8b0:	00bfff04 	movi	r2,-4
 2aab8b4:	4884703a 	and	r2,r9,r2
 2aab8b8:	3906703a 	and	r3,r7,r4
 2aab8bc:	12400104 	addi	r9,r2,4
 2aab8c0:	1800041e 	bne	r3,zero,2aab8d4 <_malloc_r+0x260>
 2aab8c4:	2109883a 	add	r4,r4,r4
 2aab8c8:	3904703a 	and	r2,r7,r4
 2aab8cc:	4a400104 	addi	r9,r9,4
 2aab8d0:	103ffc26 	beq	r2,zero,2aab8c4 <_malloc_r+0x250>
 2aab8d4:	480490fa 	slli	r2,r9,3
 2aab8d8:	4819883a 	mov	r12,r9
 2aab8dc:	023fff04 	movi	r8,-4
 2aab8e0:	589b883a 	add	r13,r11,r2
 2aab8e4:	6807883a 	mov	r3,r13
 2aab8e8:	014003c4 	movi	r5,15
 2aab8ec:	1c000317 	ldw	r16,12(r3)
 2aab8f0:	1c00041e 	bne	r3,r16,2aab904 <_malloc_r+0x290>
 2aab8f4:	0000a706 	br	2aabb94 <_malloc_r+0x520>
 2aab8f8:	3000ab0e 	bge	r6,zero,2aabba8 <_malloc_r+0x534>
 2aab8fc:	84000317 	ldw	r16,12(r16)
 2aab900:	1c00a426 	beq	r3,r16,2aabb94 <_malloc_r+0x520>
 2aab904:	80800117 	ldw	r2,4(r16)
 2aab908:	1204703a 	and	r2,r2,r8
 2aab90c:	144dc83a 	sub	r6,r2,r17
 2aab910:	29bff90e 	bge	r5,r6,2aab8f8 <_malloc_r+0x284>
 2aab914:	81000317 	ldw	r4,12(r16)
 2aab918:	80c00217 	ldw	r3,8(r16)
 2aab91c:	89400054 	ori	r5,r17,1
 2aab920:	8445883a 	add	r2,r16,r17
 2aab924:	20c00215 	stw	r3,8(r4)
 2aab928:	19000315 	stw	r4,12(r3)
 2aab92c:	81400115 	stw	r5,4(r16)
 2aab930:	1187883a 	add	r3,r2,r6
 2aab934:	31000054 	ori	r4,r6,1
 2aab938:	50800315 	stw	r2,12(r10)
 2aab93c:	50800215 	stw	r2,8(r10)
 2aab940:	19800015 	stw	r6,0(r3)
 2aab944:	11000115 	stw	r4,4(r2)
 2aab948:	12800215 	stw	r10,8(r2)
 2aab94c:	12800315 	stw	r10,12(r2)
 2aab950:	9009883a 	mov	r4,r18
 2aab954:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aab958:	80c00204 	addi	r3,r16,8
 2aab95c:	003f5906 	br	2aab6c4 <_malloc_r+0x50>
 2aab960:	8109883a 	add	r4,r16,r4
 2aab964:	20800117 	ldw	r2,4(r4)
 2aab968:	80c00217 	ldw	r3,8(r16)
 2aab96c:	81400317 	ldw	r5,12(r16)
 2aab970:	10800054 	ori	r2,r2,1
 2aab974:	20800115 	stw	r2,4(r4)
 2aab978:	28c00215 	stw	r3,8(r5)
 2aab97c:	19400315 	stw	r5,12(r3)
 2aab980:	9009883a 	mov	r4,r18
 2aab984:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aab988:	80c00204 	addi	r3,r16,8
 2aab98c:	003f4d06 	br	2aab6c4 <_malloc_r+0x50>
 2aab990:	80800204 	addi	r2,r16,8
 2aab994:	14000317 	ldw	r16,12(r2)
 2aab998:	143f911e 	bne	r2,r16,2aab7e0 <_malloc_r+0x16c>
 2aab99c:	1a400084 	addi	r9,r3,2
 2aab9a0:	003f7306 	br	2aab770 <_malloc_r+0xfc>
 2aab9a4:	88c00054 	ori	r3,r17,1
 2aab9a8:	8445883a 	add	r2,r16,r17
 2aab9ac:	80c00115 	stw	r3,4(r16)
 2aab9b0:	003fdf06 	br	2aab930 <_malloc_r+0x2bc>
 2aab9b4:	e4000217 	ldw	r16,8(fp)
 2aab9b8:	00bfff04 	movi	r2,-4
 2aab9bc:	80c00117 	ldw	r3,4(r16)
 2aab9c0:	802d883a 	mov	r22,r16
 2aab9c4:	18aa703a 	and	r21,r3,r2
 2aab9c8:	ac401636 	bltu	r21,r17,2aaba24 <_malloc_r+0x3b0>
 2aab9cc:	ac49c83a 	sub	r4,r21,r17
 2aab9d0:	008003c4 	movi	r2,15
 2aab9d4:	1100130e 	bge	r2,r4,2aaba24 <_malloc_r+0x3b0>
 2aab9d8:	88800054 	ori	r2,r17,1
 2aab9dc:	8447883a 	add	r3,r16,r17
 2aab9e0:	80800115 	stw	r2,4(r16)
 2aab9e4:	20800054 	ori	r2,r4,1
 2aab9e8:	18800115 	stw	r2,4(r3)
 2aab9ec:	e0c00215 	stw	r3,8(fp)
 2aab9f0:	9009883a 	mov	r4,r18
 2aab9f4:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aab9f8:	80c00204 	addi	r3,r16,8
 2aab9fc:	003f3106 	br	2aab6c4 <_malloc_r+0x50>
 2aaba00:	39c00117 	ldw	r7,4(r7)
 2aaba04:	573ffe04 	addi	fp,r10,-8
 2aaba08:	003fa006 	br	2aab88c <_malloc_r+0x218>
 2aaba0c:	00801504 	movi	r2,84
 2aaba10:	10c06736 	bltu	r2,r3,2aabbb0 <_malloc_r+0x53c>
 2aaba14:	8804d33a 	srli	r2,r17,12
 2aaba18:	11801b84 	addi	r6,r2,110
 2aaba1c:	300490fa 	slli	r2,r6,3
 2aaba20:	003f4106 	br	2aab728 <_malloc_r+0xb4>
 2aaba24:	d0a6ab17 	ldw	r2,-25940(gp)
 2aaba28:	d0e00617 	ldw	r3,-32744(gp)
 2aaba2c:	053fffc4 	movi	r20,-1
 2aaba30:	10800404 	addi	r2,r2,16
 2aaba34:	88a7883a 	add	r19,r17,r2
 2aaba38:	1d000326 	beq	r3,r20,2aaba48 <_malloc_r+0x3d4>
 2aaba3c:	98c3ffc4 	addi	r3,r19,4095
 2aaba40:	00bc0004 	movi	r2,-4096
 2aaba44:	18a6703a 	and	r19,r3,r2
 2aaba48:	9009883a 	mov	r4,r18
 2aaba4c:	980b883a 	mov	r5,r19
 2aaba50:	2aabdb40 	call	2aabdb4 <_sbrk_r>
 2aaba54:	1009883a 	mov	r4,r2
 2aaba58:	15000426 	beq	r2,r20,2aaba6c <_malloc_r+0x3f8>
 2aaba5c:	854b883a 	add	r5,r16,r21
 2aaba60:	1029883a 	mov	r20,r2
 2aaba64:	11405a2e 	bgeu	r2,r5,2aabbd0 <_malloc_r+0x55c>
 2aaba68:	87000c26 	beq	r16,fp,2aaba9c <_malloc_r+0x428>
 2aaba6c:	e4000217 	ldw	r16,8(fp)
 2aaba70:	80c00117 	ldw	r3,4(r16)
 2aaba74:	00bfff04 	movi	r2,-4
 2aaba78:	1884703a 	and	r2,r3,r2
 2aaba7c:	14400336 	bltu	r2,r17,2aaba8c <_malloc_r+0x418>
 2aaba80:	1449c83a 	sub	r4,r2,r17
 2aaba84:	008003c4 	movi	r2,15
 2aaba88:	113fd316 	blt	r2,r4,2aab9d8 <_malloc_r+0x364>
 2aaba8c:	9009883a 	mov	r4,r18
 2aaba90:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aaba94:	0007883a 	mov	r3,zero
 2aaba98:	003f0a06 	br	2aab6c4 <_malloc_r+0x50>
 2aaba9c:	05c0aaf4 	movhi	r23,683
 2aabaa0:	bdc86e04 	addi	r23,r23,8632
 2aabaa4:	b8800017 	ldw	r2,0(r23)
 2aabaa8:	988d883a 	add	r6,r19,r2
 2aabaac:	b9800015 	stw	r6,0(r23)
 2aabab0:	d0e00617 	ldw	r3,-32744(gp)
 2aabab4:	00bfffc4 	movi	r2,-1
 2aabab8:	18808e26 	beq	r3,r2,2aabcf4 <_malloc_r+0x680>
 2aababc:	2145c83a 	sub	r2,r4,r5
 2aabac0:	3085883a 	add	r2,r6,r2
 2aabac4:	b8800015 	stw	r2,0(r23)
 2aabac8:	20c001cc 	andi	r3,r4,7
 2aabacc:	18005f1e 	bne	r3,zero,2aabc4c <_malloc_r+0x5d8>
 2aabad0:	000b883a 	mov	r5,zero
 2aabad4:	a4c5883a 	add	r2,r20,r19
 2aabad8:	1083ffcc 	andi	r2,r2,4095
 2aabadc:	00c40004 	movi	r3,4096
 2aabae0:	1887c83a 	sub	r3,r3,r2
 2aabae4:	28e7883a 	add	r19,r5,r3
 2aabae8:	9009883a 	mov	r4,r18
 2aabaec:	980b883a 	mov	r5,r19
 2aabaf0:	2aabdb40 	call	2aabdb4 <_sbrk_r>
 2aabaf4:	1007883a 	mov	r3,r2
 2aabaf8:	00bfffc4 	movi	r2,-1
 2aabafc:	18807a26 	beq	r3,r2,2aabce8 <_malloc_r+0x674>
 2aabb00:	1d05c83a 	sub	r2,r3,r20
 2aabb04:	9885883a 	add	r2,r19,r2
 2aabb08:	10c00054 	ori	r3,r2,1
 2aabb0c:	b8800017 	ldw	r2,0(r23)
 2aabb10:	a021883a 	mov	r16,r20
 2aabb14:	a0c00115 	stw	r3,4(r20)
 2aabb18:	9885883a 	add	r2,r19,r2
 2aabb1c:	b8800015 	stw	r2,0(r23)
 2aabb20:	e5000215 	stw	r20,8(fp)
 2aabb24:	b7003626 	beq	r22,fp,2aabc00 <_malloc_r+0x58c>
 2aabb28:	018003c4 	movi	r6,15
 2aabb2c:	35404b36 	bltu	r6,r21,2aabc5c <_malloc_r+0x5e8>
 2aabb30:	00800044 	movi	r2,1
 2aabb34:	a0800115 	stw	r2,4(r20)
 2aabb38:	003fcd06 	br	2aaba70 <_malloc_r+0x3fc>
 2aabb3c:	2808d27a 	srli	r4,r5,9
 2aabb40:	2000371e 	bne	r4,zero,2aabc20 <_malloc_r+0x5ac>
 2aabb44:	2808d0fa 	srli	r4,r5,3
 2aabb48:	200690fa 	slli	r3,r4,3
 2aabb4c:	1ad1883a 	add	r8,r3,r11
 2aabb50:	41800217 	ldw	r6,8(r8)
 2aabb54:	41805b26 	beq	r8,r6,2aabcc4 <_malloc_r+0x650>
 2aabb58:	30800117 	ldw	r2,4(r6)
 2aabb5c:	00ffff04 	movi	r3,-4
 2aabb60:	10c4703a 	and	r2,r2,r3
 2aabb64:	2880022e 	bgeu	r5,r2,2aabb70 <_malloc_r+0x4fc>
 2aabb68:	31800217 	ldw	r6,8(r6)
 2aabb6c:	41bffa1e 	bne	r8,r6,2aabb58 <_malloc_r+0x4e4>
 2aabb70:	32000317 	ldw	r8,12(r6)
 2aabb74:	39c00117 	ldw	r7,4(r7)
 2aabb78:	82000315 	stw	r8,12(r16)
 2aabb7c:	81800215 	stw	r6,8(r16)
 2aabb80:	0700aaf4 	movhi	fp,683
 2aabb84:	e73b3504 	addi	fp,fp,-4908
 2aabb88:	34000315 	stw	r16,12(r6)
 2aabb8c:	44000215 	stw	r16,8(r8)
 2aabb90:	003f3e06 	br	2aab88c <_malloc_r+0x218>
 2aabb94:	63000044 	addi	r12,r12,1
 2aabb98:	608000cc 	andi	r2,r12,3
 2aabb9c:	10005d26 	beq	r2,zero,2aabd14 <_malloc_r+0x6a0>
 2aabba0:	18c00204 	addi	r3,r3,8
 2aabba4:	003f5106 	br	2aab8ec <_malloc_r+0x278>
 2aabba8:	8089883a 	add	r4,r16,r2
 2aabbac:	003f6d06 	br	2aab964 <_malloc_r+0x2f0>
 2aabbb0:	00805504 	movi	r2,340
 2aabbb4:	10c02036 	bltu	r2,r3,2aabc38 <_malloc_r+0x5c4>
 2aabbb8:	8804d3fa 	srli	r2,r17,15
 2aabbbc:	11801dc4 	addi	r6,r2,119
 2aabbc0:	300490fa 	slli	r2,r6,3
 2aabbc4:	003ed806 	br	2aab728 <_malloc_r+0xb4>
 2aabbc8:	48c000c4 	addi	r3,r9,3
 2aabbcc:	003f3106 	br	2aab894 <_malloc_r+0x220>
 2aabbd0:	05c0aaf4 	movhi	r23,683
 2aabbd4:	bdc86e04 	addi	r23,r23,8632
 2aabbd8:	b8800017 	ldw	r2,0(r23)
 2aabbdc:	988d883a 	add	r6,r19,r2
 2aabbe0:	b9800015 	stw	r6,0(r23)
 2aabbe4:	293fb21e 	bne	r5,r4,2aabab0 <_malloc_r+0x43c>
 2aabbe8:	2083ffcc 	andi	r2,r4,4095
 2aabbec:	103fb01e 	bne	r2,zero,2aabab0 <_malloc_r+0x43c>
 2aabbf0:	e4000217 	ldw	r16,8(fp)
 2aabbf4:	9d45883a 	add	r2,r19,r21
 2aabbf8:	10800054 	ori	r2,r2,1
 2aabbfc:	80800115 	stw	r2,4(r16)
 2aabc00:	b8c00017 	ldw	r3,0(r23)
 2aabc04:	d0a6ac17 	ldw	r2,-25936(gp)
 2aabc08:	10c0012e 	bgeu	r2,r3,2aabc10 <_malloc_r+0x59c>
 2aabc0c:	d0e6ac15 	stw	r3,-25936(gp)
 2aabc10:	d0a6ad17 	ldw	r2,-25932(gp)
 2aabc14:	10ff962e 	bgeu	r2,r3,2aaba70 <_malloc_r+0x3fc>
 2aabc18:	d0e6ad15 	stw	r3,-25932(gp)
 2aabc1c:	003f9406 	br	2aaba70 <_malloc_r+0x3fc>
 2aabc20:	00800104 	movi	r2,4
 2aabc24:	11001e36 	bltu	r2,r4,2aabca0 <_malloc_r+0x62c>
 2aabc28:	2804d1ba 	srli	r2,r5,6
 2aabc2c:	11000e04 	addi	r4,r2,56
 2aabc30:	200690fa 	slli	r3,r4,3
 2aabc34:	003fc506 	br	2aabb4c <_malloc_r+0x4d8>
 2aabc38:	00815504 	movi	r2,1364
 2aabc3c:	10c01d2e 	bgeu	r2,r3,2aabcb4 <_malloc_r+0x640>
 2aabc40:	01801f84 	movi	r6,126
 2aabc44:	0080fc04 	movi	r2,1008
 2aabc48:	003eb706 	br	2aab728 <_malloc_r+0xb4>
 2aabc4c:	00800204 	movi	r2,8
 2aabc50:	10cbc83a 	sub	r5,r2,r3
 2aabc54:	2169883a 	add	r20,r4,r5
 2aabc58:	003f9e06 	br	2aabad4 <_malloc_r+0x460>
 2aabc5c:	00bffe04 	movi	r2,-8
 2aabc60:	a93ffd04 	addi	r4,r21,-12
 2aabc64:	2088703a 	and	r4,r4,r2
 2aabc68:	b10b883a 	add	r5,r22,r4
 2aabc6c:	00c00144 	movi	r3,5
 2aabc70:	28c00215 	stw	r3,8(r5)
 2aabc74:	28c00115 	stw	r3,4(r5)
 2aabc78:	b0800117 	ldw	r2,4(r22)
 2aabc7c:	1080004c 	andi	r2,r2,1
 2aabc80:	2084b03a 	or	r2,r4,r2
 2aabc84:	b0800115 	stw	r2,4(r22)
 2aabc88:	313fdd2e 	bgeu	r6,r4,2aabc00 <_malloc_r+0x58c>
 2aabc8c:	b1400204 	addi	r5,r22,8
 2aabc90:	9009883a 	mov	r4,r18
 2aabc94:	2aabf500 	call	2aabf50 <_free_r>
 2aabc98:	e4000217 	ldw	r16,8(fp)
 2aabc9c:	003fd806 	br	2aabc00 <_malloc_r+0x58c>
 2aabca0:	00800504 	movi	r2,20
 2aabca4:	11001536 	bltu	r2,r4,2aabcfc <_malloc_r+0x688>
 2aabca8:	210016c4 	addi	r4,r4,91
 2aabcac:	200690fa 	slli	r3,r4,3
 2aabcb0:	003fa606 	br	2aabb4c <_malloc_r+0x4d8>
 2aabcb4:	8804d4ba 	srli	r2,r17,18
 2aabcb8:	11801f04 	addi	r6,r2,124
 2aabcbc:	300490fa 	slli	r2,r6,3
 2aabcc0:	003e9906 	br	2aab728 <_malloc_r+0xb4>
 2aabcc4:	2009d0ba 	srai	r4,r4,2
 2aabcc8:	0140aaf4 	movhi	r5,683
 2aabccc:	297b3504 	addi	r5,r5,-4908
 2aabcd0:	00c00044 	movi	r3,1
 2aabcd4:	28800117 	ldw	r2,4(r5)
 2aabcd8:	1906983a 	sll	r3,r3,r4
 2aabcdc:	10c4b03a 	or	r2,r2,r3
 2aabce0:	28800115 	stw	r2,4(r5)
 2aabce4:	003fa306 	br	2aabb74 <_malloc_r+0x500>
 2aabce8:	0027883a 	mov	r19,zero
 2aabcec:	00c00044 	movi	r3,1
 2aabcf0:	003f8606 	br	2aabb0c <_malloc_r+0x498>
 2aabcf4:	d1200615 	stw	r4,-32744(gp)
 2aabcf8:	003f7306 	br	2aabac8 <_malloc_r+0x454>
 2aabcfc:	00801504 	movi	r2,84
 2aabd00:	11001936 	bltu	r2,r4,2aabd68 <_malloc_r+0x6f4>
 2aabd04:	2804d33a 	srli	r2,r5,12
 2aabd08:	11001b84 	addi	r4,r2,110
 2aabd0c:	200690fa 	slli	r3,r4,3
 2aabd10:	003f8e06 	br	2aabb4c <_malloc_r+0x4d8>
 2aabd14:	480b883a 	mov	r5,r9
 2aabd18:	6807883a 	mov	r3,r13
 2aabd1c:	288000cc 	andi	r2,r5,3
 2aabd20:	18fffe04 	addi	r3,r3,-8
 2aabd24:	297fffc4 	addi	r5,r5,-1
 2aabd28:	10001526 	beq	r2,zero,2aabd80 <_malloc_r+0x70c>
 2aabd2c:	18800217 	ldw	r2,8(r3)
 2aabd30:	10fffa26 	beq	r2,r3,2aabd1c <_malloc_r+0x6a8>
 2aabd34:	2109883a 	add	r4,r4,r4
 2aabd38:	393f1e36 	bltu	r7,r4,2aab9b4 <_malloc_r+0x340>
 2aabd3c:	203f1d26 	beq	r4,zero,2aab9b4 <_malloc_r+0x340>
 2aabd40:	21c4703a 	and	r2,r4,r7
 2aabd44:	10000226 	beq	r2,zero,2aabd50 <_malloc_r+0x6dc>
 2aabd48:	6013883a 	mov	r9,r12
 2aabd4c:	003ee106 	br	2aab8d4 <_malloc_r+0x260>
 2aabd50:	2109883a 	add	r4,r4,r4
 2aabd54:	3904703a 	and	r2,r7,r4
 2aabd58:	63000104 	addi	r12,r12,4
 2aabd5c:	103ffc26 	beq	r2,zero,2aabd50 <_malloc_r+0x6dc>
 2aabd60:	6013883a 	mov	r9,r12
 2aabd64:	003edb06 	br	2aab8d4 <_malloc_r+0x260>
 2aabd68:	00805504 	movi	r2,340
 2aabd6c:	11000836 	bltu	r2,r4,2aabd90 <_malloc_r+0x71c>
 2aabd70:	2804d3fa 	srli	r2,r5,15
 2aabd74:	11001dc4 	addi	r4,r2,119
 2aabd78:	200690fa 	slli	r3,r4,3
 2aabd7c:	003f7306 	br	2aabb4c <_malloc_r+0x4d8>
 2aabd80:	0104303a 	nor	r2,zero,r4
 2aabd84:	388e703a 	and	r7,r7,r2
 2aabd88:	e1c00115 	stw	r7,4(fp)
 2aabd8c:	003fe906 	br	2aabd34 <_malloc_r+0x6c0>
 2aabd90:	00815504 	movi	r2,1364
 2aabd94:	1100032e 	bgeu	r2,r4,2aabda4 <_malloc_r+0x730>
 2aabd98:	01001f84 	movi	r4,126
 2aabd9c:	00c0fc04 	movi	r3,1008
 2aabda0:	003f6a06 	br	2aabb4c <_malloc_r+0x4d8>
 2aabda4:	2804d4ba 	srli	r2,r5,18
 2aabda8:	11001f04 	addi	r4,r2,124
 2aabdac:	200690fa 	slli	r3,r4,3
 2aabdb0:	003f6606 	br	2aabb4c <_malloc_r+0x4d8>

02aabdb4 <_sbrk_r>:
 2aabdb4:	defffd04 	addi	sp,sp,-12
 2aabdb8:	dc000015 	stw	r16,0(sp)
 2aabdbc:	0400aaf4 	movhi	r16,683
 2aabdc0:	84086704 	addi	r16,r16,8604
 2aabdc4:	dc400115 	stw	r17,4(sp)
 2aabdc8:	80000015 	stw	zero,0(r16)
 2aabdcc:	2023883a 	mov	r17,r4
 2aabdd0:	2809883a 	mov	r4,r5
 2aabdd4:	dfc00215 	stw	ra,8(sp)
 2aabdd8:	2aac3fc0 	call	2aac3fc <sbrk>
 2aabddc:	1007883a 	mov	r3,r2
 2aabde0:	00bfffc4 	movi	r2,-1
 2aabde4:	18800626 	beq	r3,r2,2aabe00 <_sbrk_r+0x4c>
 2aabde8:	1805883a 	mov	r2,r3
 2aabdec:	dfc00217 	ldw	ra,8(sp)
 2aabdf0:	dc400117 	ldw	r17,4(sp)
 2aabdf4:	dc000017 	ldw	r16,0(sp)
 2aabdf8:	dec00304 	addi	sp,sp,12
 2aabdfc:	f800283a 	ret
 2aabe00:	80800017 	ldw	r2,0(r16)
 2aabe04:	103ff826 	beq	r2,zero,2aabde8 <_sbrk_r+0x34>
 2aabe08:	88800015 	stw	r2,0(r17)
 2aabe0c:	1805883a 	mov	r2,r3
 2aabe10:	dfc00217 	ldw	ra,8(sp)
 2aabe14:	dc400117 	ldw	r17,4(sp)
 2aabe18:	dc000017 	ldw	r16,0(sp)
 2aabe1c:	dec00304 	addi	sp,sp,12
 2aabe20:	f800283a 	ret

02aabe24 <_malloc_trim_r>:
 2aabe24:	defffb04 	addi	sp,sp,-20
 2aabe28:	dcc00315 	stw	r19,12(sp)
 2aabe2c:	04c0aaf4 	movhi	r19,683
 2aabe30:	9cfb3504 	addi	r19,r19,-4908
 2aabe34:	dc800215 	stw	r18,8(sp)
 2aabe38:	dc400115 	stw	r17,4(sp)
 2aabe3c:	dc000015 	stw	r16,0(sp)
 2aabe40:	2823883a 	mov	r17,r5
 2aabe44:	2025883a 	mov	r18,r4
 2aabe48:	dfc00415 	stw	ra,16(sp)
 2aabe4c:	2aac3bc0 	call	2aac3bc <__malloc_lock>
 2aabe50:	98800217 	ldw	r2,8(r19)
 2aabe54:	9009883a 	mov	r4,r18
 2aabe58:	000b883a 	mov	r5,zero
 2aabe5c:	10c00117 	ldw	r3,4(r2)
 2aabe60:	00bfff04 	movi	r2,-4
 2aabe64:	18a0703a 	and	r16,r3,r2
 2aabe68:	8463c83a 	sub	r17,r16,r17
 2aabe6c:	8c43fbc4 	addi	r17,r17,4079
 2aabe70:	8822d33a 	srli	r17,r17,12
 2aabe74:	0083ffc4 	movi	r2,4095
 2aabe78:	8c7fffc4 	addi	r17,r17,-1
 2aabe7c:	8822933a 	slli	r17,r17,12
 2aabe80:	1440060e 	bge	r2,r17,2aabe9c <_malloc_trim_r+0x78>
 2aabe84:	2aabdb40 	call	2aabdb4 <_sbrk_r>
 2aabe88:	98c00217 	ldw	r3,8(r19)
 2aabe8c:	9009883a 	mov	r4,r18
 2aabe90:	044bc83a 	sub	r5,zero,r17
 2aabe94:	80c7883a 	add	r3,r16,r3
 2aabe98:	10c00926 	beq	r2,r3,2aabec0 <_malloc_trim_r+0x9c>
 2aabe9c:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aabea0:	0005883a 	mov	r2,zero
 2aabea4:	dfc00417 	ldw	ra,16(sp)
 2aabea8:	dcc00317 	ldw	r19,12(sp)
 2aabeac:	dc800217 	ldw	r18,8(sp)
 2aabeb0:	dc400117 	ldw	r17,4(sp)
 2aabeb4:	dc000017 	ldw	r16,0(sp)
 2aabeb8:	dec00504 	addi	sp,sp,20
 2aabebc:	f800283a 	ret
 2aabec0:	9009883a 	mov	r4,r18
 2aabec4:	2aabdb40 	call	2aabdb4 <_sbrk_r>
 2aabec8:	844dc83a 	sub	r6,r16,r17
 2aabecc:	00ffffc4 	movi	r3,-1
 2aabed0:	9009883a 	mov	r4,r18
 2aabed4:	000b883a 	mov	r5,zero
 2aabed8:	01c0aaf4 	movhi	r7,683
 2aabedc:	39c86e04 	addi	r7,r7,8632
 2aabee0:	31800054 	ori	r6,r6,1
 2aabee4:	10c00926 	beq	r2,r3,2aabf0c <_malloc_trim_r+0xe8>
 2aabee8:	38800017 	ldw	r2,0(r7)
 2aabeec:	98c00217 	ldw	r3,8(r19)
 2aabef0:	9009883a 	mov	r4,r18
 2aabef4:	1445c83a 	sub	r2,r2,r17
 2aabef8:	38800015 	stw	r2,0(r7)
 2aabefc:	19800115 	stw	r6,4(r3)
 2aabf00:	2aac3dc0 	call	2aac3dc <__malloc_unlock>
 2aabf04:	00800044 	movi	r2,1
 2aabf08:	003fe606 	br	2aabea4 <_malloc_trim_r+0x80>
 2aabf0c:	2aabdb40 	call	2aabdb4 <_sbrk_r>
 2aabf10:	99800217 	ldw	r6,8(r19)
 2aabf14:	100f883a 	mov	r7,r2
 2aabf18:	9009883a 	mov	r4,r18
 2aabf1c:	1187c83a 	sub	r3,r2,r6
 2aabf20:	008003c4 	movi	r2,15
 2aabf24:	19400054 	ori	r5,r3,1
 2aabf28:	10ffdc0e 	bge	r2,r3,2aabe9c <_malloc_trim_r+0x78>
 2aabf2c:	0080aaf4 	movhi	r2,683
 2aabf30:	1081bf04 	addi	r2,r2,1788
 2aabf34:	10c00017 	ldw	r3,0(r2)
 2aabf38:	0080aaf4 	movhi	r2,683
 2aabf3c:	10886e04 	addi	r2,r2,8632
 2aabf40:	31400115 	stw	r5,4(r6)
 2aabf44:	38c7c83a 	sub	r3,r7,r3
 2aabf48:	10c00015 	stw	r3,0(r2)
 2aabf4c:	003fd306 	br	2aabe9c <_malloc_trim_r+0x78>

02aabf50 <_free_r>:
 2aabf50:	defffd04 	addi	sp,sp,-12
 2aabf54:	dc400115 	stw	r17,4(sp)
 2aabf58:	dc000015 	stw	r16,0(sp)
 2aabf5c:	dfc00215 	stw	ra,8(sp)
 2aabf60:	2821883a 	mov	r16,r5
 2aabf64:	2023883a 	mov	r17,r4
 2aabf68:	28005a26 	beq	r5,zero,2aac0d4 <_free_r+0x184>
 2aabf6c:	2aac3bc0 	call	2aac3bc <__malloc_lock>
 2aabf70:	823ffe04 	addi	r8,r16,-8
 2aabf74:	41400117 	ldw	r5,4(r8)
 2aabf78:	00bfff84 	movi	r2,-2
 2aabf7c:	0280aaf4 	movhi	r10,683
 2aabf80:	52bb3504 	addi	r10,r10,-4908
 2aabf84:	288e703a 	and	r7,r5,r2
 2aabf88:	41cd883a 	add	r6,r8,r7
 2aabf8c:	30c00117 	ldw	r3,4(r6)
 2aabf90:	51000217 	ldw	r4,8(r10)
 2aabf94:	00bfff04 	movi	r2,-4
 2aabf98:	1892703a 	and	r9,r3,r2
 2aabf9c:	5017883a 	mov	r11,r10
 2aabfa0:	31006726 	beq	r6,r4,2aac140 <_free_r+0x1f0>
 2aabfa4:	2880004c 	andi	r2,r5,1
 2aabfa8:	1005003a 	cmpeq	r2,r2,zero
 2aabfac:	32400115 	stw	r9,4(r6)
 2aabfb0:	10001a1e 	bne	r2,zero,2aac01c <_free_r+0xcc>
 2aabfb4:	000b883a 	mov	r5,zero
 2aabfb8:	3247883a 	add	r3,r6,r9
 2aabfbc:	18800117 	ldw	r2,4(r3)
 2aabfc0:	1080004c 	andi	r2,r2,1
 2aabfc4:	1000231e 	bne	r2,zero,2aac054 <_free_r+0x104>
 2aabfc8:	280ac03a 	cmpne	r5,r5,zero
 2aabfcc:	3a4f883a 	add	r7,r7,r9
 2aabfd0:	2800451e 	bne	r5,zero,2aac0e8 <_free_r+0x198>
 2aabfd4:	31000217 	ldw	r4,8(r6)
 2aabfd8:	0080aaf4 	movhi	r2,683
 2aabfdc:	10bb3704 	addi	r2,r2,-4900
 2aabfe0:	20807b26 	beq	r4,r2,2aac1d0 <_free_r+0x280>
 2aabfe4:	30800317 	ldw	r2,12(r6)
 2aabfe8:	3a07883a 	add	r3,r7,r8
 2aabfec:	19c00015 	stw	r7,0(r3)
 2aabff0:	11000215 	stw	r4,8(r2)
 2aabff4:	20800315 	stw	r2,12(r4)
 2aabff8:	38800054 	ori	r2,r7,1
 2aabffc:	40800115 	stw	r2,4(r8)
 2aac000:	28001a26 	beq	r5,zero,2aac06c <_free_r+0x11c>
 2aac004:	8809883a 	mov	r4,r17
 2aac008:	dfc00217 	ldw	ra,8(sp)
 2aac00c:	dc400117 	ldw	r17,4(sp)
 2aac010:	dc000017 	ldw	r16,0(sp)
 2aac014:	dec00304 	addi	sp,sp,12
 2aac018:	2aac3dc1 	jmpi	2aac3dc <__malloc_unlock>
 2aac01c:	80bffe17 	ldw	r2,-8(r16)
 2aac020:	50c00204 	addi	r3,r10,8
 2aac024:	4091c83a 	sub	r8,r8,r2
 2aac028:	41000217 	ldw	r4,8(r8)
 2aac02c:	388f883a 	add	r7,r7,r2
 2aac030:	20c06126 	beq	r4,r3,2aac1b8 <_free_r+0x268>
 2aac034:	40800317 	ldw	r2,12(r8)
 2aac038:	3247883a 	add	r3,r6,r9
 2aac03c:	000b883a 	mov	r5,zero
 2aac040:	11000215 	stw	r4,8(r2)
 2aac044:	20800315 	stw	r2,12(r4)
 2aac048:	18800117 	ldw	r2,4(r3)
 2aac04c:	1080004c 	andi	r2,r2,1
 2aac050:	103fdd26 	beq	r2,zero,2aabfc8 <_free_r+0x78>
 2aac054:	38800054 	ori	r2,r7,1
 2aac058:	3a07883a 	add	r3,r7,r8
 2aac05c:	280ac03a 	cmpne	r5,r5,zero
 2aac060:	40800115 	stw	r2,4(r8)
 2aac064:	19c00015 	stw	r7,0(r3)
 2aac068:	283fe61e 	bne	r5,zero,2aac004 <_free_r+0xb4>
 2aac06c:	00807fc4 	movi	r2,511
 2aac070:	11c01f2e 	bgeu	r2,r7,2aac0f0 <_free_r+0x1a0>
 2aac074:	3806d27a 	srli	r3,r7,9
 2aac078:	1800481e 	bne	r3,zero,2aac19c <_free_r+0x24c>
 2aac07c:	3804d0fa 	srli	r2,r7,3
 2aac080:	100690fa 	slli	r3,r2,3
 2aac084:	1acd883a 	add	r6,r3,r11
 2aac088:	31400217 	ldw	r5,8(r6)
 2aac08c:	31405926 	beq	r6,r5,2aac1f4 <_free_r+0x2a4>
 2aac090:	28800117 	ldw	r2,4(r5)
 2aac094:	00ffff04 	movi	r3,-4
 2aac098:	10c4703a 	and	r2,r2,r3
 2aac09c:	3880022e 	bgeu	r7,r2,2aac0a8 <_free_r+0x158>
 2aac0a0:	29400217 	ldw	r5,8(r5)
 2aac0a4:	317ffa1e 	bne	r6,r5,2aac090 <_free_r+0x140>
 2aac0a8:	29800317 	ldw	r6,12(r5)
 2aac0ac:	41800315 	stw	r6,12(r8)
 2aac0b0:	41400215 	stw	r5,8(r8)
 2aac0b4:	8809883a 	mov	r4,r17
 2aac0b8:	2a000315 	stw	r8,12(r5)
 2aac0bc:	32000215 	stw	r8,8(r6)
 2aac0c0:	dfc00217 	ldw	ra,8(sp)
 2aac0c4:	dc400117 	ldw	r17,4(sp)
 2aac0c8:	dc000017 	ldw	r16,0(sp)
 2aac0cc:	dec00304 	addi	sp,sp,12
 2aac0d0:	2aac3dc1 	jmpi	2aac3dc <__malloc_unlock>
 2aac0d4:	dfc00217 	ldw	ra,8(sp)
 2aac0d8:	dc400117 	ldw	r17,4(sp)
 2aac0dc:	dc000017 	ldw	r16,0(sp)
 2aac0e0:	dec00304 	addi	sp,sp,12
 2aac0e4:	f800283a 	ret
 2aac0e8:	31000217 	ldw	r4,8(r6)
 2aac0ec:	003fbd06 	br	2aabfe4 <_free_r+0x94>
 2aac0f0:	3806d0fa 	srli	r3,r7,3
 2aac0f4:	00800044 	movi	r2,1
 2aac0f8:	51400117 	ldw	r5,4(r10)
 2aac0fc:	180890fa 	slli	r4,r3,3
 2aac100:	1807d0ba 	srai	r3,r3,2
 2aac104:	22c9883a 	add	r4,r4,r11
 2aac108:	21800217 	ldw	r6,8(r4)
 2aac10c:	10c4983a 	sll	r2,r2,r3
 2aac110:	41000315 	stw	r4,12(r8)
 2aac114:	41800215 	stw	r6,8(r8)
 2aac118:	288ab03a 	or	r5,r5,r2
 2aac11c:	22000215 	stw	r8,8(r4)
 2aac120:	8809883a 	mov	r4,r17
 2aac124:	51400115 	stw	r5,4(r10)
 2aac128:	32000315 	stw	r8,12(r6)
 2aac12c:	dfc00217 	ldw	ra,8(sp)
 2aac130:	dc400117 	ldw	r17,4(sp)
 2aac134:	dc000017 	ldw	r16,0(sp)
 2aac138:	dec00304 	addi	sp,sp,12
 2aac13c:	2aac3dc1 	jmpi	2aac3dc <__malloc_unlock>
 2aac140:	2880004c 	andi	r2,r5,1
 2aac144:	3a4d883a 	add	r6,r7,r9
 2aac148:	1000071e 	bne	r2,zero,2aac168 <_free_r+0x218>
 2aac14c:	80bffe17 	ldw	r2,-8(r16)
 2aac150:	4091c83a 	sub	r8,r8,r2
 2aac154:	41000317 	ldw	r4,12(r8)
 2aac158:	40c00217 	ldw	r3,8(r8)
 2aac15c:	308d883a 	add	r6,r6,r2
 2aac160:	20c00215 	stw	r3,8(r4)
 2aac164:	19000315 	stw	r4,12(r3)
 2aac168:	0080aaf4 	movhi	r2,683
 2aac16c:	1081be04 	addi	r2,r2,1784
 2aac170:	11000017 	ldw	r4,0(r2)
 2aac174:	30c00054 	ori	r3,r6,1
 2aac178:	52000215 	stw	r8,8(r10)
 2aac17c:	40c00115 	stw	r3,4(r8)
 2aac180:	313fa036 	bltu	r6,r4,2aac004 <_free_r+0xb4>
 2aac184:	0080aaf4 	movhi	r2,683
 2aac188:	10886404 	addi	r2,r2,8592
 2aac18c:	11400017 	ldw	r5,0(r2)
 2aac190:	8809883a 	mov	r4,r17
 2aac194:	2aabe240 	call	2aabe24 <_malloc_trim_r>
 2aac198:	003f9a06 	br	2aac004 <_free_r+0xb4>
 2aac19c:	00800104 	movi	r2,4
 2aac1a0:	10c0072e 	bgeu	r2,r3,2aac1c0 <_free_r+0x270>
 2aac1a4:	00800504 	movi	r2,20
 2aac1a8:	10c01936 	bltu	r2,r3,2aac210 <_free_r+0x2c0>
 2aac1ac:	188016c4 	addi	r2,r3,91
 2aac1b0:	100690fa 	slli	r3,r2,3
 2aac1b4:	003fb306 	br	2aac084 <_free_r+0x134>
 2aac1b8:	01400044 	movi	r5,1
 2aac1bc:	003f7e06 	br	2aabfb8 <_free_r+0x68>
 2aac1c0:	3804d1ba 	srli	r2,r7,6
 2aac1c4:	10800e04 	addi	r2,r2,56
 2aac1c8:	100690fa 	slli	r3,r2,3
 2aac1cc:	003fad06 	br	2aac084 <_free_r+0x134>
 2aac1d0:	22000315 	stw	r8,12(r4)
 2aac1d4:	22000215 	stw	r8,8(r4)
 2aac1d8:	3a05883a 	add	r2,r7,r8
 2aac1dc:	38c00054 	ori	r3,r7,1
 2aac1e0:	11c00015 	stw	r7,0(r2)
 2aac1e4:	41000215 	stw	r4,8(r8)
 2aac1e8:	40c00115 	stw	r3,4(r8)
 2aac1ec:	41000315 	stw	r4,12(r8)
 2aac1f0:	003f8406 	br	2aac004 <_free_r+0xb4>
 2aac1f4:	1005d0ba 	srai	r2,r2,2
 2aac1f8:	00c00044 	movi	r3,1
 2aac1fc:	51000117 	ldw	r4,4(r10)
 2aac200:	1886983a 	sll	r3,r3,r2
 2aac204:	20c8b03a 	or	r4,r4,r3
 2aac208:	51000115 	stw	r4,4(r10)
 2aac20c:	003fa706 	br	2aac0ac <_free_r+0x15c>
 2aac210:	00801504 	movi	r2,84
 2aac214:	10c00436 	bltu	r2,r3,2aac228 <_free_r+0x2d8>
 2aac218:	3804d33a 	srli	r2,r7,12
 2aac21c:	10801b84 	addi	r2,r2,110
 2aac220:	100690fa 	slli	r3,r2,3
 2aac224:	003f9706 	br	2aac084 <_free_r+0x134>
 2aac228:	00805504 	movi	r2,340
 2aac22c:	10c00436 	bltu	r2,r3,2aac240 <_free_r+0x2f0>
 2aac230:	3804d3fa 	srli	r2,r7,15
 2aac234:	10801dc4 	addi	r2,r2,119
 2aac238:	100690fa 	slli	r3,r2,3
 2aac23c:	003f9106 	br	2aac084 <_free_r+0x134>
 2aac240:	00815504 	movi	r2,1364
 2aac244:	10c0032e 	bgeu	r2,r3,2aac254 <_free_r+0x304>
 2aac248:	00801f84 	movi	r2,126
 2aac24c:	00c0fc04 	movi	r3,1008
 2aac250:	003f8c06 	br	2aac084 <_free_r+0x134>
 2aac254:	3804d4ba 	srli	r2,r7,18
 2aac258:	10801f04 	addi	r2,r2,124
 2aac25c:	100690fa 	slli	r3,r2,3
 2aac260:	003f8806 	br	2aac084 <_free_r+0x134>

02aac264 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2aac264:	defffe04 	addi	sp,sp,-8
 2aac268:	dfc00115 	stw	ra,4(sp)
 2aac26c:	df000015 	stw	fp,0(sp)
 2aac270:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2aac274:	0100aaf4 	movhi	r4,683
 2aac278:	2101cc04 	addi	r4,r4,1840
 2aac27c:	0140aaf4 	movhi	r5,683
 2aac280:	297b3504 	addi	r5,r5,-4908
 2aac284:	0180aaf4 	movhi	r6,683
 2aac288:	3181cc04 	addi	r6,r6,1840
 2aac28c:	2aac2e40 	call	2aac2e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2aac290:	0100aaf4 	movhi	r4,683
 2aac294:	212aa804 	addi	r4,r4,-21856
 2aac298:	01420034 	movhi	r5,2048
 2aac29c:	29460804 	addi	r5,r5,6176
 2aac2a0:	01820034 	movhi	r6,2048
 2aac2a4:	31866d04 	addi	r6,r6,6580
 2aac2a8:	2aac2e40 	call	2aac2e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2aac2ac:	0100aaf4 	movhi	r4,683
 2aac2b0:	213b2704 	addi	r4,r4,-4964
 2aac2b4:	0140aaf4 	movhi	r5,683
 2aac2b8:	297b2704 	addi	r5,r5,-4964
 2aac2bc:	0180aaf4 	movhi	r6,683
 2aac2c0:	31bb3504 	addi	r6,r6,-4908
 2aac2c4:	2aac2e40 	call	2aac2e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2aac2c8:	2aad93c0 	call	2aad93c <alt_dcache_flush_all>
  alt_icache_flush_all();
 2aac2cc:	2aadb600 	call	2aadb60 <alt_icache_flush_all>
}
 2aac2d0:	e037883a 	mov	sp,fp
 2aac2d4:	dfc00117 	ldw	ra,4(sp)
 2aac2d8:	df000017 	ldw	fp,0(sp)
 2aac2dc:	dec00204 	addi	sp,sp,8
 2aac2e0:	f800283a 	ret

02aac2e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2aac2e4:	defffc04 	addi	sp,sp,-16
 2aac2e8:	df000315 	stw	fp,12(sp)
 2aac2ec:	df000304 	addi	fp,sp,12
 2aac2f0:	e13ffd15 	stw	r4,-12(fp)
 2aac2f4:	e17ffe15 	stw	r5,-8(fp)
 2aac2f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2aac2fc:	e0fffe17 	ldw	r3,-8(fp)
 2aac300:	e0bffd17 	ldw	r2,-12(fp)
 2aac304:	18800e26 	beq	r3,r2,2aac340 <alt_load_section+0x5c>
  {
    while( to != end )
 2aac308:	00000a06 	br	2aac334 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2aac30c:	e0bffd17 	ldw	r2,-12(fp)
 2aac310:	10c00017 	ldw	r3,0(r2)
 2aac314:	e0bffe17 	ldw	r2,-8(fp)
 2aac318:	10c00015 	stw	r3,0(r2)
 2aac31c:	e0bffe17 	ldw	r2,-8(fp)
 2aac320:	10800104 	addi	r2,r2,4
 2aac324:	e0bffe15 	stw	r2,-8(fp)
 2aac328:	e0bffd17 	ldw	r2,-12(fp)
 2aac32c:	10800104 	addi	r2,r2,4
 2aac330:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2aac334:	e0fffe17 	ldw	r3,-8(fp)
 2aac338:	e0bfff17 	ldw	r2,-4(fp)
 2aac33c:	18bff31e 	bne	r3,r2,2aac30c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2aac340:	e037883a 	mov	sp,fp
 2aac344:	df000017 	ldw	fp,0(sp)
 2aac348:	dec00104 	addi	sp,sp,4
 2aac34c:	f800283a 	ret

02aac350 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2aac350:	defffd04 	addi	sp,sp,-12
 2aac354:	dfc00215 	stw	ra,8(sp)
 2aac358:	df000115 	stw	fp,4(sp)
 2aac35c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2aac360:	0009883a 	mov	r4,zero
 2aac364:	2aac4b80 	call	2aac4b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2aac368:	2aac4ec0 	call	2aac4ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2aac36c:	0100aaf4 	movhi	r4,683
 2aac370:	213b2804 	addi	r4,r4,-4960
 2aac374:	0140aaf4 	movhi	r5,683
 2aac378:	297b2804 	addi	r5,r5,-4960
 2aac37c:	0180aaf4 	movhi	r6,683
 2aac380:	31bb2804 	addi	r6,r6,-4960
 2aac384:	2aadf200 	call	2aadf20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2aac388:	2aada980 	call	2aada98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2aac38c:	0100aaf4 	movhi	r4,683
 2aac390:	2136bf04 	addi	r4,r4,-9476
 2aac394:	2aae77c0 	call	2aae77c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2aac398:	d126af17 	ldw	r4,-25924(gp)
 2aac39c:	d166b017 	ldw	r5,-25920(gp)
 2aac3a0:	d1a6b117 	ldw	r6,-25916(gp)
 2aac3a4:	2aab6200 	call	2aab620 <main>
 2aac3a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2aac3ac:	01000044 	movi	r4,1
 2aac3b0:	2aad7e00 	call	2aad7e0 <close>
  exit (result);
 2aac3b4:	e13fff17 	ldw	r4,-4(fp)
 2aac3b8:	2aae7900 	call	2aae790 <exit>

02aac3bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2aac3bc:	defffe04 	addi	sp,sp,-8
 2aac3c0:	df000115 	stw	fp,4(sp)
 2aac3c4:	df000104 	addi	fp,sp,4
 2aac3c8:	e13fff15 	stw	r4,-4(fp)
}
 2aac3cc:	e037883a 	mov	sp,fp
 2aac3d0:	df000017 	ldw	fp,0(sp)
 2aac3d4:	dec00104 	addi	sp,sp,4
 2aac3d8:	f800283a 	ret

02aac3dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2aac3dc:	defffe04 	addi	sp,sp,-8
 2aac3e0:	df000115 	stw	fp,4(sp)
 2aac3e4:	df000104 	addi	fp,sp,4
 2aac3e8:	e13fff15 	stw	r4,-4(fp)
}
 2aac3ec:	e037883a 	mov	sp,fp
 2aac3f0:	df000017 	ldw	fp,0(sp)
 2aac3f4:	dec00104 	addi	sp,sp,4
 2aac3f8:	f800283a 	ret

02aac3fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2aac3fc:	defff804 	addi	sp,sp,-32
 2aac400:	df000715 	stw	fp,28(sp)
 2aac404:	df000704 	addi	fp,sp,28
 2aac408:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aac40c:	0005303a 	rdctl	r2,status
 2aac410:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aac414:	e0fffb17 	ldw	r3,-20(fp)
 2aac418:	00bfff84 	movi	r2,-2
 2aac41c:	1884703a 	and	r2,r3,r2
 2aac420:	1001703a 	wrctl	status,r2
  
  return context;
 2aac424:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2aac428:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2aac42c:	d0a00917 	ldw	r2,-32732(gp)
 2aac430:	10c000c4 	addi	r3,r2,3
 2aac434:	00bfff04 	movi	r2,-4
 2aac438:	1884703a 	and	r2,r3,r2
 2aac43c:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2aac440:	d0e00917 	ldw	r3,-32732(gp)
 2aac444:	e0bffe17 	ldw	r2,-8(fp)
 2aac448:	1887883a 	add	r3,r3,r2
 2aac44c:	00810034 	movhi	r2,1024
 2aac450:	10bffc04 	addi	r2,r2,-16
 2aac454:	10c0072e 	bgeu	r2,r3,2aac474 <sbrk+0x78>
 2aac458:	e0bffd17 	ldw	r2,-12(fp)
 2aac45c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aac460:	e0bffa17 	ldw	r2,-24(fp)
 2aac464:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2aac468:	00bfffc4 	movi	r2,-1
 2aac46c:	e0bfff15 	stw	r2,-4(fp)
 2aac470:	00000c06 	br	2aac4a4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 2aac474:	d0a00917 	ldw	r2,-32732(gp)
 2aac478:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 2aac47c:	d0e00917 	ldw	r3,-32732(gp)
 2aac480:	e0bffe17 	ldw	r2,-8(fp)
 2aac484:	1885883a 	add	r2,r3,r2
 2aac488:	d0a00915 	stw	r2,-32732(gp)
 2aac48c:	e0bffd17 	ldw	r2,-12(fp)
 2aac490:	e0bff915 	stw	r2,-28(fp)
 2aac494:	e0bff917 	ldw	r2,-28(fp)
 2aac498:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2aac49c:	e0bffc17 	ldw	r2,-16(fp)
 2aac4a0:	e0bfff15 	stw	r2,-4(fp)
 2aac4a4:	e0bfff17 	ldw	r2,-4(fp)
} 
 2aac4a8:	e037883a 	mov	sp,fp
 2aac4ac:	df000017 	ldw	fp,0(sp)
 2aac4b0:	dec00104 	addi	sp,sp,4
 2aac4b4:	f800283a 	ret

02aac4b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2aac4b8:	defffd04 	addi	sp,sp,-12
 2aac4bc:	dfc00215 	stw	ra,8(sp)
 2aac4c0:	df000115 	stw	fp,4(sp)
 2aac4c4:	df000104 	addi	fp,sp,4
 2aac4c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_2, cpu_2);
 2aac4cc:	2aae4600 	call	2aae460 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2aac4d0:	00800044 	movi	r2,1
 2aac4d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2aac4d8:	e037883a 	mov	sp,fp
 2aac4dc:	dfc00117 	ldw	ra,4(sp)
 2aac4e0:	df000017 	ldw	fp,0(sp)
 2aac4e4:	dec00204 	addi	sp,sp,8
 2aac4e8:	f800283a 	ret

02aac4ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2aac4ec:	defffe04 	addi	sp,sp,-8
 2aac4f0:	dfc00115 	stw	ra,4(sp)
 2aac4f4:	df000015 	stw	fp,0(sp)
 2aac4f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
 2aac4fc:	01020034 	movhi	r4,2048
 2aac500:	21041004 	addi	r4,r4,4160
 2aac504:	000b883a 	mov	r5,zero
 2aac508:	01800044 	movi	r6,1
 2aac50c:	01c0fa04 	movi	r7,1000
 2aac510:	2aad5fc0 	call	2aad5fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE2_TO_3, fifo_stage2_to_3);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE3_TO_4, fifo_stage3_to_4);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_2, jtag_uart_2);
 2aac514:	0100aaf4 	movhi	r4,683
 2aac518:	213d4104 	addi	r4,r4,-2812
 2aac51c:	000b883a 	mov	r5,zero
 2aac520:	01800404 	movi	r6,16
 2aac524:	2aacc280 	call	2aacc28 <altera_avalon_jtag_uart_init>
 2aac528:	0100aaf4 	movhi	r4,683
 2aac52c:	213d3704 	addi	r4,r4,-2852
 2aac530:	2aac5480 	call	2aac548 <alt_dev_reg>
}
 2aac534:	e037883a 	mov	sp,fp
 2aac538:	dfc00117 	ldw	ra,4(sp)
 2aac53c:	df000017 	ldw	fp,0(sp)
 2aac540:	dec00204 	addi	sp,sp,8
 2aac544:	f800283a 	ret

02aac548 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2aac548:	defffd04 	addi	sp,sp,-12
 2aac54c:	dfc00215 	stw	ra,8(sp)
 2aac550:	df000115 	stw	fp,4(sp)
 2aac554:	df000104 	addi	fp,sp,4
 2aac558:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2aac55c:	e13fff17 	ldw	r4,-4(fp)
 2aac560:	0140aaf4 	movhi	r5,683
 2aac564:	2941c504 	addi	r5,r5,1812
 2aac568:	2aad9840 	call	2aad984 <alt_dev_llist_insert>
}
 2aac56c:	e037883a 	mov	sp,fp
 2aac570:	dfc00117 	ldw	ra,4(sp)
 2aac574:	df000017 	ldw	fp,0(sp)
 2aac578:	dec00204 	addi	sp,sp,8
 2aac57c:	f800283a 	ret

02aac580 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 2aac580:	defff904 	addi	sp,sp,-28
 2aac584:	dfc00615 	stw	ra,24(sp)
 2aac588:	df000515 	stw	fp,20(sp)
 2aac58c:	df000504 	addi	fp,sp,20
 2aac590:	e13ffb15 	stw	r4,-20(fp)
 2aac594:	e17ffc15 	stw	r5,-16(fp)
 2aac598:	e1bffd15 	stw	r6,-12(fp)
 2aac59c:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 2aac5a0:	e13ffb17 	ldw	r4,-20(fp)
 2aac5a4:	01400fc4 	movi	r5,63
 2aac5a8:	2aac7700 	call	2aac770 <altera_avalon_fifo_clear_event>
 2aac5ac:	1005003a 	cmpeq	r2,r2,zero
 2aac5b0:	1000031e 	bne	r2,zero,2aac5c0 <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 2aac5b4:	00bfffc4 	movi	r2,-1
 2aac5b8:	e0bfff15 	stw	r2,-4(fp)
 2aac5bc:	00001906 	br	2aac624 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 2aac5c0:	e13ffb17 	ldw	r4,-20(fp)
 2aac5c4:	e17ffc17 	ldw	r5,-16(fp)
 2aac5c8:	2aac7d80 	call	2aac7d8 <altera_avalon_fifo_write_ienable>
 2aac5cc:	1005003a 	cmpeq	r2,r2,zero
 2aac5d0:	1000031e 	bne	r2,zero,2aac5e0 <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 2aac5d4:	00bfff84 	movi	r2,-2
 2aac5d8:	e0bfff15 	stw	r2,-4(fp)
 2aac5dc:	00001106 	br	2aac624 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 2aac5e0:	e13ffb17 	ldw	r4,-20(fp)
 2aac5e4:	e17ffe17 	ldw	r5,-8(fp)
 2aac5e8:	2aac8380 	call	2aac838 <altera_avalon_fifo_write_almostfull>
 2aac5ec:	1005003a 	cmpeq	r2,r2,zero
 2aac5f0:	1000031e 	bne	r2,zero,2aac600 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 2aac5f4:	00bfff44 	movi	r2,-3
 2aac5f8:	e0bfff15 	stw	r2,-4(fp)
 2aac5fc:	00000906 	br	2aac624 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 2aac600:	e13ffb17 	ldw	r4,-20(fp)
 2aac604:	e17ffd17 	ldw	r5,-12(fp)
 2aac608:	2aac8980 	call	2aac898 <altera_avalon_fifo_write_almostempty>
 2aac60c:	1005003a 	cmpeq	r2,r2,zero
 2aac610:	1000031e 	bne	r2,zero,2aac620 <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 2aac614:	00bfff44 	movi	r2,-3
 2aac618:	e0bfff15 	stw	r2,-4(fp)
 2aac61c:	00000106 	br	2aac624 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
 2aac620:	e03fff15 	stw	zero,-4(fp)
 2aac624:	e0bfff17 	ldw	r2,-4(fp)
}
 2aac628:	e037883a 	mov	sp,fp
 2aac62c:	dfc00117 	ldw	ra,4(sp)
 2aac630:	df000017 	ldw	fp,0(sp)
 2aac634:	dec00204 	addi	sp,sp,8
 2aac638:	f800283a 	ret

02aac63c <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
 2aac63c:	defffd04 	addi	sp,sp,-12
 2aac640:	df000215 	stw	fp,8(sp)
 2aac644:	df000204 	addi	fp,sp,8
 2aac648:	e13ffe15 	stw	r4,-8(fp)
 2aac64c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
 2aac650:	e0bffe17 	ldw	r2,-8(fp)
 2aac654:	10800104 	addi	r2,r2,4
 2aac658:	10800037 	ldwio	r2,0(r2)
 2aac65c:	1007883a 	mov	r3,r2
 2aac660:	e0bfff17 	ldw	r2,-4(fp)
 2aac664:	1884703a 	and	r2,r3,r2
}
 2aac668:	e037883a 	mov	sp,fp
 2aac66c:	df000017 	ldw	fp,0(sp)
 2aac670:	dec00104 	addi	sp,sp,4
 2aac674:	f800283a 	ret

02aac678 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
 2aac678:	defffd04 	addi	sp,sp,-12
 2aac67c:	df000215 	stw	fp,8(sp)
 2aac680:	df000204 	addi	fp,sp,8
 2aac684:	e13ffe15 	stw	r4,-8(fp)
 2aac688:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
 2aac68c:	e0bffe17 	ldw	r2,-8(fp)
 2aac690:	10800304 	addi	r2,r2,12
 2aac694:	10800037 	ldwio	r2,0(r2)
 2aac698:	1007883a 	mov	r3,r2
 2aac69c:	e0bfff17 	ldw	r2,-4(fp)
 2aac6a0:	1884703a 	and	r2,r3,r2
}
 2aac6a4:	e037883a 	mov	sp,fp
 2aac6a8:	df000017 	ldw	fp,0(sp)
 2aac6ac:	dec00104 	addi	sp,sp,4
 2aac6b0:	f800283a 	ret

02aac6b4 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
 2aac6b4:	defffe04 	addi	sp,sp,-8
 2aac6b8:	df000115 	stw	fp,4(sp)
 2aac6bc:	df000104 	addi	fp,sp,4
 2aac6c0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
 2aac6c4:	e0bfff17 	ldw	r2,-4(fp)
 2aac6c8:	10800404 	addi	r2,r2,16
 2aac6cc:	10800037 	ldwio	r2,0(r2)
}
 2aac6d0:	e037883a 	mov	sp,fp
 2aac6d4:	df000017 	ldw	fp,0(sp)
 2aac6d8:	dec00104 	addi	sp,sp,4
 2aac6dc:	f800283a 	ret

02aac6e0 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
 2aac6e0:	defffe04 	addi	sp,sp,-8
 2aac6e4:	df000115 	stw	fp,4(sp)
 2aac6e8:	df000104 	addi	fp,sp,4
 2aac6ec:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
 2aac6f0:	e0bfff17 	ldw	r2,-4(fp)
 2aac6f4:	10800504 	addi	r2,r2,20
 2aac6f8:	10800037 	ldwio	r2,0(r2)
}
 2aac6fc:	e037883a 	mov	sp,fp
 2aac700:	df000017 	ldw	fp,0(sp)
 2aac704:	dec00104 	addi	sp,sp,4
 2aac708:	f800283a 	ret

02aac70c <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
 2aac70c:	defffd04 	addi	sp,sp,-12
 2aac710:	df000215 	stw	fp,8(sp)
 2aac714:	df000204 	addi	fp,sp,8
 2aac718:	e13ffe15 	stw	r4,-8(fp)
 2aac71c:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
 2aac720:	e0bffe17 	ldw	r2,-8(fp)
 2aac724:	10800204 	addi	r2,r2,8
 2aac728:	10800037 	ldwio	r2,0(r2)
 2aac72c:	1007883a 	mov	r3,r2
 2aac730:	e0bfff17 	ldw	r2,-4(fp)
 2aac734:	1884703a 	and	r2,r3,r2
}
 2aac738:	e037883a 	mov	sp,fp
 2aac73c:	df000017 	ldw	fp,0(sp)
 2aac740:	dec00104 	addi	sp,sp,4
 2aac744:	f800283a 	ret

02aac748 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
 2aac748:	defffe04 	addi	sp,sp,-8
 2aac74c:	df000115 	stw	fp,4(sp)
 2aac750:	df000104 	addi	fp,sp,4
 2aac754:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
 2aac758:	e0bfff17 	ldw	r2,-4(fp)
 2aac75c:	10800037 	ldwio	r2,0(r2)
}
 2aac760:	e037883a 	mov	sp,fp
 2aac764:	df000017 	ldw	fp,0(sp)
 2aac768:	dec00104 	addi	sp,sp,4
 2aac76c:	f800283a 	ret

02aac770 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
 2aac770:	defffc04 	addi	sp,sp,-16
 2aac774:	df000315 	stw	fp,12(sp)
 2aac778:	df000304 	addi	fp,sp,12
 2aac77c:	e13ffd15 	stw	r4,-12(fp)
 2aac780:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
 2aac784:	e0bffd17 	ldw	r2,-12(fp)
 2aac788:	10800204 	addi	r2,r2,8
 2aac78c:	e0fffe17 	ldw	r3,-8(fp)
 2aac790:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
 2aac794:	e0bffd17 	ldw	r2,-12(fp)
 2aac798:	10800204 	addi	r2,r2,8
 2aac79c:	10800037 	ldwio	r2,0(r2)
 2aac7a0:	1007883a 	mov	r3,r2
 2aac7a4:	e0bffe17 	ldw	r2,-8(fp)
 2aac7a8:	1884703a 	and	r2,r3,r2
 2aac7ac:	1004c03a 	cmpne	r2,r2,zero
 2aac7b0:	1000021e 	bne	r2,zero,2aac7bc <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
 2aac7b4:	e03fff15 	stw	zero,-4(fp)
 2aac7b8:	00000206 	br	2aac7c4 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 2aac7bc:	00bfffc4 	movi	r2,-1
 2aac7c0:	e0bfff15 	stw	r2,-4(fp)
 2aac7c4:	e0bfff17 	ldw	r2,-4(fp)
}
 2aac7c8:	e037883a 	mov	sp,fp
 2aac7cc:	df000017 	ldw	fp,0(sp)
 2aac7d0:	dec00104 	addi	sp,sp,4
 2aac7d4:	f800283a 	ret

02aac7d8 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
 2aac7d8:	defffc04 	addi	sp,sp,-16
 2aac7dc:	df000315 	stw	fp,12(sp)
 2aac7e0:	df000304 	addi	fp,sp,12
 2aac7e4:	e13ffd15 	stw	r4,-12(fp)
 2aac7e8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
 2aac7ec:	e0bffd17 	ldw	r2,-12(fp)
 2aac7f0:	10800304 	addi	r2,r2,12
 2aac7f4:	e0fffe17 	ldw	r3,-8(fp)
 2aac7f8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
 2aac7fc:	e0bffd17 	ldw	r2,-12(fp)
 2aac800:	10800304 	addi	r2,r2,12
 2aac804:	10800037 	ldwio	r2,0(r2)
 2aac808:	1007883a 	mov	r3,r2
 2aac80c:	e0bffe17 	ldw	r2,-8(fp)
 2aac810:	1880021e 	bne	r3,r2,2aac81c <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
 2aac814:	e03fff15 	stw	zero,-4(fp)
 2aac818:	00000206 	br	2aac824 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 2aac81c:	00bfff84 	movi	r2,-2
 2aac820:	e0bfff15 	stw	r2,-4(fp)
 2aac824:	e0bfff17 	ldw	r2,-4(fp)
}
 2aac828:	e037883a 	mov	sp,fp
 2aac82c:	df000017 	ldw	fp,0(sp)
 2aac830:	dec00104 	addi	sp,sp,4
 2aac834:	f800283a 	ret

02aac838 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
 2aac838:	defffc04 	addi	sp,sp,-16
 2aac83c:	df000315 	stw	fp,12(sp)
 2aac840:	df000304 	addi	fp,sp,12
 2aac844:	e13ffd15 	stw	r4,-12(fp)
 2aac848:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
 2aac84c:	e0bffd17 	ldw	r2,-12(fp)
 2aac850:	10800404 	addi	r2,r2,16
 2aac854:	e0fffe17 	ldw	r3,-8(fp)
 2aac858:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
 2aac85c:	e0bffd17 	ldw	r2,-12(fp)
 2aac860:	10800404 	addi	r2,r2,16
 2aac864:	10800037 	ldwio	r2,0(r2)
 2aac868:	1007883a 	mov	r3,r2
 2aac86c:	e0bffe17 	ldw	r2,-8(fp)
 2aac870:	1880021e 	bne	r3,r2,2aac87c <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
 2aac874:	e03fff15 	stw	zero,-4(fp)
 2aac878:	00000206 	br	2aac884 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 2aac87c:	00bfff44 	movi	r2,-3
 2aac880:	e0bfff15 	stw	r2,-4(fp)
 2aac884:	e0bfff17 	ldw	r2,-4(fp)
}
 2aac888:	e037883a 	mov	sp,fp
 2aac88c:	df000017 	ldw	fp,0(sp)
 2aac890:	dec00104 	addi	sp,sp,4
 2aac894:	f800283a 	ret

02aac898 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
 2aac898:	defffc04 	addi	sp,sp,-16
 2aac89c:	df000315 	stw	fp,12(sp)
 2aac8a0:	df000304 	addi	fp,sp,12
 2aac8a4:	e13ffd15 	stw	r4,-12(fp)
 2aac8a8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
 2aac8ac:	e0bffd17 	ldw	r2,-12(fp)
 2aac8b0:	10800504 	addi	r2,r2,20
 2aac8b4:	e0fffe17 	ldw	r3,-8(fp)
 2aac8b8:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
 2aac8bc:	e0bffd17 	ldw	r2,-12(fp)
 2aac8c0:	10800504 	addi	r2,r2,20
 2aac8c4:	10800037 	ldwio	r2,0(r2)
 2aac8c8:	1007883a 	mov	r3,r2
 2aac8cc:	e0bffe17 	ldw	r2,-8(fp)
 2aac8d0:	1880021e 	bne	r3,r2,2aac8dc <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
 2aac8d4:	e03fff15 	stw	zero,-4(fp)
 2aac8d8:	00000206 	br	2aac8e4 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 2aac8dc:	00bfff44 	movi	r2,-3
 2aac8e0:	e0bfff15 	stw	r2,-4(fp)
 2aac8e4:	e0bfff17 	ldw	r2,-4(fp)
}
 2aac8e8:	e037883a 	mov	sp,fp
 2aac8ec:	df000017 	ldw	fp,0(sp)
 2aac8f0:	dec00104 	addi	sp,sp,4
 2aac8f4:	f800283a 	ret

02aac8f8 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 2aac8f8:	defffa04 	addi	sp,sp,-24
 2aac8fc:	dfc00515 	stw	ra,20(sp)
 2aac900:	df000415 	stw	fp,16(sp)
 2aac904:	df000404 	addi	fp,sp,16
 2aac908:	e13ffc15 	stw	r4,-16(fp)
 2aac90c:	e17ffd15 	stw	r5,-12(fp)
 2aac910:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 2aac914:	e13ffd17 	ldw	r4,-12(fp)
 2aac918:	01400044 	movi	r5,1
 2aac91c:	2aac63c0 	call	2aac63c <altera_avalon_fifo_read_status>
 2aac920:	1004c03a 	cmpne	r2,r2,zero
 2aac924:	1000051e 	bne	r2,zero,2aac93c <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
 2aac928:	e0bffc17 	ldw	r2,-16(fp)
 2aac92c:	e0fffe17 	ldw	r3,-8(fp)
 2aac930:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
 2aac934:	e03fff15 	stw	zero,-4(fp)
 2aac938:	00000206 	br	2aac944 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
 2aac93c:	00bfff04 	movi	r2,-4
 2aac940:	e0bfff15 	stw	r2,-4(fp)
 2aac944:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 2aac948:	e037883a 	mov	sp,fp
 2aac94c:	dfc00117 	ldw	ra,4(sp)
 2aac950:	df000017 	ldw	fp,0(sp)
 2aac954:	dec00204 	addi	sp,sp,8
 2aac958:	f800283a 	ret

02aac95c <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 2aac95c:	defffa04 	addi	sp,sp,-24
 2aac960:	dfc00515 	stw	ra,20(sp)
 2aac964:	df000415 	stw	fp,16(sp)
 2aac968:	df000404 	addi	fp,sp,16
 2aac96c:	e13ffd15 	stw	r4,-12(fp)
 2aac970:	e17ffe15 	stw	r5,-8(fp)
 2aac974:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
 2aac978:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
 2aac97c:	e0bfff17 	ldw	r2,-4(fp)
 2aac980:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 2aac984:	e13ffe17 	ldw	r4,-8(fp)
 2aac988:	01400084 	movi	r5,2
 2aac98c:	2aac63c0 	call	2aac63c <altera_avalon_fifo_read_status>
 2aac990:	1004c03a 	cmpne	r2,r2,zero
 2aac994:	1000071e 	bne	r2,zero,2aac9b4 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 2aac998:	e13ffe17 	ldw	r4,-8(fp)
 2aac99c:	2aac7480 	call	2aac748 <altera_avalon_fifo_read_level>
 2aac9a0:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 2aac9a4:	e0bffd17 	ldw	r2,-12(fp)
 2aac9a8:	10c00037 	ldwio	r3,0(r2)
 2aac9ac:	e0bfff17 	ldw	r2,-4(fp)
 2aac9b0:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
 2aac9b4:	e0bffc17 	ldw	r2,-16(fp)
}
 2aac9b8:	e037883a 	mov	sp,fp
 2aac9bc:	dfc00117 	ldw	ra,4(sp)
 2aac9c0:	df000017 	ldw	fp,0(sp)
 2aac9c4:	dec00204 	addi	sp,sp,8
 2aac9c8:	f800283a 	ret

02aac9cc <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 2aac9cc:	defffb04 	addi	sp,sp,-20
 2aac9d0:	dfc00415 	stw	ra,16(sp)
 2aac9d4:	df000315 	stw	fp,12(sp)
 2aac9d8:	df000304 	addi	fp,sp,12
 2aac9dc:	e13ffd15 	stw	r4,-12(fp)
 2aac9e0:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 2aac9e4:	e13ffe17 	ldw	r4,-8(fp)
 2aac9e8:	01400084 	movi	r5,2
 2aac9ec:	2aac63c0 	call	2aac63c <altera_avalon_fifo_read_status>
 2aac9f0:	1004c03a 	cmpne	r2,r2,zero
 2aac9f4:	1000041e 	bne	r2,zero,2aaca08 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 2aac9f8:	e0bffd17 	ldw	r2,-12(fp)
 2aac9fc:	10800037 	ldwio	r2,0(r2)
 2aaca00:	e0bfff15 	stw	r2,-4(fp)
 2aaca04:	00000106 	br	2aaca0c <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
 2aaca08:	e03fff15 	stw	zero,-4(fp)
 2aaca0c:	e0bfff17 	ldw	r2,-4(fp)
}
 2aaca10:	e037883a 	mov	sp,fp
 2aaca14:	dfc00117 	ldw	ra,4(sp)
 2aaca18:	df000017 	ldw	fp,0(sp)
 2aaca1c:	dec00204 	addi	sp,sp,8
 2aaca20:	f800283a 	ret

02aaca24 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 2aaca24:	defffa04 	addi	sp,sp,-24
 2aaca28:	dfc00515 	stw	ra,20(sp)
 2aaca2c:	df000415 	stw	fp,16(sp)
 2aaca30:	df000404 	addi	fp,sp,16
 2aaca34:	e13ffc15 	stw	r4,-16(fp)
 2aaca38:	e17ffd15 	stw	r5,-12(fp)
 2aaca3c:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 2aaca40:	e13ffd17 	ldw	r4,-12(fp)
 2aaca44:	01400044 	movi	r5,1
 2aaca48:	2aac63c0 	call	2aac63c <altera_avalon_fifo_read_status>
 2aaca4c:	1004c03a 	cmpne	r2,r2,zero
 2aaca50:	1000061e 	bne	r2,zero,2aaca6c <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
 2aaca54:	e0bffc17 	ldw	r2,-16(fp)
 2aaca58:	10800104 	addi	r2,r2,4
 2aaca5c:	e0fffe17 	ldw	r3,-8(fp)
 2aaca60:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
 2aaca64:	e03fff15 	stw	zero,-4(fp)
 2aaca68:	00000206 	br	2aaca74 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
 2aaca6c:	00bfff04 	movi	r2,-4
 2aaca70:	e0bfff15 	stw	r2,-4(fp)
 2aaca74:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 2aaca78:	e037883a 	mov	sp,fp
 2aaca7c:	dfc00117 	ldw	ra,4(sp)
 2aaca80:	df000017 	ldw	fp,0(sp)
 2aaca84:	dec00204 	addi	sp,sp,8
 2aaca88:	f800283a 	ret

02aaca8c <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
 2aaca8c:	defffe04 	addi	sp,sp,-8
 2aaca90:	df000115 	stw	fp,4(sp)
 2aaca94:	df000104 	addi	fp,sp,4
 2aaca98:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
 2aaca9c:	e0bfff17 	ldw	r2,-4(fp)
 2aacaa0:	10800104 	addi	r2,r2,4
 2aacaa4:	10800037 	ldwio	r2,0(r2)
}
 2aacaa8:	e037883a 	mov	sp,fp
 2aacaac:	df000017 	ldw	fp,0(sp)
 2aacab0:	dec00104 	addi	sp,sp,4
 2aacab4:	f800283a 	ret

02aacab8 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
 2aacab8:	defffe04 	addi	sp,sp,-8
 2aacabc:	df000115 	stw	fp,4(sp)
 2aacac0:	df000104 	addi	fp,sp,4
 2aacac4:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
 2aacac8:	e0bfff17 	ldw	r2,-4(fp)
 2aacacc:	10800037 	ldwio	r2,0(r2)
}
 2aacad0:	e037883a 	mov	sp,fp
 2aacad4:	df000017 	ldw	fp,0(sp)
 2aacad8:	dec00104 	addi	sp,sp,4
 2aacadc:	f800283a 	ret

02aacae0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2aacae0:	defffa04 	addi	sp,sp,-24
 2aacae4:	dfc00515 	stw	ra,20(sp)
 2aacae8:	df000415 	stw	fp,16(sp)
 2aacaec:	df000404 	addi	fp,sp,16
 2aacaf0:	e13ffd15 	stw	r4,-12(fp)
 2aacaf4:	e17ffe15 	stw	r5,-8(fp)
 2aacaf8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2aacafc:	e0bffd17 	ldw	r2,-12(fp)
 2aacb00:	10800017 	ldw	r2,0(r2)
 2aacb04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2aacb08:	e0bffc17 	ldw	r2,-16(fp)
 2aacb0c:	11000a04 	addi	r4,r2,40
 2aacb10:	e0bffd17 	ldw	r2,-12(fp)
 2aacb14:	11c00217 	ldw	r7,8(r2)
 2aacb18:	e17ffe17 	ldw	r5,-8(fp)
 2aacb1c:	e1bfff17 	ldw	r6,-4(fp)
 2aacb20:	2aad1280 	call	2aad128 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2aacb24:	e037883a 	mov	sp,fp
 2aacb28:	dfc00117 	ldw	ra,4(sp)
 2aacb2c:	df000017 	ldw	fp,0(sp)
 2aacb30:	dec00204 	addi	sp,sp,8
 2aacb34:	f800283a 	ret

02aacb38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2aacb38:	defffa04 	addi	sp,sp,-24
 2aacb3c:	dfc00515 	stw	ra,20(sp)
 2aacb40:	df000415 	stw	fp,16(sp)
 2aacb44:	df000404 	addi	fp,sp,16
 2aacb48:	e13ffd15 	stw	r4,-12(fp)
 2aacb4c:	e17ffe15 	stw	r5,-8(fp)
 2aacb50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2aacb54:	e0bffd17 	ldw	r2,-12(fp)
 2aacb58:	10800017 	ldw	r2,0(r2)
 2aacb5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2aacb60:	e0bffc17 	ldw	r2,-16(fp)
 2aacb64:	11000a04 	addi	r4,r2,40
 2aacb68:	e0bffd17 	ldw	r2,-12(fp)
 2aacb6c:	11c00217 	ldw	r7,8(r2)
 2aacb70:	e17ffe17 	ldw	r5,-8(fp)
 2aacb74:	e1bfff17 	ldw	r6,-4(fp)
 2aacb78:	2aad34c0 	call	2aad34c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2aacb7c:	e037883a 	mov	sp,fp
 2aacb80:	dfc00117 	ldw	ra,4(sp)
 2aacb84:	df000017 	ldw	fp,0(sp)
 2aacb88:	dec00204 	addi	sp,sp,8
 2aacb8c:	f800283a 	ret

02aacb90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2aacb90:	defffc04 	addi	sp,sp,-16
 2aacb94:	dfc00315 	stw	ra,12(sp)
 2aacb98:	df000215 	stw	fp,8(sp)
 2aacb9c:	df000204 	addi	fp,sp,8
 2aacba0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2aacba4:	e0bfff17 	ldw	r2,-4(fp)
 2aacba8:	10800017 	ldw	r2,0(r2)
 2aacbac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2aacbb0:	e0bffe17 	ldw	r2,-8(fp)
 2aacbb4:	11000a04 	addi	r4,r2,40
 2aacbb8:	e0bfff17 	ldw	r2,-4(fp)
 2aacbbc:	11400217 	ldw	r5,8(r2)
 2aacbc0:	2aacfc00 	call	2aacfc0 <altera_avalon_jtag_uart_close>
}
 2aacbc4:	e037883a 	mov	sp,fp
 2aacbc8:	dfc00117 	ldw	ra,4(sp)
 2aacbcc:	df000017 	ldw	fp,0(sp)
 2aacbd0:	dec00204 	addi	sp,sp,8
 2aacbd4:	f800283a 	ret

02aacbd8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2aacbd8:	defffa04 	addi	sp,sp,-24
 2aacbdc:	dfc00515 	stw	ra,20(sp)
 2aacbe0:	df000415 	stw	fp,16(sp)
 2aacbe4:	df000404 	addi	fp,sp,16
 2aacbe8:	e13ffd15 	stw	r4,-12(fp)
 2aacbec:	e17ffe15 	stw	r5,-8(fp)
 2aacbf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2aacbf4:	e0bffd17 	ldw	r2,-12(fp)
 2aacbf8:	10800017 	ldw	r2,0(r2)
 2aacbfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2aacc00:	e0bffc17 	ldw	r2,-16(fp)
 2aacc04:	11000a04 	addi	r4,r2,40
 2aacc08:	e17ffe17 	ldw	r5,-8(fp)
 2aacc0c:	e1bfff17 	ldw	r6,-4(fp)
 2aacc10:	2aad0340 	call	2aad034 <altera_avalon_jtag_uart_ioctl>
}
 2aacc14:	e037883a 	mov	sp,fp
 2aacc18:	dfc00117 	ldw	ra,4(sp)
 2aacc1c:	df000017 	ldw	fp,0(sp)
 2aacc20:	dec00204 	addi	sp,sp,8
 2aacc24:	f800283a 	ret

02aacc28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2aacc28:	defffa04 	addi	sp,sp,-24
 2aacc2c:	dfc00515 	stw	ra,20(sp)
 2aacc30:	df000415 	stw	fp,16(sp)
 2aacc34:	df000404 	addi	fp,sp,16
 2aacc38:	e13ffd15 	stw	r4,-12(fp)
 2aacc3c:	e17ffe15 	stw	r5,-8(fp)
 2aacc40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2aacc44:	e0fffd17 	ldw	r3,-12(fp)
 2aacc48:	00800044 	movi	r2,1
 2aacc4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2aacc50:	e0bffd17 	ldw	r2,-12(fp)
 2aacc54:	10800017 	ldw	r2,0(r2)
 2aacc58:	11000104 	addi	r4,r2,4
 2aacc5c:	e0bffd17 	ldw	r2,-12(fp)
 2aacc60:	10800817 	ldw	r2,32(r2)
 2aacc64:	1007883a 	mov	r3,r2
 2aacc68:	2005883a 	mov	r2,r4
 2aacc6c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2aacc70:	e13ffe17 	ldw	r4,-8(fp)
 2aacc74:	e17fff17 	ldw	r5,-4(fp)
 2aacc78:	d8000015 	stw	zero,0(sp)
 2aacc7c:	0180aaf4 	movhi	r6,683
 2aacc80:	31b33a04 	addi	r6,r6,-13080
 2aacc84:	e1fffd17 	ldw	r7,-12(fp)
 2aacc88:	2aadb900 	call	2aadb90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2aacc8c:	e0bffd17 	ldw	r2,-12(fp)
 2aacc90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2aacc94:	e0bffd17 	ldw	r2,-12(fp)
 2aacc98:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2aacc9c:	0080aaf4 	movhi	r2,683
 2aacca0:	10886c04 	addi	r2,r2,8624
 2aacca4:	10800017 	ldw	r2,0(r2)
 2aacca8:	100b883a 	mov	r5,r2
 2aaccac:	0180aaf4 	movhi	r6,683
 2aaccb0:	31b3c404 	addi	r6,r6,-12528
 2aaccb4:	e1fffd17 	ldw	r7,-12(fp)
 2aaccb8:	2aad68c0 	call	2aad68c <alt_alarm_start>
 2aaccbc:	1004403a 	cmpge	r2,r2,zero
 2aaccc0:	1000041e 	bne	r2,zero,2aaccd4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2aaccc4:	e0fffd17 	ldw	r3,-12(fp)
 2aaccc8:	00a00034 	movhi	r2,32768
 2aacccc:	10bfffc4 	addi	r2,r2,-1
 2aaccd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2aaccd4:	e037883a 	mov	sp,fp
 2aaccd8:	dfc00117 	ldw	ra,4(sp)
 2aaccdc:	df000017 	ldw	fp,0(sp)
 2aacce0:	dec00204 	addi	sp,sp,8
 2aacce4:	f800283a 	ret

02aacce8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2aacce8:	defff804 	addi	sp,sp,-32
 2aaccec:	df000715 	stw	fp,28(sp)
 2aaccf0:	df000704 	addi	fp,sp,28
 2aaccf4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2aaccf8:	e0bfff17 	ldw	r2,-4(fp)
 2aaccfc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2aacd00:	e0bffe17 	ldw	r2,-8(fp)
 2aacd04:	10800017 	ldw	r2,0(r2)
 2aacd08:	e0bffd15 	stw	r2,-12(fp)
 2aacd0c:	00000006 	br	2aacd10 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2aacd10:	e0bffd17 	ldw	r2,-12(fp)
 2aacd14:	10800104 	addi	r2,r2,4
 2aacd18:	10800037 	ldwio	r2,0(r2)
 2aacd1c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2aacd20:	e0bffc17 	ldw	r2,-16(fp)
 2aacd24:	1080c00c 	andi	r2,r2,768
 2aacd28:	1005003a 	cmpeq	r2,r2,zero
 2aacd2c:	1000741e 	bne	r2,zero,2aacf00 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2aacd30:	e0bffc17 	ldw	r2,-16(fp)
 2aacd34:	1080400c 	andi	r2,r2,256
 2aacd38:	1005003a 	cmpeq	r2,r2,zero
 2aacd3c:	1000351e 	bne	r2,zero,2aace14 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2aacd40:	00800074 	movhi	r2,1
 2aacd44:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2aacd48:	e0bffe17 	ldw	r2,-8(fp)
 2aacd4c:	10800a17 	ldw	r2,40(r2)
 2aacd50:	10800044 	addi	r2,r2,1
 2aacd54:	1081ffcc 	andi	r2,r2,2047
 2aacd58:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2aacd5c:	e0bffe17 	ldw	r2,-8(fp)
 2aacd60:	10c00b17 	ldw	r3,44(r2)
 2aacd64:	e0bffa17 	ldw	r2,-24(fp)
 2aacd68:	18801626 	beq	r3,r2,2aacdc4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2aacd6c:	e0bffd17 	ldw	r2,-12(fp)
 2aacd70:	10800037 	ldwio	r2,0(r2)
 2aacd74:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2aacd78:	e0bffb17 	ldw	r2,-20(fp)
 2aacd7c:	10a0000c 	andi	r2,r2,32768
 2aacd80:	1005003a 	cmpeq	r2,r2,zero
 2aacd84:	10000f1e 	bne	r2,zero,2aacdc4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2aacd88:	e0bffe17 	ldw	r2,-8(fp)
 2aacd8c:	10c00a17 	ldw	r3,40(r2)
 2aacd90:	e0bffb17 	ldw	r2,-20(fp)
 2aacd94:	1009883a 	mov	r4,r2
 2aacd98:	e0bffe17 	ldw	r2,-8(fp)
 2aacd9c:	1885883a 	add	r2,r3,r2
 2aacda0:	10800e04 	addi	r2,r2,56
 2aacda4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2aacda8:	e0bffe17 	ldw	r2,-8(fp)
 2aacdac:	10800a17 	ldw	r2,40(r2)
 2aacdb0:	10800044 	addi	r2,r2,1
 2aacdb4:	10c1ffcc 	andi	r3,r2,2047
 2aacdb8:	e0bffe17 	ldw	r2,-8(fp)
 2aacdbc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2aacdc0:	003fe106 	br	2aacd48 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2aacdc4:	e0bffb17 	ldw	r2,-20(fp)
 2aacdc8:	10bfffec 	andhi	r2,r2,65535
 2aacdcc:	1005003a 	cmpeq	r2,r2,zero
 2aacdd0:	1000101e 	bne	r2,zero,2aace14 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2aacdd4:	e0bffe17 	ldw	r2,-8(fp)
 2aacdd8:	10c00817 	ldw	r3,32(r2)
 2aacddc:	00bfff84 	movi	r2,-2
 2aacde0:	1886703a 	and	r3,r3,r2
 2aacde4:	e0bffe17 	ldw	r2,-8(fp)
 2aacde8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2aacdec:	e0bffd17 	ldw	r2,-12(fp)
 2aacdf0:	11000104 	addi	r4,r2,4
 2aacdf4:	e0bffe17 	ldw	r2,-8(fp)
 2aacdf8:	10800817 	ldw	r2,32(r2)
 2aacdfc:	1007883a 	mov	r3,r2
 2aace00:	2005883a 	mov	r2,r4
 2aace04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2aace08:	e0bffd17 	ldw	r2,-12(fp)
 2aace0c:	10800104 	addi	r2,r2,4
 2aace10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2aace14:	e0bffc17 	ldw	r2,-16(fp)
 2aace18:	1080800c 	andi	r2,r2,512
 2aace1c:	1005003a 	cmpeq	r2,r2,zero
 2aace20:	103fbb1e 	bne	r2,zero,2aacd10 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2aace24:	e0bffc17 	ldw	r2,-16(fp)
 2aace28:	10bfffec 	andhi	r2,r2,65535
 2aace2c:	1004d43a 	srli	r2,r2,16
 2aace30:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2aace34:	00001506 	br	2aace8c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2aace38:	e13ffd17 	ldw	r4,-12(fp)
 2aace3c:	e0bffe17 	ldw	r2,-8(fp)
 2aace40:	10c00d17 	ldw	r3,52(r2)
 2aace44:	e0bffe17 	ldw	r2,-8(fp)
 2aace48:	1885883a 	add	r2,r3,r2
 2aace4c:	10820e04 	addi	r2,r2,2104
 2aace50:	10800003 	ldbu	r2,0(r2)
 2aace54:	10c03fcc 	andi	r3,r2,255
 2aace58:	18c0201c 	xori	r3,r3,128
 2aace5c:	18ffe004 	addi	r3,r3,-128
 2aace60:	2005883a 	mov	r2,r4
 2aace64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2aace68:	e0bffe17 	ldw	r2,-8(fp)
 2aace6c:	10800d17 	ldw	r2,52(r2)
 2aace70:	10800044 	addi	r2,r2,1
 2aace74:	10c1ffcc 	andi	r3,r2,2047
 2aace78:	e0bffe17 	ldw	r2,-8(fp)
 2aace7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2aace80:	e0bff917 	ldw	r2,-28(fp)
 2aace84:	10bfffc4 	addi	r2,r2,-1
 2aace88:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2aace8c:	e0bff917 	ldw	r2,-28(fp)
 2aace90:	1005003a 	cmpeq	r2,r2,zero
 2aace94:	1000051e 	bne	r2,zero,2aaceac <altera_avalon_jtag_uart_irq+0x1c4>
 2aace98:	e0bffe17 	ldw	r2,-8(fp)
 2aace9c:	10c00d17 	ldw	r3,52(r2)
 2aacea0:	e0bffe17 	ldw	r2,-8(fp)
 2aacea4:	10800c17 	ldw	r2,48(r2)
 2aacea8:	18bfe31e 	bne	r3,r2,2aace38 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2aaceac:	e0bff917 	ldw	r2,-28(fp)
 2aaceb0:	1005003a 	cmpeq	r2,r2,zero
 2aaceb4:	103f961e 	bne	r2,zero,2aacd10 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2aaceb8:	e0bffe17 	ldw	r2,-8(fp)
 2aacebc:	10c00817 	ldw	r3,32(r2)
 2aacec0:	00bfff44 	movi	r2,-3
 2aacec4:	1886703a 	and	r3,r3,r2
 2aacec8:	e0bffe17 	ldw	r2,-8(fp)
 2aacecc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2aaced0:	e0bffe17 	ldw	r2,-8(fp)
 2aaced4:	10800017 	ldw	r2,0(r2)
 2aaced8:	11000104 	addi	r4,r2,4
 2aacedc:	e0bffe17 	ldw	r2,-8(fp)
 2aacee0:	10800817 	ldw	r2,32(r2)
 2aacee4:	1007883a 	mov	r3,r2
 2aacee8:	2005883a 	mov	r2,r4
 2aaceec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2aacef0:	e0bffd17 	ldw	r2,-12(fp)
 2aacef4:	10800104 	addi	r2,r2,4
 2aacef8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2aacefc:	003f8406 	br	2aacd10 <altera_avalon_jtag_uart_irq+0x28>
}
 2aacf00:	e037883a 	mov	sp,fp
 2aacf04:	df000017 	ldw	fp,0(sp)
 2aacf08:	dec00104 	addi	sp,sp,4
 2aacf0c:	f800283a 	ret

02aacf10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2aacf10:	defffc04 	addi	sp,sp,-16
 2aacf14:	df000315 	stw	fp,12(sp)
 2aacf18:	df000304 	addi	fp,sp,12
 2aacf1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2aacf20:	e0bfff17 	ldw	r2,-4(fp)
 2aacf24:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2aacf28:	e0bffe17 	ldw	r2,-8(fp)
 2aacf2c:	10800017 	ldw	r2,0(r2)
 2aacf30:	10800104 	addi	r2,r2,4
 2aacf34:	10800037 	ldwio	r2,0(r2)
 2aacf38:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2aacf3c:	e0bffd17 	ldw	r2,-12(fp)
 2aacf40:	1081000c 	andi	r2,r2,1024
 2aacf44:	1005003a 	cmpeq	r2,r2,zero
 2aacf48:	10000c1e 	bne	r2,zero,2aacf7c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2aacf4c:	e0bffe17 	ldw	r2,-8(fp)
 2aacf50:	10800017 	ldw	r2,0(r2)
 2aacf54:	11000104 	addi	r4,r2,4
 2aacf58:	e0bffe17 	ldw	r2,-8(fp)
 2aacf5c:	10800817 	ldw	r2,32(r2)
 2aacf60:	10810014 	ori	r2,r2,1024
 2aacf64:	1007883a 	mov	r3,r2
 2aacf68:	2005883a 	mov	r2,r4
 2aacf6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2aacf70:	e0bffe17 	ldw	r2,-8(fp)
 2aacf74:	10000915 	stw	zero,36(r2)
 2aacf78:	00000a06 	br	2aacfa4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2aacf7c:	e0bffe17 	ldw	r2,-8(fp)
 2aacf80:	10c00917 	ldw	r3,36(r2)
 2aacf84:	00a00034 	movhi	r2,32768
 2aacf88:	10bfff04 	addi	r2,r2,-4
 2aacf8c:	10c00536 	bltu	r2,r3,2aacfa4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2aacf90:	e0bffe17 	ldw	r2,-8(fp)
 2aacf94:	10800917 	ldw	r2,36(r2)
 2aacf98:	10c00044 	addi	r3,r2,1
 2aacf9c:	e0bffe17 	ldw	r2,-8(fp)
 2aacfa0:	10c00915 	stw	r3,36(r2)
 2aacfa4:	0080aaf4 	movhi	r2,683
 2aacfa8:	10886c04 	addi	r2,r2,8624
 2aacfac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2aacfb0:	e037883a 	mov	sp,fp
 2aacfb4:	df000017 	ldw	fp,0(sp)
 2aacfb8:	dec00104 	addi	sp,sp,4
 2aacfbc:	f800283a 	ret

02aacfc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2aacfc0:	defffc04 	addi	sp,sp,-16
 2aacfc4:	df000315 	stw	fp,12(sp)
 2aacfc8:	df000304 	addi	fp,sp,12
 2aacfcc:	e13ffd15 	stw	r4,-12(fp)
 2aacfd0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2aacfd4:	00000706 	br	2aacff4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2aacfd8:	e0bffe17 	ldw	r2,-8(fp)
 2aacfdc:	1090000c 	andi	r2,r2,16384
 2aacfe0:	1005003a 	cmpeq	r2,r2,zero
 2aacfe4:	1000031e 	bne	r2,zero,2aacff4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2aacfe8:	00bffd44 	movi	r2,-11
 2aacfec:	e0bfff15 	stw	r2,-4(fp)
 2aacff0:	00000b06 	br	2aad020 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2aacff4:	e0bffd17 	ldw	r2,-12(fp)
 2aacff8:	10c00d17 	ldw	r3,52(r2)
 2aacffc:	e0bffd17 	ldw	r2,-12(fp)
 2aad000:	10800c17 	ldw	r2,48(r2)
 2aad004:	18800526 	beq	r3,r2,2aad01c <altera_avalon_jtag_uart_close+0x5c>
 2aad008:	e0bffd17 	ldw	r2,-12(fp)
 2aad00c:	10c00917 	ldw	r3,36(r2)
 2aad010:	e0bffd17 	ldw	r2,-12(fp)
 2aad014:	10800117 	ldw	r2,4(r2)
 2aad018:	18bfef36 	bltu	r3,r2,2aacfd8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2aad01c:	e03fff15 	stw	zero,-4(fp)
 2aad020:	e0bfff17 	ldw	r2,-4(fp)
}
 2aad024:	e037883a 	mov	sp,fp
 2aad028:	df000017 	ldw	fp,0(sp)
 2aad02c:	dec00104 	addi	sp,sp,4
 2aad030:	f800283a 	ret

02aad034 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2aad034:	defff804 	addi	sp,sp,-32
 2aad038:	df000715 	stw	fp,28(sp)
 2aad03c:	df000704 	addi	fp,sp,28
 2aad040:	e13ffb15 	stw	r4,-20(fp)
 2aad044:	e17ffc15 	stw	r5,-16(fp)
 2aad048:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2aad04c:	00bff9c4 	movi	r2,-25
 2aad050:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2aad054:	e0bffc17 	ldw	r2,-16(fp)
 2aad058:	e0bfff15 	stw	r2,-4(fp)
 2aad05c:	e0ffff17 	ldw	r3,-4(fp)
 2aad060:	189a8060 	cmpeqi	r2,r3,27137
 2aad064:	1000041e 	bne	r2,zero,2aad078 <altera_avalon_jtag_uart_ioctl+0x44>
 2aad068:	e0ffff17 	ldw	r3,-4(fp)
 2aad06c:	189a80a0 	cmpeqi	r2,r3,27138
 2aad070:	10001b1e 	bne	r2,zero,2aad0e0 <altera_avalon_jtag_uart_ioctl+0xac>
 2aad074:	00002706 	br	2aad114 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2aad078:	e0bffb17 	ldw	r2,-20(fp)
 2aad07c:	10c00117 	ldw	r3,4(r2)
 2aad080:	00a00034 	movhi	r2,32768
 2aad084:	10bfffc4 	addi	r2,r2,-1
 2aad088:	18802226 	beq	r3,r2,2aad114 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2aad08c:	e0bffd17 	ldw	r2,-12(fp)
 2aad090:	10800017 	ldw	r2,0(r2)
 2aad094:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2aad098:	e0bff917 	ldw	r2,-28(fp)
 2aad09c:	10800090 	cmplti	r2,r2,2
 2aad0a0:	1000071e 	bne	r2,zero,2aad0c0 <altera_avalon_jtag_uart_ioctl+0x8c>
 2aad0a4:	e0fff917 	ldw	r3,-28(fp)
 2aad0a8:	00a00034 	movhi	r2,32768
 2aad0ac:	10bfffc4 	addi	r2,r2,-1
 2aad0b0:	18800326 	beq	r3,r2,2aad0c0 <altera_avalon_jtag_uart_ioctl+0x8c>
 2aad0b4:	e0bff917 	ldw	r2,-28(fp)
 2aad0b8:	e0bffe15 	stw	r2,-8(fp)
 2aad0bc:	00000306 	br	2aad0cc <altera_avalon_jtag_uart_ioctl+0x98>
 2aad0c0:	00e00034 	movhi	r3,32768
 2aad0c4:	18ffff84 	addi	r3,r3,-2
 2aad0c8:	e0fffe15 	stw	r3,-8(fp)
 2aad0cc:	e0bffb17 	ldw	r2,-20(fp)
 2aad0d0:	e0fffe17 	ldw	r3,-8(fp)
 2aad0d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2aad0d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2aad0dc:	00000d06 	br	2aad114 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2aad0e0:	e0bffb17 	ldw	r2,-20(fp)
 2aad0e4:	10c00117 	ldw	r3,4(r2)
 2aad0e8:	00a00034 	movhi	r2,32768
 2aad0ec:	10bfffc4 	addi	r2,r2,-1
 2aad0f0:	18800826 	beq	r3,r2,2aad114 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2aad0f4:	e13ffd17 	ldw	r4,-12(fp)
 2aad0f8:	e0bffb17 	ldw	r2,-20(fp)
 2aad0fc:	10c00917 	ldw	r3,36(r2)
 2aad100:	e0bffb17 	ldw	r2,-20(fp)
 2aad104:	10800117 	ldw	r2,4(r2)
 2aad108:	1885803a 	cmpltu	r2,r3,r2
 2aad10c:	20800015 	stw	r2,0(r4)
      rc = 0;
 2aad110:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2aad114:	e0bffa17 	ldw	r2,-24(fp)
}
 2aad118:	e037883a 	mov	sp,fp
 2aad11c:	df000017 	ldw	fp,0(sp)
 2aad120:	dec00104 	addi	sp,sp,4
 2aad124:	f800283a 	ret

02aad128 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2aad128:	defff204 	addi	sp,sp,-56
 2aad12c:	dfc00d15 	stw	ra,52(sp)
 2aad130:	df000c15 	stw	fp,48(sp)
 2aad134:	df000c04 	addi	fp,sp,48
 2aad138:	e13ffb15 	stw	r4,-20(fp)
 2aad13c:	e17ffc15 	stw	r5,-16(fp)
 2aad140:	e1bffd15 	stw	r6,-12(fp)
 2aad144:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2aad148:	e0bffc17 	ldw	r2,-16(fp)
 2aad14c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2aad150:	00004806 	br	2aad274 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2aad154:	e0bffb17 	ldw	r2,-20(fp)
 2aad158:	10800a17 	ldw	r2,40(r2)
 2aad15c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2aad160:	e0bffb17 	ldw	r2,-20(fp)
 2aad164:	10800b17 	ldw	r2,44(r2)
 2aad168:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2aad16c:	e0fff717 	ldw	r3,-36(fp)
 2aad170:	e0bff617 	ldw	r2,-40(fp)
 2aad174:	18800536 	bltu	r3,r2,2aad18c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2aad178:	e0bff717 	ldw	r2,-36(fp)
 2aad17c:	e0fff617 	ldw	r3,-40(fp)
 2aad180:	10c5c83a 	sub	r2,r2,r3
 2aad184:	e0bff815 	stw	r2,-32(fp)
 2aad188:	00000406 	br	2aad19c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2aad18c:	00820004 	movi	r2,2048
 2aad190:	e0fff617 	ldw	r3,-40(fp)
 2aad194:	10c5c83a 	sub	r2,r2,r3
 2aad198:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2aad19c:	e0bff817 	ldw	r2,-32(fp)
 2aad1a0:	1005003a 	cmpeq	r2,r2,zero
 2aad1a4:	10001f1e 	bne	r2,zero,2aad224 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2aad1a8:	e0fffd17 	ldw	r3,-12(fp)
 2aad1ac:	e0bff817 	ldw	r2,-32(fp)
 2aad1b0:	1880022e 	bgeu	r3,r2,2aad1bc <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2aad1b4:	e0bffd17 	ldw	r2,-12(fp)
 2aad1b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2aad1bc:	e0bffb17 	ldw	r2,-20(fp)
 2aad1c0:	10c00e04 	addi	r3,r2,56
 2aad1c4:	e0bff617 	ldw	r2,-40(fp)
 2aad1c8:	1887883a 	add	r3,r3,r2
 2aad1cc:	e0bffa17 	ldw	r2,-24(fp)
 2aad1d0:	1009883a 	mov	r4,r2
 2aad1d4:	180b883a 	mov	r5,r3
 2aad1d8:	e1bff817 	ldw	r6,-32(fp)
 2aad1dc:	2aae83c0 	call	2aae83c <memcpy>
      ptr   += n;
 2aad1e0:	e0fff817 	ldw	r3,-32(fp)
 2aad1e4:	e0bffa17 	ldw	r2,-24(fp)
 2aad1e8:	10c5883a 	add	r2,r2,r3
 2aad1ec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2aad1f0:	e0fffd17 	ldw	r3,-12(fp)
 2aad1f4:	e0bff817 	ldw	r2,-32(fp)
 2aad1f8:	1885c83a 	sub	r2,r3,r2
 2aad1fc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2aad200:	e0fff617 	ldw	r3,-40(fp)
 2aad204:	e0bff817 	ldw	r2,-32(fp)
 2aad208:	1885883a 	add	r2,r3,r2
 2aad20c:	10c1ffcc 	andi	r3,r2,2047
 2aad210:	e0bffb17 	ldw	r2,-20(fp)
 2aad214:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2aad218:	e0bffd17 	ldw	r2,-12(fp)
 2aad21c:	10800048 	cmpgei	r2,r2,1
 2aad220:	103fcc1e 	bne	r2,zero,2aad154 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2aad224:	e0fffa17 	ldw	r3,-24(fp)
 2aad228:	e0bffc17 	ldw	r2,-16(fp)
 2aad22c:	1880141e 	bne	r3,r2,2aad280 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2aad230:	e0bffe17 	ldw	r2,-8(fp)
 2aad234:	1090000c 	andi	r2,r2,16384
 2aad238:	1004c03a 	cmpne	r2,r2,zero
 2aad23c:	1000101e 	bne	r2,zero,2aad280 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2aad240:	e0bffb17 	ldw	r2,-20(fp)
 2aad244:	10c00a17 	ldw	r3,40(r2)
 2aad248:	e0bff717 	ldw	r2,-36(fp)
 2aad24c:	1880051e 	bne	r3,r2,2aad264 <altera_avalon_jtag_uart_read+0x13c>
 2aad250:	e0bffb17 	ldw	r2,-20(fp)
 2aad254:	10c00917 	ldw	r3,36(r2)
 2aad258:	e0bffb17 	ldw	r2,-20(fp)
 2aad25c:	10800117 	ldw	r2,4(r2)
 2aad260:	18bff736 	bltu	r3,r2,2aad240 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2aad264:	e0bffb17 	ldw	r2,-20(fp)
 2aad268:	10c00a17 	ldw	r3,40(r2)
 2aad26c:	e0bff717 	ldw	r2,-36(fp)
 2aad270:	18800326 	beq	r3,r2,2aad280 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2aad274:	e0bffd17 	ldw	r2,-12(fp)
 2aad278:	10800048 	cmpgei	r2,r2,1
 2aad27c:	103fb51e 	bne	r2,zero,2aad154 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2aad280:	e0fffa17 	ldw	r3,-24(fp)
 2aad284:	e0bffc17 	ldw	r2,-16(fp)
 2aad288:	18801926 	beq	r3,r2,2aad2f0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aad28c:	0005303a 	rdctl	r2,status
 2aad290:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aad294:	e0fff517 	ldw	r3,-44(fp)
 2aad298:	00bfff84 	movi	r2,-2
 2aad29c:	1884703a 	and	r2,r3,r2
 2aad2a0:	1001703a 	wrctl	status,r2
  
  return context;
 2aad2a4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2aad2a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2aad2ac:	e0bffb17 	ldw	r2,-20(fp)
 2aad2b0:	10800817 	ldw	r2,32(r2)
 2aad2b4:	10c00054 	ori	r3,r2,1
 2aad2b8:	e0bffb17 	ldw	r2,-20(fp)
 2aad2bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2aad2c0:	e0bffb17 	ldw	r2,-20(fp)
 2aad2c4:	10800017 	ldw	r2,0(r2)
 2aad2c8:	11000104 	addi	r4,r2,4
 2aad2cc:	e0bffb17 	ldw	r2,-20(fp)
 2aad2d0:	10800817 	ldw	r2,32(r2)
 2aad2d4:	1007883a 	mov	r3,r2
 2aad2d8:	2005883a 	mov	r2,r4
 2aad2dc:	10c00035 	stwio	r3,0(r2)
 2aad2e0:	e0bff917 	ldw	r2,-28(fp)
 2aad2e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aad2e8:	e0bff417 	ldw	r2,-48(fp)
 2aad2ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2aad2f0:	e0fffa17 	ldw	r3,-24(fp)
 2aad2f4:	e0bffc17 	ldw	r2,-16(fp)
 2aad2f8:	18800526 	beq	r3,r2,2aad310 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2aad2fc:	e0fffa17 	ldw	r3,-24(fp)
 2aad300:	e0bffc17 	ldw	r2,-16(fp)
 2aad304:	1887c83a 	sub	r3,r3,r2
 2aad308:	e0ffff15 	stw	r3,-4(fp)
 2aad30c:	00000906 	br	2aad334 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2aad310:	e0bffe17 	ldw	r2,-8(fp)
 2aad314:	1090000c 	andi	r2,r2,16384
 2aad318:	1005003a 	cmpeq	r2,r2,zero
 2aad31c:	1000031e 	bne	r2,zero,2aad32c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2aad320:	00bffd44 	movi	r2,-11
 2aad324:	e0bfff15 	stw	r2,-4(fp)
 2aad328:	00000206 	br	2aad334 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2aad32c:	00bffec4 	movi	r2,-5
 2aad330:	e0bfff15 	stw	r2,-4(fp)
 2aad334:	e0bfff17 	ldw	r2,-4(fp)
}
 2aad338:	e037883a 	mov	sp,fp
 2aad33c:	dfc00117 	ldw	ra,4(sp)
 2aad340:	df000017 	ldw	fp,0(sp)
 2aad344:	dec00204 	addi	sp,sp,8
 2aad348:	f800283a 	ret

02aad34c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2aad34c:	defff204 	addi	sp,sp,-56
 2aad350:	dfc00d15 	stw	ra,52(sp)
 2aad354:	df000c15 	stw	fp,48(sp)
 2aad358:	df000c04 	addi	fp,sp,48
 2aad35c:	e13ffb15 	stw	r4,-20(fp)
 2aad360:	e17ffc15 	stw	r5,-16(fp)
 2aad364:	e1bffd15 	stw	r6,-12(fp)
 2aad368:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2aad36c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2aad370:	e0bffc17 	ldw	r2,-16(fp)
 2aad374:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2aad378:	00003a06 	br	2aad464 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2aad37c:	e0bffb17 	ldw	r2,-20(fp)
 2aad380:	10800c17 	ldw	r2,48(r2)
 2aad384:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 2aad388:	e0bffb17 	ldw	r2,-20(fp)
 2aad38c:	10800d17 	ldw	r2,52(r2)
 2aad390:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2aad394:	e0fffa17 	ldw	r3,-24(fp)
 2aad398:	e0bff917 	ldw	r2,-28(fp)
 2aad39c:	1880062e 	bgeu	r3,r2,2aad3b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2aad3a0:	e0fff917 	ldw	r3,-28(fp)
 2aad3a4:	e0bffa17 	ldw	r2,-24(fp)
 2aad3a8:	1885c83a 	sub	r2,r3,r2
 2aad3ac:	10bfffc4 	addi	r2,r2,-1
 2aad3b0:	e0bff815 	stw	r2,-32(fp)
 2aad3b4:	00000c06 	br	2aad3e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2aad3b8:	e0bff917 	ldw	r2,-28(fp)
 2aad3bc:	1005003a 	cmpeq	r2,r2,zero
 2aad3c0:	1000051e 	bne	r2,zero,2aad3d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2aad3c4:	00820004 	movi	r2,2048
 2aad3c8:	e0fffa17 	ldw	r3,-24(fp)
 2aad3cc:	10c5c83a 	sub	r2,r2,r3
 2aad3d0:	e0bff815 	stw	r2,-32(fp)
 2aad3d4:	00000406 	br	2aad3e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2aad3d8:	0081ffc4 	movi	r2,2047
 2aad3dc:	e0fffa17 	ldw	r3,-24(fp)
 2aad3e0:	10c5c83a 	sub	r2,r2,r3
 2aad3e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2aad3e8:	e0bff817 	ldw	r2,-32(fp)
 2aad3ec:	1005003a 	cmpeq	r2,r2,zero
 2aad3f0:	10001f1e 	bne	r2,zero,2aad470 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2aad3f4:	e0fffd17 	ldw	r3,-12(fp)
 2aad3f8:	e0bff817 	ldw	r2,-32(fp)
 2aad3fc:	1880022e 	bgeu	r3,r2,2aad408 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2aad400:	e0bffd17 	ldw	r2,-12(fp)
 2aad404:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2aad408:	e0bffb17 	ldw	r2,-20(fp)
 2aad40c:	10c20e04 	addi	r3,r2,2104
 2aad410:	e0bffa17 	ldw	r2,-24(fp)
 2aad414:	1885883a 	add	r2,r3,r2
 2aad418:	e0fffc17 	ldw	r3,-16(fp)
 2aad41c:	1009883a 	mov	r4,r2
 2aad420:	180b883a 	mov	r5,r3
 2aad424:	e1bff817 	ldw	r6,-32(fp)
 2aad428:	2aae83c0 	call	2aae83c <memcpy>
      ptr   += n;
 2aad42c:	e0fff817 	ldw	r3,-32(fp)
 2aad430:	e0bffc17 	ldw	r2,-16(fp)
 2aad434:	10c5883a 	add	r2,r2,r3
 2aad438:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2aad43c:	e0fffd17 	ldw	r3,-12(fp)
 2aad440:	e0bff817 	ldw	r2,-32(fp)
 2aad444:	1885c83a 	sub	r2,r3,r2
 2aad448:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2aad44c:	e0fffa17 	ldw	r3,-24(fp)
 2aad450:	e0bff817 	ldw	r2,-32(fp)
 2aad454:	1885883a 	add	r2,r3,r2
 2aad458:	10c1ffcc 	andi	r3,r2,2047
 2aad45c:	e0bffb17 	ldw	r2,-20(fp)
 2aad460:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2aad464:	e0bffd17 	ldw	r2,-12(fp)
 2aad468:	10800048 	cmpgei	r2,r2,1
 2aad46c:	103fc31e 	bne	r2,zero,2aad37c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aad470:	0005303a 	rdctl	r2,status
 2aad474:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aad478:	e0fff517 	ldw	r3,-44(fp)
 2aad47c:	00bfff84 	movi	r2,-2
 2aad480:	1884703a 	and	r2,r3,r2
 2aad484:	1001703a 	wrctl	status,r2
  
  return context;
 2aad488:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2aad48c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2aad490:	e0bffb17 	ldw	r2,-20(fp)
 2aad494:	10800817 	ldw	r2,32(r2)
 2aad498:	10c00094 	ori	r3,r2,2
 2aad49c:	e0bffb17 	ldw	r2,-20(fp)
 2aad4a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2aad4a4:	e0bffb17 	ldw	r2,-20(fp)
 2aad4a8:	10800017 	ldw	r2,0(r2)
 2aad4ac:	11000104 	addi	r4,r2,4
 2aad4b0:	e0bffb17 	ldw	r2,-20(fp)
 2aad4b4:	10800817 	ldw	r2,32(r2)
 2aad4b8:	1007883a 	mov	r3,r2
 2aad4bc:	2005883a 	mov	r2,r4
 2aad4c0:	10c00035 	stwio	r3,0(r2)
 2aad4c4:	e0bff717 	ldw	r2,-36(fp)
 2aad4c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aad4cc:	e0bff417 	ldw	r2,-48(fp)
 2aad4d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2aad4d4:	e0bffd17 	ldw	r2,-12(fp)
 2aad4d8:	10800050 	cmplti	r2,r2,1
 2aad4dc:	1000111e 	bne	r2,zero,2aad524 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2aad4e0:	e0bffe17 	ldw	r2,-8(fp)
 2aad4e4:	1090000c 	andi	r2,r2,16384
 2aad4e8:	1004c03a 	cmpne	r2,r2,zero
 2aad4ec:	1000101e 	bne	r2,zero,2aad530 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2aad4f0:	e0bffb17 	ldw	r2,-20(fp)
 2aad4f4:	10c00d17 	ldw	r3,52(r2)
 2aad4f8:	e0bff917 	ldw	r2,-28(fp)
 2aad4fc:	1880051e 	bne	r3,r2,2aad514 <altera_avalon_jtag_uart_write+0x1c8>
 2aad500:	e0bffb17 	ldw	r2,-20(fp)
 2aad504:	10c00917 	ldw	r3,36(r2)
 2aad508:	e0bffb17 	ldw	r2,-20(fp)
 2aad50c:	10800117 	ldw	r2,4(r2)
 2aad510:	18bff736 	bltu	r3,r2,2aad4f0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2aad514:	e0bffb17 	ldw	r2,-20(fp)
 2aad518:	10c00d17 	ldw	r3,52(r2)
 2aad51c:	e0bff917 	ldw	r2,-28(fp)
 2aad520:	18800326 	beq	r3,r2,2aad530 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 2aad524:	e0bffd17 	ldw	r2,-12(fp)
 2aad528:	10800048 	cmpgei	r2,r2,1
 2aad52c:	103fcd1e 	bne	r2,zero,2aad464 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2aad530:	e0fffc17 	ldw	r3,-16(fp)
 2aad534:	e0bff617 	ldw	r2,-40(fp)
 2aad538:	18800526 	beq	r3,r2,2aad550 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2aad53c:	e0fffc17 	ldw	r3,-16(fp)
 2aad540:	e0bff617 	ldw	r2,-40(fp)
 2aad544:	1887c83a 	sub	r3,r3,r2
 2aad548:	e0ffff15 	stw	r3,-4(fp)
 2aad54c:	00000906 	br	2aad574 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2aad550:	e0bffe17 	ldw	r2,-8(fp)
 2aad554:	1090000c 	andi	r2,r2,16384
 2aad558:	1005003a 	cmpeq	r2,r2,zero
 2aad55c:	1000031e 	bne	r2,zero,2aad56c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2aad560:	00bffd44 	movi	r2,-11
 2aad564:	e0bfff15 	stw	r2,-4(fp)
 2aad568:	00000206 	br	2aad574 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 2aad56c:	00bffec4 	movi	r2,-5
 2aad570:	e0bfff15 	stw	r2,-4(fp)
 2aad574:	e0bfff17 	ldw	r2,-4(fp)
}
 2aad578:	e037883a 	mov	sp,fp
 2aad57c:	dfc00117 	ldw	ra,4(sp)
 2aad580:	df000017 	ldw	fp,0(sp)
 2aad584:	dec00204 	addi	sp,sp,8
 2aad588:	f800283a 	ret

02aad58c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2aad58c:	defffa04 	addi	sp,sp,-24
 2aad590:	dfc00515 	stw	ra,20(sp)
 2aad594:	df000415 	stw	fp,16(sp)
 2aad598:	df000404 	addi	fp,sp,16
 2aad59c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2aad5a0:	e0bfff17 	ldw	r2,-4(fp)
 2aad5a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2aad5a8:	e0bfff17 	ldw	r2,-4(fp)
 2aad5ac:	10800104 	addi	r2,r2,4
 2aad5b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aad5b4:	0005303a 	rdctl	r2,status
 2aad5b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aad5bc:	e0fffd17 	ldw	r3,-12(fp)
 2aad5c0:	00bfff84 	movi	r2,-2
 2aad5c4:	1884703a 	and	r2,r3,r2
 2aad5c8:	1001703a 	wrctl	status,r2
  
  return context;
 2aad5cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2aad5d0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 2aad5d4:	2aae3540 	call	2aae354 <alt_tick>
 2aad5d8:	e0bffe17 	ldw	r2,-8(fp)
 2aad5dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aad5e0:	e0bffc17 	ldw	r2,-16(fp)
 2aad5e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2aad5e8:	e037883a 	mov	sp,fp
 2aad5ec:	dfc00117 	ldw	ra,4(sp)
 2aad5f0:	df000017 	ldw	fp,0(sp)
 2aad5f4:	dec00204 	addi	sp,sp,8
 2aad5f8:	f800283a 	ret

02aad5fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2aad5fc:	defff804 	addi	sp,sp,-32
 2aad600:	dfc00715 	stw	ra,28(sp)
 2aad604:	df000615 	stw	fp,24(sp)
 2aad608:	df000604 	addi	fp,sp,24
 2aad60c:	e13ffc15 	stw	r4,-16(fp)
 2aad610:	e17ffd15 	stw	r5,-12(fp)
 2aad614:	e1bffe15 	stw	r6,-8(fp)
 2aad618:	e1ffff15 	stw	r7,-4(fp)
 2aad61c:	e0bfff17 	ldw	r2,-4(fp)
 2aad620:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2aad624:	0080aaf4 	movhi	r2,683
 2aad628:	10886c04 	addi	r2,r2,8624
 2aad62c:	10800017 	ldw	r2,0(r2)
 2aad630:	1004c03a 	cmpne	r2,r2,zero
 2aad634:	1000041e 	bne	r2,zero,2aad648 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2aad638:	00c0aaf4 	movhi	r3,683
 2aad63c:	18c86c04 	addi	r3,r3,8624
 2aad640:	e0bffb17 	ldw	r2,-20(fp)
 2aad644:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2aad648:	e0bffc17 	ldw	r2,-16(fp)
 2aad64c:	10800104 	addi	r2,r2,4
 2aad650:	1007883a 	mov	r3,r2
 2aad654:	008001c4 	movi	r2,7
 2aad658:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2aad65c:	d8000015 	stw	zero,0(sp)
 2aad660:	e13ffd17 	ldw	r4,-12(fp)
 2aad664:	e17ffe17 	ldw	r5,-8(fp)
 2aad668:	0180aaf4 	movhi	r6,683
 2aad66c:	31b56304 	addi	r6,r6,-10868
 2aad670:	e1fffc17 	ldw	r7,-16(fp)
 2aad674:	2aadb900 	call	2aadb90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2aad678:	e037883a 	mov	sp,fp
 2aad67c:	dfc00117 	ldw	ra,4(sp)
 2aad680:	df000017 	ldw	fp,0(sp)
 2aad684:	dec00204 	addi	sp,sp,8
 2aad688:	f800283a 	ret

02aad68c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2aad68c:	defff404 	addi	sp,sp,-48
 2aad690:	df000b15 	stw	fp,44(sp)
 2aad694:	df000b04 	addi	fp,sp,44
 2aad698:	e13ffb15 	stw	r4,-20(fp)
 2aad69c:	e17ffc15 	stw	r5,-16(fp)
 2aad6a0:	e1bffd15 	stw	r6,-12(fp)
 2aad6a4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2aad6a8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2aad6ac:	0080aaf4 	movhi	r2,683
 2aad6b0:	10886c04 	addi	r2,r2,8624
 2aad6b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2aad6b8:	1005003a 	cmpeq	r2,r2,zero
 2aad6bc:	1000411e 	bne	r2,zero,2aad7c4 <alt_alarm_start+0x138>
  {
    if (alarm)
 2aad6c0:	e0bffb17 	ldw	r2,-20(fp)
 2aad6c4:	1005003a 	cmpeq	r2,r2,zero
 2aad6c8:	10003b1e 	bne	r2,zero,2aad7b8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2aad6cc:	e0fffb17 	ldw	r3,-20(fp)
 2aad6d0:	e0bffd17 	ldw	r2,-12(fp)
 2aad6d4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2aad6d8:	e0fffb17 	ldw	r3,-20(fp)
 2aad6dc:	e0bffe17 	ldw	r2,-8(fp)
 2aad6e0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aad6e4:	0005303a 	rdctl	r2,status
 2aad6e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aad6ec:	e0fff817 	ldw	r3,-32(fp)
 2aad6f0:	00bfff84 	movi	r2,-2
 2aad6f4:	1884703a 	and	r2,r3,r2
 2aad6f8:	1001703a 	wrctl	status,r2
  
  return context;
 2aad6fc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2aad700:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2aad704:	0080aaf4 	movhi	r2,683
 2aad708:	10886d04 	addi	r2,r2,8628
 2aad70c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2aad710:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2aad714:	e0fffc17 	ldw	r3,-16(fp)
 2aad718:	e0bff917 	ldw	r2,-28(fp)
 2aad71c:	1885883a 	add	r2,r3,r2
 2aad720:	10c00044 	addi	r3,r2,1
 2aad724:	e0bffb17 	ldw	r2,-20(fp)
 2aad728:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2aad72c:	e0bffb17 	ldw	r2,-20(fp)
 2aad730:	10c00217 	ldw	r3,8(r2)
 2aad734:	e0bff917 	ldw	r2,-28(fp)
 2aad738:	1880042e 	bgeu	r3,r2,2aad74c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2aad73c:	e0fffb17 	ldw	r3,-20(fp)
 2aad740:	00800044 	movi	r2,1
 2aad744:	18800405 	stb	r2,16(r3)
 2aad748:	00000206 	br	2aad754 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2aad74c:	e0bffb17 	ldw	r2,-20(fp)
 2aad750:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2aad754:	e0fffb17 	ldw	r3,-20(fp)
 2aad758:	0080aaf4 	movhi	r2,683
 2aad75c:	1081ca04 	addi	r2,r2,1832
 2aad760:	e0bff615 	stw	r2,-40(fp)
 2aad764:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2aad768:	e0fff717 	ldw	r3,-36(fp)
 2aad76c:	e0bff617 	ldw	r2,-40(fp)
 2aad770:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2aad774:	e0bff617 	ldw	r2,-40(fp)
 2aad778:	10c00017 	ldw	r3,0(r2)
 2aad77c:	e0bff717 	ldw	r2,-36(fp)
 2aad780:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2aad784:	e0bff617 	ldw	r2,-40(fp)
 2aad788:	10c00017 	ldw	r3,0(r2)
 2aad78c:	e0bff717 	ldw	r2,-36(fp)
 2aad790:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2aad794:	e0fff617 	ldw	r3,-40(fp)
 2aad798:	e0bff717 	ldw	r2,-36(fp)
 2aad79c:	18800015 	stw	r2,0(r3)
 2aad7a0:	e0bffa17 	ldw	r2,-24(fp)
 2aad7a4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aad7a8:	e0bff517 	ldw	r2,-44(fp)
 2aad7ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2aad7b0:	e03fff15 	stw	zero,-4(fp)
 2aad7b4:	00000506 	br	2aad7cc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 2aad7b8:	00bffa84 	movi	r2,-22
 2aad7bc:	e0bfff15 	stw	r2,-4(fp)
 2aad7c0:	00000206 	br	2aad7cc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 2aad7c4:	00bfde84 	movi	r2,-134
 2aad7c8:	e0bfff15 	stw	r2,-4(fp)
 2aad7cc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2aad7d0:	e037883a 	mov	sp,fp
 2aad7d4:	df000017 	ldw	fp,0(sp)
 2aad7d8:	dec00104 	addi	sp,sp,4
 2aad7dc:	f800283a 	ret

02aad7e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2aad7e0:	defff804 	addi	sp,sp,-32
 2aad7e4:	dfc00715 	stw	ra,28(sp)
 2aad7e8:	df000615 	stw	fp,24(sp)
 2aad7ec:	df000604 	addi	fp,sp,24
 2aad7f0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2aad7f4:	e0bffc17 	ldw	r2,-16(fp)
 2aad7f8:	1004803a 	cmplt	r2,r2,zero
 2aad7fc:	1000081e 	bne	r2,zero,2aad820 <close+0x40>
 2aad800:	e0bffc17 	ldw	r2,-16(fp)
 2aad804:	10800324 	muli	r2,r2,12
 2aad808:	1007883a 	mov	r3,r2
 2aad80c:	0080aaf4 	movhi	r2,683
 2aad810:	10815904 	addi	r2,r2,1380
 2aad814:	1887883a 	add	r3,r3,r2
 2aad818:	e0ffff15 	stw	r3,-4(fp)
 2aad81c:	00000106 	br	2aad824 <close+0x44>
 2aad820:	e03fff15 	stw	zero,-4(fp)
 2aad824:	e0bfff17 	ldw	r2,-4(fp)
 2aad828:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2aad82c:	e0bffb17 	ldw	r2,-20(fp)
 2aad830:	1005003a 	cmpeq	r2,r2,zero
 2aad834:	10001d1e 	bne	r2,zero,2aad8ac <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2aad838:	e0bffb17 	ldw	r2,-20(fp)
 2aad83c:	10800017 	ldw	r2,0(r2)
 2aad840:	10800417 	ldw	r2,16(r2)
 2aad844:	1005003a 	cmpeq	r2,r2,zero
 2aad848:	1000071e 	bne	r2,zero,2aad868 <close+0x88>
 2aad84c:	e0bffb17 	ldw	r2,-20(fp)
 2aad850:	10800017 	ldw	r2,0(r2)
 2aad854:	10800417 	ldw	r2,16(r2)
 2aad858:	e13ffb17 	ldw	r4,-20(fp)
 2aad85c:	103ee83a 	callr	r2
 2aad860:	e0bffe15 	stw	r2,-8(fp)
 2aad864:	00000106 	br	2aad86c <close+0x8c>
 2aad868:	e03ffe15 	stw	zero,-8(fp)
 2aad86c:	e0bffe17 	ldw	r2,-8(fp)
 2aad870:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2aad874:	e13ffc17 	ldw	r4,-16(fp)
 2aad878:	2aae25c0 	call	2aae25c <alt_release_fd>
    if (rval < 0)
 2aad87c:	e0bffa17 	ldw	r2,-24(fp)
 2aad880:	1004403a 	cmpge	r2,r2,zero
 2aad884:	1000071e 	bne	r2,zero,2aad8a4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 2aad888:	2aad8dc0 	call	2aad8dc <alt_get_errno>
 2aad88c:	e0fffa17 	ldw	r3,-24(fp)
 2aad890:	00c7c83a 	sub	r3,zero,r3
 2aad894:	10c00015 	stw	r3,0(r2)
      return -1;
 2aad898:	00bfffc4 	movi	r2,-1
 2aad89c:	e0bffd15 	stw	r2,-12(fp)
 2aad8a0:	00000806 	br	2aad8c4 <close+0xe4>
    }
    return 0;
 2aad8a4:	e03ffd15 	stw	zero,-12(fp)
 2aad8a8:	00000606 	br	2aad8c4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2aad8ac:	2aad8dc0 	call	2aad8dc <alt_get_errno>
 2aad8b0:	1007883a 	mov	r3,r2
 2aad8b4:	00801444 	movi	r2,81
 2aad8b8:	18800015 	stw	r2,0(r3)
    return -1;
 2aad8bc:	00bfffc4 	movi	r2,-1
 2aad8c0:	e0bffd15 	stw	r2,-12(fp)
 2aad8c4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2aad8c8:	e037883a 	mov	sp,fp
 2aad8cc:	dfc00117 	ldw	ra,4(sp)
 2aad8d0:	df000017 	ldw	fp,0(sp)
 2aad8d4:	dec00204 	addi	sp,sp,8
 2aad8d8:	f800283a 	ret

02aad8dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2aad8dc:	defffd04 	addi	sp,sp,-12
 2aad8e0:	dfc00215 	stw	ra,8(sp)
 2aad8e4:	df000115 	stw	fp,4(sp)
 2aad8e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2aad8ec:	0080aaf4 	movhi	r2,683
 2aad8f0:	1081c804 	addi	r2,r2,1824
 2aad8f4:	10800017 	ldw	r2,0(r2)
 2aad8f8:	1005003a 	cmpeq	r2,r2,zero
 2aad8fc:	1000061e 	bne	r2,zero,2aad918 <alt_get_errno+0x3c>
 2aad900:	0080aaf4 	movhi	r2,683
 2aad904:	1081c804 	addi	r2,r2,1824
 2aad908:	10800017 	ldw	r2,0(r2)
 2aad90c:	103ee83a 	callr	r2
 2aad910:	e0bfff15 	stw	r2,-4(fp)
 2aad914:	00000306 	br	2aad924 <alt_get_errno+0x48>
 2aad918:	0080aaf4 	movhi	r2,683
 2aad91c:	10886704 	addi	r2,r2,8604
 2aad920:	e0bfff15 	stw	r2,-4(fp)
 2aad924:	e0bfff17 	ldw	r2,-4(fp)
}
 2aad928:	e037883a 	mov	sp,fp
 2aad92c:	dfc00117 	ldw	ra,4(sp)
 2aad930:	df000017 	ldw	fp,0(sp)
 2aad934:	dec00204 	addi	sp,sp,8
 2aad938:	f800283a 	ret

02aad93c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2aad93c:	deffff04 	addi	sp,sp,-4
 2aad940:	df000015 	stw	fp,0(sp)
 2aad944:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2aad948:	e037883a 	mov	sp,fp
 2aad94c:	df000017 	ldw	fp,0(sp)
 2aad950:	dec00104 	addi	sp,sp,4
 2aad954:	f800283a 	ret

02aad958 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2aad958:	defffc04 	addi	sp,sp,-16
 2aad95c:	df000315 	stw	fp,12(sp)
 2aad960:	df000304 	addi	fp,sp,12
 2aad964:	e13ffd15 	stw	r4,-12(fp)
 2aad968:	e17ffe15 	stw	r5,-8(fp)
 2aad96c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2aad970:	e0bfff17 	ldw	r2,-4(fp)
}
 2aad974:	e037883a 	mov	sp,fp
 2aad978:	df000017 	ldw	fp,0(sp)
 2aad97c:	dec00104 	addi	sp,sp,4
 2aad980:	f800283a 	ret

02aad984 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2aad984:	defff904 	addi	sp,sp,-28
 2aad988:	dfc00615 	stw	ra,24(sp)
 2aad98c:	df000515 	stw	fp,20(sp)
 2aad990:	df000504 	addi	fp,sp,20
 2aad994:	e13ffd15 	stw	r4,-12(fp)
 2aad998:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2aad99c:	e0bffd17 	ldw	r2,-12(fp)
 2aad9a0:	1005003a 	cmpeq	r2,r2,zero
 2aad9a4:	1000041e 	bne	r2,zero,2aad9b8 <alt_dev_llist_insert+0x34>
 2aad9a8:	e0bffd17 	ldw	r2,-12(fp)
 2aad9ac:	10800217 	ldw	r2,8(r2)
 2aad9b0:	1004c03a 	cmpne	r2,r2,zero
 2aad9b4:	1000071e 	bne	r2,zero,2aad9d4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 2aad9b8:	2aada380 	call	2aada38 <alt_get_errno>
 2aad9bc:	1007883a 	mov	r3,r2
 2aad9c0:	00800584 	movi	r2,22
 2aad9c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2aad9c8:	00bffa84 	movi	r2,-22
 2aad9cc:	e0bfff15 	stw	r2,-4(fp)
 2aad9d0:	00001306 	br	2aada20 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2aad9d4:	e0fffd17 	ldw	r3,-12(fp)
 2aad9d8:	e0bffe17 	ldw	r2,-8(fp)
 2aad9dc:	e0bffb15 	stw	r2,-20(fp)
 2aad9e0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2aad9e4:	e0fffc17 	ldw	r3,-16(fp)
 2aad9e8:	e0bffb17 	ldw	r2,-20(fp)
 2aad9ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2aad9f0:	e0bffb17 	ldw	r2,-20(fp)
 2aad9f4:	10c00017 	ldw	r3,0(r2)
 2aad9f8:	e0bffc17 	ldw	r2,-16(fp)
 2aad9fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2aada00:	e0bffb17 	ldw	r2,-20(fp)
 2aada04:	10c00017 	ldw	r3,0(r2)
 2aada08:	e0bffc17 	ldw	r2,-16(fp)
 2aada0c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2aada10:	e0fffb17 	ldw	r3,-20(fp)
 2aada14:	e0bffc17 	ldw	r2,-16(fp)
 2aada18:	18800015 	stw	r2,0(r3)

  return 0;  
 2aada1c:	e03fff15 	stw	zero,-4(fp)
 2aada20:	e0bfff17 	ldw	r2,-4(fp)
}
 2aada24:	e037883a 	mov	sp,fp
 2aada28:	dfc00117 	ldw	ra,4(sp)
 2aada2c:	df000017 	ldw	fp,0(sp)
 2aada30:	dec00204 	addi	sp,sp,8
 2aada34:	f800283a 	ret

02aada38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2aada38:	defffd04 	addi	sp,sp,-12
 2aada3c:	dfc00215 	stw	ra,8(sp)
 2aada40:	df000115 	stw	fp,4(sp)
 2aada44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2aada48:	0080aaf4 	movhi	r2,683
 2aada4c:	1081c804 	addi	r2,r2,1824
 2aada50:	10800017 	ldw	r2,0(r2)
 2aada54:	1005003a 	cmpeq	r2,r2,zero
 2aada58:	1000061e 	bne	r2,zero,2aada74 <alt_get_errno+0x3c>
 2aada5c:	0080aaf4 	movhi	r2,683
 2aada60:	1081c804 	addi	r2,r2,1824
 2aada64:	10800017 	ldw	r2,0(r2)
 2aada68:	103ee83a 	callr	r2
 2aada6c:	e0bfff15 	stw	r2,-4(fp)
 2aada70:	00000306 	br	2aada80 <alt_get_errno+0x48>
 2aada74:	0080aaf4 	movhi	r2,683
 2aada78:	10886704 	addi	r2,r2,8604
 2aada7c:	e0bfff15 	stw	r2,-4(fp)
 2aada80:	e0bfff17 	ldw	r2,-4(fp)
}
 2aada84:	e037883a 	mov	sp,fp
 2aada88:	dfc00117 	ldw	ra,4(sp)
 2aada8c:	df000017 	ldw	fp,0(sp)
 2aada90:	dec00204 	addi	sp,sp,8
 2aada94:	f800283a 	ret

02aada98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2aada98:	defffd04 	addi	sp,sp,-12
 2aada9c:	dfc00215 	stw	ra,8(sp)
 2aadaa0:	df000115 	stw	fp,4(sp)
 2aadaa4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2aadaa8:	00bfff04 	movi	r2,-4
 2aadaac:	00c0aaf4 	movhi	r3,683
 2aadab0:	18fb2704 	addi	r3,r3,-4964
 2aadab4:	1885883a 	add	r2,r3,r2
 2aadab8:	e0bfff15 	stw	r2,-4(fp)
 2aadabc:	00000606 	br	2aadad8 <_do_ctors+0x40>
        (*ctor) (); 
 2aadac0:	e0bfff17 	ldw	r2,-4(fp)
 2aadac4:	10800017 	ldw	r2,0(r2)
 2aadac8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2aadacc:	e0bfff17 	ldw	r2,-4(fp)
 2aadad0:	10bfff04 	addi	r2,r2,-4
 2aadad4:	e0bfff15 	stw	r2,-4(fp)
 2aadad8:	e0ffff17 	ldw	r3,-4(fp)
 2aadadc:	0080aaf4 	movhi	r2,683
 2aadae0:	10bb2604 	addi	r2,r2,-4968
 2aadae4:	18bff62e 	bgeu	r3,r2,2aadac0 <_do_ctors+0x28>
        (*ctor) (); 
}
 2aadae8:	e037883a 	mov	sp,fp
 2aadaec:	dfc00117 	ldw	ra,4(sp)
 2aadaf0:	df000017 	ldw	fp,0(sp)
 2aadaf4:	dec00204 	addi	sp,sp,8
 2aadaf8:	f800283a 	ret

02aadafc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2aadafc:	defffd04 	addi	sp,sp,-12
 2aadb00:	dfc00215 	stw	ra,8(sp)
 2aadb04:	df000115 	stw	fp,4(sp)
 2aadb08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2aadb0c:	00bfff04 	movi	r2,-4
 2aadb10:	00c0aaf4 	movhi	r3,683
 2aadb14:	18fb2704 	addi	r3,r3,-4964
 2aadb18:	1885883a 	add	r2,r3,r2
 2aadb1c:	e0bfff15 	stw	r2,-4(fp)
 2aadb20:	00000606 	br	2aadb3c <_do_dtors+0x40>
        (*dtor) (); 
 2aadb24:	e0bfff17 	ldw	r2,-4(fp)
 2aadb28:	10800017 	ldw	r2,0(r2)
 2aadb2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2aadb30:	e0bfff17 	ldw	r2,-4(fp)
 2aadb34:	10bfff04 	addi	r2,r2,-4
 2aadb38:	e0bfff15 	stw	r2,-4(fp)
 2aadb3c:	e0ffff17 	ldw	r3,-4(fp)
 2aadb40:	0080aaf4 	movhi	r2,683
 2aadb44:	10bb2704 	addi	r2,r2,-4964
 2aadb48:	18bff62e 	bgeu	r3,r2,2aadb24 <_do_dtors+0x28>
        (*dtor) (); 
}
 2aadb4c:	e037883a 	mov	sp,fp
 2aadb50:	dfc00117 	ldw	ra,4(sp)
 2aadb54:	df000017 	ldw	fp,0(sp)
 2aadb58:	dec00204 	addi	sp,sp,8
 2aadb5c:	f800283a 	ret

02aadb60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2aadb60:	defffe04 	addi	sp,sp,-8
 2aadb64:	dfc00115 	stw	ra,4(sp)
 2aadb68:	df000015 	stw	fp,0(sp)
 2aadb6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2aadb70:	0009883a 	mov	r4,zero
 2aadb74:	01440004 	movi	r5,4096
 2aadb78:	2aae6ec0 	call	2aae6ec <alt_icache_flush>
#endif
}
 2aadb7c:	e037883a 	mov	sp,fp
 2aadb80:	dfc00117 	ldw	ra,4(sp)
 2aadb84:	df000017 	ldw	fp,0(sp)
 2aadb88:	dec00204 	addi	sp,sp,8
 2aadb8c:	f800283a 	ret

02aadb90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2aadb90:	defff904 	addi	sp,sp,-28
 2aadb94:	dfc00615 	stw	ra,24(sp)
 2aadb98:	df000515 	stw	fp,20(sp)
 2aadb9c:	df000504 	addi	fp,sp,20
 2aadba0:	e13ffc15 	stw	r4,-16(fp)
 2aadba4:	e17ffd15 	stw	r5,-12(fp)
 2aadba8:	e1bffe15 	stw	r6,-8(fp)
 2aadbac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2aadbb0:	e0800217 	ldw	r2,8(fp)
 2aadbb4:	d8800015 	stw	r2,0(sp)
 2aadbb8:	e13ffc17 	ldw	r4,-16(fp)
 2aadbbc:	e17ffd17 	ldw	r5,-12(fp)
 2aadbc0:	e1bffe17 	ldw	r6,-8(fp)
 2aadbc4:	e1ffff17 	ldw	r7,-4(fp)
 2aadbc8:	2aadd640 	call	2aadd64 <alt_iic_isr_register>
}  
 2aadbcc:	e037883a 	mov	sp,fp
 2aadbd0:	dfc00117 	ldw	ra,4(sp)
 2aadbd4:	df000017 	ldw	fp,0(sp)
 2aadbd8:	dec00204 	addi	sp,sp,8
 2aadbdc:	f800283a 	ret

02aadbe0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2aadbe0:	defff904 	addi	sp,sp,-28
 2aadbe4:	df000615 	stw	fp,24(sp)
 2aadbe8:	df000604 	addi	fp,sp,24
 2aadbec:	e13ffe15 	stw	r4,-8(fp)
 2aadbf0:	e17fff15 	stw	r5,-4(fp)
 2aadbf4:	e0bfff17 	ldw	r2,-4(fp)
 2aadbf8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aadbfc:	0005303a 	rdctl	r2,status
 2aadc00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aadc04:	e0fffb17 	ldw	r3,-20(fp)
 2aadc08:	00bfff84 	movi	r2,-2
 2aadc0c:	1884703a 	and	r2,r3,r2
 2aadc10:	1001703a 	wrctl	status,r2
  
  return context;
 2aadc14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2aadc18:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2aadc1c:	e0fffc17 	ldw	r3,-16(fp)
 2aadc20:	00800044 	movi	r2,1
 2aadc24:	10c4983a 	sll	r2,r2,r3
 2aadc28:	1007883a 	mov	r3,r2
 2aadc2c:	0080aaf4 	movhi	r2,683
 2aadc30:	10886b04 	addi	r2,r2,8620
 2aadc34:	10800017 	ldw	r2,0(r2)
 2aadc38:	1886b03a 	or	r3,r3,r2
 2aadc3c:	0080aaf4 	movhi	r2,683
 2aadc40:	10886b04 	addi	r2,r2,8620
 2aadc44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2aadc48:	0080aaf4 	movhi	r2,683
 2aadc4c:	10886b04 	addi	r2,r2,8620
 2aadc50:	10800017 	ldw	r2,0(r2)
 2aadc54:	100170fa 	wrctl	ienable,r2
 2aadc58:	e0bffd17 	ldw	r2,-12(fp)
 2aadc5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aadc60:	e0bffa17 	ldw	r2,-24(fp)
 2aadc64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2aadc68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2aadc6c:	e037883a 	mov	sp,fp
 2aadc70:	df000017 	ldw	fp,0(sp)
 2aadc74:	dec00104 	addi	sp,sp,4
 2aadc78:	f800283a 	ret

02aadc7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2aadc7c:	defff904 	addi	sp,sp,-28
 2aadc80:	df000615 	stw	fp,24(sp)
 2aadc84:	df000604 	addi	fp,sp,24
 2aadc88:	e13ffe15 	stw	r4,-8(fp)
 2aadc8c:	e17fff15 	stw	r5,-4(fp)
 2aadc90:	e0bfff17 	ldw	r2,-4(fp)
 2aadc94:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aadc98:	0005303a 	rdctl	r2,status
 2aadc9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aadca0:	e0fffb17 	ldw	r3,-20(fp)
 2aadca4:	00bfff84 	movi	r2,-2
 2aadca8:	1884703a 	and	r2,r3,r2
 2aadcac:	1001703a 	wrctl	status,r2
  
  return context;
 2aadcb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2aadcb4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 2aadcb8:	e0fffc17 	ldw	r3,-16(fp)
 2aadcbc:	00800044 	movi	r2,1
 2aadcc0:	10c4983a 	sll	r2,r2,r3
 2aadcc4:	0084303a 	nor	r2,zero,r2
 2aadcc8:	1007883a 	mov	r3,r2
 2aadccc:	0080aaf4 	movhi	r2,683
 2aadcd0:	10886b04 	addi	r2,r2,8620
 2aadcd4:	10800017 	ldw	r2,0(r2)
 2aadcd8:	1886703a 	and	r3,r3,r2
 2aadcdc:	0080aaf4 	movhi	r2,683
 2aadce0:	10886b04 	addi	r2,r2,8620
 2aadce4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2aadce8:	0080aaf4 	movhi	r2,683
 2aadcec:	10886b04 	addi	r2,r2,8620
 2aadcf0:	10800017 	ldw	r2,0(r2)
 2aadcf4:	100170fa 	wrctl	ienable,r2
 2aadcf8:	e0bffd17 	ldw	r2,-12(fp)
 2aadcfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aadd00:	e0bffa17 	ldw	r2,-24(fp)
 2aadd04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2aadd08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2aadd0c:	e037883a 	mov	sp,fp
 2aadd10:	df000017 	ldw	fp,0(sp)
 2aadd14:	dec00104 	addi	sp,sp,4
 2aadd18:	f800283a 	ret

02aadd1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2aadd1c:	defffc04 	addi	sp,sp,-16
 2aadd20:	df000315 	stw	fp,12(sp)
 2aadd24:	df000304 	addi	fp,sp,12
 2aadd28:	e13ffe15 	stw	r4,-8(fp)
 2aadd2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2aadd30:	000530fa 	rdctl	r2,ienable
 2aadd34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2aadd38:	e0ffff17 	ldw	r3,-4(fp)
 2aadd3c:	00800044 	movi	r2,1
 2aadd40:	10c4983a 	sll	r2,r2,r3
 2aadd44:	1007883a 	mov	r3,r2
 2aadd48:	e0bffd17 	ldw	r2,-12(fp)
 2aadd4c:	1884703a 	and	r2,r3,r2
 2aadd50:	1004c03a 	cmpne	r2,r2,zero
}
 2aadd54:	e037883a 	mov	sp,fp
 2aadd58:	df000017 	ldw	fp,0(sp)
 2aadd5c:	dec00104 	addi	sp,sp,4
 2aadd60:	f800283a 	ret

02aadd64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2aadd64:	defff404 	addi	sp,sp,-48
 2aadd68:	dfc00b15 	stw	ra,44(sp)
 2aadd6c:	df000a15 	stw	fp,40(sp)
 2aadd70:	df000a04 	addi	fp,sp,40
 2aadd74:	e13ffb15 	stw	r4,-20(fp)
 2aadd78:	e17ffc15 	stw	r5,-16(fp)
 2aadd7c:	e1bffd15 	stw	r6,-12(fp)
 2aadd80:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2aadd84:	00bffa84 	movi	r2,-22
 2aadd88:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2aadd8c:	e0bffc17 	ldw	r2,-16(fp)
 2aadd90:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2aadd94:	e0bff917 	ldw	r2,-28(fp)
 2aadd98:	10800808 	cmpgei	r2,r2,32
 2aadd9c:	1000291e 	bne	r2,zero,2aade44 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aadda0:	0005303a 	rdctl	r2,status
 2aadda4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aadda8:	e0fff717 	ldw	r3,-36(fp)
 2aaddac:	00bfff84 	movi	r2,-2
 2aaddb0:	1884703a 	and	r2,r3,r2
 2aaddb4:	1001703a 	wrctl	status,r2
  
  return context;
 2aaddb8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2aaddbc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2aaddc0:	e0bff917 	ldw	r2,-28(fp)
 2aaddc4:	00c0aaf4 	movhi	r3,683
 2aaddc8:	18c87804 	addi	r3,r3,8672
 2aaddcc:	100490fa 	slli	r2,r2,3
 2aaddd0:	10c7883a 	add	r3,r2,r3
 2aaddd4:	e0bffd17 	ldw	r2,-12(fp)
 2aaddd8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2aadddc:	e0bff917 	ldw	r2,-28(fp)
 2aadde0:	00c0aaf4 	movhi	r3,683
 2aadde4:	18c87804 	addi	r3,r3,8672
 2aadde8:	100490fa 	slli	r2,r2,3
 2aaddec:	10c5883a 	add	r2,r2,r3
 2aaddf0:	10c00104 	addi	r3,r2,4
 2aaddf4:	e0bffe17 	ldw	r2,-8(fp)
 2aaddf8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2aaddfc:	e0bffd17 	ldw	r2,-12(fp)
 2aade00:	1005003a 	cmpeq	r2,r2,zero
 2aade04:	1000051e 	bne	r2,zero,2aade1c <alt_iic_isr_register+0xb8>
 2aade08:	e17ff917 	ldw	r5,-28(fp)
 2aade0c:	e13ffb17 	ldw	r4,-20(fp)
 2aade10:	2aadbe00 	call	2aadbe0 <alt_ic_irq_enable>
 2aade14:	e0bfff15 	stw	r2,-4(fp)
 2aade18:	00000406 	br	2aade2c <alt_iic_isr_register+0xc8>
 2aade1c:	e17ff917 	ldw	r5,-28(fp)
 2aade20:	e13ffb17 	ldw	r4,-20(fp)
 2aade24:	2aadc7c0 	call	2aadc7c <alt_ic_irq_disable>
 2aade28:	e0bfff15 	stw	r2,-4(fp)
 2aade2c:	e0bfff17 	ldw	r2,-4(fp)
 2aade30:	e0bffa15 	stw	r2,-24(fp)
 2aade34:	e0bff817 	ldw	r2,-32(fp)
 2aade38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aade3c:	e0bff617 	ldw	r2,-40(fp)
 2aade40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2aade44:	e0bffa17 	ldw	r2,-24(fp)
}
 2aade48:	e037883a 	mov	sp,fp
 2aade4c:	dfc00117 	ldw	ra,4(sp)
 2aade50:	df000017 	ldw	fp,0(sp)
 2aade54:	dec00204 	addi	sp,sp,8
 2aade58:	f800283a 	ret

02aade5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2aade5c:	defff904 	addi	sp,sp,-28
 2aade60:	dfc00615 	stw	ra,24(sp)
 2aade64:	df000515 	stw	fp,20(sp)
 2aade68:	df000504 	addi	fp,sp,20
 2aade6c:	e13ffc15 	stw	r4,-16(fp)
 2aade70:	e17ffd15 	stw	r5,-12(fp)
 2aade74:	e1bffe15 	stw	r6,-8(fp)
 2aade78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2aade7c:	e13ffd17 	ldw	r4,-12(fp)
 2aade80:	e17ffe17 	ldw	r5,-8(fp)
 2aade84:	e1bfff17 	ldw	r6,-4(fp)
 2aade88:	2aae0740 	call	2aae074 <open>
 2aade8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2aade90:	e0bffb17 	ldw	r2,-20(fp)
 2aade94:	1004803a 	cmplt	r2,r2,zero
 2aade98:	10001c1e 	bne	r2,zero,2aadf0c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2aade9c:	e0bffb17 	ldw	r2,-20(fp)
 2aadea0:	00c0aaf4 	movhi	r3,683
 2aadea4:	18c15904 	addi	r3,r3,1380
 2aadea8:	10800324 	muli	r2,r2,12
 2aadeac:	10c5883a 	add	r2,r2,r3
 2aadeb0:	10c00017 	ldw	r3,0(r2)
 2aadeb4:	e0bffc17 	ldw	r2,-16(fp)
 2aadeb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2aadebc:	e0bffb17 	ldw	r2,-20(fp)
 2aadec0:	00c0aaf4 	movhi	r3,683
 2aadec4:	18c15904 	addi	r3,r3,1380
 2aadec8:	10800324 	muli	r2,r2,12
 2aadecc:	10c5883a 	add	r2,r2,r3
 2aaded0:	10800104 	addi	r2,r2,4
 2aaded4:	10c00017 	ldw	r3,0(r2)
 2aaded8:	e0bffc17 	ldw	r2,-16(fp)
 2aadedc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2aadee0:	e0bffb17 	ldw	r2,-20(fp)
 2aadee4:	00c0aaf4 	movhi	r3,683
 2aadee8:	18c15904 	addi	r3,r3,1380
 2aadeec:	10800324 	muli	r2,r2,12
 2aadef0:	10c5883a 	add	r2,r2,r3
 2aadef4:	10800204 	addi	r2,r2,8
 2aadef8:	10c00017 	ldw	r3,0(r2)
 2aadefc:	e0bffc17 	ldw	r2,-16(fp)
 2aadf00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2aadf04:	e13ffb17 	ldw	r4,-20(fp)
 2aadf08:	2aae25c0 	call	2aae25c <alt_release_fd>
  }
} 
 2aadf0c:	e037883a 	mov	sp,fp
 2aadf10:	dfc00117 	ldw	ra,4(sp)
 2aadf14:	df000017 	ldw	fp,0(sp)
 2aadf18:	dec00204 	addi	sp,sp,8
 2aadf1c:	f800283a 	ret

02aadf20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2aadf20:	defffb04 	addi	sp,sp,-20
 2aadf24:	dfc00415 	stw	ra,16(sp)
 2aadf28:	df000315 	stw	fp,12(sp)
 2aadf2c:	df000304 	addi	fp,sp,12
 2aadf30:	e13ffd15 	stw	r4,-12(fp)
 2aadf34:	e17ffe15 	stw	r5,-8(fp)
 2aadf38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2aadf3c:	0100aaf4 	movhi	r4,683
 2aadf40:	21015c04 	addi	r4,r4,1392
 2aadf44:	e17ffd17 	ldw	r5,-12(fp)
 2aadf48:	01800044 	movi	r6,1
 2aadf4c:	01c07fc4 	movi	r7,511
 2aadf50:	2aade5c0 	call	2aade5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2aadf54:	0100aaf4 	movhi	r4,683
 2aadf58:	21015904 	addi	r4,r4,1380
 2aadf5c:	e17ffe17 	ldw	r5,-8(fp)
 2aadf60:	000d883a 	mov	r6,zero
 2aadf64:	01c07fc4 	movi	r7,511
 2aadf68:	2aade5c0 	call	2aade5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2aadf6c:	0100aaf4 	movhi	r4,683
 2aadf70:	21015f04 	addi	r4,r4,1404
 2aadf74:	e17fff17 	ldw	r5,-4(fp)
 2aadf78:	01800044 	movi	r6,1
 2aadf7c:	01c07fc4 	movi	r7,511
 2aadf80:	2aade5c0 	call	2aade5c <alt_open_fd>
}  
 2aadf84:	e037883a 	mov	sp,fp
 2aadf88:	dfc00117 	ldw	ra,4(sp)
 2aadf8c:	df000017 	ldw	fp,0(sp)
 2aadf90:	dec00204 	addi	sp,sp,8
 2aadf94:	f800283a 	ret

02aadf98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2aadf98:	defffc04 	addi	sp,sp,-16
 2aadf9c:	df000315 	stw	fp,12(sp)
 2aadfa0:	df000304 	addi	fp,sp,12
 2aadfa4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2aadfa8:	e0bffe17 	ldw	r2,-8(fp)
 2aadfac:	10800217 	ldw	r2,8(r2)
 2aadfb0:	10d00034 	orhi	r3,r2,16384
 2aadfb4:	e0bffe17 	ldw	r2,-8(fp)
 2aadfb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2aadfbc:	e03ffd15 	stw	zero,-12(fp)
 2aadfc0:	00002006 	br	2aae044 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2aadfc4:	e0bffd17 	ldw	r2,-12(fp)
 2aadfc8:	00c0aaf4 	movhi	r3,683
 2aadfcc:	18c15904 	addi	r3,r3,1380
 2aadfd0:	10800324 	muli	r2,r2,12
 2aadfd4:	10c5883a 	add	r2,r2,r3
 2aadfd8:	10c00017 	ldw	r3,0(r2)
 2aadfdc:	e0bffe17 	ldw	r2,-8(fp)
 2aadfe0:	10800017 	ldw	r2,0(r2)
 2aadfe4:	1880141e 	bne	r3,r2,2aae038 <alt_file_locked+0xa0>
 2aadfe8:	e0bffd17 	ldw	r2,-12(fp)
 2aadfec:	00c0aaf4 	movhi	r3,683
 2aadff0:	18c15904 	addi	r3,r3,1380
 2aadff4:	10800324 	muli	r2,r2,12
 2aadff8:	10c5883a 	add	r2,r2,r3
 2aadffc:	10800204 	addi	r2,r2,8
 2aae000:	10800017 	ldw	r2,0(r2)
 2aae004:	1004403a 	cmpge	r2,r2,zero
 2aae008:	10000b1e 	bne	r2,zero,2aae038 <alt_file_locked+0xa0>
 2aae00c:	e0bffd17 	ldw	r2,-12(fp)
 2aae010:	10800324 	muli	r2,r2,12
 2aae014:	1007883a 	mov	r3,r2
 2aae018:	0080aaf4 	movhi	r2,683
 2aae01c:	10815904 	addi	r2,r2,1380
 2aae020:	1887883a 	add	r3,r3,r2
 2aae024:	e0bffe17 	ldw	r2,-8(fp)
 2aae028:	18800326 	beq	r3,r2,2aae038 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2aae02c:	00bffcc4 	movi	r2,-13
 2aae030:	e0bfff15 	stw	r2,-4(fp)
 2aae034:	00000a06 	br	2aae060 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2aae038:	e0bffd17 	ldw	r2,-12(fp)
 2aae03c:	10800044 	addi	r2,r2,1
 2aae040:	e0bffd15 	stw	r2,-12(fp)
 2aae044:	0080aaf4 	movhi	r2,683
 2aae048:	1081c704 	addi	r2,r2,1820
 2aae04c:	10800017 	ldw	r2,0(r2)
 2aae050:	1007883a 	mov	r3,r2
 2aae054:	e0bffd17 	ldw	r2,-12(fp)
 2aae058:	18bfda2e 	bgeu	r3,r2,2aadfc4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2aae05c:	e03fff15 	stw	zero,-4(fp)
 2aae060:	e0bfff17 	ldw	r2,-4(fp)
}
 2aae064:	e037883a 	mov	sp,fp
 2aae068:	df000017 	ldw	fp,0(sp)
 2aae06c:	dec00104 	addi	sp,sp,4
 2aae070:	f800283a 	ret

02aae074 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2aae074:	defff404 	addi	sp,sp,-48
 2aae078:	dfc00b15 	stw	ra,44(sp)
 2aae07c:	df000a15 	stw	fp,40(sp)
 2aae080:	df000a04 	addi	fp,sp,40
 2aae084:	e13ffb15 	stw	r4,-20(fp)
 2aae088:	e17ffc15 	stw	r5,-16(fp)
 2aae08c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2aae090:	00bfffc4 	movi	r2,-1
 2aae094:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2aae098:	00bffb44 	movi	r2,-19
 2aae09c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2aae0a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2aae0a4:	e13ffb17 	ldw	r4,-20(fp)
 2aae0a8:	0140aaf4 	movhi	r5,683
 2aae0ac:	2941c504 	addi	r5,r5,1812
 2aae0b0:	2aae4800 	call	2aae480 <alt_find_dev>
 2aae0b4:	e0bffa15 	stw	r2,-24(fp)
 2aae0b8:	e0bffa17 	ldw	r2,-24(fp)
 2aae0bc:	1004c03a 	cmpne	r2,r2,zero
 2aae0c0:	1000051e 	bne	r2,zero,2aae0d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2aae0c4:	e13ffb17 	ldw	r4,-20(fp)
 2aae0c8:	2aae5140 	call	2aae514 <alt_find_file>
 2aae0cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2aae0d0:	00800044 	movi	r2,1
 2aae0d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2aae0d8:	e0bffa17 	ldw	r2,-24(fp)
 2aae0dc:	1005003a 	cmpeq	r2,r2,zero
 2aae0e0:	1000301e 	bne	r2,zero,2aae1a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2aae0e4:	e13ffa17 	ldw	r4,-24(fp)
 2aae0e8:	2aae6340 	call	2aae634 <alt_get_fd>
 2aae0ec:	e0bff815 	stw	r2,-32(fp)
 2aae0f0:	e0bff817 	ldw	r2,-32(fp)
 2aae0f4:	1004403a 	cmpge	r2,r2,zero
 2aae0f8:	1000031e 	bne	r2,zero,2aae108 <open+0x94>
    {
      status = index;
 2aae0fc:	e0bff817 	ldw	r2,-32(fp)
 2aae100:	e0bff715 	stw	r2,-36(fp)
 2aae104:	00002906 	br	2aae1ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 2aae108:	e0bff817 	ldw	r2,-32(fp)
 2aae10c:	10800324 	muli	r2,r2,12
 2aae110:	1007883a 	mov	r3,r2
 2aae114:	0080aaf4 	movhi	r2,683
 2aae118:	10815904 	addi	r2,r2,1380
 2aae11c:	1885883a 	add	r2,r3,r2
 2aae120:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2aae124:	e0fffc17 	ldw	r3,-16(fp)
 2aae128:	00900034 	movhi	r2,16384
 2aae12c:	10bfffc4 	addi	r2,r2,-1
 2aae130:	1886703a 	and	r3,r3,r2
 2aae134:	e0bff917 	ldw	r2,-28(fp)
 2aae138:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2aae13c:	e0bff617 	ldw	r2,-40(fp)
 2aae140:	1004c03a 	cmpne	r2,r2,zero
 2aae144:	1000061e 	bne	r2,zero,2aae160 <open+0xec>
 2aae148:	e13ff917 	ldw	r4,-28(fp)
 2aae14c:	2aadf980 	call	2aadf98 <alt_file_locked>
 2aae150:	e0bff715 	stw	r2,-36(fp)
 2aae154:	e0bff717 	ldw	r2,-36(fp)
 2aae158:	1004803a 	cmplt	r2,r2,zero
 2aae15c:	1000131e 	bne	r2,zero,2aae1ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2aae160:	e0bffa17 	ldw	r2,-24(fp)
 2aae164:	10800317 	ldw	r2,12(r2)
 2aae168:	1005003a 	cmpeq	r2,r2,zero
 2aae16c:	1000091e 	bne	r2,zero,2aae194 <open+0x120>
 2aae170:	e0bffa17 	ldw	r2,-24(fp)
 2aae174:	10800317 	ldw	r2,12(r2)
 2aae178:	e13ff917 	ldw	r4,-28(fp)
 2aae17c:	e17ffb17 	ldw	r5,-20(fp)
 2aae180:	e1bffc17 	ldw	r6,-16(fp)
 2aae184:	e1fffd17 	ldw	r7,-12(fp)
 2aae188:	103ee83a 	callr	r2
 2aae18c:	e0bfff15 	stw	r2,-4(fp)
 2aae190:	00000106 	br	2aae198 <open+0x124>
 2aae194:	e03fff15 	stw	zero,-4(fp)
 2aae198:	e0bfff17 	ldw	r2,-4(fp)
 2aae19c:	e0bff715 	stw	r2,-36(fp)
 2aae1a0:	00000206 	br	2aae1ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2aae1a4:	00bffb44 	movi	r2,-19
 2aae1a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2aae1ac:	e0bff717 	ldw	r2,-36(fp)
 2aae1b0:	1004403a 	cmpge	r2,r2,zero
 2aae1b4:	1000091e 	bne	r2,zero,2aae1dc <open+0x168>
  {
    alt_release_fd (index);  
 2aae1b8:	e13ff817 	ldw	r4,-32(fp)
 2aae1bc:	2aae25c0 	call	2aae25c <alt_release_fd>
    ALT_ERRNO = -status;
 2aae1c0:	2aae1fc0 	call	2aae1fc <alt_get_errno>
 2aae1c4:	e0fff717 	ldw	r3,-36(fp)
 2aae1c8:	00c7c83a 	sub	r3,zero,r3
 2aae1cc:	10c00015 	stw	r3,0(r2)
    return -1;
 2aae1d0:	00bfffc4 	movi	r2,-1
 2aae1d4:	e0bffe15 	stw	r2,-8(fp)
 2aae1d8:	00000206 	br	2aae1e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 2aae1dc:	e0bff817 	ldw	r2,-32(fp)
 2aae1e0:	e0bffe15 	stw	r2,-8(fp)
 2aae1e4:	e0bffe17 	ldw	r2,-8(fp)
}
 2aae1e8:	e037883a 	mov	sp,fp
 2aae1ec:	dfc00117 	ldw	ra,4(sp)
 2aae1f0:	df000017 	ldw	fp,0(sp)
 2aae1f4:	dec00204 	addi	sp,sp,8
 2aae1f8:	f800283a 	ret

02aae1fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2aae1fc:	defffd04 	addi	sp,sp,-12
 2aae200:	dfc00215 	stw	ra,8(sp)
 2aae204:	df000115 	stw	fp,4(sp)
 2aae208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2aae20c:	0080aaf4 	movhi	r2,683
 2aae210:	1081c804 	addi	r2,r2,1824
 2aae214:	10800017 	ldw	r2,0(r2)
 2aae218:	1005003a 	cmpeq	r2,r2,zero
 2aae21c:	1000061e 	bne	r2,zero,2aae238 <alt_get_errno+0x3c>
 2aae220:	0080aaf4 	movhi	r2,683
 2aae224:	1081c804 	addi	r2,r2,1824
 2aae228:	10800017 	ldw	r2,0(r2)
 2aae22c:	103ee83a 	callr	r2
 2aae230:	e0bfff15 	stw	r2,-4(fp)
 2aae234:	00000306 	br	2aae244 <alt_get_errno+0x48>
 2aae238:	0080aaf4 	movhi	r2,683
 2aae23c:	10886704 	addi	r2,r2,8604
 2aae240:	e0bfff15 	stw	r2,-4(fp)
 2aae244:	e0bfff17 	ldw	r2,-4(fp)
}
 2aae248:	e037883a 	mov	sp,fp
 2aae24c:	dfc00117 	ldw	ra,4(sp)
 2aae250:	df000017 	ldw	fp,0(sp)
 2aae254:	dec00204 	addi	sp,sp,8
 2aae258:	f800283a 	ret

02aae25c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2aae25c:	defffe04 	addi	sp,sp,-8
 2aae260:	df000115 	stw	fp,4(sp)
 2aae264:	df000104 	addi	fp,sp,4
 2aae268:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2aae26c:	e0bfff17 	ldw	r2,-4(fp)
 2aae270:	108000d0 	cmplti	r2,r2,3
 2aae274:	10000d1e 	bne	r2,zero,2aae2ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2aae278:	e0bfff17 	ldw	r2,-4(fp)
 2aae27c:	00c0aaf4 	movhi	r3,683
 2aae280:	18c15904 	addi	r3,r3,1380
 2aae284:	10800324 	muli	r2,r2,12
 2aae288:	10c5883a 	add	r2,r2,r3
 2aae28c:	10800204 	addi	r2,r2,8
 2aae290:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2aae294:	e0bfff17 	ldw	r2,-4(fp)
 2aae298:	00c0aaf4 	movhi	r3,683
 2aae29c:	18c15904 	addi	r3,r3,1380
 2aae2a0:	10800324 	muli	r2,r2,12
 2aae2a4:	10c5883a 	add	r2,r2,r3
 2aae2a8:	10000015 	stw	zero,0(r2)
  }
}
 2aae2ac:	e037883a 	mov	sp,fp
 2aae2b0:	df000017 	ldw	fp,0(sp)
 2aae2b4:	dec00104 	addi	sp,sp,4
 2aae2b8:	f800283a 	ret

02aae2bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2aae2bc:	defffa04 	addi	sp,sp,-24
 2aae2c0:	df000515 	stw	fp,20(sp)
 2aae2c4:	df000504 	addi	fp,sp,20
 2aae2c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2aae2cc:	0005303a 	rdctl	r2,status
 2aae2d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2aae2d4:	e0fffd17 	ldw	r3,-12(fp)
 2aae2d8:	00bfff84 	movi	r2,-2
 2aae2dc:	1884703a 	and	r2,r3,r2
 2aae2e0:	1001703a 	wrctl	status,r2
  
  return context;
 2aae2e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2aae2e8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2aae2ec:	e0bfff17 	ldw	r2,-4(fp)
 2aae2f0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2aae2f4:	e0bffc17 	ldw	r2,-16(fp)
 2aae2f8:	10c00017 	ldw	r3,0(r2)
 2aae2fc:	e0bffc17 	ldw	r2,-16(fp)
 2aae300:	10800117 	ldw	r2,4(r2)
 2aae304:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2aae308:	e0bffc17 	ldw	r2,-16(fp)
 2aae30c:	10c00117 	ldw	r3,4(r2)
 2aae310:	e0bffc17 	ldw	r2,-16(fp)
 2aae314:	10800017 	ldw	r2,0(r2)
 2aae318:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2aae31c:	e0fffc17 	ldw	r3,-16(fp)
 2aae320:	e0bffc17 	ldw	r2,-16(fp)
 2aae324:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2aae328:	e0fffc17 	ldw	r3,-16(fp)
 2aae32c:	e0bffc17 	ldw	r2,-16(fp)
 2aae330:	18800015 	stw	r2,0(r3)
 2aae334:	e0bffe17 	ldw	r2,-8(fp)
 2aae338:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2aae33c:	e0bffb17 	ldw	r2,-20(fp)
 2aae340:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2aae344:	e037883a 	mov	sp,fp
 2aae348:	df000017 	ldw	fp,0(sp)
 2aae34c:	dec00104 	addi	sp,sp,4
 2aae350:	f800283a 	ret

02aae354 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2aae354:	defffb04 	addi	sp,sp,-20
 2aae358:	dfc00415 	stw	ra,16(sp)
 2aae35c:	df000315 	stw	fp,12(sp)
 2aae360:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2aae364:	d0a01117 	ldw	r2,-32700(gp)
 2aae368:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2aae36c:	d0a6b417 	ldw	r2,-25904(gp)
 2aae370:	10800044 	addi	r2,r2,1
 2aae374:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2aae378:	00003106 	br	2aae440 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2aae37c:	e0bffe17 	ldw	r2,-8(fp)
 2aae380:	10800017 	ldw	r2,0(r2)
 2aae384:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2aae388:	e0bffe17 	ldw	r2,-8(fp)
 2aae38c:	10800403 	ldbu	r2,16(r2)
 2aae390:	10803fcc 	andi	r2,r2,255
 2aae394:	1005003a 	cmpeq	r2,r2,zero
 2aae398:	1000051e 	bne	r2,zero,2aae3b0 <alt_tick+0x5c>
 2aae39c:	d0a6b417 	ldw	r2,-25904(gp)
 2aae3a0:	1004c03a 	cmpne	r2,r2,zero
 2aae3a4:	1000021e 	bne	r2,zero,2aae3b0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2aae3a8:	e0bffe17 	ldw	r2,-8(fp)
 2aae3ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2aae3b0:	e0bffe17 	ldw	r2,-8(fp)
 2aae3b4:	10c00217 	ldw	r3,8(r2)
 2aae3b8:	d0a6b417 	ldw	r2,-25904(gp)
 2aae3bc:	10c01e36 	bltu	r2,r3,2aae438 <alt_tick+0xe4>
 2aae3c0:	e0bffe17 	ldw	r2,-8(fp)
 2aae3c4:	10800403 	ldbu	r2,16(r2)
 2aae3c8:	10803fcc 	andi	r2,r2,255
 2aae3cc:	1004c03a 	cmpne	r2,r2,zero
 2aae3d0:	1000191e 	bne	r2,zero,2aae438 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2aae3d4:	e0bffe17 	ldw	r2,-8(fp)
 2aae3d8:	10c00317 	ldw	r3,12(r2)
 2aae3dc:	e0bffe17 	ldw	r2,-8(fp)
 2aae3e0:	11000517 	ldw	r4,20(r2)
 2aae3e4:	183ee83a 	callr	r3
 2aae3e8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2aae3ec:	e0bffd17 	ldw	r2,-12(fp)
 2aae3f0:	1004c03a 	cmpne	r2,r2,zero
 2aae3f4:	1000031e 	bne	r2,zero,2aae404 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2aae3f8:	e13ffe17 	ldw	r4,-8(fp)
 2aae3fc:	2aae2bc0 	call	2aae2bc <alt_alarm_stop>
 2aae400:	00000d06 	br	2aae438 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2aae404:	e0bffe17 	ldw	r2,-8(fp)
 2aae408:	10c00217 	ldw	r3,8(r2)
 2aae40c:	e0bffd17 	ldw	r2,-12(fp)
 2aae410:	1887883a 	add	r3,r3,r2
 2aae414:	e0bffe17 	ldw	r2,-8(fp)
 2aae418:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2aae41c:	e0bffe17 	ldw	r2,-8(fp)
 2aae420:	10c00217 	ldw	r3,8(r2)
 2aae424:	d0a6b417 	ldw	r2,-25904(gp)
 2aae428:	1880032e 	bgeu	r3,r2,2aae438 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2aae42c:	e0fffe17 	ldw	r3,-8(fp)
 2aae430:	00800044 	movi	r2,1
 2aae434:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2aae438:	e0bfff17 	ldw	r2,-4(fp)
 2aae43c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2aae440:	d0e01104 	addi	r3,gp,-32700
 2aae444:	e0bffe17 	ldw	r2,-8(fp)
 2aae448:	10ffcc1e 	bne	r2,r3,2aae37c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2aae44c:	e037883a 	mov	sp,fp
 2aae450:	dfc00117 	ldw	ra,4(sp)
 2aae454:	df000017 	ldw	fp,0(sp)
 2aae458:	dec00204 	addi	sp,sp,8
 2aae45c:	f800283a 	ret

02aae460 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2aae460:	deffff04 	addi	sp,sp,-4
 2aae464:	df000015 	stw	fp,0(sp)
 2aae468:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2aae46c:	000170fa 	wrctl	ienable,zero
}
 2aae470:	e037883a 	mov	sp,fp
 2aae474:	df000017 	ldw	fp,0(sp)
 2aae478:	dec00104 	addi	sp,sp,4
 2aae47c:	f800283a 	ret

02aae480 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2aae480:	defff904 	addi	sp,sp,-28
 2aae484:	dfc00615 	stw	ra,24(sp)
 2aae488:	df000515 	stw	fp,20(sp)
 2aae48c:	df000504 	addi	fp,sp,20
 2aae490:	e13ffd15 	stw	r4,-12(fp)
 2aae494:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2aae498:	e0bffe17 	ldw	r2,-8(fp)
 2aae49c:	10800017 	ldw	r2,0(r2)
 2aae4a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2aae4a4:	e13ffd17 	ldw	r4,-12(fp)
 2aae4a8:	2aae8dc0 	call	2aae8dc <strlen>
 2aae4ac:	10800044 	addi	r2,r2,1
 2aae4b0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2aae4b4:	00000d06 	br	2aae4ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2aae4b8:	e0bffc17 	ldw	r2,-16(fp)
 2aae4bc:	11000217 	ldw	r4,8(r2)
 2aae4c0:	e1bffb17 	ldw	r6,-20(fp)
 2aae4c4:	e17ffd17 	ldw	r5,-12(fp)
 2aae4c8:	2aae7c80 	call	2aae7c8 <memcmp>
 2aae4cc:	1004c03a 	cmpne	r2,r2,zero
 2aae4d0:	1000031e 	bne	r2,zero,2aae4e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2aae4d4:	e0bffc17 	ldw	r2,-16(fp)
 2aae4d8:	e0bfff15 	stw	r2,-4(fp)
 2aae4dc:	00000706 	br	2aae4fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2aae4e0:	e0bffc17 	ldw	r2,-16(fp)
 2aae4e4:	10800017 	ldw	r2,0(r2)
 2aae4e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2aae4ec:	e0fffe17 	ldw	r3,-8(fp)
 2aae4f0:	e0bffc17 	ldw	r2,-16(fp)
 2aae4f4:	10fff01e 	bne	r2,r3,2aae4b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2aae4f8:	e03fff15 	stw	zero,-4(fp)
 2aae4fc:	e0bfff17 	ldw	r2,-4(fp)
}
 2aae500:	e037883a 	mov	sp,fp
 2aae504:	dfc00117 	ldw	ra,4(sp)
 2aae508:	df000017 	ldw	fp,0(sp)
 2aae50c:	dec00204 	addi	sp,sp,8
 2aae510:	f800283a 	ret

02aae514 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2aae514:	defffa04 	addi	sp,sp,-24
 2aae518:	dfc00515 	stw	ra,20(sp)
 2aae51c:	df000415 	stw	fp,16(sp)
 2aae520:	df000404 	addi	fp,sp,16
 2aae524:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2aae528:	0080aaf4 	movhi	r2,683
 2aae52c:	1081c304 	addi	r2,r2,1804
 2aae530:	10800017 	ldw	r2,0(r2)
 2aae534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2aae538:	00003306 	br	2aae608 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2aae53c:	e0bffd17 	ldw	r2,-12(fp)
 2aae540:	11000217 	ldw	r4,8(r2)
 2aae544:	2aae8dc0 	call	2aae8dc <strlen>
 2aae548:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2aae54c:	e0bffd17 	ldw	r2,-12(fp)
 2aae550:	10c00217 	ldw	r3,8(r2)
 2aae554:	e0bffc17 	ldw	r2,-16(fp)
 2aae558:	1885883a 	add	r2,r3,r2
 2aae55c:	10bfffc4 	addi	r2,r2,-1
 2aae560:	10800003 	ldbu	r2,0(r2)
 2aae564:	10803fcc 	andi	r2,r2,255
 2aae568:	1080201c 	xori	r2,r2,128
 2aae56c:	10bfe004 	addi	r2,r2,-128
 2aae570:	10800bd8 	cmpnei	r2,r2,47
 2aae574:	1000031e 	bne	r2,zero,2aae584 <alt_find_file+0x70>
    {
      len -= 1;
 2aae578:	e0bffc17 	ldw	r2,-16(fp)
 2aae57c:	10bfffc4 	addi	r2,r2,-1
 2aae580:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2aae584:	e0bffc17 	ldw	r2,-16(fp)
 2aae588:	1007883a 	mov	r3,r2
 2aae58c:	e0bffe17 	ldw	r2,-8(fp)
 2aae590:	1885883a 	add	r2,r3,r2
 2aae594:	10800003 	ldbu	r2,0(r2)
 2aae598:	10803fcc 	andi	r2,r2,255
 2aae59c:	1080201c 	xori	r2,r2,128
 2aae5a0:	10bfe004 	addi	r2,r2,-128
 2aae5a4:	10800be0 	cmpeqi	r2,r2,47
 2aae5a8:	10000a1e 	bne	r2,zero,2aae5d4 <alt_find_file+0xc0>
 2aae5ac:	e0bffc17 	ldw	r2,-16(fp)
 2aae5b0:	1007883a 	mov	r3,r2
 2aae5b4:	e0bffe17 	ldw	r2,-8(fp)
 2aae5b8:	1885883a 	add	r2,r3,r2
 2aae5bc:	10800003 	ldbu	r2,0(r2)
 2aae5c0:	10803fcc 	andi	r2,r2,255
 2aae5c4:	1080201c 	xori	r2,r2,128
 2aae5c8:	10bfe004 	addi	r2,r2,-128
 2aae5cc:	1004c03a 	cmpne	r2,r2,zero
 2aae5d0:	10000a1e 	bne	r2,zero,2aae5fc <alt_find_file+0xe8>
 2aae5d4:	e0bffd17 	ldw	r2,-12(fp)
 2aae5d8:	11000217 	ldw	r4,8(r2)
 2aae5dc:	e1bffc17 	ldw	r6,-16(fp)
 2aae5e0:	e17ffe17 	ldw	r5,-8(fp)
 2aae5e4:	2aae7c80 	call	2aae7c8 <memcmp>
 2aae5e8:	1004c03a 	cmpne	r2,r2,zero
 2aae5ec:	1000031e 	bne	r2,zero,2aae5fc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2aae5f0:	e0bffd17 	ldw	r2,-12(fp)
 2aae5f4:	e0bfff15 	stw	r2,-4(fp)
 2aae5f8:	00000806 	br	2aae61c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2aae5fc:	e0bffd17 	ldw	r2,-12(fp)
 2aae600:	10800017 	ldw	r2,0(r2)
 2aae604:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2aae608:	00c0aaf4 	movhi	r3,683
 2aae60c:	18c1c304 	addi	r3,r3,1804
 2aae610:	e0bffd17 	ldw	r2,-12(fp)
 2aae614:	10ffc91e 	bne	r2,r3,2aae53c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2aae618:	e03fff15 	stw	zero,-4(fp)
 2aae61c:	e0bfff17 	ldw	r2,-4(fp)
}
 2aae620:	e037883a 	mov	sp,fp
 2aae624:	dfc00117 	ldw	ra,4(sp)
 2aae628:	df000017 	ldw	fp,0(sp)
 2aae62c:	dec00204 	addi	sp,sp,8
 2aae630:	f800283a 	ret

02aae634 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2aae634:	defffc04 	addi	sp,sp,-16
 2aae638:	df000315 	stw	fp,12(sp)
 2aae63c:	df000304 	addi	fp,sp,12
 2aae640:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2aae644:	00bffa04 	movi	r2,-24
 2aae648:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2aae64c:	e03ffe15 	stw	zero,-8(fp)
 2aae650:	00001e06 	br	2aae6cc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 2aae654:	e0bffe17 	ldw	r2,-8(fp)
 2aae658:	00c0aaf4 	movhi	r3,683
 2aae65c:	18c15904 	addi	r3,r3,1380
 2aae660:	10800324 	muli	r2,r2,12
 2aae664:	10c5883a 	add	r2,r2,r3
 2aae668:	10800017 	ldw	r2,0(r2)
 2aae66c:	1004c03a 	cmpne	r2,r2,zero
 2aae670:	1000131e 	bne	r2,zero,2aae6c0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 2aae674:	e0bffe17 	ldw	r2,-8(fp)
 2aae678:	00c0aaf4 	movhi	r3,683
 2aae67c:	18c15904 	addi	r3,r3,1380
 2aae680:	10800324 	muli	r2,r2,12
 2aae684:	10c7883a 	add	r3,r2,r3
 2aae688:	e0bfff17 	ldw	r2,-4(fp)
 2aae68c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2aae690:	0080aaf4 	movhi	r2,683
 2aae694:	1081c704 	addi	r2,r2,1820
 2aae698:	10c00017 	ldw	r3,0(r2)
 2aae69c:	e0bffe17 	ldw	r2,-8(fp)
 2aae6a0:	1880040e 	bge	r3,r2,2aae6b4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 2aae6a4:	00c0aaf4 	movhi	r3,683
 2aae6a8:	18c1c704 	addi	r3,r3,1820
 2aae6ac:	e0bffe17 	ldw	r2,-8(fp)
 2aae6b0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2aae6b4:	e0bffe17 	ldw	r2,-8(fp)
 2aae6b8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2aae6bc:	00000606 	br	2aae6d8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2aae6c0:	e0bffe17 	ldw	r2,-8(fp)
 2aae6c4:	10800044 	addi	r2,r2,1
 2aae6c8:	e0bffe15 	stw	r2,-8(fp)
 2aae6cc:	e0bffe17 	ldw	r2,-8(fp)
 2aae6d0:	10800810 	cmplti	r2,r2,32
 2aae6d4:	103fdf1e 	bne	r2,zero,2aae654 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2aae6d8:	e0bffd17 	ldw	r2,-12(fp)
}
 2aae6dc:	e037883a 	mov	sp,fp
 2aae6e0:	df000017 	ldw	fp,0(sp)
 2aae6e4:	dec00104 	addi	sp,sp,4
 2aae6e8:	f800283a 	ret

02aae6ec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2aae6ec:	defffb04 	addi	sp,sp,-20
 2aae6f0:	df000415 	stw	fp,16(sp)
 2aae6f4:	df000404 	addi	fp,sp,16
 2aae6f8:	e13ffe15 	stw	r4,-8(fp)
 2aae6fc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2aae700:	e0bfff17 	ldw	r2,-4(fp)
 2aae704:	10840070 	cmpltui	r2,r2,4097
 2aae708:	1000021e 	bne	r2,zero,2aae714 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2aae70c:	00840004 	movi	r2,4096
 2aae710:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2aae714:	e0fffe17 	ldw	r3,-8(fp)
 2aae718:	e0bfff17 	ldw	r2,-4(fp)
 2aae71c:	1885883a 	add	r2,r3,r2
 2aae720:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2aae724:	e0bffe17 	ldw	r2,-8(fp)
 2aae728:	e0bffd15 	stw	r2,-12(fp)
 2aae72c:	00000506 	br	2aae744 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2aae730:	e0bffd17 	ldw	r2,-12(fp)
 2aae734:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2aae738:	e0bffd17 	ldw	r2,-12(fp)
 2aae73c:	10800804 	addi	r2,r2,32
 2aae740:	e0bffd15 	stw	r2,-12(fp)
 2aae744:	e0fffd17 	ldw	r3,-12(fp)
 2aae748:	e0bffc17 	ldw	r2,-16(fp)
 2aae74c:	18bff836 	bltu	r3,r2,2aae730 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2aae750:	e0bffe17 	ldw	r2,-8(fp)
 2aae754:	108007cc 	andi	r2,r2,31
 2aae758:	1005003a 	cmpeq	r2,r2,zero
 2aae75c:	1000021e 	bne	r2,zero,2aae768 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 2aae760:	e0bffd17 	ldw	r2,-12(fp)
 2aae764:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2aae768:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2aae76c:	e037883a 	mov	sp,fp
 2aae770:	df000017 	ldw	fp,0(sp)
 2aae774:	dec00104 	addi	sp,sp,4
 2aae778:	f800283a 	ret

02aae77c <atexit>:
 2aae77c:	200b883a 	mov	r5,r4
 2aae780:	000d883a 	mov	r6,zero
 2aae784:	0009883a 	mov	r4,zero
 2aae788:	000f883a 	mov	r7,zero
 2aae78c:	2aae9501 	jmpi	2aae950 <__register_exitproc>

02aae790 <exit>:
 2aae790:	defffe04 	addi	sp,sp,-8
 2aae794:	000b883a 	mov	r5,zero
 2aae798:	dc000015 	stw	r16,0(sp)
 2aae79c:	dfc00115 	stw	ra,4(sp)
 2aae7a0:	2021883a 	mov	r16,r4
 2aae7a4:	2aaea880 	call	2aaea88 <__call_exitprocs>
 2aae7a8:	0080aaf4 	movhi	r2,683
 2aae7ac:	1081c104 	addi	r2,r2,1796
 2aae7b0:	11000017 	ldw	r4,0(r2)
 2aae7b4:	20800f17 	ldw	r2,60(r4)
 2aae7b8:	10000126 	beq	r2,zero,2aae7c0 <exit+0x30>
 2aae7bc:	103ee83a 	callr	r2
 2aae7c0:	8009883a 	mov	r4,r16
 2aae7c4:	2aaec780 	call	2aaec78 <_exit>

02aae7c8 <memcmp>:
 2aae7c8:	00c000c4 	movi	r3,3
 2aae7cc:	1980032e 	bgeu	r3,r6,2aae7dc <memcmp+0x14>
 2aae7d0:	2144b03a 	or	r2,r4,r5
 2aae7d4:	10c4703a 	and	r2,r2,r3
 2aae7d8:	10000f26 	beq	r2,zero,2aae818 <memcmp+0x50>
 2aae7dc:	31ffffc4 	addi	r7,r6,-1
 2aae7e0:	3000061e 	bne	r6,zero,2aae7fc <memcmp+0x34>
 2aae7e4:	00000a06 	br	2aae810 <memcmp+0x48>
 2aae7e8:	39ffffc4 	addi	r7,r7,-1
 2aae7ec:	00bfffc4 	movi	r2,-1
 2aae7f0:	21000044 	addi	r4,r4,1
 2aae7f4:	29400044 	addi	r5,r5,1
 2aae7f8:	38800526 	beq	r7,r2,2aae810 <memcmp+0x48>
 2aae7fc:	20c00003 	ldbu	r3,0(r4)
 2aae800:	28800003 	ldbu	r2,0(r5)
 2aae804:	18bff826 	beq	r3,r2,2aae7e8 <memcmp+0x20>
 2aae808:	1885c83a 	sub	r2,r3,r2
 2aae80c:	f800283a 	ret
 2aae810:	0005883a 	mov	r2,zero
 2aae814:	f800283a 	ret
 2aae818:	180f883a 	mov	r7,r3
 2aae81c:	20c00017 	ldw	r3,0(r4)
 2aae820:	28800017 	ldw	r2,0(r5)
 2aae824:	18bfed1e 	bne	r3,r2,2aae7dc <memcmp+0x14>
 2aae828:	31bfff04 	addi	r6,r6,-4
 2aae82c:	21000104 	addi	r4,r4,4
 2aae830:	29400104 	addi	r5,r5,4
 2aae834:	39bff936 	bltu	r7,r6,2aae81c <memcmp+0x54>
 2aae838:	003fe806 	br	2aae7dc <memcmp+0x14>

02aae83c <memcpy>:
 2aae83c:	01c003c4 	movi	r7,15
 2aae840:	2007883a 	mov	r3,r4
 2aae844:	3980032e 	bgeu	r7,r6,2aae854 <memcpy+0x18>
 2aae848:	2904b03a 	or	r2,r5,r4
 2aae84c:	108000cc 	andi	r2,r2,3
 2aae850:	10000926 	beq	r2,zero,2aae878 <memcpy+0x3c>
 2aae854:	30000626 	beq	r6,zero,2aae870 <memcpy+0x34>
 2aae858:	30cd883a 	add	r6,r6,r3
 2aae85c:	28800003 	ldbu	r2,0(r5)
 2aae860:	29400044 	addi	r5,r5,1
 2aae864:	18800005 	stb	r2,0(r3)
 2aae868:	18c00044 	addi	r3,r3,1
 2aae86c:	30fffb1e 	bne	r6,r3,2aae85c <memcpy+0x20>
 2aae870:	2005883a 	mov	r2,r4
 2aae874:	f800283a 	ret
 2aae878:	3811883a 	mov	r8,r7
 2aae87c:	200f883a 	mov	r7,r4
 2aae880:	28c00017 	ldw	r3,0(r5)
 2aae884:	31bffc04 	addi	r6,r6,-16
 2aae888:	38c00015 	stw	r3,0(r7)
 2aae88c:	28800117 	ldw	r2,4(r5)
 2aae890:	38800115 	stw	r2,4(r7)
 2aae894:	28c00217 	ldw	r3,8(r5)
 2aae898:	38c00215 	stw	r3,8(r7)
 2aae89c:	28800317 	ldw	r2,12(r5)
 2aae8a0:	29400404 	addi	r5,r5,16
 2aae8a4:	38800315 	stw	r2,12(r7)
 2aae8a8:	39c00404 	addi	r7,r7,16
 2aae8ac:	41bff436 	bltu	r8,r6,2aae880 <memcpy+0x44>
 2aae8b0:	008000c4 	movi	r2,3
 2aae8b4:	1180072e 	bgeu	r2,r6,2aae8d4 <memcpy+0x98>
 2aae8b8:	1007883a 	mov	r3,r2
 2aae8bc:	28800017 	ldw	r2,0(r5)
 2aae8c0:	31bfff04 	addi	r6,r6,-4
 2aae8c4:	29400104 	addi	r5,r5,4
 2aae8c8:	38800015 	stw	r2,0(r7)
 2aae8cc:	39c00104 	addi	r7,r7,4
 2aae8d0:	19bffa36 	bltu	r3,r6,2aae8bc <memcpy+0x80>
 2aae8d4:	3807883a 	mov	r3,r7
 2aae8d8:	003fde06 	br	2aae854 <memcpy+0x18>

02aae8dc <strlen>:
 2aae8dc:	208000cc 	andi	r2,r4,3
 2aae8e0:	2011883a 	mov	r8,r4
 2aae8e4:	1000161e 	bne	r2,zero,2aae940 <strlen+0x64>
 2aae8e8:	20c00017 	ldw	r3,0(r4)
 2aae8ec:	017fbff4 	movhi	r5,65279
 2aae8f0:	297fbfc4 	addi	r5,r5,-257
 2aae8f4:	01e02074 	movhi	r7,32897
 2aae8f8:	39e02004 	addi	r7,r7,-32640
 2aae8fc:	1945883a 	add	r2,r3,r5
 2aae900:	11c4703a 	and	r2,r2,r7
 2aae904:	00c6303a 	nor	r3,zero,r3
 2aae908:	1886703a 	and	r3,r3,r2
 2aae90c:	18000c1e 	bne	r3,zero,2aae940 <strlen+0x64>
 2aae910:	280d883a 	mov	r6,r5
 2aae914:	380b883a 	mov	r5,r7
 2aae918:	21000104 	addi	r4,r4,4
 2aae91c:	20800017 	ldw	r2,0(r4)
 2aae920:	1187883a 	add	r3,r2,r6
 2aae924:	1946703a 	and	r3,r3,r5
 2aae928:	0084303a 	nor	r2,zero,r2
 2aae92c:	10c4703a 	and	r2,r2,r3
 2aae930:	103ff926 	beq	r2,zero,2aae918 <strlen+0x3c>
 2aae934:	20800007 	ldb	r2,0(r4)
 2aae938:	10000326 	beq	r2,zero,2aae948 <strlen+0x6c>
 2aae93c:	21000044 	addi	r4,r4,1
 2aae940:	20800007 	ldb	r2,0(r4)
 2aae944:	103ffd1e 	bne	r2,zero,2aae93c <strlen+0x60>
 2aae948:	2205c83a 	sub	r2,r4,r8
 2aae94c:	f800283a 	ret

02aae950 <__register_exitproc>:
 2aae950:	defffa04 	addi	sp,sp,-24
 2aae954:	0080aaf4 	movhi	r2,683
 2aae958:	1081c104 	addi	r2,r2,1796
 2aae95c:	dc000015 	stw	r16,0(sp)
 2aae960:	14000017 	ldw	r16,0(r2)
 2aae964:	dd000415 	stw	r20,16(sp)
 2aae968:	2829883a 	mov	r20,r5
 2aae96c:	81405217 	ldw	r5,328(r16)
 2aae970:	dcc00315 	stw	r19,12(sp)
 2aae974:	dc800215 	stw	r18,8(sp)
 2aae978:	dc400115 	stw	r17,4(sp)
 2aae97c:	dfc00515 	stw	ra,20(sp)
 2aae980:	2023883a 	mov	r17,r4
 2aae984:	3027883a 	mov	r19,r6
 2aae988:	3825883a 	mov	r18,r7
 2aae98c:	28002526 	beq	r5,zero,2aaea24 <__register_exitproc+0xd4>
 2aae990:	29000117 	ldw	r4,4(r5)
 2aae994:	008007c4 	movi	r2,31
 2aae998:	11002716 	blt	r2,r4,2aaea38 <__register_exitproc+0xe8>
 2aae99c:	8800101e 	bne	r17,zero,2aae9e0 <__register_exitproc+0x90>
 2aae9a0:	2105883a 	add	r2,r4,r4
 2aae9a4:	1085883a 	add	r2,r2,r2
 2aae9a8:	20c00044 	addi	r3,r4,1
 2aae9ac:	1145883a 	add	r2,r2,r5
 2aae9b0:	0009883a 	mov	r4,zero
 2aae9b4:	15000215 	stw	r20,8(r2)
 2aae9b8:	28c00115 	stw	r3,4(r5)
 2aae9bc:	2005883a 	mov	r2,r4
 2aae9c0:	dfc00517 	ldw	ra,20(sp)
 2aae9c4:	dd000417 	ldw	r20,16(sp)
 2aae9c8:	dcc00317 	ldw	r19,12(sp)
 2aae9cc:	dc800217 	ldw	r18,8(sp)
 2aae9d0:	dc400117 	ldw	r17,4(sp)
 2aae9d4:	dc000017 	ldw	r16,0(sp)
 2aae9d8:	dec00604 	addi	sp,sp,24
 2aae9dc:	f800283a 	ret
 2aae9e0:	29802204 	addi	r6,r5,136
 2aae9e4:	00800044 	movi	r2,1
 2aae9e8:	110e983a 	sll	r7,r2,r4
 2aae9ec:	30c04017 	ldw	r3,256(r6)
 2aae9f0:	2105883a 	add	r2,r4,r4
 2aae9f4:	1085883a 	add	r2,r2,r2
 2aae9f8:	1185883a 	add	r2,r2,r6
 2aae9fc:	19c6b03a 	or	r3,r3,r7
 2aaea00:	14802015 	stw	r18,128(r2)
 2aaea04:	14c00015 	stw	r19,0(r2)
 2aaea08:	00800084 	movi	r2,2
 2aaea0c:	30c04015 	stw	r3,256(r6)
 2aaea10:	88bfe31e 	bne	r17,r2,2aae9a0 <__register_exitproc+0x50>
 2aaea14:	30804117 	ldw	r2,260(r6)
 2aaea18:	11c4b03a 	or	r2,r2,r7
 2aaea1c:	30804115 	stw	r2,260(r6)
 2aaea20:	003fdf06 	br	2aae9a0 <__register_exitproc+0x50>
 2aaea24:	0080aaf4 	movhi	r2,683
 2aaea28:	1088b804 	addi	r2,r2,8928
 2aaea2c:	100b883a 	mov	r5,r2
 2aaea30:	80805215 	stw	r2,328(r16)
 2aaea34:	003fd606 	br	2aae990 <__register_exitproc+0x40>
 2aaea38:	0080aaf4 	movhi	r2,683
 2aaea3c:	10ad9804 	addi	r2,r2,-18848
 2aaea40:	1000021e 	bne	r2,zero,2aaea4c <__register_exitproc+0xfc>
 2aaea44:	013fffc4 	movi	r4,-1
 2aaea48:	003fdc06 	br	2aae9bc <__register_exitproc+0x6c>
 2aaea4c:	01006404 	movi	r4,400
 2aaea50:	103ee83a 	callr	r2
 2aaea54:	1007883a 	mov	r3,r2
 2aaea58:	103ffa26 	beq	r2,zero,2aaea44 <__register_exitproc+0xf4>
 2aaea5c:	80805217 	ldw	r2,328(r16)
 2aaea60:	180b883a 	mov	r5,r3
 2aaea64:	18000115 	stw	zero,4(r3)
 2aaea68:	18800015 	stw	r2,0(r3)
 2aaea6c:	80c05215 	stw	r3,328(r16)
 2aaea70:	18006215 	stw	zero,392(r3)
 2aaea74:	18006315 	stw	zero,396(r3)
 2aaea78:	0009883a 	mov	r4,zero
 2aaea7c:	883fc826 	beq	r17,zero,2aae9a0 <__register_exitproc+0x50>
 2aaea80:	003fd706 	br	2aae9e0 <__register_exitproc+0x90>

02aaea84 <register_fini>:
 2aaea84:	f800283a 	ret

02aaea88 <__call_exitprocs>:
 2aaea88:	0080aaf4 	movhi	r2,683
 2aaea8c:	1081c104 	addi	r2,r2,1796
 2aaea90:	10800017 	ldw	r2,0(r2)
 2aaea94:	defff304 	addi	sp,sp,-52
 2aaea98:	df000b15 	stw	fp,44(sp)
 2aaea9c:	d8800115 	stw	r2,4(sp)
 2aaeaa0:	0080aaf4 	movhi	r2,683
 2aaeaa4:	10ad9304 	addi	r2,r2,-18868
 2aaeaa8:	1005003a 	cmpeq	r2,r2,zero
 2aaeaac:	d8800215 	stw	r2,8(sp)
 2aaeab0:	d8800117 	ldw	r2,4(sp)
 2aaeab4:	dd400815 	stw	r21,32(sp)
 2aaeab8:	dd000715 	stw	r20,28(sp)
 2aaeabc:	10805204 	addi	r2,r2,328
 2aaeac0:	dfc00c15 	stw	ra,48(sp)
 2aaeac4:	ddc00a15 	stw	r23,40(sp)
 2aaeac8:	dd800915 	stw	r22,36(sp)
 2aaeacc:	dcc00615 	stw	r19,24(sp)
 2aaead0:	dc800515 	stw	r18,20(sp)
 2aaead4:	dc400415 	stw	r17,16(sp)
 2aaead8:	dc000315 	stw	r16,12(sp)
 2aaeadc:	282b883a 	mov	r21,r5
 2aaeae0:	2039883a 	mov	fp,r4
 2aaeae4:	d8800015 	stw	r2,0(sp)
 2aaeae8:	2829003a 	cmpeq	r20,r5,zero
 2aaeaec:	d8800117 	ldw	r2,4(sp)
 2aaeaf0:	14405217 	ldw	r17,328(r2)
 2aaeaf4:	88001026 	beq	r17,zero,2aaeb38 <__call_exitprocs+0xb0>
 2aaeaf8:	ddc00017 	ldw	r23,0(sp)
 2aaeafc:	88800117 	ldw	r2,4(r17)
 2aaeb00:	8c802204 	addi	r18,r17,136
 2aaeb04:	143fffc4 	addi	r16,r2,-1
 2aaeb08:	80000916 	blt	r16,zero,2aaeb30 <__call_exitprocs+0xa8>
 2aaeb0c:	05bfffc4 	movi	r22,-1
 2aaeb10:	a000151e 	bne	r20,zero,2aaeb68 <__call_exitprocs+0xe0>
 2aaeb14:	8409883a 	add	r4,r16,r16
 2aaeb18:	2105883a 	add	r2,r4,r4
 2aaeb1c:	1485883a 	add	r2,r2,r18
 2aaeb20:	10c02017 	ldw	r3,128(r2)
 2aaeb24:	a8c01126 	beq	r21,r3,2aaeb6c <__call_exitprocs+0xe4>
 2aaeb28:	843fffc4 	addi	r16,r16,-1
 2aaeb2c:	85bff81e 	bne	r16,r22,2aaeb10 <__call_exitprocs+0x88>
 2aaeb30:	d8800217 	ldw	r2,8(sp)
 2aaeb34:	10003126 	beq	r2,zero,2aaebfc <__call_exitprocs+0x174>
 2aaeb38:	dfc00c17 	ldw	ra,48(sp)
 2aaeb3c:	df000b17 	ldw	fp,44(sp)
 2aaeb40:	ddc00a17 	ldw	r23,40(sp)
 2aaeb44:	dd800917 	ldw	r22,36(sp)
 2aaeb48:	dd400817 	ldw	r21,32(sp)
 2aaeb4c:	dd000717 	ldw	r20,28(sp)
 2aaeb50:	dcc00617 	ldw	r19,24(sp)
 2aaeb54:	dc800517 	ldw	r18,20(sp)
 2aaeb58:	dc400417 	ldw	r17,16(sp)
 2aaeb5c:	dc000317 	ldw	r16,12(sp)
 2aaeb60:	dec00d04 	addi	sp,sp,52
 2aaeb64:	f800283a 	ret
 2aaeb68:	8409883a 	add	r4,r16,r16
 2aaeb6c:	88c00117 	ldw	r3,4(r17)
 2aaeb70:	2105883a 	add	r2,r4,r4
 2aaeb74:	1445883a 	add	r2,r2,r17
 2aaeb78:	18ffffc4 	addi	r3,r3,-1
 2aaeb7c:	11800217 	ldw	r6,8(r2)
 2aaeb80:	1c001526 	beq	r3,r16,2aaebd8 <__call_exitprocs+0x150>
 2aaeb84:	10000215 	stw	zero,8(r2)
 2aaeb88:	303fe726 	beq	r6,zero,2aaeb28 <__call_exitprocs+0xa0>
 2aaeb8c:	00c00044 	movi	r3,1
 2aaeb90:	1c06983a 	sll	r3,r3,r16
 2aaeb94:	90804017 	ldw	r2,256(r18)
 2aaeb98:	8cc00117 	ldw	r19,4(r17)
 2aaeb9c:	1884703a 	and	r2,r3,r2
 2aaeba0:	10001426 	beq	r2,zero,2aaebf4 <__call_exitprocs+0x16c>
 2aaeba4:	90804117 	ldw	r2,260(r18)
 2aaeba8:	1884703a 	and	r2,r3,r2
 2aaebac:	10000c1e 	bne	r2,zero,2aaebe0 <__call_exitprocs+0x158>
 2aaebb0:	2105883a 	add	r2,r4,r4
 2aaebb4:	1485883a 	add	r2,r2,r18
 2aaebb8:	11400017 	ldw	r5,0(r2)
 2aaebbc:	e009883a 	mov	r4,fp
 2aaebc0:	303ee83a 	callr	r6
 2aaebc4:	88800117 	ldw	r2,4(r17)
 2aaebc8:	98bfc81e 	bne	r19,r2,2aaeaec <__call_exitprocs+0x64>
 2aaebcc:	b8800017 	ldw	r2,0(r23)
 2aaebd0:	147fd526 	beq	r2,r17,2aaeb28 <__call_exitprocs+0xa0>
 2aaebd4:	003fc506 	br	2aaeaec <__call_exitprocs+0x64>
 2aaebd8:	8c000115 	stw	r16,4(r17)
 2aaebdc:	003fea06 	br	2aaeb88 <__call_exitprocs+0x100>
 2aaebe0:	2105883a 	add	r2,r4,r4
 2aaebe4:	1485883a 	add	r2,r2,r18
 2aaebe8:	11000017 	ldw	r4,0(r2)
 2aaebec:	303ee83a 	callr	r6
 2aaebf0:	003ff406 	br	2aaebc4 <__call_exitprocs+0x13c>
 2aaebf4:	303ee83a 	callr	r6
 2aaebf8:	003ff206 	br	2aaebc4 <__call_exitprocs+0x13c>
 2aaebfc:	88800117 	ldw	r2,4(r17)
 2aaec00:	1000081e 	bne	r2,zero,2aaec24 <__call_exitprocs+0x19c>
 2aaec04:	89000017 	ldw	r4,0(r17)
 2aaec08:	20000726 	beq	r4,zero,2aaec28 <__call_exitprocs+0x1a0>
 2aaec0c:	b9000015 	stw	r4,0(r23)
 2aaec10:	8809883a 	mov	r4,r17
 2aaec14:	2aab64c0 	call	2aab64c <free>
 2aaec18:	bc400017 	ldw	r17,0(r23)
 2aaec1c:	883fb71e 	bne	r17,zero,2aaeafc <__call_exitprocs+0x74>
 2aaec20:	003fc506 	br	2aaeb38 <__call_exitprocs+0xb0>
 2aaec24:	89000017 	ldw	r4,0(r17)
 2aaec28:	882f883a 	mov	r23,r17
 2aaec2c:	2023883a 	mov	r17,r4
 2aaec30:	883fb21e 	bne	r17,zero,2aaeafc <__call_exitprocs+0x74>
 2aaec34:	003fc006 	br	2aaeb38 <__call_exitprocs+0xb0>

02aaec38 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2aaec38:	defffd04 	addi	sp,sp,-12
 2aaec3c:	df000215 	stw	fp,8(sp)
 2aaec40:	df000204 	addi	fp,sp,8
 2aaec44:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2aaec48:	e0bfff17 	ldw	r2,-4(fp)
 2aaec4c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2aaec50:	e0bffe17 	ldw	r2,-8(fp)
 2aaec54:	1005003a 	cmpeq	r2,r2,zero
 2aaec58:	1000021e 	bne	r2,zero,2aaec64 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2aaec5c:	002af070 	cmpltui	zero,zero,43969
 2aaec60:	00000106 	br	2aaec68 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2aaec64:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2aaec68:	e037883a 	mov	sp,fp
 2aaec6c:	df000017 	ldw	fp,0(sp)
 2aaec70:	dec00104 	addi	sp,sp,4
 2aaec74:	f800283a 	ret

02aaec78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2aaec78:	defffd04 	addi	sp,sp,-12
 2aaec7c:	dfc00215 	stw	ra,8(sp)
 2aaec80:	df000115 	stw	fp,4(sp)
 2aaec84:	df000104 	addi	fp,sp,4
 2aaec88:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2aaec8c:	e13fff17 	ldw	r4,-4(fp)
 2aaec90:	2aaec380 	call	2aaec38 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2aaec94:	003fff06 	br	2aaec94 <_exit+0x1c>
 2aaec98:	02aaea84 	movi	r10,-21590
