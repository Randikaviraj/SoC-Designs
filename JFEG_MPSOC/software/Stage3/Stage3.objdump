
Stage3.elf:     file format elf32-littlenios2
Stage3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000184

Program Header:
    LOAD off    0x00000000 vaddr 0x08001000 paddr 0x03fff7d0 align 2**12
         filesz 0x000009b4 memsz 0x000009b4 flags r-x
    LOAD off    0x00001184 vaddr 0x04000184 paddr 0x04000184 align 2**12
         filesz 0x00005e88 memsz 0x00005e88 flags r-x
    LOAD off    0x0000700c vaddr 0x0400600c paddr 0x04007a94 align 2**12
         filesz 0x00001a88 memsz 0x00001a88 flags rw-
    LOAD off    0x0000951c vaddr 0x0400951c paddr 0x0400951c align 2**12
         filesz 0x00000000 memsz 0x000004e0 flags rw-
    LOAD off    0x00009800 vaddr 0x08001800 paddr 0x08001800 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08001800  08001800  00009800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08001820  03fffff0  00000820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005dc0  04000184  04000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  04005f44  04005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a88  0400600c  04007a94  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004e0  0400951c  0400951c  0000951c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00009820  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  00009848  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000104a  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a2cc  00000000  00000000  0000b1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005024  00000000  00000000  00025476  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cca9  00000000  00000000  0002a49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001254  00000000  00000000  00037144  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001622  00000000  00000000  00038398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004165  00000000  00000000  000399ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003db20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000406ef  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000406f2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000406f7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000406f8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000406f9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00040704  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004070f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  0004071a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0004071d  2**0
                  CONTENTS, READONLY
 26 .jdi          000190dd  00000000  00000000  00040751  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00164bd4  00000000  00000000  0005982e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08001800 l    d  .entry	00000000 .entry
08001820 l    d  .exceptions	00000000 .exceptions
04000184 l    d  .text	00000000 .text
04005f44 l    d  .rodata	00000000 .rodata
0400600c l    d  .rwdata	00000000 .rwdata
0400951c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 quant.c
04005f44 l     O .rodata	00000040 C.1.2280
04005f84 l     O .rodata	00000040 C.0.2279
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0400604c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04001fa4 l     F .text	00000058 std
040020b0 l     F .text	00000008 __fp_lock
040020b8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
04003078 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
040030d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040031d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
040032f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040033d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04003534 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04003760 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04007a84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040039fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040069fc l     O .rwdata	00001060 jtag_uart_3
04003aec l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400428c l     F .text	00000228 altera_avalon_jtag_uart_irq
040044b4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04004b30 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04004e54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04005278 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040053b4 l     F .text	000000dc alt_file_locked
04005618 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04005d2c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04005ee0 l     F .text	00000040 alt_sim_halt
04002e1c g     F .text	00000070 _isatty_r
04003594 g     F .text	0000006c alt_main
0400070c g     F .text	000000a0 _puts_r
0400976c g     O .bss	00000100 alt_irq
04002e8c g     F .text	00000078 _lseek_r
040004d0 g     F .text	00000118 quantization
04003ddc g     F .text	00000060 altera_avalon_fifo_write_almostfull
04007a94 g       *ABS*	00000000 __flash_rwdata_start
040099fc g       *ABS*	00000000 __alt_heap_start
04002a58 g     F .text	00000068 __sseek
0400200c g     F .text	000000a4 __sinit
0400210c g     F .text	00000068 __sfmoreglue
04003620 g     F .text	00000020 __malloc_unlock
040014f4 g     F .text	000000e0 memmove
04003b24 g     F .text	000000bc altera_avalon_fifo_init
040020fc g     F .text	00000010 _cleanup
04003e9c g     F .text	00000064 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
08001800 g     F .entry	0000001c __reset
0400405c g     F .text	00000028 altera_avalon_fifo_read_backpressure
03fffff0 g       *ABS*	00000000 __flash_exceptions_start
04002da8 g     F .text	00000074 _fstat_r
04009528 g     O .bss	00000004 errno
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
04009530 g     O .bss	00000004 alt_argv
0400fa5c g       *ABS*	00000000 _gp
04003d14 g     F .text	00000068 altera_avalon_fifo_clear_event
0400687c g     O .rwdata	00000180 alt_fd_list
0400583c g     F .text	00000094 alt_find_dev
0400066c g     F .text	000000a0 memcpy
040020f0 g     F .text	0000000c _cleanup_r
0400533c g     F .text	00000078 alt_io_redirect
04005f44 g       *ABS*	00000000 __DTOR_END__
040007ac g     F .text	00000014 puts
040046cc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
04003238 g     F .text	000000c0 isatty
04005aa8 g     F .text	00000090 alt_icache_flush
0400951c g     O .bss	00000004 __malloc_top_pad
04000260 g     F .text	00000270 initialize_quantization_tables
04000834 g     F .text	0000049c __sfvwrite_r
04001bc8 g     F .text	00000070 _sbrk_r
0400956c g     O .bss	00000080 Temp
04002f04 g     F .text	00000078 _read_r
04007a7c g     O .rwdata	00000004 alt_max_fd
04002c84 g     F .text	00000110 _fclose_r
04001f70 g     F .text	00000034 fflush
04009520 g     O .bss	00000004 __malloc_max_sbrked_mem
04003444 g     F .text	000000f0 lseek
04007a60 g     O .rwdata	00000004 _global_impure_ptr
040015d4 g     F .text	000005f4 _realloc_r
040099fc g       *ABS*	00000000 __bss_end
04005180 g     F .text	000000f8 alt_iic_isr_register
04005710 g     F .text	0000010c alt_tick
040020d8 g     F .text	00000018 __fp_lock_all
04005138 g     F .text	00000048 alt_ic_irq_enabled
04005678 g     F .text	00000098 alt_alarm_stop
04009538 g     O .bss	00000004 alt_irq_active
080018ec g     F .exceptions	000000c8 alt_irq_handler
04006854 g     O .rwdata	00000028 alt_dev_null
04004d84 g     F .text	0000001c alt_dcache_flush_all
040095ec g     O .bss	00000040 Lqt
04003d7c g     F .text	00000060 altera_avalon_fifo_write_ienable
04007a94 g       *ABS*	00000000 __ram_rwdata_end
04003c84 g     F .text	0000002c altera_avalon_fifo_read_almostempty
04007a74 g     O .rwdata	00000008 alt_dev_list
040038dc g     F .text	00000120 write
0400600c g       *ABS*	00000000 __ram_rodata_end
04003104 g     F .text	000000d4 fstat
040099fc g       *ABS*	00000000 end
040041cc g     F .text	000000c0 altera_avalon_jtag_uart_init
04003cb0 g     F .text	0000003c altera_avalon_fifo_read_event
04005f40 g       *ABS*	00000000 __CTOR_LIST__
05555540 g       *ABS*	00000000 __alt_stack_pointer
04004ba0 g     F .text	00000090 alt_avalon_timer_sc_init
040048f0 g     F .text	00000240 altera_avalon_jtag_uart_write
04001ffc g     F .text	00000004 __sfp_lock_acquire
04003f70 g     F .text	00000058 altera_avalon_fifo_read_fifo
04001410 g     F .text	000000e4 memchr
04002390 g     F .text	00000314 _free_r
04005d30 g     F .text	000001b0 __call_exitprocs
040001c0 g     F .text	000000a0 DSP_Division
04007a68 g     O .rwdata	00000004 __malloc_sbrk_base
04000184 g     F .text	0000003c _start
0400953c g     O .bss	00000004 _alt_tick_rate
04009540 g     O .bss	00000004 _alt_nticks
04003640 g     F .text	00000120 read
04003a90 g     F .text	0000005c alt_sys_init
04005bf8 g     F .text	00000134 __register_exitproc
04004564 g     F .text	00000074 altera_avalon_jtag_uart_close
0400600c g       *ABS*	00000000 __ram_rwdata_start
04005f44 g       *ABS*	00000000 __ram_rodata_start
04009544 g     O .bss	00000028 __malloc_current_mallinfo
04004084 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
040059f0 g     F .text	000000b8 alt_get_fd
04002c14 g     F .text	00000070 _close_r
04005b84 g     F .text	00000074 memcmp
04004134 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
040099fc g       *ABS*	00000000 __alt_stack_base
0400417c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
04001c38 g     F .text	0000013c __swsetup_r
04003be0 g     F .text	0000003c altera_avalon_fifo_read_status
04002174 g     F .text	000000f0 __sfp
0400644c g     O .rwdata	00000408 __malloc_av_
04002008 g     F .text	00000004 __sinit_lock_release
04002b3c g     F .text	00000060 __sread
04004030 g     F .text	0000002c altera_avalon_fifo_read_other_info
040058d0 g     F .text	00000120 alt_find_file
04004da0 g     F .text	000000b4 alt_dev_llist_insert
04003600 g     F .text	00000020 __malloc_lock
04003820 g     F .text	000000bc sbrk
04001d74 g     F .text	000001fc _fflush_r
0400951c g       *ABS*	00000000 __bss_start
040029b8 g     F .text	00000098 memset
040005e8 g     F .text	00000084 main
0400962c g     O .bss	00000080 ILqt
04009534 g     O .bss	00000004 alt_envp
04009524 g     O .bss	00000004 __malloc_max_total_mem
040040dc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04003cec g     F .text	00000028 altera_avalon_fifo_read_level
04002a50 g     F .text	00000008 __sclose
05555540 g       *ABS*	00000000 __alt_heap_limit
04002d94 g     F .text	00000014 fclose
0400986c g     O .bss	00000190 _atexit0
04000cd0 g     F .text	00000740 _malloc_r
04007a80 g     O .rwdata	00000004 alt_errno
0400276c g     F .text	000000b8 _fwalk
04002264 g     F .text	0000012c _malloc_trim_r
04005f44 g       *ABS*	00000000 __CTOR_END__
04005f44 g       *ABS*	00000000 __flash_rodata_start
04005f44 g       *ABS*	00000000 __DTOR_LIST__
04003a5c g     F .text	00000034 alt_irq_init
040037c0 g     F .text	00000060 alt_release_fd
04005b38 g     F .text	00000014 atexit
04002b9c g     F .text	00000078 _write_r
04007a5c g     O .rwdata	00000004 _impure_ptr
0400952c g     O .bss	00000004 alt_argc
04004f18 g     F .text	00000064 _do_dtors
040096ac g     O .bss	00000040 Cqt
0400600c g     O .rwdata	00000040 zigzag_table
08001820 g       .exceptions	00000000 alt_irq_entry
040020c0 g     F .text	00000018 __fp_unlock_all
04007a6c g     O .rwdata	00000008 alt_fs_list
08001820 g       *ABS*	00000000 __ram_exceptions_start
04003fc8 g     F .text	00000068 altera_avalon_fifo_write_other_info
04004fac g     F .text	00000050 alt_ic_isr_register
04007a94 g       *ABS*	00000000 _edata
040099fc g       *ABS*	00000000 _end
080019b4 g       *ABS*	00000000 __ram_exceptions_end
040045d8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
04005098 g     F .text	000000a0 alt_ic_irq_disable
04002ac0 g     F .text	0000007c __swrite
04007a64 g     O .rwdata	00000004 __malloc_trim_threshold
0400581c g     F .text	00000020 altera_nios2_qsys_irq_init
04005b4c g     F .text	00000038 exit
040026a4 g     F .text	000000c8 _fwalk_reent
04003c1c g     F .text	0000003c altera_avalon_fifo_read_ienable
05555540 g       *ABS*	00000000 __alt_data_end
08001820 g     F .exceptions	00000000 alt_exception
04002000 g     F .text	00000004 __sfp_lock_release
040096ec g     O .bss	00000080 ICqt
04005f20 g     F .text	00000020 _exit
04004c30 g     F .text	00000154 alt_alarm_start
04003c58 g     F .text	0000002c altera_avalon_fifo_read_almostfull
04002824 g     F .text	00000194 __smakebuf_r
040007c0 g     F .text	00000074 strlen
04005490 g     F .text	00000188 open
04003f00 g     F .text	00000070 altera_avalon_read_fifo
04004f7c g     F .text	00000030 alt_icache_flush_all
04007a88 g     O .rwdata	00000004 alt_priority_mask
04004ffc g     F .text	0000009c alt_ic_irq_enable
08001800 g       *ABS*	00000000 __alt_mem_instruction_mem_3
04003e3c g     F .text	00000060 altera_avalon_fifo_write_almostempty
04007a8c g     O .rwdata	00000008 alt_alarm_list
04004eb4 g     F .text	00000064 _do_ctors
04002f7c g     F .text	000000fc close
04003358 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
04002004 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08001800 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8001800:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8001804:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8001808:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800180c:	00bffd16 	blt	zero,r2,8001804 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8001810:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8001814:	08406114 	ori	at,at,388
    jmp r1
 8001818:	0800683a 	jmp	at
 800181c:	00000000 	call	0 <__alt_mem_sdram_controller>

Disassembly of section .exceptions:

08001820 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8001820:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8001824:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8001828:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800182c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8001830:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8001834:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8001838:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800183c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8001840:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8001844:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8001848:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800184c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8001850:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8001854:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8001858:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800185c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8001860:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8001864:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8001868:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800186c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8001870:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8001874:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8001878:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800187c:	10000326 	beq	r2,zero,800188c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8001880:	20000226 	beq	r4,zero,800188c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8001884:	80018ec0 	call	80018ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8001888:	00000306 	br	8001898 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800188c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8001890:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8001894:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8001898:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800189c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80018a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80018a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80018a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80018ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80018b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80018b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80018b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80018bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80018c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80018c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80018c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80018cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80018d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80018d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80018d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80018dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80018e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80018e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80018e8:	ef80083a 	eret

080018ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80018ec:	defff904 	addi	sp,sp,-28
 80018f0:	dfc00615 	stw	ra,24(sp)
 80018f4:	df000515 	stw	fp,20(sp)
 80018f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80018fc:	0005313a 	rdctl	r2,ipending
 8001900:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8001904:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8001908:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800190c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8001910:	00800044 	movi	r2,1
 8001914:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8001918:	e0ffff17 	ldw	r3,-4(fp)
 800191c:	e0bffe17 	ldw	r2,-8(fp)
 8001920:	1884703a 	and	r2,r3,r2
 8001924:	1005003a 	cmpeq	r2,r2,zero
 8001928:	1000161e 	bne	r2,zero,8001984 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800192c:	e0bffd17 	ldw	r2,-12(fp)
 8001930:	00c10074 	movhi	r3,1025
 8001934:	18e5db04 	addi	r3,r3,-26772
 8001938:	100490fa 	slli	r2,r2,3
 800193c:	10c5883a 	add	r2,r2,r3
 8001940:	11400017 	ldw	r5,0(r2)
 8001944:	e0bffd17 	ldw	r2,-12(fp)
 8001948:	00c10074 	movhi	r3,1025
 800194c:	18e5db04 	addi	r3,r3,-26772
 8001950:	100490fa 	slli	r2,r2,3
 8001954:	10c5883a 	add	r2,r2,r3
 8001958:	10800104 	addi	r2,r2,4
 800195c:	11000017 	ldw	r4,0(r2)
 8001960:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8001964:	0005313a 	rdctl	r2,ipending
 8001968:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800196c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8001970:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8001974:	e0bfff17 	ldw	r2,-4(fp)
 8001978:	1004c03a 	cmpne	r2,r2,zero
 800197c:	103fe31e 	bne	r2,zero,800190c <alt_irq_handler+0x20>
 8001980:	00000706 	br	80019a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8001984:	e0bffe17 	ldw	r2,-8(fp)
 8001988:	1085883a 	add	r2,r2,r2
 800198c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8001990:	e0bffd17 	ldw	r2,-12(fp)
 8001994:	10800044 	addi	r2,r2,1
 8001998:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800199c:	003fde06 	br	8001918 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80019a0:	e037883a 	mov	sp,fp
 80019a4:	dfc00117 	ldw	ra,4(sp)
 80019a8:	df000017 	ldw	fp,0(sp)
 80019ac:	dec00204 	addi	sp,sp,8
 80019b0:	f800283a 	ret

Disassembly of section .text:

04000184 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000184:	06c15574 	movhi	sp,1365
    ori sp, sp, %lo(__alt_stack_pointer)
 4000188:	ded55014 	ori	sp,sp,21824

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 400018c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000190:	d6be9714 	ori	gp,gp,64092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000194:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000198:	10a54714 	ori	r2,r2,38172

    movhi r3, %hi(__bss_end)
 400019c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001a0:	18e67f14 	ori	r3,r3,39420

    beq r2, r3, 1f
 40001a4:	10c00326 	beq	r2,r3,40001b4 <_start+0x30>

0:
    stw zero, (r2)
 40001a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001b0:	10fffd36 	bltu	r2,r3,40001a8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001b4:	40033580 	call	4003358 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001b8:	40035940 	call	4003594 <alt_main>

040001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001bc:	003fff06 	br	40001bc <alt_after_alt_main>

040001c0 <DSP_Division>:
UINT16	ICqt [BLOCK_SIZE];
INT16	Temp [BLOCK_SIZE];
//
/*	This function implements 16 Step division for Q.15 format data */
UINT16 DSP_Division (UINT32 numer, UINT32 denom)
{
 40001c0:	defffc04 	addi	sp,sp,-16
 40001c4:	df000315 	stw	fp,12(sp)
 40001c8:	df000304 	addi	fp,sp,12
 40001cc:	e13ffe15 	stw	r4,-8(fp)
 40001d0:	e17fff15 	stw	r5,-4(fp)
	UINT16 i;

	denom <<= 15;
 40001d4:	e0bfff17 	ldw	r2,-4(fp)
 40001d8:	100493fa 	slli	r2,r2,15
 40001dc:	e0bfff15 	stw	r2,-4(fp)

	for (i=16; i>0; i--)
 40001e0:	00800404 	movi	r2,16
 40001e4:	e0bffd0d 	sth	r2,-12(fp)
 40001e8:	00001406 	br	400023c <DSP_Division+0x7c>
	{
		if (numer > denom)
 40001ec:	e0fffe17 	ldw	r3,-8(fp)
 40001f0:	e0bfff17 	ldw	r2,-4(fp)
 40001f4:	10c00b2e 	bgeu	r2,r3,4000224 <DSP_Division+0x64>
		{
			numer -= denom;
 40001f8:	e0fffe17 	ldw	r3,-8(fp)
 40001fc:	e0bfff17 	ldw	r2,-4(fp)
 4000200:	1885c83a 	sub	r2,r3,r2
 4000204:	e0bffe15 	stw	r2,-8(fp)
			numer <<= 1;
 4000208:	e0bffe17 	ldw	r2,-8(fp)
 400020c:	1085883a 	add	r2,r2,r2
 4000210:	e0bffe15 	stw	r2,-8(fp)
			numer++;
 4000214:	e0bffe17 	ldw	r2,-8(fp)
 4000218:	10800044 	addi	r2,r2,1
 400021c:	e0bffe15 	stw	r2,-8(fp)
 4000220:	00000306 	br	4000230 <DSP_Division+0x70>
		}
		else
			numer <<= 1;
 4000224:	e0bffe17 	ldw	r2,-8(fp)
 4000228:	1085883a 	add	r2,r2,r2
 400022c:	e0bffe15 	stw	r2,-8(fp)
{
	UINT16 i;

	denom <<= 15;

	for (i=16; i>0; i--)
 4000230:	e0bffd0b 	ldhu	r2,-12(fp)
 4000234:	10bfffc4 	addi	r2,r2,-1
 4000238:	e0bffd0d 	sth	r2,-12(fp)
 400023c:	e0bffd0b 	ldhu	r2,-12(fp)
 4000240:	1004c03a 	cmpne	r2,r2,zero
 4000244:	103fe91e 	bne	r2,zero,40001ec <DSP_Division+0x2c>
		}
		else
			numer <<= 1;
	}

	return (UINT16) numer;
 4000248:	e0bffe17 	ldw	r2,-8(fp)
 400024c:	10bfffcc 	andi	r2,r2,65535
}
 4000250:	e037883a 	mov	sp,fp
 4000254:	df000017 	ldw	fp,0(sp)
 4000258:	dec00104 	addi	sp,sp,4
 400025c:	f800283a 	ret

04000260 <initialize_quantization_tables>:

/* Multiply Quantization table with quality factor to get LQT and CQT */
void initialize_quantization_tables (void)
{
 4000260:	deffda04 	addi	sp,sp,-152
 4000264:	dfc02515 	stw	ra,148(sp)
 4000268:	df002415 	stw	fp,144(sp)
 400026c:	dc002315 	stw	r16,140(sp)
 4000270:	df002304 	addi	fp,sp,140
		14, 17, 22, 29,  51,  87,  80,  62,
		18, 22, 37, 56,  68, 109, 103,  77,
		24, 35, 55, 64,  81, 104, 113,  92,
		49, 64, 78, 87, 103, 121, 120, 101,
		72, 92, 95, 98, 112, 100, 103,  99
	};
 4000274:	00810034 	movhi	r2,1024
 4000278:	1097e104 	addi	r2,r2,24452
 400027c:	e13fe004 	addi	r4,fp,-128
 4000280:	100b883a 	mov	r5,r2
 4000284:	01801004 	movi	r6,64
 4000288:	400066c0 	call	400066c <memcpy>
		47, 66, 99, 99, 99, 99, 99, 99,
		99, 99, 99, 99, 99, 99, 99, 99,
		99, 99, 99, 99, 99, 99, 99, 99,
		99, 99, 99, 99, 99, 99, 99, 99,
		99, 99, 99, 99, 99, 99, 99, 99
	};
 400028c:	00810034 	movhi	r2,1024
 4000290:	1097d104 	addi	r2,r2,24388
 4000294:	e13ff004 	addi	r4,fp,-64
 4000298:	100b883a 	mov	r5,r2
 400029c:	01801004 	movi	r6,64
 40002a0:	400066c0 	call	400066c <memcpy>
					//xt_iss_profile_disable();
	//UINT32 quality_factor = (UINT32)RECV1();
	UINT32 quality_factor = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3840);
 40002a4:	010e2404 	movi	r4,14480
 40002a8:	014e1004 	movi	r5,14400
 40002ac:	4003f700 	call	4003f70 <altera_avalon_fifo_read_fifo>
 40002b0:	e0bfdd15 	stw	r2,-140(fp)
					//xt_iss_profile_enable();
	for (i=0; i<64; i++)
 40002b4:	e03fdf8d 	sth	zero,-130(fp)
 40002b8:	00005a06 	br	4000424 <initialize_quantization_tables+0x1c4>
	{
		index = zigzag_table [i];
 40002bc:	e0ffdf8b 	ldhu	r3,-130(fp)
 40002c0:	00810034 	movhi	r2,1024
 40002c4:	10980304 	addi	r2,r2,24588
 40002c8:	10c5883a 	add	r2,r2,r3
 40002cc:	10800003 	ldbu	r2,0(r2)
 40002d0:	10803fcc 	andi	r2,r2,255
 40002d4:	e0bfdf0d 	sth	r2,-132(fp)

		/* luminance quantization table * quality factor */
		value = luminance_quant_table [i] * quality_factor;
 40002d8:	e0ffdf8b 	ldhu	r3,-130(fp)
 40002dc:	e0bfe004 	addi	r2,fp,-128
 40002e0:	10c5883a 	add	r2,r2,r3
 40002e4:	10800003 	ldbu	r2,0(r2)
 40002e8:	10c03fcc 	andi	r3,r2,255
 40002ec:	e0bfdd17 	ldw	r2,-140(fp)
 40002f0:	1885383a 	mul	r2,r3,r2
 40002f4:	e0bfde15 	stw	r2,-136(fp)
		value = (value + 0x200) >> 10;
 40002f8:	e0bfde17 	ldw	r2,-136(fp)
 40002fc:	10808004 	addi	r2,r2,512
 4000300:	1004d2ba 	srli	r2,r2,10
 4000304:	e0bfde15 	stw	r2,-136(fp)

		if (value == 0)
 4000308:	e0bfde17 	ldw	r2,-136(fp)
 400030c:	1004c03a 	cmpne	r2,r2,zero
 4000310:	1000031e 	bne	r2,zero,4000320 <initialize_quantization_tables+0xc0>
			value = 1;
 4000314:	00800044 	movi	r2,1
 4000318:	e0bfde15 	stw	r2,-136(fp)
 400031c:	00000506 	br	4000334 <initialize_quantization_tables+0xd4>
		else if (value > 255)
 4000320:	e0bfde17 	ldw	r2,-136(fp)
 4000324:	10804030 	cmpltui	r2,r2,256
 4000328:	1000021e 	bne	r2,zero,4000334 <initialize_quantization_tables+0xd4>
			value = 255;
 400032c:	00803fc4 	movi	r2,255
 4000330:	e0bfde15 	stw	r2,-136(fp)

		Lqt [index] = (UINT8) value;
 4000334:	e13fdf0b 	ldhu	r4,-132(fp)
 4000338:	e0bfde17 	ldw	r2,-136(fp)
 400033c:	1007883a 	mov	r3,r2
 4000340:	00810074 	movhi	r2,1025
 4000344:	10a57b04 	addi	r2,r2,-27156
 4000348:	1105883a 	add	r2,r2,r4
 400034c:	10c00005 	stb	r3,0(r2)
		ILqt [i] = DSP_Division (0x8000, value);
 4000350:	e43fdf8b 	ldhu	r16,-130(fp)
 4000354:	01200014 	movui	r4,32768
 4000358:	e17fde17 	ldw	r5,-136(fp)
 400035c:	40001c00 	call	40001c0 <DSP_Division>
 4000360:	1009883a 	mov	r4,r2
 4000364:	00c10074 	movhi	r3,1025
 4000368:	18e58b04 	addi	r3,r3,-27092
 400036c:	8405883a 	add	r2,r16,r16
 4000370:	10c5883a 	add	r2,r2,r3
 4000374:	1100000d 	sth	r4,0(r2)

		/* chrominance quantization table * quality factor */
		value = chrominance_quant_table [i] * quality_factor;
 4000378:	e0ffdf8b 	ldhu	r3,-130(fp)
 400037c:	e0bff004 	addi	r2,fp,-64
 4000380:	10c5883a 	add	r2,r2,r3
 4000384:	10800003 	ldbu	r2,0(r2)
 4000388:	10c03fcc 	andi	r3,r2,255
 400038c:	e0bfdd17 	ldw	r2,-140(fp)
 4000390:	1885383a 	mul	r2,r3,r2
 4000394:	e0bfde15 	stw	r2,-136(fp)
		value = (value + 0x200) >> 10;
 4000398:	e0bfde17 	ldw	r2,-136(fp)
 400039c:	10808004 	addi	r2,r2,512
 40003a0:	1004d2ba 	srli	r2,r2,10
 40003a4:	e0bfde15 	stw	r2,-136(fp)

		if (value == 0)
 40003a8:	e0bfde17 	ldw	r2,-136(fp)
 40003ac:	1004c03a 	cmpne	r2,r2,zero
 40003b0:	1000031e 	bne	r2,zero,40003c0 <initialize_quantization_tables+0x160>
			value = 1;
 40003b4:	00800044 	movi	r2,1
 40003b8:	e0bfde15 	stw	r2,-136(fp)
 40003bc:	00000506 	br	40003d4 <initialize_quantization_tables+0x174>
		else if (value > 255)
 40003c0:	e0bfde17 	ldw	r2,-136(fp)
 40003c4:	10804030 	cmpltui	r2,r2,256
 40003c8:	1000021e 	bne	r2,zero,40003d4 <initialize_quantization_tables+0x174>
			value = 255;
 40003cc:	00803fc4 	movi	r2,255
 40003d0:	e0bfde15 	stw	r2,-136(fp)

		Cqt [index] = (UINT8) value;
 40003d4:	e13fdf0b 	ldhu	r4,-132(fp)
 40003d8:	e0bfde17 	ldw	r2,-136(fp)
 40003dc:	1007883a 	mov	r3,r2
 40003e0:	00810074 	movhi	r2,1025
 40003e4:	10a5ab04 	addi	r2,r2,-26964
 40003e8:	1105883a 	add	r2,r2,r4
 40003ec:	10c00005 	stb	r3,0(r2)
		ICqt [i] = DSP_Division (0x8000, value);
 40003f0:	e43fdf8b 	ldhu	r16,-130(fp)
 40003f4:	01200014 	movui	r4,32768
 40003f8:	e17fde17 	ldw	r5,-136(fp)
 40003fc:	40001c00 	call	40001c0 <DSP_Division>
 4000400:	1009883a 	mov	r4,r2
 4000404:	00c10074 	movhi	r3,1025
 4000408:	18e5bb04 	addi	r3,r3,-26900
 400040c:	8405883a 	add	r2,r16,r16
 4000410:	10c5883a 	add	r2,r2,r3
 4000414:	1100000d 	sth	r4,0(r2)
	};
					//xt_iss_profile_disable();
	//UINT32 quality_factor = (UINT32)RECV1();
	UINT32 quality_factor = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3840);
					//xt_iss_profile_enable();
	for (i=0; i<64; i++)
 4000418:	e0bfdf8b 	ldhu	r2,-130(fp)
 400041c:	10800044 	addi	r2,r2,1
 4000420:	e0bfdf8d 	sth	r2,-130(fp)
 4000424:	e0bfdf8b 	ldhu	r2,-130(fp)
 4000428:	10801030 	cmpltui	r2,r2,64
 400042c:	103fa31e 	bne	r2,zero,40002bc <initialize_quantization_tables+0x5c>
			value = 255;

		Cqt [index] = (UINT8) value;
		ICqt [i] = DSP_Division (0x8000, value);
	}
	for (i=0; i<64; i++){
 4000430:	e03fdf8d 	sth	zero,-130(fp)
 4000434:	00000c06 	br	4000468 <initialize_quantization_tables+0x208>
		//SEND(Lqt[i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Lqt[i]);
 4000438:	e0ffdf8b 	ldhu	r3,-130(fp)
 400043c:	00810074 	movhi	r2,1025
 4000440:	10a57b04 	addi	r2,r2,-27156
 4000444:	10c5883a 	add	r2,r2,r3
 4000448:	10800003 	ldbu	r2,0(r2)
 400044c:	11803fcc 	andi	r6,r2,255
 4000450:	010e2204 	movi	r4,14472
 4000454:	014e0004 	movi	r5,14336
 4000458:	4003e9c0 	call	4003e9c <altera_avalon_fifo_write_fifo>
			value = 255;

		Cqt [index] = (UINT8) value;
		ICqt [i] = DSP_Division (0x8000, value);
	}
	for (i=0; i<64; i++){
 400045c:	e0bfdf8b 	ldhu	r2,-130(fp)
 4000460:	10800044 	addi	r2,r2,1
 4000464:	e0bfdf8d 	sth	r2,-130(fp)
 4000468:	e0bfdf8b 	ldhu	r2,-130(fp)
 400046c:	10801030 	cmpltui	r2,r2,64
 4000470:	103ff11e 	bne	r2,zero,4000438 <initialize_quantization_tables+0x1d8>
		//SEND(Lqt[i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Lqt[i]);
	}
	for (i=0; i<64; i++){
 4000474:	e03fdf8d 	sth	zero,-130(fp)
 4000478:	00000c06 	br	40004ac <initialize_quantization_tables+0x24c>
		//SEND(Cqt[i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Cqt[i]);
 400047c:	e0ffdf8b 	ldhu	r3,-130(fp)
 4000480:	00810074 	movhi	r2,1025
 4000484:	10a5ab04 	addi	r2,r2,-26964
 4000488:	10c5883a 	add	r2,r2,r3
 400048c:	10800003 	ldbu	r2,0(r2)
 4000490:	11803fcc 	andi	r6,r2,255
 4000494:	010e2204 	movi	r4,14472
 4000498:	014e0004 	movi	r5,14336
 400049c:	4003e9c0 	call	4003e9c <altera_avalon_fifo_write_fifo>
	}
	for (i=0; i<64; i++){
		//SEND(Lqt[i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Lqt[i]);
	}
	for (i=0; i<64; i++){
 40004a0:	e0bfdf8b 	ldhu	r2,-130(fp)
 40004a4:	10800044 	addi	r2,r2,1
 40004a8:	e0bfdf8d 	sth	r2,-130(fp)
 40004ac:	e0bfdf8b 	ldhu	r2,-130(fp)
 40004b0:	10801030 	cmpltui	r2,r2,64
 40004b4:	103ff11e 	bne	r2,zero,400047c <initialize_quantization_tables+0x21c>
		//SEND(Cqt[i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Cqt[i]);
	}
}
 40004b8:	e037883a 	mov	sp,fp
 40004bc:	dfc00217 	ldw	ra,8(sp)
 40004c0:	df000117 	ldw	fp,4(sp)
 40004c4:	dc000017 	ldw	r16,0(sp)
 40004c8:	dec00304 	addi	sp,sp,12
 40004cc:	f800283a 	ret

040004d0 <quantization>:

/* multiply DCT Coefficients with Quantization table and store in ZigZag location */
void quantization (UINT16* const quant_table_ptr)
{
 40004d0:	defffb04 	addi	sp,sp,-20
 40004d4:	dfc00415 	stw	ra,16(sp)
 40004d8:	df000315 	stw	fp,12(sp)
 40004dc:	df000304 	addi	fp,sp,12
 40004e0:	e13fff15 	stw	r4,-4(fp)
	INT16 i;
	INT32 value;

	for (i=0; i<=63; i++)
 40004e4:	e03ffe0d 	sth	zero,-8(fp)
 40004e8:	00002306 	br	4000578 <quantization+0xa8>
	{					//xt_iss_profile_disable();
		//value = (INT16)RECV2() * quant_table_ptr [i];
		value = (INT16)altera_avalon_fifo_read_fifo(0x388c,0x3820) * quant_table_ptr [i];
 40004ec:	010e2304 	movi	r4,14476
 40004f0:	014e0804 	movi	r5,14368
 40004f4:	4003f700 	call	4003f70 <altera_avalon_fifo_read_fifo>
 40004f8:	113fffcc 	andi	r4,r2,65535
 40004fc:	2120001c 	xori	r4,r4,32768
 4000500:	21200004 	addi	r4,r4,-32768
 4000504:	e0bffe0f 	ldh	r2,-8(fp)
 4000508:	1085883a 	add	r2,r2,r2
 400050c:	1007883a 	mov	r3,r2
 4000510:	e0bfff17 	ldw	r2,-4(fp)
 4000514:	1885883a 	add	r2,r3,r2
 4000518:	1080000b 	ldhu	r2,0(r2)
 400051c:	10bfffcc 	andi	r2,r2,65535
 4000520:	2085383a 	mul	r2,r4,r2
 4000524:	e0bffd15 	stw	r2,-12(fp)
							//xt_iss_profile_enable();
		value = (value + 0x4000) >> 15;
 4000528:	e0bffd17 	ldw	r2,-12(fp)
 400052c:	10900004 	addi	r2,r2,16384
 4000530:	1005d3fa 	srai	r2,r2,15
 4000534:	e0bffd15 	stw	r2,-12(fp)

		Temp [zigzag_table [i]] = (INT16) value;
 4000538:	e0fffe0f 	ldh	r3,-8(fp)
 400053c:	00810034 	movhi	r2,1024
 4000540:	10980304 	addi	r2,r2,24588
 4000544:	10c5883a 	add	r2,r2,r3
 4000548:	10800003 	ldbu	r2,0(r2)
 400054c:	11003fcc 	andi	r4,r2,255
 4000550:	e0bffd17 	ldw	r2,-12(fp)
 4000554:	100b883a 	mov	r5,r2
 4000558:	00c10074 	movhi	r3,1025
 400055c:	18e55b04 	addi	r3,r3,-27284
 4000560:	2105883a 	add	r2,r4,r4
 4000564:	10c5883a 	add	r2,r2,r3
 4000568:	1140000d 	sth	r5,0(r2)
void quantization (UINT16* const quant_table_ptr)
{
	INT16 i;
	INT32 value;

	for (i=0; i<=63; i++)
 400056c:	e0bffe0b 	ldhu	r2,-8(fp)
 4000570:	10800044 	addi	r2,r2,1
 4000574:	e0bffe0d 	sth	r2,-8(fp)
 4000578:	e0bffe0f 	ldh	r2,-8(fp)
 400057c:	10801010 	cmplti	r2,r2,64
 4000580:	103fda1e 	bne	r2,zero,40004ec <quantization+0x1c>
							//xt_iss_profile_enable();
		value = (value + 0x4000) >> 15;

		Temp [zigzag_table [i]] = (INT16) value;
	}
	for (i=0; i<=63; i++)
 4000584:	e03ffe0d 	sth	zero,-8(fp)
 4000588:	00000f06 	br	40005c8 <quantization+0xf8>
	{
		//SEND(Temp [i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Temp [i]);
 400058c:	e0bffe0f 	ldh	r2,-8(fp)
 4000590:	00c10074 	movhi	r3,1025
 4000594:	18e55b04 	addi	r3,r3,-27284
 4000598:	1085883a 	add	r2,r2,r2
 400059c:	10c5883a 	add	r2,r2,r3
 40005a0:	1080000b 	ldhu	r2,0(r2)
 40005a4:	11bfffcc 	andi	r6,r2,65535
 40005a8:	31a0001c 	xori	r6,r6,32768
 40005ac:	31a00004 	addi	r6,r6,-32768
 40005b0:	010e2204 	movi	r4,14472
 40005b4:	014e0004 	movi	r5,14336
 40005b8:	4003e9c0 	call	4003e9c <altera_avalon_fifo_write_fifo>
							//xt_iss_profile_enable();
		value = (value + 0x4000) >> 15;

		Temp [zigzag_table [i]] = (INT16) value;
	}
	for (i=0; i<=63; i++)
 40005bc:	e0bffe0b 	ldhu	r2,-8(fp)
 40005c0:	10800044 	addi	r2,r2,1
 40005c4:	e0bffe0d 	sth	r2,-8(fp)
 40005c8:	e0bffe0f 	ldh	r2,-8(fp)
 40005cc:	10801010 	cmplti	r2,r2,64
 40005d0:	103fee1e 	bne	r2,zero,400058c <quantization+0xbc>
	{
		//SEND(Temp [i]);
		altera_avalon_fifo_write_fifo(0x3888,0x3800,Temp [i]);
	}
}
 40005d4:	e037883a 	mov	sp,fp
 40005d8:	dfc00117 	ldw	ra,4(sp)
 40005dc:	df000017 	ldw	fp,0(sp)
 40005e0:	dec00204 	addi	sp,sp,8
 40005e4:	f800283a 	ret

040005e8 <main>:

int main(void){
 40005e8:	defffd04 	addi	sp,sp,-12
 40005ec:	dfc00215 	stw	ra,8(sp)
 40005f0:	df000115 	stw	fp,4(sp)
 40005f4:	df000104 	addi	fp,sp,4
  while(1){
  //UINT32 count  = (UINT32)RECV1();
  UINT32 count  = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3840);
 40005f8:	010e2404 	movi	r4,14480
 40005fc:	014e1004 	movi	r5,14400
 4000600:	4003f700 	call	4003f70 <altera_avalon_fifo_read_fifo>
 4000604:	e0bfff15 	stw	r2,-4(fp)
  initialize_quantization_tables();
 4000608:	40002600 	call	4000260 <initialize_quantization_tables>

	for(;count>0;count--){
 400060c:	00000c06 	br	4000640 <main+0x58>
		quantization (ILqt);
 4000610:	01010074 	movhi	r4,1025
 4000614:	21258b04 	addi	r4,r4,-27092
 4000618:	40004d00 	call	40004d0 <quantization>
		quantization (ICqt);
 400061c:	01010074 	movhi	r4,1025
 4000620:	2125bb04 	addi	r4,r4,-26900
 4000624:	40004d00 	call	40004d0 <quantization>
		quantization (ICqt);
 4000628:	01010074 	movhi	r4,1025
 400062c:	2125bb04 	addi	r4,r4,-26900
 4000630:	40004d00 	call	40004d0 <quantization>
  while(1){
  //UINT32 count  = (UINT32)RECV1();
  UINT32 count  = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3840);
  initialize_quantization_tables();

	for(;count>0;count--){
 4000634:	e0bfff17 	ldw	r2,-4(fp)
 4000638:	10bfffc4 	addi	r2,r2,-1
 400063c:	e0bfff15 	stw	r2,-4(fp)
 4000640:	e0bfff17 	ldw	r2,-4(fp)
 4000644:	1004c03a 	cmpne	r2,r2,zero
 4000648:	103ff11e 	bne	r2,zero,4000610 <main+0x28>
	//	#pragma flush //added by haris

	}
	break ;	
  }
	printf("\n Done ! \n");
 400064c:	01010034 	movhi	r4,1024
 4000650:	2117f104 	addi	r4,r4,24516
 4000654:	40007ac0 	call	40007ac <puts>
	
}
 4000658:	e037883a 	mov	sp,fp
 400065c:	dfc00117 	ldw	ra,4(sp)
 4000660:	df000017 	ldw	fp,0(sp)
 4000664:	dec00204 	addi	sp,sp,8
 4000668:	f800283a 	ret

0400066c <memcpy>:
 400066c:	01c003c4 	movi	r7,15
 4000670:	2007883a 	mov	r3,r4
 4000674:	3980032e 	bgeu	r7,r6,4000684 <memcpy+0x18>
 4000678:	2904b03a 	or	r2,r5,r4
 400067c:	108000cc 	andi	r2,r2,3
 4000680:	10000926 	beq	r2,zero,40006a8 <memcpy+0x3c>
 4000684:	30000626 	beq	r6,zero,40006a0 <memcpy+0x34>
 4000688:	30cd883a 	add	r6,r6,r3
 400068c:	28800003 	ldbu	r2,0(r5)
 4000690:	29400044 	addi	r5,r5,1
 4000694:	18800005 	stb	r2,0(r3)
 4000698:	18c00044 	addi	r3,r3,1
 400069c:	30fffb1e 	bne	r6,r3,400068c <memcpy+0x20>
 40006a0:	2005883a 	mov	r2,r4
 40006a4:	f800283a 	ret
 40006a8:	3811883a 	mov	r8,r7
 40006ac:	200f883a 	mov	r7,r4
 40006b0:	28c00017 	ldw	r3,0(r5)
 40006b4:	31bffc04 	addi	r6,r6,-16
 40006b8:	38c00015 	stw	r3,0(r7)
 40006bc:	28800117 	ldw	r2,4(r5)
 40006c0:	38800115 	stw	r2,4(r7)
 40006c4:	28c00217 	ldw	r3,8(r5)
 40006c8:	38c00215 	stw	r3,8(r7)
 40006cc:	28800317 	ldw	r2,12(r5)
 40006d0:	29400404 	addi	r5,r5,16
 40006d4:	38800315 	stw	r2,12(r7)
 40006d8:	39c00404 	addi	r7,r7,16
 40006dc:	41bff436 	bltu	r8,r6,40006b0 <memcpy+0x44>
 40006e0:	008000c4 	movi	r2,3
 40006e4:	1180072e 	bgeu	r2,r6,4000704 <memcpy+0x98>
 40006e8:	1007883a 	mov	r3,r2
 40006ec:	28800017 	ldw	r2,0(r5)
 40006f0:	31bfff04 	addi	r6,r6,-4
 40006f4:	29400104 	addi	r5,r5,4
 40006f8:	38800015 	stw	r2,0(r7)
 40006fc:	39c00104 	addi	r7,r7,4
 4000700:	19bffa36 	bltu	r3,r6,40006ec <memcpy+0x80>
 4000704:	3807883a 	mov	r3,r7
 4000708:	003fde06 	br	4000684 <memcpy+0x18>

0400070c <_puts_r>:
 400070c:	defff604 	addi	sp,sp,-40
 4000710:	dc400715 	stw	r17,28(sp)
 4000714:	2023883a 	mov	r17,r4
 4000718:	2809883a 	mov	r4,r5
 400071c:	dfc00915 	stw	ra,36(sp)
 4000720:	dcc00815 	stw	r19,32(sp)
 4000724:	2827883a 	mov	r19,r5
 4000728:	40007c00 	call	40007c0 <strlen>
 400072c:	89400217 	ldw	r5,8(r17)
 4000730:	00c10034 	movhi	r3,1024
 4000734:	18d7f404 	addi	r3,r3,24528
 4000738:	01c00044 	movi	r7,1
 400073c:	12000044 	addi	r8,r2,1
 4000740:	d8c00515 	stw	r3,20(sp)
 4000744:	d9c00615 	stw	r7,24(sp)
 4000748:	d8c00304 	addi	r3,sp,12
 400074c:	01c00084 	movi	r7,2
 4000750:	8809883a 	mov	r4,r17
 4000754:	d80d883a 	mov	r6,sp
 4000758:	d8c00015 	stw	r3,0(sp)
 400075c:	dcc00315 	stw	r19,12(sp)
 4000760:	da000215 	stw	r8,8(sp)
 4000764:	d9c00115 	stw	r7,4(sp)
 4000768:	d8800415 	stw	r2,16(sp)
 400076c:	40008340 	call	4000834 <__sfvwrite_r>
 4000770:	00ffffc4 	movi	r3,-1
 4000774:	10000626 	beq	r2,zero,4000790 <_puts_r+0x84>
 4000778:	1805883a 	mov	r2,r3
 400077c:	dfc00917 	ldw	ra,36(sp)
 4000780:	dcc00817 	ldw	r19,32(sp)
 4000784:	dc400717 	ldw	r17,28(sp)
 4000788:	dec00a04 	addi	sp,sp,40
 400078c:	f800283a 	ret
 4000790:	00c00284 	movi	r3,10
 4000794:	1805883a 	mov	r2,r3
 4000798:	dfc00917 	ldw	ra,36(sp)
 400079c:	dcc00817 	ldw	r19,32(sp)
 40007a0:	dc400717 	ldw	r17,28(sp)
 40007a4:	dec00a04 	addi	sp,sp,40
 40007a8:	f800283a 	ret

040007ac <puts>:
 40007ac:	00810034 	movhi	r2,1024
 40007b0:	109e9704 	addi	r2,r2,31324
 40007b4:	200b883a 	mov	r5,r4
 40007b8:	11000017 	ldw	r4,0(r2)
 40007bc:	400070c1 	jmpi	400070c <_puts_r>

040007c0 <strlen>:
 40007c0:	208000cc 	andi	r2,r4,3
 40007c4:	2011883a 	mov	r8,r4
 40007c8:	1000161e 	bne	r2,zero,4000824 <strlen+0x64>
 40007cc:	20c00017 	ldw	r3,0(r4)
 40007d0:	017fbff4 	movhi	r5,65279
 40007d4:	297fbfc4 	addi	r5,r5,-257
 40007d8:	01e02074 	movhi	r7,32897
 40007dc:	39e02004 	addi	r7,r7,-32640
 40007e0:	1945883a 	add	r2,r3,r5
 40007e4:	11c4703a 	and	r2,r2,r7
 40007e8:	00c6303a 	nor	r3,zero,r3
 40007ec:	1886703a 	and	r3,r3,r2
 40007f0:	18000c1e 	bne	r3,zero,4000824 <strlen+0x64>
 40007f4:	280d883a 	mov	r6,r5
 40007f8:	380b883a 	mov	r5,r7
 40007fc:	21000104 	addi	r4,r4,4
 4000800:	20800017 	ldw	r2,0(r4)
 4000804:	1187883a 	add	r3,r2,r6
 4000808:	1946703a 	and	r3,r3,r5
 400080c:	0084303a 	nor	r2,zero,r2
 4000810:	10c4703a 	and	r2,r2,r3
 4000814:	103ff926 	beq	r2,zero,40007fc <strlen+0x3c>
 4000818:	20800007 	ldb	r2,0(r4)
 400081c:	10000326 	beq	r2,zero,400082c <strlen+0x6c>
 4000820:	21000044 	addi	r4,r4,1
 4000824:	20800007 	ldb	r2,0(r4)
 4000828:	103ffd1e 	bne	r2,zero,4000820 <strlen+0x60>
 400082c:	2205c83a 	sub	r2,r4,r8
 4000830:	f800283a 	ret

04000834 <__sfvwrite_r>:
 4000834:	30800217 	ldw	r2,8(r6)
 4000838:	defff504 	addi	sp,sp,-44
 400083c:	df000915 	stw	fp,36(sp)
 4000840:	dd800715 	stw	r22,28(sp)
 4000844:	dc800315 	stw	r18,12(sp)
 4000848:	dfc00a15 	stw	ra,40(sp)
 400084c:	ddc00815 	stw	r23,32(sp)
 4000850:	dd400615 	stw	r21,24(sp)
 4000854:	dd000515 	stw	r20,20(sp)
 4000858:	dcc00415 	stw	r19,16(sp)
 400085c:	dc400215 	stw	r17,8(sp)
 4000860:	dc000115 	stw	r16,4(sp)
 4000864:	302d883a 	mov	r22,r6
 4000868:	2039883a 	mov	fp,r4
 400086c:	2825883a 	mov	r18,r5
 4000870:	10001c26 	beq	r2,zero,40008e4 <__sfvwrite_r+0xb0>
 4000874:	29c0030b 	ldhu	r7,12(r5)
 4000878:	3880020c 	andi	r2,r7,8
 400087c:	10002726 	beq	r2,zero,400091c <__sfvwrite_r+0xe8>
 4000880:	28800417 	ldw	r2,16(r5)
 4000884:	10002526 	beq	r2,zero,400091c <__sfvwrite_r+0xe8>
 4000888:	3880008c 	andi	r2,r7,2
 400088c:	b5400017 	ldw	r21,0(r22)
 4000890:	10002826 	beq	r2,zero,4000934 <__sfvwrite_r+0x100>
 4000894:	0021883a 	mov	r16,zero
 4000898:	0023883a 	mov	r17,zero
 400089c:	880d883a 	mov	r6,r17
 40008a0:	e009883a 	mov	r4,fp
 40008a4:	00810004 	movi	r2,1024
 40008a8:	80006e26 	beq	r16,zero,4000a64 <__sfvwrite_r+0x230>
 40008ac:	800f883a 	mov	r7,r16
 40008b0:	91400717 	ldw	r5,28(r18)
 40008b4:	1400012e 	bgeu	r2,r16,40008bc <__sfvwrite_r+0x88>
 40008b8:	100f883a 	mov	r7,r2
 40008bc:	90c00917 	ldw	r3,36(r18)
 40008c0:	183ee83a 	callr	r3
 40008c4:	1007883a 	mov	r3,r2
 40008c8:	80a1c83a 	sub	r16,r16,r2
 40008cc:	88a3883a 	add	r17,r17,r2
 40008d0:	00806d0e 	bge	zero,r2,4000a88 <__sfvwrite_r+0x254>
 40008d4:	b0800217 	ldw	r2,8(r22)
 40008d8:	10c5c83a 	sub	r2,r2,r3
 40008dc:	b0800215 	stw	r2,8(r22)
 40008e0:	103fee1e 	bne	r2,zero,400089c <__sfvwrite_r+0x68>
 40008e4:	0009883a 	mov	r4,zero
 40008e8:	2005883a 	mov	r2,r4
 40008ec:	dfc00a17 	ldw	ra,40(sp)
 40008f0:	df000917 	ldw	fp,36(sp)
 40008f4:	ddc00817 	ldw	r23,32(sp)
 40008f8:	dd800717 	ldw	r22,28(sp)
 40008fc:	dd400617 	ldw	r21,24(sp)
 4000900:	dd000517 	ldw	r20,20(sp)
 4000904:	dcc00417 	ldw	r19,16(sp)
 4000908:	dc800317 	ldw	r18,12(sp)
 400090c:	dc400217 	ldw	r17,8(sp)
 4000910:	dc000117 	ldw	r16,4(sp)
 4000914:	dec00b04 	addi	sp,sp,44
 4000918:	f800283a 	ret
 400091c:	4001c380 	call	4001c38 <__swsetup_r>
 4000920:	1000e41e 	bne	r2,zero,4000cb4 <__sfvwrite_r+0x480>
 4000924:	91c0030b 	ldhu	r7,12(r18)
 4000928:	b5400017 	ldw	r21,0(r22)
 400092c:	3880008c 	andi	r2,r7,2
 4000930:	103fd81e 	bne	r2,zero,4000894 <__sfvwrite_r+0x60>
 4000934:	3880004c 	andi	r2,r7,1
 4000938:	1005003a 	cmpeq	r2,r2,zero
 400093c:	10005726 	beq	r2,zero,4000a9c <__sfvwrite_r+0x268>
 4000940:	0029883a 	mov	r20,zero
 4000944:	002f883a 	mov	r23,zero
 4000948:	a0004226 	beq	r20,zero,4000a54 <__sfvwrite_r+0x220>
 400094c:	3880800c 	andi	r2,r7,512
 4000950:	94000217 	ldw	r16,8(r18)
 4000954:	10008b26 	beq	r2,zero,4000b84 <__sfvwrite_r+0x350>
 4000958:	800d883a 	mov	r6,r16
 400095c:	a400a536 	bltu	r20,r16,4000bf4 <__sfvwrite_r+0x3c0>
 4000960:	3881200c 	andi	r2,r7,1152
 4000964:	10002726 	beq	r2,zero,4000a04 <__sfvwrite_r+0x1d0>
 4000968:	90800517 	ldw	r2,20(r18)
 400096c:	92000417 	ldw	r8,16(r18)
 4000970:	91400017 	ldw	r5,0(r18)
 4000974:	1087883a 	add	r3,r2,r2
 4000978:	1887883a 	add	r3,r3,r2
 400097c:	1808d7fa 	srli	r4,r3,31
 4000980:	2a21c83a 	sub	r16,r5,r8
 4000984:	80800044 	addi	r2,r16,1
 4000988:	20c9883a 	add	r4,r4,r3
 400098c:	2027d07a 	srai	r19,r4,1
 4000990:	a085883a 	add	r2,r20,r2
 4000994:	980d883a 	mov	r6,r19
 4000998:	9880022e 	bgeu	r19,r2,40009a4 <__sfvwrite_r+0x170>
 400099c:	1027883a 	mov	r19,r2
 40009a0:	100d883a 	mov	r6,r2
 40009a4:	3881000c 	andi	r2,r7,1024
 40009a8:	1000b826 	beq	r2,zero,4000c8c <__sfvwrite_r+0x458>
 40009ac:	300b883a 	mov	r5,r6
 40009b0:	e009883a 	mov	r4,fp
 40009b4:	4000cd00 	call	4000cd0 <_malloc_r>
 40009b8:	10003126 	beq	r2,zero,4000a80 <__sfvwrite_r+0x24c>
 40009bc:	91400417 	ldw	r5,16(r18)
 40009c0:	1009883a 	mov	r4,r2
 40009c4:	800d883a 	mov	r6,r16
 40009c8:	1023883a 	mov	r17,r2
 40009cc:	400066c0 	call	400066c <memcpy>
 40009d0:	90c0030b 	ldhu	r3,12(r18)
 40009d4:	00beffc4 	movi	r2,-1025
 40009d8:	1886703a 	and	r3,r3,r2
 40009dc:	18c02014 	ori	r3,r3,128
 40009e0:	90c0030d 	sth	r3,12(r18)
 40009e4:	9c07c83a 	sub	r3,r19,r16
 40009e8:	8c05883a 	add	r2,r17,r16
 40009ec:	a00d883a 	mov	r6,r20
 40009f0:	a021883a 	mov	r16,r20
 40009f4:	90800015 	stw	r2,0(r18)
 40009f8:	90c00215 	stw	r3,8(r18)
 40009fc:	94400415 	stw	r17,16(r18)
 4000a00:	94c00515 	stw	r19,20(r18)
 4000a04:	91000017 	ldw	r4,0(r18)
 4000a08:	b80b883a 	mov	r5,r23
 4000a0c:	a023883a 	mov	r17,r20
 4000a10:	40014f40 	call	40014f4 <memmove>
 4000a14:	90c00217 	ldw	r3,8(r18)
 4000a18:	90800017 	ldw	r2,0(r18)
 4000a1c:	a027883a 	mov	r19,r20
 4000a20:	1c07c83a 	sub	r3,r3,r16
 4000a24:	1405883a 	add	r2,r2,r16
 4000a28:	90c00215 	stw	r3,8(r18)
 4000a2c:	a021883a 	mov	r16,r20
 4000a30:	90800015 	stw	r2,0(r18)
 4000a34:	b0800217 	ldw	r2,8(r22)
 4000a38:	1405c83a 	sub	r2,r2,r16
 4000a3c:	b0800215 	stw	r2,8(r22)
 4000a40:	103fa826 	beq	r2,zero,40008e4 <__sfvwrite_r+0xb0>
 4000a44:	a469c83a 	sub	r20,r20,r17
 4000a48:	91c0030b 	ldhu	r7,12(r18)
 4000a4c:	bcef883a 	add	r23,r23,r19
 4000a50:	a03fbe1e 	bne	r20,zero,400094c <__sfvwrite_r+0x118>
 4000a54:	adc00017 	ldw	r23,0(r21)
 4000a58:	ad000117 	ldw	r20,4(r21)
 4000a5c:	ad400204 	addi	r21,r21,8
 4000a60:	003fb906 	br	4000948 <__sfvwrite_r+0x114>
 4000a64:	ac400017 	ldw	r17,0(r21)
 4000a68:	ac000117 	ldw	r16,4(r21)
 4000a6c:	ad400204 	addi	r21,r21,8
 4000a70:	003f8a06 	br	400089c <__sfvwrite_r+0x68>
 4000a74:	91400417 	ldw	r5,16(r18)
 4000a78:	e009883a 	mov	r4,fp
 4000a7c:	40023900 	call	4002390 <_free_r>
 4000a80:	00800304 	movi	r2,12
 4000a84:	e0800015 	stw	r2,0(fp)
 4000a88:	9080030b 	ldhu	r2,12(r18)
 4000a8c:	013fffc4 	movi	r4,-1
 4000a90:	10801014 	ori	r2,r2,64
 4000a94:	9080030d 	sth	r2,12(r18)
 4000a98:	003f9306 	br	40008e8 <__sfvwrite_r+0xb4>
 4000a9c:	0027883a 	mov	r19,zero
 4000aa0:	002f883a 	mov	r23,zero
 4000aa4:	d8000015 	stw	zero,0(sp)
 4000aa8:	0029883a 	mov	r20,zero
 4000aac:	98001e26 	beq	r19,zero,4000b28 <__sfvwrite_r+0x2f4>
 4000ab0:	d8c00017 	ldw	r3,0(sp)
 4000ab4:	1804c03a 	cmpne	r2,r3,zero
 4000ab8:	10005e26 	beq	r2,zero,4000c34 <__sfvwrite_r+0x400>
 4000abc:	9821883a 	mov	r16,r19
 4000ac0:	a4c0012e 	bgeu	r20,r19,4000ac8 <__sfvwrite_r+0x294>
 4000ac4:	a021883a 	mov	r16,r20
 4000ac8:	91000017 	ldw	r4,0(r18)
 4000acc:	90800417 	ldw	r2,16(r18)
 4000ad0:	91800217 	ldw	r6,8(r18)
 4000ad4:	91c00517 	ldw	r7,20(r18)
 4000ad8:	1100022e 	bgeu	r2,r4,4000ae4 <__sfvwrite_r+0x2b0>
 4000adc:	31e3883a 	add	r17,r6,r7
 4000ae0:	8c001616 	blt	r17,r16,4000b3c <__sfvwrite_r+0x308>
 4000ae4:	81c03816 	blt	r16,r7,4000bc8 <__sfvwrite_r+0x394>
 4000ae8:	90c00917 	ldw	r3,36(r18)
 4000aec:	91400717 	ldw	r5,28(r18)
 4000af0:	e009883a 	mov	r4,fp
 4000af4:	b80d883a 	mov	r6,r23
 4000af8:	183ee83a 	callr	r3
 4000afc:	1023883a 	mov	r17,r2
 4000b00:	00bfe10e 	bge	zero,r2,4000a88 <__sfvwrite_r+0x254>
 4000b04:	a469c83a 	sub	r20,r20,r17
 4000b08:	a0001826 	beq	r20,zero,4000b6c <__sfvwrite_r+0x338>
 4000b0c:	b0800217 	ldw	r2,8(r22)
 4000b10:	1445c83a 	sub	r2,r2,r17
 4000b14:	b0800215 	stw	r2,8(r22)
 4000b18:	103f7226 	beq	r2,zero,40008e4 <__sfvwrite_r+0xb0>
 4000b1c:	9c67c83a 	sub	r19,r19,r17
 4000b20:	bc6f883a 	add	r23,r23,r17
 4000b24:	983fe21e 	bne	r19,zero,4000ab0 <__sfvwrite_r+0x27c>
 4000b28:	adc00017 	ldw	r23,0(r21)
 4000b2c:	acc00117 	ldw	r19,4(r21)
 4000b30:	ad400204 	addi	r21,r21,8
 4000b34:	d8000015 	stw	zero,0(sp)
 4000b38:	003fdc06 	br	4000aac <__sfvwrite_r+0x278>
 4000b3c:	b80b883a 	mov	r5,r23
 4000b40:	880d883a 	mov	r6,r17
 4000b44:	40014f40 	call	40014f4 <memmove>
 4000b48:	90c00017 	ldw	r3,0(r18)
 4000b4c:	e009883a 	mov	r4,fp
 4000b50:	900b883a 	mov	r5,r18
 4000b54:	1c47883a 	add	r3,r3,r17
 4000b58:	90c00015 	stw	r3,0(r18)
 4000b5c:	4001d740 	call	4001d74 <_fflush_r>
 4000b60:	103fc91e 	bne	r2,zero,4000a88 <__sfvwrite_r+0x254>
 4000b64:	a469c83a 	sub	r20,r20,r17
 4000b68:	a03fe81e 	bne	r20,zero,4000b0c <__sfvwrite_r+0x2d8>
 4000b6c:	e009883a 	mov	r4,fp
 4000b70:	900b883a 	mov	r5,r18
 4000b74:	4001d740 	call	4001d74 <_fflush_r>
 4000b78:	103fc31e 	bne	r2,zero,4000a88 <__sfvwrite_r+0x254>
 4000b7c:	d8000015 	stw	zero,0(sp)
 4000b80:	003fe206 	br	4000b0c <__sfvwrite_r+0x2d8>
 4000b84:	91000017 	ldw	r4,0(r18)
 4000b88:	90800417 	ldw	r2,16(r18)
 4000b8c:	1100022e 	bgeu	r2,r4,4000b98 <__sfvwrite_r+0x364>
 4000b90:	8023883a 	mov	r17,r16
 4000b94:	85003136 	bltu	r16,r20,4000c5c <__sfvwrite_r+0x428>
 4000b98:	91c00517 	ldw	r7,20(r18)
 4000b9c:	a1c01836 	bltu	r20,r7,4000c00 <__sfvwrite_r+0x3cc>
 4000ba0:	90c00917 	ldw	r3,36(r18)
 4000ba4:	91400717 	ldw	r5,28(r18)
 4000ba8:	e009883a 	mov	r4,fp
 4000bac:	b80d883a 	mov	r6,r23
 4000bb0:	183ee83a 	callr	r3
 4000bb4:	1021883a 	mov	r16,r2
 4000bb8:	00bfb30e 	bge	zero,r2,4000a88 <__sfvwrite_r+0x254>
 4000bbc:	1023883a 	mov	r17,r2
 4000bc0:	1027883a 	mov	r19,r2
 4000bc4:	003f9b06 	br	4000a34 <__sfvwrite_r+0x200>
 4000bc8:	b80b883a 	mov	r5,r23
 4000bcc:	800d883a 	mov	r6,r16
 4000bd0:	40014f40 	call	40014f4 <memmove>
 4000bd4:	90c00217 	ldw	r3,8(r18)
 4000bd8:	90800017 	ldw	r2,0(r18)
 4000bdc:	8023883a 	mov	r17,r16
 4000be0:	1c07c83a 	sub	r3,r3,r16
 4000be4:	1405883a 	add	r2,r2,r16
 4000be8:	90c00215 	stw	r3,8(r18)
 4000bec:	90800015 	stw	r2,0(r18)
 4000bf0:	003fc406 	br	4000b04 <__sfvwrite_r+0x2d0>
 4000bf4:	a00d883a 	mov	r6,r20
 4000bf8:	a021883a 	mov	r16,r20
 4000bfc:	003f8106 	br	4000a04 <__sfvwrite_r+0x1d0>
 4000c00:	b80b883a 	mov	r5,r23
 4000c04:	a00d883a 	mov	r6,r20
 4000c08:	40014f40 	call	40014f4 <memmove>
 4000c0c:	90c00217 	ldw	r3,8(r18)
 4000c10:	90800017 	ldw	r2,0(r18)
 4000c14:	a021883a 	mov	r16,r20
 4000c18:	1d07c83a 	sub	r3,r3,r20
 4000c1c:	1505883a 	add	r2,r2,r20
 4000c20:	a023883a 	mov	r17,r20
 4000c24:	a027883a 	mov	r19,r20
 4000c28:	90c00215 	stw	r3,8(r18)
 4000c2c:	90800015 	stw	r2,0(r18)
 4000c30:	003f8006 	br	4000a34 <__sfvwrite_r+0x200>
 4000c34:	b809883a 	mov	r4,r23
 4000c38:	01400284 	movi	r5,10
 4000c3c:	980d883a 	mov	r6,r19
 4000c40:	40014100 	call	4001410 <memchr>
 4000c44:	10001726 	beq	r2,zero,4000ca4 <__sfvwrite_r+0x470>
 4000c48:	15c5c83a 	sub	r2,r2,r23
 4000c4c:	15000044 	addi	r20,r2,1
 4000c50:	00800044 	movi	r2,1
 4000c54:	d8800015 	stw	r2,0(sp)
 4000c58:	003f9806 	br	4000abc <__sfvwrite_r+0x288>
 4000c5c:	b80b883a 	mov	r5,r23
 4000c60:	800d883a 	mov	r6,r16
 4000c64:	40014f40 	call	40014f4 <memmove>
 4000c68:	90c00017 	ldw	r3,0(r18)
 4000c6c:	e009883a 	mov	r4,fp
 4000c70:	900b883a 	mov	r5,r18
 4000c74:	1c07883a 	add	r3,r3,r16
 4000c78:	90c00015 	stw	r3,0(r18)
 4000c7c:	8027883a 	mov	r19,r16
 4000c80:	4001d740 	call	4001d74 <_fflush_r>
 4000c84:	103f6b26 	beq	r2,zero,4000a34 <__sfvwrite_r+0x200>
 4000c88:	003f7f06 	br	4000a88 <__sfvwrite_r+0x254>
 4000c8c:	400b883a 	mov	r5,r8
 4000c90:	e009883a 	mov	r4,fp
 4000c94:	40015d40 	call	40015d4 <_realloc_r>
 4000c98:	103f7626 	beq	r2,zero,4000a74 <__sfvwrite_r+0x240>
 4000c9c:	1023883a 	mov	r17,r2
 4000ca0:	003f5006 	br	40009e4 <__sfvwrite_r+0x1b0>
 4000ca4:	00c00044 	movi	r3,1
 4000ca8:	9d000044 	addi	r20,r19,1
 4000cac:	d8c00015 	stw	r3,0(sp)
 4000cb0:	003f8206 	br	4000abc <__sfvwrite_r+0x288>
 4000cb4:	9080030b 	ldhu	r2,12(r18)
 4000cb8:	00c00244 	movi	r3,9
 4000cbc:	013fffc4 	movi	r4,-1
 4000cc0:	10801014 	ori	r2,r2,64
 4000cc4:	9080030d 	sth	r2,12(r18)
 4000cc8:	e0c00015 	stw	r3,0(fp)
 4000ccc:	003f0606 	br	40008e8 <__sfvwrite_r+0xb4>

04000cd0 <_malloc_r>:
 4000cd0:	defff604 	addi	sp,sp,-40
 4000cd4:	28c002c4 	addi	r3,r5,11
 4000cd8:	00800584 	movi	r2,22
 4000cdc:	dc800215 	stw	r18,8(sp)
 4000ce0:	dfc00915 	stw	ra,36(sp)
 4000ce4:	df000815 	stw	fp,32(sp)
 4000ce8:	ddc00715 	stw	r23,28(sp)
 4000cec:	dd800615 	stw	r22,24(sp)
 4000cf0:	dd400515 	stw	r21,20(sp)
 4000cf4:	dd000415 	stw	r20,16(sp)
 4000cf8:	dcc00315 	stw	r19,12(sp)
 4000cfc:	dc400115 	stw	r17,4(sp)
 4000d00:	dc000015 	stw	r16,0(sp)
 4000d04:	2025883a 	mov	r18,r4
 4000d08:	10c01236 	bltu	r2,r3,4000d54 <_malloc_r+0x84>
 4000d0c:	04400404 	movi	r17,16
 4000d10:	8940142e 	bgeu	r17,r5,4000d64 <_malloc_r+0x94>
 4000d14:	00800304 	movi	r2,12
 4000d18:	0007883a 	mov	r3,zero
 4000d1c:	90800015 	stw	r2,0(r18)
 4000d20:	1805883a 	mov	r2,r3
 4000d24:	dfc00917 	ldw	ra,36(sp)
 4000d28:	df000817 	ldw	fp,32(sp)
 4000d2c:	ddc00717 	ldw	r23,28(sp)
 4000d30:	dd800617 	ldw	r22,24(sp)
 4000d34:	dd400517 	ldw	r21,20(sp)
 4000d38:	dd000417 	ldw	r20,16(sp)
 4000d3c:	dcc00317 	ldw	r19,12(sp)
 4000d40:	dc800217 	ldw	r18,8(sp)
 4000d44:	dc400117 	ldw	r17,4(sp)
 4000d48:	dc000017 	ldw	r16,0(sp)
 4000d4c:	dec00a04 	addi	sp,sp,40
 4000d50:	f800283a 	ret
 4000d54:	00bffe04 	movi	r2,-8
 4000d58:	18a2703a 	and	r17,r3,r2
 4000d5c:	883fed16 	blt	r17,zero,4000d14 <_malloc_r+0x44>
 4000d60:	897fec36 	bltu	r17,r5,4000d14 <_malloc_r+0x44>
 4000d64:	9009883a 	mov	r4,r18
 4000d68:	40036000 	call	4003600 <__malloc_lock>
 4000d6c:	00807dc4 	movi	r2,503
 4000d70:	14402b2e 	bgeu	r2,r17,4000e20 <_malloc_r+0x150>
 4000d74:	8806d27a 	srli	r3,r17,9
 4000d78:	18003f1e 	bne	r3,zero,4000e78 <_malloc_r+0x1a8>
 4000d7c:	880cd0fa 	srli	r6,r17,3
 4000d80:	300490fa 	slli	r2,r6,3
 4000d84:	02c10034 	movhi	r11,1024
 4000d88:	5ad91304 	addi	r11,r11,25676
 4000d8c:	12cb883a 	add	r5,r2,r11
 4000d90:	2c000317 	ldw	r16,12(r5)
 4000d94:	580f883a 	mov	r7,r11
 4000d98:	2c00041e 	bne	r5,r16,4000dac <_malloc_r+0xdc>
 4000d9c:	00000a06 	br	4000dc8 <_malloc_r+0xf8>
 4000da0:	1800860e 	bge	r3,zero,4000fbc <_malloc_r+0x2ec>
 4000da4:	84000317 	ldw	r16,12(r16)
 4000da8:	2c000726 	beq	r5,r16,4000dc8 <_malloc_r+0xf8>
 4000dac:	80800117 	ldw	r2,4(r16)
 4000db0:	00ffff04 	movi	r3,-4
 4000db4:	10c8703a 	and	r4,r2,r3
 4000db8:	2447c83a 	sub	r3,r4,r17
 4000dbc:	008003c4 	movi	r2,15
 4000dc0:	10fff70e 	bge	r2,r3,4000da0 <_malloc_r+0xd0>
 4000dc4:	31bfffc4 	addi	r6,r6,-1
 4000dc8:	32400044 	addi	r9,r6,1
 4000dcc:	02810034 	movhi	r10,1024
 4000dd0:	52991504 	addi	r10,r10,25684
 4000dd4:	54000217 	ldw	r16,8(r10)
 4000dd8:	8280a026 	beq	r16,r10,400105c <_malloc_r+0x38c>
 4000ddc:	80800117 	ldw	r2,4(r16)
 4000de0:	00ffff04 	movi	r3,-4
 4000de4:	10ca703a 	and	r5,r2,r3
 4000de8:	2c4dc83a 	sub	r6,r5,r17
 4000dec:	008003c4 	movi	r2,15
 4000df0:	11808316 	blt	r2,r6,4001000 <_malloc_r+0x330>
 4000df4:	52800315 	stw	r10,12(r10)
 4000df8:	52800215 	stw	r10,8(r10)
 4000dfc:	30002916 	blt	r6,zero,4000ea4 <_malloc_r+0x1d4>
 4000e00:	8147883a 	add	r3,r16,r5
 4000e04:	18800117 	ldw	r2,4(r3)
 4000e08:	9009883a 	mov	r4,r18
 4000e0c:	10800054 	ori	r2,r2,1
 4000e10:	18800115 	stw	r2,4(r3)
 4000e14:	40036200 	call	4003620 <__malloc_unlock>
 4000e18:	80c00204 	addi	r3,r16,8
 4000e1c:	003fc006 	br	4000d20 <_malloc_r+0x50>
 4000e20:	02c10034 	movhi	r11,1024
 4000e24:	5ad91304 	addi	r11,r11,25676
 4000e28:	8ac5883a 	add	r2,r17,r11
 4000e2c:	14000317 	ldw	r16,12(r2)
 4000e30:	580f883a 	mov	r7,r11
 4000e34:	8806d0fa 	srli	r3,r17,3
 4000e38:	14006c26 	beq	r2,r16,4000fec <_malloc_r+0x31c>
 4000e3c:	80c00117 	ldw	r3,4(r16)
 4000e40:	00bfff04 	movi	r2,-4
 4000e44:	81800317 	ldw	r6,12(r16)
 4000e48:	1886703a 	and	r3,r3,r2
 4000e4c:	80c7883a 	add	r3,r16,r3
 4000e50:	18800117 	ldw	r2,4(r3)
 4000e54:	81400217 	ldw	r5,8(r16)
 4000e58:	9009883a 	mov	r4,r18
 4000e5c:	10800054 	ori	r2,r2,1
 4000e60:	18800115 	stw	r2,4(r3)
 4000e64:	31400215 	stw	r5,8(r6)
 4000e68:	29800315 	stw	r6,12(r5)
 4000e6c:	40036200 	call	4003620 <__malloc_unlock>
 4000e70:	80c00204 	addi	r3,r16,8
 4000e74:	003faa06 	br	4000d20 <_malloc_r+0x50>
 4000e78:	00800104 	movi	r2,4
 4000e7c:	10c0052e 	bgeu	r2,r3,4000e94 <_malloc_r+0x1c4>
 4000e80:	00800504 	movi	r2,20
 4000e84:	10c07836 	bltu	r2,r3,4001068 <_malloc_r+0x398>
 4000e88:	198016c4 	addi	r6,r3,91
 4000e8c:	300490fa 	slli	r2,r6,3
 4000e90:	003fbc06 	br	4000d84 <_malloc_r+0xb4>
 4000e94:	8804d1ba 	srli	r2,r17,6
 4000e98:	11800e04 	addi	r6,r2,56
 4000e9c:	300490fa 	slli	r2,r6,3
 4000ea0:	003fb806 	br	4000d84 <_malloc_r+0xb4>
 4000ea4:	00807fc4 	movi	r2,511
 4000ea8:	1140bb36 	bltu	r2,r5,4001198 <_malloc_r+0x4c8>
 4000eac:	2806d0fa 	srli	r3,r5,3
 4000eb0:	573ffe04 	addi	fp,r10,-8
 4000eb4:	00800044 	movi	r2,1
 4000eb8:	180890fa 	slli	r4,r3,3
 4000ebc:	1807d0ba 	srai	r3,r3,2
 4000ec0:	e1c00117 	ldw	r7,4(fp)
 4000ec4:	5909883a 	add	r4,r11,r4
 4000ec8:	21400217 	ldw	r5,8(r4)
 4000ecc:	10c4983a 	sll	r2,r2,r3
 4000ed0:	81000315 	stw	r4,12(r16)
 4000ed4:	81400215 	stw	r5,8(r16)
 4000ed8:	388eb03a 	or	r7,r7,r2
 4000edc:	2c000315 	stw	r16,12(r5)
 4000ee0:	24000215 	stw	r16,8(r4)
 4000ee4:	e1c00115 	stw	r7,4(fp)
 4000ee8:	4807883a 	mov	r3,r9
 4000eec:	4800cd16 	blt	r9,zero,4001224 <_malloc_r+0x554>
 4000ef0:	1807d0ba 	srai	r3,r3,2
 4000ef4:	00800044 	movi	r2,1
 4000ef8:	10c8983a 	sll	r4,r2,r3
 4000efc:	39004436 	bltu	r7,r4,4001010 <_malloc_r+0x340>
 4000f00:	21c4703a 	and	r2,r4,r7
 4000f04:	10000a1e 	bne	r2,zero,4000f30 <_malloc_r+0x260>
 4000f08:	2109883a 	add	r4,r4,r4
 4000f0c:	00bfff04 	movi	r2,-4
 4000f10:	4884703a 	and	r2,r9,r2
 4000f14:	3906703a 	and	r3,r7,r4
 4000f18:	12400104 	addi	r9,r2,4
 4000f1c:	1800041e 	bne	r3,zero,4000f30 <_malloc_r+0x260>
 4000f20:	2109883a 	add	r4,r4,r4
 4000f24:	3904703a 	and	r2,r7,r4
 4000f28:	4a400104 	addi	r9,r9,4
 4000f2c:	103ffc26 	beq	r2,zero,4000f20 <_malloc_r+0x250>
 4000f30:	480490fa 	slli	r2,r9,3
 4000f34:	4819883a 	mov	r12,r9
 4000f38:	023fff04 	movi	r8,-4
 4000f3c:	589b883a 	add	r13,r11,r2
 4000f40:	6807883a 	mov	r3,r13
 4000f44:	014003c4 	movi	r5,15
 4000f48:	1c000317 	ldw	r16,12(r3)
 4000f4c:	1c00041e 	bne	r3,r16,4000f60 <_malloc_r+0x290>
 4000f50:	0000a706 	br	40011f0 <_malloc_r+0x520>
 4000f54:	3000ab0e 	bge	r6,zero,4001204 <_malloc_r+0x534>
 4000f58:	84000317 	ldw	r16,12(r16)
 4000f5c:	1c00a426 	beq	r3,r16,40011f0 <_malloc_r+0x520>
 4000f60:	80800117 	ldw	r2,4(r16)
 4000f64:	1204703a 	and	r2,r2,r8
 4000f68:	144dc83a 	sub	r6,r2,r17
 4000f6c:	29bff90e 	bge	r5,r6,4000f54 <_malloc_r+0x284>
 4000f70:	81000317 	ldw	r4,12(r16)
 4000f74:	80c00217 	ldw	r3,8(r16)
 4000f78:	89400054 	ori	r5,r17,1
 4000f7c:	8445883a 	add	r2,r16,r17
 4000f80:	20c00215 	stw	r3,8(r4)
 4000f84:	19000315 	stw	r4,12(r3)
 4000f88:	81400115 	stw	r5,4(r16)
 4000f8c:	1187883a 	add	r3,r2,r6
 4000f90:	31000054 	ori	r4,r6,1
 4000f94:	50800315 	stw	r2,12(r10)
 4000f98:	50800215 	stw	r2,8(r10)
 4000f9c:	19800015 	stw	r6,0(r3)
 4000fa0:	11000115 	stw	r4,4(r2)
 4000fa4:	12800215 	stw	r10,8(r2)
 4000fa8:	12800315 	stw	r10,12(r2)
 4000fac:	9009883a 	mov	r4,r18
 4000fb0:	40036200 	call	4003620 <__malloc_unlock>
 4000fb4:	80c00204 	addi	r3,r16,8
 4000fb8:	003f5906 	br	4000d20 <_malloc_r+0x50>
 4000fbc:	8109883a 	add	r4,r16,r4
 4000fc0:	20800117 	ldw	r2,4(r4)
 4000fc4:	80c00217 	ldw	r3,8(r16)
 4000fc8:	81400317 	ldw	r5,12(r16)
 4000fcc:	10800054 	ori	r2,r2,1
 4000fd0:	20800115 	stw	r2,4(r4)
 4000fd4:	28c00215 	stw	r3,8(r5)
 4000fd8:	19400315 	stw	r5,12(r3)
 4000fdc:	9009883a 	mov	r4,r18
 4000fe0:	40036200 	call	4003620 <__malloc_unlock>
 4000fe4:	80c00204 	addi	r3,r16,8
 4000fe8:	003f4d06 	br	4000d20 <_malloc_r+0x50>
 4000fec:	80800204 	addi	r2,r16,8
 4000ff0:	14000317 	ldw	r16,12(r2)
 4000ff4:	143f911e 	bne	r2,r16,4000e3c <_malloc_r+0x16c>
 4000ff8:	1a400084 	addi	r9,r3,2
 4000ffc:	003f7306 	br	4000dcc <_malloc_r+0xfc>
 4001000:	88c00054 	ori	r3,r17,1
 4001004:	8445883a 	add	r2,r16,r17
 4001008:	80c00115 	stw	r3,4(r16)
 400100c:	003fdf06 	br	4000f8c <_malloc_r+0x2bc>
 4001010:	e4000217 	ldw	r16,8(fp)
 4001014:	00bfff04 	movi	r2,-4
 4001018:	80c00117 	ldw	r3,4(r16)
 400101c:	802d883a 	mov	r22,r16
 4001020:	18aa703a 	and	r21,r3,r2
 4001024:	ac401636 	bltu	r21,r17,4001080 <_malloc_r+0x3b0>
 4001028:	ac49c83a 	sub	r4,r21,r17
 400102c:	008003c4 	movi	r2,15
 4001030:	1100130e 	bge	r2,r4,4001080 <_malloc_r+0x3b0>
 4001034:	88800054 	ori	r2,r17,1
 4001038:	8447883a 	add	r3,r16,r17
 400103c:	80800115 	stw	r2,4(r16)
 4001040:	20800054 	ori	r2,r4,1
 4001044:	18800115 	stw	r2,4(r3)
 4001048:	e0c00215 	stw	r3,8(fp)
 400104c:	9009883a 	mov	r4,r18
 4001050:	40036200 	call	4003620 <__malloc_unlock>
 4001054:	80c00204 	addi	r3,r16,8
 4001058:	003f3106 	br	4000d20 <_malloc_r+0x50>
 400105c:	39c00117 	ldw	r7,4(r7)
 4001060:	573ffe04 	addi	fp,r10,-8
 4001064:	003fa006 	br	4000ee8 <_malloc_r+0x218>
 4001068:	00801504 	movi	r2,84
 400106c:	10c06736 	bltu	r2,r3,400120c <_malloc_r+0x53c>
 4001070:	8804d33a 	srli	r2,r17,12
 4001074:	11801b84 	addi	r6,r2,110
 4001078:	300490fa 	slli	r2,r6,3
 400107c:	003f4106 	br	4000d84 <_malloc_r+0xb4>
 4001080:	d0a6b017 	ldw	r2,-25920(gp)
 4001084:	d0e00317 	ldw	r3,-32756(gp)
 4001088:	053fffc4 	movi	r20,-1
 400108c:	10800404 	addi	r2,r2,16
 4001090:	88a7883a 	add	r19,r17,r2
 4001094:	1d000326 	beq	r3,r20,40010a4 <_malloc_r+0x3d4>
 4001098:	98c3ffc4 	addi	r3,r19,4095
 400109c:	00bc0004 	movi	r2,-4096
 40010a0:	18a6703a 	and	r19,r3,r2
 40010a4:	9009883a 	mov	r4,r18
 40010a8:	980b883a 	mov	r5,r19
 40010ac:	4001bc80 	call	4001bc8 <_sbrk_r>
 40010b0:	1009883a 	mov	r4,r2
 40010b4:	15000426 	beq	r2,r20,40010c8 <_malloc_r+0x3f8>
 40010b8:	854b883a 	add	r5,r16,r21
 40010bc:	1029883a 	mov	r20,r2
 40010c0:	11405a2e 	bgeu	r2,r5,400122c <_malloc_r+0x55c>
 40010c4:	87000c26 	beq	r16,fp,40010f8 <_malloc_r+0x428>
 40010c8:	e4000217 	ldw	r16,8(fp)
 40010cc:	80c00117 	ldw	r3,4(r16)
 40010d0:	00bfff04 	movi	r2,-4
 40010d4:	1884703a 	and	r2,r3,r2
 40010d8:	14400336 	bltu	r2,r17,40010e8 <_malloc_r+0x418>
 40010dc:	1449c83a 	sub	r4,r2,r17
 40010e0:	008003c4 	movi	r2,15
 40010e4:	113fd316 	blt	r2,r4,4001034 <_malloc_r+0x364>
 40010e8:	9009883a 	mov	r4,r18
 40010ec:	40036200 	call	4003620 <__malloc_unlock>
 40010f0:	0007883a 	mov	r3,zero
 40010f4:	003f0a06 	br	4000d20 <_malloc_r+0x50>
 40010f8:	05c10074 	movhi	r23,1025
 40010fc:	bde55104 	addi	r23,r23,-27324
 4001100:	b8800017 	ldw	r2,0(r23)
 4001104:	988d883a 	add	r6,r19,r2
 4001108:	b9800015 	stw	r6,0(r23)
 400110c:	d0e00317 	ldw	r3,-32756(gp)
 4001110:	00bfffc4 	movi	r2,-1
 4001114:	18808e26 	beq	r3,r2,4001350 <_malloc_r+0x680>
 4001118:	2145c83a 	sub	r2,r4,r5
 400111c:	3085883a 	add	r2,r6,r2
 4001120:	b8800015 	stw	r2,0(r23)
 4001124:	20c001cc 	andi	r3,r4,7
 4001128:	18005f1e 	bne	r3,zero,40012a8 <_malloc_r+0x5d8>
 400112c:	000b883a 	mov	r5,zero
 4001130:	a4c5883a 	add	r2,r20,r19
 4001134:	1083ffcc 	andi	r2,r2,4095
 4001138:	00c40004 	movi	r3,4096
 400113c:	1887c83a 	sub	r3,r3,r2
 4001140:	28e7883a 	add	r19,r5,r3
 4001144:	9009883a 	mov	r4,r18
 4001148:	980b883a 	mov	r5,r19
 400114c:	4001bc80 	call	4001bc8 <_sbrk_r>
 4001150:	1007883a 	mov	r3,r2
 4001154:	00bfffc4 	movi	r2,-1
 4001158:	18807a26 	beq	r3,r2,4001344 <_malloc_r+0x674>
 400115c:	1d05c83a 	sub	r2,r3,r20
 4001160:	9885883a 	add	r2,r19,r2
 4001164:	10c00054 	ori	r3,r2,1
 4001168:	b8800017 	ldw	r2,0(r23)
 400116c:	a021883a 	mov	r16,r20
 4001170:	a0c00115 	stw	r3,4(r20)
 4001174:	9885883a 	add	r2,r19,r2
 4001178:	b8800015 	stw	r2,0(r23)
 400117c:	e5000215 	stw	r20,8(fp)
 4001180:	b7003626 	beq	r22,fp,400125c <_malloc_r+0x58c>
 4001184:	018003c4 	movi	r6,15
 4001188:	35404b36 	bltu	r6,r21,40012b8 <_malloc_r+0x5e8>
 400118c:	00800044 	movi	r2,1
 4001190:	a0800115 	stw	r2,4(r20)
 4001194:	003fcd06 	br	40010cc <_malloc_r+0x3fc>
 4001198:	2808d27a 	srli	r4,r5,9
 400119c:	2000371e 	bne	r4,zero,400127c <_malloc_r+0x5ac>
 40011a0:	2808d0fa 	srli	r4,r5,3
 40011a4:	200690fa 	slli	r3,r4,3
 40011a8:	1ad1883a 	add	r8,r3,r11
 40011ac:	41800217 	ldw	r6,8(r8)
 40011b0:	41805b26 	beq	r8,r6,4001320 <_malloc_r+0x650>
 40011b4:	30800117 	ldw	r2,4(r6)
 40011b8:	00ffff04 	movi	r3,-4
 40011bc:	10c4703a 	and	r2,r2,r3
 40011c0:	2880022e 	bgeu	r5,r2,40011cc <_malloc_r+0x4fc>
 40011c4:	31800217 	ldw	r6,8(r6)
 40011c8:	41bffa1e 	bne	r8,r6,40011b4 <_malloc_r+0x4e4>
 40011cc:	32000317 	ldw	r8,12(r6)
 40011d0:	39c00117 	ldw	r7,4(r7)
 40011d4:	82000315 	stw	r8,12(r16)
 40011d8:	81800215 	stw	r6,8(r16)
 40011dc:	07010034 	movhi	fp,1024
 40011e0:	e7191304 	addi	fp,fp,25676
 40011e4:	34000315 	stw	r16,12(r6)
 40011e8:	44000215 	stw	r16,8(r8)
 40011ec:	003f3e06 	br	4000ee8 <_malloc_r+0x218>
 40011f0:	63000044 	addi	r12,r12,1
 40011f4:	608000cc 	andi	r2,r12,3
 40011f8:	10005d26 	beq	r2,zero,4001370 <_malloc_r+0x6a0>
 40011fc:	18c00204 	addi	r3,r3,8
 4001200:	003f5106 	br	4000f48 <_malloc_r+0x278>
 4001204:	8089883a 	add	r4,r16,r2
 4001208:	003f6d06 	br	4000fc0 <_malloc_r+0x2f0>
 400120c:	00805504 	movi	r2,340
 4001210:	10c02036 	bltu	r2,r3,4001294 <_malloc_r+0x5c4>
 4001214:	8804d3fa 	srli	r2,r17,15
 4001218:	11801dc4 	addi	r6,r2,119
 400121c:	300490fa 	slli	r2,r6,3
 4001220:	003ed806 	br	4000d84 <_malloc_r+0xb4>
 4001224:	48c000c4 	addi	r3,r9,3
 4001228:	003f3106 	br	4000ef0 <_malloc_r+0x220>
 400122c:	05c10074 	movhi	r23,1025
 4001230:	bde55104 	addi	r23,r23,-27324
 4001234:	b8800017 	ldw	r2,0(r23)
 4001238:	988d883a 	add	r6,r19,r2
 400123c:	b9800015 	stw	r6,0(r23)
 4001240:	293fb21e 	bne	r5,r4,400110c <_malloc_r+0x43c>
 4001244:	2083ffcc 	andi	r2,r4,4095
 4001248:	103fb01e 	bne	r2,zero,400110c <_malloc_r+0x43c>
 400124c:	e4000217 	ldw	r16,8(fp)
 4001250:	9d45883a 	add	r2,r19,r21
 4001254:	10800054 	ori	r2,r2,1
 4001258:	80800115 	stw	r2,4(r16)
 400125c:	b8c00017 	ldw	r3,0(r23)
 4001260:	d0a6b117 	ldw	r2,-25916(gp)
 4001264:	10c0012e 	bgeu	r2,r3,400126c <_malloc_r+0x59c>
 4001268:	d0e6b115 	stw	r3,-25916(gp)
 400126c:	d0a6b217 	ldw	r2,-25912(gp)
 4001270:	10ff962e 	bgeu	r2,r3,40010cc <_malloc_r+0x3fc>
 4001274:	d0e6b215 	stw	r3,-25912(gp)
 4001278:	003f9406 	br	40010cc <_malloc_r+0x3fc>
 400127c:	00800104 	movi	r2,4
 4001280:	11001e36 	bltu	r2,r4,40012fc <_malloc_r+0x62c>
 4001284:	2804d1ba 	srli	r2,r5,6
 4001288:	11000e04 	addi	r4,r2,56
 400128c:	200690fa 	slli	r3,r4,3
 4001290:	003fc506 	br	40011a8 <_malloc_r+0x4d8>
 4001294:	00815504 	movi	r2,1364
 4001298:	10c01d2e 	bgeu	r2,r3,4001310 <_malloc_r+0x640>
 400129c:	01801f84 	movi	r6,126
 40012a0:	0080fc04 	movi	r2,1008
 40012a4:	003eb706 	br	4000d84 <_malloc_r+0xb4>
 40012a8:	00800204 	movi	r2,8
 40012ac:	10cbc83a 	sub	r5,r2,r3
 40012b0:	2169883a 	add	r20,r4,r5
 40012b4:	003f9e06 	br	4001130 <_malloc_r+0x460>
 40012b8:	00bffe04 	movi	r2,-8
 40012bc:	a93ffd04 	addi	r4,r21,-12
 40012c0:	2088703a 	and	r4,r4,r2
 40012c4:	b10b883a 	add	r5,r22,r4
 40012c8:	00c00144 	movi	r3,5
 40012cc:	28c00215 	stw	r3,8(r5)
 40012d0:	28c00115 	stw	r3,4(r5)
 40012d4:	b0800117 	ldw	r2,4(r22)
 40012d8:	1080004c 	andi	r2,r2,1
 40012dc:	2084b03a 	or	r2,r4,r2
 40012e0:	b0800115 	stw	r2,4(r22)
 40012e4:	313fdd2e 	bgeu	r6,r4,400125c <_malloc_r+0x58c>
 40012e8:	b1400204 	addi	r5,r22,8
 40012ec:	9009883a 	mov	r4,r18
 40012f0:	40023900 	call	4002390 <_free_r>
 40012f4:	e4000217 	ldw	r16,8(fp)
 40012f8:	003fd806 	br	400125c <_malloc_r+0x58c>
 40012fc:	00800504 	movi	r2,20
 4001300:	11001536 	bltu	r2,r4,4001358 <_malloc_r+0x688>
 4001304:	210016c4 	addi	r4,r4,91
 4001308:	200690fa 	slli	r3,r4,3
 400130c:	003fa606 	br	40011a8 <_malloc_r+0x4d8>
 4001310:	8804d4ba 	srli	r2,r17,18
 4001314:	11801f04 	addi	r6,r2,124
 4001318:	300490fa 	slli	r2,r6,3
 400131c:	003e9906 	br	4000d84 <_malloc_r+0xb4>
 4001320:	2009d0ba 	srai	r4,r4,2
 4001324:	01410034 	movhi	r5,1024
 4001328:	29591304 	addi	r5,r5,25676
 400132c:	00c00044 	movi	r3,1
 4001330:	28800117 	ldw	r2,4(r5)
 4001334:	1906983a 	sll	r3,r3,r4
 4001338:	10c4b03a 	or	r2,r2,r3
 400133c:	28800115 	stw	r2,4(r5)
 4001340:	003fa306 	br	40011d0 <_malloc_r+0x500>
 4001344:	0027883a 	mov	r19,zero
 4001348:	00c00044 	movi	r3,1
 400134c:	003f8606 	br	4001168 <_malloc_r+0x498>
 4001350:	d1200315 	stw	r4,-32756(gp)
 4001354:	003f7306 	br	4001124 <_malloc_r+0x454>
 4001358:	00801504 	movi	r2,84
 400135c:	11001936 	bltu	r2,r4,40013c4 <_malloc_r+0x6f4>
 4001360:	2804d33a 	srli	r2,r5,12
 4001364:	11001b84 	addi	r4,r2,110
 4001368:	200690fa 	slli	r3,r4,3
 400136c:	003f8e06 	br	40011a8 <_malloc_r+0x4d8>
 4001370:	480b883a 	mov	r5,r9
 4001374:	6807883a 	mov	r3,r13
 4001378:	288000cc 	andi	r2,r5,3
 400137c:	18fffe04 	addi	r3,r3,-8
 4001380:	297fffc4 	addi	r5,r5,-1
 4001384:	10001526 	beq	r2,zero,40013dc <_malloc_r+0x70c>
 4001388:	18800217 	ldw	r2,8(r3)
 400138c:	10fffa26 	beq	r2,r3,4001378 <_malloc_r+0x6a8>
 4001390:	2109883a 	add	r4,r4,r4
 4001394:	393f1e36 	bltu	r7,r4,4001010 <_malloc_r+0x340>
 4001398:	203f1d26 	beq	r4,zero,4001010 <_malloc_r+0x340>
 400139c:	21c4703a 	and	r2,r4,r7
 40013a0:	10000226 	beq	r2,zero,40013ac <_malloc_r+0x6dc>
 40013a4:	6013883a 	mov	r9,r12
 40013a8:	003ee106 	br	4000f30 <_malloc_r+0x260>
 40013ac:	2109883a 	add	r4,r4,r4
 40013b0:	3904703a 	and	r2,r7,r4
 40013b4:	63000104 	addi	r12,r12,4
 40013b8:	103ffc26 	beq	r2,zero,40013ac <_malloc_r+0x6dc>
 40013bc:	6013883a 	mov	r9,r12
 40013c0:	003edb06 	br	4000f30 <_malloc_r+0x260>
 40013c4:	00805504 	movi	r2,340
 40013c8:	11000836 	bltu	r2,r4,40013ec <_malloc_r+0x71c>
 40013cc:	2804d3fa 	srli	r2,r5,15
 40013d0:	11001dc4 	addi	r4,r2,119
 40013d4:	200690fa 	slli	r3,r4,3
 40013d8:	003f7306 	br	40011a8 <_malloc_r+0x4d8>
 40013dc:	0104303a 	nor	r2,zero,r4
 40013e0:	388e703a 	and	r7,r7,r2
 40013e4:	e1c00115 	stw	r7,4(fp)
 40013e8:	003fe906 	br	4001390 <_malloc_r+0x6c0>
 40013ec:	00815504 	movi	r2,1364
 40013f0:	1100032e 	bgeu	r2,r4,4001400 <_malloc_r+0x730>
 40013f4:	01001f84 	movi	r4,126
 40013f8:	00c0fc04 	movi	r3,1008
 40013fc:	003f6a06 	br	40011a8 <_malloc_r+0x4d8>
 4001400:	2804d4ba 	srli	r2,r5,18
 4001404:	11001f04 	addi	r4,r2,124
 4001408:	200690fa 	slli	r3,r4,3
 400140c:	003f6606 	br	40011a8 <_malloc_r+0x4d8>

04001410 <memchr>:
 4001410:	008000c4 	movi	r2,3
 4001414:	29403fcc 	andi	r5,r5,255
 4001418:	2007883a 	mov	r3,r4
 400141c:	1180022e 	bgeu	r2,r6,4001428 <memchr+0x18>
 4001420:	2084703a 	and	r2,r4,r2
 4001424:	10000b26 	beq	r2,zero,4001454 <memchr+0x44>
 4001428:	313fffc4 	addi	r4,r6,-1
 400142c:	3000051e 	bne	r6,zero,4001444 <memchr+0x34>
 4001430:	00002c06 	br	40014e4 <memchr+0xd4>
 4001434:	213fffc4 	addi	r4,r4,-1
 4001438:	00bfffc4 	movi	r2,-1
 400143c:	18c00044 	addi	r3,r3,1
 4001440:	20802826 	beq	r4,r2,40014e4 <memchr+0xd4>
 4001444:	18800003 	ldbu	r2,0(r3)
 4001448:	28bffa1e 	bne	r5,r2,4001434 <memchr+0x24>
 400144c:	1805883a 	mov	r2,r3
 4001450:	f800283a 	ret
 4001454:	0011883a 	mov	r8,zero
 4001458:	0007883a 	mov	r3,zero
 400145c:	01c00104 	movi	r7,4
 4001460:	4004923a 	slli	r2,r8,8
 4001464:	18c00044 	addi	r3,r3,1
 4001468:	1151883a 	add	r8,r2,r5
 400146c:	19fffc1e 	bne	r3,r7,4001460 <memchr+0x50>
 4001470:	02bfbff4 	movhi	r10,65279
 4001474:	52bfbfc4 	addi	r10,r10,-257
 4001478:	02602074 	movhi	r9,32897
 400147c:	4a602004 	addi	r9,r9,-32640
 4001480:	02c000c4 	movi	r11,3
 4001484:	20800017 	ldw	r2,0(r4)
 4001488:	31bfff04 	addi	r6,r6,-4
 400148c:	200f883a 	mov	r7,r4
 4001490:	1204f03a 	xor	r2,r2,r8
 4001494:	1287883a 	add	r3,r2,r10
 4001498:	1a46703a 	and	r3,r3,r9
 400149c:	0084303a 	nor	r2,zero,r2
 40014a0:	10c4703a 	and	r2,r2,r3
 40014a4:	10000b26 	beq	r2,zero,40014d4 <memchr+0xc4>
 40014a8:	20800003 	ldbu	r2,0(r4)
 40014ac:	28800f26 	beq	r5,r2,40014ec <memchr+0xdc>
 40014b0:	20800043 	ldbu	r2,1(r4)
 40014b4:	21c00044 	addi	r7,r4,1
 40014b8:	28800c26 	beq	r5,r2,40014ec <memchr+0xdc>
 40014bc:	20800083 	ldbu	r2,2(r4)
 40014c0:	21c00084 	addi	r7,r4,2
 40014c4:	28800926 	beq	r5,r2,40014ec <memchr+0xdc>
 40014c8:	208000c3 	ldbu	r2,3(r4)
 40014cc:	21c000c4 	addi	r7,r4,3
 40014d0:	28800626 	beq	r5,r2,40014ec <memchr+0xdc>
 40014d4:	21000104 	addi	r4,r4,4
 40014d8:	59bfea36 	bltu	r11,r6,4001484 <memchr+0x74>
 40014dc:	2007883a 	mov	r3,r4
 40014e0:	003fd106 	br	4001428 <memchr+0x18>
 40014e4:	0005883a 	mov	r2,zero
 40014e8:	f800283a 	ret
 40014ec:	3805883a 	mov	r2,r7
 40014f0:	f800283a 	ret

040014f4 <memmove>:
 40014f4:	2807883a 	mov	r3,r5
 40014f8:	2011883a 	mov	r8,r4
 40014fc:	29000c2e 	bgeu	r5,r4,4001530 <memmove+0x3c>
 4001500:	298f883a 	add	r7,r5,r6
 4001504:	21c00a2e 	bgeu	r4,r7,4001530 <memmove+0x3c>
 4001508:	30000726 	beq	r6,zero,4001528 <memmove+0x34>
 400150c:	2187883a 	add	r3,r4,r6
 4001510:	198dc83a 	sub	r6,r3,r6
 4001514:	39ffffc4 	addi	r7,r7,-1
 4001518:	38800003 	ldbu	r2,0(r7)
 400151c:	18ffffc4 	addi	r3,r3,-1
 4001520:	18800005 	stb	r2,0(r3)
 4001524:	19bffb1e 	bne	r3,r6,4001514 <memmove+0x20>
 4001528:	2005883a 	mov	r2,r4
 400152c:	f800283a 	ret
 4001530:	01c003c4 	movi	r7,15
 4001534:	39800a36 	bltu	r7,r6,4001560 <memmove+0x6c>
 4001538:	303ffb26 	beq	r6,zero,4001528 <memmove+0x34>
 400153c:	400f883a 	mov	r7,r8
 4001540:	320d883a 	add	r6,r6,r8
 4001544:	28800003 	ldbu	r2,0(r5)
 4001548:	29400044 	addi	r5,r5,1
 400154c:	38800005 	stb	r2,0(r7)
 4001550:	39c00044 	addi	r7,r7,1
 4001554:	39bffb1e 	bne	r7,r6,4001544 <memmove+0x50>
 4001558:	2005883a 	mov	r2,r4
 400155c:	f800283a 	ret
 4001560:	1904b03a 	or	r2,r3,r4
 4001564:	108000cc 	andi	r2,r2,3
 4001568:	103ff31e 	bne	r2,zero,4001538 <memmove+0x44>
 400156c:	3811883a 	mov	r8,r7
 4001570:	180b883a 	mov	r5,r3
 4001574:	200f883a 	mov	r7,r4
 4001578:	28c00017 	ldw	r3,0(r5)
 400157c:	31bffc04 	addi	r6,r6,-16
 4001580:	38c00015 	stw	r3,0(r7)
 4001584:	28800117 	ldw	r2,4(r5)
 4001588:	38800115 	stw	r2,4(r7)
 400158c:	28c00217 	ldw	r3,8(r5)
 4001590:	38c00215 	stw	r3,8(r7)
 4001594:	28800317 	ldw	r2,12(r5)
 4001598:	29400404 	addi	r5,r5,16
 400159c:	38800315 	stw	r2,12(r7)
 40015a0:	39c00404 	addi	r7,r7,16
 40015a4:	41bff436 	bltu	r8,r6,4001578 <memmove+0x84>
 40015a8:	008000c4 	movi	r2,3
 40015ac:	1180072e 	bgeu	r2,r6,40015cc <memmove+0xd8>
 40015b0:	1007883a 	mov	r3,r2
 40015b4:	28800017 	ldw	r2,0(r5)
 40015b8:	31bfff04 	addi	r6,r6,-4
 40015bc:	29400104 	addi	r5,r5,4
 40015c0:	38800015 	stw	r2,0(r7)
 40015c4:	39c00104 	addi	r7,r7,4
 40015c8:	19bffa36 	bltu	r3,r6,40015b4 <memmove+0xc0>
 40015cc:	3811883a 	mov	r8,r7
 40015d0:	003fd906 	br	4001538 <memmove+0x44>

040015d4 <_realloc_r>:
 40015d4:	defff404 	addi	sp,sp,-48
 40015d8:	dd800815 	stw	r22,32(sp)
 40015dc:	dc800415 	stw	r18,16(sp)
 40015e0:	dc400315 	stw	r17,12(sp)
 40015e4:	dfc00b15 	stw	ra,44(sp)
 40015e8:	df000a15 	stw	fp,40(sp)
 40015ec:	ddc00915 	stw	r23,36(sp)
 40015f0:	dd400715 	stw	r21,28(sp)
 40015f4:	dd000615 	stw	r20,24(sp)
 40015f8:	dcc00515 	stw	r19,20(sp)
 40015fc:	dc000215 	stw	r16,8(sp)
 4001600:	2825883a 	mov	r18,r5
 4001604:	3023883a 	mov	r17,r6
 4001608:	202d883a 	mov	r22,r4
 400160c:	2800c926 	beq	r5,zero,4001934 <_realloc_r+0x360>
 4001610:	40036000 	call	4003600 <__malloc_lock>
 4001614:	943ffe04 	addi	r16,r18,-8
 4001618:	88c002c4 	addi	r3,r17,11
 400161c:	00800584 	movi	r2,22
 4001620:	82000117 	ldw	r8,4(r16)
 4001624:	10c01b2e 	bgeu	r2,r3,4001694 <_realloc_r+0xc0>
 4001628:	00bffe04 	movi	r2,-8
 400162c:	188e703a 	and	r7,r3,r2
 4001630:	3839883a 	mov	fp,r7
 4001634:	38001a16 	blt	r7,zero,40016a0 <_realloc_r+0xcc>
 4001638:	e4401936 	bltu	fp,r17,40016a0 <_realloc_r+0xcc>
 400163c:	013fff04 	movi	r4,-4
 4001640:	4126703a 	and	r19,r8,r4
 4001644:	99c02616 	blt	r19,r7,40016e0 <_realloc_r+0x10c>
 4001648:	802b883a 	mov	r21,r16
 400164c:	9829883a 	mov	r20,r19
 4001650:	84000204 	addi	r16,r16,8
 4001654:	a80f883a 	mov	r7,r21
 4001658:	a70dc83a 	sub	r6,r20,fp
 400165c:	008003c4 	movi	r2,15
 4001660:	1180c136 	bltu	r2,r6,4001968 <_realloc_r+0x394>
 4001664:	38800117 	ldw	r2,4(r7)
 4001668:	a549883a 	add	r4,r20,r21
 400166c:	1080004c 	andi	r2,r2,1
 4001670:	a084b03a 	or	r2,r20,r2
 4001674:	38800115 	stw	r2,4(r7)
 4001678:	20c00117 	ldw	r3,4(r4)
 400167c:	18c00054 	ori	r3,r3,1
 4001680:	20c00115 	stw	r3,4(r4)
 4001684:	b009883a 	mov	r4,r22
 4001688:	40036200 	call	4003620 <__malloc_unlock>
 400168c:	8023883a 	mov	r17,r16
 4001690:	00000606 	br	40016ac <_realloc_r+0xd8>
 4001694:	01c00404 	movi	r7,16
 4001698:	3839883a 	mov	fp,r7
 400169c:	e47fe72e 	bgeu	fp,r17,400163c <_realloc_r+0x68>
 40016a0:	00800304 	movi	r2,12
 40016a4:	0023883a 	mov	r17,zero
 40016a8:	b0800015 	stw	r2,0(r22)
 40016ac:	8805883a 	mov	r2,r17
 40016b0:	dfc00b17 	ldw	ra,44(sp)
 40016b4:	df000a17 	ldw	fp,40(sp)
 40016b8:	ddc00917 	ldw	r23,36(sp)
 40016bc:	dd800817 	ldw	r22,32(sp)
 40016c0:	dd400717 	ldw	r21,28(sp)
 40016c4:	dd000617 	ldw	r20,24(sp)
 40016c8:	dcc00517 	ldw	r19,20(sp)
 40016cc:	dc800417 	ldw	r18,16(sp)
 40016d0:	dc400317 	ldw	r17,12(sp)
 40016d4:	dc000217 	ldw	r16,8(sp)
 40016d8:	dec00c04 	addi	sp,sp,48
 40016dc:	f800283a 	ret
 40016e0:	00810034 	movhi	r2,1024
 40016e4:	10991304 	addi	r2,r2,25676
 40016e8:	12400217 	ldw	r9,8(r2)
 40016ec:	84cd883a 	add	r6,r16,r19
 40016f0:	802b883a 	mov	r21,r16
 40016f4:	3240b926 	beq	r6,r9,40019dc <_realloc_r+0x408>
 40016f8:	31400117 	ldw	r5,4(r6)
 40016fc:	00bfff84 	movi	r2,-2
 4001700:	2884703a 	and	r2,r5,r2
 4001704:	1185883a 	add	r2,r2,r6
 4001708:	10c00117 	ldw	r3,4(r2)
 400170c:	18c0004c 	andi	r3,r3,1
 4001710:	1807003a 	cmpeq	r3,r3,zero
 4001714:	1800a326 	beq	r3,zero,40019a4 <_realloc_r+0x3d0>
 4001718:	2908703a 	and	r4,r5,r4
 400171c:	9929883a 	add	r20,r19,r4
 4001720:	a1c0a30e 	bge	r20,r7,40019b0 <_realloc_r+0x3dc>
 4001724:	4080004c 	andi	r2,r8,1
 4001728:	1000551e 	bne	r2,zero,4001880 <_realloc_r+0x2ac>
 400172c:	80800017 	ldw	r2,0(r16)
 4001730:	80afc83a 	sub	r23,r16,r2
 4001734:	b8c00117 	ldw	r3,4(r23)
 4001738:	00bfff04 	movi	r2,-4
 400173c:	1884703a 	and	r2,r3,r2
 4001740:	30002e26 	beq	r6,zero,40017fc <_realloc_r+0x228>
 4001744:	3240b926 	beq	r6,r9,4001a2c <_realloc_r+0x458>
 4001748:	98a9883a 	add	r20,r19,r2
 400174c:	2509883a 	add	r4,r4,r20
 4001750:	d9000015 	stw	r4,0(sp)
 4001754:	21c02a16 	blt	r4,r7,4001800 <_realloc_r+0x22c>
 4001758:	30800317 	ldw	r2,12(r6)
 400175c:	30c00217 	ldw	r3,8(r6)
 4001760:	01400904 	movi	r5,36
 4001764:	99bfff04 	addi	r6,r19,-4
 4001768:	18800315 	stw	r2,12(r3)
 400176c:	10c00215 	stw	r3,8(r2)
 4001770:	b9000317 	ldw	r4,12(r23)
 4001774:	b8800217 	ldw	r2,8(r23)
 4001778:	b82b883a 	mov	r21,r23
 400177c:	bc000204 	addi	r16,r23,8
 4001780:	20800215 	stw	r2,8(r4)
 4001784:	11000315 	stw	r4,12(r2)
 4001788:	2980e436 	bltu	r5,r6,4001b1c <_realloc_r+0x548>
 400178c:	008004c4 	movi	r2,19
 4001790:	9009883a 	mov	r4,r18
 4001794:	8011883a 	mov	r8,r16
 4001798:	11800f2e 	bgeu	r2,r6,40017d8 <_realloc_r+0x204>
 400179c:	90800017 	ldw	r2,0(r18)
 40017a0:	ba000404 	addi	r8,r23,16
 40017a4:	91000204 	addi	r4,r18,8
 40017a8:	b8800215 	stw	r2,8(r23)
 40017ac:	90c00117 	ldw	r3,4(r18)
 40017b0:	008006c4 	movi	r2,27
 40017b4:	b8c00315 	stw	r3,12(r23)
 40017b8:	1180072e 	bgeu	r2,r6,40017d8 <_realloc_r+0x204>
 40017bc:	90c00217 	ldw	r3,8(r18)
 40017c0:	ba000604 	addi	r8,r23,24
 40017c4:	91000404 	addi	r4,r18,16
 40017c8:	b8c00415 	stw	r3,16(r23)
 40017cc:	90800317 	ldw	r2,12(r18)
 40017d0:	b8800515 	stw	r2,20(r23)
 40017d4:	3140e726 	beq	r6,r5,4001b74 <_realloc_r+0x5a0>
 40017d8:	20800017 	ldw	r2,0(r4)
 40017dc:	dd000017 	ldw	r20,0(sp)
 40017e0:	b80f883a 	mov	r7,r23
 40017e4:	40800015 	stw	r2,0(r8)
 40017e8:	20c00117 	ldw	r3,4(r4)
 40017ec:	40c00115 	stw	r3,4(r8)
 40017f0:	20800217 	ldw	r2,8(r4)
 40017f4:	40800215 	stw	r2,8(r8)
 40017f8:	003f9706 	br	4001658 <_realloc_r+0x84>
 40017fc:	98a9883a 	add	r20,r19,r2
 4001800:	a1c01f16 	blt	r20,r7,4001880 <_realloc_r+0x2ac>
 4001804:	b8c00317 	ldw	r3,12(r23)
 4001808:	b8800217 	ldw	r2,8(r23)
 400180c:	99bfff04 	addi	r6,r19,-4
 4001810:	01400904 	movi	r5,36
 4001814:	b82b883a 	mov	r21,r23
 4001818:	18800215 	stw	r2,8(r3)
 400181c:	10c00315 	stw	r3,12(r2)
 4001820:	bc000204 	addi	r16,r23,8
 4001824:	2980c336 	bltu	r5,r6,4001b34 <_realloc_r+0x560>
 4001828:	008004c4 	movi	r2,19
 400182c:	9009883a 	mov	r4,r18
 4001830:	8011883a 	mov	r8,r16
 4001834:	11800f2e 	bgeu	r2,r6,4001874 <_realloc_r+0x2a0>
 4001838:	90800017 	ldw	r2,0(r18)
 400183c:	ba000404 	addi	r8,r23,16
 4001840:	91000204 	addi	r4,r18,8
 4001844:	b8800215 	stw	r2,8(r23)
 4001848:	90c00117 	ldw	r3,4(r18)
 400184c:	008006c4 	movi	r2,27
 4001850:	b8c00315 	stw	r3,12(r23)
 4001854:	1180072e 	bgeu	r2,r6,4001874 <_realloc_r+0x2a0>
 4001858:	90c00217 	ldw	r3,8(r18)
 400185c:	ba000604 	addi	r8,r23,24
 4001860:	91000404 	addi	r4,r18,16
 4001864:	b8c00415 	stw	r3,16(r23)
 4001868:	90800317 	ldw	r2,12(r18)
 400186c:	b8800515 	stw	r2,20(r23)
 4001870:	3140c726 	beq	r6,r5,4001b90 <_realloc_r+0x5bc>
 4001874:	20800017 	ldw	r2,0(r4)
 4001878:	b80f883a 	mov	r7,r23
 400187c:	003fd906 	br	40017e4 <_realloc_r+0x210>
 4001880:	880b883a 	mov	r5,r17
 4001884:	b009883a 	mov	r4,r22
 4001888:	4000cd00 	call	4000cd0 <_malloc_r>
 400188c:	1023883a 	mov	r17,r2
 4001890:	10002526 	beq	r2,zero,4001928 <_realloc_r+0x354>
 4001894:	80800117 	ldw	r2,4(r16)
 4001898:	00ffff84 	movi	r3,-2
 400189c:	893ffe04 	addi	r4,r17,-8
 40018a0:	10c4703a 	and	r2,r2,r3
 40018a4:	8085883a 	add	r2,r16,r2
 40018a8:	20809526 	beq	r4,r2,4001b00 <_realloc_r+0x52c>
 40018ac:	99bfff04 	addi	r6,r19,-4
 40018b0:	01c00904 	movi	r7,36
 40018b4:	39804536 	bltu	r7,r6,40019cc <_realloc_r+0x3f8>
 40018b8:	008004c4 	movi	r2,19
 40018bc:	9009883a 	mov	r4,r18
 40018c0:	880b883a 	mov	r5,r17
 40018c4:	11800f2e 	bgeu	r2,r6,4001904 <_realloc_r+0x330>
 40018c8:	90800017 	ldw	r2,0(r18)
 40018cc:	89400204 	addi	r5,r17,8
 40018d0:	91000204 	addi	r4,r18,8
 40018d4:	88800015 	stw	r2,0(r17)
 40018d8:	90c00117 	ldw	r3,4(r18)
 40018dc:	008006c4 	movi	r2,27
 40018e0:	88c00115 	stw	r3,4(r17)
 40018e4:	1180072e 	bgeu	r2,r6,4001904 <_realloc_r+0x330>
 40018e8:	90c00217 	ldw	r3,8(r18)
 40018ec:	89400404 	addi	r5,r17,16
 40018f0:	91000404 	addi	r4,r18,16
 40018f4:	88c00215 	stw	r3,8(r17)
 40018f8:	90800317 	ldw	r2,12(r18)
 40018fc:	88800315 	stw	r2,12(r17)
 4001900:	31c09126 	beq	r6,r7,4001b48 <_realloc_r+0x574>
 4001904:	20800017 	ldw	r2,0(r4)
 4001908:	28800015 	stw	r2,0(r5)
 400190c:	20c00117 	ldw	r3,4(r4)
 4001910:	28c00115 	stw	r3,4(r5)
 4001914:	20800217 	ldw	r2,8(r4)
 4001918:	28800215 	stw	r2,8(r5)
 400191c:	900b883a 	mov	r5,r18
 4001920:	b009883a 	mov	r4,r22
 4001924:	40023900 	call	4002390 <_free_r>
 4001928:	b009883a 	mov	r4,r22
 400192c:	40036200 	call	4003620 <__malloc_unlock>
 4001930:	003f5e06 	br	40016ac <_realloc_r+0xd8>
 4001934:	300b883a 	mov	r5,r6
 4001938:	dfc00b17 	ldw	ra,44(sp)
 400193c:	df000a17 	ldw	fp,40(sp)
 4001940:	ddc00917 	ldw	r23,36(sp)
 4001944:	dd800817 	ldw	r22,32(sp)
 4001948:	dd400717 	ldw	r21,28(sp)
 400194c:	dd000617 	ldw	r20,24(sp)
 4001950:	dcc00517 	ldw	r19,20(sp)
 4001954:	dc800417 	ldw	r18,16(sp)
 4001958:	dc400317 	ldw	r17,12(sp)
 400195c:	dc000217 	ldw	r16,8(sp)
 4001960:	dec00c04 	addi	sp,sp,48
 4001964:	4000cd01 	jmpi	4000cd0 <_malloc_r>
 4001968:	38800117 	ldw	r2,4(r7)
 400196c:	e54b883a 	add	r5,fp,r21
 4001970:	31000054 	ori	r4,r6,1
 4001974:	1080004c 	andi	r2,r2,1
 4001978:	1704b03a 	or	r2,r2,fp
 400197c:	38800115 	stw	r2,4(r7)
 4001980:	29000115 	stw	r4,4(r5)
 4001984:	2987883a 	add	r3,r5,r6
 4001988:	18800117 	ldw	r2,4(r3)
 400198c:	29400204 	addi	r5,r5,8
 4001990:	b009883a 	mov	r4,r22
 4001994:	10800054 	ori	r2,r2,1
 4001998:	18800115 	stw	r2,4(r3)
 400199c:	40023900 	call	4002390 <_free_r>
 40019a0:	003f3806 	br	4001684 <_realloc_r+0xb0>
 40019a4:	000d883a 	mov	r6,zero
 40019a8:	0009883a 	mov	r4,zero
 40019ac:	003f5d06 	br	4001724 <_realloc_r+0x150>
 40019b0:	30c00217 	ldw	r3,8(r6)
 40019b4:	30800317 	ldw	r2,12(r6)
 40019b8:	800f883a 	mov	r7,r16
 40019bc:	84000204 	addi	r16,r16,8
 40019c0:	10c00215 	stw	r3,8(r2)
 40019c4:	18800315 	stw	r2,12(r3)
 40019c8:	003f2306 	br	4001658 <_realloc_r+0x84>
 40019cc:	8809883a 	mov	r4,r17
 40019d0:	900b883a 	mov	r5,r18
 40019d4:	40014f40 	call	40014f4 <memmove>
 40019d8:	003fd006 	br	400191c <_realloc_r+0x348>
 40019dc:	30800117 	ldw	r2,4(r6)
 40019e0:	e0c00404 	addi	r3,fp,16
 40019e4:	1108703a 	and	r4,r2,r4
 40019e8:	9905883a 	add	r2,r19,r4
 40019ec:	10ff4d16 	blt	r2,r3,4001724 <_realloc_r+0x150>
 40019f0:	1705c83a 	sub	r2,r2,fp
 40019f4:	870b883a 	add	r5,r16,fp
 40019f8:	10800054 	ori	r2,r2,1
 40019fc:	28800115 	stw	r2,4(r5)
 4001a00:	80c00117 	ldw	r3,4(r16)
 4001a04:	00810034 	movhi	r2,1024
 4001a08:	10991304 	addi	r2,r2,25676
 4001a0c:	b009883a 	mov	r4,r22
 4001a10:	18c0004c 	andi	r3,r3,1
 4001a14:	e0c6b03a 	or	r3,fp,r3
 4001a18:	11400215 	stw	r5,8(r2)
 4001a1c:	80c00115 	stw	r3,4(r16)
 4001a20:	40036200 	call	4003620 <__malloc_unlock>
 4001a24:	84400204 	addi	r17,r16,8
 4001a28:	003f2006 	br	40016ac <_realloc_r+0xd8>
 4001a2c:	98a9883a 	add	r20,r19,r2
 4001a30:	2509883a 	add	r4,r4,r20
 4001a34:	e0800404 	addi	r2,fp,16
 4001a38:	d9000115 	stw	r4,4(sp)
 4001a3c:	20bf7016 	blt	r4,r2,4001800 <_realloc_r+0x22c>
 4001a40:	b8c00317 	ldw	r3,12(r23)
 4001a44:	b8800217 	ldw	r2,8(r23)
 4001a48:	99bfff04 	addi	r6,r19,-4
 4001a4c:	01400904 	movi	r5,36
 4001a50:	18800215 	stw	r2,8(r3)
 4001a54:	10c00315 	stw	r3,12(r2)
 4001a58:	bc400204 	addi	r17,r23,8
 4001a5c:	29804136 	bltu	r5,r6,4001b64 <_realloc_r+0x590>
 4001a60:	008004c4 	movi	r2,19
 4001a64:	9009883a 	mov	r4,r18
 4001a68:	880f883a 	mov	r7,r17
 4001a6c:	11800f2e 	bgeu	r2,r6,4001aac <_realloc_r+0x4d8>
 4001a70:	90800017 	ldw	r2,0(r18)
 4001a74:	b9c00404 	addi	r7,r23,16
 4001a78:	91000204 	addi	r4,r18,8
 4001a7c:	b8800215 	stw	r2,8(r23)
 4001a80:	90c00117 	ldw	r3,4(r18)
 4001a84:	008006c4 	movi	r2,27
 4001a88:	b8c00315 	stw	r3,12(r23)
 4001a8c:	1180072e 	bgeu	r2,r6,4001aac <_realloc_r+0x4d8>
 4001a90:	90c00217 	ldw	r3,8(r18)
 4001a94:	b9c00604 	addi	r7,r23,24
 4001a98:	91000404 	addi	r4,r18,16
 4001a9c:	b8c00415 	stw	r3,16(r23)
 4001aa0:	90800317 	ldw	r2,12(r18)
 4001aa4:	b8800515 	stw	r2,20(r23)
 4001aa8:	31404026 	beq	r6,r5,4001bac <_realloc_r+0x5d8>
 4001aac:	20800017 	ldw	r2,0(r4)
 4001ab0:	38800015 	stw	r2,0(r7)
 4001ab4:	20c00117 	ldw	r3,4(r4)
 4001ab8:	38c00115 	stw	r3,4(r7)
 4001abc:	20800217 	ldw	r2,8(r4)
 4001ac0:	38800215 	stw	r2,8(r7)
 4001ac4:	d8c00117 	ldw	r3,4(sp)
 4001ac8:	bf0b883a 	add	r5,r23,fp
 4001acc:	b009883a 	mov	r4,r22
 4001ad0:	1f05c83a 	sub	r2,r3,fp
 4001ad4:	10800054 	ori	r2,r2,1
 4001ad8:	28800115 	stw	r2,4(r5)
 4001adc:	b8c00117 	ldw	r3,4(r23)
 4001ae0:	00810034 	movhi	r2,1024
 4001ae4:	10991304 	addi	r2,r2,25676
 4001ae8:	11400215 	stw	r5,8(r2)
 4001aec:	18c0004c 	andi	r3,r3,1
 4001af0:	e0c6b03a 	or	r3,fp,r3
 4001af4:	b8c00115 	stw	r3,4(r23)
 4001af8:	40036200 	call	4003620 <__malloc_unlock>
 4001afc:	003eeb06 	br	40016ac <_realloc_r+0xd8>
 4001b00:	20800117 	ldw	r2,4(r4)
 4001b04:	00ffff04 	movi	r3,-4
 4001b08:	800f883a 	mov	r7,r16
 4001b0c:	10c4703a 	and	r2,r2,r3
 4001b10:	98a9883a 	add	r20,r19,r2
 4001b14:	84000204 	addi	r16,r16,8
 4001b18:	003ecf06 	br	4001658 <_realloc_r+0x84>
 4001b1c:	900b883a 	mov	r5,r18
 4001b20:	8009883a 	mov	r4,r16
 4001b24:	40014f40 	call	40014f4 <memmove>
 4001b28:	dd000017 	ldw	r20,0(sp)
 4001b2c:	b80f883a 	mov	r7,r23
 4001b30:	003ec906 	br	4001658 <_realloc_r+0x84>
 4001b34:	900b883a 	mov	r5,r18
 4001b38:	8009883a 	mov	r4,r16
 4001b3c:	40014f40 	call	40014f4 <memmove>
 4001b40:	b80f883a 	mov	r7,r23
 4001b44:	003ec406 	br	4001658 <_realloc_r+0x84>
 4001b48:	90c00417 	ldw	r3,16(r18)
 4001b4c:	89400604 	addi	r5,r17,24
 4001b50:	91000604 	addi	r4,r18,24
 4001b54:	88c00415 	stw	r3,16(r17)
 4001b58:	90800517 	ldw	r2,20(r18)
 4001b5c:	88800515 	stw	r2,20(r17)
 4001b60:	003f6806 	br	4001904 <_realloc_r+0x330>
 4001b64:	900b883a 	mov	r5,r18
 4001b68:	8809883a 	mov	r4,r17
 4001b6c:	40014f40 	call	40014f4 <memmove>
 4001b70:	003fd406 	br	4001ac4 <_realloc_r+0x4f0>
 4001b74:	90c00417 	ldw	r3,16(r18)
 4001b78:	91000604 	addi	r4,r18,24
 4001b7c:	ba000804 	addi	r8,r23,32
 4001b80:	b8c00615 	stw	r3,24(r23)
 4001b84:	90800517 	ldw	r2,20(r18)
 4001b88:	b8800715 	stw	r2,28(r23)
 4001b8c:	003f1206 	br	40017d8 <_realloc_r+0x204>
 4001b90:	90c00417 	ldw	r3,16(r18)
 4001b94:	91000604 	addi	r4,r18,24
 4001b98:	ba000804 	addi	r8,r23,32
 4001b9c:	b8c00615 	stw	r3,24(r23)
 4001ba0:	90800517 	ldw	r2,20(r18)
 4001ba4:	b8800715 	stw	r2,28(r23)
 4001ba8:	003f3206 	br	4001874 <_realloc_r+0x2a0>
 4001bac:	90c00417 	ldw	r3,16(r18)
 4001bb0:	91000604 	addi	r4,r18,24
 4001bb4:	b9c00804 	addi	r7,r23,32
 4001bb8:	b8c00615 	stw	r3,24(r23)
 4001bbc:	90800517 	ldw	r2,20(r18)
 4001bc0:	b8800715 	stw	r2,28(r23)
 4001bc4:	003fb906 	br	4001aac <_realloc_r+0x4d8>

04001bc8 <_sbrk_r>:
 4001bc8:	defffd04 	addi	sp,sp,-12
 4001bcc:	dc000015 	stw	r16,0(sp)
 4001bd0:	04010074 	movhi	r16,1025
 4001bd4:	84254a04 	addi	r16,r16,-27352
 4001bd8:	dc400115 	stw	r17,4(sp)
 4001bdc:	80000015 	stw	zero,0(r16)
 4001be0:	2023883a 	mov	r17,r4
 4001be4:	2809883a 	mov	r4,r5
 4001be8:	dfc00215 	stw	ra,8(sp)
 4001bec:	40038200 	call	4003820 <sbrk>
 4001bf0:	1007883a 	mov	r3,r2
 4001bf4:	00bfffc4 	movi	r2,-1
 4001bf8:	18800626 	beq	r3,r2,4001c14 <_sbrk_r+0x4c>
 4001bfc:	1805883a 	mov	r2,r3
 4001c00:	dfc00217 	ldw	ra,8(sp)
 4001c04:	dc400117 	ldw	r17,4(sp)
 4001c08:	dc000017 	ldw	r16,0(sp)
 4001c0c:	dec00304 	addi	sp,sp,12
 4001c10:	f800283a 	ret
 4001c14:	80800017 	ldw	r2,0(r16)
 4001c18:	103ff826 	beq	r2,zero,4001bfc <_sbrk_r+0x34>
 4001c1c:	88800015 	stw	r2,0(r17)
 4001c20:	1805883a 	mov	r2,r3
 4001c24:	dfc00217 	ldw	ra,8(sp)
 4001c28:	dc400117 	ldw	r17,4(sp)
 4001c2c:	dc000017 	ldw	r16,0(sp)
 4001c30:	dec00304 	addi	sp,sp,12
 4001c34:	f800283a 	ret

04001c38 <__swsetup_r>:
 4001c38:	00810034 	movhi	r2,1024
 4001c3c:	109e9704 	addi	r2,r2,31324
 4001c40:	10c00017 	ldw	r3,0(r2)
 4001c44:	defffd04 	addi	sp,sp,-12
 4001c48:	dc400115 	stw	r17,4(sp)
 4001c4c:	dc000015 	stw	r16,0(sp)
 4001c50:	dfc00215 	stw	ra,8(sp)
 4001c54:	2023883a 	mov	r17,r4
 4001c58:	2821883a 	mov	r16,r5
 4001c5c:	18000226 	beq	r3,zero,4001c68 <__swsetup_r+0x30>
 4001c60:	18800e17 	ldw	r2,56(r3)
 4001c64:	10001f26 	beq	r2,zero,4001ce4 <__swsetup_r+0xac>
 4001c68:	8100030b 	ldhu	r4,12(r16)
 4001c6c:	2080020c 	andi	r2,r4,8
 4001c70:	10002826 	beq	r2,zero,4001d14 <__swsetup_r+0xdc>
 4001c74:	81400417 	ldw	r5,16(r16)
 4001c78:	28001d26 	beq	r5,zero,4001cf0 <__swsetup_r+0xb8>
 4001c7c:	2080004c 	andi	r2,r4,1
 4001c80:	1005003a 	cmpeq	r2,r2,zero
 4001c84:	10000b26 	beq	r2,zero,4001cb4 <__swsetup_r+0x7c>
 4001c88:	2080008c 	andi	r2,r4,2
 4001c8c:	10001226 	beq	r2,zero,4001cd8 <__swsetup_r+0xa0>
 4001c90:	0005883a 	mov	r2,zero
 4001c94:	80800215 	stw	r2,8(r16)
 4001c98:	28000b26 	beq	r5,zero,4001cc8 <__swsetup_r+0x90>
 4001c9c:	0005883a 	mov	r2,zero
 4001ca0:	dfc00217 	ldw	ra,8(sp)
 4001ca4:	dc400117 	ldw	r17,4(sp)
 4001ca8:	dc000017 	ldw	r16,0(sp)
 4001cac:	dec00304 	addi	sp,sp,12
 4001cb0:	f800283a 	ret
 4001cb4:	80800517 	ldw	r2,20(r16)
 4001cb8:	80000215 	stw	zero,8(r16)
 4001cbc:	0085c83a 	sub	r2,zero,r2
 4001cc0:	80800615 	stw	r2,24(r16)
 4001cc4:	283ff51e 	bne	r5,zero,4001c9c <__swsetup_r+0x64>
 4001cc8:	2080200c 	andi	r2,r4,128
 4001ccc:	103ff326 	beq	r2,zero,4001c9c <__swsetup_r+0x64>
 4001cd0:	00bfffc4 	movi	r2,-1
 4001cd4:	003ff206 	br	4001ca0 <__swsetup_r+0x68>
 4001cd8:	80800517 	ldw	r2,20(r16)
 4001cdc:	80800215 	stw	r2,8(r16)
 4001ce0:	003fed06 	br	4001c98 <__swsetup_r+0x60>
 4001ce4:	1809883a 	mov	r4,r3
 4001ce8:	400200c0 	call	400200c <__sinit>
 4001cec:	003fde06 	br	4001c68 <__swsetup_r+0x30>
 4001cf0:	20c0a00c 	andi	r3,r4,640
 4001cf4:	00808004 	movi	r2,512
 4001cf8:	18bfe026 	beq	r3,r2,4001c7c <__swsetup_r+0x44>
 4001cfc:	8809883a 	mov	r4,r17
 4001d00:	800b883a 	mov	r5,r16
 4001d04:	40028240 	call	4002824 <__smakebuf_r>
 4001d08:	8100030b 	ldhu	r4,12(r16)
 4001d0c:	81400417 	ldw	r5,16(r16)
 4001d10:	003fda06 	br	4001c7c <__swsetup_r+0x44>
 4001d14:	2080040c 	andi	r2,r4,16
 4001d18:	103fed26 	beq	r2,zero,4001cd0 <__swsetup_r+0x98>
 4001d1c:	2080010c 	andi	r2,r4,4
 4001d20:	10001226 	beq	r2,zero,4001d6c <__swsetup_r+0x134>
 4001d24:	81400c17 	ldw	r5,48(r16)
 4001d28:	28000526 	beq	r5,zero,4001d40 <__swsetup_r+0x108>
 4001d2c:	80801004 	addi	r2,r16,64
 4001d30:	28800226 	beq	r5,r2,4001d3c <__swsetup_r+0x104>
 4001d34:	8809883a 	mov	r4,r17
 4001d38:	40023900 	call	4002390 <_free_r>
 4001d3c:	80000c15 	stw	zero,48(r16)
 4001d40:	8080030b 	ldhu	r2,12(r16)
 4001d44:	81400417 	ldw	r5,16(r16)
 4001d48:	80000115 	stw	zero,4(r16)
 4001d4c:	10bff6cc 	andi	r2,r2,65499
 4001d50:	8080030d 	sth	r2,12(r16)
 4001d54:	81400015 	stw	r5,0(r16)
 4001d58:	8080030b 	ldhu	r2,12(r16)
 4001d5c:	10800214 	ori	r2,r2,8
 4001d60:	113fffcc 	andi	r4,r2,65535
 4001d64:	8080030d 	sth	r2,12(r16)
 4001d68:	003fc306 	br	4001c78 <__swsetup_r+0x40>
 4001d6c:	81400417 	ldw	r5,16(r16)
 4001d70:	003ff906 	br	4001d58 <__swsetup_r+0x120>

04001d74 <_fflush_r>:
 4001d74:	defffb04 	addi	sp,sp,-20
 4001d78:	dcc00315 	stw	r19,12(sp)
 4001d7c:	dc800215 	stw	r18,8(sp)
 4001d80:	dfc00415 	stw	ra,16(sp)
 4001d84:	dc400115 	stw	r17,4(sp)
 4001d88:	dc000015 	stw	r16,0(sp)
 4001d8c:	2027883a 	mov	r19,r4
 4001d90:	2825883a 	mov	r18,r5
 4001d94:	20000226 	beq	r4,zero,4001da0 <_fflush_r+0x2c>
 4001d98:	20800e17 	ldw	r2,56(r4)
 4001d9c:	10005626 	beq	r2,zero,4001ef8 <_fflush_r+0x184>
 4001da0:	9100030b 	ldhu	r4,12(r18)
 4001da4:	20ffffcc 	andi	r3,r4,65535
 4001da8:	18e0001c 	xori	r3,r3,32768
 4001dac:	18e00004 	addi	r3,r3,-32768
 4001db0:	1880020c 	andi	r2,r3,8
 4001db4:	1000261e 	bne	r2,zero,4001e50 <_fflush_r+0xdc>
 4001db8:	90c00117 	ldw	r3,4(r18)
 4001dbc:	20820014 	ori	r2,r4,2048
 4001dc0:	9080030d 	sth	r2,12(r18)
 4001dc4:	1009883a 	mov	r4,r2
 4001dc8:	00c0400e 	bge	zero,r3,4001ecc <_fflush_r+0x158>
 4001dcc:	92000a17 	ldw	r8,40(r18)
 4001dd0:	40004026 	beq	r8,zero,4001ed4 <_fflush_r+0x160>
 4001dd4:	2084000c 	andi	r2,r4,4096
 4001dd8:	10005326 	beq	r2,zero,4001f28 <_fflush_r+0x1b4>
 4001ddc:	94001417 	ldw	r16,80(r18)
 4001de0:	9080030b 	ldhu	r2,12(r18)
 4001de4:	1080010c 	andi	r2,r2,4
 4001de8:	1000481e 	bne	r2,zero,4001f0c <_fflush_r+0x198>
 4001dec:	91400717 	ldw	r5,28(r18)
 4001df0:	9809883a 	mov	r4,r19
 4001df4:	800d883a 	mov	r6,r16
 4001df8:	000f883a 	mov	r7,zero
 4001dfc:	403ee83a 	callr	r8
 4001e00:	8080261e 	bne	r16,r2,4001e9c <_fflush_r+0x128>
 4001e04:	9080030b 	ldhu	r2,12(r18)
 4001e08:	91000417 	ldw	r4,16(r18)
 4001e0c:	90000115 	stw	zero,4(r18)
 4001e10:	10bdffcc 	andi	r2,r2,63487
 4001e14:	10ffffcc 	andi	r3,r2,65535
 4001e18:	18c4000c 	andi	r3,r3,4096
 4001e1c:	9080030d 	sth	r2,12(r18)
 4001e20:	91000015 	stw	r4,0(r18)
 4001e24:	18002b26 	beq	r3,zero,4001ed4 <_fflush_r+0x160>
 4001e28:	0007883a 	mov	r3,zero
 4001e2c:	1805883a 	mov	r2,r3
 4001e30:	94001415 	stw	r16,80(r18)
 4001e34:	dfc00417 	ldw	ra,16(sp)
 4001e38:	dcc00317 	ldw	r19,12(sp)
 4001e3c:	dc800217 	ldw	r18,8(sp)
 4001e40:	dc400117 	ldw	r17,4(sp)
 4001e44:	dc000017 	ldw	r16,0(sp)
 4001e48:	dec00504 	addi	sp,sp,20
 4001e4c:	f800283a 	ret
 4001e50:	94400417 	ldw	r17,16(r18)
 4001e54:	88001f26 	beq	r17,zero,4001ed4 <_fflush_r+0x160>
 4001e58:	90800017 	ldw	r2,0(r18)
 4001e5c:	18c000cc 	andi	r3,r3,3
 4001e60:	94400015 	stw	r17,0(r18)
 4001e64:	1461c83a 	sub	r16,r2,r17
 4001e68:	18002526 	beq	r3,zero,4001f00 <_fflush_r+0x18c>
 4001e6c:	0005883a 	mov	r2,zero
 4001e70:	90800215 	stw	r2,8(r18)
 4001e74:	0400170e 	bge	zero,r16,4001ed4 <_fflush_r+0x160>
 4001e78:	90c00917 	ldw	r3,36(r18)
 4001e7c:	91400717 	ldw	r5,28(r18)
 4001e80:	880d883a 	mov	r6,r17
 4001e84:	800f883a 	mov	r7,r16
 4001e88:	9809883a 	mov	r4,r19
 4001e8c:	183ee83a 	callr	r3
 4001e90:	88a3883a 	add	r17,r17,r2
 4001e94:	80a1c83a 	sub	r16,r16,r2
 4001e98:	00bff616 	blt	zero,r2,4001e74 <_fflush_r+0x100>
 4001e9c:	9080030b 	ldhu	r2,12(r18)
 4001ea0:	00ffffc4 	movi	r3,-1
 4001ea4:	10801014 	ori	r2,r2,64
 4001ea8:	9080030d 	sth	r2,12(r18)
 4001eac:	1805883a 	mov	r2,r3
 4001eb0:	dfc00417 	ldw	ra,16(sp)
 4001eb4:	dcc00317 	ldw	r19,12(sp)
 4001eb8:	dc800217 	ldw	r18,8(sp)
 4001ebc:	dc400117 	ldw	r17,4(sp)
 4001ec0:	dc000017 	ldw	r16,0(sp)
 4001ec4:	dec00504 	addi	sp,sp,20
 4001ec8:	f800283a 	ret
 4001ecc:	90800f17 	ldw	r2,60(r18)
 4001ed0:	00bfbe16 	blt	zero,r2,4001dcc <_fflush_r+0x58>
 4001ed4:	0007883a 	mov	r3,zero
 4001ed8:	1805883a 	mov	r2,r3
 4001edc:	dfc00417 	ldw	ra,16(sp)
 4001ee0:	dcc00317 	ldw	r19,12(sp)
 4001ee4:	dc800217 	ldw	r18,8(sp)
 4001ee8:	dc400117 	ldw	r17,4(sp)
 4001eec:	dc000017 	ldw	r16,0(sp)
 4001ef0:	dec00504 	addi	sp,sp,20
 4001ef4:	f800283a 	ret
 4001ef8:	400200c0 	call	400200c <__sinit>
 4001efc:	003fa806 	br	4001da0 <_fflush_r+0x2c>
 4001f00:	90800517 	ldw	r2,20(r18)
 4001f04:	90800215 	stw	r2,8(r18)
 4001f08:	003fda06 	br	4001e74 <_fflush_r+0x100>
 4001f0c:	90800117 	ldw	r2,4(r18)
 4001f10:	90c00c17 	ldw	r3,48(r18)
 4001f14:	80a1c83a 	sub	r16,r16,r2
 4001f18:	183fb426 	beq	r3,zero,4001dec <_fflush_r+0x78>
 4001f1c:	90800f17 	ldw	r2,60(r18)
 4001f20:	80a1c83a 	sub	r16,r16,r2
 4001f24:	003fb106 	br	4001dec <_fflush_r+0x78>
 4001f28:	91400717 	ldw	r5,28(r18)
 4001f2c:	9809883a 	mov	r4,r19
 4001f30:	000d883a 	mov	r6,zero
 4001f34:	01c00044 	movi	r7,1
 4001f38:	403ee83a 	callr	r8
 4001f3c:	1021883a 	mov	r16,r2
 4001f40:	00bfffc4 	movi	r2,-1
 4001f44:	80800226 	beq	r16,r2,4001f50 <_fflush_r+0x1dc>
 4001f48:	92000a17 	ldw	r8,40(r18)
 4001f4c:	003fa406 	br	4001de0 <_fflush_r+0x6c>
 4001f50:	98c00017 	ldw	r3,0(r19)
 4001f54:	00800744 	movi	r2,29
 4001f58:	18bfde26 	beq	r3,r2,4001ed4 <_fflush_r+0x160>
 4001f5c:	9080030b 	ldhu	r2,12(r18)
 4001f60:	8007883a 	mov	r3,r16
 4001f64:	10801014 	ori	r2,r2,64
 4001f68:	9080030d 	sth	r2,12(r18)
 4001f6c:	003fcf06 	br	4001eac <_fflush_r+0x138>

04001f70 <fflush>:
 4001f70:	01410034 	movhi	r5,1024
 4001f74:	29475d04 	addi	r5,r5,7540
 4001f78:	2007883a 	mov	r3,r4
 4001f7c:	20000526 	beq	r4,zero,4001f94 <fflush+0x24>
 4001f80:	00810034 	movhi	r2,1024
 4001f84:	109e9704 	addi	r2,r2,31324
 4001f88:	11000017 	ldw	r4,0(r2)
 4001f8c:	180b883a 	mov	r5,r3
 4001f90:	4001d741 	jmpi	4001d74 <_fflush_r>
 4001f94:	00810034 	movhi	r2,1024
 4001f98:	109e9804 	addi	r2,r2,31328
 4001f9c:	11000017 	ldw	r4,0(r2)
 4001fa0:	40026a41 	jmpi	40026a4 <_fwalk_reent>

04001fa4 <std>:
 4001fa4:	00810034 	movhi	r2,1024
 4001fa8:	108a9404 	addi	r2,r2,10832
 4001fac:	20800b15 	stw	r2,44(r4)
 4001fb0:	00810034 	movhi	r2,1024
 4001fb4:	108acf04 	addi	r2,r2,11068
 4001fb8:	20800815 	stw	r2,32(r4)
 4001fbc:	00c10034 	movhi	r3,1024
 4001fc0:	18cab004 	addi	r3,r3,10944
 4001fc4:	00810034 	movhi	r2,1024
 4001fc8:	108a9604 	addi	r2,r2,10840
 4001fcc:	2140030d 	sth	r5,12(r4)
 4001fd0:	2180038d 	sth	r6,14(r4)
 4001fd4:	20c00915 	stw	r3,36(r4)
 4001fd8:	20800a15 	stw	r2,40(r4)
 4001fdc:	20000015 	stw	zero,0(r4)
 4001fe0:	20000115 	stw	zero,4(r4)
 4001fe4:	20000215 	stw	zero,8(r4)
 4001fe8:	20000415 	stw	zero,16(r4)
 4001fec:	20000515 	stw	zero,20(r4)
 4001ff0:	20000615 	stw	zero,24(r4)
 4001ff4:	21000715 	stw	r4,28(r4)
 4001ff8:	f800283a 	ret

04001ffc <__sfp_lock_acquire>:
 4001ffc:	f800283a 	ret

04002000 <__sfp_lock_release>:
 4002000:	f800283a 	ret

04002004 <__sinit_lock_acquire>:
 4002004:	f800283a 	ret

04002008 <__sinit_lock_release>:
 4002008:	f800283a 	ret

0400200c <__sinit>:
 400200c:	20800e17 	ldw	r2,56(r4)
 4002010:	defffd04 	addi	sp,sp,-12
 4002014:	dc400115 	stw	r17,4(sp)
 4002018:	dc000015 	stw	r16,0(sp)
 400201c:	dfc00215 	stw	ra,8(sp)
 4002020:	04400044 	movi	r17,1
 4002024:	01400104 	movi	r5,4
 4002028:	000d883a 	mov	r6,zero
 400202c:	2021883a 	mov	r16,r4
 4002030:	2200bb04 	addi	r8,r4,748
 4002034:	200f883a 	mov	r7,r4
 4002038:	10000526 	beq	r2,zero,4002050 <__sinit+0x44>
 400203c:	dfc00217 	ldw	ra,8(sp)
 4002040:	dc400117 	ldw	r17,4(sp)
 4002044:	dc000017 	ldw	r16,0(sp)
 4002048:	dec00304 	addi	sp,sp,12
 400204c:	f800283a 	ret
 4002050:	21000117 	ldw	r4,4(r4)
 4002054:	00810034 	movhi	r2,1024
 4002058:	10883c04 	addi	r2,r2,8432
 400205c:	00c000c4 	movi	r3,3
 4002060:	80800f15 	stw	r2,60(r16)
 4002064:	80c0b915 	stw	r3,740(r16)
 4002068:	8200ba15 	stw	r8,744(r16)
 400206c:	84400e15 	stw	r17,56(r16)
 4002070:	8000b815 	stw	zero,736(r16)
 4002074:	4001fa40 	call	4001fa4 <std>
 4002078:	81000217 	ldw	r4,8(r16)
 400207c:	880d883a 	mov	r6,r17
 4002080:	800f883a 	mov	r7,r16
 4002084:	01400284 	movi	r5,10
 4002088:	4001fa40 	call	4001fa4 <std>
 400208c:	81000317 	ldw	r4,12(r16)
 4002090:	800f883a 	mov	r7,r16
 4002094:	01400484 	movi	r5,18
 4002098:	01800084 	movi	r6,2
 400209c:	dfc00217 	ldw	ra,8(sp)
 40020a0:	dc400117 	ldw	r17,4(sp)
 40020a4:	dc000017 	ldw	r16,0(sp)
 40020a8:	dec00304 	addi	sp,sp,12
 40020ac:	4001fa41 	jmpi	4001fa4 <std>

040020b0 <__fp_lock>:
 40020b0:	0005883a 	mov	r2,zero
 40020b4:	f800283a 	ret

040020b8 <__fp_unlock>:
 40020b8:	0005883a 	mov	r2,zero
 40020bc:	f800283a 	ret

040020c0 <__fp_unlock_all>:
 40020c0:	00810034 	movhi	r2,1024
 40020c4:	109e9704 	addi	r2,r2,31324
 40020c8:	11000017 	ldw	r4,0(r2)
 40020cc:	01410034 	movhi	r5,1024
 40020d0:	29482e04 	addi	r5,r5,8376
 40020d4:	400276c1 	jmpi	400276c <_fwalk>

040020d8 <__fp_lock_all>:
 40020d8:	00810034 	movhi	r2,1024
 40020dc:	109e9704 	addi	r2,r2,31324
 40020e0:	11000017 	ldw	r4,0(r2)
 40020e4:	01410034 	movhi	r5,1024
 40020e8:	29482c04 	addi	r5,r5,8368
 40020ec:	400276c1 	jmpi	400276c <_fwalk>

040020f0 <_cleanup_r>:
 40020f0:	01410034 	movhi	r5,1024
 40020f4:	294b6504 	addi	r5,r5,11668
 40020f8:	400276c1 	jmpi	400276c <_fwalk>

040020fc <_cleanup>:
 40020fc:	00810034 	movhi	r2,1024
 4002100:	109e9804 	addi	r2,r2,31328
 4002104:	11000017 	ldw	r4,0(r2)
 4002108:	40020f01 	jmpi	40020f0 <_cleanup_r>

0400210c <__sfmoreglue>:
 400210c:	defffc04 	addi	sp,sp,-16
 4002110:	dc400115 	stw	r17,4(sp)
 4002114:	2c401724 	muli	r17,r5,92
 4002118:	dc800215 	stw	r18,8(sp)
 400211c:	2825883a 	mov	r18,r5
 4002120:	89400304 	addi	r5,r17,12
 4002124:	dc000015 	stw	r16,0(sp)
 4002128:	dfc00315 	stw	ra,12(sp)
 400212c:	4000cd00 	call	4000cd0 <_malloc_r>
 4002130:	0021883a 	mov	r16,zero
 4002134:	880d883a 	mov	r6,r17
 4002138:	000b883a 	mov	r5,zero
 400213c:	10000626 	beq	r2,zero,4002158 <__sfmoreglue+0x4c>
 4002140:	11000304 	addi	r4,r2,12
 4002144:	14800115 	stw	r18,4(r2)
 4002148:	10000015 	stw	zero,0(r2)
 400214c:	11000215 	stw	r4,8(r2)
 4002150:	1021883a 	mov	r16,r2
 4002154:	40029b80 	call	40029b8 <memset>
 4002158:	8005883a 	mov	r2,r16
 400215c:	dfc00317 	ldw	ra,12(sp)
 4002160:	dc800217 	ldw	r18,8(sp)
 4002164:	dc400117 	ldw	r17,4(sp)
 4002168:	dc000017 	ldw	r16,0(sp)
 400216c:	dec00404 	addi	sp,sp,16
 4002170:	f800283a 	ret

04002174 <__sfp>:
 4002174:	defffd04 	addi	sp,sp,-12
 4002178:	00810034 	movhi	r2,1024
 400217c:	109e9804 	addi	r2,r2,31328
 4002180:	dc000015 	stw	r16,0(sp)
 4002184:	14000017 	ldw	r16,0(r2)
 4002188:	dc400115 	stw	r17,4(sp)
 400218c:	dfc00215 	stw	ra,8(sp)
 4002190:	80800e17 	ldw	r2,56(r16)
 4002194:	2023883a 	mov	r17,r4
 4002198:	10002626 	beq	r2,zero,4002234 <__sfp+0xc0>
 400219c:	8400b804 	addi	r16,r16,736
 40021a0:	80800117 	ldw	r2,4(r16)
 40021a4:	81000217 	ldw	r4,8(r16)
 40021a8:	10ffffc4 	addi	r3,r2,-1
 40021ac:	18000916 	blt	r3,zero,40021d4 <__sfp+0x60>
 40021b0:	2080030f 	ldh	r2,12(r4)
 40021b4:	10000b26 	beq	r2,zero,40021e4 <__sfp+0x70>
 40021b8:	017fffc4 	movi	r5,-1
 40021bc:	00000206 	br	40021c8 <__sfp+0x54>
 40021c0:	2080030f 	ldh	r2,12(r4)
 40021c4:	10000726 	beq	r2,zero,40021e4 <__sfp+0x70>
 40021c8:	18ffffc4 	addi	r3,r3,-1
 40021cc:	21001704 	addi	r4,r4,92
 40021d0:	197ffb1e 	bne	r3,r5,40021c0 <__sfp+0x4c>
 40021d4:	80800017 	ldw	r2,0(r16)
 40021d8:	10001926 	beq	r2,zero,4002240 <__sfp+0xcc>
 40021dc:	1021883a 	mov	r16,r2
 40021e0:	003fef06 	br	40021a0 <__sfp+0x2c>
 40021e4:	00bfffc4 	movi	r2,-1
 40021e8:	00c00044 	movi	r3,1
 40021ec:	2080038d 	sth	r2,14(r4)
 40021f0:	20c0030d 	sth	r3,12(r4)
 40021f4:	20000015 	stw	zero,0(r4)
 40021f8:	20000215 	stw	zero,8(r4)
 40021fc:	20000115 	stw	zero,4(r4)
 4002200:	20000415 	stw	zero,16(r4)
 4002204:	20000515 	stw	zero,20(r4)
 4002208:	20000615 	stw	zero,24(r4)
 400220c:	20000c15 	stw	zero,48(r4)
 4002210:	20000d15 	stw	zero,52(r4)
 4002214:	20001115 	stw	zero,68(r4)
 4002218:	20001215 	stw	zero,72(r4)
 400221c:	2005883a 	mov	r2,r4
 4002220:	dfc00217 	ldw	ra,8(sp)
 4002224:	dc400117 	ldw	r17,4(sp)
 4002228:	dc000017 	ldw	r16,0(sp)
 400222c:	dec00304 	addi	sp,sp,12
 4002230:	f800283a 	ret
 4002234:	8009883a 	mov	r4,r16
 4002238:	400200c0 	call	400200c <__sinit>
 400223c:	003fd706 	br	400219c <__sfp+0x28>
 4002240:	8809883a 	mov	r4,r17
 4002244:	01400104 	movi	r5,4
 4002248:	400210c0 	call	400210c <__sfmoreglue>
 400224c:	80800015 	stw	r2,0(r16)
 4002250:	103fe21e 	bne	r2,zero,40021dc <__sfp+0x68>
 4002254:	00800304 	movi	r2,12
 4002258:	0009883a 	mov	r4,zero
 400225c:	88800015 	stw	r2,0(r17)
 4002260:	003fee06 	br	400221c <__sfp+0xa8>

04002264 <_malloc_trim_r>:
 4002264:	defffb04 	addi	sp,sp,-20
 4002268:	dcc00315 	stw	r19,12(sp)
 400226c:	04c10034 	movhi	r19,1024
 4002270:	9cd91304 	addi	r19,r19,25676
 4002274:	dc800215 	stw	r18,8(sp)
 4002278:	dc400115 	stw	r17,4(sp)
 400227c:	dc000015 	stw	r16,0(sp)
 4002280:	2823883a 	mov	r17,r5
 4002284:	2025883a 	mov	r18,r4
 4002288:	dfc00415 	stw	ra,16(sp)
 400228c:	40036000 	call	4003600 <__malloc_lock>
 4002290:	98800217 	ldw	r2,8(r19)
 4002294:	9009883a 	mov	r4,r18
 4002298:	000b883a 	mov	r5,zero
 400229c:	10c00117 	ldw	r3,4(r2)
 40022a0:	00bfff04 	movi	r2,-4
 40022a4:	18a0703a 	and	r16,r3,r2
 40022a8:	8463c83a 	sub	r17,r16,r17
 40022ac:	8c43fbc4 	addi	r17,r17,4079
 40022b0:	8822d33a 	srli	r17,r17,12
 40022b4:	0083ffc4 	movi	r2,4095
 40022b8:	8c7fffc4 	addi	r17,r17,-1
 40022bc:	8822933a 	slli	r17,r17,12
 40022c0:	1440060e 	bge	r2,r17,40022dc <_malloc_trim_r+0x78>
 40022c4:	4001bc80 	call	4001bc8 <_sbrk_r>
 40022c8:	98c00217 	ldw	r3,8(r19)
 40022cc:	9009883a 	mov	r4,r18
 40022d0:	044bc83a 	sub	r5,zero,r17
 40022d4:	80c7883a 	add	r3,r16,r3
 40022d8:	10c00926 	beq	r2,r3,4002300 <_malloc_trim_r+0x9c>
 40022dc:	40036200 	call	4003620 <__malloc_unlock>
 40022e0:	0005883a 	mov	r2,zero
 40022e4:	dfc00417 	ldw	ra,16(sp)
 40022e8:	dcc00317 	ldw	r19,12(sp)
 40022ec:	dc800217 	ldw	r18,8(sp)
 40022f0:	dc400117 	ldw	r17,4(sp)
 40022f4:	dc000017 	ldw	r16,0(sp)
 40022f8:	dec00504 	addi	sp,sp,20
 40022fc:	f800283a 	ret
 4002300:	9009883a 	mov	r4,r18
 4002304:	4001bc80 	call	4001bc8 <_sbrk_r>
 4002308:	844dc83a 	sub	r6,r16,r17
 400230c:	00ffffc4 	movi	r3,-1
 4002310:	9009883a 	mov	r4,r18
 4002314:	000b883a 	mov	r5,zero
 4002318:	01c10074 	movhi	r7,1025
 400231c:	39e55104 	addi	r7,r7,-27324
 4002320:	31800054 	ori	r6,r6,1
 4002324:	10c00926 	beq	r2,r3,400234c <_malloc_trim_r+0xe8>
 4002328:	38800017 	ldw	r2,0(r7)
 400232c:	98c00217 	ldw	r3,8(r19)
 4002330:	9009883a 	mov	r4,r18
 4002334:	1445c83a 	sub	r2,r2,r17
 4002338:	38800015 	stw	r2,0(r7)
 400233c:	19800115 	stw	r6,4(r3)
 4002340:	40036200 	call	4003620 <__malloc_unlock>
 4002344:	00800044 	movi	r2,1
 4002348:	003fe606 	br	40022e4 <_malloc_trim_r+0x80>
 400234c:	4001bc80 	call	4001bc8 <_sbrk_r>
 4002350:	99800217 	ldw	r6,8(r19)
 4002354:	100f883a 	mov	r7,r2
 4002358:	9009883a 	mov	r4,r18
 400235c:	1187c83a 	sub	r3,r2,r6
 4002360:	008003c4 	movi	r2,15
 4002364:	19400054 	ori	r5,r3,1
 4002368:	10ffdc0e 	bge	r2,r3,40022dc <_malloc_trim_r+0x78>
 400236c:	00810034 	movhi	r2,1024
 4002370:	109e9a04 	addi	r2,r2,31336
 4002374:	10c00017 	ldw	r3,0(r2)
 4002378:	00810074 	movhi	r2,1025
 400237c:	10a55104 	addi	r2,r2,-27324
 4002380:	31400115 	stw	r5,4(r6)
 4002384:	38c7c83a 	sub	r3,r7,r3
 4002388:	10c00015 	stw	r3,0(r2)
 400238c:	003fd306 	br	40022dc <_malloc_trim_r+0x78>

04002390 <_free_r>:
 4002390:	defffd04 	addi	sp,sp,-12
 4002394:	dc400115 	stw	r17,4(sp)
 4002398:	dc000015 	stw	r16,0(sp)
 400239c:	dfc00215 	stw	ra,8(sp)
 40023a0:	2821883a 	mov	r16,r5
 40023a4:	2023883a 	mov	r17,r4
 40023a8:	28005a26 	beq	r5,zero,4002514 <_free_r+0x184>
 40023ac:	40036000 	call	4003600 <__malloc_lock>
 40023b0:	823ffe04 	addi	r8,r16,-8
 40023b4:	41400117 	ldw	r5,4(r8)
 40023b8:	00bfff84 	movi	r2,-2
 40023bc:	02810034 	movhi	r10,1024
 40023c0:	52991304 	addi	r10,r10,25676
 40023c4:	288e703a 	and	r7,r5,r2
 40023c8:	41cd883a 	add	r6,r8,r7
 40023cc:	30c00117 	ldw	r3,4(r6)
 40023d0:	51000217 	ldw	r4,8(r10)
 40023d4:	00bfff04 	movi	r2,-4
 40023d8:	1892703a 	and	r9,r3,r2
 40023dc:	5017883a 	mov	r11,r10
 40023e0:	31006726 	beq	r6,r4,4002580 <_free_r+0x1f0>
 40023e4:	2880004c 	andi	r2,r5,1
 40023e8:	1005003a 	cmpeq	r2,r2,zero
 40023ec:	32400115 	stw	r9,4(r6)
 40023f0:	10001a1e 	bne	r2,zero,400245c <_free_r+0xcc>
 40023f4:	000b883a 	mov	r5,zero
 40023f8:	3247883a 	add	r3,r6,r9
 40023fc:	18800117 	ldw	r2,4(r3)
 4002400:	1080004c 	andi	r2,r2,1
 4002404:	1000231e 	bne	r2,zero,4002494 <_free_r+0x104>
 4002408:	280ac03a 	cmpne	r5,r5,zero
 400240c:	3a4f883a 	add	r7,r7,r9
 4002410:	2800451e 	bne	r5,zero,4002528 <_free_r+0x198>
 4002414:	31000217 	ldw	r4,8(r6)
 4002418:	00810034 	movhi	r2,1024
 400241c:	10991504 	addi	r2,r2,25684
 4002420:	20807b26 	beq	r4,r2,4002610 <_free_r+0x280>
 4002424:	30800317 	ldw	r2,12(r6)
 4002428:	3a07883a 	add	r3,r7,r8
 400242c:	19c00015 	stw	r7,0(r3)
 4002430:	11000215 	stw	r4,8(r2)
 4002434:	20800315 	stw	r2,12(r4)
 4002438:	38800054 	ori	r2,r7,1
 400243c:	40800115 	stw	r2,4(r8)
 4002440:	28001a26 	beq	r5,zero,40024ac <_free_r+0x11c>
 4002444:	8809883a 	mov	r4,r17
 4002448:	dfc00217 	ldw	ra,8(sp)
 400244c:	dc400117 	ldw	r17,4(sp)
 4002450:	dc000017 	ldw	r16,0(sp)
 4002454:	dec00304 	addi	sp,sp,12
 4002458:	40036201 	jmpi	4003620 <__malloc_unlock>
 400245c:	80bffe17 	ldw	r2,-8(r16)
 4002460:	50c00204 	addi	r3,r10,8
 4002464:	4091c83a 	sub	r8,r8,r2
 4002468:	41000217 	ldw	r4,8(r8)
 400246c:	388f883a 	add	r7,r7,r2
 4002470:	20c06126 	beq	r4,r3,40025f8 <_free_r+0x268>
 4002474:	40800317 	ldw	r2,12(r8)
 4002478:	3247883a 	add	r3,r6,r9
 400247c:	000b883a 	mov	r5,zero
 4002480:	11000215 	stw	r4,8(r2)
 4002484:	20800315 	stw	r2,12(r4)
 4002488:	18800117 	ldw	r2,4(r3)
 400248c:	1080004c 	andi	r2,r2,1
 4002490:	103fdd26 	beq	r2,zero,4002408 <_free_r+0x78>
 4002494:	38800054 	ori	r2,r7,1
 4002498:	3a07883a 	add	r3,r7,r8
 400249c:	280ac03a 	cmpne	r5,r5,zero
 40024a0:	40800115 	stw	r2,4(r8)
 40024a4:	19c00015 	stw	r7,0(r3)
 40024a8:	283fe61e 	bne	r5,zero,4002444 <_free_r+0xb4>
 40024ac:	00807fc4 	movi	r2,511
 40024b0:	11c01f2e 	bgeu	r2,r7,4002530 <_free_r+0x1a0>
 40024b4:	3806d27a 	srli	r3,r7,9
 40024b8:	1800481e 	bne	r3,zero,40025dc <_free_r+0x24c>
 40024bc:	3804d0fa 	srli	r2,r7,3
 40024c0:	100690fa 	slli	r3,r2,3
 40024c4:	1acd883a 	add	r6,r3,r11
 40024c8:	31400217 	ldw	r5,8(r6)
 40024cc:	31405926 	beq	r6,r5,4002634 <_free_r+0x2a4>
 40024d0:	28800117 	ldw	r2,4(r5)
 40024d4:	00ffff04 	movi	r3,-4
 40024d8:	10c4703a 	and	r2,r2,r3
 40024dc:	3880022e 	bgeu	r7,r2,40024e8 <_free_r+0x158>
 40024e0:	29400217 	ldw	r5,8(r5)
 40024e4:	317ffa1e 	bne	r6,r5,40024d0 <_free_r+0x140>
 40024e8:	29800317 	ldw	r6,12(r5)
 40024ec:	41800315 	stw	r6,12(r8)
 40024f0:	41400215 	stw	r5,8(r8)
 40024f4:	8809883a 	mov	r4,r17
 40024f8:	2a000315 	stw	r8,12(r5)
 40024fc:	32000215 	stw	r8,8(r6)
 4002500:	dfc00217 	ldw	ra,8(sp)
 4002504:	dc400117 	ldw	r17,4(sp)
 4002508:	dc000017 	ldw	r16,0(sp)
 400250c:	dec00304 	addi	sp,sp,12
 4002510:	40036201 	jmpi	4003620 <__malloc_unlock>
 4002514:	dfc00217 	ldw	ra,8(sp)
 4002518:	dc400117 	ldw	r17,4(sp)
 400251c:	dc000017 	ldw	r16,0(sp)
 4002520:	dec00304 	addi	sp,sp,12
 4002524:	f800283a 	ret
 4002528:	31000217 	ldw	r4,8(r6)
 400252c:	003fbd06 	br	4002424 <_free_r+0x94>
 4002530:	3806d0fa 	srli	r3,r7,3
 4002534:	00800044 	movi	r2,1
 4002538:	51400117 	ldw	r5,4(r10)
 400253c:	180890fa 	slli	r4,r3,3
 4002540:	1807d0ba 	srai	r3,r3,2
 4002544:	22c9883a 	add	r4,r4,r11
 4002548:	21800217 	ldw	r6,8(r4)
 400254c:	10c4983a 	sll	r2,r2,r3
 4002550:	41000315 	stw	r4,12(r8)
 4002554:	41800215 	stw	r6,8(r8)
 4002558:	288ab03a 	or	r5,r5,r2
 400255c:	22000215 	stw	r8,8(r4)
 4002560:	8809883a 	mov	r4,r17
 4002564:	51400115 	stw	r5,4(r10)
 4002568:	32000315 	stw	r8,12(r6)
 400256c:	dfc00217 	ldw	ra,8(sp)
 4002570:	dc400117 	ldw	r17,4(sp)
 4002574:	dc000017 	ldw	r16,0(sp)
 4002578:	dec00304 	addi	sp,sp,12
 400257c:	40036201 	jmpi	4003620 <__malloc_unlock>
 4002580:	2880004c 	andi	r2,r5,1
 4002584:	3a4d883a 	add	r6,r7,r9
 4002588:	1000071e 	bne	r2,zero,40025a8 <_free_r+0x218>
 400258c:	80bffe17 	ldw	r2,-8(r16)
 4002590:	4091c83a 	sub	r8,r8,r2
 4002594:	41000317 	ldw	r4,12(r8)
 4002598:	40c00217 	ldw	r3,8(r8)
 400259c:	308d883a 	add	r6,r6,r2
 40025a0:	20c00215 	stw	r3,8(r4)
 40025a4:	19000315 	stw	r4,12(r3)
 40025a8:	00810034 	movhi	r2,1024
 40025ac:	109e9904 	addi	r2,r2,31332
 40025b0:	11000017 	ldw	r4,0(r2)
 40025b4:	30c00054 	ori	r3,r6,1
 40025b8:	52000215 	stw	r8,8(r10)
 40025bc:	40c00115 	stw	r3,4(r8)
 40025c0:	313fa036 	bltu	r6,r4,4002444 <_free_r+0xb4>
 40025c4:	00810074 	movhi	r2,1025
 40025c8:	10a54704 	addi	r2,r2,-27364
 40025cc:	11400017 	ldw	r5,0(r2)
 40025d0:	8809883a 	mov	r4,r17
 40025d4:	40022640 	call	4002264 <_malloc_trim_r>
 40025d8:	003f9a06 	br	4002444 <_free_r+0xb4>
 40025dc:	00800104 	movi	r2,4
 40025e0:	10c0072e 	bgeu	r2,r3,4002600 <_free_r+0x270>
 40025e4:	00800504 	movi	r2,20
 40025e8:	10c01936 	bltu	r2,r3,4002650 <_free_r+0x2c0>
 40025ec:	188016c4 	addi	r2,r3,91
 40025f0:	100690fa 	slli	r3,r2,3
 40025f4:	003fb306 	br	40024c4 <_free_r+0x134>
 40025f8:	01400044 	movi	r5,1
 40025fc:	003f7e06 	br	40023f8 <_free_r+0x68>
 4002600:	3804d1ba 	srli	r2,r7,6
 4002604:	10800e04 	addi	r2,r2,56
 4002608:	100690fa 	slli	r3,r2,3
 400260c:	003fad06 	br	40024c4 <_free_r+0x134>
 4002610:	22000315 	stw	r8,12(r4)
 4002614:	22000215 	stw	r8,8(r4)
 4002618:	3a05883a 	add	r2,r7,r8
 400261c:	38c00054 	ori	r3,r7,1
 4002620:	11c00015 	stw	r7,0(r2)
 4002624:	41000215 	stw	r4,8(r8)
 4002628:	40c00115 	stw	r3,4(r8)
 400262c:	41000315 	stw	r4,12(r8)
 4002630:	003f8406 	br	4002444 <_free_r+0xb4>
 4002634:	1005d0ba 	srai	r2,r2,2
 4002638:	00c00044 	movi	r3,1
 400263c:	51000117 	ldw	r4,4(r10)
 4002640:	1886983a 	sll	r3,r3,r2
 4002644:	20c8b03a 	or	r4,r4,r3
 4002648:	51000115 	stw	r4,4(r10)
 400264c:	003fa706 	br	40024ec <_free_r+0x15c>
 4002650:	00801504 	movi	r2,84
 4002654:	10c00436 	bltu	r2,r3,4002668 <_free_r+0x2d8>
 4002658:	3804d33a 	srli	r2,r7,12
 400265c:	10801b84 	addi	r2,r2,110
 4002660:	100690fa 	slli	r3,r2,3
 4002664:	003f9706 	br	40024c4 <_free_r+0x134>
 4002668:	00805504 	movi	r2,340
 400266c:	10c00436 	bltu	r2,r3,4002680 <_free_r+0x2f0>
 4002670:	3804d3fa 	srli	r2,r7,15
 4002674:	10801dc4 	addi	r2,r2,119
 4002678:	100690fa 	slli	r3,r2,3
 400267c:	003f9106 	br	40024c4 <_free_r+0x134>
 4002680:	00815504 	movi	r2,1364
 4002684:	10c0032e 	bgeu	r2,r3,4002694 <_free_r+0x304>
 4002688:	00801f84 	movi	r2,126
 400268c:	00c0fc04 	movi	r3,1008
 4002690:	003f8c06 	br	40024c4 <_free_r+0x134>
 4002694:	3804d4ba 	srli	r2,r7,18
 4002698:	10801f04 	addi	r2,r2,124
 400269c:	100690fa 	slli	r3,r2,3
 40026a0:	003f8806 	br	40024c4 <_free_r+0x134>

040026a4 <_fwalk_reent>:
 40026a4:	defff704 	addi	sp,sp,-36
 40026a8:	dcc00315 	stw	r19,12(sp)
 40026ac:	24c0b804 	addi	r19,r4,736
 40026b0:	dd800615 	stw	r22,24(sp)
 40026b4:	dd400515 	stw	r21,20(sp)
 40026b8:	dfc00815 	stw	ra,32(sp)
 40026bc:	ddc00715 	stw	r23,28(sp)
 40026c0:	dd000415 	stw	r20,16(sp)
 40026c4:	dc800215 	stw	r18,8(sp)
 40026c8:	dc400115 	stw	r17,4(sp)
 40026cc:	dc000015 	stw	r16,0(sp)
 40026d0:	202b883a 	mov	r21,r4
 40026d4:	282d883a 	mov	r22,r5
 40026d8:	4001ffc0 	call	4001ffc <__sfp_lock_acquire>
 40026dc:	98002126 	beq	r19,zero,4002764 <_fwalk_reent+0xc0>
 40026e0:	002f883a 	mov	r23,zero
 40026e4:	9c800117 	ldw	r18,4(r19)
 40026e8:	9c000217 	ldw	r16,8(r19)
 40026ec:	90bfffc4 	addi	r2,r18,-1
 40026f0:	10000d16 	blt	r2,zero,4002728 <_fwalk_reent+0x84>
 40026f4:	0023883a 	mov	r17,zero
 40026f8:	053fffc4 	movi	r20,-1
 40026fc:	8080030f 	ldh	r2,12(r16)
 4002700:	8c400044 	addi	r17,r17,1
 4002704:	10000626 	beq	r2,zero,4002720 <_fwalk_reent+0x7c>
 4002708:	8080038f 	ldh	r2,14(r16)
 400270c:	800b883a 	mov	r5,r16
 4002710:	a809883a 	mov	r4,r21
 4002714:	15000226 	beq	r2,r20,4002720 <_fwalk_reent+0x7c>
 4002718:	b03ee83a 	callr	r22
 400271c:	b8aeb03a 	or	r23,r23,r2
 4002720:	84001704 	addi	r16,r16,92
 4002724:	947ff51e 	bne	r18,r17,40026fc <_fwalk_reent+0x58>
 4002728:	9cc00017 	ldw	r19,0(r19)
 400272c:	983fed1e 	bne	r19,zero,40026e4 <_fwalk_reent+0x40>
 4002730:	40020000 	call	4002000 <__sfp_lock_release>
 4002734:	b805883a 	mov	r2,r23
 4002738:	dfc00817 	ldw	ra,32(sp)
 400273c:	ddc00717 	ldw	r23,28(sp)
 4002740:	dd800617 	ldw	r22,24(sp)
 4002744:	dd400517 	ldw	r21,20(sp)
 4002748:	dd000417 	ldw	r20,16(sp)
 400274c:	dcc00317 	ldw	r19,12(sp)
 4002750:	dc800217 	ldw	r18,8(sp)
 4002754:	dc400117 	ldw	r17,4(sp)
 4002758:	dc000017 	ldw	r16,0(sp)
 400275c:	dec00904 	addi	sp,sp,36
 4002760:	f800283a 	ret
 4002764:	002f883a 	mov	r23,zero
 4002768:	003ff106 	br	4002730 <_fwalk_reent+0x8c>

0400276c <_fwalk>:
 400276c:	defff804 	addi	sp,sp,-32
 4002770:	dcc00315 	stw	r19,12(sp)
 4002774:	24c0b804 	addi	r19,r4,736
 4002778:	dd400515 	stw	r21,20(sp)
 400277c:	dfc00715 	stw	ra,28(sp)
 4002780:	dd800615 	stw	r22,24(sp)
 4002784:	dd000415 	stw	r20,16(sp)
 4002788:	dc800215 	stw	r18,8(sp)
 400278c:	dc400115 	stw	r17,4(sp)
 4002790:	dc000015 	stw	r16,0(sp)
 4002794:	282b883a 	mov	r21,r5
 4002798:	4001ffc0 	call	4001ffc <__sfp_lock_acquire>
 400279c:	98001f26 	beq	r19,zero,400281c <_fwalk+0xb0>
 40027a0:	002d883a 	mov	r22,zero
 40027a4:	9c800117 	ldw	r18,4(r19)
 40027a8:	9c000217 	ldw	r16,8(r19)
 40027ac:	90bfffc4 	addi	r2,r18,-1
 40027b0:	10000c16 	blt	r2,zero,40027e4 <_fwalk+0x78>
 40027b4:	0023883a 	mov	r17,zero
 40027b8:	053fffc4 	movi	r20,-1
 40027bc:	8080030f 	ldh	r2,12(r16)
 40027c0:	8c400044 	addi	r17,r17,1
 40027c4:	10000526 	beq	r2,zero,40027dc <_fwalk+0x70>
 40027c8:	8080038f 	ldh	r2,14(r16)
 40027cc:	8009883a 	mov	r4,r16
 40027d0:	15000226 	beq	r2,r20,40027dc <_fwalk+0x70>
 40027d4:	a83ee83a 	callr	r21
 40027d8:	b0acb03a 	or	r22,r22,r2
 40027dc:	84001704 	addi	r16,r16,92
 40027e0:	947ff61e 	bne	r18,r17,40027bc <_fwalk+0x50>
 40027e4:	9cc00017 	ldw	r19,0(r19)
 40027e8:	983fee1e 	bne	r19,zero,40027a4 <_fwalk+0x38>
 40027ec:	40020000 	call	4002000 <__sfp_lock_release>
 40027f0:	b005883a 	mov	r2,r22
 40027f4:	dfc00717 	ldw	ra,28(sp)
 40027f8:	dd800617 	ldw	r22,24(sp)
 40027fc:	dd400517 	ldw	r21,20(sp)
 4002800:	dd000417 	ldw	r20,16(sp)
 4002804:	dcc00317 	ldw	r19,12(sp)
 4002808:	dc800217 	ldw	r18,8(sp)
 400280c:	dc400117 	ldw	r17,4(sp)
 4002810:	dc000017 	ldw	r16,0(sp)
 4002814:	dec00804 	addi	sp,sp,32
 4002818:	f800283a 	ret
 400281c:	002d883a 	mov	r22,zero
 4002820:	003ff206 	br	40027ec <_fwalk+0x80>

04002824 <__smakebuf_r>:
 4002824:	2880030b 	ldhu	r2,12(r5)
 4002828:	deffed04 	addi	sp,sp,-76
 400282c:	dc401015 	stw	r17,64(sp)
 4002830:	1080008c 	andi	r2,r2,2
 4002834:	dc000f15 	stw	r16,60(sp)
 4002838:	dfc01215 	stw	ra,72(sp)
 400283c:	dc801115 	stw	r18,68(sp)
 4002840:	2821883a 	mov	r16,r5
 4002844:	2023883a 	mov	r17,r4
 4002848:	10000b26 	beq	r2,zero,4002878 <__smakebuf_r+0x54>
 400284c:	28c010c4 	addi	r3,r5,67
 4002850:	00800044 	movi	r2,1
 4002854:	28800515 	stw	r2,20(r5)
 4002858:	28c00415 	stw	r3,16(r5)
 400285c:	28c00015 	stw	r3,0(r5)
 4002860:	dfc01217 	ldw	ra,72(sp)
 4002864:	dc801117 	ldw	r18,68(sp)
 4002868:	dc401017 	ldw	r17,64(sp)
 400286c:	dc000f17 	ldw	r16,60(sp)
 4002870:	dec01304 	addi	sp,sp,76
 4002874:	f800283a 	ret
 4002878:	2940038f 	ldh	r5,14(r5)
 400287c:	28002116 	blt	r5,zero,4002904 <__smakebuf_r+0xe0>
 4002880:	d80d883a 	mov	r6,sp
 4002884:	4002da80 	call	4002da8 <_fstat_r>
 4002888:	10001e16 	blt	r2,zero,4002904 <__smakebuf_r+0xe0>
 400288c:	d8800117 	ldw	r2,4(sp)
 4002890:	00e00014 	movui	r3,32768
 4002894:	113c000c 	andi	r4,r2,61440
 4002898:	20c03126 	beq	r4,r3,4002960 <__smakebuf_r+0x13c>
 400289c:	8080030b 	ldhu	r2,12(r16)
 40028a0:	00c80004 	movi	r3,8192
 40028a4:	10820014 	ori	r2,r2,2048
 40028a8:	8080030d 	sth	r2,12(r16)
 40028ac:	20c01e26 	beq	r4,r3,4002928 <__smakebuf_r+0x104>
 40028b0:	04810004 	movi	r18,1024
 40028b4:	8809883a 	mov	r4,r17
 40028b8:	900b883a 	mov	r5,r18
 40028bc:	4000cd00 	call	4000cd0 <_malloc_r>
 40028c0:	1009883a 	mov	r4,r2
 40028c4:	10003126 	beq	r2,zero,400298c <__smakebuf_r+0x168>
 40028c8:	80c0030b 	ldhu	r3,12(r16)
 40028cc:	00810034 	movhi	r2,1024
 40028d0:	10883c04 	addi	r2,r2,8432
 40028d4:	88800f15 	stw	r2,60(r17)
 40028d8:	18c02014 	ori	r3,r3,128
 40028dc:	84800515 	stw	r18,20(r16)
 40028e0:	80c0030d 	sth	r3,12(r16)
 40028e4:	81000415 	stw	r4,16(r16)
 40028e8:	81000015 	stw	r4,0(r16)
 40028ec:	dfc01217 	ldw	ra,72(sp)
 40028f0:	dc801117 	ldw	r18,68(sp)
 40028f4:	dc401017 	ldw	r17,64(sp)
 40028f8:	dc000f17 	ldw	r16,60(sp)
 40028fc:	dec01304 	addi	sp,sp,76
 4002900:	f800283a 	ret
 4002904:	80c0030b 	ldhu	r3,12(r16)
 4002908:	1880200c 	andi	r2,r3,128
 400290c:	10000426 	beq	r2,zero,4002920 <__smakebuf_r+0xfc>
 4002910:	04801004 	movi	r18,64
 4002914:	18820014 	ori	r2,r3,2048
 4002918:	8080030d 	sth	r2,12(r16)
 400291c:	003fe506 	br	40028b4 <__smakebuf_r+0x90>
 4002920:	04810004 	movi	r18,1024
 4002924:	003ffb06 	br	4002914 <__smakebuf_r+0xf0>
 4002928:	8140038f 	ldh	r5,14(r16)
 400292c:	8809883a 	mov	r4,r17
 4002930:	4002e1c0 	call	4002e1c <_isatty_r>
 4002934:	103fde26 	beq	r2,zero,40028b0 <__smakebuf_r+0x8c>
 4002938:	8080030b 	ldhu	r2,12(r16)
 400293c:	80c010c4 	addi	r3,r16,67
 4002940:	04810004 	movi	r18,1024
 4002944:	10800054 	ori	r2,r2,1
 4002948:	8080030d 	sth	r2,12(r16)
 400294c:	00800044 	movi	r2,1
 4002950:	80c00415 	stw	r3,16(r16)
 4002954:	80800515 	stw	r2,20(r16)
 4002958:	80c00015 	stw	r3,0(r16)
 400295c:	003fd506 	br	40028b4 <__smakebuf_r+0x90>
 4002960:	80c00a17 	ldw	r3,40(r16)
 4002964:	00810034 	movhi	r2,1024
 4002968:	108a9604 	addi	r2,r2,10840
 400296c:	18bfcb1e 	bne	r3,r2,400289c <__smakebuf_r+0x78>
 4002970:	8080030b 	ldhu	r2,12(r16)
 4002974:	00c10004 	movi	r3,1024
 4002978:	1825883a 	mov	r18,r3
 400297c:	10c4b03a 	or	r2,r2,r3
 4002980:	8080030d 	sth	r2,12(r16)
 4002984:	80c01315 	stw	r3,76(r16)
 4002988:	003fca06 	br	40028b4 <__smakebuf_r+0x90>
 400298c:	8100030b 	ldhu	r4,12(r16)
 4002990:	2080800c 	andi	r2,r4,512
 4002994:	103fb21e 	bne	r2,zero,4002860 <__smakebuf_r+0x3c>
 4002998:	80c010c4 	addi	r3,r16,67
 400299c:	21000094 	ori	r4,r4,2
 40029a0:	00800044 	movi	r2,1
 40029a4:	80800515 	stw	r2,20(r16)
 40029a8:	8100030d 	sth	r4,12(r16)
 40029ac:	80c00415 	stw	r3,16(r16)
 40029b0:	80c00015 	stw	r3,0(r16)
 40029b4:	003faa06 	br	4002860 <__smakebuf_r+0x3c>

040029b8 <memset>:
 40029b8:	008000c4 	movi	r2,3
 40029bc:	29403fcc 	andi	r5,r5,255
 40029c0:	2007883a 	mov	r3,r4
 40029c4:	1180022e 	bgeu	r2,r6,40029d0 <memset+0x18>
 40029c8:	2084703a 	and	r2,r4,r2
 40029cc:	10000826 	beq	r2,zero,40029f0 <memset+0x38>
 40029d0:	30000526 	beq	r6,zero,40029e8 <memset+0x30>
 40029d4:	2805883a 	mov	r2,r5
 40029d8:	30cd883a 	add	r6,r6,r3
 40029dc:	18800005 	stb	r2,0(r3)
 40029e0:	18c00044 	addi	r3,r3,1
 40029e4:	19bffd1e 	bne	r3,r6,40029dc <memset+0x24>
 40029e8:	2005883a 	mov	r2,r4
 40029ec:	f800283a 	ret
 40029f0:	2804923a 	slli	r2,r5,8
 40029f4:	020003c4 	movi	r8,15
 40029f8:	200f883a 	mov	r7,r4
 40029fc:	2884b03a 	or	r2,r5,r2
 4002a00:	1006943a 	slli	r3,r2,16
 4002a04:	10c6b03a 	or	r3,r2,r3
 4002a08:	41800a2e 	bgeu	r8,r6,4002a34 <memset+0x7c>
 4002a0c:	4005883a 	mov	r2,r8
 4002a10:	31bffc04 	addi	r6,r6,-16
 4002a14:	38c00015 	stw	r3,0(r7)
 4002a18:	38c00115 	stw	r3,4(r7)
 4002a1c:	38c00215 	stw	r3,8(r7)
 4002a20:	38c00315 	stw	r3,12(r7)
 4002a24:	39c00404 	addi	r7,r7,16
 4002a28:	11bff936 	bltu	r2,r6,4002a10 <memset+0x58>
 4002a2c:	008000c4 	movi	r2,3
 4002a30:	1180052e 	bgeu	r2,r6,4002a48 <memset+0x90>
 4002a34:	31bfff04 	addi	r6,r6,-4
 4002a38:	008000c4 	movi	r2,3
 4002a3c:	38c00015 	stw	r3,0(r7)
 4002a40:	39c00104 	addi	r7,r7,4
 4002a44:	11bffb36 	bltu	r2,r6,4002a34 <memset+0x7c>
 4002a48:	3807883a 	mov	r3,r7
 4002a4c:	003fe006 	br	40029d0 <memset+0x18>

04002a50 <__sclose>:
 4002a50:	2940038f 	ldh	r5,14(r5)
 4002a54:	4002c141 	jmpi	4002c14 <_close_r>

04002a58 <__sseek>:
 4002a58:	defffe04 	addi	sp,sp,-8
 4002a5c:	dc000015 	stw	r16,0(sp)
 4002a60:	2821883a 	mov	r16,r5
 4002a64:	2940038f 	ldh	r5,14(r5)
 4002a68:	dfc00115 	stw	ra,4(sp)
 4002a6c:	4002e8c0 	call	4002e8c <_lseek_r>
 4002a70:	1007883a 	mov	r3,r2
 4002a74:	00bfffc4 	movi	r2,-1
 4002a78:	18800926 	beq	r3,r2,4002aa0 <__sseek+0x48>
 4002a7c:	8080030b 	ldhu	r2,12(r16)
 4002a80:	80c01415 	stw	r3,80(r16)
 4002a84:	10840014 	ori	r2,r2,4096
 4002a88:	8080030d 	sth	r2,12(r16)
 4002a8c:	1805883a 	mov	r2,r3
 4002a90:	dfc00117 	ldw	ra,4(sp)
 4002a94:	dc000017 	ldw	r16,0(sp)
 4002a98:	dec00204 	addi	sp,sp,8
 4002a9c:	f800283a 	ret
 4002aa0:	8080030b 	ldhu	r2,12(r16)
 4002aa4:	10bbffcc 	andi	r2,r2,61439
 4002aa8:	8080030d 	sth	r2,12(r16)
 4002aac:	1805883a 	mov	r2,r3
 4002ab0:	dfc00117 	ldw	ra,4(sp)
 4002ab4:	dc000017 	ldw	r16,0(sp)
 4002ab8:	dec00204 	addi	sp,sp,8
 4002abc:	f800283a 	ret

04002ac0 <__swrite>:
 4002ac0:	2880030b 	ldhu	r2,12(r5)
 4002ac4:	defffb04 	addi	sp,sp,-20
 4002ac8:	dcc00315 	stw	r19,12(sp)
 4002acc:	1080400c 	andi	r2,r2,256
 4002ad0:	dc800215 	stw	r18,8(sp)
 4002ad4:	dc400115 	stw	r17,4(sp)
 4002ad8:	dc000015 	stw	r16,0(sp)
 4002adc:	3027883a 	mov	r19,r6
 4002ae0:	3825883a 	mov	r18,r7
 4002ae4:	dfc00415 	stw	ra,16(sp)
 4002ae8:	2821883a 	mov	r16,r5
 4002aec:	000d883a 	mov	r6,zero
 4002af0:	01c00084 	movi	r7,2
 4002af4:	2023883a 	mov	r17,r4
 4002af8:	10000226 	beq	r2,zero,4002b04 <__swrite+0x44>
 4002afc:	2940038f 	ldh	r5,14(r5)
 4002b00:	4002e8c0 	call	4002e8c <_lseek_r>
 4002b04:	8080030b 	ldhu	r2,12(r16)
 4002b08:	8140038f 	ldh	r5,14(r16)
 4002b0c:	8809883a 	mov	r4,r17
 4002b10:	10bbffcc 	andi	r2,r2,61439
 4002b14:	980d883a 	mov	r6,r19
 4002b18:	900f883a 	mov	r7,r18
 4002b1c:	8080030d 	sth	r2,12(r16)
 4002b20:	dfc00417 	ldw	ra,16(sp)
 4002b24:	dcc00317 	ldw	r19,12(sp)
 4002b28:	dc800217 	ldw	r18,8(sp)
 4002b2c:	dc400117 	ldw	r17,4(sp)
 4002b30:	dc000017 	ldw	r16,0(sp)
 4002b34:	dec00504 	addi	sp,sp,20
 4002b38:	4002b9c1 	jmpi	4002b9c <_write_r>

04002b3c <__sread>:
 4002b3c:	defffe04 	addi	sp,sp,-8
 4002b40:	dc000015 	stw	r16,0(sp)
 4002b44:	2821883a 	mov	r16,r5
 4002b48:	2940038f 	ldh	r5,14(r5)
 4002b4c:	dfc00115 	stw	ra,4(sp)
 4002b50:	4002f040 	call	4002f04 <_read_r>
 4002b54:	1007883a 	mov	r3,r2
 4002b58:	10000816 	blt	r2,zero,4002b7c <__sread+0x40>
 4002b5c:	80801417 	ldw	r2,80(r16)
 4002b60:	10c5883a 	add	r2,r2,r3
 4002b64:	80801415 	stw	r2,80(r16)
 4002b68:	1805883a 	mov	r2,r3
 4002b6c:	dfc00117 	ldw	ra,4(sp)
 4002b70:	dc000017 	ldw	r16,0(sp)
 4002b74:	dec00204 	addi	sp,sp,8
 4002b78:	f800283a 	ret
 4002b7c:	8080030b 	ldhu	r2,12(r16)
 4002b80:	10bbffcc 	andi	r2,r2,61439
 4002b84:	8080030d 	sth	r2,12(r16)
 4002b88:	1805883a 	mov	r2,r3
 4002b8c:	dfc00117 	ldw	ra,4(sp)
 4002b90:	dc000017 	ldw	r16,0(sp)
 4002b94:	dec00204 	addi	sp,sp,8
 4002b98:	f800283a 	ret

04002b9c <_write_r>:
 4002b9c:	defffd04 	addi	sp,sp,-12
 4002ba0:	dc000015 	stw	r16,0(sp)
 4002ba4:	04010074 	movhi	r16,1025
 4002ba8:	84254a04 	addi	r16,r16,-27352
 4002bac:	dc400115 	stw	r17,4(sp)
 4002bb0:	80000015 	stw	zero,0(r16)
 4002bb4:	2023883a 	mov	r17,r4
 4002bb8:	2809883a 	mov	r4,r5
 4002bbc:	300b883a 	mov	r5,r6
 4002bc0:	380d883a 	mov	r6,r7
 4002bc4:	dfc00215 	stw	ra,8(sp)
 4002bc8:	40038dc0 	call	40038dc <write>
 4002bcc:	1007883a 	mov	r3,r2
 4002bd0:	00bfffc4 	movi	r2,-1
 4002bd4:	18800626 	beq	r3,r2,4002bf0 <_write_r+0x54>
 4002bd8:	1805883a 	mov	r2,r3
 4002bdc:	dfc00217 	ldw	ra,8(sp)
 4002be0:	dc400117 	ldw	r17,4(sp)
 4002be4:	dc000017 	ldw	r16,0(sp)
 4002be8:	dec00304 	addi	sp,sp,12
 4002bec:	f800283a 	ret
 4002bf0:	80800017 	ldw	r2,0(r16)
 4002bf4:	103ff826 	beq	r2,zero,4002bd8 <_write_r+0x3c>
 4002bf8:	88800015 	stw	r2,0(r17)
 4002bfc:	1805883a 	mov	r2,r3
 4002c00:	dfc00217 	ldw	ra,8(sp)
 4002c04:	dc400117 	ldw	r17,4(sp)
 4002c08:	dc000017 	ldw	r16,0(sp)
 4002c0c:	dec00304 	addi	sp,sp,12
 4002c10:	f800283a 	ret

04002c14 <_close_r>:
 4002c14:	defffd04 	addi	sp,sp,-12
 4002c18:	dc000015 	stw	r16,0(sp)
 4002c1c:	04010074 	movhi	r16,1025
 4002c20:	84254a04 	addi	r16,r16,-27352
 4002c24:	dc400115 	stw	r17,4(sp)
 4002c28:	80000015 	stw	zero,0(r16)
 4002c2c:	2023883a 	mov	r17,r4
 4002c30:	2809883a 	mov	r4,r5
 4002c34:	dfc00215 	stw	ra,8(sp)
 4002c38:	4002f7c0 	call	4002f7c <close>
 4002c3c:	1007883a 	mov	r3,r2
 4002c40:	00bfffc4 	movi	r2,-1
 4002c44:	18800626 	beq	r3,r2,4002c60 <_close_r+0x4c>
 4002c48:	1805883a 	mov	r2,r3
 4002c4c:	dfc00217 	ldw	ra,8(sp)
 4002c50:	dc400117 	ldw	r17,4(sp)
 4002c54:	dc000017 	ldw	r16,0(sp)
 4002c58:	dec00304 	addi	sp,sp,12
 4002c5c:	f800283a 	ret
 4002c60:	80800017 	ldw	r2,0(r16)
 4002c64:	103ff826 	beq	r2,zero,4002c48 <_close_r+0x34>
 4002c68:	88800015 	stw	r2,0(r17)
 4002c6c:	1805883a 	mov	r2,r3
 4002c70:	dfc00217 	ldw	ra,8(sp)
 4002c74:	dc400117 	ldw	r17,4(sp)
 4002c78:	dc000017 	ldw	r16,0(sp)
 4002c7c:	dec00304 	addi	sp,sp,12
 4002c80:	f800283a 	ret

04002c84 <_fclose_r>:
 4002c84:	defffc04 	addi	sp,sp,-16
 4002c88:	dc400115 	stw	r17,4(sp)
 4002c8c:	dc000015 	stw	r16,0(sp)
 4002c90:	dfc00315 	stw	ra,12(sp)
 4002c94:	dc800215 	stw	r18,8(sp)
 4002c98:	2821883a 	mov	r16,r5
 4002c9c:	2023883a 	mov	r17,r4
 4002ca0:	28002926 	beq	r5,zero,4002d48 <_fclose_r+0xc4>
 4002ca4:	4001ffc0 	call	4001ffc <__sfp_lock_acquire>
 4002ca8:	88000226 	beq	r17,zero,4002cb4 <_fclose_r+0x30>
 4002cac:	88800e17 	ldw	r2,56(r17)
 4002cb0:	10002d26 	beq	r2,zero,4002d68 <_fclose_r+0xe4>
 4002cb4:	8080030f 	ldh	r2,12(r16)
 4002cb8:	10002226 	beq	r2,zero,4002d44 <_fclose_r+0xc0>
 4002cbc:	8809883a 	mov	r4,r17
 4002cc0:	800b883a 	mov	r5,r16
 4002cc4:	4001d740 	call	4001d74 <_fflush_r>
 4002cc8:	1025883a 	mov	r18,r2
 4002ccc:	80800b17 	ldw	r2,44(r16)
 4002cd0:	10000426 	beq	r2,zero,4002ce4 <_fclose_r+0x60>
 4002cd4:	81400717 	ldw	r5,28(r16)
 4002cd8:	8809883a 	mov	r4,r17
 4002cdc:	103ee83a 	callr	r2
 4002ce0:	10002a16 	blt	r2,zero,4002d8c <_fclose_r+0x108>
 4002ce4:	8080030b 	ldhu	r2,12(r16)
 4002ce8:	1080200c 	andi	r2,r2,128
 4002cec:	1000231e 	bne	r2,zero,4002d7c <_fclose_r+0xf8>
 4002cf0:	81400c17 	ldw	r5,48(r16)
 4002cf4:	28000526 	beq	r5,zero,4002d0c <_fclose_r+0x88>
 4002cf8:	80801004 	addi	r2,r16,64
 4002cfc:	28800226 	beq	r5,r2,4002d08 <_fclose_r+0x84>
 4002d00:	8809883a 	mov	r4,r17
 4002d04:	40023900 	call	4002390 <_free_r>
 4002d08:	80000c15 	stw	zero,48(r16)
 4002d0c:	81401117 	ldw	r5,68(r16)
 4002d10:	28000326 	beq	r5,zero,4002d20 <_fclose_r+0x9c>
 4002d14:	8809883a 	mov	r4,r17
 4002d18:	40023900 	call	4002390 <_free_r>
 4002d1c:	80001115 	stw	zero,68(r16)
 4002d20:	8000030d 	sth	zero,12(r16)
 4002d24:	40020000 	call	4002000 <__sfp_lock_release>
 4002d28:	9005883a 	mov	r2,r18
 4002d2c:	dfc00317 	ldw	ra,12(sp)
 4002d30:	dc800217 	ldw	r18,8(sp)
 4002d34:	dc400117 	ldw	r17,4(sp)
 4002d38:	dc000017 	ldw	r16,0(sp)
 4002d3c:	dec00404 	addi	sp,sp,16
 4002d40:	f800283a 	ret
 4002d44:	40020000 	call	4002000 <__sfp_lock_release>
 4002d48:	0025883a 	mov	r18,zero
 4002d4c:	9005883a 	mov	r2,r18
 4002d50:	dfc00317 	ldw	ra,12(sp)
 4002d54:	dc800217 	ldw	r18,8(sp)
 4002d58:	dc400117 	ldw	r17,4(sp)
 4002d5c:	dc000017 	ldw	r16,0(sp)
 4002d60:	dec00404 	addi	sp,sp,16
 4002d64:	f800283a 	ret
 4002d68:	8809883a 	mov	r4,r17
 4002d6c:	400200c0 	call	400200c <__sinit>
 4002d70:	8080030f 	ldh	r2,12(r16)
 4002d74:	103fd11e 	bne	r2,zero,4002cbc <_fclose_r+0x38>
 4002d78:	003ff206 	br	4002d44 <_fclose_r+0xc0>
 4002d7c:	81400417 	ldw	r5,16(r16)
 4002d80:	8809883a 	mov	r4,r17
 4002d84:	40023900 	call	4002390 <_free_r>
 4002d88:	003fd906 	br	4002cf0 <_fclose_r+0x6c>
 4002d8c:	04bfffc4 	movi	r18,-1
 4002d90:	003fd406 	br	4002ce4 <_fclose_r+0x60>

04002d94 <fclose>:
 4002d94:	00810034 	movhi	r2,1024
 4002d98:	109e9704 	addi	r2,r2,31324
 4002d9c:	200b883a 	mov	r5,r4
 4002da0:	11000017 	ldw	r4,0(r2)
 4002da4:	4002c841 	jmpi	4002c84 <_fclose_r>

04002da8 <_fstat_r>:
 4002da8:	defffd04 	addi	sp,sp,-12
 4002dac:	dc000015 	stw	r16,0(sp)
 4002db0:	04010074 	movhi	r16,1025
 4002db4:	84254a04 	addi	r16,r16,-27352
 4002db8:	dc400115 	stw	r17,4(sp)
 4002dbc:	80000015 	stw	zero,0(r16)
 4002dc0:	2023883a 	mov	r17,r4
 4002dc4:	2809883a 	mov	r4,r5
 4002dc8:	300b883a 	mov	r5,r6
 4002dcc:	dfc00215 	stw	ra,8(sp)
 4002dd0:	40031040 	call	4003104 <fstat>
 4002dd4:	1007883a 	mov	r3,r2
 4002dd8:	00bfffc4 	movi	r2,-1
 4002ddc:	18800626 	beq	r3,r2,4002df8 <_fstat_r+0x50>
 4002de0:	1805883a 	mov	r2,r3
 4002de4:	dfc00217 	ldw	ra,8(sp)
 4002de8:	dc400117 	ldw	r17,4(sp)
 4002dec:	dc000017 	ldw	r16,0(sp)
 4002df0:	dec00304 	addi	sp,sp,12
 4002df4:	f800283a 	ret
 4002df8:	80800017 	ldw	r2,0(r16)
 4002dfc:	103ff826 	beq	r2,zero,4002de0 <_fstat_r+0x38>
 4002e00:	88800015 	stw	r2,0(r17)
 4002e04:	1805883a 	mov	r2,r3
 4002e08:	dfc00217 	ldw	ra,8(sp)
 4002e0c:	dc400117 	ldw	r17,4(sp)
 4002e10:	dc000017 	ldw	r16,0(sp)
 4002e14:	dec00304 	addi	sp,sp,12
 4002e18:	f800283a 	ret

04002e1c <_isatty_r>:
 4002e1c:	defffd04 	addi	sp,sp,-12
 4002e20:	dc000015 	stw	r16,0(sp)
 4002e24:	04010074 	movhi	r16,1025
 4002e28:	84254a04 	addi	r16,r16,-27352
 4002e2c:	dc400115 	stw	r17,4(sp)
 4002e30:	80000015 	stw	zero,0(r16)
 4002e34:	2023883a 	mov	r17,r4
 4002e38:	2809883a 	mov	r4,r5
 4002e3c:	dfc00215 	stw	ra,8(sp)
 4002e40:	40032380 	call	4003238 <isatty>
 4002e44:	1007883a 	mov	r3,r2
 4002e48:	00bfffc4 	movi	r2,-1
 4002e4c:	18800626 	beq	r3,r2,4002e68 <_isatty_r+0x4c>
 4002e50:	1805883a 	mov	r2,r3
 4002e54:	dfc00217 	ldw	ra,8(sp)
 4002e58:	dc400117 	ldw	r17,4(sp)
 4002e5c:	dc000017 	ldw	r16,0(sp)
 4002e60:	dec00304 	addi	sp,sp,12
 4002e64:	f800283a 	ret
 4002e68:	80800017 	ldw	r2,0(r16)
 4002e6c:	103ff826 	beq	r2,zero,4002e50 <_isatty_r+0x34>
 4002e70:	88800015 	stw	r2,0(r17)
 4002e74:	1805883a 	mov	r2,r3
 4002e78:	dfc00217 	ldw	ra,8(sp)
 4002e7c:	dc400117 	ldw	r17,4(sp)
 4002e80:	dc000017 	ldw	r16,0(sp)
 4002e84:	dec00304 	addi	sp,sp,12
 4002e88:	f800283a 	ret

04002e8c <_lseek_r>:
 4002e8c:	defffd04 	addi	sp,sp,-12
 4002e90:	dc000015 	stw	r16,0(sp)
 4002e94:	04010074 	movhi	r16,1025
 4002e98:	84254a04 	addi	r16,r16,-27352
 4002e9c:	dc400115 	stw	r17,4(sp)
 4002ea0:	80000015 	stw	zero,0(r16)
 4002ea4:	2023883a 	mov	r17,r4
 4002ea8:	2809883a 	mov	r4,r5
 4002eac:	300b883a 	mov	r5,r6
 4002eb0:	380d883a 	mov	r6,r7
 4002eb4:	dfc00215 	stw	ra,8(sp)
 4002eb8:	40034440 	call	4003444 <lseek>
 4002ebc:	1007883a 	mov	r3,r2
 4002ec0:	00bfffc4 	movi	r2,-1
 4002ec4:	18800626 	beq	r3,r2,4002ee0 <_lseek_r+0x54>
 4002ec8:	1805883a 	mov	r2,r3
 4002ecc:	dfc00217 	ldw	ra,8(sp)
 4002ed0:	dc400117 	ldw	r17,4(sp)
 4002ed4:	dc000017 	ldw	r16,0(sp)
 4002ed8:	dec00304 	addi	sp,sp,12
 4002edc:	f800283a 	ret
 4002ee0:	80800017 	ldw	r2,0(r16)
 4002ee4:	103ff826 	beq	r2,zero,4002ec8 <_lseek_r+0x3c>
 4002ee8:	88800015 	stw	r2,0(r17)
 4002eec:	1805883a 	mov	r2,r3
 4002ef0:	dfc00217 	ldw	ra,8(sp)
 4002ef4:	dc400117 	ldw	r17,4(sp)
 4002ef8:	dc000017 	ldw	r16,0(sp)
 4002efc:	dec00304 	addi	sp,sp,12
 4002f00:	f800283a 	ret

04002f04 <_read_r>:
 4002f04:	defffd04 	addi	sp,sp,-12
 4002f08:	dc000015 	stw	r16,0(sp)
 4002f0c:	04010074 	movhi	r16,1025
 4002f10:	84254a04 	addi	r16,r16,-27352
 4002f14:	dc400115 	stw	r17,4(sp)
 4002f18:	80000015 	stw	zero,0(r16)
 4002f1c:	2023883a 	mov	r17,r4
 4002f20:	2809883a 	mov	r4,r5
 4002f24:	300b883a 	mov	r5,r6
 4002f28:	380d883a 	mov	r6,r7
 4002f2c:	dfc00215 	stw	ra,8(sp)
 4002f30:	40036400 	call	4003640 <read>
 4002f34:	1007883a 	mov	r3,r2
 4002f38:	00bfffc4 	movi	r2,-1
 4002f3c:	18800626 	beq	r3,r2,4002f58 <_read_r+0x54>
 4002f40:	1805883a 	mov	r2,r3
 4002f44:	dfc00217 	ldw	ra,8(sp)
 4002f48:	dc400117 	ldw	r17,4(sp)
 4002f4c:	dc000017 	ldw	r16,0(sp)
 4002f50:	dec00304 	addi	sp,sp,12
 4002f54:	f800283a 	ret
 4002f58:	80800017 	ldw	r2,0(r16)
 4002f5c:	103ff826 	beq	r2,zero,4002f40 <_read_r+0x3c>
 4002f60:	88800015 	stw	r2,0(r17)
 4002f64:	1805883a 	mov	r2,r3
 4002f68:	dfc00217 	ldw	ra,8(sp)
 4002f6c:	dc400117 	ldw	r17,4(sp)
 4002f70:	dc000017 	ldw	r16,0(sp)
 4002f74:	dec00304 	addi	sp,sp,12
 4002f78:	f800283a 	ret

04002f7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4002f7c:	defff804 	addi	sp,sp,-32
 4002f80:	dfc00715 	stw	ra,28(sp)
 4002f84:	df000615 	stw	fp,24(sp)
 4002f88:	df000604 	addi	fp,sp,24
 4002f8c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4002f90:	e0bffc17 	ldw	r2,-16(fp)
 4002f94:	1004803a 	cmplt	r2,r2,zero
 4002f98:	1000081e 	bne	r2,zero,4002fbc <close+0x40>
 4002f9c:	e0bffc17 	ldw	r2,-16(fp)
 4002fa0:	10800324 	muli	r2,r2,12
 4002fa4:	1007883a 	mov	r3,r2
 4002fa8:	00810034 	movhi	r2,1024
 4002fac:	109a1f04 	addi	r2,r2,26748
 4002fb0:	1887883a 	add	r3,r3,r2
 4002fb4:	e0ffff15 	stw	r3,-4(fp)
 4002fb8:	00000106 	br	4002fc0 <close+0x44>
 4002fbc:	e03fff15 	stw	zero,-4(fp)
 4002fc0:	e0bfff17 	ldw	r2,-4(fp)
 4002fc4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4002fc8:	e0bffb17 	ldw	r2,-20(fp)
 4002fcc:	1005003a 	cmpeq	r2,r2,zero
 4002fd0:	10001d1e 	bne	r2,zero,4003048 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4002fd4:	e0bffb17 	ldw	r2,-20(fp)
 4002fd8:	10800017 	ldw	r2,0(r2)
 4002fdc:	10800417 	ldw	r2,16(r2)
 4002fe0:	1005003a 	cmpeq	r2,r2,zero
 4002fe4:	1000071e 	bne	r2,zero,4003004 <close+0x88>
 4002fe8:	e0bffb17 	ldw	r2,-20(fp)
 4002fec:	10800017 	ldw	r2,0(r2)
 4002ff0:	10800417 	ldw	r2,16(r2)
 4002ff4:	e13ffb17 	ldw	r4,-20(fp)
 4002ff8:	103ee83a 	callr	r2
 4002ffc:	e0bffe15 	stw	r2,-8(fp)
 4003000:	00000106 	br	4003008 <close+0x8c>
 4003004:	e03ffe15 	stw	zero,-8(fp)
 4003008:	e0bffe17 	ldw	r2,-8(fp)
 400300c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4003010:	e13ffc17 	ldw	r4,-16(fp)
 4003014:	40037c00 	call	40037c0 <alt_release_fd>
    if (rval < 0)
 4003018:	e0bffa17 	ldw	r2,-24(fp)
 400301c:	1004403a 	cmpge	r2,r2,zero
 4003020:	1000071e 	bne	r2,zero,4003040 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 4003024:	40030780 	call	4003078 <alt_get_errno>
 4003028:	e0fffa17 	ldw	r3,-24(fp)
 400302c:	00c7c83a 	sub	r3,zero,r3
 4003030:	10c00015 	stw	r3,0(r2)
      return -1;
 4003034:	00bfffc4 	movi	r2,-1
 4003038:	e0bffd15 	stw	r2,-12(fp)
 400303c:	00000806 	br	4003060 <close+0xe4>
    }
    return 0;
 4003040:	e03ffd15 	stw	zero,-12(fp)
 4003044:	00000606 	br	4003060 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003048:	40030780 	call	4003078 <alt_get_errno>
 400304c:	1007883a 	mov	r3,r2
 4003050:	00801444 	movi	r2,81
 4003054:	18800015 	stw	r2,0(r3)
    return -1;
 4003058:	00bfffc4 	movi	r2,-1
 400305c:	e0bffd15 	stw	r2,-12(fp)
 4003060:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 4003064:	e037883a 	mov	sp,fp
 4003068:	dfc00117 	ldw	ra,4(sp)
 400306c:	df000017 	ldw	fp,0(sp)
 4003070:	dec00204 	addi	sp,sp,8
 4003074:	f800283a 	ret

04003078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003078:	defffd04 	addi	sp,sp,-12
 400307c:	dfc00215 	stw	ra,8(sp)
 4003080:	df000115 	stw	fp,4(sp)
 4003084:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003088:	00810034 	movhi	r2,1024
 400308c:	109ea004 	addi	r2,r2,31360
 4003090:	10800017 	ldw	r2,0(r2)
 4003094:	1005003a 	cmpeq	r2,r2,zero
 4003098:	1000061e 	bne	r2,zero,40030b4 <alt_get_errno+0x3c>
 400309c:	00810034 	movhi	r2,1024
 40030a0:	109ea004 	addi	r2,r2,31360
 40030a4:	10800017 	ldw	r2,0(r2)
 40030a8:	103ee83a 	callr	r2
 40030ac:	e0bfff15 	stw	r2,-4(fp)
 40030b0:	00000306 	br	40030c0 <alt_get_errno+0x48>
 40030b4:	00810074 	movhi	r2,1025
 40030b8:	10a54a04 	addi	r2,r2,-27352
 40030bc:	e0bfff15 	stw	r2,-4(fp)
 40030c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40030c4:	e037883a 	mov	sp,fp
 40030c8:	dfc00117 	ldw	ra,4(sp)
 40030cc:	df000017 	ldw	fp,0(sp)
 40030d0:	dec00204 	addi	sp,sp,8
 40030d4:	f800283a 	ret

040030d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40030d8:	defffc04 	addi	sp,sp,-16
 40030dc:	df000315 	stw	fp,12(sp)
 40030e0:	df000304 	addi	fp,sp,12
 40030e4:	e13ffd15 	stw	r4,-12(fp)
 40030e8:	e17ffe15 	stw	r5,-8(fp)
 40030ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40030f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40030f4:	e037883a 	mov	sp,fp
 40030f8:	df000017 	ldw	fp,0(sp)
 40030fc:	dec00104 	addi	sp,sp,4
 4003100:	f800283a 	ret

04003104 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4003104:	defff904 	addi	sp,sp,-28
 4003108:	dfc00615 	stw	ra,24(sp)
 400310c:	df000515 	stw	fp,20(sp)
 4003110:	df000504 	addi	fp,sp,20
 4003114:	e13ffc15 	stw	r4,-16(fp)
 4003118:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400311c:	e0bffc17 	ldw	r2,-16(fp)
 4003120:	1004803a 	cmplt	r2,r2,zero
 4003124:	1000081e 	bne	r2,zero,4003148 <fstat+0x44>
 4003128:	e0bffc17 	ldw	r2,-16(fp)
 400312c:	10800324 	muli	r2,r2,12
 4003130:	1007883a 	mov	r3,r2
 4003134:	00810034 	movhi	r2,1024
 4003138:	109a1f04 	addi	r2,r2,26748
 400313c:	1887883a 	add	r3,r3,r2
 4003140:	e0ffff15 	stw	r3,-4(fp)
 4003144:	00000106 	br	400314c <fstat+0x48>
 4003148:	e03fff15 	stw	zero,-4(fp)
 400314c:	e0bfff17 	ldw	r2,-4(fp)
 4003150:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4003154:	e0bffb17 	ldw	r2,-20(fp)
 4003158:	1005003a 	cmpeq	r2,r2,zero
 400315c:	1000121e 	bne	r2,zero,40031a8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4003160:	e0bffb17 	ldw	r2,-20(fp)
 4003164:	10800017 	ldw	r2,0(r2)
 4003168:	10800817 	ldw	r2,32(r2)
 400316c:	1005003a 	cmpeq	r2,r2,zero
 4003170:	1000081e 	bne	r2,zero,4003194 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 4003174:	e0bffb17 	ldw	r2,-20(fp)
 4003178:	10800017 	ldw	r2,0(r2)
 400317c:	10800817 	ldw	r2,32(r2)
 4003180:	e13ffb17 	ldw	r4,-20(fp)
 4003184:	e17ffd17 	ldw	r5,-12(fp)
 4003188:	103ee83a 	callr	r2
 400318c:	e0bffe15 	stw	r2,-8(fp)
 4003190:	00000b06 	br	40031c0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4003194:	e0fffd17 	ldw	r3,-12(fp)
 4003198:	00880004 	movi	r2,8192
 400319c:	18800115 	stw	r2,4(r3)
      return 0;
 40031a0:	e03ffe15 	stw	zero,-8(fp)
 40031a4:	00000606 	br	40031c0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40031a8:	40031d80 	call	40031d8 <alt_get_errno>
 40031ac:	1007883a 	mov	r3,r2
 40031b0:	00801444 	movi	r2,81
 40031b4:	18800015 	stw	r2,0(r3)
    return -1;
 40031b8:	00bfffc4 	movi	r2,-1
 40031bc:	e0bffe15 	stw	r2,-8(fp)
 40031c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 40031c4:	e037883a 	mov	sp,fp
 40031c8:	dfc00117 	ldw	ra,4(sp)
 40031cc:	df000017 	ldw	fp,0(sp)
 40031d0:	dec00204 	addi	sp,sp,8
 40031d4:	f800283a 	ret

040031d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40031d8:	defffd04 	addi	sp,sp,-12
 40031dc:	dfc00215 	stw	ra,8(sp)
 40031e0:	df000115 	stw	fp,4(sp)
 40031e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40031e8:	00810034 	movhi	r2,1024
 40031ec:	109ea004 	addi	r2,r2,31360
 40031f0:	10800017 	ldw	r2,0(r2)
 40031f4:	1005003a 	cmpeq	r2,r2,zero
 40031f8:	1000061e 	bne	r2,zero,4003214 <alt_get_errno+0x3c>
 40031fc:	00810034 	movhi	r2,1024
 4003200:	109ea004 	addi	r2,r2,31360
 4003204:	10800017 	ldw	r2,0(r2)
 4003208:	103ee83a 	callr	r2
 400320c:	e0bfff15 	stw	r2,-4(fp)
 4003210:	00000306 	br	4003220 <alt_get_errno+0x48>
 4003214:	00810074 	movhi	r2,1025
 4003218:	10a54a04 	addi	r2,r2,-27352
 400321c:	e0bfff15 	stw	r2,-4(fp)
 4003220:	e0bfff17 	ldw	r2,-4(fp)
}
 4003224:	e037883a 	mov	sp,fp
 4003228:	dfc00117 	ldw	ra,4(sp)
 400322c:	df000017 	ldw	fp,0(sp)
 4003230:	dec00204 	addi	sp,sp,8
 4003234:	f800283a 	ret

04003238 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4003238:	deffeb04 	addi	sp,sp,-84
 400323c:	dfc01415 	stw	ra,80(sp)
 4003240:	df001315 	stw	fp,76(sp)
 4003244:	df001304 	addi	fp,sp,76
 4003248:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400324c:	e0bffd17 	ldw	r2,-12(fp)
 4003250:	1004803a 	cmplt	r2,r2,zero
 4003254:	1000081e 	bne	r2,zero,4003278 <isatty+0x40>
 4003258:	e0bffd17 	ldw	r2,-12(fp)
 400325c:	10800324 	muli	r2,r2,12
 4003260:	1007883a 	mov	r3,r2
 4003264:	00810034 	movhi	r2,1024
 4003268:	109a1f04 	addi	r2,r2,26748
 400326c:	1887883a 	add	r3,r3,r2
 4003270:	e0ffff15 	stw	r3,-4(fp)
 4003274:	00000106 	br	400327c <isatty+0x44>
 4003278:	e03fff15 	stw	zero,-4(fp)
 400327c:	e0bfff17 	ldw	r2,-4(fp)
 4003280:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 4003284:	e0bfed17 	ldw	r2,-76(fp)
 4003288:	1005003a 	cmpeq	r2,r2,zero
 400328c:	10000f1e 	bne	r2,zero,40032cc <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4003290:	e0bfed17 	ldw	r2,-76(fp)
 4003294:	10800017 	ldw	r2,0(r2)
 4003298:	10800817 	ldw	r2,32(r2)
 400329c:	1004c03a 	cmpne	r2,r2,zero
 40032a0:	1000031e 	bne	r2,zero,40032b0 <isatty+0x78>
    {
      return 1;
 40032a4:	00800044 	movi	r2,1
 40032a8:	e0bffe15 	stw	r2,-8(fp)
 40032ac:	00000c06 	br	40032e0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40032b0:	e17fee04 	addi	r5,fp,-72
 40032b4:	e13ffd17 	ldw	r4,-12(fp)
 40032b8:	40031040 	call	4003104 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40032bc:	e0bfef17 	ldw	r2,-68(fp)
 40032c0:	10880020 	cmpeqi	r2,r2,8192
 40032c4:	e0bffe15 	stw	r2,-8(fp)
 40032c8:	00000506 	br	40032e0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40032cc:	40032f80 	call	40032f8 <alt_get_errno>
 40032d0:	1007883a 	mov	r3,r2
 40032d4:	00801444 	movi	r2,81
 40032d8:	18800015 	stw	r2,0(r3)
    return 0;
 40032dc:	e03ffe15 	stw	zero,-8(fp)
 40032e0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 40032e4:	e037883a 	mov	sp,fp
 40032e8:	dfc00117 	ldw	ra,4(sp)
 40032ec:	df000017 	ldw	fp,0(sp)
 40032f0:	dec00204 	addi	sp,sp,8
 40032f4:	f800283a 	ret

040032f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40032f8:	defffd04 	addi	sp,sp,-12
 40032fc:	dfc00215 	stw	ra,8(sp)
 4003300:	df000115 	stw	fp,4(sp)
 4003304:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003308:	00810034 	movhi	r2,1024
 400330c:	109ea004 	addi	r2,r2,31360
 4003310:	10800017 	ldw	r2,0(r2)
 4003314:	1005003a 	cmpeq	r2,r2,zero
 4003318:	1000061e 	bne	r2,zero,4003334 <alt_get_errno+0x3c>
 400331c:	00810034 	movhi	r2,1024
 4003320:	109ea004 	addi	r2,r2,31360
 4003324:	10800017 	ldw	r2,0(r2)
 4003328:	103ee83a 	callr	r2
 400332c:	e0bfff15 	stw	r2,-4(fp)
 4003330:	00000306 	br	4003340 <alt_get_errno+0x48>
 4003334:	00810074 	movhi	r2,1025
 4003338:	10a54a04 	addi	r2,r2,-27352
 400333c:	e0bfff15 	stw	r2,-4(fp)
 4003340:	e0bfff17 	ldw	r2,-4(fp)
}
 4003344:	e037883a 	mov	sp,fp
 4003348:	dfc00117 	ldw	ra,4(sp)
 400334c:	df000017 	ldw	fp,0(sp)
 4003350:	dec00204 	addi	sp,sp,8
 4003354:	f800283a 	ret

04003358 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4003358:	defffe04 	addi	sp,sp,-8
 400335c:	dfc00115 	stw	ra,4(sp)
 4003360:	df000015 	stw	fp,0(sp)
 4003364:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4003368:	01010034 	movhi	r4,1024
 400336c:	211ea504 	addi	r4,r4,31380
 4003370:	01410034 	movhi	r5,1024
 4003374:	29580304 	addi	r5,r5,24588
 4003378:	01810034 	movhi	r6,1024
 400337c:	319ea504 	addi	r6,r6,31380
 4003380:	40033d80 	call	40033d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4003384:	01010034 	movhi	r4,1024
 4003388:	213ffc04 	addi	r4,r4,-16
 400338c:	01420034 	movhi	r5,2048
 4003390:	29460804 	addi	r5,r5,6176
 4003394:	01820034 	movhi	r6,2048
 4003398:	31866d04 	addi	r6,r6,6580
 400339c:	40033d80 	call	40033d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40033a0:	01010034 	movhi	r4,1024
 40033a4:	2117d104 	addi	r4,r4,24388
 40033a8:	01410034 	movhi	r5,1024
 40033ac:	2957d104 	addi	r5,r5,24388
 40033b0:	01810034 	movhi	r6,1024
 40033b4:	31980304 	addi	r6,r6,24588
 40033b8:	40033d80 	call	40033d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40033bc:	4004d840 	call	4004d84 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40033c0:	4004f7c0 	call	4004f7c <alt_icache_flush_all>
}
 40033c4:	e037883a 	mov	sp,fp
 40033c8:	dfc00117 	ldw	ra,4(sp)
 40033cc:	df000017 	ldw	fp,0(sp)
 40033d0:	dec00204 	addi	sp,sp,8
 40033d4:	f800283a 	ret

040033d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40033d8:	defffc04 	addi	sp,sp,-16
 40033dc:	df000315 	stw	fp,12(sp)
 40033e0:	df000304 	addi	fp,sp,12
 40033e4:	e13ffd15 	stw	r4,-12(fp)
 40033e8:	e17ffe15 	stw	r5,-8(fp)
 40033ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40033f0:	e0fffe17 	ldw	r3,-8(fp)
 40033f4:	e0bffd17 	ldw	r2,-12(fp)
 40033f8:	18800e26 	beq	r3,r2,4003434 <alt_load_section+0x5c>
  {
    while( to != end )
 40033fc:	00000a06 	br	4003428 <alt_load_section+0x50>
    {
      *to++ = *from++;
 4003400:	e0bffd17 	ldw	r2,-12(fp)
 4003404:	10c00017 	ldw	r3,0(r2)
 4003408:	e0bffe17 	ldw	r2,-8(fp)
 400340c:	10c00015 	stw	r3,0(r2)
 4003410:	e0bffe17 	ldw	r2,-8(fp)
 4003414:	10800104 	addi	r2,r2,4
 4003418:	e0bffe15 	stw	r2,-8(fp)
 400341c:	e0bffd17 	ldw	r2,-12(fp)
 4003420:	10800104 	addi	r2,r2,4
 4003424:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4003428:	e0fffe17 	ldw	r3,-8(fp)
 400342c:	e0bfff17 	ldw	r2,-4(fp)
 4003430:	18bff31e 	bne	r3,r2,4003400 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4003434:	e037883a 	mov	sp,fp
 4003438:	df000017 	ldw	fp,0(sp)
 400343c:	dec00104 	addi	sp,sp,4
 4003440:	f800283a 	ret

04003444 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4003444:	defff804 	addi	sp,sp,-32
 4003448:	dfc00715 	stw	ra,28(sp)
 400344c:	df000615 	stw	fp,24(sp)
 4003450:	df000604 	addi	fp,sp,24
 4003454:	e13ffc15 	stw	r4,-16(fp)
 4003458:	e17ffd15 	stw	r5,-12(fp)
 400345c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4003460:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003464:	e0bffc17 	ldw	r2,-16(fp)
 4003468:	1004803a 	cmplt	r2,r2,zero
 400346c:	1000081e 	bne	r2,zero,4003490 <lseek+0x4c>
 4003470:	e0bffc17 	ldw	r2,-16(fp)
 4003474:	10800324 	muli	r2,r2,12
 4003478:	1007883a 	mov	r3,r2
 400347c:	00810034 	movhi	r2,1024
 4003480:	109a1f04 	addi	r2,r2,26748
 4003484:	1887883a 	add	r3,r3,r2
 4003488:	e0ffff15 	stw	r3,-4(fp)
 400348c:	00000106 	br	4003494 <lseek+0x50>
 4003490:	e03fff15 	stw	zero,-4(fp)
 4003494:	e0bfff17 	ldw	r2,-4(fp)
 4003498:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 400349c:	e0bffb17 	ldw	r2,-20(fp)
 40034a0:	1005003a 	cmpeq	r2,r2,zero
 40034a4:	1000111e 	bne	r2,zero,40034ec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40034a8:	e0bffb17 	ldw	r2,-20(fp)
 40034ac:	10800017 	ldw	r2,0(r2)
 40034b0:	10800717 	ldw	r2,28(r2)
 40034b4:	1005003a 	cmpeq	r2,r2,zero
 40034b8:	1000091e 	bne	r2,zero,40034e0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40034bc:	e0bffb17 	ldw	r2,-20(fp)
 40034c0:	10800017 	ldw	r2,0(r2)
 40034c4:	10800717 	ldw	r2,28(r2)
 40034c8:	e13ffb17 	ldw	r4,-20(fp)
 40034cc:	e17ffd17 	ldw	r5,-12(fp)
 40034d0:	e1bffe17 	ldw	r6,-8(fp)
 40034d4:	103ee83a 	callr	r2
 40034d8:	e0bffa15 	stw	r2,-24(fp)
 40034dc:	00000506 	br	40034f4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40034e0:	00bfde84 	movi	r2,-134
 40034e4:	e0bffa15 	stw	r2,-24(fp)
 40034e8:	00000206 	br	40034f4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40034ec:	00bfebc4 	movi	r2,-81
 40034f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 40034f4:	e0bffa17 	ldw	r2,-24(fp)
 40034f8:	1004403a 	cmpge	r2,r2,zero
 40034fc:	1000071e 	bne	r2,zero,400351c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 4003500:	40035340 	call	4003534 <alt_get_errno>
 4003504:	1007883a 	mov	r3,r2
 4003508:	e0bffa17 	ldw	r2,-24(fp)
 400350c:	0085c83a 	sub	r2,zero,r2
 4003510:	18800015 	stw	r2,0(r3)
    rc = -1;
 4003514:	00bfffc4 	movi	r2,-1
 4003518:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 400351c:	e0bffa17 	ldw	r2,-24(fp)
}
 4003520:	e037883a 	mov	sp,fp
 4003524:	dfc00117 	ldw	ra,4(sp)
 4003528:	df000017 	ldw	fp,0(sp)
 400352c:	dec00204 	addi	sp,sp,8
 4003530:	f800283a 	ret

04003534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003534:	defffd04 	addi	sp,sp,-12
 4003538:	dfc00215 	stw	ra,8(sp)
 400353c:	df000115 	stw	fp,4(sp)
 4003540:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003544:	00810034 	movhi	r2,1024
 4003548:	109ea004 	addi	r2,r2,31360
 400354c:	10800017 	ldw	r2,0(r2)
 4003550:	1005003a 	cmpeq	r2,r2,zero
 4003554:	1000061e 	bne	r2,zero,4003570 <alt_get_errno+0x3c>
 4003558:	00810034 	movhi	r2,1024
 400355c:	109ea004 	addi	r2,r2,31360
 4003560:	10800017 	ldw	r2,0(r2)
 4003564:	103ee83a 	callr	r2
 4003568:	e0bfff15 	stw	r2,-4(fp)
 400356c:	00000306 	br	400357c <alt_get_errno+0x48>
 4003570:	00810074 	movhi	r2,1025
 4003574:	10a54a04 	addi	r2,r2,-27352
 4003578:	e0bfff15 	stw	r2,-4(fp)
 400357c:	e0bfff17 	ldw	r2,-4(fp)
}
 4003580:	e037883a 	mov	sp,fp
 4003584:	dfc00117 	ldw	ra,4(sp)
 4003588:	df000017 	ldw	fp,0(sp)
 400358c:	dec00204 	addi	sp,sp,8
 4003590:	f800283a 	ret

04003594 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003594:	defffd04 	addi	sp,sp,-12
 4003598:	dfc00215 	stw	ra,8(sp)
 400359c:	df000115 	stw	fp,4(sp)
 40035a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40035a4:	0009883a 	mov	r4,zero
 40035a8:	4003a5c0 	call	4003a5c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40035ac:	4003a900 	call	4003a90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40035b0:	01010034 	movhi	r4,1024
 40035b4:	2117f904 	addi	r4,r4,24548
 40035b8:	01410034 	movhi	r5,1024
 40035bc:	2957f904 	addi	r5,r5,24548
 40035c0:	01810034 	movhi	r6,1024
 40035c4:	3197f904 	addi	r6,r6,24548
 40035c8:	400533c0 	call	400533c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40035cc:	4004eb40 	call	4004eb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40035d0:	01010034 	movhi	r4,1024
 40035d4:	2113c604 	addi	r4,r4,20248
 40035d8:	4005b380 	call	4005b38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40035dc:	d126b417 	ldw	r4,-25904(gp)
 40035e0:	d166b517 	ldw	r5,-25900(gp)
 40035e4:	d1a6b617 	ldw	r6,-25896(gp)
 40035e8:	40005e80 	call	40005e8 <main>
 40035ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40035f0:	01000044 	movi	r4,1
 40035f4:	4002f7c0 	call	4002f7c <close>
  exit (result);
 40035f8:	e13fff17 	ldw	r4,-4(fp)
 40035fc:	4005b4c0 	call	4005b4c <exit>

04003600 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4003600:	defffe04 	addi	sp,sp,-8
 4003604:	df000115 	stw	fp,4(sp)
 4003608:	df000104 	addi	fp,sp,4
 400360c:	e13fff15 	stw	r4,-4(fp)
}
 4003610:	e037883a 	mov	sp,fp
 4003614:	df000017 	ldw	fp,0(sp)
 4003618:	dec00104 	addi	sp,sp,4
 400361c:	f800283a 	ret

04003620 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4003620:	defffe04 	addi	sp,sp,-8
 4003624:	df000115 	stw	fp,4(sp)
 4003628:	df000104 	addi	fp,sp,4
 400362c:	e13fff15 	stw	r4,-4(fp)
}
 4003630:	e037883a 	mov	sp,fp
 4003634:	df000017 	ldw	fp,0(sp)
 4003638:	dec00104 	addi	sp,sp,4
 400363c:	f800283a 	ret

04003640 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4003640:	defff704 	addi	sp,sp,-36
 4003644:	dfc00815 	stw	ra,32(sp)
 4003648:	df000715 	stw	fp,28(sp)
 400364c:	df000704 	addi	fp,sp,28
 4003650:	e13ffb15 	stw	r4,-20(fp)
 4003654:	e17ffc15 	stw	r5,-16(fp)
 4003658:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400365c:	e0bffb17 	ldw	r2,-20(fp)
 4003660:	1004803a 	cmplt	r2,r2,zero
 4003664:	1000081e 	bne	r2,zero,4003688 <read+0x48>
 4003668:	e0bffb17 	ldw	r2,-20(fp)
 400366c:	10800324 	muli	r2,r2,12
 4003670:	1007883a 	mov	r3,r2
 4003674:	00810034 	movhi	r2,1024
 4003678:	109a1f04 	addi	r2,r2,26748
 400367c:	1887883a 	add	r3,r3,r2
 4003680:	e0ffff15 	stw	r3,-4(fp)
 4003684:	00000106 	br	400368c <read+0x4c>
 4003688:	e03fff15 	stw	zero,-4(fp)
 400368c:	e0bfff17 	ldw	r2,-4(fp)
 4003690:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4003694:	e0bffa17 	ldw	r2,-24(fp)
 4003698:	1005003a 	cmpeq	r2,r2,zero
 400369c:	1000241e 	bne	r2,zero,4003730 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40036a0:	e0bffa17 	ldw	r2,-24(fp)
 40036a4:	10800217 	ldw	r2,8(r2)
 40036a8:	108000cc 	andi	r2,r2,3
 40036ac:	10800060 	cmpeqi	r2,r2,1
 40036b0:	10001a1e 	bne	r2,zero,400371c <read+0xdc>
 40036b4:	e0bffa17 	ldw	r2,-24(fp)
 40036b8:	10800017 	ldw	r2,0(r2)
 40036bc:	10800517 	ldw	r2,20(r2)
 40036c0:	1005003a 	cmpeq	r2,r2,zero
 40036c4:	1000151e 	bne	r2,zero,400371c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40036c8:	e0bffa17 	ldw	r2,-24(fp)
 40036cc:	10800017 	ldw	r2,0(r2)
 40036d0:	10800517 	ldw	r2,20(r2)
 40036d4:	e17ffc17 	ldw	r5,-16(fp)
 40036d8:	e1bffd17 	ldw	r6,-12(fp)
 40036dc:	e13ffa17 	ldw	r4,-24(fp)
 40036e0:	103ee83a 	callr	r2
 40036e4:	e0bff915 	stw	r2,-28(fp)
 40036e8:	e0bff917 	ldw	r2,-28(fp)
 40036ec:	1004403a 	cmpge	r2,r2,zero
 40036f0:	1000071e 	bne	r2,zero,4003710 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 40036f4:	40037600 	call	4003760 <alt_get_errno>
 40036f8:	e0fff917 	ldw	r3,-28(fp)
 40036fc:	00c7c83a 	sub	r3,zero,r3
 4003700:	10c00015 	stw	r3,0(r2)
          return -1;
 4003704:	00bfffc4 	movi	r2,-1
 4003708:	e0bffe15 	stw	r2,-8(fp)
 400370c:	00000e06 	br	4003748 <read+0x108>
        }
        return rval;
 4003710:	e0bff917 	ldw	r2,-28(fp)
 4003714:	e0bffe15 	stw	r2,-8(fp)
 4003718:	00000b06 	br	4003748 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400371c:	40037600 	call	4003760 <alt_get_errno>
 4003720:	1007883a 	mov	r3,r2
 4003724:	00800344 	movi	r2,13
 4003728:	18800015 	stw	r2,0(r3)
 400372c:	00000406 	br	4003740 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4003730:	40037600 	call	4003760 <alt_get_errno>
 4003734:	1007883a 	mov	r3,r2
 4003738:	00801444 	movi	r2,81
 400373c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003740:	00bfffc4 	movi	r2,-1
 4003744:	e0bffe15 	stw	r2,-8(fp)
 4003748:	e0bffe17 	ldw	r2,-8(fp)
}
 400374c:	e037883a 	mov	sp,fp
 4003750:	dfc00117 	ldw	ra,4(sp)
 4003754:	df000017 	ldw	fp,0(sp)
 4003758:	dec00204 	addi	sp,sp,8
 400375c:	f800283a 	ret

04003760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003760:	defffd04 	addi	sp,sp,-12
 4003764:	dfc00215 	stw	ra,8(sp)
 4003768:	df000115 	stw	fp,4(sp)
 400376c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003770:	00810034 	movhi	r2,1024
 4003774:	109ea004 	addi	r2,r2,31360
 4003778:	10800017 	ldw	r2,0(r2)
 400377c:	1005003a 	cmpeq	r2,r2,zero
 4003780:	1000061e 	bne	r2,zero,400379c <alt_get_errno+0x3c>
 4003784:	00810034 	movhi	r2,1024
 4003788:	109ea004 	addi	r2,r2,31360
 400378c:	10800017 	ldw	r2,0(r2)
 4003790:	103ee83a 	callr	r2
 4003794:	e0bfff15 	stw	r2,-4(fp)
 4003798:	00000306 	br	40037a8 <alt_get_errno+0x48>
 400379c:	00810074 	movhi	r2,1025
 40037a0:	10a54a04 	addi	r2,r2,-27352
 40037a4:	e0bfff15 	stw	r2,-4(fp)
 40037a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40037ac:	e037883a 	mov	sp,fp
 40037b0:	dfc00117 	ldw	ra,4(sp)
 40037b4:	df000017 	ldw	fp,0(sp)
 40037b8:	dec00204 	addi	sp,sp,8
 40037bc:	f800283a 	ret

040037c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40037c0:	defffe04 	addi	sp,sp,-8
 40037c4:	df000115 	stw	fp,4(sp)
 40037c8:	df000104 	addi	fp,sp,4
 40037cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40037d0:	e0bfff17 	ldw	r2,-4(fp)
 40037d4:	108000d0 	cmplti	r2,r2,3
 40037d8:	10000d1e 	bne	r2,zero,4003810 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40037dc:	e0bfff17 	ldw	r2,-4(fp)
 40037e0:	00c10034 	movhi	r3,1024
 40037e4:	18da1f04 	addi	r3,r3,26748
 40037e8:	10800324 	muli	r2,r2,12
 40037ec:	10c5883a 	add	r2,r2,r3
 40037f0:	10800204 	addi	r2,r2,8
 40037f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40037f8:	e0bfff17 	ldw	r2,-4(fp)
 40037fc:	00c10034 	movhi	r3,1024
 4003800:	18da1f04 	addi	r3,r3,26748
 4003804:	10800324 	muli	r2,r2,12
 4003808:	10c5883a 	add	r2,r2,r3
 400380c:	10000015 	stw	zero,0(r2)
  }
}
 4003810:	e037883a 	mov	sp,fp
 4003814:	df000017 	ldw	fp,0(sp)
 4003818:	dec00104 	addi	sp,sp,4
 400381c:	f800283a 	ret

04003820 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4003820:	defff804 	addi	sp,sp,-32
 4003824:	df000715 	stw	fp,28(sp)
 4003828:	df000704 	addi	fp,sp,28
 400382c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003830:	0005303a 	rdctl	r2,status
 4003834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003838:	e0fffb17 	ldw	r3,-20(fp)
 400383c:	00bfff84 	movi	r2,-2
 4003840:	1884703a 	and	r2,r3,r2
 4003844:	1001703a 	wrctl	status,r2
  
  return context;
 4003848:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400384c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4003850:	d0a00a17 	ldw	r2,-32728(gp)
 4003854:	10c000c4 	addi	r3,r2,3
 4003858:	00bfff04 	movi	r2,-4
 400385c:	1884703a 	and	r2,r3,r2
 4003860:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4003864:	d0e00a17 	ldw	r3,-32728(gp)
 4003868:	e0bffe17 	ldw	r2,-8(fp)
 400386c:	1887883a 	add	r3,r3,r2
 4003870:	00815574 	movhi	r2,1365
 4003874:	10955004 	addi	r2,r2,21824
 4003878:	10c0072e 	bgeu	r2,r3,4003898 <sbrk+0x78>
 400387c:	e0bffd17 	ldw	r2,-12(fp)
 4003880:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4003884:	e0bffa17 	ldw	r2,-24(fp)
 4003888:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400388c:	00bfffc4 	movi	r2,-1
 4003890:	e0bfff15 	stw	r2,-4(fp)
 4003894:	00000c06 	br	40038c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4003898:	d0a00a17 	ldw	r2,-32728(gp)
 400389c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 40038a0:	d0e00a17 	ldw	r3,-32728(gp)
 40038a4:	e0bffe17 	ldw	r2,-8(fp)
 40038a8:	1885883a 	add	r2,r3,r2
 40038ac:	d0a00a15 	stw	r2,-32728(gp)
 40038b0:	e0bffd17 	ldw	r2,-12(fp)
 40038b4:	e0bff915 	stw	r2,-28(fp)
 40038b8:	e0bff917 	ldw	r2,-28(fp)
 40038bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40038c0:	e0bffc17 	ldw	r2,-16(fp)
 40038c4:	e0bfff15 	stw	r2,-4(fp)
 40038c8:	e0bfff17 	ldw	r2,-4(fp)
} 
 40038cc:	e037883a 	mov	sp,fp
 40038d0:	df000017 	ldw	fp,0(sp)
 40038d4:	dec00104 	addi	sp,sp,4
 40038d8:	f800283a 	ret

040038dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40038dc:	defff704 	addi	sp,sp,-36
 40038e0:	dfc00815 	stw	ra,32(sp)
 40038e4:	df000715 	stw	fp,28(sp)
 40038e8:	df000704 	addi	fp,sp,28
 40038ec:	e13ffb15 	stw	r4,-20(fp)
 40038f0:	e17ffc15 	stw	r5,-16(fp)
 40038f4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40038f8:	e0bffb17 	ldw	r2,-20(fp)
 40038fc:	1004803a 	cmplt	r2,r2,zero
 4003900:	1000081e 	bne	r2,zero,4003924 <write+0x48>
 4003904:	e0bffb17 	ldw	r2,-20(fp)
 4003908:	10800324 	muli	r2,r2,12
 400390c:	1007883a 	mov	r3,r2
 4003910:	00810034 	movhi	r2,1024
 4003914:	109a1f04 	addi	r2,r2,26748
 4003918:	1887883a 	add	r3,r3,r2
 400391c:	e0ffff15 	stw	r3,-4(fp)
 4003920:	00000106 	br	4003928 <write+0x4c>
 4003924:	e03fff15 	stw	zero,-4(fp)
 4003928:	e0bfff17 	ldw	r2,-4(fp)
 400392c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4003930:	e0bffa17 	ldw	r2,-24(fp)
 4003934:	1005003a 	cmpeq	r2,r2,zero
 4003938:	1000241e 	bne	r2,zero,40039cc <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400393c:	e0bffa17 	ldw	r2,-24(fp)
 4003940:	10800217 	ldw	r2,8(r2)
 4003944:	108000cc 	andi	r2,r2,3
 4003948:	1005003a 	cmpeq	r2,r2,zero
 400394c:	10001a1e 	bne	r2,zero,40039b8 <write+0xdc>
 4003950:	e0bffa17 	ldw	r2,-24(fp)
 4003954:	10800017 	ldw	r2,0(r2)
 4003958:	10800617 	ldw	r2,24(r2)
 400395c:	1005003a 	cmpeq	r2,r2,zero
 4003960:	1000151e 	bne	r2,zero,40039b8 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003964:	e0bffa17 	ldw	r2,-24(fp)
 4003968:	10800017 	ldw	r2,0(r2)
 400396c:	10800617 	ldw	r2,24(r2)
 4003970:	e17ffc17 	ldw	r5,-16(fp)
 4003974:	e1bffd17 	ldw	r6,-12(fp)
 4003978:	e13ffa17 	ldw	r4,-24(fp)
 400397c:	103ee83a 	callr	r2
 4003980:	e0bff915 	stw	r2,-28(fp)
 4003984:	e0bff917 	ldw	r2,-28(fp)
 4003988:	1004403a 	cmpge	r2,r2,zero
 400398c:	1000071e 	bne	r2,zero,40039ac <write+0xd0>
      {
        ALT_ERRNO = -rval;
 4003990:	40039fc0 	call	40039fc <alt_get_errno>
 4003994:	e0fff917 	ldw	r3,-28(fp)
 4003998:	00c7c83a 	sub	r3,zero,r3
 400399c:	10c00015 	stw	r3,0(r2)
        return -1;
 40039a0:	00bfffc4 	movi	r2,-1
 40039a4:	e0bffe15 	stw	r2,-8(fp)
 40039a8:	00000e06 	br	40039e4 <write+0x108>
      }
      return rval;
 40039ac:	e0bff917 	ldw	r2,-28(fp)
 40039b0:	e0bffe15 	stw	r2,-8(fp)
 40039b4:	00000b06 	br	40039e4 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40039b8:	40039fc0 	call	40039fc <alt_get_errno>
 40039bc:	1007883a 	mov	r3,r2
 40039c0:	00800344 	movi	r2,13
 40039c4:	18800015 	stw	r2,0(r3)
 40039c8:	00000406 	br	40039dc <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40039cc:	40039fc0 	call	40039fc <alt_get_errno>
 40039d0:	1007883a 	mov	r3,r2
 40039d4:	00801444 	movi	r2,81
 40039d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40039dc:	00bfffc4 	movi	r2,-1
 40039e0:	e0bffe15 	stw	r2,-8(fp)
 40039e4:	e0bffe17 	ldw	r2,-8(fp)
}
 40039e8:	e037883a 	mov	sp,fp
 40039ec:	dfc00117 	ldw	ra,4(sp)
 40039f0:	df000017 	ldw	fp,0(sp)
 40039f4:	dec00204 	addi	sp,sp,8
 40039f8:	f800283a 	ret

040039fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40039fc:	defffd04 	addi	sp,sp,-12
 4003a00:	dfc00215 	stw	ra,8(sp)
 4003a04:	df000115 	stw	fp,4(sp)
 4003a08:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4003a0c:	00810034 	movhi	r2,1024
 4003a10:	109ea004 	addi	r2,r2,31360
 4003a14:	10800017 	ldw	r2,0(r2)
 4003a18:	1005003a 	cmpeq	r2,r2,zero
 4003a1c:	1000061e 	bne	r2,zero,4003a38 <alt_get_errno+0x3c>
 4003a20:	00810034 	movhi	r2,1024
 4003a24:	109ea004 	addi	r2,r2,31360
 4003a28:	10800017 	ldw	r2,0(r2)
 4003a2c:	103ee83a 	callr	r2
 4003a30:	e0bfff15 	stw	r2,-4(fp)
 4003a34:	00000306 	br	4003a44 <alt_get_errno+0x48>
 4003a38:	00810074 	movhi	r2,1025
 4003a3c:	10a54a04 	addi	r2,r2,-27352
 4003a40:	e0bfff15 	stw	r2,-4(fp)
 4003a44:	e0bfff17 	ldw	r2,-4(fp)
}
 4003a48:	e037883a 	mov	sp,fp
 4003a4c:	dfc00117 	ldw	ra,4(sp)
 4003a50:	df000017 	ldw	fp,0(sp)
 4003a54:	dec00204 	addi	sp,sp,8
 4003a58:	f800283a 	ret

04003a5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4003a5c:	defffd04 	addi	sp,sp,-12
 4003a60:	dfc00215 	stw	ra,8(sp)
 4003a64:	df000115 	stw	fp,4(sp)
 4003a68:	df000104 	addi	fp,sp,4
 4003a6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_3, cpu_3);
 4003a70:	400581c0 	call	400581c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4003a74:	00800044 	movi	r2,1
 4003a78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4003a7c:	e037883a 	mov	sp,fp
 4003a80:	dfc00117 	ldw	ra,4(sp)
 4003a84:	df000017 	ldw	fp,0(sp)
 4003a88:	dec00204 	addi	sp,sp,8
 4003a8c:	f800283a 	ret

04003a90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003a90:	defffe04 	addi	sp,sp,-8
 4003a94:	dfc00115 	stw	ra,4(sp)
 4003a98:	df000015 	stw	fp,0(sp)
 4003a9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_3, timer_3);
 4003aa0:	01020034 	movhi	r4,2048
 4003aa4:	21041804 	addi	r4,r4,4192
 4003aa8:	000b883a 	mov	r5,zero
 4003aac:	01800044 	movi	r6,1
 4003ab0:	01c0fa04 	movi	r7,1000
 4003ab4:	4004ba00 	call	4004ba0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE1_TO_4, fifo_stage1_to_4);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE3_TO_4, fifo_stage3_to_4);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE4_TO_5, fifo_stage4_to_5);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_3, jtag_uart_3);
 4003ab8:	01010034 	movhi	r4,1024
 4003abc:	211a8904 	addi	r4,r4,27172
 4003ac0:	000b883a 	mov	r5,zero
 4003ac4:	01800404 	movi	r6,16
 4003ac8:	40041cc0 	call	40041cc <altera_avalon_jtag_uart_init>
 4003acc:	01010034 	movhi	r4,1024
 4003ad0:	211a7f04 	addi	r4,r4,27132
 4003ad4:	4003aec0 	call	4003aec <alt_dev_reg>
}
 4003ad8:	e037883a 	mov	sp,fp
 4003adc:	dfc00117 	ldw	ra,4(sp)
 4003ae0:	df000017 	ldw	fp,0(sp)
 4003ae4:	dec00204 	addi	sp,sp,8
 4003ae8:	f800283a 	ret

04003aec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4003aec:	defffd04 	addi	sp,sp,-12
 4003af0:	dfc00215 	stw	ra,8(sp)
 4003af4:	df000115 	stw	fp,4(sp)
 4003af8:	df000104 	addi	fp,sp,4
 4003afc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4003b00:	e13fff17 	ldw	r4,-4(fp)
 4003b04:	01410034 	movhi	r5,1024
 4003b08:	295e9d04 	addi	r5,r5,31348
 4003b0c:	4004da00 	call	4004da0 <alt_dev_llist_insert>
}
 4003b10:	e037883a 	mov	sp,fp
 4003b14:	dfc00117 	ldw	ra,4(sp)
 4003b18:	df000017 	ldw	fp,0(sp)
 4003b1c:	dec00204 	addi	sp,sp,8
 4003b20:	f800283a 	ret

04003b24 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 4003b24:	defff904 	addi	sp,sp,-28
 4003b28:	dfc00615 	stw	ra,24(sp)
 4003b2c:	df000515 	stw	fp,20(sp)
 4003b30:	df000504 	addi	fp,sp,20
 4003b34:	e13ffb15 	stw	r4,-20(fp)
 4003b38:	e17ffc15 	stw	r5,-16(fp)
 4003b3c:	e1bffd15 	stw	r6,-12(fp)
 4003b40:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 4003b44:	e13ffb17 	ldw	r4,-20(fp)
 4003b48:	01400fc4 	movi	r5,63
 4003b4c:	4003d140 	call	4003d14 <altera_avalon_fifo_clear_event>
 4003b50:	1005003a 	cmpeq	r2,r2,zero
 4003b54:	1000031e 	bne	r2,zero,4003b64 <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 4003b58:	00bfffc4 	movi	r2,-1
 4003b5c:	e0bfff15 	stw	r2,-4(fp)
 4003b60:	00001906 	br	4003bc8 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 4003b64:	e13ffb17 	ldw	r4,-20(fp)
 4003b68:	e17ffc17 	ldw	r5,-16(fp)
 4003b6c:	4003d7c0 	call	4003d7c <altera_avalon_fifo_write_ienable>
 4003b70:	1005003a 	cmpeq	r2,r2,zero
 4003b74:	1000031e 	bne	r2,zero,4003b84 <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 4003b78:	00bfff84 	movi	r2,-2
 4003b7c:	e0bfff15 	stw	r2,-4(fp)
 4003b80:	00001106 	br	4003bc8 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 4003b84:	e13ffb17 	ldw	r4,-20(fp)
 4003b88:	e17ffe17 	ldw	r5,-8(fp)
 4003b8c:	4003ddc0 	call	4003ddc <altera_avalon_fifo_write_almostfull>
 4003b90:	1005003a 	cmpeq	r2,r2,zero
 4003b94:	1000031e 	bne	r2,zero,4003ba4 <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 4003b98:	00bfff44 	movi	r2,-3
 4003b9c:	e0bfff15 	stw	r2,-4(fp)
 4003ba0:	00000906 	br	4003bc8 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 4003ba4:	e13ffb17 	ldw	r4,-20(fp)
 4003ba8:	e17ffd17 	ldw	r5,-12(fp)
 4003bac:	4003e3c0 	call	4003e3c <altera_avalon_fifo_write_almostempty>
 4003bb0:	1005003a 	cmpeq	r2,r2,zero
 4003bb4:	1000031e 	bne	r2,zero,4003bc4 <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 4003bb8:	00bfff44 	movi	r2,-3
 4003bbc:	e0bfff15 	stw	r2,-4(fp)
 4003bc0:	00000106 	br	4003bc8 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
 4003bc4:	e03fff15 	stw	zero,-4(fp)
 4003bc8:	e0bfff17 	ldw	r2,-4(fp)
}
 4003bcc:	e037883a 	mov	sp,fp
 4003bd0:	dfc00117 	ldw	ra,4(sp)
 4003bd4:	df000017 	ldw	fp,0(sp)
 4003bd8:	dec00204 	addi	sp,sp,8
 4003bdc:	f800283a 	ret

04003be0 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
 4003be0:	defffd04 	addi	sp,sp,-12
 4003be4:	df000215 	stw	fp,8(sp)
 4003be8:	df000204 	addi	fp,sp,8
 4003bec:	e13ffe15 	stw	r4,-8(fp)
 4003bf0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
 4003bf4:	e0bffe17 	ldw	r2,-8(fp)
 4003bf8:	10800104 	addi	r2,r2,4
 4003bfc:	10800037 	ldwio	r2,0(r2)
 4003c00:	1007883a 	mov	r3,r2
 4003c04:	e0bfff17 	ldw	r2,-4(fp)
 4003c08:	1884703a 	and	r2,r3,r2
}
 4003c0c:	e037883a 	mov	sp,fp
 4003c10:	df000017 	ldw	fp,0(sp)
 4003c14:	dec00104 	addi	sp,sp,4
 4003c18:	f800283a 	ret

04003c1c <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
 4003c1c:	defffd04 	addi	sp,sp,-12
 4003c20:	df000215 	stw	fp,8(sp)
 4003c24:	df000204 	addi	fp,sp,8
 4003c28:	e13ffe15 	stw	r4,-8(fp)
 4003c2c:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
 4003c30:	e0bffe17 	ldw	r2,-8(fp)
 4003c34:	10800304 	addi	r2,r2,12
 4003c38:	10800037 	ldwio	r2,0(r2)
 4003c3c:	1007883a 	mov	r3,r2
 4003c40:	e0bfff17 	ldw	r2,-4(fp)
 4003c44:	1884703a 	and	r2,r3,r2
}
 4003c48:	e037883a 	mov	sp,fp
 4003c4c:	df000017 	ldw	fp,0(sp)
 4003c50:	dec00104 	addi	sp,sp,4
 4003c54:	f800283a 	ret

04003c58 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
 4003c58:	defffe04 	addi	sp,sp,-8
 4003c5c:	df000115 	stw	fp,4(sp)
 4003c60:	df000104 	addi	fp,sp,4
 4003c64:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
 4003c68:	e0bfff17 	ldw	r2,-4(fp)
 4003c6c:	10800404 	addi	r2,r2,16
 4003c70:	10800037 	ldwio	r2,0(r2)
}
 4003c74:	e037883a 	mov	sp,fp
 4003c78:	df000017 	ldw	fp,0(sp)
 4003c7c:	dec00104 	addi	sp,sp,4
 4003c80:	f800283a 	ret

04003c84 <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
 4003c84:	defffe04 	addi	sp,sp,-8
 4003c88:	df000115 	stw	fp,4(sp)
 4003c8c:	df000104 	addi	fp,sp,4
 4003c90:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
 4003c94:	e0bfff17 	ldw	r2,-4(fp)
 4003c98:	10800504 	addi	r2,r2,20
 4003c9c:	10800037 	ldwio	r2,0(r2)
}
 4003ca0:	e037883a 	mov	sp,fp
 4003ca4:	df000017 	ldw	fp,0(sp)
 4003ca8:	dec00104 	addi	sp,sp,4
 4003cac:	f800283a 	ret

04003cb0 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
 4003cb0:	defffd04 	addi	sp,sp,-12
 4003cb4:	df000215 	stw	fp,8(sp)
 4003cb8:	df000204 	addi	fp,sp,8
 4003cbc:	e13ffe15 	stw	r4,-8(fp)
 4003cc0:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
 4003cc4:	e0bffe17 	ldw	r2,-8(fp)
 4003cc8:	10800204 	addi	r2,r2,8
 4003ccc:	10800037 	ldwio	r2,0(r2)
 4003cd0:	1007883a 	mov	r3,r2
 4003cd4:	e0bfff17 	ldw	r2,-4(fp)
 4003cd8:	1884703a 	and	r2,r3,r2
}
 4003cdc:	e037883a 	mov	sp,fp
 4003ce0:	df000017 	ldw	fp,0(sp)
 4003ce4:	dec00104 	addi	sp,sp,4
 4003ce8:	f800283a 	ret

04003cec <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
 4003cec:	defffe04 	addi	sp,sp,-8
 4003cf0:	df000115 	stw	fp,4(sp)
 4003cf4:	df000104 	addi	fp,sp,4
 4003cf8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
 4003cfc:	e0bfff17 	ldw	r2,-4(fp)
 4003d00:	10800037 	ldwio	r2,0(r2)
}
 4003d04:	e037883a 	mov	sp,fp
 4003d08:	df000017 	ldw	fp,0(sp)
 4003d0c:	dec00104 	addi	sp,sp,4
 4003d10:	f800283a 	ret

04003d14 <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
 4003d14:	defffc04 	addi	sp,sp,-16
 4003d18:	df000315 	stw	fp,12(sp)
 4003d1c:	df000304 	addi	fp,sp,12
 4003d20:	e13ffd15 	stw	r4,-12(fp)
 4003d24:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
 4003d28:	e0bffd17 	ldw	r2,-12(fp)
 4003d2c:	10800204 	addi	r2,r2,8
 4003d30:	e0fffe17 	ldw	r3,-8(fp)
 4003d34:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
 4003d38:	e0bffd17 	ldw	r2,-12(fp)
 4003d3c:	10800204 	addi	r2,r2,8
 4003d40:	10800037 	ldwio	r2,0(r2)
 4003d44:	1007883a 	mov	r3,r2
 4003d48:	e0bffe17 	ldw	r2,-8(fp)
 4003d4c:	1884703a 	and	r2,r3,r2
 4003d50:	1004c03a 	cmpne	r2,r2,zero
 4003d54:	1000021e 	bne	r2,zero,4003d60 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
 4003d58:	e03fff15 	stw	zero,-4(fp)
 4003d5c:	00000206 	br	4003d68 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 4003d60:	00bfffc4 	movi	r2,-1
 4003d64:	e0bfff15 	stw	r2,-4(fp)
 4003d68:	e0bfff17 	ldw	r2,-4(fp)
}
 4003d6c:	e037883a 	mov	sp,fp
 4003d70:	df000017 	ldw	fp,0(sp)
 4003d74:	dec00104 	addi	sp,sp,4
 4003d78:	f800283a 	ret

04003d7c <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
 4003d7c:	defffc04 	addi	sp,sp,-16
 4003d80:	df000315 	stw	fp,12(sp)
 4003d84:	df000304 	addi	fp,sp,12
 4003d88:	e13ffd15 	stw	r4,-12(fp)
 4003d8c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
 4003d90:	e0bffd17 	ldw	r2,-12(fp)
 4003d94:	10800304 	addi	r2,r2,12
 4003d98:	e0fffe17 	ldw	r3,-8(fp)
 4003d9c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
 4003da0:	e0bffd17 	ldw	r2,-12(fp)
 4003da4:	10800304 	addi	r2,r2,12
 4003da8:	10800037 	ldwio	r2,0(r2)
 4003dac:	1007883a 	mov	r3,r2
 4003db0:	e0bffe17 	ldw	r2,-8(fp)
 4003db4:	1880021e 	bne	r3,r2,4003dc0 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
 4003db8:	e03fff15 	stw	zero,-4(fp)
 4003dbc:	00000206 	br	4003dc8 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 4003dc0:	00bfff84 	movi	r2,-2
 4003dc4:	e0bfff15 	stw	r2,-4(fp)
 4003dc8:	e0bfff17 	ldw	r2,-4(fp)
}
 4003dcc:	e037883a 	mov	sp,fp
 4003dd0:	df000017 	ldw	fp,0(sp)
 4003dd4:	dec00104 	addi	sp,sp,4
 4003dd8:	f800283a 	ret

04003ddc <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
 4003ddc:	defffc04 	addi	sp,sp,-16
 4003de0:	df000315 	stw	fp,12(sp)
 4003de4:	df000304 	addi	fp,sp,12
 4003de8:	e13ffd15 	stw	r4,-12(fp)
 4003dec:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
 4003df0:	e0bffd17 	ldw	r2,-12(fp)
 4003df4:	10800404 	addi	r2,r2,16
 4003df8:	e0fffe17 	ldw	r3,-8(fp)
 4003dfc:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
 4003e00:	e0bffd17 	ldw	r2,-12(fp)
 4003e04:	10800404 	addi	r2,r2,16
 4003e08:	10800037 	ldwio	r2,0(r2)
 4003e0c:	1007883a 	mov	r3,r2
 4003e10:	e0bffe17 	ldw	r2,-8(fp)
 4003e14:	1880021e 	bne	r3,r2,4003e20 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
 4003e18:	e03fff15 	stw	zero,-4(fp)
 4003e1c:	00000206 	br	4003e28 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 4003e20:	00bfff44 	movi	r2,-3
 4003e24:	e0bfff15 	stw	r2,-4(fp)
 4003e28:	e0bfff17 	ldw	r2,-4(fp)
}
 4003e2c:	e037883a 	mov	sp,fp
 4003e30:	df000017 	ldw	fp,0(sp)
 4003e34:	dec00104 	addi	sp,sp,4
 4003e38:	f800283a 	ret

04003e3c <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
 4003e3c:	defffc04 	addi	sp,sp,-16
 4003e40:	df000315 	stw	fp,12(sp)
 4003e44:	df000304 	addi	fp,sp,12
 4003e48:	e13ffd15 	stw	r4,-12(fp)
 4003e4c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
 4003e50:	e0bffd17 	ldw	r2,-12(fp)
 4003e54:	10800504 	addi	r2,r2,20
 4003e58:	e0fffe17 	ldw	r3,-8(fp)
 4003e5c:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
 4003e60:	e0bffd17 	ldw	r2,-12(fp)
 4003e64:	10800504 	addi	r2,r2,20
 4003e68:	10800037 	ldwio	r2,0(r2)
 4003e6c:	1007883a 	mov	r3,r2
 4003e70:	e0bffe17 	ldw	r2,-8(fp)
 4003e74:	1880021e 	bne	r3,r2,4003e80 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
 4003e78:	e03fff15 	stw	zero,-4(fp)
 4003e7c:	00000206 	br	4003e88 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 4003e80:	00bfff44 	movi	r2,-3
 4003e84:	e0bfff15 	stw	r2,-4(fp)
 4003e88:	e0bfff17 	ldw	r2,-4(fp)
}
 4003e8c:	e037883a 	mov	sp,fp
 4003e90:	df000017 	ldw	fp,0(sp)
 4003e94:	dec00104 	addi	sp,sp,4
 4003e98:	f800283a 	ret

04003e9c <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 4003e9c:	defffa04 	addi	sp,sp,-24
 4003ea0:	dfc00515 	stw	ra,20(sp)
 4003ea4:	df000415 	stw	fp,16(sp)
 4003ea8:	df000404 	addi	fp,sp,16
 4003eac:	e13ffc15 	stw	r4,-16(fp)
 4003eb0:	e17ffd15 	stw	r5,-12(fp)
 4003eb4:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 4003eb8:	e13ffd17 	ldw	r4,-12(fp)
 4003ebc:	01400044 	movi	r5,1
 4003ec0:	4003be00 	call	4003be0 <altera_avalon_fifo_read_status>
 4003ec4:	1004c03a 	cmpne	r2,r2,zero
 4003ec8:	1000051e 	bne	r2,zero,4003ee0 <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
 4003ecc:	e0bffc17 	ldw	r2,-16(fp)
 4003ed0:	e0fffe17 	ldw	r3,-8(fp)
 4003ed4:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
 4003ed8:	e03fff15 	stw	zero,-4(fp)
 4003edc:	00000206 	br	4003ee8 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
 4003ee0:	00bfff04 	movi	r2,-4
 4003ee4:	e0bfff15 	stw	r2,-4(fp)
 4003ee8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 4003eec:	e037883a 	mov	sp,fp
 4003ef0:	dfc00117 	ldw	ra,4(sp)
 4003ef4:	df000017 	ldw	fp,0(sp)
 4003ef8:	dec00204 	addi	sp,sp,8
 4003efc:	f800283a 	ret

04003f00 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 4003f00:	defffa04 	addi	sp,sp,-24
 4003f04:	dfc00515 	stw	ra,20(sp)
 4003f08:	df000415 	stw	fp,16(sp)
 4003f0c:	df000404 	addi	fp,sp,16
 4003f10:	e13ffd15 	stw	r4,-12(fp)
 4003f14:	e17ffe15 	stw	r5,-8(fp)
 4003f18:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
 4003f1c:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
 4003f20:	e0bfff17 	ldw	r2,-4(fp)
 4003f24:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 4003f28:	e13ffe17 	ldw	r4,-8(fp)
 4003f2c:	01400084 	movi	r5,2
 4003f30:	4003be00 	call	4003be0 <altera_avalon_fifo_read_status>
 4003f34:	1004c03a 	cmpne	r2,r2,zero
 4003f38:	1000071e 	bne	r2,zero,4003f58 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 4003f3c:	e13ffe17 	ldw	r4,-8(fp)
 4003f40:	4003cec0 	call	4003cec <altera_avalon_fifo_read_level>
 4003f44:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 4003f48:	e0bffd17 	ldw	r2,-12(fp)
 4003f4c:	10c00037 	ldwio	r3,0(r2)
 4003f50:	e0bfff17 	ldw	r2,-4(fp)
 4003f54:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
 4003f58:	e0bffc17 	ldw	r2,-16(fp)
}
 4003f5c:	e037883a 	mov	sp,fp
 4003f60:	dfc00117 	ldw	ra,4(sp)
 4003f64:	df000017 	ldw	fp,0(sp)
 4003f68:	dec00204 	addi	sp,sp,8
 4003f6c:	f800283a 	ret

04003f70 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 4003f70:	defffb04 	addi	sp,sp,-20
 4003f74:	dfc00415 	stw	ra,16(sp)
 4003f78:	df000315 	stw	fp,12(sp)
 4003f7c:	df000304 	addi	fp,sp,12
 4003f80:	e13ffd15 	stw	r4,-12(fp)
 4003f84:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 4003f88:	e13ffe17 	ldw	r4,-8(fp)
 4003f8c:	01400084 	movi	r5,2
 4003f90:	4003be00 	call	4003be0 <altera_avalon_fifo_read_status>
 4003f94:	1004c03a 	cmpne	r2,r2,zero
 4003f98:	1000041e 	bne	r2,zero,4003fac <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 4003f9c:	e0bffd17 	ldw	r2,-12(fp)
 4003fa0:	10800037 	ldwio	r2,0(r2)
 4003fa4:	e0bfff15 	stw	r2,-4(fp)
 4003fa8:	00000106 	br	4003fb0 <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
 4003fac:	e03fff15 	stw	zero,-4(fp)
 4003fb0:	e0bfff17 	ldw	r2,-4(fp)
}
 4003fb4:	e037883a 	mov	sp,fp
 4003fb8:	dfc00117 	ldw	ra,4(sp)
 4003fbc:	df000017 	ldw	fp,0(sp)
 4003fc0:	dec00204 	addi	sp,sp,8
 4003fc4:	f800283a 	ret

04003fc8 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 4003fc8:	defffa04 	addi	sp,sp,-24
 4003fcc:	dfc00515 	stw	ra,20(sp)
 4003fd0:	df000415 	stw	fp,16(sp)
 4003fd4:	df000404 	addi	fp,sp,16
 4003fd8:	e13ffc15 	stw	r4,-16(fp)
 4003fdc:	e17ffd15 	stw	r5,-12(fp)
 4003fe0:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 4003fe4:	e13ffd17 	ldw	r4,-12(fp)
 4003fe8:	01400044 	movi	r5,1
 4003fec:	4003be00 	call	4003be0 <altera_avalon_fifo_read_status>
 4003ff0:	1004c03a 	cmpne	r2,r2,zero
 4003ff4:	1000061e 	bne	r2,zero,4004010 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
 4003ff8:	e0bffc17 	ldw	r2,-16(fp)
 4003ffc:	10800104 	addi	r2,r2,4
 4004000:	e0fffe17 	ldw	r3,-8(fp)
 4004004:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
 4004008:	e03fff15 	stw	zero,-4(fp)
 400400c:	00000206 	br	4004018 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
 4004010:	00bfff04 	movi	r2,-4
 4004014:	e0bfff15 	stw	r2,-4(fp)
 4004018:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 400401c:	e037883a 	mov	sp,fp
 4004020:	dfc00117 	ldw	ra,4(sp)
 4004024:	df000017 	ldw	fp,0(sp)
 4004028:	dec00204 	addi	sp,sp,8
 400402c:	f800283a 	ret

04004030 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
 4004030:	defffe04 	addi	sp,sp,-8
 4004034:	df000115 	stw	fp,4(sp)
 4004038:	df000104 	addi	fp,sp,4
 400403c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
 4004040:	e0bfff17 	ldw	r2,-4(fp)
 4004044:	10800104 	addi	r2,r2,4
 4004048:	10800037 	ldwio	r2,0(r2)
}
 400404c:	e037883a 	mov	sp,fp
 4004050:	df000017 	ldw	fp,0(sp)
 4004054:	dec00104 	addi	sp,sp,4
 4004058:	f800283a 	ret

0400405c <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
 400405c:	defffe04 	addi	sp,sp,-8
 4004060:	df000115 	stw	fp,4(sp)
 4004064:	df000104 	addi	fp,sp,4
 4004068:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
 400406c:	e0bfff17 	ldw	r2,-4(fp)
 4004070:	10800037 	ldwio	r2,0(r2)
}
 4004074:	e037883a 	mov	sp,fp
 4004078:	df000017 	ldw	fp,0(sp)
 400407c:	dec00104 	addi	sp,sp,4
 4004080:	f800283a 	ret

04004084 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4004084:	defffa04 	addi	sp,sp,-24
 4004088:	dfc00515 	stw	ra,20(sp)
 400408c:	df000415 	stw	fp,16(sp)
 4004090:	df000404 	addi	fp,sp,16
 4004094:	e13ffd15 	stw	r4,-12(fp)
 4004098:	e17ffe15 	stw	r5,-8(fp)
 400409c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40040a0:	e0bffd17 	ldw	r2,-12(fp)
 40040a4:	10800017 	ldw	r2,0(r2)
 40040a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40040ac:	e0bffc17 	ldw	r2,-16(fp)
 40040b0:	11000a04 	addi	r4,r2,40
 40040b4:	e0bffd17 	ldw	r2,-12(fp)
 40040b8:	11c00217 	ldw	r7,8(r2)
 40040bc:	e17ffe17 	ldw	r5,-8(fp)
 40040c0:	e1bfff17 	ldw	r6,-4(fp)
 40040c4:	40046cc0 	call	40046cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40040c8:	e037883a 	mov	sp,fp
 40040cc:	dfc00117 	ldw	ra,4(sp)
 40040d0:	df000017 	ldw	fp,0(sp)
 40040d4:	dec00204 	addi	sp,sp,8
 40040d8:	f800283a 	ret

040040dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40040dc:	defffa04 	addi	sp,sp,-24
 40040e0:	dfc00515 	stw	ra,20(sp)
 40040e4:	df000415 	stw	fp,16(sp)
 40040e8:	df000404 	addi	fp,sp,16
 40040ec:	e13ffd15 	stw	r4,-12(fp)
 40040f0:	e17ffe15 	stw	r5,-8(fp)
 40040f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40040f8:	e0bffd17 	ldw	r2,-12(fp)
 40040fc:	10800017 	ldw	r2,0(r2)
 4004100:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4004104:	e0bffc17 	ldw	r2,-16(fp)
 4004108:	11000a04 	addi	r4,r2,40
 400410c:	e0bffd17 	ldw	r2,-12(fp)
 4004110:	11c00217 	ldw	r7,8(r2)
 4004114:	e17ffe17 	ldw	r5,-8(fp)
 4004118:	e1bfff17 	ldw	r6,-4(fp)
 400411c:	40048f00 	call	40048f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4004120:	e037883a 	mov	sp,fp
 4004124:	dfc00117 	ldw	ra,4(sp)
 4004128:	df000017 	ldw	fp,0(sp)
 400412c:	dec00204 	addi	sp,sp,8
 4004130:	f800283a 	ret

04004134 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4004134:	defffc04 	addi	sp,sp,-16
 4004138:	dfc00315 	stw	ra,12(sp)
 400413c:	df000215 	stw	fp,8(sp)
 4004140:	df000204 	addi	fp,sp,8
 4004144:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4004148:	e0bfff17 	ldw	r2,-4(fp)
 400414c:	10800017 	ldw	r2,0(r2)
 4004150:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4004154:	e0bffe17 	ldw	r2,-8(fp)
 4004158:	11000a04 	addi	r4,r2,40
 400415c:	e0bfff17 	ldw	r2,-4(fp)
 4004160:	11400217 	ldw	r5,8(r2)
 4004164:	40045640 	call	4004564 <altera_avalon_jtag_uart_close>
}
 4004168:	e037883a 	mov	sp,fp
 400416c:	dfc00117 	ldw	ra,4(sp)
 4004170:	df000017 	ldw	fp,0(sp)
 4004174:	dec00204 	addi	sp,sp,8
 4004178:	f800283a 	ret

0400417c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400417c:	defffa04 	addi	sp,sp,-24
 4004180:	dfc00515 	stw	ra,20(sp)
 4004184:	df000415 	stw	fp,16(sp)
 4004188:	df000404 	addi	fp,sp,16
 400418c:	e13ffd15 	stw	r4,-12(fp)
 4004190:	e17ffe15 	stw	r5,-8(fp)
 4004194:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4004198:	e0bffd17 	ldw	r2,-12(fp)
 400419c:	10800017 	ldw	r2,0(r2)
 40041a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40041a4:	e0bffc17 	ldw	r2,-16(fp)
 40041a8:	11000a04 	addi	r4,r2,40
 40041ac:	e17ffe17 	ldw	r5,-8(fp)
 40041b0:	e1bfff17 	ldw	r6,-4(fp)
 40041b4:	40045d80 	call	40045d8 <altera_avalon_jtag_uart_ioctl>
}
 40041b8:	e037883a 	mov	sp,fp
 40041bc:	dfc00117 	ldw	ra,4(sp)
 40041c0:	df000017 	ldw	fp,0(sp)
 40041c4:	dec00204 	addi	sp,sp,8
 40041c8:	f800283a 	ret

040041cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40041cc:	defffa04 	addi	sp,sp,-24
 40041d0:	dfc00515 	stw	ra,20(sp)
 40041d4:	df000415 	stw	fp,16(sp)
 40041d8:	df000404 	addi	fp,sp,16
 40041dc:	e13ffd15 	stw	r4,-12(fp)
 40041e0:	e17ffe15 	stw	r5,-8(fp)
 40041e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40041e8:	e0fffd17 	ldw	r3,-12(fp)
 40041ec:	00800044 	movi	r2,1
 40041f0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40041f4:	e0bffd17 	ldw	r2,-12(fp)
 40041f8:	10800017 	ldw	r2,0(r2)
 40041fc:	11000104 	addi	r4,r2,4
 4004200:	e0bffd17 	ldw	r2,-12(fp)
 4004204:	10800817 	ldw	r2,32(r2)
 4004208:	1007883a 	mov	r3,r2
 400420c:	2005883a 	mov	r2,r4
 4004210:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4004214:	e13ffe17 	ldw	r4,-8(fp)
 4004218:	e17fff17 	ldw	r5,-4(fp)
 400421c:	d8000015 	stw	zero,0(sp)
 4004220:	01810034 	movhi	r6,1024
 4004224:	3190a304 	addi	r6,r6,17036
 4004228:	e1fffd17 	ldw	r7,-12(fp)
 400422c:	4004fac0 	call	4004fac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4004230:	e0bffd17 	ldw	r2,-12(fp)
 4004234:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4004238:	e0bffd17 	ldw	r2,-12(fp)
 400423c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004240:	00810074 	movhi	r2,1025
 4004244:	10a54f04 	addi	r2,r2,-27332
 4004248:	10800017 	ldw	r2,0(r2)
 400424c:	100b883a 	mov	r5,r2
 4004250:	01810034 	movhi	r6,1024
 4004254:	31912d04 	addi	r6,r6,17588
 4004258:	e1fffd17 	ldw	r7,-12(fp)
 400425c:	4004c300 	call	4004c30 <alt_alarm_start>
 4004260:	1004403a 	cmpge	r2,r2,zero
 4004264:	1000041e 	bne	r2,zero,4004278 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4004268:	e0fffd17 	ldw	r3,-12(fp)
 400426c:	00a00034 	movhi	r2,32768
 4004270:	10bfffc4 	addi	r2,r2,-1
 4004274:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4004278:	e037883a 	mov	sp,fp
 400427c:	dfc00117 	ldw	ra,4(sp)
 4004280:	df000017 	ldw	fp,0(sp)
 4004284:	dec00204 	addi	sp,sp,8
 4004288:	f800283a 	ret

0400428c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400428c:	defff804 	addi	sp,sp,-32
 4004290:	df000715 	stw	fp,28(sp)
 4004294:	df000704 	addi	fp,sp,28
 4004298:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400429c:	e0bfff17 	ldw	r2,-4(fp)
 40042a0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 40042a4:	e0bffe17 	ldw	r2,-8(fp)
 40042a8:	10800017 	ldw	r2,0(r2)
 40042ac:	e0bffd15 	stw	r2,-12(fp)
 40042b0:	00000006 	br	40042b4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40042b4:	e0bffd17 	ldw	r2,-12(fp)
 40042b8:	10800104 	addi	r2,r2,4
 40042bc:	10800037 	ldwio	r2,0(r2)
 40042c0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	1080c00c 	andi	r2,r2,768
 40042cc:	1005003a 	cmpeq	r2,r2,zero
 40042d0:	1000741e 	bne	r2,zero,40044a4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40042d4:	e0bffc17 	ldw	r2,-16(fp)
 40042d8:	1080400c 	andi	r2,r2,256
 40042dc:	1005003a 	cmpeq	r2,r2,zero
 40042e0:	1000351e 	bne	r2,zero,40043b8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40042e4:	00800074 	movhi	r2,1
 40042e8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40042ec:	e0bffe17 	ldw	r2,-8(fp)
 40042f0:	10800a17 	ldw	r2,40(r2)
 40042f4:	10800044 	addi	r2,r2,1
 40042f8:	1081ffcc 	andi	r2,r2,2047
 40042fc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 4004300:	e0bffe17 	ldw	r2,-8(fp)
 4004304:	10c00b17 	ldw	r3,44(r2)
 4004308:	e0bffa17 	ldw	r2,-24(fp)
 400430c:	18801626 	beq	r3,r2,4004368 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4004310:	e0bffd17 	ldw	r2,-12(fp)
 4004314:	10800037 	ldwio	r2,0(r2)
 4004318:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400431c:	e0bffb17 	ldw	r2,-20(fp)
 4004320:	10a0000c 	andi	r2,r2,32768
 4004324:	1005003a 	cmpeq	r2,r2,zero
 4004328:	10000f1e 	bne	r2,zero,4004368 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400432c:	e0bffe17 	ldw	r2,-8(fp)
 4004330:	10c00a17 	ldw	r3,40(r2)
 4004334:	e0bffb17 	ldw	r2,-20(fp)
 4004338:	1009883a 	mov	r4,r2
 400433c:	e0bffe17 	ldw	r2,-8(fp)
 4004340:	1885883a 	add	r2,r3,r2
 4004344:	10800e04 	addi	r2,r2,56
 4004348:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400434c:	e0bffe17 	ldw	r2,-8(fp)
 4004350:	10800a17 	ldw	r2,40(r2)
 4004354:	10800044 	addi	r2,r2,1
 4004358:	10c1ffcc 	andi	r3,r2,2047
 400435c:	e0bffe17 	ldw	r2,-8(fp)
 4004360:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4004364:	003fe106 	br	40042ec <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4004368:	e0bffb17 	ldw	r2,-20(fp)
 400436c:	10bfffec 	andhi	r2,r2,65535
 4004370:	1005003a 	cmpeq	r2,r2,zero
 4004374:	1000101e 	bne	r2,zero,40043b8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004378:	e0bffe17 	ldw	r2,-8(fp)
 400437c:	10c00817 	ldw	r3,32(r2)
 4004380:	00bfff84 	movi	r2,-2
 4004384:	1886703a 	and	r3,r3,r2
 4004388:	e0bffe17 	ldw	r2,-8(fp)
 400438c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4004390:	e0bffd17 	ldw	r2,-12(fp)
 4004394:	11000104 	addi	r4,r2,4
 4004398:	e0bffe17 	ldw	r2,-8(fp)
 400439c:	10800817 	ldw	r2,32(r2)
 40043a0:	1007883a 	mov	r3,r2
 40043a4:	2005883a 	mov	r2,r4
 40043a8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40043ac:	e0bffd17 	ldw	r2,-12(fp)
 40043b0:	10800104 	addi	r2,r2,4
 40043b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40043b8:	e0bffc17 	ldw	r2,-16(fp)
 40043bc:	1080800c 	andi	r2,r2,512
 40043c0:	1005003a 	cmpeq	r2,r2,zero
 40043c4:	103fbb1e 	bne	r2,zero,40042b4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40043c8:	e0bffc17 	ldw	r2,-16(fp)
 40043cc:	10bfffec 	andhi	r2,r2,65535
 40043d0:	1004d43a 	srli	r2,r2,16
 40043d4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40043d8:	00001506 	br	4004430 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40043dc:	e13ffd17 	ldw	r4,-12(fp)
 40043e0:	e0bffe17 	ldw	r2,-8(fp)
 40043e4:	10c00d17 	ldw	r3,52(r2)
 40043e8:	e0bffe17 	ldw	r2,-8(fp)
 40043ec:	1885883a 	add	r2,r3,r2
 40043f0:	10820e04 	addi	r2,r2,2104
 40043f4:	10800003 	ldbu	r2,0(r2)
 40043f8:	10c03fcc 	andi	r3,r2,255
 40043fc:	18c0201c 	xori	r3,r3,128
 4004400:	18ffe004 	addi	r3,r3,-128
 4004404:	2005883a 	mov	r2,r4
 4004408:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400440c:	e0bffe17 	ldw	r2,-8(fp)
 4004410:	10800d17 	ldw	r2,52(r2)
 4004414:	10800044 	addi	r2,r2,1
 4004418:	10c1ffcc 	andi	r3,r2,2047
 400441c:	e0bffe17 	ldw	r2,-8(fp)
 4004420:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4004424:	e0bff917 	ldw	r2,-28(fp)
 4004428:	10bfffc4 	addi	r2,r2,-1
 400442c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4004430:	e0bff917 	ldw	r2,-28(fp)
 4004434:	1005003a 	cmpeq	r2,r2,zero
 4004438:	1000051e 	bne	r2,zero,4004450 <altera_avalon_jtag_uart_irq+0x1c4>
 400443c:	e0bffe17 	ldw	r2,-8(fp)
 4004440:	10c00d17 	ldw	r3,52(r2)
 4004444:	e0bffe17 	ldw	r2,-8(fp)
 4004448:	10800c17 	ldw	r2,48(r2)
 400444c:	18bfe31e 	bne	r3,r2,40043dc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4004450:	e0bff917 	ldw	r2,-28(fp)
 4004454:	1005003a 	cmpeq	r2,r2,zero
 4004458:	103f961e 	bne	r2,zero,40042b4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400445c:	e0bffe17 	ldw	r2,-8(fp)
 4004460:	10c00817 	ldw	r3,32(r2)
 4004464:	00bfff44 	movi	r2,-3
 4004468:	1886703a 	and	r3,r3,r2
 400446c:	e0bffe17 	ldw	r2,-8(fp)
 4004470:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004474:	e0bffe17 	ldw	r2,-8(fp)
 4004478:	10800017 	ldw	r2,0(r2)
 400447c:	11000104 	addi	r4,r2,4
 4004480:	e0bffe17 	ldw	r2,-8(fp)
 4004484:	10800817 	ldw	r2,32(r2)
 4004488:	1007883a 	mov	r3,r2
 400448c:	2005883a 	mov	r2,r4
 4004490:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4004494:	e0bffd17 	ldw	r2,-12(fp)
 4004498:	10800104 	addi	r2,r2,4
 400449c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40044a0:	003f8406 	br	40042b4 <altera_avalon_jtag_uart_irq+0x28>
}
 40044a4:	e037883a 	mov	sp,fp
 40044a8:	df000017 	ldw	fp,0(sp)
 40044ac:	dec00104 	addi	sp,sp,4
 40044b0:	f800283a 	ret

040044b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40044b4:	defffc04 	addi	sp,sp,-16
 40044b8:	df000315 	stw	fp,12(sp)
 40044bc:	df000304 	addi	fp,sp,12
 40044c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40044c4:	e0bfff17 	ldw	r2,-4(fp)
 40044c8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40044cc:	e0bffe17 	ldw	r2,-8(fp)
 40044d0:	10800017 	ldw	r2,0(r2)
 40044d4:	10800104 	addi	r2,r2,4
 40044d8:	10800037 	ldwio	r2,0(r2)
 40044dc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40044e0:	e0bffd17 	ldw	r2,-12(fp)
 40044e4:	1081000c 	andi	r2,r2,1024
 40044e8:	1005003a 	cmpeq	r2,r2,zero
 40044ec:	10000c1e 	bne	r2,zero,4004520 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40044f0:	e0bffe17 	ldw	r2,-8(fp)
 40044f4:	10800017 	ldw	r2,0(r2)
 40044f8:	11000104 	addi	r4,r2,4
 40044fc:	e0bffe17 	ldw	r2,-8(fp)
 4004500:	10800817 	ldw	r2,32(r2)
 4004504:	10810014 	ori	r2,r2,1024
 4004508:	1007883a 	mov	r3,r2
 400450c:	2005883a 	mov	r2,r4
 4004510:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4004514:	e0bffe17 	ldw	r2,-8(fp)
 4004518:	10000915 	stw	zero,36(r2)
 400451c:	00000a06 	br	4004548 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4004520:	e0bffe17 	ldw	r2,-8(fp)
 4004524:	10c00917 	ldw	r3,36(r2)
 4004528:	00a00034 	movhi	r2,32768
 400452c:	10bfff04 	addi	r2,r2,-4
 4004530:	10c00536 	bltu	r2,r3,4004548 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 4004534:	e0bffe17 	ldw	r2,-8(fp)
 4004538:	10800917 	ldw	r2,36(r2)
 400453c:	10c00044 	addi	r3,r2,1
 4004540:	e0bffe17 	ldw	r2,-8(fp)
 4004544:	10c00915 	stw	r3,36(r2)
 4004548:	00810074 	movhi	r2,1025
 400454c:	10a54f04 	addi	r2,r2,-27332
 4004550:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4004554:	e037883a 	mov	sp,fp
 4004558:	df000017 	ldw	fp,0(sp)
 400455c:	dec00104 	addi	sp,sp,4
 4004560:	f800283a 	ret

04004564 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4004564:	defffc04 	addi	sp,sp,-16
 4004568:	df000315 	stw	fp,12(sp)
 400456c:	df000304 	addi	fp,sp,12
 4004570:	e13ffd15 	stw	r4,-12(fp)
 4004574:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4004578:	00000706 	br	4004598 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 400457c:	e0bffe17 	ldw	r2,-8(fp)
 4004580:	1090000c 	andi	r2,r2,16384
 4004584:	1005003a 	cmpeq	r2,r2,zero
 4004588:	1000031e 	bne	r2,zero,4004598 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 400458c:	00bffd44 	movi	r2,-11
 4004590:	e0bfff15 	stw	r2,-4(fp)
 4004594:	00000b06 	br	40045c4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4004598:	e0bffd17 	ldw	r2,-12(fp)
 400459c:	10c00d17 	ldw	r3,52(r2)
 40045a0:	e0bffd17 	ldw	r2,-12(fp)
 40045a4:	10800c17 	ldw	r2,48(r2)
 40045a8:	18800526 	beq	r3,r2,40045c0 <altera_avalon_jtag_uart_close+0x5c>
 40045ac:	e0bffd17 	ldw	r2,-12(fp)
 40045b0:	10c00917 	ldw	r3,36(r2)
 40045b4:	e0bffd17 	ldw	r2,-12(fp)
 40045b8:	10800117 	ldw	r2,4(r2)
 40045bc:	18bfef36 	bltu	r3,r2,400457c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40045c0:	e03fff15 	stw	zero,-4(fp)
 40045c4:	e0bfff17 	ldw	r2,-4(fp)
}
 40045c8:	e037883a 	mov	sp,fp
 40045cc:	df000017 	ldw	fp,0(sp)
 40045d0:	dec00104 	addi	sp,sp,4
 40045d4:	f800283a 	ret

040045d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40045d8:	defff804 	addi	sp,sp,-32
 40045dc:	df000715 	stw	fp,28(sp)
 40045e0:	df000704 	addi	fp,sp,28
 40045e4:	e13ffb15 	stw	r4,-20(fp)
 40045e8:	e17ffc15 	stw	r5,-16(fp)
 40045ec:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 40045f0:	00bff9c4 	movi	r2,-25
 40045f4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 40045f8:	e0bffc17 	ldw	r2,-16(fp)
 40045fc:	e0bfff15 	stw	r2,-4(fp)
 4004600:	e0ffff17 	ldw	r3,-4(fp)
 4004604:	189a8060 	cmpeqi	r2,r3,27137
 4004608:	1000041e 	bne	r2,zero,400461c <altera_avalon_jtag_uart_ioctl+0x44>
 400460c:	e0ffff17 	ldw	r3,-4(fp)
 4004610:	189a80a0 	cmpeqi	r2,r3,27138
 4004614:	10001b1e 	bne	r2,zero,4004684 <altera_avalon_jtag_uart_ioctl+0xac>
 4004618:	00002706 	br	40046b8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400461c:	e0bffb17 	ldw	r2,-20(fp)
 4004620:	10c00117 	ldw	r3,4(r2)
 4004624:	00a00034 	movhi	r2,32768
 4004628:	10bfffc4 	addi	r2,r2,-1
 400462c:	18802226 	beq	r3,r2,40046b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4004630:	e0bffd17 	ldw	r2,-12(fp)
 4004634:	10800017 	ldw	r2,0(r2)
 4004638:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400463c:	e0bff917 	ldw	r2,-28(fp)
 4004640:	10800090 	cmplti	r2,r2,2
 4004644:	1000071e 	bne	r2,zero,4004664 <altera_avalon_jtag_uart_ioctl+0x8c>
 4004648:	e0fff917 	ldw	r3,-28(fp)
 400464c:	00a00034 	movhi	r2,32768
 4004650:	10bfffc4 	addi	r2,r2,-1
 4004654:	18800326 	beq	r3,r2,4004664 <altera_avalon_jtag_uart_ioctl+0x8c>
 4004658:	e0bff917 	ldw	r2,-28(fp)
 400465c:	e0bffe15 	stw	r2,-8(fp)
 4004660:	00000306 	br	4004670 <altera_avalon_jtag_uart_ioctl+0x98>
 4004664:	00e00034 	movhi	r3,32768
 4004668:	18ffff84 	addi	r3,r3,-2
 400466c:	e0fffe15 	stw	r3,-8(fp)
 4004670:	e0bffb17 	ldw	r2,-20(fp)
 4004674:	e0fffe17 	ldw	r3,-8(fp)
 4004678:	10c00115 	stw	r3,4(r2)
      rc = 0;
 400467c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4004680:	00000d06 	br	40046b8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4004684:	e0bffb17 	ldw	r2,-20(fp)
 4004688:	10c00117 	ldw	r3,4(r2)
 400468c:	00a00034 	movhi	r2,32768
 4004690:	10bfffc4 	addi	r2,r2,-1
 4004694:	18800826 	beq	r3,r2,40046b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4004698:	e13ffd17 	ldw	r4,-12(fp)
 400469c:	e0bffb17 	ldw	r2,-20(fp)
 40046a0:	10c00917 	ldw	r3,36(r2)
 40046a4:	e0bffb17 	ldw	r2,-20(fp)
 40046a8:	10800117 	ldw	r2,4(r2)
 40046ac:	1885803a 	cmpltu	r2,r3,r2
 40046b0:	20800015 	stw	r2,0(r4)
      rc = 0;
 40046b4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 40046b8:	e0bffa17 	ldw	r2,-24(fp)
}
 40046bc:	e037883a 	mov	sp,fp
 40046c0:	df000017 	ldw	fp,0(sp)
 40046c4:	dec00104 	addi	sp,sp,4
 40046c8:	f800283a 	ret

040046cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40046cc:	defff204 	addi	sp,sp,-56
 40046d0:	dfc00d15 	stw	ra,52(sp)
 40046d4:	df000c15 	stw	fp,48(sp)
 40046d8:	df000c04 	addi	fp,sp,48
 40046dc:	e13ffb15 	stw	r4,-20(fp)
 40046e0:	e17ffc15 	stw	r5,-16(fp)
 40046e4:	e1bffd15 	stw	r6,-12(fp)
 40046e8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 40046ec:	e0bffc17 	ldw	r2,-16(fp)
 40046f0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40046f4:	00004806 	br	4004818 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40046f8:	e0bffb17 	ldw	r2,-20(fp)
 40046fc:	10800a17 	ldw	r2,40(r2)
 4004700:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4004704:	e0bffb17 	ldw	r2,-20(fp)
 4004708:	10800b17 	ldw	r2,44(r2)
 400470c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 4004710:	e0fff717 	ldw	r3,-36(fp)
 4004714:	e0bff617 	ldw	r2,-40(fp)
 4004718:	18800536 	bltu	r3,r2,4004730 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400471c:	e0bff717 	ldw	r2,-36(fp)
 4004720:	e0fff617 	ldw	r3,-40(fp)
 4004724:	10c5c83a 	sub	r2,r2,r3
 4004728:	e0bff815 	stw	r2,-32(fp)
 400472c:	00000406 	br	4004740 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4004730:	00820004 	movi	r2,2048
 4004734:	e0fff617 	ldw	r3,-40(fp)
 4004738:	10c5c83a 	sub	r2,r2,r3
 400473c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4004740:	e0bff817 	ldw	r2,-32(fp)
 4004744:	1005003a 	cmpeq	r2,r2,zero
 4004748:	10001f1e 	bne	r2,zero,40047c8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 400474c:	e0fffd17 	ldw	r3,-12(fp)
 4004750:	e0bff817 	ldw	r2,-32(fp)
 4004754:	1880022e 	bgeu	r3,r2,4004760 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 4004758:	e0bffd17 	ldw	r2,-12(fp)
 400475c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4004760:	e0bffb17 	ldw	r2,-20(fp)
 4004764:	10c00e04 	addi	r3,r2,56
 4004768:	e0bff617 	ldw	r2,-40(fp)
 400476c:	1887883a 	add	r3,r3,r2
 4004770:	e0bffa17 	ldw	r2,-24(fp)
 4004774:	1009883a 	mov	r4,r2
 4004778:	180b883a 	mov	r5,r3
 400477c:	e1bff817 	ldw	r6,-32(fp)
 4004780:	400066c0 	call	400066c <memcpy>
      ptr   += n;
 4004784:	e0fff817 	ldw	r3,-32(fp)
 4004788:	e0bffa17 	ldw	r2,-24(fp)
 400478c:	10c5883a 	add	r2,r2,r3
 4004790:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 4004794:	e0fffd17 	ldw	r3,-12(fp)
 4004798:	e0bff817 	ldw	r2,-32(fp)
 400479c:	1885c83a 	sub	r2,r3,r2
 40047a0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40047a4:	e0fff617 	ldw	r3,-40(fp)
 40047a8:	e0bff817 	ldw	r2,-32(fp)
 40047ac:	1885883a 	add	r2,r3,r2
 40047b0:	10c1ffcc 	andi	r3,r2,2047
 40047b4:	e0bffb17 	ldw	r2,-20(fp)
 40047b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40047bc:	e0bffd17 	ldw	r2,-12(fp)
 40047c0:	10800048 	cmpgei	r2,r2,1
 40047c4:	103fcc1e 	bne	r2,zero,40046f8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 40047c8:	e0fffa17 	ldw	r3,-24(fp)
 40047cc:	e0bffc17 	ldw	r2,-16(fp)
 40047d0:	1880141e 	bne	r3,r2,4004824 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40047d4:	e0bffe17 	ldw	r2,-8(fp)
 40047d8:	1090000c 	andi	r2,r2,16384
 40047dc:	1004c03a 	cmpne	r2,r2,zero
 40047e0:	1000101e 	bne	r2,zero,4004824 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40047e4:	e0bffb17 	ldw	r2,-20(fp)
 40047e8:	10c00a17 	ldw	r3,40(r2)
 40047ec:	e0bff717 	ldw	r2,-36(fp)
 40047f0:	1880051e 	bne	r3,r2,4004808 <altera_avalon_jtag_uart_read+0x13c>
 40047f4:	e0bffb17 	ldw	r2,-20(fp)
 40047f8:	10c00917 	ldw	r3,36(r2)
 40047fc:	e0bffb17 	ldw	r2,-20(fp)
 4004800:	10800117 	ldw	r2,4(r2)
 4004804:	18bff736 	bltu	r3,r2,40047e4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4004808:	e0bffb17 	ldw	r2,-20(fp)
 400480c:	10c00a17 	ldw	r3,40(r2)
 4004810:	e0bff717 	ldw	r2,-36(fp)
 4004814:	18800326 	beq	r3,r2,4004824 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4004818:	e0bffd17 	ldw	r2,-12(fp)
 400481c:	10800048 	cmpgei	r2,r2,1
 4004820:	103fb51e 	bne	r2,zero,40046f8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4004824:	e0fffa17 	ldw	r3,-24(fp)
 4004828:	e0bffc17 	ldw	r2,-16(fp)
 400482c:	18801926 	beq	r3,r2,4004894 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004830:	0005303a 	rdctl	r2,status
 4004834:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004838:	e0fff517 	ldw	r3,-44(fp)
 400483c:	00bfff84 	movi	r2,-2
 4004840:	1884703a 	and	r2,r3,r2
 4004844:	1001703a 	wrctl	status,r2
  
  return context;
 4004848:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400484c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004850:	e0bffb17 	ldw	r2,-20(fp)
 4004854:	10800817 	ldw	r2,32(r2)
 4004858:	10c00054 	ori	r3,r2,1
 400485c:	e0bffb17 	ldw	r2,-20(fp)
 4004860:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004864:	e0bffb17 	ldw	r2,-20(fp)
 4004868:	10800017 	ldw	r2,0(r2)
 400486c:	11000104 	addi	r4,r2,4
 4004870:	e0bffb17 	ldw	r2,-20(fp)
 4004874:	10800817 	ldw	r2,32(r2)
 4004878:	1007883a 	mov	r3,r2
 400487c:	2005883a 	mov	r2,r4
 4004880:	10c00035 	stwio	r3,0(r2)
 4004884:	e0bff917 	ldw	r2,-28(fp)
 4004888:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400488c:	e0bff417 	ldw	r2,-48(fp)
 4004890:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4004894:	e0fffa17 	ldw	r3,-24(fp)
 4004898:	e0bffc17 	ldw	r2,-16(fp)
 400489c:	18800526 	beq	r3,r2,40048b4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 40048a0:	e0fffa17 	ldw	r3,-24(fp)
 40048a4:	e0bffc17 	ldw	r2,-16(fp)
 40048a8:	1887c83a 	sub	r3,r3,r2
 40048ac:	e0ffff15 	stw	r3,-4(fp)
 40048b0:	00000906 	br	40048d8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 40048b4:	e0bffe17 	ldw	r2,-8(fp)
 40048b8:	1090000c 	andi	r2,r2,16384
 40048bc:	1005003a 	cmpeq	r2,r2,zero
 40048c0:	1000031e 	bne	r2,zero,40048d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40048c4:	00bffd44 	movi	r2,-11
 40048c8:	e0bfff15 	stw	r2,-4(fp)
 40048cc:	00000206 	br	40048d8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 40048d0:	00bffec4 	movi	r2,-5
 40048d4:	e0bfff15 	stw	r2,-4(fp)
 40048d8:	e0bfff17 	ldw	r2,-4(fp)
}
 40048dc:	e037883a 	mov	sp,fp
 40048e0:	dfc00117 	ldw	ra,4(sp)
 40048e4:	df000017 	ldw	fp,0(sp)
 40048e8:	dec00204 	addi	sp,sp,8
 40048ec:	f800283a 	ret

040048f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40048f0:	defff204 	addi	sp,sp,-56
 40048f4:	dfc00d15 	stw	ra,52(sp)
 40048f8:	df000c15 	stw	fp,48(sp)
 40048fc:	df000c04 	addi	fp,sp,48
 4004900:	e13ffb15 	stw	r4,-20(fp)
 4004904:	e17ffc15 	stw	r5,-16(fp)
 4004908:	e1bffd15 	stw	r6,-12(fp)
 400490c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4004910:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4004914:	e0bffc17 	ldw	r2,-16(fp)
 4004918:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400491c:	00003a06 	br	4004a08 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4004920:	e0bffb17 	ldw	r2,-20(fp)
 4004924:	10800c17 	ldw	r2,48(r2)
 4004928:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 400492c:	e0bffb17 	ldw	r2,-20(fp)
 4004930:	10800d17 	ldw	r2,52(r2)
 4004934:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 4004938:	e0fffa17 	ldw	r3,-24(fp)
 400493c:	e0bff917 	ldw	r2,-28(fp)
 4004940:	1880062e 	bgeu	r3,r2,400495c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4004944:	e0fff917 	ldw	r3,-28(fp)
 4004948:	e0bffa17 	ldw	r2,-24(fp)
 400494c:	1885c83a 	sub	r2,r3,r2
 4004950:	10bfffc4 	addi	r2,r2,-1
 4004954:	e0bff815 	stw	r2,-32(fp)
 4004958:	00000c06 	br	400498c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 400495c:	e0bff917 	ldw	r2,-28(fp)
 4004960:	1005003a 	cmpeq	r2,r2,zero
 4004964:	1000051e 	bne	r2,zero,400497c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4004968:	00820004 	movi	r2,2048
 400496c:	e0fffa17 	ldw	r3,-24(fp)
 4004970:	10c5c83a 	sub	r2,r2,r3
 4004974:	e0bff815 	stw	r2,-32(fp)
 4004978:	00000406 	br	400498c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400497c:	0081ffc4 	movi	r2,2047
 4004980:	e0fffa17 	ldw	r3,-24(fp)
 4004984:	10c5c83a 	sub	r2,r2,r3
 4004988:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 400498c:	e0bff817 	ldw	r2,-32(fp)
 4004990:	1005003a 	cmpeq	r2,r2,zero
 4004994:	10001f1e 	bne	r2,zero,4004a14 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 4004998:	e0fffd17 	ldw	r3,-12(fp)
 400499c:	e0bff817 	ldw	r2,-32(fp)
 40049a0:	1880022e 	bgeu	r3,r2,40049ac <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 40049a4:	e0bffd17 	ldw	r2,-12(fp)
 40049a8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40049ac:	e0bffb17 	ldw	r2,-20(fp)
 40049b0:	10c20e04 	addi	r3,r2,2104
 40049b4:	e0bffa17 	ldw	r2,-24(fp)
 40049b8:	1885883a 	add	r2,r3,r2
 40049bc:	e0fffc17 	ldw	r3,-16(fp)
 40049c0:	1009883a 	mov	r4,r2
 40049c4:	180b883a 	mov	r5,r3
 40049c8:	e1bff817 	ldw	r6,-32(fp)
 40049cc:	400066c0 	call	400066c <memcpy>
      ptr   += n;
 40049d0:	e0fff817 	ldw	r3,-32(fp)
 40049d4:	e0bffc17 	ldw	r2,-16(fp)
 40049d8:	10c5883a 	add	r2,r2,r3
 40049dc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 40049e0:	e0fffd17 	ldw	r3,-12(fp)
 40049e4:	e0bff817 	ldw	r2,-32(fp)
 40049e8:	1885c83a 	sub	r2,r3,r2
 40049ec:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40049f0:	e0fffa17 	ldw	r3,-24(fp)
 40049f4:	e0bff817 	ldw	r2,-32(fp)
 40049f8:	1885883a 	add	r2,r3,r2
 40049fc:	10c1ffcc 	andi	r3,r2,2047
 4004a00:	e0bffb17 	ldw	r2,-20(fp)
 4004a04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4004a08:	e0bffd17 	ldw	r2,-12(fp)
 4004a0c:	10800048 	cmpgei	r2,r2,1
 4004a10:	103fc31e 	bne	r2,zero,4004920 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004a14:	0005303a 	rdctl	r2,status
 4004a18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004a1c:	e0fff517 	ldw	r3,-44(fp)
 4004a20:	00bfff84 	movi	r2,-2
 4004a24:	1884703a 	and	r2,r3,r2
 4004a28:	1001703a 	wrctl	status,r2
  
  return context;
 4004a2c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4004a30:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4004a34:	e0bffb17 	ldw	r2,-20(fp)
 4004a38:	10800817 	ldw	r2,32(r2)
 4004a3c:	10c00094 	ori	r3,r2,2
 4004a40:	e0bffb17 	ldw	r2,-20(fp)
 4004a44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4004a48:	e0bffb17 	ldw	r2,-20(fp)
 4004a4c:	10800017 	ldw	r2,0(r2)
 4004a50:	11000104 	addi	r4,r2,4
 4004a54:	e0bffb17 	ldw	r2,-20(fp)
 4004a58:	10800817 	ldw	r2,32(r2)
 4004a5c:	1007883a 	mov	r3,r2
 4004a60:	2005883a 	mov	r2,r4
 4004a64:	10c00035 	stwio	r3,0(r2)
 4004a68:	e0bff717 	ldw	r2,-36(fp)
 4004a6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004a70:	e0bff417 	ldw	r2,-48(fp)
 4004a74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4004a78:	e0bffd17 	ldw	r2,-12(fp)
 4004a7c:	10800050 	cmplti	r2,r2,1
 4004a80:	1000111e 	bne	r2,zero,4004ac8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 4004a84:	e0bffe17 	ldw	r2,-8(fp)
 4004a88:	1090000c 	andi	r2,r2,16384
 4004a8c:	1004c03a 	cmpne	r2,r2,zero
 4004a90:	1000101e 	bne	r2,zero,4004ad4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4004a94:	e0bffb17 	ldw	r2,-20(fp)
 4004a98:	10c00d17 	ldw	r3,52(r2)
 4004a9c:	e0bff917 	ldw	r2,-28(fp)
 4004aa0:	1880051e 	bne	r3,r2,4004ab8 <altera_avalon_jtag_uart_write+0x1c8>
 4004aa4:	e0bffb17 	ldw	r2,-20(fp)
 4004aa8:	10c00917 	ldw	r3,36(r2)
 4004aac:	e0bffb17 	ldw	r2,-20(fp)
 4004ab0:	10800117 	ldw	r2,4(r2)
 4004ab4:	18bff736 	bltu	r3,r2,4004a94 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4004ab8:	e0bffb17 	ldw	r2,-20(fp)
 4004abc:	10c00d17 	ldw	r3,52(r2)
 4004ac0:	e0bff917 	ldw	r2,-28(fp)
 4004ac4:	18800326 	beq	r3,r2,4004ad4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 4004ac8:	e0bffd17 	ldw	r2,-12(fp)
 4004acc:	10800048 	cmpgei	r2,r2,1
 4004ad0:	103fcd1e 	bne	r2,zero,4004a08 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4004ad4:	e0fffc17 	ldw	r3,-16(fp)
 4004ad8:	e0bff617 	ldw	r2,-40(fp)
 4004adc:	18800526 	beq	r3,r2,4004af4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 4004ae0:	e0fffc17 	ldw	r3,-16(fp)
 4004ae4:	e0bff617 	ldw	r2,-40(fp)
 4004ae8:	1887c83a 	sub	r3,r3,r2
 4004aec:	e0ffff15 	stw	r3,-4(fp)
 4004af0:	00000906 	br	4004b18 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 4004af4:	e0bffe17 	ldw	r2,-8(fp)
 4004af8:	1090000c 	andi	r2,r2,16384
 4004afc:	1005003a 	cmpeq	r2,r2,zero
 4004b00:	1000031e 	bne	r2,zero,4004b10 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 4004b04:	00bffd44 	movi	r2,-11
 4004b08:	e0bfff15 	stw	r2,-4(fp)
 4004b0c:	00000206 	br	4004b18 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 4004b10:	00bffec4 	movi	r2,-5
 4004b14:	e0bfff15 	stw	r2,-4(fp)
 4004b18:	e0bfff17 	ldw	r2,-4(fp)
}
 4004b1c:	e037883a 	mov	sp,fp
 4004b20:	dfc00117 	ldw	ra,4(sp)
 4004b24:	df000017 	ldw	fp,0(sp)
 4004b28:	dec00204 	addi	sp,sp,8
 4004b2c:	f800283a 	ret

04004b30 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4004b30:	defffa04 	addi	sp,sp,-24
 4004b34:	dfc00515 	stw	ra,20(sp)
 4004b38:	df000415 	stw	fp,16(sp)
 4004b3c:	df000404 	addi	fp,sp,16
 4004b40:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4004b44:	e0bfff17 	ldw	r2,-4(fp)
 4004b48:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4004b4c:	e0bfff17 	ldw	r2,-4(fp)
 4004b50:	10800104 	addi	r2,r2,4
 4004b54:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004b58:	0005303a 	rdctl	r2,status
 4004b5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b60:	e0fffd17 	ldw	r3,-12(fp)
 4004b64:	00bfff84 	movi	r2,-2
 4004b68:	1884703a 	and	r2,r3,r2
 4004b6c:	1001703a 	wrctl	status,r2
  
  return context;
 4004b70:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4004b74:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4004b78:	40057100 	call	4005710 <alt_tick>
 4004b7c:	e0bffe17 	ldw	r2,-8(fp)
 4004b80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004b84:	e0bffc17 	ldw	r2,-16(fp)
 4004b88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4004b8c:	e037883a 	mov	sp,fp
 4004b90:	dfc00117 	ldw	ra,4(sp)
 4004b94:	df000017 	ldw	fp,0(sp)
 4004b98:	dec00204 	addi	sp,sp,8
 4004b9c:	f800283a 	ret

04004ba0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4004ba0:	defff804 	addi	sp,sp,-32
 4004ba4:	dfc00715 	stw	ra,28(sp)
 4004ba8:	df000615 	stw	fp,24(sp)
 4004bac:	df000604 	addi	fp,sp,24
 4004bb0:	e13ffc15 	stw	r4,-16(fp)
 4004bb4:	e17ffd15 	stw	r5,-12(fp)
 4004bb8:	e1bffe15 	stw	r6,-8(fp)
 4004bbc:	e1ffff15 	stw	r7,-4(fp)
 4004bc0:	e0bfff17 	ldw	r2,-4(fp)
 4004bc4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4004bc8:	00810074 	movhi	r2,1025
 4004bcc:	10a54f04 	addi	r2,r2,-27332
 4004bd0:	10800017 	ldw	r2,0(r2)
 4004bd4:	1004c03a 	cmpne	r2,r2,zero
 4004bd8:	1000041e 	bne	r2,zero,4004bec <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4004bdc:	00c10074 	movhi	r3,1025
 4004be0:	18e54f04 	addi	r3,r3,-27332
 4004be4:	e0bffb17 	ldw	r2,-20(fp)
 4004be8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4004bec:	e0bffc17 	ldw	r2,-16(fp)
 4004bf0:	10800104 	addi	r2,r2,4
 4004bf4:	1007883a 	mov	r3,r2
 4004bf8:	008001c4 	movi	r2,7
 4004bfc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4004c00:	d8000015 	stw	zero,0(sp)
 4004c04:	e13ffd17 	ldw	r4,-12(fp)
 4004c08:	e17ffe17 	ldw	r5,-8(fp)
 4004c0c:	01810034 	movhi	r6,1024
 4004c10:	3192cc04 	addi	r6,r6,19248
 4004c14:	e1fffc17 	ldw	r7,-16(fp)
 4004c18:	4004fac0 	call	4004fac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4004c1c:	e037883a 	mov	sp,fp
 4004c20:	dfc00117 	ldw	ra,4(sp)
 4004c24:	df000017 	ldw	fp,0(sp)
 4004c28:	dec00204 	addi	sp,sp,8
 4004c2c:	f800283a 	ret

04004c30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4004c30:	defff404 	addi	sp,sp,-48
 4004c34:	df000b15 	stw	fp,44(sp)
 4004c38:	df000b04 	addi	fp,sp,44
 4004c3c:	e13ffb15 	stw	r4,-20(fp)
 4004c40:	e17ffc15 	stw	r5,-16(fp)
 4004c44:	e1bffd15 	stw	r6,-12(fp)
 4004c48:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4004c4c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4004c50:	00810074 	movhi	r2,1025
 4004c54:	10a54f04 	addi	r2,r2,-27332
 4004c58:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4004c5c:	1005003a 	cmpeq	r2,r2,zero
 4004c60:	1000411e 	bne	r2,zero,4004d68 <alt_alarm_start+0x138>
  {
    if (alarm)
 4004c64:	e0bffb17 	ldw	r2,-20(fp)
 4004c68:	1005003a 	cmpeq	r2,r2,zero
 4004c6c:	10003b1e 	bne	r2,zero,4004d5c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 4004c70:	e0fffb17 	ldw	r3,-20(fp)
 4004c74:	e0bffd17 	ldw	r2,-12(fp)
 4004c78:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 4004c7c:	e0fffb17 	ldw	r3,-20(fp)
 4004c80:	e0bffe17 	ldw	r2,-8(fp)
 4004c84:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004c88:	0005303a 	rdctl	r2,status
 4004c8c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004c90:	e0fff817 	ldw	r3,-32(fp)
 4004c94:	00bfff84 	movi	r2,-2
 4004c98:	1884703a 	and	r2,r3,r2
 4004c9c:	1001703a 	wrctl	status,r2
  
  return context;
 4004ca0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4004ca4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4004ca8:	00810074 	movhi	r2,1025
 4004cac:	10a55004 	addi	r2,r2,-27328
 4004cb0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4004cb4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4004cb8:	e0fffc17 	ldw	r3,-16(fp)
 4004cbc:	e0bff917 	ldw	r2,-28(fp)
 4004cc0:	1885883a 	add	r2,r3,r2
 4004cc4:	10c00044 	addi	r3,r2,1
 4004cc8:	e0bffb17 	ldw	r2,-20(fp)
 4004ccc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4004cd0:	e0bffb17 	ldw	r2,-20(fp)
 4004cd4:	10c00217 	ldw	r3,8(r2)
 4004cd8:	e0bff917 	ldw	r2,-28(fp)
 4004cdc:	1880042e 	bgeu	r3,r2,4004cf0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4004ce0:	e0fffb17 	ldw	r3,-20(fp)
 4004ce4:	00800044 	movi	r2,1
 4004ce8:	18800405 	stb	r2,16(r3)
 4004cec:	00000206 	br	4004cf8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4004cf0:	e0bffb17 	ldw	r2,-20(fp)
 4004cf4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4004cf8:	e0fffb17 	ldw	r3,-20(fp)
 4004cfc:	00810034 	movhi	r2,1024
 4004d00:	109ea304 	addi	r2,r2,31372
 4004d04:	e0bff615 	stw	r2,-40(fp)
 4004d08:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004d0c:	e0fff717 	ldw	r3,-36(fp)
 4004d10:	e0bff617 	ldw	r2,-40(fp)
 4004d14:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4004d18:	e0bff617 	ldw	r2,-40(fp)
 4004d1c:	10c00017 	ldw	r3,0(r2)
 4004d20:	e0bff717 	ldw	r2,-36(fp)
 4004d24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004d28:	e0bff617 	ldw	r2,-40(fp)
 4004d2c:	10c00017 	ldw	r3,0(r2)
 4004d30:	e0bff717 	ldw	r2,-36(fp)
 4004d34:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4004d38:	e0fff617 	ldw	r3,-40(fp)
 4004d3c:	e0bff717 	ldw	r2,-36(fp)
 4004d40:	18800015 	stw	r2,0(r3)
 4004d44:	e0bffa17 	ldw	r2,-24(fp)
 4004d48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004d4c:	e0bff517 	ldw	r2,-44(fp)
 4004d50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4004d54:	e03fff15 	stw	zero,-4(fp)
 4004d58:	00000506 	br	4004d70 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 4004d5c:	00bffa84 	movi	r2,-22
 4004d60:	e0bfff15 	stw	r2,-4(fp)
 4004d64:	00000206 	br	4004d70 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 4004d68:	00bfde84 	movi	r2,-134
 4004d6c:	e0bfff15 	stw	r2,-4(fp)
 4004d70:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 4004d74:	e037883a 	mov	sp,fp
 4004d78:	df000017 	ldw	fp,0(sp)
 4004d7c:	dec00104 	addi	sp,sp,4
 4004d80:	f800283a 	ret

04004d84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4004d84:	deffff04 	addi	sp,sp,-4
 4004d88:	df000015 	stw	fp,0(sp)
 4004d8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4004d90:	e037883a 	mov	sp,fp
 4004d94:	df000017 	ldw	fp,0(sp)
 4004d98:	dec00104 	addi	sp,sp,4
 4004d9c:	f800283a 	ret

04004da0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4004da0:	defff904 	addi	sp,sp,-28
 4004da4:	dfc00615 	stw	ra,24(sp)
 4004da8:	df000515 	stw	fp,20(sp)
 4004dac:	df000504 	addi	fp,sp,20
 4004db0:	e13ffd15 	stw	r4,-12(fp)
 4004db4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4004db8:	e0bffd17 	ldw	r2,-12(fp)
 4004dbc:	1005003a 	cmpeq	r2,r2,zero
 4004dc0:	1000041e 	bne	r2,zero,4004dd4 <alt_dev_llist_insert+0x34>
 4004dc4:	e0bffd17 	ldw	r2,-12(fp)
 4004dc8:	10800217 	ldw	r2,8(r2)
 4004dcc:	1004c03a 	cmpne	r2,r2,zero
 4004dd0:	1000071e 	bne	r2,zero,4004df0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4004dd4:	4004e540 	call	4004e54 <alt_get_errno>
 4004dd8:	1007883a 	mov	r3,r2
 4004ddc:	00800584 	movi	r2,22
 4004de0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4004de4:	00bffa84 	movi	r2,-22
 4004de8:	e0bfff15 	stw	r2,-4(fp)
 4004dec:	00001306 	br	4004e3c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4004df0:	e0fffd17 	ldw	r3,-12(fp)
 4004df4:	e0bffe17 	ldw	r2,-8(fp)
 4004df8:	e0bffb15 	stw	r2,-20(fp)
 4004dfc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004e00:	e0fffc17 	ldw	r3,-16(fp)
 4004e04:	e0bffb17 	ldw	r2,-20(fp)
 4004e08:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4004e0c:	e0bffb17 	ldw	r2,-20(fp)
 4004e10:	10c00017 	ldw	r3,0(r2)
 4004e14:	e0bffc17 	ldw	r2,-16(fp)
 4004e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004e1c:	e0bffb17 	ldw	r2,-20(fp)
 4004e20:	10c00017 	ldw	r3,0(r2)
 4004e24:	e0bffc17 	ldw	r2,-16(fp)
 4004e28:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4004e2c:	e0fffb17 	ldw	r3,-20(fp)
 4004e30:	e0bffc17 	ldw	r2,-16(fp)
 4004e34:	18800015 	stw	r2,0(r3)

  return 0;  
 4004e38:	e03fff15 	stw	zero,-4(fp)
 4004e3c:	e0bfff17 	ldw	r2,-4(fp)
}
 4004e40:	e037883a 	mov	sp,fp
 4004e44:	dfc00117 	ldw	ra,4(sp)
 4004e48:	df000017 	ldw	fp,0(sp)
 4004e4c:	dec00204 	addi	sp,sp,8
 4004e50:	f800283a 	ret

04004e54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004e54:	defffd04 	addi	sp,sp,-12
 4004e58:	dfc00215 	stw	ra,8(sp)
 4004e5c:	df000115 	stw	fp,4(sp)
 4004e60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4004e64:	00810034 	movhi	r2,1024
 4004e68:	109ea004 	addi	r2,r2,31360
 4004e6c:	10800017 	ldw	r2,0(r2)
 4004e70:	1005003a 	cmpeq	r2,r2,zero
 4004e74:	1000061e 	bne	r2,zero,4004e90 <alt_get_errno+0x3c>
 4004e78:	00810034 	movhi	r2,1024
 4004e7c:	109ea004 	addi	r2,r2,31360
 4004e80:	10800017 	ldw	r2,0(r2)
 4004e84:	103ee83a 	callr	r2
 4004e88:	e0bfff15 	stw	r2,-4(fp)
 4004e8c:	00000306 	br	4004e9c <alt_get_errno+0x48>
 4004e90:	00810074 	movhi	r2,1025
 4004e94:	10a54a04 	addi	r2,r2,-27352
 4004e98:	e0bfff15 	stw	r2,-4(fp)
 4004e9c:	e0bfff17 	ldw	r2,-4(fp)
}
 4004ea0:	e037883a 	mov	sp,fp
 4004ea4:	dfc00117 	ldw	ra,4(sp)
 4004ea8:	df000017 	ldw	fp,0(sp)
 4004eac:	dec00204 	addi	sp,sp,8
 4004eb0:	f800283a 	ret

04004eb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4004eb4:	defffd04 	addi	sp,sp,-12
 4004eb8:	dfc00215 	stw	ra,8(sp)
 4004ebc:	df000115 	stw	fp,4(sp)
 4004ec0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004ec4:	00bfff04 	movi	r2,-4
 4004ec8:	00c10034 	movhi	r3,1024
 4004ecc:	18d7d104 	addi	r3,r3,24388
 4004ed0:	1885883a 	add	r2,r3,r2
 4004ed4:	e0bfff15 	stw	r2,-4(fp)
 4004ed8:	00000606 	br	4004ef4 <_do_ctors+0x40>
        (*ctor) (); 
 4004edc:	e0bfff17 	ldw	r2,-4(fp)
 4004ee0:	10800017 	ldw	r2,0(r2)
 4004ee4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004ee8:	e0bfff17 	ldw	r2,-4(fp)
 4004eec:	10bfff04 	addi	r2,r2,-4
 4004ef0:	e0bfff15 	stw	r2,-4(fp)
 4004ef4:	e0ffff17 	ldw	r3,-4(fp)
 4004ef8:	00810034 	movhi	r2,1024
 4004efc:	1097d004 	addi	r2,r2,24384
 4004f00:	18bff62e 	bgeu	r3,r2,4004edc <_do_ctors+0x28>
        (*ctor) (); 
}
 4004f04:	e037883a 	mov	sp,fp
 4004f08:	dfc00117 	ldw	ra,4(sp)
 4004f0c:	df000017 	ldw	fp,0(sp)
 4004f10:	dec00204 	addi	sp,sp,8
 4004f14:	f800283a 	ret

04004f18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4004f18:	defffd04 	addi	sp,sp,-12
 4004f1c:	dfc00215 	stw	ra,8(sp)
 4004f20:	df000115 	stw	fp,4(sp)
 4004f24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4004f28:	00bfff04 	movi	r2,-4
 4004f2c:	00c10034 	movhi	r3,1024
 4004f30:	18d7d104 	addi	r3,r3,24388
 4004f34:	1885883a 	add	r2,r3,r2
 4004f38:	e0bfff15 	stw	r2,-4(fp)
 4004f3c:	00000606 	br	4004f58 <_do_dtors+0x40>
        (*dtor) (); 
 4004f40:	e0bfff17 	ldw	r2,-4(fp)
 4004f44:	10800017 	ldw	r2,0(r2)
 4004f48:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4004f4c:	e0bfff17 	ldw	r2,-4(fp)
 4004f50:	10bfff04 	addi	r2,r2,-4
 4004f54:	e0bfff15 	stw	r2,-4(fp)
 4004f58:	e0ffff17 	ldw	r3,-4(fp)
 4004f5c:	00810034 	movhi	r2,1024
 4004f60:	1097d104 	addi	r2,r2,24388
 4004f64:	18bff62e 	bgeu	r3,r2,4004f40 <_do_dtors+0x28>
        (*dtor) (); 
}
 4004f68:	e037883a 	mov	sp,fp
 4004f6c:	dfc00117 	ldw	ra,4(sp)
 4004f70:	df000017 	ldw	fp,0(sp)
 4004f74:	dec00204 	addi	sp,sp,8
 4004f78:	f800283a 	ret

04004f7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4004f7c:	defffe04 	addi	sp,sp,-8
 4004f80:	dfc00115 	stw	ra,4(sp)
 4004f84:	df000015 	stw	fp,0(sp)
 4004f88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4004f8c:	0009883a 	mov	r4,zero
 4004f90:	01440004 	movi	r5,4096
 4004f94:	4005aa80 	call	4005aa8 <alt_icache_flush>
#endif
}
 4004f98:	e037883a 	mov	sp,fp
 4004f9c:	dfc00117 	ldw	ra,4(sp)
 4004fa0:	df000017 	ldw	fp,0(sp)
 4004fa4:	dec00204 	addi	sp,sp,8
 4004fa8:	f800283a 	ret

04004fac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4004fac:	defff904 	addi	sp,sp,-28
 4004fb0:	dfc00615 	stw	ra,24(sp)
 4004fb4:	df000515 	stw	fp,20(sp)
 4004fb8:	df000504 	addi	fp,sp,20
 4004fbc:	e13ffc15 	stw	r4,-16(fp)
 4004fc0:	e17ffd15 	stw	r5,-12(fp)
 4004fc4:	e1bffe15 	stw	r6,-8(fp)
 4004fc8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4004fcc:	e0800217 	ldw	r2,8(fp)
 4004fd0:	d8800015 	stw	r2,0(sp)
 4004fd4:	e13ffc17 	ldw	r4,-16(fp)
 4004fd8:	e17ffd17 	ldw	r5,-12(fp)
 4004fdc:	e1bffe17 	ldw	r6,-8(fp)
 4004fe0:	e1ffff17 	ldw	r7,-4(fp)
 4004fe4:	40051800 	call	4005180 <alt_iic_isr_register>
}  
 4004fe8:	e037883a 	mov	sp,fp
 4004fec:	dfc00117 	ldw	ra,4(sp)
 4004ff0:	df000017 	ldw	fp,0(sp)
 4004ff4:	dec00204 	addi	sp,sp,8
 4004ff8:	f800283a 	ret

04004ffc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4004ffc:	defff904 	addi	sp,sp,-28
 4005000:	df000615 	stw	fp,24(sp)
 4005004:	df000604 	addi	fp,sp,24
 4005008:	e13ffe15 	stw	r4,-8(fp)
 400500c:	e17fff15 	stw	r5,-4(fp)
 4005010:	e0bfff17 	ldw	r2,-4(fp)
 4005014:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005018:	0005303a 	rdctl	r2,status
 400501c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005020:	e0fffb17 	ldw	r3,-20(fp)
 4005024:	00bfff84 	movi	r2,-2
 4005028:	1884703a 	and	r2,r3,r2
 400502c:	1001703a 	wrctl	status,r2
  
  return context;
 4005030:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4005034:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 4005038:	e0fffc17 	ldw	r3,-16(fp)
 400503c:	00800044 	movi	r2,1
 4005040:	10c4983a 	sll	r2,r2,r3
 4005044:	1007883a 	mov	r3,r2
 4005048:	00810074 	movhi	r2,1025
 400504c:	10a54e04 	addi	r2,r2,-27336
 4005050:	10800017 	ldw	r2,0(r2)
 4005054:	1886b03a 	or	r3,r3,r2
 4005058:	00810074 	movhi	r2,1025
 400505c:	10a54e04 	addi	r2,r2,-27336
 4005060:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4005064:	00810074 	movhi	r2,1025
 4005068:	10a54e04 	addi	r2,r2,-27336
 400506c:	10800017 	ldw	r2,0(r2)
 4005070:	100170fa 	wrctl	ienable,r2
 4005074:	e0bffd17 	ldw	r2,-12(fp)
 4005078:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400507c:	e0bffa17 	ldw	r2,-24(fp)
 4005080:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4005084:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 4005088:	e037883a 	mov	sp,fp
 400508c:	df000017 	ldw	fp,0(sp)
 4005090:	dec00104 	addi	sp,sp,4
 4005094:	f800283a 	ret

04005098 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4005098:	defff904 	addi	sp,sp,-28
 400509c:	df000615 	stw	fp,24(sp)
 40050a0:	df000604 	addi	fp,sp,24
 40050a4:	e13ffe15 	stw	r4,-8(fp)
 40050a8:	e17fff15 	stw	r5,-4(fp)
 40050ac:	e0bfff17 	ldw	r2,-4(fp)
 40050b0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40050b4:	0005303a 	rdctl	r2,status
 40050b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40050bc:	e0fffb17 	ldw	r3,-20(fp)
 40050c0:	00bfff84 	movi	r2,-2
 40050c4:	1884703a 	and	r2,r3,r2
 40050c8:	1001703a 	wrctl	status,r2
  
  return context;
 40050cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40050d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 40050d4:	e0fffc17 	ldw	r3,-16(fp)
 40050d8:	00800044 	movi	r2,1
 40050dc:	10c4983a 	sll	r2,r2,r3
 40050e0:	0084303a 	nor	r2,zero,r2
 40050e4:	1007883a 	mov	r3,r2
 40050e8:	00810074 	movhi	r2,1025
 40050ec:	10a54e04 	addi	r2,r2,-27336
 40050f0:	10800017 	ldw	r2,0(r2)
 40050f4:	1886703a 	and	r3,r3,r2
 40050f8:	00810074 	movhi	r2,1025
 40050fc:	10a54e04 	addi	r2,r2,-27336
 4005100:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4005104:	00810074 	movhi	r2,1025
 4005108:	10a54e04 	addi	r2,r2,-27336
 400510c:	10800017 	ldw	r2,0(r2)
 4005110:	100170fa 	wrctl	ienable,r2
 4005114:	e0bffd17 	ldw	r2,-12(fp)
 4005118:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400511c:	e0bffa17 	ldw	r2,-24(fp)
 4005120:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4005124:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4005128:	e037883a 	mov	sp,fp
 400512c:	df000017 	ldw	fp,0(sp)
 4005130:	dec00104 	addi	sp,sp,4
 4005134:	f800283a 	ret

04005138 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4005138:	defffc04 	addi	sp,sp,-16
 400513c:	df000315 	stw	fp,12(sp)
 4005140:	df000304 	addi	fp,sp,12
 4005144:	e13ffe15 	stw	r4,-8(fp)
 4005148:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400514c:	000530fa 	rdctl	r2,ienable
 4005150:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4005154:	e0ffff17 	ldw	r3,-4(fp)
 4005158:	00800044 	movi	r2,1
 400515c:	10c4983a 	sll	r2,r2,r3
 4005160:	1007883a 	mov	r3,r2
 4005164:	e0bffd17 	ldw	r2,-12(fp)
 4005168:	1884703a 	and	r2,r3,r2
 400516c:	1004c03a 	cmpne	r2,r2,zero
}
 4005170:	e037883a 	mov	sp,fp
 4005174:	df000017 	ldw	fp,0(sp)
 4005178:	dec00104 	addi	sp,sp,4
 400517c:	f800283a 	ret

04005180 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4005180:	defff404 	addi	sp,sp,-48
 4005184:	dfc00b15 	stw	ra,44(sp)
 4005188:	df000a15 	stw	fp,40(sp)
 400518c:	df000a04 	addi	fp,sp,40
 4005190:	e13ffb15 	stw	r4,-20(fp)
 4005194:	e17ffc15 	stw	r5,-16(fp)
 4005198:	e1bffd15 	stw	r6,-12(fp)
 400519c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 40051a0:	00bffa84 	movi	r2,-22
 40051a4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40051a8:	e0bffc17 	ldw	r2,-16(fp)
 40051ac:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40051b0:	e0bff917 	ldw	r2,-28(fp)
 40051b4:	10800808 	cmpgei	r2,r2,32
 40051b8:	1000291e 	bne	r2,zero,4005260 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40051bc:	0005303a 	rdctl	r2,status
 40051c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40051c4:	e0fff717 	ldw	r3,-36(fp)
 40051c8:	00bfff84 	movi	r2,-2
 40051cc:	1884703a 	and	r2,r3,r2
 40051d0:	1001703a 	wrctl	status,r2
  
  return context;
 40051d4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40051d8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 40051dc:	e0bff917 	ldw	r2,-28(fp)
 40051e0:	00c10074 	movhi	r3,1025
 40051e4:	18e5db04 	addi	r3,r3,-26772
 40051e8:	100490fa 	slli	r2,r2,3
 40051ec:	10c7883a 	add	r3,r2,r3
 40051f0:	e0bffd17 	ldw	r2,-12(fp)
 40051f4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 40051f8:	e0bff917 	ldw	r2,-28(fp)
 40051fc:	00c10074 	movhi	r3,1025
 4005200:	18e5db04 	addi	r3,r3,-26772
 4005204:	100490fa 	slli	r2,r2,3
 4005208:	10c5883a 	add	r2,r2,r3
 400520c:	10c00104 	addi	r3,r2,4
 4005210:	e0bffe17 	ldw	r2,-8(fp)
 4005214:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4005218:	e0bffd17 	ldw	r2,-12(fp)
 400521c:	1005003a 	cmpeq	r2,r2,zero
 4005220:	1000051e 	bne	r2,zero,4005238 <alt_iic_isr_register+0xb8>
 4005224:	e17ff917 	ldw	r5,-28(fp)
 4005228:	e13ffb17 	ldw	r4,-20(fp)
 400522c:	4004ffc0 	call	4004ffc <alt_ic_irq_enable>
 4005230:	e0bfff15 	stw	r2,-4(fp)
 4005234:	00000406 	br	4005248 <alt_iic_isr_register+0xc8>
 4005238:	e17ff917 	ldw	r5,-28(fp)
 400523c:	e13ffb17 	ldw	r4,-20(fp)
 4005240:	40050980 	call	4005098 <alt_ic_irq_disable>
 4005244:	e0bfff15 	stw	r2,-4(fp)
 4005248:	e0bfff17 	ldw	r2,-4(fp)
 400524c:	e0bffa15 	stw	r2,-24(fp)
 4005250:	e0bff817 	ldw	r2,-32(fp)
 4005254:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005258:	e0bff617 	ldw	r2,-40(fp)
 400525c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4005260:	e0bffa17 	ldw	r2,-24(fp)
}
 4005264:	e037883a 	mov	sp,fp
 4005268:	dfc00117 	ldw	ra,4(sp)
 400526c:	df000017 	ldw	fp,0(sp)
 4005270:	dec00204 	addi	sp,sp,8
 4005274:	f800283a 	ret

04005278 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4005278:	defff904 	addi	sp,sp,-28
 400527c:	dfc00615 	stw	ra,24(sp)
 4005280:	df000515 	stw	fp,20(sp)
 4005284:	df000504 	addi	fp,sp,20
 4005288:	e13ffc15 	stw	r4,-16(fp)
 400528c:	e17ffd15 	stw	r5,-12(fp)
 4005290:	e1bffe15 	stw	r6,-8(fp)
 4005294:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4005298:	e13ffd17 	ldw	r4,-12(fp)
 400529c:	e17ffe17 	ldw	r5,-8(fp)
 40052a0:	e1bfff17 	ldw	r6,-4(fp)
 40052a4:	40054900 	call	4005490 <open>
 40052a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40052ac:	e0bffb17 	ldw	r2,-20(fp)
 40052b0:	1004803a 	cmplt	r2,r2,zero
 40052b4:	10001c1e 	bne	r2,zero,4005328 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 40052b8:	e0bffb17 	ldw	r2,-20(fp)
 40052bc:	00c10034 	movhi	r3,1024
 40052c0:	18da1f04 	addi	r3,r3,26748
 40052c4:	10800324 	muli	r2,r2,12
 40052c8:	10c5883a 	add	r2,r2,r3
 40052cc:	10c00017 	ldw	r3,0(r2)
 40052d0:	e0bffc17 	ldw	r2,-16(fp)
 40052d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40052d8:	e0bffb17 	ldw	r2,-20(fp)
 40052dc:	00c10034 	movhi	r3,1024
 40052e0:	18da1f04 	addi	r3,r3,26748
 40052e4:	10800324 	muli	r2,r2,12
 40052e8:	10c5883a 	add	r2,r2,r3
 40052ec:	10800104 	addi	r2,r2,4
 40052f0:	10c00017 	ldw	r3,0(r2)
 40052f4:	e0bffc17 	ldw	r2,-16(fp)
 40052f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40052fc:	e0bffb17 	ldw	r2,-20(fp)
 4005300:	00c10034 	movhi	r3,1024
 4005304:	18da1f04 	addi	r3,r3,26748
 4005308:	10800324 	muli	r2,r2,12
 400530c:	10c5883a 	add	r2,r2,r3
 4005310:	10800204 	addi	r2,r2,8
 4005314:	10c00017 	ldw	r3,0(r2)
 4005318:	e0bffc17 	ldw	r2,-16(fp)
 400531c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4005320:	e13ffb17 	ldw	r4,-20(fp)
 4005324:	40037c00 	call	40037c0 <alt_release_fd>
  }
} 
 4005328:	e037883a 	mov	sp,fp
 400532c:	dfc00117 	ldw	ra,4(sp)
 4005330:	df000017 	ldw	fp,0(sp)
 4005334:	dec00204 	addi	sp,sp,8
 4005338:	f800283a 	ret

0400533c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400533c:	defffb04 	addi	sp,sp,-20
 4005340:	dfc00415 	stw	ra,16(sp)
 4005344:	df000315 	stw	fp,12(sp)
 4005348:	df000304 	addi	fp,sp,12
 400534c:	e13ffd15 	stw	r4,-12(fp)
 4005350:	e17ffe15 	stw	r5,-8(fp)
 4005354:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4005358:	01010034 	movhi	r4,1024
 400535c:	211a2204 	addi	r4,r4,26760
 4005360:	e17ffd17 	ldw	r5,-12(fp)
 4005364:	01800044 	movi	r6,1
 4005368:	01c07fc4 	movi	r7,511
 400536c:	40052780 	call	4005278 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4005370:	01010034 	movhi	r4,1024
 4005374:	211a1f04 	addi	r4,r4,26748
 4005378:	e17ffe17 	ldw	r5,-8(fp)
 400537c:	000d883a 	mov	r6,zero
 4005380:	01c07fc4 	movi	r7,511
 4005384:	40052780 	call	4005278 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4005388:	01010034 	movhi	r4,1024
 400538c:	211a2504 	addi	r4,r4,26772
 4005390:	e17fff17 	ldw	r5,-4(fp)
 4005394:	01800044 	movi	r6,1
 4005398:	01c07fc4 	movi	r7,511
 400539c:	40052780 	call	4005278 <alt_open_fd>
}  
 40053a0:	e037883a 	mov	sp,fp
 40053a4:	dfc00117 	ldw	ra,4(sp)
 40053a8:	df000017 	ldw	fp,0(sp)
 40053ac:	dec00204 	addi	sp,sp,8
 40053b0:	f800283a 	ret

040053b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40053b4:	defffc04 	addi	sp,sp,-16
 40053b8:	df000315 	stw	fp,12(sp)
 40053bc:	df000304 	addi	fp,sp,12
 40053c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40053c4:	e0bffe17 	ldw	r2,-8(fp)
 40053c8:	10800217 	ldw	r2,8(r2)
 40053cc:	10d00034 	orhi	r3,r2,16384
 40053d0:	e0bffe17 	ldw	r2,-8(fp)
 40053d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40053d8:	e03ffd15 	stw	zero,-12(fp)
 40053dc:	00002006 	br	4005460 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40053e0:	e0bffd17 	ldw	r2,-12(fp)
 40053e4:	00c10034 	movhi	r3,1024
 40053e8:	18da1f04 	addi	r3,r3,26748
 40053ec:	10800324 	muli	r2,r2,12
 40053f0:	10c5883a 	add	r2,r2,r3
 40053f4:	10c00017 	ldw	r3,0(r2)
 40053f8:	e0bffe17 	ldw	r2,-8(fp)
 40053fc:	10800017 	ldw	r2,0(r2)
 4005400:	1880141e 	bne	r3,r2,4005454 <alt_file_locked+0xa0>
 4005404:	e0bffd17 	ldw	r2,-12(fp)
 4005408:	00c10034 	movhi	r3,1024
 400540c:	18da1f04 	addi	r3,r3,26748
 4005410:	10800324 	muli	r2,r2,12
 4005414:	10c5883a 	add	r2,r2,r3
 4005418:	10800204 	addi	r2,r2,8
 400541c:	10800017 	ldw	r2,0(r2)
 4005420:	1004403a 	cmpge	r2,r2,zero
 4005424:	10000b1e 	bne	r2,zero,4005454 <alt_file_locked+0xa0>
 4005428:	e0bffd17 	ldw	r2,-12(fp)
 400542c:	10800324 	muli	r2,r2,12
 4005430:	1007883a 	mov	r3,r2
 4005434:	00810034 	movhi	r2,1024
 4005438:	109a1f04 	addi	r2,r2,26748
 400543c:	1887883a 	add	r3,r3,r2
 4005440:	e0bffe17 	ldw	r2,-8(fp)
 4005444:	18800326 	beq	r3,r2,4005454 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4005448:	00bffcc4 	movi	r2,-13
 400544c:	e0bfff15 	stw	r2,-4(fp)
 4005450:	00000a06 	br	400547c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4005454:	e0bffd17 	ldw	r2,-12(fp)
 4005458:	10800044 	addi	r2,r2,1
 400545c:	e0bffd15 	stw	r2,-12(fp)
 4005460:	00810034 	movhi	r2,1024
 4005464:	109e9f04 	addi	r2,r2,31356
 4005468:	10800017 	ldw	r2,0(r2)
 400546c:	1007883a 	mov	r3,r2
 4005470:	e0bffd17 	ldw	r2,-12(fp)
 4005474:	18bfda2e 	bgeu	r3,r2,40053e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4005478:	e03fff15 	stw	zero,-4(fp)
 400547c:	e0bfff17 	ldw	r2,-4(fp)
}
 4005480:	e037883a 	mov	sp,fp
 4005484:	df000017 	ldw	fp,0(sp)
 4005488:	dec00104 	addi	sp,sp,4
 400548c:	f800283a 	ret

04005490 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4005490:	defff404 	addi	sp,sp,-48
 4005494:	dfc00b15 	stw	ra,44(sp)
 4005498:	df000a15 	stw	fp,40(sp)
 400549c:	df000a04 	addi	fp,sp,40
 40054a0:	e13ffb15 	stw	r4,-20(fp)
 40054a4:	e17ffc15 	stw	r5,-16(fp)
 40054a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40054ac:	00bfffc4 	movi	r2,-1
 40054b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 40054b4:	00bffb44 	movi	r2,-19
 40054b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 40054bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40054c0:	e13ffb17 	ldw	r4,-20(fp)
 40054c4:	01410034 	movhi	r5,1024
 40054c8:	295e9d04 	addi	r5,r5,31348
 40054cc:	400583c0 	call	400583c <alt_find_dev>
 40054d0:	e0bffa15 	stw	r2,-24(fp)
 40054d4:	e0bffa17 	ldw	r2,-24(fp)
 40054d8:	1004c03a 	cmpne	r2,r2,zero
 40054dc:	1000051e 	bne	r2,zero,40054f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40054e0:	e13ffb17 	ldw	r4,-20(fp)
 40054e4:	40058d00 	call	40058d0 <alt_find_file>
 40054e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 40054ec:	00800044 	movi	r2,1
 40054f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40054f4:	e0bffa17 	ldw	r2,-24(fp)
 40054f8:	1005003a 	cmpeq	r2,r2,zero
 40054fc:	1000301e 	bne	r2,zero,40055c0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4005500:	e13ffa17 	ldw	r4,-24(fp)
 4005504:	40059f00 	call	40059f0 <alt_get_fd>
 4005508:	e0bff815 	stw	r2,-32(fp)
 400550c:	e0bff817 	ldw	r2,-32(fp)
 4005510:	1004403a 	cmpge	r2,r2,zero
 4005514:	1000031e 	bne	r2,zero,4005524 <open+0x94>
    {
      status = index;
 4005518:	e0bff817 	ldw	r2,-32(fp)
 400551c:	e0bff715 	stw	r2,-36(fp)
 4005520:	00002906 	br	40055c8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4005524:	e0bff817 	ldw	r2,-32(fp)
 4005528:	10800324 	muli	r2,r2,12
 400552c:	1007883a 	mov	r3,r2
 4005530:	00810034 	movhi	r2,1024
 4005534:	109a1f04 	addi	r2,r2,26748
 4005538:	1885883a 	add	r2,r3,r2
 400553c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4005540:	e0fffc17 	ldw	r3,-16(fp)
 4005544:	00900034 	movhi	r2,16384
 4005548:	10bfffc4 	addi	r2,r2,-1
 400554c:	1886703a 	and	r3,r3,r2
 4005550:	e0bff917 	ldw	r2,-28(fp)
 4005554:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4005558:	e0bff617 	ldw	r2,-40(fp)
 400555c:	1004c03a 	cmpne	r2,r2,zero
 4005560:	1000061e 	bne	r2,zero,400557c <open+0xec>
 4005564:	e13ff917 	ldw	r4,-28(fp)
 4005568:	40053b40 	call	40053b4 <alt_file_locked>
 400556c:	e0bff715 	stw	r2,-36(fp)
 4005570:	e0bff717 	ldw	r2,-36(fp)
 4005574:	1004803a 	cmplt	r2,r2,zero
 4005578:	1000131e 	bne	r2,zero,40055c8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400557c:	e0bffa17 	ldw	r2,-24(fp)
 4005580:	10800317 	ldw	r2,12(r2)
 4005584:	1005003a 	cmpeq	r2,r2,zero
 4005588:	1000091e 	bne	r2,zero,40055b0 <open+0x120>
 400558c:	e0bffa17 	ldw	r2,-24(fp)
 4005590:	10800317 	ldw	r2,12(r2)
 4005594:	e13ff917 	ldw	r4,-28(fp)
 4005598:	e17ffb17 	ldw	r5,-20(fp)
 400559c:	e1bffc17 	ldw	r6,-16(fp)
 40055a0:	e1fffd17 	ldw	r7,-12(fp)
 40055a4:	103ee83a 	callr	r2
 40055a8:	e0bfff15 	stw	r2,-4(fp)
 40055ac:	00000106 	br	40055b4 <open+0x124>
 40055b0:	e03fff15 	stw	zero,-4(fp)
 40055b4:	e0bfff17 	ldw	r2,-4(fp)
 40055b8:	e0bff715 	stw	r2,-36(fp)
 40055bc:	00000206 	br	40055c8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40055c0:	00bffb44 	movi	r2,-19
 40055c4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40055c8:	e0bff717 	ldw	r2,-36(fp)
 40055cc:	1004403a 	cmpge	r2,r2,zero
 40055d0:	1000091e 	bne	r2,zero,40055f8 <open+0x168>
  {
    alt_release_fd (index);  
 40055d4:	e13ff817 	ldw	r4,-32(fp)
 40055d8:	40037c00 	call	40037c0 <alt_release_fd>
    ALT_ERRNO = -status;
 40055dc:	40056180 	call	4005618 <alt_get_errno>
 40055e0:	e0fff717 	ldw	r3,-36(fp)
 40055e4:	00c7c83a 	sub	r3,zero,r3
 40055e8:	10c00015 	stw	r3,0(r2)
    return -1;
 40055ec:	00bfffc4 	movi	r2,-1
 40055f0:	e0bffe15 	stw	r2,-8(fp)
 40055f4:	00000206 	br	4005600 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 40055f8:	e0bff817 	ldw	r2,-32(fp)
 40055fc:	e0bffe15 	stw	r2,-8(fp)
 4005600:	e0bffe17 	ldw	r2,-8(fp)
}
 4005604:	e037883a 	mov	sp,fp
 4005608:	dfc00117 	ldw	ra,4(sp)
 400560c:	df000017 	ldw	fp,0(sp)
 4005610:	dec00204 	addi	sp,sp,8
 4005614:	f800283a 	ret

04005618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4005618:	defffd04 	addi	sp,sp,-12
 400561c:	dfc00215 	stw	ra,8(sp)
 4005620:	df000115 	stw	fp,4(sp)
 4005624:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4005628:	00810034 	movhi	r2,1024
 400562c:	109ea004 	addi	r2,r2,31360
 4005630:	10800017 	ldw	r2,0(r2)
 4005634:	1005003a 	cmpeq	r2,r2,zero
 4005638:	1000061e 	bne	r2,zero,4005654 <alt_get_errno+0x3c>
 400563c:	00810034 	movhi	r2,1024
 4005640:	109ea004 	addi	r2,r2,31360
 4005644:	10800017 	ldw	r2,0(r2)
 4005648:	103ee83a 	callr	r2
 400564c:	e0bfff15 	stw	r2,-4(fp)
 4005650:	00000306 	br	4005660 <alt_get_errno+0x48>
 4005654:	00810074 	movhi	r2,1025
 4005658:	10a54a04 	addi	r2,r2,-27352
 400565c:	e0bfff15 	stw	r2,-4(fp)
 4005660:	e0bfff17 	ldw	r2,-4(fp)
}
 4005664:	e037883a 	mov	sp,fp
 4005668:	dfc00117 	ldw	ra,4(sp)
 400566c:	df000017 	ldw	fp,0(sp)
 4005670:	dec00204 	addi	sp,sp,8
 4005674:	f800283a 	ret

04005678 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4005678:	defffa04 	addi	sp,sp,-24
 400567c:	df000515 	stw	fp,20(sp)
 4005680:	df000504 	addi	fp,sp,20
 4005684:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005688:	0005303a 	rdctl	r2,status
 400568c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4005690:	e0fffd17 	ldw	r3,-12(fp)
 4005694:	00bfff84 	movi	r2,-2
 4005698:	1884703a 	and	r2,r3,r2
 400569c:	1001703a 	wrctl	status,r2
  
  return context;
 40056a0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40056a4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 40056a8:	e0bfff17 	ldw	r2,-4(fp)
 40056ac:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40056b0:	e0bffc17 	ldw	r2,-16(fp)
 40056b4:	10c00017 	ldw	r3,0(r2)
 40056b8:	e0bffc17 	ldw	r2,-16(fp)
 40056bc:	10800117 	ldw	r2,4(r2)
 40056c0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 40056c4:	e0bffc17 	ldw	r2,-16(fp)
 40056c8:	10c00117 	ldw	r3,4(r2)
 40056cc:	e0bffc17 	ldw	r2,-16(fp)
 40056d0:	10800017 	ldw	r2,0(r2)
 40056d4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40056d8:	e0fffc17 	ldw	r3,-16(fp)
 40056dc:	e0bffc17 	ldw	r2,-16(fp)
 40056e0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 40056e4:	e0fffc17 	ldw	r3,-16(fp)
 40056e8:	e0bffc17 	ldw	r2,-16(fp)
 40056ec:	18800015 	stw	r2,0(r3)
 40056f0:	e0bffe17 	ldw	r2,-8(fp)
 40056f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40056f8:	e0bffb17 	ldw	r2,-20(fp)
 40056fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4005700:	e037883a 	mov	sp,fp
 4005704:	df000017 	ldw	fp,0(sp)
 4005708:	dec00104 	addi	sp,sp,4
 400570c:	f800283a 	ret

04005710 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4005710:	defffb04 	addi	sp,sp,-20
 4005714:	dfc00415 	stw	ra,16(sp)
 4005718:	df000315 	stw	fp,12(sp)
 400571c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4005720:	d0a00c17 	ldw	r2,-32720(gp)
 4005724:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4005728:	d0a6b917 	ldw	r2,-25884(gp)
 400572c:	10800044 	addi	r2,r2,1
 4005730:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4005734:	00003106 	br	40057fc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4005738:	e0bffe17 	ldw	r2,-8(fp)
 400573c:	10800017 	ldw	r2,0(r2)
 4005740:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4005744:	e0bffe17 	ldw	r2,-8(fp)
 4005748:	10800403 	ldbu	r2,16(r2)
 400574c:	10803fcc 	andi	r2,r2,255
 4005750:	1005003a 	cmpeq	r2,r2,zero
 4005754:	1000051e 	bne	r2,zero,400576c <alt_tick+0x5c>
 4005758:	d0a6b917 	ldw	r2,-25884(gp)
 400575c:	1004c03a 	cmpne	r2,r2,zero
 4005760:	1000021e 	bne	r2,zero,400576c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4005764:	e0bffe17 	ldw	r2,-8(fp)
 4005768:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400576c:	e0bffe17 	ldw	r2,-8(fp)
 4005770:	10c00217 	ldw	r3,8(r2)
 4005774:	d0a6b917 	ldw	r2,-25884(gp)
 4005778:	10c01e36 	bltu	r2,r3,40057f4 <alt_tick+0xe4>
 400577c:	e0bffe17 	ldw	r2,-8(fp)
 4005780:	10800403 	ldbu	r2,16(r2)
 4005784:	10803fcc 	andi	r2,r2,255
 4005788:	1004c03a 	cmpne	r2,r2,zero
 400578c:	1000191e 	bne	r2,zero,40057f4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4005790:	e0bffe17 	ldw	r2,-8(fp)
 4005794:	10c00317 	ldw	r3,12(r2)
 4005798:	e0bffe17 	ldw	r2,-8(fp)
 400579c:	11000517 	ldw	r4,20(r2)
 40057a0:	183ee83a 	callr	r3
 40057a4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40057a8:	e0bffd17 	ldw	r2,-12(fp)
 40057ac:	1004c03a 	cmpne	r2,r2,zero
 40057b0:	1000031e 	bne	r2,zero,40057c0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 40057b4:	e13ffe17 	ldw	r4,-8(fp)
 40057b8:	40056780 	call	4005678 <alt_alarm_stop>
 40057bc:	00000d06 	br	40057f4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 40057c0:	e0bffe17 	ldw	r2,-8(fp)
 40057c4:	10c00217 	ldw	r3,8(r2)
 40057c8:	e0bffd17 	ldw	r2,-12(fp)
 40057cc:	1887883a 	add	r3,r3,r2
 40057d0:	e0bffe17 	ldw	r2,-8(fp)
 40057d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40057d8:	e0bffe17 	ldw	r2,-8(fp)
 40057dc:	10c00217 	ldw	r3,8(r2)
 40057e0:	d0a6b917 	ldw	r2,-25884(gp)
 40057e4:	1880032e 	bgeu	r3,r2,40057f4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 40057e8:	e0fffe17 	ldw	r3,-8(fp)
 40057ec:	00800044 	movi	r2,1
 40057f0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 40057f4:	e0bfff17 	ldw	r2,-4(fp)
 40057f8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40057fc:	d0e00c04 	addi	r3,gp,-32720
 4005800:	e0bffe17 	ldw	r2,-8(fp)
 4005804:	10ffcc1e 	bne	r2,r3,4005738 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4005808:	e037883a 	mov	sp,fp
 400580c:	dfc00117 	ldw	ra,4(sp)
 4005810:	df000017 	ldw	fp,0(sp)
 4005814:	dec00204 	addi	sp,sp,8
 4005818:	f800283a 	ret

0400581c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 400581c:	deffff04 	addi	sp,sp,-4
 4005820:	df000015 	stw	fp,0(sp)
 4005824:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4005828:	000170fa 	wrctl	ienable,zero
}
 400582c:	e037883a 	mov	sp,fp
 4005830:	df000017 	ldw	fp,0(sp)
 4005834:	dec00104 	addi	sp,sp,4
 4005838:	f800283a 	ret

0400583c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400583c:	defff904 	addi	sp,sp,-28
 4005840:	dfc00615 	stw	ra,24(sp)
 4005844:	df000515 	stw	fp,20(sp)
 4005848:	df000504 	addi	fp,sp,20
 400584c:	e13ffd15 	stw	r4,-12(fp)
 4005850:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4005854:	e0bffe17 	ldw	r2,-8(fp)
 4005858:	10800017 	ldw	r2,0(r2)
 400585c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4005860:	e13ffd17 	ldw	r4,-12(fp)
 4005864:	40007c00 	call	40007c0 <strlen>
 4005868:	10800044 	addi	r2,r2,1
 400586c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4005870:	00000d06 	br	40058a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4005874:	e0bffc17 	ldw	r2,-16(fp)
 4005878:	11000217 	ldw	r4,8(r2)
 400587c:	e1bffb17 	ldw	r6,-20(fp)
 4005880:	e17ffd17 	ldw	r5,-12(fp)
 4005884:	4005b840 	call	4005b84 <memcmp>
 4005888:	1004c03a 	cmpne	r2,r2,zero
 400588c:	1000031e 	bne	r2,zero,400589c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4005890:	e0bffc17 	ldw	r2,-16(fp)
 4005894:	e0bfff15 	stw	r2,-4(fp)
 4005898:	00000706 	br	40058b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400589c:	e0bffc17 	ldw	r2,-16(fp)
 40058a0:	10800017 	ldw	r2,0(r2)
 40058a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40058a8:	e0fffe17 	ldw	r3,-8(fp)
 40058ac:	e0bffc17 	ldw	r2,-16(fp)
 40058b0:	10fff01e 	bne	r2,r3,4005874 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40058b4:	e03fff15 	stw	zero,-4(fp)
 40058b8:	e0bfff17 	ldw	r2,-4(fp)
}
 40058bc:	e037883a 	mov	sp,fp
 40058c0:	dfc00117 	ldw	ra,4(sp)
 40058c4:	df000017 	ldw	fp,0(sp)
 40058c8:	dec00204 	addi	sp,sp,8
 40058cc:	f800283a 	ret

040058d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40058d0:	defffa04 	addi	sp,sp,-24
 40058d4:	dfc00515 	stw	ra,20(sp)
 40058d8:	df000415 	stw	fp,16(sp)
 40058dc:	df000404 	addi	fp,sp,16
 40058e0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40058e4:	00810034 	movhi	r2,1024
 40058e8:	109e9b04 	addi	r2,r2,31340
 40058ec:	10800017 	ldw	r2,0(r2)
 40058f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40058f4:	00003306 	br	40059c4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 40058f8:	e0bffd17 	ldw	r2,-12(fp)
 40058fc:	11000217 	ldw	r4,8(r2)
 4005900:	40007c00 	call	40007c0 <strlen>
 4005904:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 4005908:	e0bffd17 	ldw	r2,-12(fp)
 400590c:	10c00217 	ldw	r3,8(r2)
 4005910:	e0bffc17 	ldw	r2,-16(fp)
 4005914:	1885883a 	add	r2,r3,r2
 4005918:	10bfffc4 	addi	r2,r2,-1
 400591c:	10800003 	ldbu	r2,0(r2)
 4005920:	10803fcc 	andi	r2,r2,255
 4005924:	1080201c 	xori	r2,r2,128
 4005928:	10bfe004 	addi	r2,r2,-128
 400592c:	10800bd8 	cmpnei	r2,r2,47
 4005930:	1000031e 	bne	r2,zero,4005940 <alt_find_file+0x70>
    {
      len -= 1;
 4005934:	e0bffc17 	ldw	r2,-16(fp)
 4005938:	10bfffc4 	addi	r2,r2,-1
 400593c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4005940:	e0bffc17 	ldw	r2,-16(fp)
 4005944:	1007883a 	mov	r3,r2
 4005948:	e0bffe17 	ldw	r2,-8(fp)
 400594c:	1885883a 	add	r2,r3,r2
 4005950:	10800003 	ldbu	r2,0(r2)
 4005954:	10803fcc 	andi	r2,r2,255
 4005958:	1080201c 	xori	r2,r2,128
 400595c:	10bfe004 	addi	r2,r2,-128
 4005960:	10800be0 	cmpeqi	r2,r2,47
 4005964:	10000a1e 	bne	r2,zero,4005990 <alt_find_file+0xc0>
 4005968:	e0bffc17 	ldw	r2,-16(fp)
 400596c:	1007883a 	mov	r3,r2
 4005970:	e0bffe17 	ldw	r2,-8(fp)
 4005974:	1885883a 	add	r2,r3,r2
 4005978:	10800003 	ldbu	r2,0(r2)
 400597c:	10803fcc 	andi	r2,r2,255
 4005980:	1080201c 	xori	r2,r2,128
 4005984:	10bfe004 	addi	r2,r2,-128
 4005988:	1004c03a 	cmpne	r2,r2,zero
 400598c:	10000a1e 	bne	r2,zero,40059b8 <alt_find_file+0xe8>
 4005990:	e0bffd17 	ldw	r2,-12(fp)
 4005994:	11000217 	ldw	r4,8(r2)
 4005998:	e1bffc17 	ldw	r6,-16(fp)
 400599c:	e17ffe17 	ldw	r5,-8(fp)
 40059a0:	4005b840 	call	4005b84 <memcmp>
 40059a4:	1004c03a 	cmpne	r2,r2,zero
 40059a8:	1000031e 	bne	r2,zero,40059b8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40059ac:	e0bffd17 	ldw	r2,-12(fp)
 40059b0:	e0bfff15 	stw	r2,-4(fp)
 40059b4:	00000806 	br	40059d8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 40059b8:	e0bffd17 	ldw	r2,-12(fp)
 40059bc:	10800017 	ldw	r2,0(r2)
 40059c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40059c4:	00c10034 	movhi	r3,1024
 40059c8:	18de9b04 	addi	r3,r3,31340
 40059cc:	e0bffd17 	ldw	r2,-12(fp)
 40059d0:	10ffc91e 	bne	r2,r3,40058f8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40059d4:	e03fff15 	stw	zero,-4(fp)
 40059d8:	e0bfff17 	ldw	r2,-4(fp)
}
 40059dc:	e037883a 	mov	sp,fp
 40059e0:	dfc00117 	ldw	ra,4(sp)
 40059e4:	df000017 	ldw	fp,0(sp)
 40059e8:	dec00204 	addi	sp,sp,8
 40059ec:	f800283a 	ret

040059f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40059f0:	defffc04 	addi	sp,sp,-16
 40059f4:	df000315 	stw	fp,12(sp)
 40059f8:	df000304 	addi	fp,sp,12
 40059fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4005a00:	00bffa04 	movi	r2,-24
 4005a04:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005a08:	e03ffe15 	stw	zero,-8(fp)
 4005a0c:	00001e06 	br	4005a88 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 4005a10:	e0bffe17 	ldw	r2,-8(fp)
 4005a14:	00c10034 	movhi	r3,1024
 4005a18:	18da1f04 	addi	r3,r3,26748
 4005a1c:	10800324 	muli	r2,r2,12
 4005a20:	10c5883a 	add	r2,r2,r3
 4005a24:	10800017 	ldw	r2,0(r2)
 4005a28:	1004c03a 	cmpne	r2,r2,zero
 4005a2c:	1000131e 	bne	r2,zero,4005a7c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 4005a30:	e0bffe17 	ldw	r2,-8(fp)
 4005a34:	00c10034 	movhi	r3,1024
 4005a38:	18da1f04 	addi	r3,r3,26748
 4005a3c:	10800324 	muli	r2,r2,12
 4005a40:	10c7883a 	add	r3,r2,r3
 4005a44:	e0bfff17 	ldw	r2,-4(fp)
 4005a48:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 4005a4c:	00810034 	movhi	r2,1024
 4005a50:	109e9f04 	addi	r2,r2,31356
 4005a54:	10c00017 	ldw	r3,0(r2)
 4005a58:	e0bffe17 	ldw	r2,-8(fp)
 4005a5c:	1880040e 	bge	r3,r2,4005a70 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 4005a60:	00c10034 	movhi	r3,1024
 4005a64:	18de9f04 	addi	r3,r3,31356
 4005a68:	e0bffe17 	ldw	r2,-8(fp)
 4005a6c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4005a70:	e0bffe17 	ldw	r2,-8(fp)
 4005a74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4005a78:	00000606 	br	4005a94 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005a7c:	e0bffe17 	ldw	r2,-8(fp)
 4005a80:	10800044 	addi	r2,r2,1
 4005a84:	e0bffe15 	stw	r2,-8(fp)
 4005a88:	e0bffe17 	ldw	r2,-8(fp)
 4005a8c:	10800810 	cmplti	r2,r2,32
 4005a90:	103fdf1e 	bne	r2,zero,4005a10 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4005a94:	e0bffd17 	ldw	r2,-12(fp)
}
 4005a98:	e037883a 	mov	sp,fp
 4005a9c:	df000017 	ldw	fp,0(sp)
 4005aa0:	dec00104 	addi	sp,sp,4
 4005aa4:	f800283a 	ret

04005aa8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4005aa8:	defffb04 	addi	sp,sp,-20
 4005aac:	df000415 	stw	fp,16(sp)
 4005ab0:	df000404 	addi	fp,sp,16
 4005ab4:	e13ffe15 	stw	r4,-8(fp)
 4005ab8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4005abc:	e0bfff17 	ldw	r2,-4(fp)
 4005ac0:	10840070 	cmpltui	r2,r2,4097
 4005ac4:	1000021e 	bne	r2,zero,4005ad0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4005ac8:	00840004 	movi	r2,4096
 4005acc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4005ad0:	e0fffe17 	ldw	r3,-8(fp)
 4005ad4:	e0bfff17 	ldw	r2,-4(fp)
 4005ad8:	1885883a 	add	r2,r3,r2
 4005adc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4005ae0:	e0bffe17 	ldw	r2,-8(fp)
 4005ae4:	e0bffd15 	stw	r2,-12(fp)
 4005ae8:	00000506 	br	4005b00 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4005aec:	e0bffd17 	ldw	r2,-12(fp)
 4005af0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4005af4:	e0bffd17 	ldw	r2,-12(fp)
 4005af8:	10800804 	addi	r2,r2,32
 4005afc:	e0bffd15 	stw	r2,-12(fp)
 4005b00:	e0fffd17 	ldw	r3,-12(fp)
 4005b04:	e0bffc17 	ldw	r2,-16(fp)
 4005b08:	18bff836 	bltu	r3,r2,4005aec <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4005b0c:	e0bffe17 	ldw	r2,-8(fp)
 4005b10:	108007cc 	andi	r2,r2,31
 4005b14:	1005003a 	cmpeq	r2,r2,zero
 4005b18:	1000021e 	bne	r2,zero,4005b24 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4005b1c:	e0bffd17 	ldw	r2,-12(fp)
 4005b20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4005b24:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4005b28:	e037883a 	mov	sp,fp
 4005b2c:	df000017 	ldw	fp,0(sp)
 4005b30:	dec00104 	addi	sp,sp,4
 4005b34:	f800283a 	ret

04005b38 <atexit>:
 4005b38:	200b883a 	mov	r5,r4
 4005b3c:	000d883a 	mov	r6,zero
 4005b40:	0009883a 	mov	r4,zero
 4005b44:	000f883a 	mov	r7,zero
 4005b48:	4005bf81 	jmpi	4005bf8 <__register_exitproc>

04005b4c <exit>:
 4005b4c:	defffe04 	addi	sp,sp,-8
 4005b50:	000b883a 	mov	r5,zero
 4005b54:	dc000015 	stw	r16,0(sp)
 4005b58:	dfc00115 	stw	ra,4(sp)
 4005b5c:	2021883a 	mov	r16,r4
 4005b60:	4005d300 	call	4005d30 <__call_exitprocs>
 4005b64:	00810034 	movhi	r2,1024
 4005b68:	109e9804 	addi	r2,r2,31328
 4005b6c:	11000017 	ldw	r4,0(r2)
 4005b70:	20800f17 	ldw	r2,60(r4)
 4005b74:	10000126 	beq	r2,zero,4005b7c <exit+0x30>
 4005b78:	103ee83a 	callr	r2
 4005b7c:	8009883a 	mov	r4,r16
 4005b80:	4005f200 	call	4005f20 <_exit>

04005b84 <memcmp>:
 4005b84:	00c000c4 	movi	r3,3
 4005b88:	1980032e 	bgeu	r3,r6,4005b98 <memcmp+0x14>
 4005b8c:	2144b03a 	or	r2,r4,r5
 4005b90:	10c4703a 	and	r2,r2,r3
 4005b94:	10000f26 	beq	r2,zero,4005bd4 <memcmp+0x50>
 4005b98:	31ffffc4 	addi	r7,r6,-1
 4005b9c:	3000061e 	bne	r6,zero,4005bb8 <memcmp+0x34>
 4005ba0:	00000a06 	br	4005bcc <memcmp+0x48>
 4005ba4:	39ffffc4 	addi	r7,r7,-1
 4005ba8:	00bfffc4 	movi	r2,-1
 4005bac:	21000044 	addi	r4,r4,1
 4005bb0:	29400044 	addi	r5,r5,1
 4005bb4:	38800526 	beq	r7,r2,4005bcc <memcmp+0x48>
 4005bb8:	20c00003 	ldbu	r3,0(r4)
 4005bbc:	28800003 	ldbu	r2,0(r5)
 4005bc0:	18bff826 	beq	r3,r2,4005ba4 <memcmp+0x20>
 4005bc4:	1885c83a 	sub	r2,r3,r2
 4005bc8:	f800283a 	ret
 4005bcc:	0005883a 	mov	r2,zero
 4005bd0:	f800283a 	ret
 4005bd4:	180f883a 	mov	r7,r3
 4005bd8:	20c00017 	ldw	r3,0(r4)
 4005bdc:	28800017 	ldw	r2,0(r5)
 4005be0:	18bfed1e 	bne	r3,r2,4005b98 <memcmp+0x14>
 4005be4:	31bfff04 	addi	r6,r6,-4
 4005be8:	21000104 	addi	r4,r4,4
 4005bec:	29400104 	addi	r5,r5,4
 4005bf0:	39bff936 	bltu	r7,r6,4005bd8 <memcmp+0x54>
 4005bf4:	003fe806 	br	4005b98 <memcmp+0x14>

04005bf8 <__register_exitproc>:
 4005bf8:	defffa04 	addi	sp,sp,-24
 4005bfc:	00810034 	movhi	r2,1024
 4005c00:	109e9804 	addi	r2,r2,31328
 4005c04:	dc000015 	stw	r16,0(sp)
 4005c08:	14000017 	ldw	r16,0(r2)
 4005c0c:	dd000415 	stw	r20,16(sp)
 4005c10:	2829883a 	mov	r20,r5
 4005c14:	81405217 	ldw	r5,328(r16)
 4005c18:	dcc00315 	stw	r19,12(sp)
 4005c1c:	dc800215 	stw	r18,8(sp)
 4005c20:	dc400115 	stw	r17,4(sp)
 4005c24:	dfc00515 	stw	ra,20(sp)
 4005c28:	2023883a 	mov	r17,r4
 4005c2c:	3027883a 	mov	r19,r6
 4005c30:	3825883a 	mov	r18,r7
 4005c34:	28002526 	beq	r5,zero,4005ccc <__register_exitproc+0xd4>
 4005c38:	29000117 	ldw	r4,4(r5)
 4005c3c:	008007c4 	movi	r2,31
 4005c40:	11002716 	blt	r2,r4,4005ce0 <__register_exitproc+0xe8>
 4005c44:	8800101e 	bne	r17,zero,4005c88 <__register_exitproc+0x90>
 4005c48:	2105883a 	add	r2,r4,r4
 4005c4c:	1085883a 	add	r2,r2,r2
 4005c50:	20c00044 	addi	r3,r4,1
 4005c54:	1145883a 	add	r2,r2,r5
 4005c58:	0009883a 	mov	r4,zero
 4005c5c:	15000215 	stw	r20,8(r2)
 4005c60:	28c00115 	stw	r3,4(r5)
 4005c64:	2005883a 	mov	r2,r4
 4005c68:	dfc00517 	ldw	ra,20(sp)
 4005c6c:	dd000417 	ldw	r20,16(sp)
 4005c70:	dcc00317 	ldw	r19,12(sp)
 4005c74:	dc800217 	ldw	r18,8(sp)
 4005c78:	dc400117 	ldw	r17,4(sp)
 4005c7c:	dc000017 	ldw	r16,0(sp)
 4005c80:	dec00604 	addi	sp,sp,24
 4005c84:	f800283a 	ret
 4005c88:	29802204 	addi	r6,r5,136
 4005c8c:	00800044 	movi	r2,1
 4005c90:	110e983a 	sll	r7,r2,r4
 4005c94:	30c04017 	ldw	r3,256(r6)
 4005c98:	2105883a 	add	r2,r4,r4
 4005c9c:	1085883a 	add	r2,r2,r2
 4005ca0:	1185883a 	add	r2,r2,r6
 4005ca4:	19c6b03a 	or	r3,r3,r7
 4005ca8:	14802015 	stw	r18,128(r2)
 4005cac:	14c00015 	stw	r19,0(r2)
 4005cb0:	00800084 	movi	r2,2
 4005cb4:	30c04015 	stw	r3,256(r6)
 4005cb8:	88bfe31e 	bne	r17,r2,4005c48 <__register_exitproc+0x50>
 4005cbc:	30804117 	ldw	r2,260(r6)
 4005cc0:	11c4b03a 	or	r2,r2,r7
 4005cc4:	30804115 	stw	r2,260(r6)
 4005cc8:	003fdf06 	br	4005c48 <__register_exitproc+0x50>
 4005ccc:	00810074 	movhi	r2,1025
 4005cd0:	10a61b04 	addi	r2,r2,-26516
 4005cd4:	100b883a 	mov	r5,r2
 4005cd8:	80805215 	stw	r2,328(r16)
 4005cdc:	003fd606 	br	4005c38 <__register_exitproc+0x40>
 4005ce0:	00800034 	movhi	r2,0
 4005ce4:	10800004 	addi	r2,r2,0
 4005ce8:	1000021e 	bne	r2,zero,4005cf4 <__register_exitproc+0xfc>
 4005cec:	013fffc4 	movi	r4,-1
 4005cf0:	003fdc06 	br	4005c64 <__register_exitproc+0x6c>
 4005cf4:	01006404 	movi	r4,400
 4005cf8:	103ee83a 	callr	r2
 4005cfc:	1007883a 	mov	r3,r2
 4005d00:	103ffa26 	beq	r2,zero,4005cec <__register_exitproc+0xf4>
 4005d04:	80805217 	ldw	r2,328(r16)
 4005d08:	180b883a 	mov	r5,r3
 4005d0c:	18000115 	stw	zero,4(r3)
 4005d10:	18800015 	stw	r2,0(r3)
 4005d14:	80c05215 	stw	r3,328(r16)
 4005d18:	18006215 	stw	zero,392(r3)
 4005d1c:	18006315 	stw	zero,396(r3)
 4005d20:	0009883a 	mov	r4,zero
 4005d24:	883fc826 	beq	r17,zero,4005c48 <__register_exitproc+0x50>
 4005d28:	003fd706 	br	4005c88 <__register_exitproc+0x90>

04005d2c <register_fini>:
 4005d2c:	f800283a 	ret

04005d30 <__call_exitprocs>:
 4005d30:	00810034 	movhi	r2,1024
 4005d34:	109e9804 	addi	r2,r2,31328
 4005d38:	10800017 	ldw	r2,0(r2)
 4005d3c:	defff304 	addi	sp,sp,-52
 4005d40:	df000b15 	stw	fp,44(sp)
 4005d44:	d8800115 	stw	r2,4(sp)
 4005d48:	00800034 	movhi	r2,0
 4005d4c:	10800004 	addi	r2,r2,0
 4005d50:	1005003a 	cmpeq	r2,r2,zero
 4005d54:	d8800215 	stw	r2,8(sp)
 4005d58:	d8800117 	ldw	r2,4(sp)
 4005d5c:	dd400815 	stw	r21,32(sp)
 4005d60:	dd000715 	stw	r20,28(sp)
 4005d64:	10805204 	addi	r2,r2,328
 4005d68:	dfc00c15 	stw	ra,48(sp)
 4005d6c:	ddc00a15 	stw	r23,40(sp)
 4005d70:	dd800915 	stw	r22,36(sp)
 4005d74:	dcc00615 	stw	r19,24(sp)
 4005d78:	dc800515 	stw	r18,20(sp)
 4005d7c:	dc400415 	stw	r17,16(sp)
 4005d80:	dc000315 	stw	r16,12(sp)
 4005d84:	282b883a 	mov	r21,r5
 4005d88:	2039883a 	mov	fp,r4
 4005d8c:	d8800015 	stw	r2,0(sp)
 4005d90:	2829003a 	cmpeq	r20,r5,zero
 4005d94:	d8800117 	ldw	r2,4(sp)
 4005d98:	14405217 	ldw	r17,328(r2)
 4005d9c:	88001026 	beq	r17,zero,4005de0 <__call_exitprocs+0xb0>
 4005da0:	ddc00017 	ldw	r23,0(sp)
 4005da4:	88800117 	ldw	r2,4(r17)
 4005da8:	8c802204 	addi	r18,r17,136
 4005dac:	143fffc4 	addi	r16,r2,-1
 4005db0:	80000916 	blt	r16,zero,4005dd8 <__call_exitprocs+0xa8>
 4005db4:	05bfffc4 	movi	r22,-1
 4005db8:	a000151e 	bne	r20,zero,4005e10 <__call_exitprocs+0xe0>
 4005dbc:	8409883a 	add	r4,r16,r16
 4005dc0:	2105883a 	add	r2,r4,r4
 4005dc4:	1485883a 	add	r2,r2,r18
 4005dc8:	10c02017 	ldw	r3,128(r2)
 4005dcc:	a8c01126 	beq	r21,r3,4005e14 <__call_exitprocs+0xe4>
 4005dd0:	843fffc4 	addi	r16,r16,-1
 4005dd4:	85bff81e 	bne	r16,r22,4005db8 <__call_exitprocs+0x88>
 4005dd8:	d8800217 	ldw	r2,8(sp)
 4005ddc:	10003126 	beq	r2,zero,4005ea4 <__call_exitprocs+0x174>
 4005de0:	dfc00c17 	ldw	ra,48(sp)
 4005de4:	df000b17 	ldw	fp,44(sp)
 4005de8:	ddc00a17 	ldw	r23,40(sp)
 4005dec:	dd800917 	ldw	r22,36(sp)
 4005df0:	dd400817 	ldw	r21,32(sp)
 4005df4:	dd000717 	ldw	r20,28(sp)
 4005df8:	dcc00617 	ldw	r19,24(sp)
 4005dfc:	dc800517 	ldw	r18,20(sp)
 4005e00:	dc400417 	ldw	r17,16(sp)
 4005e04:	dc000317 	ldw	r16,12(sp)
 4005e08:	dec00d04 	addi	sp,sp,52
 4005e0c:	f800283a 	ret
 4005e10:	8409883a 	add	r4,r16,r16
 4005e14:	88c00117 	ldw	r3,4(r17)
 4005e18:	2105883a 	add	r2,r4,r4
 4005e1c:	1445883a 	add	r2,r2,r17
 4005e20:	18ffffc4 	addi	r3,r3,-1
 4005e24:	11800217 	ldw	r6,8(r2)
 4005e28:	1c001526 	beq	r3,r16,4005e80 <__call_exitprocs+0x150>
 4005e2c:	10000215 	stw	zero,8(r2)
 4005e30:	303fe726 	beq	r6,zero,4005dd0 <__call_exitprocs+0xa0>
 4005e34:	00c00044 	movi	r3,1
 4005e38:	1c06983a 	sll	r3,r3,r16
 4005e3c:	90804017 	ldw	r2,256(r18)
 4005e40:	8cc00117 	ldw	r19,4(r17)
 4005e44:	1884703a 	and	r2,r3,r2
 4005e48:	10001426 	beq	r2,zero,4005e9c <__call_exitprocs+0x16c>
 4005e4c:	90804117 	ldw	r2,260(r18)
 4005e50:	1884703a 	and	r2,r3,r2
 4005e54:	10000c1e 	bne	r2,zero,4005e88 <__call_exitprocs+0x158>
 4005e58:	2105883a 	add	r2,r4,r4
 4005e5c:	1485883a 	add	r2,r2,r18
 4005e60:	11400017 	ldw	r5,0(r2)
 4005e64:	e009883a 	mov	r4,fp
 4005e68:	303ee83a 	callr	r6
 4005e6c:	88800117 	ldw	r2,4(r17)
 4005e70:	98bfc81e 	bne	r19,r2,4005d94 <__call_exitprocs+0x64>
 4005e74:	b8800017 	ldw	r2,0(r23)
 4005e78:	147fd526 	beq	r2,r17,4005dd0 <__call_exitprocs+0xa0>
 4005e7c:	003fc506 	br	4005d94 <__call_exitprocs+0x64>
 4005e80:	8c000115 	stw	r16,4(r17)
 4005e84:	003fea06 	br	4005e30 <__call_exitprocs+0x100>
 4005e88:	2105883a 	add	r2,r4,r4
 4005e8c:	1485883a 	add	r2,r2,r18
 4005e90:	11000017 	ldw	r4,0(r2)
 4005e94:	303ee83a 	callr	r6
 4005e98:	003ff406 	br	4005e6c <__call_exitprocs+0x13c>
 4005e9c:	303ee83a 	callr	r6
 4005ea0:	003ff206 	br	4005e6c <__call_exitprocs+0x13c>
 4005ea4:	88800117 	ldw	r2,4(r17)
 4005ea8:	1000081e 	bne	r2,zero,4005ecc <__call_exitprocs+0x19c>
 4005eac:	89000017 	ldw	r4,0(r17)
 4005eb0:	20000726 	beq	r4,zero,4005ed0 <__call_exitprocs+0x1a0>
 4005eb4:	b9000015 	stw	r4,0(r23)
 4005eb8:	8809883a 	mov	r4,r17
 4005ebc:	00000000 	call	0 <__alt_mem_sdram_controller>
 4005ec0:	bc400017 	ldw	r17,0(r23)
 4005ec4:	883fb71e 	bne	r17,zero,4005da4 <__call_exitprocs+0x74>
 4005ec8:	003fc506 	br	4005de0 <__call_exitprocs+0xb0>
 4005ecc:	89000017 	ldw	r4,0(r17)
 4005ed0:	882f883a 	mov	r23,r17
 4005ed4:	2023883a 	mov	r17,r4
 4005ed8:	883fb21e 	bne	r17,zero,4005da4 <__call_exitprocs+0x74>
 4005edc:	003fc006 	br	4005de0 <__call_exitprocs+0xb0>

04005ee0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4005ee0:	defffd04 	addi	sp,sp,-12
 4005ee4:	df000215 	stw	fp,8(sp)
 4005ee8:	df000204 	addi	fp,sp,8
 4005eec:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4005ef0:	e0bfff17 	ldw	r2,-4(fp)
 4005ef4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4005ef8:	e0bffe17 	ldw	r2,-8(fp)
 4005efc:	1005003a 	cmpeq	r2,r2,zero
 4005f00:	1000021e 	bne	r2,zero,4005f0c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4005f04:	002af070 	cmpltui	zero,zero,43969
 4005f08:	00000106 	br	4005f10 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4005f0c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4005f10:	e037883a 	mov	sp,fp
 4005f14:	df000017 	ldw	fp,0(sp)
 4005f18:	dec00104 	addi	sp,sp,4
 4005f1c:	f800283a 	ret

04005f20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4005f20:	defffd04 	addi	sp,sp,-12
 4005f24:	dfc00215 	stw	ra,8(sp)
 4005f28:	df000115 	stw	fp,4(sp)
 4005f2c:	df000104 	addi	fp,sp,4
 4005f30:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4005f34:	e13fff17 	ldw	r4,-4(fp)
 4005f38:	4005ee00 	call	4005ee0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4005f3c:	003fff06 	br	4005f3c <_exit+0x1c>
 4005f40:	04005d2c 	andhi	r16,zero,372
