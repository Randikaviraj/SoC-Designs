
Stage4.elf:     file format elf32-littlenios2
Stage4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x055556d4

Program Header:
    LOAD off    0x00000000 vaddr 0x08001000 paddr 0x05554d20 align 2**12
         filesz 0x000009b4 memsz 0x000009b4 flags r-x
    LOAD off    0x000016d4 vaddr 0x055556d4 paddr 0x055556d4 align 2**12
         filesz 0x00006894 memsz 0x00006894 flags r-x
    LOAD off    0x00007f68 vaddr 0x0555bf68 paddr 0x0555e1c4 align 2**12
         filesz 0x0000225c memsz 0x0000225c flags rw-
    LOAD off    0x0000a420 vaddr 0x05560420 paddr 0x05560420 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-
    LOAD off    0x0000a800 vaddr 0x08001800 paddr 0x08001800 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08001800  08001800  0000a800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  08001820  05555540  00000820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006848  055556d4  055556d4  000016d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0555bf1c  0555bf1c  00007f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000225c  0555bf68  0555e1c4  00007f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  05560420  05560420  0000a420  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000a820  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  0000a848  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001130  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a58f  00000000  00000000  0000c290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005043  00000000  00000000  0002681f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cf60  00000000  00000000  0002b862  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001250  00000000  00000000  000387c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001622  00000000  00000000  00039a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004165  00000000  00000000  0003b036  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003f19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00041e91  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00041e94  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00041e99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00041e9a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00041e9b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00041ea6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00041eb1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  00041ebc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00041ebf  2**0
                  CONTENTS, READONLY
 26 .jdi          000190dd  00000000  00000000  00041ef3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00164bd4  00000000  00000000  0005afd0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08001800 l    d  .entry	00000000 .entry
08001820 l    d  .exceptions	00000000 .exceptions
055556d4 l    d  .text	00000000 .text
0555bf1c l    d  .rodata	00000000 .rodata
0555bf68 l    d  .rwdata	00000000 .rwdata
05560420 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0555570c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 huffman.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0555c77c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
05557f7c l     F .text	00000058 std
05558088 l     F .text	00000008 __fp_lock
05558090 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
05559050 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
055590b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
055591b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
055592d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
055593b0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0555950c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
05559738 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0555e1b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
055599d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0555d12c l     O .rwdata	00001060 jtag_uart_4
05559ac4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0555a264 l     F .text	00000228 altera_avalon_jtag_uart_irq
0555a48c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0555ab08 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0555ae2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0555b250 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0555b38c l     F .text	000000dc alt_file_locked
0555b5f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0555bd04 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0555beb8 l     F .text	00000040 alt_sim_halt
05558df4 g     F .text	00000070 _isatty_r
0555956c g     F .text	0000006c alt_main
05556644 g     F .text	000000a0 _puts_r
0556047c g     O .bss	00000100 alt_irq
05558e64 g     F .text	00000078 _lseek_r
05559db4 g     F .text	00000060 altera_avalon_fifo_write_almostfull
0555e1c4 g       *ABS*	00000000 __flash_rwdata_start
0556070c g       *ABS*	00000000 __alt_heap_start
0555bf68 g     O .rwdata	00000018 luminance_dc_code_table
05558a30 g     F .text	00000068 __sseek
05557fe4 g     F .text	000000a4 __sinit
055580e4 g     F .text	00000068 __sfmoreglue
055595f8 g     F .text	00000020 __malloc_unlock
055574cc g     F .text	000000e0 memmove
05559afc g     F .text	000000bc altera_avalon_fifo_init
055580d4 g     F .text	00000010 _cleanup
05559e74 g     F .text	00000064 altera_avalon_fifo_write_fifo
00000000  w      *UND*	00000000 __errno
08001800 g     F .entry	0000001c __reset
0555a034 g     F .text	00000028 altera_avalon_fifo_read_backpressure
05555540 g       *ABS*	00000000 __flash_exceptions_start
05558d80 g     F .text	00000074 _fstat_r
05560438 g     O .bss	00000004 errno
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
05560440 g     O .bss	00000004 alt_argv
0556618c g       *ABS*	00000000 _gp
05559cec g     F .text	00000068 altera_avalon_fifo_clear_event
0555cfac g     O .rwdata	00000180 alt_fd_list
0555b814 g     F .text	00000094 alt_find_dev
0555742c g     F .text	000000a0 memcpy
055580c8 g     F .text	0000000c _cleanup_r
0555b314 g     F .text	00000078 alt_io_redirect
0555bf1c g       *ABS*	00000000 __DTOR_END__
055566e4 g     F .text	00000014 puts
0555c250 g     O .rwdata	00000144 chrominance_ac_code_table
0555a6a4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
05559210 g     F .text	000000c0 isatty
0555ba80 g     F .text	00000090 alt_icache_flush
0556042c g     O .bss	00000004 __malloc_top_pad
0555676c g     F .text	0000049c __sfvwrite_r
05557ba0 g     F .text	00000070 _sbrk_r
05558edc g     F .text	00000078 _read_r
0555e1ac g     O .rwdata	00000004 alt_max_fd
05558c5c g     F .text	00000110 _fclose_r
05557f48 g     F .text	00000034 fflush
05560430 g     O .bss	00000004 __malloc_max_sbrked_mem
0555941c g     F .text	000000f0 lseek
0555e190 g     O .rwdata	00000004 _global_impure_ptr
055575ac g     F .text	000005f4 _realloc_r
0556070c g       *ABS*	00000000 __bss_end
0555b158 g     F .text	000000f8 alt_iic_isr_register
0555b6e8 g     F .text	0000010c alt_tick
055580b0 g     F .text	00000018 __fp_lock_all
0555b110 g     F .text	00000048 alt_ic_irq_enabled
08001800 g       *ABS*	00000000 __alt_mem_instruction_mem_4
0555b650 g     F .text	00000098 alt_alarm_stop
05560448 g     O .bss	00000004 alt_irq_active
080018ec g     F .exceptions	000000c8 alt_irq_handler
0555cf84 g     O .rwdata	00000028 alt_dev_null
0555ad5c g     F .text	0000001c alt_dcache_flush_all
05559d54 g     F .text	00000060 altera_avalon_fifo_write_ienable
0555e1c4 g       *ABS*	00000000 __ram_rwdata_end
05559c5c g     F .text	0000002c altera_avalon_fifo_read_almostempty
0555e1a4 g     O .rwdata	00000008 alt_dev_list
055598b4 g     F .text	00000120 write
05555710 g     F .text	0000040c write_markers
0555bf68 g       *ABS*	00000000 __ram_rodata_end
055590dc g     F .text	000000d4 fstat
0556070c g       *ABS*	00000000 end
0555a1a4 g     F .text	000000c0 altera_avalon_jtag_uart_init
05559c88 g     F .text	0000003c altera_avalon_fifo_read_event
0555bf18 g       *ABS*	00000000 __CTOR_LIST__
06aaaa90 g       *ABS*	00000000 __alt_stack_pointer
0555ab78 g     F .text	00000090 alt_avalon_timer_sc_init
0555bf98 g     O .rwdata	00000018 chrominance_dc_code_table
0555a8c8 g     F .text	00000240 altera_avalon_jtag_uart_write
05557fd4 g     F .text	00000004 __sfp_lock_acquire
05559f48 g     F .text	00000058 altera_avalon_fifo_read_fifo
05557348 g     F .text	000000e4 memchr
05558368 g     F .text	00000314 _free_r
0555bd08 g     F .text	000001b0 __call_exitprocs
0555e198 g     O .rwdata	00000004 __malloc_sbrk_base
055556d4 g     F .text	0000003c _start
0556044c g     O .bss	00000004 _alt_tick_rate
05560450 g     O .bss	00000004 _alt_nticks
05559618 g     F .text	00000120 read
05559a68 g     F .text	0000005c alt_sys_init
0555bbd0 g     F .text	00000134 __register_exitproc
0555a53c g     F .text	00000074 altera_avalon_jtag_uart_close
0555bf68 g       *ABS*	00000000 __ram_rwdata_start
0555bf1c g       *ABS*	00000000 __ram_rodata_start
05560454 g     O .bss	00000028 __malloc_current_mallinfo
05560428 g     O .bss	00000002 ldc2
0555c394 g     O .rwdata	00000144 chrominance_ac_size_table
0555a05c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0555b9c8 g     F .text	000000b8 alt_get_fd
05558bec g     F .text	00000070 _close_r
0555bb5c g     F .text	00000074 memcmp
0555a10c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0556070c g       *ABS*	00000000 __alt_stack_base
0555a154 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
05557c10 g     F .text	0000013c __swsetup_r
05559bb8 g     F .text	0000003c altera_avalon_fifo_read_status
0555814c g     F .text	000000f0 __sfp
0555cb7c g     O .rwdata	00000408 __malloc_av_
05557fe0 g     F .text	00000004 __sinit_lock_release
05558b14 g     F .text	00000060 __sread
0555a008 g     F .text	0000002c altera_avalon_fifo_read_other_info
0555b8a8 g     F .text	00000120 alt_find_file
0555ad78 g     F .text	000000b4 alt_dev_llist_insert
055595d8 g     F .text	00000020 __malloc_lock
055597f8 g     F .text	000000bc sbrk
05557d4c g     F .text	000001fc _fflush_r
05560420 g       *ABS*	00000000 __bss_start
05558990 g     F .text	00000098 memset
05560426 g     O .bss	00000002 ldc1
0555656c g     F .text	000000d8 main
05560444 g     O .bss	00000004 alt_envp
05560434 g     O .bss	00000004 __malloc_max_total_mem
0555a0b4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
05559cc4 g     F .text	00000028 altera_avalon_fifo_read_level
05556474 g     F .text	000000f8 close_bitstream
05558a28 g     F .text	00000008 __sclose
06aaaa90 g       *ABS*	00000000 __alt_heap_limit
05558d6c g     F .text	00000014 fclose
0556057c g     O .bss	00000190 _atexit0
05556c08 g     F .text	00000740 _malloc_r
0555e1b0 g     O .rwdata	00000004 alt_errno
05558744 g     F .text	000000b8 _fwalk
0555823c g     F .text	0000012c _malloc_trim_r
0555bf1c g       *ABS*	00000000 __CTOR_END__
05555b1c g     F .text	00000958 huffman
0555bf1c g       *ABS*	00000000 __flash_rodata_start
0555bf1c g       *ABS*	00000000 __DTOR_LIST__
05559a34 g     F .text	00000034 alt_irq_init
05559798 g     F .text	00000060 alt_release_fd
0555bb10 g     F .text	00000014 atexit
05558b74 g     F .text	00000078 _write_r
0555c4d8 g     O .rwdata	00000100 bitsize
0555e18c g     O .rwdata	00000004 _impure_ptr
0556043c g     O .bss	00000004 alt_argc
0555aef0 g     F .text	00000064 _do_dtors
08001820 g       .exceptions	00000000 alt_irq_entry
05558098 g     F .text	00000018 __fp_unlock_all
0555e19c g     O .rwdata	00000008 alt_fs_list
08001820 g       *ABS*	00000000 __ram_exceptions_start
05560420 g     O .bss	00000004 lcode
05559fa0 g     F .text	00000068 altera_avalon_fifo_write_other_info
0555af84 g     F .text	00000050 alt_ic_isr_register
0555e1c4 g       *ABS*	00000000 _edata
0556070c g       *ABS*	00000000 _end
080019b4 g       *ABS*	00000000 __ram_exceptions_end
0555a5b0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0555b070 g     F .text	000000a0 alt_ic_irq_disable
05558a98 g     F .text	0000007c __swrite
0555e194 g     O .rwdata	00000004 __malloc_trim_threshold
0555c10c g     O .rwdata	00000144 luminance_ac_size_table
0555b7f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0555bb24 g     F .text	00000038 exit
0555c5d8 g     O .rwdata	000001a4 markerdata
0555867c g     F .text	000000c8 _fwalk_reent
05559bf4 g     F .text	0000003c altera_avalon_fifo_read_ienable
06aaaa90 g       *ABS*	00000000 __alt_data_end
08001820 g     F .exceptions	00000000 alt_exception
0556042a g     O .bss	00000002 ldc3
05557fd8 g     F .text	00000004 __sfp_lock_release
0555bef8 g     F .text	00000020 _exit
0555bfb0 g     O .rwdata	00000018 chrominance_dc_size_table
0555ac08 g     F .text	00000154 alt_alarm_start
05559c30 g     F .text	0000002c altera_avalon_fifo_read_almostfull
055587fc g     F .text	00000194 __smakebuf_r
055566f8 g     F .text	00000074 strlen
0555b468 g     F .text	00000188 open
05559ed8 g     F .text	00000070 altera_avalon_read_fifo
05560424 g     O .bss	00000002 bitindex
0555af54 g     F .text	00000030 alt_icache_flush_all
0555bfc8 g     O .rwdata	00000144 luminance_ac_code_table
0555e1b8 g     O .rwdata	00000004 alt_priority_mask
0555afd4 g     F .text	0000009c alt_ic_irq_enable
05559e14 g     F .text	00000060 altera_avalon_fifo_write_almostempty
0555e1bc g     O .rwdata	00000008 alt_alarm_list
0555ae8c g     F .text	00000064 _do_ctors
0555bf80 g     O .rwdata	00000018 luminance_dc_size_table
05558f54 g     F .text	000000fc close
05559330 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
05557fdc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08001800 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8001800:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8001804:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8001808:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800180c:	00bffd16 	blt	zero,r2,8001804 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8001810:	00415574 	movhi	at,1365
    ori r1, r1, %lo(_start)
 8001814:	0855b514 	ori	at,at,22228
    jmp r1
 8001818:	0800683a 	jmp	at
 800181c:	00000000 	call	0 <__alt_mem_sdram_controller>

Disassembly of section .exceptions:

08001820 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8001820:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 8001824:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8001828:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800182c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8001830:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8001834:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8001838:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800183c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8001840:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8001844:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8001848:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800184c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8001850:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8001854:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8001858:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800185c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8001860:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8001864:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8001868:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800186c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8001870:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8001874:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8001878:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800187c:	10000326 	beq	r2,zero,800188c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8001880:	20000226 	beq	r4,zero,800188c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8001884:	80018ec0 	call	80018ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8001888:	00000306 	br	8001898 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800188c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8001890:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8001894:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8001898:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800189c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80018a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80018a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80018a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80018ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80018b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80018b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80018b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80018bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80018c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80018c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80018c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80018cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80018d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80018d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80018d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80018dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80018e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80018e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80018e8:	ef80083a 	eret

080018ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80018ec:	defff904 	addi	sp,sp,-28
 80018f0:	dfc00615 	stw	ra,24(sp)
 80018f4:	df000515 	stw	fp,20(sp)
 80018f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80018fc:	0005313a 	rdctl	r2,ipending
 8001900:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8001904:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 8001908:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 800190c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8001910:	00800044 	movi	r2,1
 8001914:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8001918:	e0ffff17 	ldw	r3,-4(fp)
 800191c:	e0bffe17 	ldw	r2,-8(fp)
 8001920:	1884703a 	and	r2,r3,r2
 8001924:	1005003a 	cmpeq	r2,r2,zero
 8001928:	1000161e 	bne	r2,zero,8001984 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800192c:	e0bffd17 	ldw	r2,-12(fp)
 8001930:	00c155b4 	movhi	r3,1366
 8001934:	18c11f04 	addi	r3,r3,1148
 8001938:	100490fa 	slli	r2,r2,3
 800193c:	10c5883a 	add	r2,r2,r3
 8001940:	11400017 	ldw	r5,0(r2)
 8001944:	e0bffd17 	ldw	r2,-12(fp)
 8001948:	00c155b4 	movhi	r3,1366
 800194c:	18c11f04 	addi	r3,r3,1148
 8001950:	100490fa 	slli	r2,r2,3
 8001954:	10c5883a 	add	r2,r2,r3
 8001958:	10800104 	addi	r2,r2,4
 800195c:	11000017 	ldw	r4,0(r2)
 8001960:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8001964:	0005313a 	rdctl	r2,ipending
 8001968:	e0bffb15 	stw	r2,-20(fp)

  return active;
 800196c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8001970:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 8001974:	e0bfff17 	ldw	r2,-4(fp)
 8001978:	1004c03a 	cmpne	r2,r2,zero
 800197c:	103fe31e 	bne	r2,zero,800190c <alt_irq_handler+0x20>
 8001980:	00000706 	br	80019a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8001984:	e0bffe17 	ldw	r2,-8(fp)
 8001988:	1085883a 	add	r2,r2,r2
 800198c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 8001990:	e0bffd17 	ldw	r2,-12(fp)
 8001994:	10800044 	addi	r2,r2,1
 8001998:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 800199c:	003fde06 	br	8001918 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80019a0:	e037883a 	mov	sp,fp
 80019a4:	dfc00117 	ldw	ra,4(sp)
 80019a8:	df000017 	ldw	fp,0(sp)
 80019ac:	dec00204 	addi	sp,sp,8
 80019b0:	f800283a 	ret

Disassembly of section .text:

055556d4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 55556d4:	06c1aab4 	movhi	sp,1706
    ori sp, sp, %lo(__alt_stack_pointer)
 55556d8:	deeaa414 	ori	sp,sp,43664

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 55556dc:	068155b4 	movhi	gp,1366
    ori gp, gp, %lo(_gp)
 55556e0:	d6986314 	ori	gp,gp,24972
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 55556e4:	008155b4 	movhi	r2,1366
    ori r2, r2, %lo(__bss_start)
 55556e8:	10810814 	ori	r2,r2,1056

    movhi r3, %hi(__bss_end)
 55556ec:	00c155b4 	movhi	r3,1366
    ori r3, r3, %lo(__bss_end)
 55556f0:	18c1c314 	ori	r3,r3,1804

    beq r2, r3, 1f
 55556f4:	10c00326 	beq	r2,r3,5555704 <_start+0x30>

0:
    stw zero, (r2)
 55556f8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 55556fc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5555700:	10fffd36 	bltu	r2,r3,55556f8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5555704:	55593300 	call	5559330 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5555708:	555956c0 	call	555956c <alt_main>

0555570c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 555570c:	003fff06 	br	555570c <alt_after_alt_main>

05555710 <write_markers>:
}

// Header for JPEG Encoder

void write_markers (UINT32 image_width, UINT32 image_height)
{
 5555710:	defffa04 	addi	sp,sp,-24
 5555714:	dfc00515 	stw	ra,20(sp)
 5555718:	df000415 	stw	fp,16(sp)
 555571c:	df000404 	addi	fp,sp,16
 5555720:	e13ffe15 	stw	r4,-8(fp)
 5555724:	e17fff15 	stw	r5,-4(fp)
	UINT16 i, header_length;
	UINT8 number_of_components;

	// Start of image marker
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xFF);
 5555728:	010e2204 	movi	r4,14472
 555572c:	014e1004 	movi	r5,14400
 5555730:	01803fc4 	movi	r6,255
 5555734:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xD8);
 5555738:	010e2204 	movi	r4,14472
 555573c:	014e1004 	movi	r5,14400
 5555740:	01803604 	movi	r6,216
 5555744:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Quantization table marker
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xFF);
 5555748:	010e2204 	movi	r4,14472
 555574c:	014e1004 	movi	r5,14400
 5555750:	01803fc4 	movi	r6,255
 5555754:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xDB);
 5555758:	010e2204 	movi	r4,14472
 555575c:	014e1004 	movi	r5,14400
 5555760:	018036c4 	movi	r6,219
 5555764:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Quantization table length
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);
 5555768:	010e2204 	movi	r4,14472
 555576c:	014e1004 	movi	r5,14400
 5555770:	000d883a 	mov	r6,zero
 5555774:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x84);
 5555778:	010e2204 	movi	r4,14472
 555577c:	014e1004 	movi	r5,14400
 5555780:	01802104 	movi	r6,132
 5555784:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Pq, Tq
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);
 5555788:	010e2204 	movi	r4,14472
 555578c:	014e1004 	movi	r5,14400
 5555790:	000d883a 	mov	r6,zero
 5555794:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Lqt table
	for (i=0; i<64; i++)
 5555798:	e03ffd0d 	sth	zero,-12(fp)
 555579c:	00000a06 	br	55557c8 <write_markers+0xb8>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8)altera_avalon_fifo_read_fifo(0x388c,0x3800)); //Lqt [i];
 55557a0:	010e2304 	movi	r4,14476
 55557a4:	014e0004 	movi	r5,14336
 55557a8:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 55557ac:	11803fcc 	andi	r6,r2,255
 55557b0:	010e2204 	movi	r4,14472
 55557b4:	014e1004 	movi	r5,14400
 55557b8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Pq, Tq
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);

	// Lqt table
	for (i=0; i<64; i++)
 55557bc:	e0bffd0b 	ldhu	r2,-12(fp)
 55557c0:	10800044 	addi	r2,r2,1
 55557c4:	e0bffd0d 	sth	r2,-12(fp)
 55557c8:	e0bffd0b 	ldhu	r2,-12(fp)
 55557cc:	10801030 	cmpltui	r2,r2,64
 55557d0:	103ff31e 	bne	r2,zero,55557a0 <write_markers+0x90>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8)altera_avalon_fifo_read_fifo(0x388c,0x3800)); //Lqt [i];

	// Pq, Tq
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x01);
 55557d4:	010e2204 	movi	r4,14472
 55557d8:	014e1004 	movi	r5,14400
 55557dc:	01800044 	movi	r6,1
 55557e0:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Cqt table
	for (i=0; i<64; i++)
 55557e4:	e03ffd0d 	sth	zero,-12(fp)
 55557e8:	00000a06 	br	5555814 <write_markers+0x104>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8)altera_avalon_fifo_read_fifo(0x388c,0x3800)); //Cqt [i];
 55557ec:	010e2304 	movi	r4,14476
 55557f0:	014e0004 	movi	r5,14336
 55557f4:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 55557f8:	11803fcc 	andi	r6,r2,255
 55557fc:	010e2204 	movi	r4,14472
 5555800:	014e1004 	movi	r5,14400
 5555804:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Pq, Tq
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x01);

	// Cqt table
	for (i=0; i<64; i++)
 5555808:	e0bffd0b 	ldhu	r2,-12(fp)
 555580c:	10800044 	addi	r2,r2,1
 5555810:	e0bffd0d 	sth	r2,-12(fp)
 5555814:	e0bffd0b 	ldhu	r2,-12(fp)
 5555818:	10801030 	cmpltui	r2,r2,64
 555581c:	103ff31e 	bne	r2,zero,55557ec <write_markers+0xdc>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8)altera_avalon_fifo_read_fifo(0x388c,0x3800)); //Cqt [i];

	// huffman table(DHT)
	for (i=0; i<210; i++)
 5555820:	e03ffd0d 	sth	zero,-12(fp)
 5555824:	00001906 	br	555588c <write_markers+0x17c>
	{
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) (markerdata [i] >> 8));
 5555828:	e0bffd0b 	ldhu	r2,-12(fp)
 555582c:	00c155b4 	movhi	r3,1366
 5555830:	18f17604 	addi	r3,r3,-14888
 5555834:	1085883a 	add	r2,r2,r2
 5555838:	10c5883a 	add	r2,r2,r3
 555583c:	1080000b 	ldhu	r2,0(r2)
 5555840:	10bfffcc 	andi	r2,r2,65535
 5555844:	1004d23a 	srli	r2,r2,8
 5555848:	11803fcc 	andi	r6,r2,255
 555584c:	010e2204 	movi	r4,14472
 5555850:	014e1004 	movi	r5,14400
 5555854:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) markerdata [i]);
 5555858:	e0bffd0b 	ldhu	r2,-12(fp)
 555585c:	00c155b4 	movhi	r3,1366
 5555860:	18f17604 	addi	r3,r3,-14888
 5555864:	1085883a 	add	r2,r2,r2
 5555868:	10c5883a 	add	r2,r2,r3
 555586c:	1080000b 	ldhu	r2,0(r2)
 5555870:	11803fcc 	andi	r6,r2,255
 5555874:	010e2204 	movi	r4,14472
 5555878:	014e1004 	movi	r5,14400
 555587c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	// Cqt table
	for (i=0; i<64; i++)
		altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8)altera_avalon_fifo_read_fifo(0x388c,0x3800)); //Cqt [i];

	// huffman table(DHT)
	for (i=0; i<210; i++)
 5555880:	e0bffd0b 	ldhu	r2,-12(fp)
 5555884:	10800044 	addi	r2,r2,1
 5555888:	e0bffd0d 	sth	r2,-12(fp)
 555588c:	e0bffd0b 	ldhu	r2,-12(fp)
 5555890:	108034b0 	cmpltui	r2,r2,210
 5555894:	103fe41e 	bne	r2,zero,5555828 <write_markers+0x118>
	}

	//if (image_format == FOUR_ZERO_ZERO)
	//	number_of_components = 1;
	//else
		number_of_components = 3;
 5555898:	008000c4 	movi	r2,3
 555589c:	e0bffc05 	stb	r2,-16(fp)

	// Frame header(SOF)

	// Start of frame marker
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xFF);
 55558a0:	010e2204 	movi	r4,14472
 55558a4:	014e1004 	movi	r5,14400
 55558a8:	01803fc4 	movi	r6,255
 55558ac:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xC0);
 55558b0:	010e2204 	movi	r4,14472
 55558b4:	014e1004 	movi	r5,14400
 55558b8:	01803004 	movi	r6,192
 55558bc:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	header_length = (UINT16) (8 + 3 * number_of_components);
 55558c0:	e0fffc03 	ldbu	r3,-16(fp)
 55558c4:	1805883a 	mov	r2,r3
 55558c8:	1085883a 	add	r2,r2,r2
 55558cc:	10c5883a 	add	r2,r2,r3
 55558d0:	10800204 	addi	r2,r2,8
 55558d4:	e0bffc8d 	sth	r2,-14(fp)

	// Frame header length	
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) (header_length >> 8));
 55558d8:	e0bffc8b 	ldhu	r2,-14(fp)
 55558dc:	1004d23a 	srli	r2,r2,8
 55558e0:	11803fcc 	andi	r6,r2,255
 55558e4:	010e2204 	movi	r4,14472
 55558e8:	014e1004 	movi	r5,14400
 55558ec:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) header_length);
 55558f0:	e0bffc8b 	ldhu	r2,-14(fp)
 55558f4:	11803fcc 	andi	r6,r2,255
 55558f8:	010e2204 	movi	r4,14472
 55558fc:	014e1004 	movi	r5,14400
 5555900:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Precision (P)
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x08);
 5555904:	010e2204 	movi	r4,14472
 5555908:	014e1004 	movi	r5,14400
 555590c:	01800204 	movi	r6,8
 5555910:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// image height
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) (image_height >> 8));
 5555914:	e0bfff17 	ldw	r2,-4(fp)
 5555918:	1004d23a 	srli	r2,r2,8
 555591c:	11803fcc 	andi	r6,r2,255
 5555920:	010e2204 	movi	r4,14472
 5555924:	014e1004 	movi	r5,14400
 5555928:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) image_height);
 555592c:	e0bfff17 	ldw	r2,-4(fp)
 5555930:	11803fcc 	andi	r6,r2,255
 5555934:	010e2204 	movi	r4,14472
 5555938:	014e1004 	movi	r5,14400
 555593c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// image width
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) (image_width >> 8));
 5555940:	e0bffe17 	ldw	r2,-8(fp)
 5555944:	1004d23a 	srli	r2,r2,8
 5555948:	11803fcc 	andi	r6,r2,255
 555594c:	010e2204 	movi	r4,14472
 5555950:	014e1004 	movi	r5,14400
 5555954:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) image_width);
 5555958:	e0bffe17 	ldw	r2,-8(fp)
 555595c:	11803fcc 	andi	r6,r2,255
 5555960:	010e2204 	movi	r4,14472
 5555964:	014e1004 	movi	r5,14400
 5555968:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Nf
	altera_avalon_fifo_write_fifo(0x3888,0x3840,number_of_components);
 555596c:	e1bffc03 	ldbu	r6,-16(fp)
 5555970:	010e2204 	movi	r4,14472
 5555974:	014e1004 	movi	r5,14400
 5555978:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	//	*output_ptr++ = 0x11;
	//	*output_ptr++ = 0x00;
	//}
	//else
	//{
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x01);
 555597c:	010e2204 	movi	r4,14472
 5555980:	014e1004 	movi	r5,14400
 5555984:	01800044 	movi	r6,1
 5555988:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		//if (image_format == FOUR_TWO_ZERO)
		//	*output_ptr++ = 0x22;
		//else if (image_format == FOUR_TWO_TWO)
		//	*output_ptr++ = 0x21;
		//else
			altera_avalon_fifo_write_fifo(0x3888,0x3840,0x11);
 555598c:	010e2204 	movi	r4,14472
 5555990:	014e1004 	movi	r5,14400
 5555994:	01800444 	movi	r6,17
 5555998:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);
 555599c:	010e2204 	movi	r4,14472
 55559a0:	014e1004 	movi	r5,14400
 55559a4:	000d883a 	mov	r6,zero
 55559a8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x02);
 55559ac:	010e2204 	movi	r4,14472
 55559b0:	014e1004 	movi	r5,14400
 55559b4:	01800084 	movi	r6,2
 55559b8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x11);
 55559bc:	010e2204 	movi	r4,14472
 55559c0:	014e1004 	movi	r5,14400
 55559c4:	01800444 	movi	r6,17
 55559c8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x01);
 55559cc:	010e2204 	movi	r4,14472
 55559d0:	014e1004 	movi	r5,14400
 55559d4:	01800044 	movi	r6,1
 55559d8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x03);
 55559dc:	010e2204 	movi	r4,14472
 55559e0:	014e1004 	movi	r5,14400
 55559e4:	018000c4 	movi	r6,3
 55559e8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x11);
 55559ec:	010e2204 	movi	r4,14472
 55559f0:	014e1004 	movi	r5,14400
 55559f4:	01800444 	movi	r6,17
 55559f8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x01);
 55559fc:	010e2204 	movi	r4,14472
 5555a00:	014e1004 	movi	r5,14400
 5555a04:	01800044 	movi	r6,1
 5555a08:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	//}

	// Scan header(SOF)

	// Start of scan marker
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xFF);
 5555a0c:	010e2204 	movi	r4,14472
 5555a10:	014e1004 	movi	r5,14400
 5555a14:	01803fc4 	movi	r6,255
 5555a18:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xDA);
 5555a1c:	010e2204 	movi	r4,14472
 5555a20:	014e1004 	movi	r5,14400
 5555a24:	01803684 	movi	r6,218
 5555a28:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	header_length = (UINT16) (6 + (number_of_components << 1));
 5555a2c:	e0bffc03 	ldbu	r2,-16(fp)
 5555a30:	1085883a 	add	r2,r2,r2
 5555a34:	10800184 	addi	r2,r2,6
 5555a38:	e0bffc8d 	sth	r2,-14(fp)

	// Scan header length
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) (header_length >> 8));
 5555a3c:	e0bffc8b 	ldhu	r2,-14(fp)
 5555a40:	1004d23a 	srli	r2,r2,8
 5555a44:	11803fcc 	andi	r6,r2,255
 5555a48:	010e2204 	movi	r4,14472
 5555a4c:	014e1004 	movi	r5,14400
 5555a50:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,(UINT8) header_length);
 5555a54:	e0bffc8b 	ldhu	r2,-14(fp)
 5555a58:	11803fcc 	andi	r6,r2,255
 5555a5c:	010e2204 	movi	r4,14472
 5555a60:	014e1004 	movi	r5,14400
 5555a64:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

	// Ns
	altera_avalon_fifo_write_fifo(0x3888,0x3840,number_of_components);
 5555a68:	e1bffc03 	ldbu	r6,-16(fp)
 5555a6c:	010e2204 	movi	r4,14472
 5555a70:	014e1004 	movi	r5,14400
 5555a74:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	//	*output_ptr++ = 0x01;
	//	*output_ptr++ = 0x00;
	//}
	//else
	//{
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x01);
 5555a78:	010e2204 	movi	r4,14472
 5555a7c:	014e1004 	movi	r5,14400
 5555a80:	01800044 	movi	r6,1
 5555a84:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);
 5555a88:	010e2204 	movi	r4,14472
 5555a8c:	014e1004 	movi	r5,14400
 5555a90:	000d883a 	mov	r6,zero
 5555a94:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x02);
 5555a98:	010e2204 	movi	r4,14472
 5555a9c:	014e1004 	movi	r5,14400
 5555aa0:	01800084 	movi	r6,2
 5555aa4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x11);
 5555aa8:	010e2204 	movi	r4,14472
 5555aac:	014e1004 	movi	r5,14400
 5555ab0:	01800444 	movi	r6,17
 5555ab4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x03);
 5555ab8:	010e2204 	movi	r4,14472
 5555abc:	014e1004 	movi	r5,14400
 5555ac0:	018000c4 	movi	r6,3
 5555ac4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		altera_avalon_fifo_write_fifo(0x3888,0x3840,0x11);
 5555ac8:	010e2204 	movi	r4,14472
 5555acc:	014e1004 	movi	r5,14400
 5555ad0:	01800444 	movi	r6,17
 5555ad4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	//}

	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);
 5555ad8:	010e2204 	movi	r4,14472
 5555adc:	014e1004 	movi	r5,14400
 5555ae0:	000d883a 	mov	r6,zero
 5555ae4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x3F);
 5555ae8:	010e2204 	movi	r4,14472
 5555aec:	014e1004 	movi	r5,14400
 5555af0:	01800fc4 	movi	r6,63
 5555af4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0x00);
 5555af8:	010e2204 	movi	r4,14472
 5555afc:	014e1004 	movi	r5,14400
 5555b00:	000d883a 	mov	r6,zero
 5555b04:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	
}
 5555b08:	e037883a 	mov	sp,fp
 5555b0c:	dfc00117 	ldw	ra,4(sp)
 5555b10:	df000017 	ldw	fp,0(sp)
 5555b14:	dec00204 	addi	sp,sp,8
 5555b18:	f800283a 	ret

05555b1c <huffman>:
UINT32 lcode = 0;
UINT16 bitindex = 0;
INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

void huffman (UINT16 component)
{
 5555b1c:	deffef04 	addi	sp,sp,-68
 5555b20:	dfc01015 	stw	ra,64(sp)
 5555b24:	df000f15 	stw	fp,60(sp)
 5555b28:	df000f04 	addi	fp,sp,60
 5555b2c:	e13ffe0d 	sth	r4,-8(fp)
	UINT16 *DcCodeTable, *DcSizeTable, *AcCodeTable, *AcSizeTable;

	//static INT16 ldc1 = 0, ldc2 = 0, ldc3 = 0;

	INT16 *Temp_Ptr, Coeff, LastDc;
	UINT16 AbsCoeff, HuffCode, HuffSize, RunLength=0, DataSize=0, index;
 5555b30:	e03ff50d 	sth	zero,-44(fp)
 5555b34:	e03ff48d 	sth	zero,-46(fp)
	UINT8 out;

	//Temp_Ptr = Temp;
	//Coeff = *Temp_Ptr++;
//xt_iss_profile_disable();
	Coeff = (INT16)altera_avalon_fifo_read_fifo(0x388c,0x3800);
 5555b38:	010e2304 	movi	r4,14476
 5555b3c:	014e0004 	movi	r5,14336
 5555b40:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 5555b44:	e0bff78d 	sth	r2,-34(fp)
//xt_iss_profile_enable();
	if (component == 1)
 5555b48:	e0bffe0b 	ldhu	r2,-8(fp)
 5555b4c:	10800058 	cmpnei	r2,r2,1
 5555b50:	1000111e 	bne	r2,zero,5555b98 <huffman+0x7c>
	{
		DcCodeTable = luminance_dc_code_table;
 5555b54:	008155b4 	movhi	r2,1366
 5555b58:	10afda04 	addi	r2,r2,-16536
 5555b5c:	e0bffc15 	stw	r2,-16(fp)
		DcSizeTable = luminance_dc_size_table;
 5555b60:	008155b4 	movhi	r2,1366
 5555b64:	10afe004 	addi	r2,r2,-16512
 5555b68:	e0bffb15 	stw	r2,-20(fp)
		AcCodeTable = luminance_ac_code_table;
 5555b6c:	008155b4 	movhi	r2,1366
 5555b70:	10aff204 	addi	r2,r2,-16440
 5555b74:	e0bffa15 	stw	r2,-24(fp)
		AcSizeTable = luminance_ac_size_table;
 5555b78:	008155b4 	movhi	r2,1366
 5555b7c:	10b04304 	addi	r2,r2,-16116
 5555b80:	e0bff915 	stw	r2,-28(fp)

		LastDc = ldc1;
 5555b84:	d0a8a68b 	ldhu	r2,-23910(gp)
 5555b88:	e0bff70d 	sth	r2,-36(fp)
		ldc1 = Coeff;
 5555b8c:	e0bff78b 	ldhu	r2,-34(fp)
 5555b90:	d0a8a68d 	sth	r2,-23910(gp)
 5555b94:	00001806 	br	5555bf8 <huffman+0xdc>
	}
	else
	{
		DcCodeTable = chrominance_dc_code_table;
 5555b98:	008155b4 	movhi	r2,1366
 5555b9c:	10afe604 	addi	r2,r2,-16488
 5555ba0:	e0bffc15 	stw	r2,-16(fp)
		DcSizeTable = chrominance_dc_size_table;
 5555ba4:	008155b4 	movhi	r2,1366
 5555ba8:	10afec04 	addi	r2,r2,-16464
 5555bac:	e0bffb15 	stw	r2,-20(fp)
		AcCodeTable = chrominance_ac_code_table;
 5555bb0:	008155b4 	movhi	r2,1366
 5555bb4:	10b09404 	addi	r2,r2,-15792
 5555bb8:	e0bffa15 	stw	r2,-24(fp)
		AcSizeTable = chrominance_ac_size_table;
 5555bbc:	008155b4 	movhi	r2,1366
 5555bc0:	10b0e504 	addi	r2,r2,-15468
 5555bc4:	e0bff915 	stw	r2,-28(fp)

		if (component == 2)
 5555bc8:	e0bffe0b 	ldhu	r2,-8(fp)
 5555bcc:	10800098 	cmpnei	r2,r2,2
 5555bd0:	1000051e 	bne	r2,zero,5555be8 <huffman+0xcc>
		{
			LastDc = ldc2;
 5555bd4:	d0a8a70b 	ldhu	r2,-23908(gp)
 5555bd8:	e0bff70d 	sth	r2,-36(fp)
			ldc2 = Coeff;
 5555bdc:	e0bff78b 	ldhu	r2,-34(fp)
 5555be0:	d0a8a70d 	sth	r2,-23908(gp)
 5555be4:	00000406 	br	5555bf8 <huffman+0xdc>
		}
		else
		{
			LastDc = ldc3;
 5555be8:	d0a8a78b 	ldhu	r2,-23906(gp)
 5555bec:	e0bff70d 	sth	r2,-36(fp)
			ldc3 = Coeff;
 5555bf0:	e0bff78b 	ldhu	r2,-34(fp)
 5555bf4:	d0a8a78d 	sth	r2,-23906(gp)
		}
	}

	Coeff -= LastDc;
 5555bf8:	e0fff78b 	ldhu	r3,-34(fp)
 5555bfc:	e0bff70b 	ldhu	r2,-36(fp)
 5555c00:	1885c83a 	sub	r2,r3,r2
 5555c04:	e0bff78d 	sth	r2,-34(fp)

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
 5555c08:	e0bff78f 	ldh	r2,-34(fp)
 5555c0c:	1004403a 	cmpge	r2,r2,zero
 5555c10:	1000071e 	bne	r2,zero,5555c30 <huffman+0x114>
 5555c14:	e0bff78b 	ldhu	r2,-34(fp)
 5555c18:	0085c83a 	sub	r2,zero,r2
 5555c1c:	e0bfff0d 	sth	r2,-4(fp)
 5555c20:	e0bff78b 	ldhu	r2,-34(fp)
 5555c24:	10bfffc4 	addi	r2,r2,-1
 5555c28:	e0bff78d 	sth	r2,-34(fp)
 5555c2c:	00000206 	br	5555c38 <huffman+0x11c>
 5555c30:	e0bff78b 	ldhu	r2,-34(fp)
 5555c34:	e0bfff0d 	sth	r2,-4(fp)
 5555c38:	e0bfff0b 	ldhu	r2,-4(fp)
 5555c3c:	e0bff68d 	sth	r2,-38(fp)

	while (AbsCoeff != 0)
 5555c40:	00000606 	br	5555c5c <huffman+0x140>
	{
		AbsCoeff >>= 1;
 5555c44:	e0bff68b 	ldhu	r2,-38(fp)
 5555c48:	1004d07a 	srli	r2,r2,1
 5555c4c:	e0bff68d 	sth	r2,-38(fp)
		DataSize++;
 5555c50:	e0bff48b 	ldhu	r2,-46(fp)
 5555c54:	10800044 	addi	r2,r2,1
 5555c58:	e0bff48d 	sth	r2,-46(fp)

	Coeff -= LastDc;

	AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;

	while (AbsCoeff != 0)
 5555c5c:	e0bff68b 	ldhu	r2,-38(fp)
 5555c60:	1004c03a 	cmpne	r2,r2,zero
 5555c64:	103ff71e 	bne	r2,zero,5555c44 <huffman+0x128>
	{
		AbsCoeff >>= 1;
		DataSize++;
	}

	HuffCode = DcCodeTable [DataSize];
 5555c68:	e0bff48b 	ldhu	r2,-46(fp)
 5555c6c:	1085883a 	add	r2,r2,r2
 5555c70:	1007883a 	mov	r3,r2
 5555c74:	e0bffc17 	ldw	r2,-16(fp)
 5555c78:	1885883a 	add	r2,r3,r2
 5555c7c:	1080000b 	ldhu	r2,0(r2)
 5555c80:	e0bff60d 	sth	r2,-40(fp)
	HuffSize = DcSizeTable [DataSize];
 5555c84:	e0bff48b 	ldhu	r2,-46(fp)
 5555c88:	1085883a 	add	r2,r2,r2
 5555c8c:	1007883a 	mov	r3,r2
 5555c90:	e0bffb17 	ldw	r2,-20(fp)
 5555c94:	1885883a 	add	r2,r3,r2
 5555c98:	1080000b 	ldhu	r2,0(r2)
 5555c9c:	e0bff58d 	sth	r2,-42(fp)

	Coeff &= (1 << DataSize) - 1;
 5555ca0:	e0fff48b 	ldhu	r3,-46(fp)
 5555ca4:	00800044 	movi	r2,1
 5555ca8:	10c4983a 	sll	r2,r2,r3
 5555cac:	10bfffc4 	addi	r2,r2,-1
 5555cb0:	1007883a 	mov	r3,r2
 5555cb4:	e0bff78b 	ldhu	r2,-34(fp)
 5555cb8:	10c4703a 	and	r2,r2,r3
 5555cbc:	e0bff78d 	sth	r2,-34(fp)
	data = (HuffCode << DataSize) | Coeff;
 5555cc0:	e0fff60b 	ldhu	r3,-40(fp)
 5555cc4:	e0bff48b 	ldhu	r2,-46(fp)
 5555cc8:	1886983a 	sll	r3,r3,r2
 5555ccc:	e0bff78f 	ldh	r2,-34(fp)
 5555cd0:	1884b03a 	or	r2,r3,r2
 5555cd4:	e0bff215 	stw	r2,-56(fp)
	numbits = HuffSize + DataSize;
 5555cd8:	e0fff58b 	ldhu	r3,-42(fp)
 5555cdc:	e0bff48b 	ldhu	r2,-46(fp)
 5555ce0:	1885883a 	add	r2,r3,r2
 5555ce4:	e0bff30d 	sth	r2,-52(fp)

	PUTBITS
 5555ce8:	d0e8a60b 	ldhu	r3,-23912(gp)
 5555cec:	e0bff30b 	ldhu	r2,-52(fp)
 5555cf0:	1885883a 	add	r2,r3,r2
 5555cf4:	10bff804 	addi	r2,r2,-32
 5555cf8:	e0bff38d 	sth	r2,-50(fp)
 5555cfc:	e0bff38f 	ldh	r2,-50(fp)
 5555d00:	1004403a 	cmpge	r2,r2,zero
 5555d04:	10000b1e 	bne	r2,zero,5555d34 <huffman+0x218>
 5555d08:	d0e8a517 	ldw	r3,-23916(gp)
 5555d0c:	e0bff30b 	ldhu	r2,-52(fp)
 5555d10:	1886983a 	sll	r3,r3,r2
 5555d14:	e0bff217 	ldw	r2,-56(fp)
 5555d18:	1884b03a 	or	r2,r3,r2
 5555d1c:	d0a8a515 	stw	r2,-23916(gp)
 5555d20:	d0e8a60b 	ldhu	r3,-23912(gp)
 5555d24:	e0bff30b 	ldhu	r2,-52(fp)
 5555d28:	1885883a 	add	r2,r3,r2
 5555d2c:	d0a8a60d 	sth	r2,-23912(gp)
 5555d30:	00004606 	br	5555e4c <huffman+0x330>
 5555d34:	d128a517 	ldw	r4,-23916(gp)
 5555d38:	d0a8a60b 	ldhu	r2,-23912(gp)
 5555d3c:	10ffffcc 	andi	r3,r2,65535
 5555d40:	00800804 	movi	r2,32
 5555d44:	10c5c83a 	sub	r2,r2,r3
 5555d48:	2088983a 	sll	r4,r4,r2
 5555d4c:	e0fff38f 	ldh	r3,-50(fp)
 5555d50:	e0bff217 	ldw	r2,-56(fp)
 5555d54:	10c4d83a 	srl	r2,r2,r3
 5555d58:	2084b03a 	or	r2,r4,r2
 5555d5c:	d0a8a515 	stw	r2,-23916(gp)
 5555d60:	d0a8a517 	ldw	r2,-23916(gp)
 5555d64:	1004d63a 	srli	r2,r2,24
 5555d68:	e0bff105 	stb	r2,-60(fp)
 5555d6c:	e1bff103 	ldbu	r6,-60(fp)
 5555d70:	010e2204 	movi	r4,14472
 5555d74:	014e1004 	movi	r5,14400
 5555d78:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555d7c:	e0bff103 	ldbu	r2,-60(fp)
 5555d80:	10803fd8 	cmpnei	r2,r2,255
 5555d84:	1000041e 	bne	r2,zero,5555d98 <huffman+0x27c>
 5555d88:	010e2204 	movi	r4,14472
 5555d8c:	014e1004 	movi	r5,14400
 5555d90:	000d883a 	mov	r6,zero
 5555d94:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555d98:	d0a8a517 	ldw	r2,-23916(gp)
 5555d9c:	1004d43a 	srli	r2,r2,16
 5555da0:	e0bff105 	stb	r2,-60(fp)
 5555da4:	e1bff103 	ldbu	r6,-60(fp)
 5555da8:	010e2204 	movi	r4,14472
 5555dac:	014e1004 	movi	r5,14400
 5555db0:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555db4:	e0bff103 	ldbu	r2,-60(fp)
 5555db8:	10803fd8 	cmpnei	r2,r2,255
 5555dbc:	1000041e 	bne	r2,zero,5555dd0 <huffman+0x2b4>
 5555dc0:	010e2204 	movi	r4,14472
 5555dc4:	014e1004 	movi	r5,14400
 5555dc8:	000d883a 	mov	r6,zero
 5555dcc:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555dd0:	d0a8a517 	ldw	r2,-23916(gp)
 5555dd4:	1004d23a 	srli	r2,r2,8
 5555dd8:	e0bff105 	stb	r2,-60(fp)
 5555ddc:	e1bff103 	ldbu	r6,-60(fp)
 5555de0:	010e2204 	movi	r4,14472
 5555de4:	014e1004 	movi	r5,14400
 5555de8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555dec:	e0bff103 	ldbu	r2,-60(fp)
 5555df0:	10803fd8 	cmpnei	r2,r2,255
 5555df4:	1000041e 	bne	r2,zero,5555e08 <huffman+0x2ec>
 5555df8:	010e2204 	movi	r4,14472
 5555dfc:	014e1004 	movi	r5,14400
 5555e00:	000d883a 	mov	r6,zero
 5555e04:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555e08:	d0a8a517 	ldw	r2,-23916(gp)
 5555e0c:	e0bff105 	stb	r2,-60(fp)
 5555e10:	e1bff103 	ldbu	r6,-60(fp)
 5555e14:	010e2204 	movi	r4,14472
 5555e18:	014e1004 	movi	r5,14400
 5555e1c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555e20:	e0bff103 	ldbu	r2,-60(fp)
 5555e24:	10803fd8 	cmpnei	r2,r2,255
 5555e28:	1000041e 	bne	r2,zero,5555e3c <huffman+0x320>
 5555e2c:	010e2204 	movi	r4,14472
 5555e30:	014e1004 	movi	r5,14400
 5555e34:	000d883a 	mov	r6,zero
 5555e38:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555e3c:	e0bff217 	ldw	r2,-56(fp)
 5555e40:	d0a8a515 	stw	r2,-23916(gp)
 5555e44:	e0bff38b 	ldhu	r2,-50(fp)
 5555e48:	d0a8a60d 	sth	r2,-23912(gp)

	for (i=63; i>0; i--)
 5555e4c:	00800fc4 	movi	r2,63
 5555e50:	e0bffd0d 	sth	r2,-12(fp)
 5555e54:	00011c06 	br	55562c8 <huffman+0x7ac>
	{//xt_iss_profile_disable();
		//if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)altera_avalon_fifo_read_fifo(0x388c,0x3800)) != 0)
 5555e58:	010e2304 	movi	r4,14476
 5555e5c:	014e0004 	movi	r5,14336
 5555e60:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 5555e64:	e0bff78d 	sth	r2,-34(fp)
 5555e68:	e0bff78f 	ldh	r2,-34(fp)
 5555e6c:	1005003a 	cmpeq	r2,r2,zero
 5555e70:	10010f1e 	bne	r2,zero,55562b0 <huffman+0x794>
		{//xt_iss_profile_enable();
			while (RunLength > 15)
 5555e74:	00006506 	br	555600c <huffman+0x4f0>
			{
				RunLength -= 16;
 5555e78:	e0bff50b 	ldhu	r2,-44(fp)
 5555e7c:	10bffc04 	addi	r2,r2,-16
 5555e80:	e0bff50d 	sth	r2,-44(fp)
				data = AcCodeTable [161];
 5555e84:	e0bffa17 	ldw	r2,-24(fp)
 5555e88:	10805084 	addi	r2,r2,322
 5555e8c:	1080000b 	ldhu	r2,0(r2)
 5555e90:	10bfffcc 	andi	r2,r2,65535
 5555e94:	e0bff215 	stw	r2,-56(fp)
				numbits = AcSizeTable [161];
 5555e98:	e0bff917 	ldw	r2,-28(fp)
 5555e9c:	10805084 	addi	r2,r2,322
 5555ea0:	1080000b 	ldhu	r2,0(r2)
 5555ea4:	e0bff30d 	sth	r2,-52(fp)
				PUTBITS
 5555ea8:	d0e8a60b 	ldhu	r3,-23912(gp)
 5555eac:	e0bff30b 	ldhu	r2,-52(fp)
 5555eb0:	1885883a 	add	r2,r3,r2
 5555eb4:	10bff804 	addi	r2,r2,-32
 5555eb8:	e0bff38d 	sth	r2,-50(fp)
 5555ebc:	e0bff38f 	ldh	r2,-50(fp)
 5555ec0:	1004403a 	cmpge	r2,r2,zero
 5555ec4:	10000b1e 	bne	r2,zero,5555ef4 <huffman+0x3d8>
 5555ec8:	d0e8a517 	ldw	r3,-23916(gp)
 5555ecc:	e0bff30b 	ldhu	r2,-52(fp)
 5555ed0:	1886983a 	sll	r3,r3,r2
 5555ed4:	e0bff217 	ldw	r2,-56(fp)
 5555ed8:	1884b03a 	or	r2,r3,r2
 5555edc:	d0a8a515 	stw	r2,-23916(gp)
 5555ee0:	d0e8a60b 	ldhu	r3,-23912(gp)
 5555ee4:	e0bff30b 	ldhu	r2,-52(fp)
 5555ee8:	1885883a 	add	r2,r3,r2
 5555eec:	d0a8a60d 	sth	r2,-23912(gp)
 5555ef0:	00004606 	br	555600c <huffman+0x4f0>
 5555ef4:	d128a517 	ldw	r4,-23916(gp)
 5555ef8:	d0a8a60b 	ldhu	r2,-23912(gp)
 5555efc:	10ffffcc 	andi	r3,r2,65535
 5555f00:	00800804 	movi	r2,32
 5555f04:	10c5c83a 	sub	r2,r2,r3
 5555f08:	2088983a 	sll	r4,r4,r2
 5555f0c:	e0fff38f 	ldh	r3,-50(fp)
 5555f10:	e0bff217 	ldw	r2,-56(fp)
 5555f14:	10c4d83a 	srl	r2,r2,r3
 5555f18:	2084b03a 	or	r2,r4,r2
 5555f1c:	d0a8a515 	stw	r2,-23916(gp)
 5555f20:	d0a8a517 	ldw	r2,-23916(gp)
 5555f24:	1004d63a 	srli	r2,r2,24
 5555f28:	e0bff105 	stb	r2,-60(fp)
 5555f2c:	e1bff103 	ldbu	r6,-60(fp)
 5555f30:	010e2204 	movi	r4,14472
 5555f34:	014e1004 	movi	r5,14400
 5555f38:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555f3c:	e0bff103 	ldbu	r2,-60(fp)
 5555f40:	10803fd8 	cmpnei	r2,r2,255
 5555f44:	1000041e 	bne	r2,zero,5555f58 <huffman+0x43c>
 5555f48:	010e2204 	movi	r4,14472
 5555f4c:	014e1004 	movi	r5,14400
 5555f50:	000d883a 	mov	r6,zero
 5555f54:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555f58:	d0a8a517 	ldw	r2,-23916(gp)
 5555f5c:	1004d43a 	srli	r2,r2,16
 5555f60:	e0bff105 	stb	r2,-60(fp)
 5555f64:	e1bff103 	ldbu	r6,-60(fp)
 5555f68:	010e2204 	movi	r4,14472
 5555f6c:	014e1004 	movi	r5,14400
 5555f70:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555f74:	e0bff103 	ldbu	r2,-60(fp)
 5555f78:	10803fd8 	cmpnei	r2,r2,255
 5555f7c:	1000041e 	bne	r2,zero,5555f90 <huffman+0x474>
 5555f80:	010e2204 	movi	r4,14472
 5555f84:	014e1004 	movi	r5,14400
 5555f88:	000d883a 	mov	r6,zero
 5555f8c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555f90:	d0a8a517 	ldw	r2,-23916(gp)
 5555f94:	1004d23a 	srli	r2,r2,8
 5555f98:	e0bff105 	stb	r2,-60(fp)
 5555f9c:	e1bff103 	ldbu	r6,-60(fp)
 5555fa0:	010e2204 	movi	r4,14472
 5555fa4:	014e1004 	movi	r5,14400
 5555fa8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555fac:	e0bff103 	ldbu	r2,-60(fp)
 5555fb0:	10803fd8 	cmpnei	r2,r2,255
 5555fb4:	1000041e 	bne	r2,zero,5555fc8 <huffman+0x4ac>
 5555fb8:	010e2204 	movi	r4,14472
 5555fbc:	014e1004 	movi	r5,14400
 5555fc0:	000d883a 	mov	r6,zero
 5555fc4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555fc8:	d0a8a517 	ldw	r2,-23916(gp)
 5555fcc:	e0bff105 	stb	r2,-60(fp)
 5555fd0:	e1bff103 	ldbu	r6,-60(fp)
 5555fd4:	010e2204 	movi	r4,14472
 5555fd8:	014e1004 	movi	r5,14400
 5555fdc:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555fe0:	e0bff103 	ldbu	r2,-60(fp)
 5555fe4:	10803fd8 	cmpnei	r2,r2,255
 5555fe8:	1000041e 	bne	r2,zero,5555ffc <huffman+0x4e0>
 5555fec:	010e2204 	movi	r4,14472
 5555ff0:	014e1004 	movi	r5,14400
 5555ff4:	000d883a 	mov	r6,zero
 5555ff8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5555ffc:	e0bff217 	ldw	r2,-56(fp)
 5556000:	d0a8a515 	stw	r2,-23916(gp)
 5556004:	e0bff38b 	ldhu	r2,-50(fp)
 5556008:	d0a8a60d 	sth	r2,-23912(gp)
	for (i=63; i>0; i--)
	{//xt_iss_profile_disable();
		//if ((Coeff = *Temp_Ptr++) != 0)
		if ((Coeff = (INT16)altera_avalon_fifo_read_fifo(0x388c,0x3800)) != 0)
		{//xt_iss_profile_enable();
			while (RunLength > 15)
 555600c:	e0bff50b 	ldhu	r2,-44(fp)
 5556010:	10800428 	cmpgeui	r2,r2,16
 5556014:	103f981e 	bne	r2,zero,5555e78 <huffman+0x35c>
				data = AcCodeTable [161];
				numbits = AcSizeTable [161];
				PUTBITS
			}

			AbsCoeff = (Coeff < 0) ? -Coeff-- : Coeff;
 5556018:	e0bff78f 	ldh	r2,-34(fp)
 555601c:	1004403a 	cmpge	r2,r2,zero
 5556020:	1000071e 	bne	r2,zero,5556040 <huffman+0x524>
 5556024:	e0bff78b 	ldhu	r2,-34(fp)
 5556028:	0085c83a 	sub	r2,zero,r2
 555602c:	e0bffe8d 	sth	r2,-6(fp)
 5556030:	e0bff78b 	ldhu	r2,-34(fp)
 5556034:	10bfffc4 	addi	r2,r2,-1
 5556038:	e0bff78d 	sth	r2,-34(fp)
 555603c:	00000206 	br	5556048 <huffman+0x52c>
 5556040:	e0bff78b 	ldhu	r2,-34(fp)
 5556044:	e0bffe8d 	sth	r2,-6(fp)
 5556048:	e0bffe8b 	ldhu	r2,-6(fp)
 555604c:	e0bff68d 	sth	r2,-38(fp)

			if (AbsCoeff >> 8 == 0)
 5556050:	e0bff68b 	ldhu	r2,-38(fp)
 5556054:	1004d23a 	srli	r2,r2,8
 5556058:	10bfffcc 	andi	r2,r2,65535
 555605c:	1004c03a 	cmpne	r2,r2,zero
 5556060:	1000081e 	bne	r2,zero,5556084 <huffman+0x568>
				DataSize = bitsize [AbsCoeff];
 5556064:	e0fff68b 	ldhu	r3,-38(fp)
 5556068:	008155b4 	movhi	r2,1366
 555606c:	10b13604 	addi	r2,r2,-15144
 5556070:	10c5883a 	add	r2,r2,r3
 5556074:	10800003 	ldbu	r2,0(r2)
 5556078:	10803fcc 	andi	r2,r2,255
 555607c:	e0bff48d 	sth	r2,-46(fp)
 5556080:	00000a06 	br	55560ac <huffman+0x590>
			else
				DataSize = bitsize [AbsCoeff >> 8] + 8;
 5556084:	e0bff68b 	ldhu	r2,-38(fp)
 5556088:	1004d23a 	srli	r2,r2,8
 555608c:	10ffffcc 	andi	r3,r2,65535
 5556090:	008155b4 	movhi	r2,1366
 5556094:	10b13604 	addi	r2,r2,-15144
 5556098:	10c5883a 	add	r2,r2,r3
 555609c:	10800003 	ldbu	r2,0(r2)
 55560a0:	10803fcc 	andi	r2,r2,255
 55560a4:	10800204 	addi	r2,r2,8
 55560a8:	e0bff48d 	sth	r2,-46(fp)

			index = RunLength * 10 + DataSize;
 55560ac:	e0bff50b 	ldhu	r2,-44(fp)
 55560b0:	108002a4 	muli	r2,r2,10
 55560b4:	1007883a 	mov	r3,r2
 55560b8:	e0bff48b 	ldhu	r2,-46(fp)
 55560bc:	1885883a 	add	r2,r3,r2
 55560c0:	e0bff40d 	sth	r2,-48(fp)
			HuffCode = AcCodeTable [index];
 55560c4:	e0bff40b 	ldhu	r2,-48(fp)
 55560c8:	1085883a 	add	r2,r2,r2
 55560cc:	1007883a 	mov	r3,r2
 55560d0:	e0bffa17 	ldw	r2,-24(fp)
 55560d4:	1885883a 	add	r2,r3,r2
 55560d8:	1080000b 	ldhu	r2,0(r2)
 55560dc:	e0bff60d 	sth	r2,-40(fp)
			HuffSize = AcSizeTable [index];
 55560e0:	e0bff40b 	ldhu	r2,-48(fp)
 55560e4:	1085883a 	add	r2,r2,r2
 55560e8:	1007883a 	mov	r3,r2
 55560ec:	e0bff917 	ldw	r2,-28(fp)
 55560f0:	1885883a 	add	r2,r3,r2
 55560f4:	1080000b 	ldhu	r2,0(r2)
 55560f8:	e0bff58d 	sth	r2,-42(fp)

			Coeff &= (1 << DataSize) - 1;
 55560fc:	e0fff48b 	ldhu	r3,-46(fp)
 5556100:	00800044 	movi	r2,1
 5556104:	10c4983a 	sll	r2,r2,r3
 5556108:	10bfffc4 	addi	r2,r2,-1
 555610c:	1007883a 	mov	r3,r2
 5556110:	e0bff78b 	ldhu	r2,-34(fp)
 5556114:	10c4703a 	and	r2,r2,r3
 5556118:	e0bff78d 	sth	r2,-34(fp)
			data = (HuffCode << DataSize) | Coeff;
 555611c:	e0fff60b 	ldhu	r3,-40(fp)
 5556120:	e0bff48b 	ldhu	r2,-46(fp)
 5556124:	1886983a 	sll	r3,r3,r2
 5556128:	e0bff78f 	ldh	r2,-34(fp)
 555612c:	1884b03a 	or	r2,r3,r2
 5556130:	e0bff215 	stw	r2,-56(fp)
			numbits = HuffSize + DataSize;
 5556134:	e0fff58b 	ldhu	r3,-42(fp)
 5556138:	e0bff48b 	ldhu	r2,-46(fp)
 555613c:	1885883a 	add	r2,r3,r2
 5556140:	e0bff30d 	sth	r2,-52(fp)

			PUTBITS
 5556144:	d0e8a60b 	ldhu	r3,-23912(gp)
 5556148:	e0bff30b 	ldhu	r2,-52(fp)
 555614c:	1885883a 	add	r2,r3,r2
 5556150:	10bff804 	addi	r2,r2,-32
 5556154:	e0bff38d 	sth	r2,-50(fp)
 5556158:	e0bff38f 	ldh	r2,-50(fp)
 555615c:	1004403a 	cmpge	r2,r2,zero
 5556160:	10000b1e 	bne	r2,zero,5556190 <huffman+0x674>
 5556164:	d0e8a517 	ldw	r3,-23916(gp)
 5556168:	e0bff30b 	ldhu	r2,-52(fp)
 555616c:	1886983a 	sll	r3,r3,r2
 5556170:	e0bff217 	ldw	r2,-56(fp)
 5556174:	1884b03a 	or	r2,r3,r2
 5556178:	d0a8a515 	stw	r2,-23916(gp)
 555617c:	d0e8a60b 	ldhu	r3,-23912(gp)
 5556180:	e0bff30b 	ldhu	r2,-52(fp)
 5556184:	1885883a 	add	r2,r3,r2
 5556188:	d0a8a60d 	sth	r2,-23912(gp)
 555618c:	00004606 	br	55562a8 <huffman+0x78c>
 5556190:	d128a517 	ldw	r4,-23916(gp)
 5556194:	d0a8a60b 	ldhu	r2,-23912(gp)
 5556198:	10ffffcc 	andi	r3,r2,65535
 555619c:	00800804 	movi	r2,32
 55561a0:	10c5c83a 	sub	r2,r2,r3
 55561a4:	2088983a 	sll	r4,r4,r2
 55561a8:	e0fff38f 	ldh	r3,-50(fp)
 55561ac:	e0bff217 	ldw	r2,-56(fp)
 55561b0:	10c4d83a 	srl	r2,r2,r3
 55561b4:	2084b03a 	or	r2,r4,r2
 55561b8:	d0a8a515 	stw	r2,-23916(gp)
 55561bc:	d0a8a517 	ldw	r2,-23916(gp)
 55561c0:	1004d63a 	srli	r2,r2,24
 55561c4:	e0bff105 	stb	r2,-60(fp)
 55561c8:	e1bff103 	ldbu	r6,-60(fp)
 55561cc:	010e2204 	movi	r4,14472
 55561d0:	014e1004 	movi	r5,14400
 55561d4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 55561d8:	e0bff103 	ldbu	r2,-60(fp)
 55561dc:	10803fd8 	cmpnei	r2,r2,255
 55561e0:	1000041e 	bne	r2,zero,55561f4 <huffman+0x6d8>
 55561e4:	010e2204 	movi	r4,14472
 55561e8:	014e1004 	movi	r5,14400
 55561ec:	000d883a 	mov	r6,zero
 55561f0:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 55561f4:	d0a8a517 	ldw	r2,-23916(gp)
 55561f8:	1004d43a 	srli	r2,r2,16
 55561fc:	e0bff105 	stb	r2,-60(fp)
 5556200:	e1bff103 	ldbu	r6,-60(fp)
 5556204:	010e2204 	movi	r4,14472
 5556208:	014e1004 	movi	r5,14400
 555620c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556210:	e0bff103 	ldbu	r2,-60(fp)
 5556214:	10803fd8 	cmpnei	r2,r2,255
 5556218:	1000041e 	bne	r2,zero,555622c <huffman+0x710>
 555621c:	010e2204 	movi	r4,14472
 5556220:	014e1004 	movi	r5,14400
 5556224:	000d883a 	mov	r6,zero
 5556228:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 555622c:	d0a8a517 	ldw	r2,-23916(gp)
 5556230:	1004d23a 	srli	r2,r2,8
 5556234:	e0bff105 	stb	r2,-60(fp)
 5556238:	e1bff103 	ldbu	r6,-60(fp)
 555623c:	010e2204 	movi	r4,14472
 5556240:	014e1004 	movi	r5,14400
 5556244:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556248:	e0bff103 	ldbu	r2,-60(fp)
 555624c:	10803fd8 	cmpnei	r2,r2,255
 5556250:	1000041e 	bne	r2,zero,5556264 <huffman+0x748>
 5556254:	010e2204 	movi	r4,14472
 5556258:	014e1004 	movi	r5,14400
 555625c:	000d883a 	mov	r6,zero
 5556260:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556264:	d0a8a517 	ldw	r2,-23916(gp)
 5556268:	e0bff105 	stb	r2,-60(fp)
 555626c:	e1bff103 	ldbu	r6,-60(fp)
 5556270:	010e2204 	movi	r4,14472
 5556274:	014e1004 	movi	r5,14400
 5556278:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 555627c:	e0bff103 	ldbu	r2,-60(fp)
 5556280:	10803fd8 	cmpnei	r2,r2,255
 5556284:	1000041e 	bne	r2,zero,5556298 <huffman+0x77c>
 5556288:	010e2204 	movi	r4,14472
 555628c:	014e1004 	movi	r5,14400
 5556290:	000d883a 	mov	r6,zero
 5556294:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556298:	e0bff217 	ldw	r2,-56(fp)
 555629c:	d0a8a515 	stw	r2,-23916(gp)
 55562a0:	e0bff38b 	ldhu	r2,-50(fp)
 55562a4:	d0a8a60d 	sth	r2,-23912(gp)
			RunLength = 0;
 55562a8:	e03ff50d 	sth	zero,-44(fp)
 55562ac:	00000306 	br	55562bc <huffman+0x7a0>
		}
		else
			RunLength++;
 55562b0:	e0bff50b 	ldhu	r2,-44(fp)
 55562b4:	10800044 	addi	r2,r2,1
 55562b8:	e0bff50d 	sth	r2,-44(fp)
	data = (HuffCode << DataSize) | Coeff;
	numbits = HuffSize + DataSize;

	PUTBITS

	for (i=63; i>0; i--)
 55562bc:	e0bffd0b 	ldhu	r2,-12(fp)
 55562c0:	10bfffc4 	addi	r2,r2,-1
 55562c4:	e0bffd0d 	sth	r2,-12(fp)
 55562c8:	e0bffd0b 	ldhu	r2,-12(fp)
 55562cc:	1004c03a 	cmpne	r2,r2,zero
 55562d0:	103ee11e 	bne	r2,zero,5555e58 <huffman+0x33c>
		}
		else
			RunLength++;
	}
//xt_iss_profile_enable();
	if (RunLength != 0)
 55562d4:	e0bff50b 	ldhu	r2,-44(fp)
 55562d8:	1005003a 	cmpeq	r2,r2,zero
 55562dc:	1000601e 	bne	r2,zero,5556460 <huffman+0x944>
	{
		data = AcCodeTable [0];
 55562e0:	e0bffa17 	ldw	r2,-24(fp)
 55562e4:	1080000b 	ldhu	r2,0(r2)
 55562e8:	10bfffcc 	andi	r2,r2,65535
 55562ec:	e0bff215 	stw	r2,-56(fp)
		numbits = AcSizeTable [0];
 55562f0:	e0bff917 	ldw	r2,-28(fp)
 55562f4:	1080000b 	ldhu	r2,0(r2)
 55562f8:	e0bff30d 	sth	r2,-52(fp)
		PUTBITS
 55562fc:	d0e8a60b 	ldhu	r3,-23912(gp)
 5556300:	e0bff30b 	ldhu	r2,-52(fp)
 5556304:	1885883a 	add	r2,r3,r2
 5556308:	10bff804 	addi	r2,r2,-32
 555630c:	e0bff38d 	sth	r2,-50(fp)
 5556310:	e0bff38f 	ldh	r2,-50(fp)
 5556314:	1004403a 	cmpge	r2,r2,zero
 5556318:	10000b1e 	bne	r2,zero,5556348 <huffman+0x82c>
 555631c:	d0e8a517 	ldw	r3,-23916(gp)
 5556320:	e0bff30b 	ldhu	r2,-52(fp)
 5556324:	1886983a 	sll	r3,r3,r2
 5556328:	e0bff217 	ldw	r2,-56(fp)
 555632c:	1884b03a 	or	r2,r3,r2
 5556330:	d0a8a515 	stw	r2,-23916(gp)
 5556334:	d0e8a60b 	ldhu	r3,-23912(gp)
 5556338:	e0bff30b 	ldhu	r2,-52(fp)
 555633c:	1885883a 	add	r2,r3,r2
 5556340:	d0a8a60d 	sth	r2,-23912(gp)
 5556344:	00004606 	br	5556460 <huffman+0x944>
 5556348:	d128a517 	ldw	r4,-23916(gp)
 555634c:	d0a8a60b 	ldhu	r2,-23912(gp)
 5556350:	10ffffcc 	andi	r3,r2,65535
 5556354:	00800804 	movi	r2,32
 5556358:	10c5c83a 	sub	r2,r2,r3
 555635c:	2088983a 	sll	r4,r4,r2
 5556360:	e0fff38f 	ldh	r3,-50(fp)
 5556364:	e0bff217 	ldw	r2,-56(fp)
 5556368:	10c4d83a 	srl	r2,r2,r3
 555636c:	2084b03a 	or	r2,r4,r2
 5556370:	d0a8a515 	stw	r2,-23916(gp)
 5556374:	d0a8a517 	ldw	r2,-23916(gp)
 5556378:	1004d63a 	srli	r2,r2,24
 555637c:	e0bff105 	stb	r2,-60(fp)
 5556380:	e1bff103 	ldbu	r6,-60(fp)
 5556384:	010e2204 	movi	r4,14472
 5556388:	014e1004 	movi	r5,14400
 555638c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556390:	e0bff103 	ldbu	r2,-60(fp)
 5556394:	10803fd8 	cmpnei	r2,r2,255
 5556398:	1000041e 	bne	r2,zero,55563ac <huffman+0x890>
 555639c:	010e2204 	movi	r4,14472
 55563a0:	014e1004 	movi	r5,14400
 55563a4:	000d883a 	mov	r6,zero
 55563a8:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 55563ac:	d0a8a517 	ldw	r2,-23916(gp)
 55563b0:	1004d43a 	srli	r2,r2,16
 55563b4:	e0bff105 	stb	r2,-60(fp)
 55563b8:	e1bff103 	ldbu	r6,-60(fp)
 55563bc:	010e2204 	movi	r4,14472
 55563c0:	014e1004 	movi	r5,14400
 55563c4:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 55563c8:	e0bff103 	ldbu	r2,-60(fp)
 55563cc:	10803fd8 	cmpnei	r2,r2,255
 55563d0:	1000041e 	bne	r2,zero,55563e4 <huffman+0x8c8>
 55563d4:	010e2204 	movi	r4,14472
 55563d8:	014e1004 	movi	r5,14400
 55563dc:	000d883a 	mov	r6,zero
 55563e0:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 55563e4:	d0a8a517 	ldw	r2,-23916(gp)
 55563e8:	1004d23a 	srli	r2,r2,8
 55563ec:	e0bff105 	stb	r2,-60(fp)
 55563f0:	e1bff103 	ldbu	r6,-60(fp)
 55563f4:	010e2204 	movi	r4,14472
 55563f8:	014e1004 	movi	r5,14400
 55563fc:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556400:	e0bff103 	ldbu	r2,-60(fp)
 5556404:	10803fd8 	cmpnei	r2,r2,255
 5556408:	1000041e 	bne	r2,zero,555641c <huffman+0x900>
 555640c:	010e2204 	movi	r4,14472
 5556410:	014e1004 	movi	r5,14400
 5556414:	000d883a 	mov	r6,zero
 5556418:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 555641c:	d0a8a517 	ldw	r2,-23916(gp)
 5556420:	e0bff105 	stb	r2,-60(fp)
 5556424:	e1bff103 	ldbu	r6,-60(fp)
 5556428:	010e2204 	movi	r4,14472
 555642c:	014e1004 	movi	r5,14400
 5556430:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556434:	e0bff103 	ldbu	r2,-60(fp)
 5556438:	10803fd8 	cmpnei	r2,r2,255
 555643c:	1000041e 	bne	r2,zero,5556450 <huffman+0x934>
 5556440:	010e2204 	movi	r4,14472
 5556444:	014e1004 	movi	r5,14400
 5556448:	000d883a 	mov	r6,zero
 555644c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
 5556450:	e0bff217 	ldw	r2,-56(fp)
 5556454:	d0a8a515 	stw	r2,-23916(gp)
 5556458:	e0bff38b 	ldhu	r2,-50(fp)
 555645c:	d0a8a60d 	sth	r2,-23912(gp)
	}

}
 5556460:	e037883a 	mov	sp,fp
 5556464:	dfc00117 	ldw	ra,4(sp)
 5556468:	df000017 	ldw	fp,0(sp)
 555646c:	dec00204 	addi	sp,sp,8
 5556470:	f800283a 	ret

05556474 <close_bitstream>:

/* For bit Stuffing and EOI marker */
void close_bitstream (void)
{
 5556474:	defffb04 	addi	sp,sp,-20
 5556478:	dfc00415 	stw	ra,16(sp)
 555647c:	df000315 	stw	fp,12(sp)
 5556480:	df000304 	addi	fp,sp,12
	UINT16 i, count;
	UINT8 *ptr;

	UINT8 out;

	if (bitindex > 0)
 5556484:	d0a8a60b 	ldhu	r2,-23912(gp)
 5556488:	10bfffcc 	andi	r2,r2,65535
 555648c:	1005003a 	cmpeq	r2,r2,zero
 5556490:	1000291e 	bne	r2,zero,5556538 <close_bitstream+0xc4>
	{
		lcode <<= (32 - bitindex);
 5556494:	d128a517 	ldw	r4,-23916(gp)
 5556498:	d0a8a60b 	ldhu	r2,-23912(gp)
 555649c:	10ffffcc 	andi	r3,r2,65535
 55564a0:	00800804 	movi	r2,32
 55564a4:	10c5c83a 	sub	r2,r2,r3
 55564a8:	2084983a 	sll	r2,r4,r2
 55564ac:	d0a8a515 	stw	r2,-23916(gp)
		count = (bitindex + 7) >> 3;
 55564b0:	d0a8a60b 	ldhu	r2,-23912(gp)
 55564b4:	10bfffcc 	andi	r2,r2,65535
 55564b8:	108001c4 	addi	r2,r2,7
 55564bc:	1005d0fa 	srai	r2,r2,3
 55564c0:	e0bfff0d 	sth	r2,-4(fp)

		ptr = (UINT8 *) &lcode + 3;
 55564c4:	d0a8a504 	addi	r2,gp,-23916
 55564c8:	108000c4 	addi	r2,r2,3
 55564cc:	e0bffe15 	stw	r2,-8(fp)

		for (i=count; i>0; i--)
 55564d0:	e0bfff0b 	ldhu	r2,-4(fp)
 55564d4:	e0bfff8d 	sth	r2,-2(fp)
 55564d8:	00001406 	br	555652c <close_bitstream+0xb8>
		{
			out = *ptr--;
 55564dc:	e0bffe17 	ldw	r2,-8(fp)
 55564e0:	10800003 	ldbu	r2,0(r2)
 55564e4:	e0bffd05 	stb	r2,-12(fp)
 55564e8:	e0bffe17 	ldw	r2,-8(fp)
 55564ec:	10bfffc4 	addi	r2,r2,-1
 55564f0:	e0bffe15 	stw	r2,-8(fp)
			altera_avalon_fifo_write_fifo(0x3888,0x3840,out);
 55564f4:	e1bffd03 	ldbu	r6,-12(fp)
 55564f8:	010e2204 	movi	r4,14472
 55564fc:	014e1004 	movi	r5,14400
 5556500:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
			if (out == 0xff)
 5556504:	e0bffd03 	ldbu	r2,-12(fp)
 5556508:	10803fd8 	cmpnei	r2,r2,255
 555650c:	1000041e 	bne	r2,zero,5556520 <close_bitstream+0xac>
				altera_avalon_fifo_write_fifo(0x3888,0x3840,0);
 5556510:	010e2204 	movi	r4,14472
 5556514:	014e1004 	movi	r5,14400
 5556518:	000d883a 	mov	r6,zero
 555651c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
		lcode <<= (32 - bitindex);
		count = (bitindex + 7) >> 3;

		ptr = (UINT8 *) &lcode + 3;

		for (i=count; i>0; i--)
 5556520:	e0bfff8b 	ldhu	r2,-2(fp)
 5556524:	10bfffc4 	addi	r2,r2,-1
 5556528:	e0bfff8d 	sth	r2,-2(fp)
 555652c:	e0bfff8b 	ldhu	r2,-2(fp)
 5556530:	1004c03a 	cmpne	r2,r2,zero
 5556534:	103fe91e 	bne	r2,zero,55564dc <close_bitstream+0x68>
				altera_avalon_fifo_write_fifo(0x3888,0x3840,0);
		}
	}

	// End of image marker
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xFF);
 5556538:	010e2204 	movi	r4,14472
 555653c:	014e1004 	movi	r5,14400
 5556540:	01803fc4 	movi	r6,255
 5556544:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	altera_avalon_fifo_write_fifo(0x3888,0x3840,0xD9);
 5556548:	010e2204 	movi	r4,14472
 555654c:	014e1004 	movi	r5,14400
 5556550:	01803644 	movi	r6,217
 5556554:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>

}
 5556558:	e037883a 	mov	sp,fp
 555655c:	dfc00117 	ldw	ra,4(sp)
 5556560:	df000017 	ldw	fp,0(sp)
 5556564:	dec00204 	addi	sp,sp,8
 5556568:	f800283a 	ret

0555656c <main>:

int main(void){
 555656c:	defffb04 	addi	sp,sp,-20
 5556570:	dfc00415 	stw	ra,16(sp)
 5556574:	df000315 	stw	fp,12(sp)
 5556578:	df000304 	addi	fp,sp,12
	//RESET_DONE();//xt_iss_profile_disable();

  while(1){

	lcode = 0;
 555657c:	d028a515 	stw	zero,-23916(gp)
	bitindex = 0;
 5556580:	d028a60d 	sth	zero,-23912(gp)
	ldc1 = 0; ldc2 = 0; ldc3 = 0;
 5556584:	d028a68d 	sth	zero,-23910(gp)
 5556588:	d028a70d 	sth	zero,-23908(gp)
 555658c:	d028a78d 	sth	zero,-23906(gp)

	// UINT32 width  = (UINT32)RECV1();
	// UINT32 height = (UINT32)RECV1();
	// UINT32 count  = (UINT32)RECV1();
	UINT32 width  = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3820E);
 5556590:	010e2404 	movi	r4,14480
 5556594:	01400134 	movhi	r5,4
 5556598:	29608384 	addi	r5,r5,-32242
 555659c:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 55565a0:	e0bfff15 	stw	r2,-4(fp)
	UINT32 height = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3820E);
 55565a4:	010e2404 	movi	r4,14480
 55565a8:	01400134 	movhi	r5,4
 55565ac:	29608384 	addi	r5,r5,-32242
 55565b0:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 55565b4:	e0bffe15 	stw	r2,-8(fp)
	UINT32 count  = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3820E);
 55565b8:	010e2404 	movi	r4,14480
 55565bc:	01400134 	movhi	r5,4
 55565c0:	29608384 	addi	r5,r5,-32242
 55565c4:	5559f480 	call	5559f48 <altera_avalon_fifo_read_fifo>
 55565c8:	e0bffd15 	stw	r2,-12(fp)
	//xt_iss_profile_enable();
	//fprintf(stderr,"total macroblocks: %d\n",count);
	write_markers (width,height);
 55565cc:	e13fff17 	ldw	r4,-4(fp)
 55565d0:	e17ffe17 	ldw	r5,-8(fp)
 55565d4:	55557100 	call	5555710 <write_markers>
	
	for(; count>0; count--){
 55565d8:	00000906 	br	5556600 <main+0x94>
		huffman (1);
 55565dc:	01000044 	movi	r4,1
 55565e0:	5555b1c0 	call	5555b1c <huffman>
		huffman (2);
 55565e4:	01000084 	movi	r4,2
 55565e8:	5555b1c0 	call	5555b1c <huffman>
		huffman (3);
 55565ec:	010000c4 	movi	r4,3
 55565f0:	5555b1c0 	call	5555b1c <huffman>
	UINT32 count  = (UINT32)altera_avalon_fifo_read_fifo(0x3890,0x3820E);
	//xt_iss_profile_enable();
	//fprintf(stderr,"total macroblocks: %d\n",count);
	write_markers (width,height);
	
	for(; count>0; count--){
 55565f4:	e0bffd17 	ldw	r2,-12(fp)
 55565f8:	10bfffc4 	addi	r2,r2,-1
 55565fc:	e0bffd15 	stw	r2,-12(fp)
 5556600:	e0bffd17 	ldw	r2,-12(fp)
 5556604:	1004c03a 	cmpne	r2,r2,zero
 5556608:	103ff41e 	bne	r2,zero,55565dc <main+0x70>
		huffman (3);
	//	#pragma flush //added by haris
	
	}
	//fprintf(stderr,"Closing bitstream\n");
	close_bitstream();
 555660c:	55564740 	call	5556474 <close_bitstream>
	//#pragma flush
	//SET_DONE();
	altera_avalon_fifo_write_fifo(0x3888,0x3840,1);
 5556610:	010e2204 	movi	r4,14472
 5556614:	014e1004 	movi	r5,14400
 5556618:	01800044 	movi	r6,1
 555661c:	5559e740 	call	5559e74 <altera_avalon_fifo_write_fifo>
	break;

  }

	printf("\n Finished !\n");
 5556620:	010155b4 	movhi	r4,1366
 5556624:	212fc704 	addi	r4,r4,-16612
 5556628:	55566e40 	call	55566e4 <puts>
	return 0;
 555662c:	0005883a 	mov	r2,zero
}
 5556630:	e037883a 	mov	sp,fp
 5556634:	dfc00117 	ldw	ra,4(sp)
 5556638:	df000017 	ldw	fp,0(sp)
 555663c:	dec00204 	addi	sp,sp,8
 5556640:	f800283a 	ret

05556644 <_puts_r>:
 5556644:	defff604 	addi	sp,sp,-40
 5556648:	dc400715 	stw	r17,28(sp)
 555664c:	2023883a 	mov	r17,r4
 5556650:	2809883a 	mov	r4,r5
 5556654:	dfc00915 	stw	ra,36(sp)
 5556658:	dcc00815 	stw	r19,32(sp)
 555665c:	2827883a 	mov	r19,r5
 5556660:	55566f80 	call	55566f8 <strlen>
 5556664:	89400217 	ldw	r5,8(r17)
 5556668:	00c155b4 	movhi	r3,1366
 555666c:	18efcb04 	addi	r3,r3,-16596
 5556670:	01c00044 	movi	r7,1
 5556674:	12000044 	addi	r8,r2,1
 5556678:	d8c00515 	stw	r3,20(sp)
 555667c:	d9c00615 	stw	r7,24(sp)
 5556680:	d8c00304 	addi	r3,sp,12
 5556684:	01c00084 	movi	r7,2
 5556688:	8809883a 	mov	r4,r17
 555668c:	d80d883a 	mov	r6,sp
 5556690:	d8c00015 	stw	r3,0(sp)
 5556694:	dcc00315 	stw	r19,12(sp)
 5556698:	da000215 	stw	r8,8(sp)
 555669c:	d9c00115 	stw	r7,4(sp)
 55566a0:	d8800415 	stw	r2,16(sp)
 55566a4:	555676c0 	call	555676c <__sfvwrite_r>
 55566a8:	00ffffc4 	movi	r3,-1
 55566ac:	10000626 	beq	r2,zero,55566c8 <_puts_r+0x84>
 55566b0:	1805883a 	mov	r2,r3
 55566b4:	dfc00917 	ldw	ra,36(sp)
 55566b8:	dcc00817 	ldw	r19,32(sp)
 55566bc:	dc400717 	ldw	r17,28(sp)
 55566c0:	dec00a04 	addi	sp,sp,40
 55566c4:	f800283a 	ret
 55566c8:	00c00284 	movi	r3,10
 55566cc:	1805883a 	mov	r2,r3
 55566d0:	dfc00917 	ldw	ra,36(sp)
 55566d4:	dcc00817 	ldw	r19,32(sp)
 55566d8:	dc400717 	ldw	r17,28(sp)
 55566dc:	dec00a04 	addi	sp,sp,40
 55566e0:	f800283a 	ret

055566e4 <puts>:
 55566e4:	008155b4 	movhi	r2,1366
 55566e8:	10b86304 	addi	r2,r2,-7796
 55566ec:	200b883a 	mov	r5,r4
 55566f0:	11000017 	ldw	r4,0(r2)
 55566f4:	55566441 	jmpi	5556644 <_puts_r>

055566f8 <strlen>:
 55566f8:	208000cc 	andi	r2,r4,3
 55566fc:	2011883a 	mov	r8,r4
 5556700:	1000161e 	bne	r2,zero,555675c <strlen+0x64>
 5556704:	20c00017 	ldw	r3,0(r4)
 5556708:	017fbff4 	movhi	r5,65279
 555670c:	297fbfc4 	addi	r5,r5,-257
 5556710:	01e02074 	movhi	r7,32897
 5556714:	39e02004 	addi	r7,r7,-32640
 5556718:	1945883a 	add	r2,r3,r5
 555671c:	11c4703a 	and	r2,r2,r7
 5556720:	00c6303a 	nor	r3,zero,r3
 5556724:	1886703a 	and	r3,r3,r2
 5556728:	18000c1e 	bne	r3,zero,555675c <strlen+0x64>
 555672c:	280d883a 	mov	r6,r5
 5556730:	380b883a 	mov	r5,r7
 5556734:	21000104 	addi	r4,r4,4
 5556738:	20800017 	ldw	r2,0(r4)
 555673c:	1187883a 	add	r3,r2,r6
 5556740:	1946703a 	and	r3,r3,r5
 5556744:	0084303a 	nor	r2,zero,r2
 5556748:	10c4703a 	and	r2,r2,r3
 555674c:	103ff926 	beq	r2,zero,5556734 <strlen+0x3c>
 5556750:	20800007 	ldb	r2,0(r4)
 5556754:	10000326 	beq	r2,zero,5556764 <strlen+0x6c>
 5556758:	21000044 	addi	r4,r4,1
 555675c:	20800007 	ldb	r2,0(r4)
 5556760:	103ffd1e 	bne	r2,zero,5556758 <strlen+0x60>
 5556764:	2205c83a 	sub	r2,r4,r8
 5556768:	f800283a 	ret

0555676c <__sfvwrite_r>:
 555676c:	30800217 	ldw	r2,8(r6)
 5556770:	defff504 	addi	sp,sp,-44
 5556774:	df000915 	stw	fp,36(sp)
 5556778:	dd800715 	stw	r22,28(sp)
 555677c:	dc800315 	stw	r18,12(sp)
 5556780:	dfc00a15 	stw	ra,40(sp)
 5556784:	ddc00815 	stw	r23,32(sp)
 5556788:	dd400615 	stw	r21,24(sp)
 555678c:	dd000515 	stw	r20,20(sp)
 5556790:	dcc00415 	stw	r19,16(sp)
 5556794:	dc400215 	stw	r17,8(sp)
 5556798:	dc000115 	stw	r16,4(sp)
 555679c:	302d883a 	mov	r22,r6
 55567a0:	2039883a 	mov	fp,r4
 55567a4:	2825883a 	mov	r18,r5
 55567a8:	10001c26 	beq	r2,zero,555681c <__sfvwrite_r+0xb0>
 55567ac:	29c0030b 	ldhu	r7,12(r5)
 55567b0:	3880020c 	andi	r2,r7,8
 55567b4:	10002726 	beq	r2,zero,5556854 <__sfvwrite_r+0xe8>
 55567b8:	28800417 	ldw	r2,16(r5)
 55567bc:	10002526 	beq	r2,zero,5556854 <__sfvwrite_r+0xe8>
 55567c0:	3880008c 	andi	r2,r7,2
 55567c4:	b5400017 	ldw	r21,0(r22)
 55567c8:	10002826 	beq	r2,zero,555686c <__sfvwrite_r+0x100>
 55567cc:	0021883a 	mov	r16,zero
 55567d0:	0023883a 	mov	r17,zero
 55567d4:	880d883a 	mov	r6,r17
 55567d8:	e009883a 	mov	r4,fp
 55567dc:	00810004 	movi	r2,1024
 55567e0:	80006e26 	beq	r16,zero,555699c <__sfvwrite_r+0x230>
 55567e4:	800f883a 	mov	r7,r16
 55567e8:	91400717 	ldw	r5,28(r18)
 55567ec:	1400012e 	bgeu	r2,r16,55567f4 <__sfvwrite_r+0x88>
 55567f0:	100f883a 	mov	r7,r2
 55567f4:	90c00917 	ldw	r3,36(r18)
 55567f8:	183ee83a 	callr	r3
 55567fc:	1007883a 	mov	r3,r2
 5556800:	80a1c83a 	sub	r16,r16,r2
 5556804:	88a3883a 	add	r17,r17,r2
 5556808:	00806d0e 	bge	zero,r2,55569c0 <__sfvwrite_r+0x254>
 555680c:	b0800217 	ldw	r2,8(r22)
 5556810:	10c5c83a 	sub	r2,r2,r3
 5556814:	b0800215 	stw	r2,8(r22)
 5556818:	103fee1e 	bne	r2,zero,55567d4 <__sfvwrite_r+0x68>
 555681c:	0009883a 	mov	r4,zero
 5556820:	2005883a 	mov	r2,r4
 5556824:	dfc00a17 	ldw	ra,40(sp)
 5556828:	df000917 	ldw	fp,36(sp)
 555682c:	ddc00817 	ldw	r23,32(sp)
 5556830:	dd800717 	ldw	r22,28(sp)
 5556834:	dd400617 	ldw	r21,24(sp)
 5556838:	dd000517 	ldw	r20,20(sp)
 555683c:	dcc00417 	ldw	r19,16(sp)
 5556840:	dc800317 	ldw	r18,12(sp)
 5556844:	dc400217 	ldw	r17,8(sp)
 5556848:	dc000117 	ldw	r16,4(sp)
 555684c:	dec00b04 	addi	sp,sp,44
 5556850:	f800283a 	ret
 5556854:	5557c100 	call	5557c10 <__swsetup_r>
 5556858:	1000e41e 	bne	r2,zero,5556bec <__sfvwrite_r+0x480>
 555685c:	91c0030b 	ldhu	r7,12(r18)
 5556860:	b5400017 	ldw	r21,0(r22)
 5556864:	3880008c 	andi	r2,r7,2
 5556868:	103fd81e 	bne	r2,zero,55567cc <__sfvwrite_r+0x60>
 555686c:	3880004c 	andi	r2,r7,1
 5556870:	1005003a 	cmpeq	r2,r2,zero
 5556874:	10005726 	beq	r2,zero,55569d4 <__sfvwrite_r+0x268>
 5556878:	0029883a 	mov	r20,zero
 555687c:	002f883a 	mov	r23,zero
 5556880:	a0004226 	beq	r20,zero,555698c <__sfvwrite_r+0x220>
 5556884:	3880800c 	andi	r2,r7,512
 5556888:	94000217 	ldw	r16,8(r18)
 555688c:	10008b26 	beq	r2,zero,5556abc <__sfvwrite_r+0x350>
 5556890:	800d883a 	mov	r6,r16
 5556894:	a400a536 	bltu	r20,r16,5556b2c <__sfvwrite_r+0x3c0>
 5556898:	3881200c 	andi	r2,r7,1152
 555689c:	10002726 	beq	r2,zero,555693c <__sfvwrite_r+0x1d0>
 55568a0:	90800517 	ldw	r2,20(r18)
 55568a4:	92000417 	ldw	r8,16(r18)
 55568a8:	91400017 	ldw	r5,0(r18)
 55568ac:	1087883a 	add	r3,r2,r2
 55568b0:	1887883a 	add	r3,r3,r2
 55568b4:	1808d7fa 	srli	r4,r3,31
 55568b8:	2a21c83a 	sub	r16,r5,r8
 55568bc:	80800044 	addi	r2,r16,1
 55568c0:	20c9883a 	add	r4,r4,r3
 55568c4:	2027d07a 	srai	r19,r4,1
 55568c8:	a085883a 	add	r2,r20,r2
 55568cc:	980d883a 	mov	r6,r19
 55568d0:	9880022e 	bgeu	r19,r2,55568dc <__sfvwrite_r+0x170>
 55568d4:	1027883a 	mov	r19,r2
 55568d8:	100d883a 	mov	r6,r2
 55568dc:	3881000c 	andi	r2,r7,1024
 55568e0:	1000b826 	beq	r2,zero,5556bc4 <__sfvwrite_r+0x458>
 55568e4:	300b883a 	mov	r5,r6
 55568e8:	e009883a 	mov	r4,fp
 55568ec:	5556c080 	call	5556c08 <_malloc_r>
 55568f0:	10003126 	beq	r2,zero,55569b8 <__sfvwrite_r+0x24c>
 55568f4:	91400417 	ldw	r5,16(r18)
 55568f8:	1009883a 	mov	r4,r2
 55568fc:	800d883a 	mov	r6,r16
 5556900:	1023883a 	mov	r17,r2
 5556904:	555742c0 	call	555742c <memcpy>
 5556908:	90c0030b 	ldhu	r3,12(r18)
 555690c:	00beffc4 	movi	r2,-1025
 5556910:	1886703a 	and	r3,r3,r2
 5556914:	18c02014 	ori	r3,r3,128
 5556918:	90c0030d 	sth	r3,12(r18)
 555691c:	9c07c83a 	sub	r3,r19,r16
 5556920:	8c05883a 	add	r2,r17,r16
 5556924:	a00d883a 	mov	r6,r20
 5556928:	a021883a 	mov	r16,r20
 555692c:	90800015 	stw	r2,0(r18)
 5556930:	90c00215 	stw	r3,8(r18)
 5556934:	94400415 	stw	r17,16(r18)
 5556938:	94c00515 	stw	r19,20(r18)
 555693c:	91000017 	ldw	r4,0(r18)
 5556940:	b80b883a 	mov	r5,r23
 5556944:	a023883a 	mov	r17,r20
 5556948:	55574cc0 	call	55574cc <memmove>
 555694c:	90c00217 	ldw	r3,8(r18)
 5556950:	90800017 	ldw	r2,0(r18)
 5556954:	a027883a 	mov	r19,r20
 5556958:	1c07c83a 	sub	r3,r3,r16
 555695c:	1405883a 	add	r2,r2,r16
 5556960:	90c00215 	stw	r3,8(r18)
 5556964:	a021883a 	mov	r16,r20
 5556968:	90800015 	stw	r2,0(r18)
 555696c:	b0800217 	ldw	r2,8(r22)
 5556970:	1405c83a 	sub	r2,r2,r16
 5556974:	b0800215 	stw	r2,8(r22)
 5556978:	103fa826 	beq	r2,zero,555681c <__sfvwrite_r+0xb0>
 555697c:	a469c83a 	sub	r20,r20,r17
 5556980:	91c0030b 	ldhu	r7,12(r18)
 5556984:	bcef883a 	add	r23,r23,r19
 5556988:	a03fbe1e 	bne	r20,zero,5556884 <__sfvwrite_r+0x118>
 555698c:	adc00017 	ldw	r23,0(r21)
 5556990:	ad000117 	ldw	r20,4(r21)
 5556994:	ad400204 	addi	r21,r21,8
 5556998:	003fb906 	br	5556880 <__sfvwrite_r+0x114>
 555699c:	ac400017 	ldw	r17,0(r21)
 55569a0:	ac000117 	ldw	r16,4(r21)
 55569a4:	ad400204 	addi	r21,r21,8
 55569a8:	003f8a06 	br	55567d4 <__sfvwrite_r+0x68>
 55569ac:	91400417 	ldw	r5,16(r18)
 55569b0:	e009883a 	mov	r4,fp
 55569b4:	55583680 	call	5558368 <_free_r>
 55569b8:	00800304 	movi	r2,12
 55569bc:	e0800015 	stw	r2,0(fp)
 55569c0:	9080030b 	ldhu	r2,12(r18)
 55569c4:	013fffc4 	movi	r4,-1
 55569c8:	10801014 	ori	r2,r2,64
 55569cc:	9080030d 	sth	r2,12(r18)
 55569d0:	003f9306 	br	5556820 <__sfvwrite_r+0xb4>
 55569d4:	0027883a 	mov	r19,zero
 55569d8:	002f883a 	mov	r23,zero
 55569dc:	d8000015 	stw	zero,0(sp)
 55569e0:	0029883a 	mov	r20,zero
 55569e4:	98001e26 	beq	r19,zero,5556a60 <__sfvwrite_r+0x2f4>
 55569e8:	d8c00017 	ldw	r3,0(sp)
 55569ec:	1804c03a 	cmpne	r2,r3,zero
 55569f0:	10005e26 	beq	r2,zero,5556b6c <__sfvwrite_r+0x400>
 55569f4:	9821883a 	mov	r16,r19
 55569f8:	a4c0012e 	bgeu	r20,r19,5556a00 <__sfvwrite_r+0x294>
 55569fc:	a021883a 	mov	r16,r20
 5556a00:	91000017 	ldw	r4,0(r18)
 5556a04:	90800417 	ldw	r2,16(r18)
 5556a08:	91800217 	ldw	r6,8(r18)
 5556a0c:	91c00517 	ldw	r7,20(r18)
 5556a10:	1100022e 	bgeu	r2,r4,5556a1c <__sfvwrite_r+0x2b0>
 5556a14:	31e3883a 	add	r17,r6,r7
 5556a18:	8c001616 	blt	r17,r16,5556a74 <__sfvwrite_r+0x308>
 5556a1c:	81c03816 	blt	r16,r7,5556b00 <__sfvwrite_r+0x394>
 5556a20:	90c00917 	ldw	r3,36(r18)
 5556a24:	91400717 	ldw	r5,28(r18)
 5556a28:	e009883a 	mov	r4,fp
 5556a2c:	b80d883a 	mov	r6,r23
 5556a30:	183ee83a 	callr	r3
 5556a34:	1023883a 	mov	r17,r2
 5556a38:	00bfe10e 	bge	zero,r2,55569c0 <__sfvwrite_r+0x254>
 5556a3c:	a469c83a 	sub	r20,r20,r17
 5556a40:	a0001826 	beq	r20,zero,5556aa4 <__sfvwrite_r+0x338>
 5556a44:	b0800217 	ldw	r2,8(r22)
 5556a48:	1445c83a 	sub	r2,r2,r17
 5556a4c:	b0800215 	stw	r2,8(r22)
 5556a50:	103f7226 	beq	r2,zero,555681c <__sfvwrite_r+0xb0>
 5556a54:	9c67c83a 	sub	r19,r19,r17
 5556a58:	bc6f883a 	add	r23,r23,r17
 5556a5c:	983fe21e 	bne	r19,zero,55569e8 <__sfvwrite_r+0x27c>
 5556a60:	adc00017 	ldw	r23,0(r21)
 5556a64:	acc00117 	ldw	r19,4(r21)
 5556a68:	ad400204 	addi	r21,r21,8
 5556a6c:	d8000015 	stw	zero,0(sp)
 5556a70:	003fdc06 	br	55569e4 <__sfvwrite_r+0x278>
 5556a74:	b80b883a 	mov	r5,r23
 5556a78:	880d883a 	mov	r6,r17
 5556a7c:	55574cc0 	call	55574cc <memmove>
 5556a80:	90c00017 	ldw	r3,0(r18)
 5556a84:	e009883a 	mov	r4,fp
 5556a88:	900b883a 	mov	r5,r18
 5556a8c:	1c47883a 	add	r3,r3,r17
 5556a90:	90c00015 	stw	r3,0(r18)
 5556a94:	5557d4c0 	call	5557d4c <_fflush_r>
 5556a98:	103fc91e 	bne	r2,zero,55569c0 <__sfvwrite_r+0x254>
 5556a9c:	a469c83a 	sub	r20,r20,r17
 5556aa0:	a03fe81e 	bne	r20,zero,5556a44 <__sfvwrite_r+0x2d8>
 5556aa4:	e009883a 	mov	r4,fp
 5556aa8:	900b883a 	mov	r5,r18
 5556aac:	5557d4c0 	call	5557d4c <_fflush_r>
 5556ab0:	103fc31e 	bne	r2,zero,55569c0 <__sfvwrite_r+0x254>
 5556ab4:	d8000015 	stw	zero,0(sp)
 5556ab8:	003fe206 	br	5556a44 <__sfvwrite_r+0x2d8>
 5556abc:	91000017 	ldw	r4,0(r18)
 5556ac0:	90800417 	ldw	r2,16(r18)
 5556ac4:	1100022e 	bgeu	r2,r4,5556ad0 <__sfvwrite_r+0x364>
 5556ac8:	8023883a 	mov	r17,r16
 5556acc:	85003136 	bltu	r16,r20,5556b94 <__sfvwrite_r+0x428>
 5556ad0:	91c00517 	ldw	r7,20(r18)
 5556ad4:	a1c01836 	bltu	r20,r7,5556b38 <__sfvwrite_r+0x3cc>
 5556ad8:	90c00917 	ldw	r3,36(r18)
 5556adc:	91400717 	ldw	r5,28(r18)
 5556ae0:	e009883a 	mov	r4,fp
 5556ae4:	b80d883a 	mov	r6,r23
 5556ae8:	183ee83a 	callr	r3
 5556aec:	1021883a 	mov	r16,r2
 5556af0:	00bfb30e 	bge	zero,r2,55569c0 <__sfvwrite_r+0x254>
 5556af4:	1023883a 	mov	r17,r2
 5556af8:	1027883a 	mov	r19,r2
 5556afc:	003f9b06 	br	555696c <__sfvwrite_r+0x200>
 5556b00:	b80b883a 	mov	r5,r23
 5556b04:	800d883a 	mov	r6,r16
 5556b08:	55574cc0 	call	55574cc <memmove>
 5556b0c:	90c00217 	ldw	r3,8(r18)
 5556b10:	90800017 	ldw	r2,0(r18)
 5556b14:	8023883a 	mov	r17,r16
 5556b18:	1c07c83a 	sub	r3,r3,r16
 5556b1c:	1405883a 	add	r2,r2,r16
 5556b20:	90c00215 	stw	r3,8(r18)
 5556b24:	90800015 	stw	r2,0(r18)
 5556b28:	003fc406 	br	5556a3c <__sfvwrite_r+0x2d0>
 5556b2c:	a00d883a 	mov	r6,r20
 5556b30:	a021883a 	mov	r16,r20
 5556b34:	003f8106 	br	555693c <__sfvwrite_r+0x1d0>
 5556b38:	b80b883a 	mov	r5,r23
 5556b3c:	a00d883a 	mov	r6,r20
 5556b40:	55574cc0 	call	55574cc <memmove>
 5556b44:	90c00217 	ldw	r3,8(r18)
 5556b48:	90800017 	ldw	r2,0(r18)
 5556b4c:	a021883a 	mov	r16,r20
 5556b50:	1d07c83a 	sub	r3,r3,r20
 5556b54:	1505883a 	add	r2,r2,r20
 5556b58:	a023883a 	mov	r17,r20
 5556b5c:	a027883a 	mov	r19,r20
 5556b60:	90c00215 	stw	r3,8(r18)
 5556b64:	90800015 	stw	r2,0(r18)
 5556b68:	003f8006 	br	555696c <__sfvwrite_r+0x200>
 5556b6c:	b809883a 	mov	r4,r23
 5556b70:	01400284 	movi	r5,10
 5556b74:	980d883a 	mov	r6,r19
 5556b78:	55573480 	call	5557348 <memchr>
 5556b7c:	10001726 	beq	r2,zero,5556bdc <__sfvwrite_r+0x470>
 5556b80:	15c5c83a 	sub	r2,r2,r23
 5556b84:	15000044 	addi	r20,r2,1
 5556b88:	00800044 	movi	r2,1
 5556b8c:	d8800015 	stw	r2,0(sp)
 5556b90:	003f9806 	br	55569f4 <__sfvwrite_r+0x288>
 5556b94:	b80b883a 	mov	r5,r23
 5556b98:	800d883a 	mov	r6,r16
 5556b9c:	55574cc0 	call	55574cc <memmove>
 5556ba0:	90c00017 	ldw	r3,0(r18)
 5556ba4:	e009883a 	mov	r4,fp
 5556ba8:	900b883a 	mov	r5,r18
 5556bac:	1c07883a 	add	r3,r3,r16
 5556bb0:	90c00015 	stw	r3,0(r18)
 5556bb4:	8027883a 	mov	r19,r16
 5556bb8:	5557d4c0 	call	5557d4c <_fflush_r>
 5556bbc:	103f6b26 	beq	r2,zero,555696c <__sfvwrite_r+0x200>
 5556bc0:	003f7f06 	br	55569c0 <__sfvwrite_r+0x254>
 5556bc4:	400b883a 	mov	r5,r8
 5556bc8:	e009883a 	mov	r4,fp
 5556bcc:	55575ac0 	call	55575ac <_realloc_r>
 5556bd0:	103f7626 	beq	r2,zero,55569ac <__sfvwrite_r+0x240>
 5556bd4:	1023883a 	mov	r17,r2
 5556bd8:	003f5006 	br	555691c <__sfvwrite_r+0x1b0>
 5556bdc:	00c00044 	movi	r3,1
 5556be0:	9d000044 	addi	r20,r19,1
 5556be4:	d8c00015 	stw	r3,0(sp)
 5556be8:	003f8206 	br	55569f4 <__sfvwrite_r+0x288>
 5556bec:	9080030b 	ldhu	r2,12(r18)
 5556bf0:	00c00244 	movi	r3,9
 5556bf4:	013fffc4 	movi	r4,-1
 5556bf8:	10801014 	ori	r2,r2,64
 5556bfc:	9080030d 	sth	r2,12(r18)
 5556c00:	e0c00015 	stw	r3,0(fp)
 5556c04:	003f0606 	br	5556820 <__sfvwrite_r+0xb4>

05556c08 <_malloc_r>:
 5556c08:	defff604 	addi	sp,sp,-40
 5556c0c:	28c002c4 	addi	r3,r5,11
 5556c10:	00800584 	movi	r2,22
 5556c14:	dc800215 	stw	r18,8(sp)
 5556c18:	dfc00915 	stw	ra,36(sp)
 5556c1c:	df000815 	stw	fp,32(sp)
 5556c20:	ddc00715 	stw	r23,28(sp)
 5556c24:	dd800615 	stw	r22,24(sp)
 5556c28:	dd400515 	stw	r21,20(sp)
 5556c2c:	dd000415 	stw	r20,16(sp)
 5556c30:	dcc00315 	stw	r19,12(sp)
 5556c34:	dc400115 	stw	r17,4(sp)
 5556c38:	dc000015 	stw	r16,0(sp)
 5556c3c:	2025883a 	mov	r18,r4
 5556c40:	10c01236 	bltu	r2,r3,5556c8c <_malloc_r+0x84>
 5556c44:	04400404 	movi	r17,16
 5556c48:	8940142e 	bgeu	r17,r5,5556c9c <_malloc_r+0x94>
 5556c4c:	00800304 	movi	r2,12
 5556c50:	0007883a 	mov	r3,zero
 5556c54:	90800015 	stw	r2,0(r18)
 5556c58:	1805883a 	mov	r2,r3
 5556c5c:	dfc00917 	ldw	ra,36(sp)
 5556c60:	df000817 	ldw	fp,32(sp)
 5556c64:	ddc00717 	ldw	r23,28(sp)
 5556c68:	dd800617 	ldw	r22,24(sp)
 5556c6c:	dd400517 	ldw	r21,20(sp)
 5556c70:	dd000417 	ldw	r20,16(sp)
 5556c74:	dcc00317 	ldw	r19,12(sp)
 5556c78:	dc800217 	ldw	r18,8(sp)
 5556c7c:	dc400117 	ldw	r17,4(sp)
 5556c80:	dc000017 	ldw	r16,0(sp)
 5556c84:	dec00a04 	addi	sp,sp,40
 5556c88:	f800283a 	ret
 5556c8c:	00bffe04 	movi	r2,-8
 5556c90:	18a2703a 	and	r17,r3,r2
 5556c94:	883fed16 	blt	r17,zero,5556c4c <_malloc_r+0x44>
 5556c98:	897fec36 	bltu	r17,r5,5556c4c <_malloc_r+0x44>
 5556c9c:	9009883a 	mov	r4,r18
 5556ca0:	55595d80 	call	55595d8 <__malloc_lock>
 5556ca4:	00807dc4 	movi	r2,503
 5556ca8:	14402b2e 	bgeu	r2,r17,5556d58 <_malloc_r+0x150>
 5556cac:	8806d27a 	srli	r3,r17,9
 5556cb0:	18003f1e 	bne	r3,zero,5556db0 <_malloc_r+0x1a8>
 5556cb4:	880cd0fa 	srli	r6,r17,3
 5556cb8:	300490fa 	slli	r2,r6,3
 5556cbc:	02c155b4 	movhi	r11,1366
 5556cc0:	5af2df04 	addi	r11,r11,-13444
 5556cc4:	12cb883a 	add	r5,r2,r11
 5556cc8:	2c000317 	ldw	r16,12(r5)
 5556ccc:	580f883a 	mov	r7,r11
 5556cd0:	2c00041e 	bne	r5,r16,5556ce4 <_malloc_r+0xdc>
 5556cd4:	00000a06 	br	5556d00 <_malloc_r+0xf8>
 5556cd8:	1800860e 	bge	r3,zero,5556ef4 <_malloc_r+0x2ec>
 5556cdc:	84000317 	ldw	r16,12(r16)
 5556ce0:	2c000726 	beq	r5,r16,5556d00 <_malloc_r+0xf8>
 5556ce4:	80800117 	ldw	r2,4(r16)
 5556ce8:	00ffff04 	movi	r3,-4
 5556cec:	10c8703a 	and	r4,r2,r3
 5556cf0:	2447c83a 	sub	r3,r4,r17
 5556cf4:	008003c4 	movi	r2,15
 5556cf8:	10fff70e 	bge	r2,r3,5556cd8 <_malloc_r+0xd0>
 5556cfc:	31bfffc4 	addi	r6,r6,-1
 5556d00:	32400044 	addi	r9,r6,1
 5556d04:	028155b4 	movhi	r10,1366
 5556d08:	52b2e104 	addi	r10,r10,-13436
 5556d0c:	54000217 	ldw	r16,8(r10)
 5556d10:	8280a026 	beq	r16,r10,5556f94 <_malloc_r+0x38c>
 5556d14:	80800117 	ldw	r2,4(r16)
 5556d18:	00ffff04 	movi	r3,-4
 5556d1c:	10ca703a 	and	r5,r2,r3
 5556d20:	2c4dc83a 	sub	r6,r5,r17
 5556d24:	008003c4 	movi	r2,15
 5556d28:	11808316 	blt	r2,r6,5556f38 <_malloc_r+0x330>
 5556d2c:	52800315 	stw	r10,12(r10)
 5556d30:	52800215 	stw	r10,8(r10)
 5556d34:	30002916 	blt	r6,zero,5556ddc <_malloc_r+0x1d4>
 5556d38:	8147883a 	add	r3,r16,r5
 5556d3c:	18800117 	ldw	r2,4(r3)
 5556d40:	9009883a 	mov	r4,r18
 5556d44:	10800054 	ori	r2,r2,1
 5556d48:	18800115 	stw	r2,4(r3)
 5556d4c:	55595f80 	call	55595f8 <__malloc_unlock>
 5556d50:	80c00204 	addi	r3,r16,8
 5556d54:	003fc006 	br	5556c58 <_malloc_r+0x50>
 5556d58:	02c155b4 	movhi	r11,1366
 5556d5c:	5af2df04 	addi	r11,r11,-13444
 5556d60:	8ac5883a 	add	r2,r17,r11
 5556d64:	14000317 	ldw	r16,12(r2)
 5556d68:	580f883a 	mov	r7,r11
 5556d6c:	8806d0fa 	srli	r3,r17,3
 5556d70:	14006c26 	beq	r2,r16,5556f24 <_malloc_r+0x31c>
 5556d74:	80c00117 	ldw	r3,4(r16)
 5556d78:	00bfff04 	movi	r2,-4
 5556d7c:	81800317 	ldw	r6,12(r16)
 5556d80:	1886703a 	and	r3,r3,r2
 5556d84:	80c7883a 	add	r3,r16,r3
 5556d88:	18800117 	ldw	r2,4(r3)
 5556d8c:	81400217 	ldw	r5,8(r16)
 5556d90:	9009883a 	mov	r4,r18
 5556d94:	10800054 	ori	r2,r2,1
 5556d98:	18800115 	stw	r2,4(r3)
 5556d9c:	31400215 	stw	r5,8(r6)
 5556da0:	29800315 	stw	r6,12(r5)
 5556da4:	55595f80 	call	55595f8 <__malloc_unlock>
 5556da8:	80c00204 	addi	r3,r16,8
 5556dac:	003faa06 	br	5556c58 <_malloc_r+0x50>
 5556db0:	00800104 	movi	r2,4
 5556db4:	10c0052e 	bgeu	r2,r3,5556dcc <_malloc_r+0x1c4>
 5556db8:	00800504 	movi	r2,20
 5556dbc:	10c07836 	bltu	r2,r3,5556fa0 <_malloc_r+0x398>
 5556dc0:	198016c4 	addi	r6,r3,91
 5556dc4:	300490fa 	slli	r2,r6,3
 5556dc8:	003fbc06 	br	5556cbc <_malloc_r+0xb4>
 5556dcc:	8804d1ba 	srli	r2,r17,6
 5556dd0:	11800e04 	addi	r6,r2,56
 5556dd4:	300490fa 	slli	r2,r6,3
 5556dd8:	003fb806 	br	5556cbc <_malloc_r+0xb4>
 5556ddc:	00807fc4 	movi	r2,511
 5556de0:	1140bb36 	bltu	r2,r5,55570d0 <_malloc_r+0x4c8>
 5556de4:	2806d0fa 	srli	r3,r5,3
 5556de8:	573ffe04 	addi	fp,r10,-8
 5556dec:	00800044 	movi	r2,1
 5556df0:	180890fa 	slli	r4,r3,3
 5556df4:	1807d0ba 	srai	r3,r3,2
 5556df8:	e1c00117 	ldw	r7,4(fp)
 5556dfc:	5909883a 	add	r4,r11,r4
 5556e00:	21400217 	ldw	r5,8(r4)
 5556e04:	10c4983a 	sll	r2,r2,r3
 5556e08:	81000315 	stw	r4,12(r16)
 5556e0c:	81400215 	stw	r5,8(r16)
 5556e10:	388eb03a 	or	r7,r7,r2
 5556e14:	2c000315 	stw	r16,12(r5)
 5556e18:	24000215 	stw	r16,8(r4)
 5556e1c:	e1c00115 	stw	r7,4(fp)
 5556e20:	4807883a 	mov	r3,r9
 5556e24:	4800cd16 	blt	r9,zero,555715c <_malloc_r+0x554>
 5556e28:	1807d0ba 	srai	r3,r3,2
 5556e2c:	00800044 	movi	r2,1
 5556e30:	10c8983a 	sll	r4,r2,r3
 5556e34:	39004436 	bltu	r7,r4,5556f48 <_malloc_r+0x340>
 5556e38:	21c4703a 	and	r2,r4,r7
 5556e3c:	10000a1e 	bne	r2,zero,5556e68 <_malloc_r+0x260>
 5556e40:	2109883a 	add	r4,r4,r4
 5556e44:	00bfff04 	movi	r2,-4
 5556e48:	4884703a 	and	r2,r9,r2
 5556e4c:	3906703a 	and	r3,r7,r4
 5556e50:	12400104 	addi	r9,r2,4
 5556e54:	1800041e 	bne	r3,zero,5556e68 <_malloc_r+0x260>
 5556e58:	2109883a 	add	r4,r4,r4
 5556e5c:	3904703a 	and	r2,r7,r4
 5556e60:	4a400104 	addi	r9,r9,4
 5556e64:	103ffc26 	beq	r2,zero,5556e58 <_malloc_r+0x250>
 5556e68:	480490fa 	slli	r2,r9,3
 5556e6c:	4819883a 	mov	r12,r9
 5556e70:	023fff04 	movi	r8,-4
 5556e74:	589b883a 	add	r13,r11,r2
 5556e78:	6807883a 	mov	r3,r13
 5556e7c:	014003c4 	movi	r5,15
 5556e80:	1c000317 	ldw	r16,12(r3)
 5556e84:	1c00041e 	bne	r3,r16,5556e98 <_malloc_r+0x290>
 5556e88:	0000a706 	br	5557128 <_malloc_r+0x520>
 5556e8c:	3000ab0e 	bge	r6,zero,555713c <_malloc_r+0x534>
 5556e90:	84000317 	ldw	r16,12(r16)
 5556e94:	1c00a426 	beq	r3,r16,5557128 <_malloc_r+0x520>
 5556e98:	80800117 	ldw	r2,4(r16)
 5556e9c:	1204703a 	and	r2,r2,r8
 5556ea0:	144dc83a 	sub	r6,r2,r17
 5556ea4:	29bff90e 	bge	r5,r6,5556e8c <_malloc_r+0x284>
 5556ea8:	81000317 	ldw	r4,12(r16)
 5556eac:	80c00217 	ldw	r3,8(r16)
 5556eb0:	89400054 	ori	r5,r17,1
 5556eb4:	8445883a 	add	r2,r16,r17
 5556eb8:	20c00215 	stw	r3,8(r4)
 5556ebc:	19000315 	stw	r4,12(r3)
 5556ec0:	81400115 	stw	r5,4(r16)
 5556ec4:	1187883a 	add	r3,r2,r6
 5556ec8:	31000054 	ori	r4,r6,1
 5556ecc:	50800315 	stw	r2,12(r10)
 5556ed0:	50800215 	stw	r2,8(r10)
 5556ed4:	19800015 	stw	r6,0(r3)
 5556ed8:	11000115 	stw	r4,4(r2)
 5556edc:	12800215 	stw	r10,8(r2)
 5556ee0:	12800315 	stw	r10,12(r2)
 5556ee4:	9009883a 	mov	r4,r18
 5556ee8:	55595f80 	call	55595f8 <__malloc_unlock>
 5556eec:	80c00204 	addi	r3,r16,8
 5556ef0:	003f5906 	br	5556c58 <_malloc_r+0x50>
 5556ef4:	8109883a 	add	r4,r16,r4
 5556ef8:	20800117 	ldw	r2,4(r4)
 5556efc:	80c00217 	ldw	r3,8(r16)
 5556f00:	81400317 	ldw	r5,12(r16)
 5556f04:	10800054 	ori	r2,r2,1
 5556f08:	20800115 	stw	r2,4(r4)
 5556f0c:	28c00215 	stw	r3,8(r5)
 5556f10:	19400315 	stw	r5,12(r3)
 5556f14:	9009883a 	mov	r4,r18
 5556f18:	55595f80 	call	55595f8 <__malloc_unlock>
 5556f1c:	80c00204 	addi	r3,r16,8
 5556f20:	003f4d06 	br	5556c58 <_malloc_r+0x50>
 5556f24:	80800204 	addi	r2,r16,8
 5556f28:	14000317 	ldw	r16,12(r2)
 5556f2c:	143f911e 	bne	r2,r16,5556d74 <_malloc_r+0x16c>
 5556f30:	1a400084 	addi	r9,r3,2
 5556f34:	003f7306 	br	5556d04 <_malloc_r+0xfc>
 5556f38:	88c00054 	ori	r3,r17,1
 5556f3c:	8445883a 	add	r2,r16,r17
 5556f40:	80c00115 	stw	r3,4(r16)
 5556f44:	003fdf06 	br	5556ec4 <_malloc_r+0x2bc>
 5556f48:	e4000217 	ldw	r16,8(fp)
 5556f4c:	00bfff04 	movi	r2,-4
 5556f50:	80c00117 	ldw	r3,4(r16)
 5556f54:	802d883a 	mov	r22,r16
 5556f58:	18aa703a 	and	r21,r3,r2
 5556f5c:	ac401636 	bltu	r21,r17,5556fb8 <_malloc_r+0x3b0>
 5556f60:	ac49c83a 	sub	r4,r21,r17
 5556f64:	008003c4 	movi	r2,15
 5556f68:	1100130e 	bge	r2,r4,5556fb8 <_malloc_r+0x3b0>
 5556f6c:	88800054 	ori	r2,r17,1
 5556f70:	8447883a 	add	r3,r16,r17
 5556f74:	80800115 	stw	r2,4(r16)
 5556f78:	20800054 	ori	r2,r4,1
 5556f7c:	18800115 	stw	r2,4(r3)
 5556f80:	e0c00215 	stw	r3,8(fp)
 5556f84:	9009883a 	mov	r4,r18
 5556f88:	55595f80 	call	55595f8 <__malloc_unlock>
 5556f8c:	80c00204 	addi	r3,r16,8
 5556f90:	003f3106 	br	5556c58 <_malloc_r+0x50>
 5556f94:	39c00117 	ldw	r7,4(r7)
 5556f98:	573ffe04 	addi	fp,r10,-8
 5556f9c:	003fa006 	br	5556e20 <_malloc_r+0x218>
 5556fa0:	00801504 	movi	r2,84
 5556fa4:	10c06736 	bltu	r2,r3,5557144 <_malloc_r+0x53c>
 5556fa8:	8804d33a 	srli	r2,r17,12
 5556fac:	11801b84 	addi	r6,r2,110
 5556fb0:	300490fa 	slli	r2,r6,3
 5556fb4:	003f4106 	br	5556cbc <_malloc_r+0xb4>
 5556fb8:	d0a8a817 	ldw	r2,-23904(gp)
 5556fbc:	d0e00317 	ldw	r3,-32756(gp)
 5556fc0:	053fffc4 	movi	r20,-1
 5556fc4:	10800404 	addi	r2,r2,16
 5556fc8:	88a7883a 	add	r19,r17,r2
 5556fcc:	1d000326 	beq	r3,r20,5556fdc <_malloc_r+0x3d4>
 5556fd0:	98c3ffc4 	addi	r3,r19,4095
 5556fd4:	00bc0004 	movi	r2,-4096
 5556fd8:	18a6703a 	and	r19,r3,r2
 5556fdc:	9009883a 	mov	r4,r18
 5556fe0:	980b883a 	mov	r5,r19
 5556fe4:	5557ba00 	call	5557ba0 <_sbrk_r>
 5556fe8:	1009883a 	mov	r4,r2
 5556fec:	15000426 	beq	r2,r20,5557000 <_malloc_r+0x3f8>
 5556ff0:	854b883a 	add	r5,r16,r21
 5556ff4:	1029883a 	mov	r20,r2
 5556ff8:	11405a2e 	bgeu	r2,r5,5557164 <_malloc_r+0x55c>
 5556ffc:	87000c26 	beq	r16,fp,5557030 <_malloc_r+0x428>
 5557000:	e4000217 	ldw	r16,8(fp)
 5557004:	80c00117 	ldw	r3,4(r16)
 5557008:	00bfff04 	movi	r2,-4
 555700c:	1884703a 	and	r2,r3,r2
 5557010:	14400336 	bltu	r2,r17,5557020 <_malloc_r+0x418>
 5557014:	1449c83a 	sub	r4,r2,r17
 5557018:	008003c4 	movi	r2,15
 555701c:	113fd316 	blt	r2,r4,5556f6c <_malloc_r+0x364>
 5557020:	9009883a 	mov	r4,r18
 5557024:	55595f80 	call	55595f8 <__malloc_unlock>
 5557028:	0007883a 	mov	r3,zero
 555702c:	003f0a06 	br	5556c58 <_malloc_r+0x50>
 5557030:	05c155b4 	movhi	r23,1366
 5557034:	bdc11504 	addi	r23,r23,1108
 5557038:	b8800017 	ldw	r2,0(r23)
 555703c:	988d883a 	add	r6,r19,r2
 5557040:	b9800015 	stw	r6,0(r23)
 5557044:	d0e00317 	ldw	r3,-32756(gp)
 5557048:	00bfffc4 	movi	r2,-1
 555704c:	18808e26 	beq	r3,r2,5557288 <_malloc_r+0x680>
 5557050:	2145c83a 	sub	r2,r4,r5
 5557054:	3085883a 	add	r2,r6,r2
 5557058:	b8800015 	stw	r2,0(r23)
 555705c:	20c001cc 	andi	r3,r4,7
 5557060:	18005f1e 	bne	r3,zero,55571e0 <_malloc_r+0x5d8>
 5557064:	000b883a 	mov	r5,zero
 5557068:	a4c5883a 	add	r2,r20,r19
 555706c:	1083ffcc 	andi	r2,r2,4095
 5557070:	00c40004 	movi	r3,4096
 5557074:	1887c83a 	sub	r3,r3,r2
 5557078:	28e7883a 	add	r19,r5,r3
 555707c:	9009883a 	mov	r4,r18
 5557080:	980b883a 	mov	r5,r19
 5557084:	5557ba00 	call	5557ba0 <_sbrk_r>
 5557088:	1007883a 	mov	r3,r2
 555708c:	00bfffc4 	movi	r2,-1
 5557090:	18807a26 	beq	r3,r2,555727c <_malloc_r+0x674>
 5557094:	1d05c83a 	sub	r2,r3,r20
 5557098:	9885883a 	add	r2,r19,r2
 555709c:	10c00054 	ori	r3,r2,1
 55570a0:	b8800017 	ldw	r2,0(r23)
 55570a4:	a021883a 	mov	r16,r20
 55570a8:	a0c00115 	stw	r3,4(r20)
 55570ac:	9885883a 	add	r2,r19,r2
 55570b0:	b8800015 	stw	r2,0(r23)
 55570b4:	e5000215 	stw	r20,8(fp)
 55570b8:	b7003626 	beq	r22,fp,5557194 <_malloc_r+0x58c>
 55570bc:	018003c4 	movi	r6,15
 55570c0:	35404b36 	bltu	r6,r21,55571f0 <_malloc_r+0x5e8>
 55570c4:	00800044 	movi	r2,1
 55570c8:	a0800115 	stw	r2,4(r20)
 55570cc:	003fcd06 	br	5557004 <_malloc_r+0x3fc>
 55570d0:	2808d27a 	srli	r4,r5,9
 55570d4:	2000371e 	bne	r4,zero,55571b4 <_malloc_r+0x5ac>
 55570d8:	2808d0fa 	srli	r4,r5,3
 55570dc:	200690fa 	slli	r3,r4,3
 55570e0:	1ad1883a 	add	r8,r3,r11
 55570e4:	41800217 	ldw	r6,8(r8)
 55570e8:	41805b26 	beq	r8,r6,5557258 <_malloc_r+0x650>
 55570ec:	30800117 	ldw	r2,4(r6)
 55570f0:	00ffff04 	movi	r3,-4
 55570f4:	10c4703a 	and	r2,r2,r3
 55570f8:	2880022e 	bgeu	r5,r2,5557104 <_malloc_r+0x4fc>
 55570fc:	31800217 	ldw	r6,8(r6)
 5557100:	41bffa1e 	bne	r8,r6,55570ec <_malloc_r+0x4e4>
 5557104:	32000317 	ldw	r8,12(r6)
 5557108:	39c00117 	ldw	r7,4(r7)
 555710c:	82000315 	stw	r8,12(r16)
 5557110:	81800215 	stw	r6,8(r16)
 5557114:	070155b4 	movhi	fp,1366
 5557118:	e732df04 	addi	fp,fp,-13444
 555711c:	34000315 	stw	r16,12(r6)
 5557120:	44000215 	stw	r16,8(r8)
 5557124:	003f3e06 	br	5556e20 <_malloc_r+0x218>
 5557128:	63000044 	addi	r12,r12,1
 555712c:	608000cc 	andi	r2,r12,3
 5557130:	10005d26 	beq	r2,zero,55572a8 <_malloc_r+0x6a0>
 5557134:	18c00204 	addi	r3,r3,8
 5557138:	003f5106 	br	5556e80 <_malloc_r+0x278>
 555713c:	8089883a 	add	r4,r16,r2
 5557140:	003f6d06 	br	5556ef8 <_malloc_r+0x2f0>
 5557144:	00805504 	movi	r2,340
 5557148:	10c02036 	bltu	r2,r3,55571cc <_malloc_r+0x5c4>
 555714c:	8804d3fa 	srli	r2,r17,15
 5557150:	11801dc4 	addi	r6,r2,119
 5557154:	300490fa 	slli	r2,r6,3
 5557158:	003ed806 	br	5556cbc <_malloc_r+0xb4>
 555715c:	48c000c4 	addi	r3,r9,3
 5557160:	003f3106 	br	5556e28 <_malloc_r+0x220>
 5557164:	05c155b4 	movhi	r23,1366
 5557168:	bdc11504 	addi	r23,r23,1108
 555716c:	b8800017 	ldw	r2,0(r23)
 5557170:	988d883a 	add	r6,r19,r2
 5557174:	b9800015 	stw	r6,0(r23)
 5557178:	293fb21e 	bne	r5,r4,5557044 <_malloc_r+0x43c>
 555717c:	2083ffcc 	andi	r2,r4,4095
 5557180:	103fb01e 	bne	r2,zero,5557044 <_malloc_r+0x43c>
 5557184:	e4000217 	ldw	r16,8(fp)
 5557188:	9d45883a 	add	r2,r19,r21
 555718c:	10800054 	ori	r2,r2,1
 5557190:	80800115 	stw	r2,4(r16)
 5557194:	b8c00017 	ldw	r3,0(r23)
 5557198:	d0a8a917 	ldw	r2,-23900(gp)
 555719c:	10c0012e 	bgeu	r2,r3,55571a4 <_malloc_r+0x59c>
 55571a0:	d0e8a915 	stw	r3,-23900(gp)
 55571a4:	d0a8aa17 	ldw	r2,-23896(gp)
 55571a8:	10ff962e 	bgeu	r2,r3,5557004 <_malloc_r+0x3fc>
 55571ac:	d0e8aa15 	stw	r3,-23896(gp)
 55571b0:	003f9406 	br	5557004 <_malloc_r+0x3fc>
 55571b4:	00800104 	movi	r2,4
 55571b8:	11001e36 	bltu	r2,r4,5557234 <_malloc_r+0x62c>
 55571bc:	2804d1ba 	srli	r2,r5,6
 55571c0:	11000e04 	addi	r4,r2,56
 55571c4:	200690fa 	slli	r3,r4,3
 55571c8:	003fc506 	br	55570e0 <_malloc_r+0x4d8>
 55571cc:	00815504 	movi	r2,1364
 55571d0:	10c01d2e 	bgeu	r2,r3,5557248 <_malloc_r+0x640>
 55571d4:	01801f84 	movi	r6,126
 55571d8:	0080fc04 	movi	r2,1008
 55571dc:	003eb706 	br	5556cbc <_malloc_r+0xb4>
 55571e0:	00800204 	movi	r2,8
 55571e4:	10cbc83a 	sub	r5,r2,r3
 55571e8:	2169883a 	add	r20,r4,r5
 55571ec:	003f9e06 	br	5557068 <_malloc_r+0x460>
 55571f0:	00bffe04 	movi	r2,-8
 55571f4:	a93ffd04 	addi	r4,r21,-12
 55571f8:	2088703a 	and	r4,r4,r2
 55571fc:	b10b883a 	add	r5,r22,r4
 5557200:	00c00144 	movi	r3,5
 5557204:	28c00215 	stw	r3,8(r5)
 5557208:	28c00115 	stw	r3,4(r5)
 555720c:	b0800117 	ldw	r2,4(r22)
 5557210:	1080004c 	andi	r2,r2,1
 5557214:	2084b03a 	or	r2,r4,r2
 5557218:	b0800115 	stw	r2,4(r22)
 555721c:	313fdd2e 	bgeu	r6,r4,5557194 <_malloc_r+0x58c>
 5557220:	b1400204 	addi	r5,r22,8
 5557224:	9009883a 	mov	r4,r18
 5557228:	55583680 	call	5558368 <_free_r>
 555722c:	e4000217 	ldw	r16,8(fp)
 5557230:	003fd806 	br	5557194 <_malloc_r+0x58c>
 5557234:	00800504 	movi	r2,20
 5557238:	11001536 	bltu	r2,r4,5557290 <_malloc_r+0x688>
 555723c:	210016c4 	addi	r4,r4,91
 5557240:	200690fa 	slli	r3,r4,3
 5557244:	003fa606 	br	55570e0 <_malloc_r+0x4d8>
 5557248:	8804d4ba 	srli	r2,r17,18
 555724c:	11801f04 	addi	r6,r2,124
 5557250:	300490fa 	slli	r2,r6,3
 5557254:	003e9906 	br	5556cbc <_malloc_r+0xb4>
 5557258:	2009d0ba 	srai	r4,r4,2
 555725c:	014155b4 	movhi	r5,1366
 5557260:	2972df04 	addi	r5,r5,-13444
 5557264:	00c00044 	movi	r3,1
 5557268:	28800117 	ldw	r2,4(r5)
 555726c:	1906983a 	sll	r3,r3,r4
 5557270:	10c4b03a 	or	r2,r2,r3
 5557274:	28800115 	stw	r2,4(r5)
 5557278:	003fa306 	br	5557108 <_malloc_r+0x500>
 555727c:	0027883a 	mov	r19,zero
 5557280:	00c00044 	movi	r3,1
 5557284:	003f8606 	br	55570a0 <_malloc_r+0x498>
 5557288:	d1200315 	stw	r4,-32756(gp)
 555728c:	003f7306 	br	555705c <_malloc_r+0x454>
 5557290:	00801504 	movi	r2,84
 5557294:	11001936 	bltu	r2,r4,55572fc <_malloc_r+0x6f4>
 5557298:	2804d33a 	srli	r2,r5,12
 555729c:	11001b84 	addi	r4,r2,110
 55572a0:	200690fa 	slli	r3,r4,3
 55572a4:	003f8e06 	br	55570e0 <_malloc_r+0x4d8>
 55572a8:	480b883a 	mov	r5,r9
 55572ac:	6807883a 	mov	r3,r13
 55572b0:	288000cc 	andi	r2,r5,3
 55572b4:	18fffe04 	addi	r3,r3,-8
 55572b8:	297fffc4 	addi	r5,r5,-1
 55572bc:	10001526 	beq	r2,zero,5557314 <_malloc_r+0x70c>
 55572c0:	18800217 	ldw	r2,8(r3)
 55572c4:	10fffa26 	beq	r2,r3,55572b0 <_malloc_r+0x6a8>
 55572c8:	2109883a 	add	r4,r4,r4
 55572cc:	393f1e36 	bltu	r7,r4,5556f48 <_malloc_r+0x340>
 55572d0:	203f1d26 	beq	r4,zero,5556f48 <_malloc_r+0x340>
 55572d4:	21c4703a 	and	r2,r4,r7
 55572d8:	10000226 	beq	r2,zero,55572e4 <_malloc_r+0x6dc>
 55572dc:	6013883a 	mov	r9,r12
 55572e0:	003ee106 	br	5556e68 <_malloc_r+0x260>
 55572e4:	2109883a 	add	r4,r4,r4
 55572e8:	3904703a 	and	r2,r7,r4
 55572ec:	63000104 	addi	r12,r12,4
 55572f0:	103ffc26 	beq	r2,zero,55572e4 <_malloc_r+0x6dc>
 55572f4:	6013883a 	mov	r9,r12
 55572f8:	003edb06 	br	5556e68 <_malloc_r+0x260>
 55572fc:	00805504 	movi	r2,340
 5557300:	11000836 	bltu	r2,r4,5557324 <_malloc_r+0x71c>
 5557304:	2804d3fa 	srli	r2,r5,15
 5557308:	11001dc4 	addi	r4,r2,119
 555730c:	200690fa 	slli	r3,r4,3
 5557310:	003f7306 	br	55570e0 <_malloc_r+0x4d8>
 5557314:	0104303a 	nor	r2,zero,r4
 5557318:	388e703a 	and	r7,r7,r2
 555731c:	e1c00115 	stw	r7,4(fp)
 5557320:	003fe906 	br	55572c8 <_malloc_r+0x6c0>
 5557324:	00815504 	movi	r2,1364
 5557328:	1100032e 	bgeu	r2,r4,5557338 <_malloc_r+0x730>
 555732c:	01001f84 	movi	r4,126
 5557330:	00c0fc04 	movi	r3,1008
 5557334:	003f6a06 	br	55570e0 <_malloc_r+0x4d8>
 5557338:	2804d4ba 	srli	r2,r5,18
 555733c:	11001f04 	addi	r4,r2,124
 5557340:	200690fa 	slli	r3,r4,3
 5557344:	003f6606 	br	55570e0 <_malloc_r+0x4d8>

05557348 <memchr>:
 5557348:	008000c4 	movi	r2,3
 555734c:	29403fcc 	andi	r5,r5,255
 5557350:	2007883a 	mov	r3,r4
 5557354:	1180022e 	bgeu	r2,r6,5557360 <memchr+0x18>
 5557358:	2084703a 	and	r2,r4,r2
 555735c:	10000b26 	beq	r2,zero,555738c <memchr+0x44>
 5557360:	313fffc4 	addi	r4,r6,-1
 5557364:	3000051e 	bne	r6,zero,555737c <memchr+0x34>
 5557368:	00002c06 	br	555741c <memchr+0xd4>
 555736c:	213fffc4 	addi	r4,r4,-1
 5557370:	00bfffc4 	movi	r2,-1
 5557374:	18c00044 	addi	r3,r3,1
 5557378:	20802826 	beq	r4,r2,555741c <memchr+0xd4>
 555737c:	18800003 	ldbu	r2,0(r3)
 5557380:	28bffa1e 	bne	r5,r2,555736c <memchr+0x24>
 5557384:	1805883a 	mov	r2,r3
 5557388:	f800283a 	ret
 555738c:	0011883a 	mov	r8,zero
 5557390:	0007883a 	mov	r3,zero
 5557394:	01c00104 	movi	r7,4
 5557398:	4004923a 	slli	r2,r8,8
 555739c:	18c00044 	addi	r3,r3,1
 55573a0:	1151883a 	add	r8,r2,r5
 55573a4:	19fffc1e 	bne	r3,r7,5557398 <memchr+0x50>
 55573a8:	02bfbff4 	movhi	r10,65279
 55573ac:	52bfbfc4 	addi	r10,r10,-257
 55573b0:	02602074 	movhi	r9,32897
 55573b4:	4a602004 	addi	r9,r9,-32640
 55573b8:	02c000c4 	movi	r11,3
 55573bc:	20800017 	ldw	r2,0(r4)
 55573c0:	31bfff04 	addi	r6,r6,-4
 55573c4:	200f883a 	mov	r7,r4
 55573c8:	1204f03a 	xor	r2,r2,r8
 55573cc:	1287883a 	add	r3,r2,r10
 55573d0:	1a46703a 	and	r3,r3,r9
 55573d4:	0084303a 	nor	r2,zero,r2
 55573d8:	10c4703a 	and	r2,r2,r3
 55573dc:	10000b26 	beq	r2,zero,555740c <memchr+0xc4>
 55573e0:	20800003 	ldbu	r2,0(r4)
 55573e4:	28800f26 	beq	r5,r2,5557424 <memchr+0xdc>
 55573e8:	20800043 	ldbu	r2,1(r4)
 55573ec:	21c00044 	addi	r7,r4,1
 55573f0:	28800c26 	beq	r5,r2,5557424 <memchr+0xdc>
 55573f4:	20800083 	ldbu	r2,2(r4)
 55573f8:	21c00084 	addi	r7,r4,2
 55573fc:	28800926 	beq	r5,r2,5557424 <memchr+0xdc>
 5557400:	208000c3 	ldbu	r2,3(r4)
 5557404:	21c000c4 	addi	r7,r4,3
 5557408:	28800626 	beq	r5,r2,5557424 <memchr+0xdc>
 555740c:	21000104 	addi	r4,r4,4
 5557410:	59bfea36 	bltu	r11,r6,55573bc <memchr+0x74>
 5557414:	2007883a 	mov	r3,r4
 5557418:	003fd106 	br	5557360 <memchr+0x18>
 555741c:	0005883a 	mov	r2,zero
 5557420:	f800283a 	ret
 5557424:	3805883a 	mov	r2,r7
 5557428:	f800283a 	ret

0555742c <memcpy>:
 555742c:	01c003c4 	movi	r7,15
 5557430:	2007883a 	mov	r3,r4
 5557434:	3980032e 	bgeu	r7,r6,5557444 <memcpy+0x18>
 5557438:	2904b03a 	or	r2,r5,r4
 555743c:	108000cc 	andi	r2,r2,3
 5557440:	10000926 	beq	r2,zero,5557468 <memcpy+0x3c>
 5557444:	30000626 	beq	r6,zero,5557460 <memcpy+0x34>
 5557448:	30cd883a 	add	r6,r6,r3
 555744c:	28800003 	ldbu	r2,0(r5)
 5557450:	29400044 	addi	r5,r5,1
 5557454:	18800005 	stb	r2,0(r3)
 5557458:	18c00044 	addi	r3,r3,1
 555745c:	30fffb1e 	bne	r6,r3,555744c <memcpy+0x20>
 5557460:	2005883a 	mov	r2,r4
 5557464:	f800283a 	ret
 5557468:	3811883a 	mov	r8,r7
 555746c:	200f883a 	mov	r7,r4
 5557470:	28c00017 	ldw	r3,0(r5)
 5557474:	31bffc04 	addi	r6,r6,-16
 5557478:	38c00015 	stw	r3,0(r7)
 555747c:	28800117 	ldw	r2,4(r5)
 5557480:	38800115 	stw	r2,4(r7)
 5557484:	28c00217 	ldw	r3,8(r5)
 5557488:	38c00215 	stw	r3,8(r7)
 555748c:	28800317 	ldw	r2,12(r5)
 5557490:	29400404 	addi	r5,r5,16
 5557494:	38800315 	stw	r2,12(r7)
 5557498:	39c00404 	addi	r7,r7,16
 555749c:	41bff436 	bltu	r8,r6,5557470 <memcpy+0x44>
 55574a0:	008000c4 	movi	r2,3
 55574a4:	1180072e 	bgeu	r2,r6,55574c4 <memcpy+0x98>
 55574a8:	1007883a 	mov	r3,r2
 55574ac:	28800017 	ldw	r2,0(r5)
 55574b0:	31bfff04 	addi	r6,r6,-4
 55574b4:	29400104 	addi	r5,r5,4
 55574b8:	38800015 	stw	r2,0(r7)
 55574bc:	39c00104 	addi	r7,r7,4
 55574c0:	19bffa36 	bltu	r3,r6,55574ac <memcpy+0x80>
 55574c4:	3807883a 	mov	r3,r7
 55574c8:	003fde06 	br	5557444 <memcpy+0x18>

055574cc <memmove>:
 55574cc:	2807883a 	mov	r3,r5
 55574d0:	2011883a 	mov	r8,r4
 55574d4:	29000c2e 	bgeu	r5,r4,5557508 <memmove+0x3c>
 55574d8:	298f883a 	add	r7,r5,r6
 55574dc:	21c00a2e 	bgeu	r4,r7,5557508 <memmove+0x3c>
 55574e0:	30000726 	beq	r6,zero,5557500 <memmove+0x34>
 55574e4:	2187883a 	add	r3,r4,r6
 55574e8:	198dc83a 	sub	r6,r3,r6
 55574ec:	39ffffc4 	addi	r7,r7,-1
 55574f0:	38800003 	ldbu	r2,0(r7)
 55574f4:	18ffffc4 	addi	r3,r3,-1
 55574f8:	18800005 	stb	r2,0(r3)
 55574fc:	19bffb1e 	bne	r3,r6,55574ec <memmove+0x20>
 5557500:	2005883a 	mov	r2,r4
 5557504:	f800283a 	ret
 5557508:	01c003c4 	movi	r7,15
 555750c:	39800a36 	bltu	r7,r6,5557538 <memmove+0x6c>
 5557510:	303ffb26 	beq	r6,zero,5557500 <memmove+0x34>
 5557514:	400f883a 	mov	r7,r8
 5557518:	320d883a 	add	r6,r6,r8
 555751c:	28800003 	ldbu	r2,0(r5)
 5557520:	29400044 	addi	r5,r5,1
 5557524:	38800005 	stb	r2,0(r7)
 5557528:	39c00044 	addi	r7,r7,1
 555752c:	39bffb1e 	bne	r7,r6,555751c <memmove+0x50>
 5557530:	2005883a 	mov	r2,r4
 5557534:	f800283a 	ret
 5557538:	1904b03a 	or	r2,r3,r4
 555753c:	108000cc 	andi	r2,r2,3
 5557540:	103ff31e 	bne	r2,zero,5557510 <memmove+0x44>
 5557544:	3811883a 	mov	r8,r7
 5557548:	180b883a 	mov	r5,r3
 555754c:	200f883a 	mov	r7,r4
 5557550:	28c00017 	ldw	r3,0(r5)
 5557554:	31bffc04 	addi	r6,r6,-16
 5557558:	38c00015 	stw	r3,0(r7)
 555755c:	28800117 	ldw	r2,4(r5)
 5557560:	38800115 	stw	r2,4(r7)
 5557564:	28c00217 	ldw	r3,8(r5)
 5557568:	38c00215 	stw	r3,8(r7)
 555756c:	28800317 	ldw	r2,12(r5)
 5557570:	29400404 	addi	r5,r5,16
 5557574:	38800315 	stw	r2,12(r7)
 5557578:	39c00404 	addi	r7,r7,16
 555757c:	41bff436 	bltu	r8,r6,5557550 <memmove+0x84>
 5557580:	008000c4 	movi	r2,3
 5557584:	1180072e 	bgeu	r2,r6,55575a4 <memmove+0xd8>
 5557588:	1007883a 	mov	r3,r2
 555758c:	28800017 	ldw	r2,0(r5)
 5557590:	31bfff04 	addi	r6,r6,-4
 5557594:	29400104 	addi	r5,r5,4
 5557598:	38800015 	stw	r2,0(r7)
 555759c:	39c00104 	addi	r7,r7,4
 55575a0:	19bffa36 	bltu	r3,r6,555758c <memmove+0xc0>
 55575a4:	3811883a 	mov	r8,r7
 55575a8:	003fd906 	br	5557510 <memmove+0x44>

055575ac <_realloc_r>:
 55575ac:	defff404 	addi	sp,sp,-48
 55575b0:	dd800815 	stw	r22,32(sp)
 55575b4:	dc800415 	stw	r18,16(sp)
 55575b8:	dc400315 	stw	r17,12(sp)
 55575bc:	dfc00b15 	stw	ra,44(sp)
 55575c0:	df000a15 	stw	fp,40(sp)
 55575c4:	ddc00915 	stw	r23,36(sp)
 55575c8:	dd400715 	stw	r21,28(sp)
 55575cc:	dd000615 	stw	r20,24(sp)
 55575d0:	dcc00515 	stw	r19,20(sp)
 55575d4:	dc000215 	stw	r16,8(sp)
 55575d8:	2825883a 	mov	r18,r5
 55575dc:	3023883a 	mov	r17,r6
 55575e0:	202d883a 	mov	r22,r4
 55575e4:	2800c926 	beq	r5,zero,555790c <_realloc_r+0x360>
 55575e8:	55595d80 	call	55595d8 <__malloc_lock>
 55575ec:	943ffe04 	addi	r16,r18,-8
 55575f0:	88c002c4 	addi	r3,r17,11
 55575f4:	00800584 	movi	r2,22
 55575f8:	82000117 	ldw	r8,4(r16)
 55575fc:	10c01b2e 	bgeu	r2,r3,555766c <_realloc_r+0xc0>
 5557600:	00bffe04 	movi	r2,-8
 5557604:	188e703a 	and	r7,r3,r2
 5557608:	3839883a 	mov	fp,r7
 555760c:	38001a16 	blt	r7,zero,5557678 <_realloc_r+0xcc>
 5557610:	e4401936 	bltu	fp,r17,5557678 <_realloc_r+0xcc>
 5557614:	013fff04 	movi	r4,-4
 5557618:	4126703a 	and	r19,r8,r4
 555761c:	99c02616 	blt	r19,r7,55576b8 <_realloc_r+0x10c>
 5557620:	802b883a 	mov	r21,r16
 5557624:	9829883a 	mov	r20,r19
 5557628:	84000204 	addi	r16,r16,8
 555762c:	a80f883a 	mov	r7,r21
 5557630:	a70dc83a 	sub	r6,r20,fp
 5557634:	008003c4 	movi	r2,15
 5557638:	1180c136 	bltu	r2,r6,5557940 <_realloc_r+0x394>
 555763c:	38800117 	ldw	r2,4(r7)
 5557640:	a549883a 	add	r4,r20,r21
 5557644:	1080004c 	andi	r2,r2,1
 5557648:	a084b03a 	or	r2,r20,r2
 555764c:	38800115 	stw	r2,4(r7)
 5557650:	20c00117 	ldw	r3,4(r4)
 5557654:	18c00054 	ori	r3,r3,1
 5557658:	20c00115 	stw	r3,4(r4)
 555765c:	b009883a 	mov	r4,r22
 5557660:	55595f80 	call	55595f8 <__malloc_unlock>
 5557664:	8023883a 	mov	r17,r16
 5557668:	00000606 	br	5557684 <_realloc_r+0xd8>
 555766c:	01c00404 	movi	r7,16
 5557670:	3839883a 	mov	fp,r7
 5557674:	e47fe72e 	bgeu	fp,r17,5557614 <_realloc_r+0x68>
 5557678:	00800304 	movi	r2,12
 555767c:	0023883a 	mov	r17,zero
 5557680:	b0800015 	stw	r2,0(r22)
 5557684:	8805883a 	mov	r2,r17
 5557688:	dfc00b17 	ldw	ra,44(sp)
 555768c:	df000a17 	ldw	fp,40(sp)
 5557690:	ddc00917 	ldw	r23,36(sp)
 5557694:	dd800817 	ldw	r22,32(sp)
 5557698:	dd400717 	ldw	r21,28(sp)
 555769c:	dd000617 	ldw	r20,24(sp)
 55576a0:	dcc00517 	ldw	r19,20(sp)
 55576a4:	dc800417 	ldw	r18,16(sp)
 55576a8:	dc400317 	ldw	r17,12(sp)
 55576ac:	dc000217 	ldw	r16,8(sp)
 55576b0:	dec00c04 	addi	sp,sp,48
 55576b4:	f800283a 	ret
 55576b8:	008155b4 	movhi	r2,1366
 55576bc:	10b2df04 	addi	r2,r2,-13444
 55576c0:	12400217 	ldw	r9,8(r2)
 55576c4:	84cd883a 	add	r6,r16,r19
 55576c8:	802b883a 	mov	r21,r16
 55576cc:	3240b926 	beq	r6,r9,55579b4 <_realloc_r+0x408>
 55576d0:	31400117 	ldw	r5,4(r6)
 55576d4:	00bfff84 	movi	r2,-2
 55576d8:	2884703a 	and	r2,r5,r2
 55576dc:	1185883a 	add	r2,r2,r6
 55576e0:	10c00117 	ldw	r3,4(r2)
 55576e4:	18c0004c 	andi	r3,r3,1
 55576e8:	1807003a 	cmpeq	r3,r3,zero
 55576ec:	1800a326 	beq	r3,zero,555797c <_realloc_r+0x3d0>
 55576f0:	2908703a 	and	r4,r5,r4
 55576f4:	9929883a 	add	r20,r19,r4
 55576f8:	a1c0a30e 	bge	r20,r7,5557988 <_realloc_r+0x3dc>
 55576fc:	4080004c 	andi	r2,r8,1
 5557700:	1000551e 	bne	r2,zero,5557858 <_realloc_r+0x2ac>
 5557704:	80800017 	ldw	r2,0(r16)
 5557708:	80afc83a 	sub	r23,r16,r2
 555770c:	b8c00117 	ldw	r3,4(r23)
 5557710:	00bfff04 	movi	r2,-4
 5557714:	1884703a 	and	r2,r3,r2
 5557718:	30002e26 	beq	r6,zero,55577d4 <_realloc_r+0x228>
 555771c:	3240b926 	beq	r6,r9,5557a04 <_realloc_r+0x458>
 5557720:	98a9883a 	add	r20,r19,r2
 5557724:	2509883a 	add	r4,r4,r20
 5557728:	d9000015 	stw	r4,0(sp)
 555772c:	21c02a16 	blt	r4,r7,55577d8 <_realloc_r+0x22c>
 5557730:	30800317 	ldw	r2,12(r6)
 5557734:	30c00217 	ldw	r3,8(r6)
 5557738:	01400904 	movi	r5,36
 555773c:	99bfff04 	addi	r6,r19,-4
 5557740:	18800315 	stw	r2,12(r3)
 5557744:	10c00215 	stw	r3,8(r2)
 5557748:	b9000317 	ldw	r4,12(r23)
 555774c:	b8800217 	ldw	r2,8(r23)
 5557750:	b82b883a 	mov	r21,r23
 5557754:	bc000204 	addi	r16,r23,8
 5557758:	20800215 	stw	r2,8(r4)
 555775c:	11000315 	stw	r4,12(r2)
 5557760:	2980e436 	bltu	r5,r6,5557af4 <_realloc_r+0x548>
 5557764:	008004c4 	movi	r2,19
 5557768:	9009883a 	mov	r4,r18
 555776c:	8011883a 	mov	r8,r16
 5557770:	11800f2e 	bgeu	r2,r6,55577b0 <_realloc_r+0x204>
 5557774:	90800017 	ldw	r2,0(r18)
 5557778:	ba000404 	addi	r8,r23,16
 555777c:	91000204 	addi	r4,r18,8
 5557780:	b8800215 	stw	r2,8(r23)
 5557784:	90c00117 	ldw	r3,4(r18)
 5557788:	008006c4 	movi	r2,27
 555778c:	b8c00315 	stw	r3,12(r23)
 5557790:	1180072e 	bgeu	r2,r6,55577b0 <_realloc_r+0x204>
 5557794:	90c00217 	ldw	r3,8(r18)
 5557798:	ba000604 	addi	r8,r23,24
 555779c:	91000404 	addi	r4,r18,16
 55577a0:	b8c00415 	stw	r3,16(r23)
 55577a4:	90800317 	ldw	r2,12(r18)
 55577a8:	b8800515 	stw	r2,20(r23)
 55577ac:	3140e726 	beq	r6,r5,5557b4c <_realloc_r+0x5a0>
 55577b0:	20800017 	ldw	r2,0(r4)
 55577b4:	dd000017 	ldw	r20,0(sp)
 55577b8:	b80f883a 	mov	r7,r23
 55577bc:	40800015 	stw	r2,0(r8)
 55577c0:	20c00117 	ldw	r3,4(r4)
 55577c4:	40c00115 	stw	r3,4(r8)
 55577c8:	20800217 	ldw	r2,8(r4)
 55577cc:	40800215 	stw	r2,8(r8)
 55577d0:	003f9706 	br	5557630 <_realloc_r+0x84>
 55577d4:	98a9883a 	add	r20,r19,r2
 55577d8:	a1c01f16 	blt	r20,r7,5557858 <_realloc_r+0x2ac>
 55577dc:	b8c00317 	ldw	r3,12(r23)
 55577e0:	b8800217 	ldw	r2,8(r23)
 55577e4:	99bfff04 	addi	r6,r19,-4
 55577e8:	01400904 	movi	r5,36
 55577ec:	b82b883a 	mov	r21,r23
 55577f0:	18800215 	stw	r2,8(r3)
 55577f4:	10c00315 	stw	r3,12(r2)
 55577f8:	bc000204 	addi	r16,r23,8
 55577fc:	2980c336 	bltu	r5,r6,5557b0c <_realloc_r+0x560>
 5557800:	008004c4 	movi	r2,19
 5557804:	9009883a 	mov	r4,r18
 5557808:	8011883a 	mov	r8,r16
 555780c:	11800f2e 	bgeu	r2,r6,555784c <_realloc_r+0x2a0>
 5557810:	90800017 	ldw	r2,0(r18)
 5557814:	ba000404 	addi	r8,r23,16
 5557818:	91000204 	addi	r4,r18,8
 555781c:	b8800215 	stw	r2,8(r23)
 5557820:	90c00117 	ldw	r3,4(r18)
 5557824:	008006c4 	movi	r2,27
 5557828:	b8c00315 	stw	r3,12(r23)
 555782c:	1180072e 	bgeu	r2,r6,555784c <_realloc_r+0x2a0>
 5557830:	90c00217 	ldw	r3,8(r18)
 5557834:	ba000604 	addi	r8,r23,24
 5557838:	91000404 	addi	r4,r18,16
 555783c:	b8c00415 	stw	r3,16(r23)
 5557840:	90800317 	ldw	r2,12(r18)
 5557844:	b8800515 	stw	r2,20(r23)
 5557848:	3140c726 	beq	r6,r5,5557b68 <_realloc_r+0x5bc>
 555784c:	20800017 	ldw	r2,0(r4)
 5557850:	b80f883a 	mov	r7,r23
 5557854:	003fd906 	br	55577bc <_realloc_r+0x210>
 5557858:	880b883a 	mov	r5,r17
 555785c:	b009883a 	mov	r4,r22
 5557860:	5556c080 	call	5556c08 <_malloc_r>
 5557864:	1023883a 	mov	r17,r2
 5557868:	10002526 	beq	r2,zero,5557900 <_realloc_r+0x354>
 555786c:	80800117 	ldw	r2,4(r16)
 5557870:	00ffff84 	movi	r3,-2
 5557874:	893ffe04 	addi	r4,r17,-8
 5557878:	10c4703a 	and	r2,r2,r3
 555787c:	8085883a 	add	r2,r16,r2
 5557880:	20809526 	beq	r4,r2,5557ad8 <_realloc_r+0x52c>
 5557884:	99bfff04 	addi	r6,r19,-4
 5557888:	01c00904 	movi	r7,36
 555788c:	39804536 	bltu	r7,r6,55579a4 <_realloc_r+0x3f8>
 5557890:	008004c4 	movi	r2,19
 5557894:	9009883a 	mov	r4,r18
 5557898:	880b883a 	mov	r5,r17
 555789c:	11800f2e 	bgeu	r2,r6,55578dc <_realloc_r+0x330>
 55578a0:	90800017 	ldw	r2,0(r18)
 55578a4:	89400204 	addi	r5,r17,8
 55578a8:	91000204 	addi	r4,r18,8
 55578ac:	88800015 	stw	r2,0(r17)
 55578b0:	90c00117 	ldw	r3,4(r18)
 55578b4:	008006c4 	movi	r2,27
 55578b8:	88c00115 	stw	r3,4(r17)
 55578bc:	1180072e 	bgeu	r2,r6,55578dc <_realloc_r+0x330>
 55578c0:	90c00217 	ldw	r3,8(r18)
 55578c4:	89400404 	addi	r5,r17,16
 55578c8:	91000404 	addi	r4,r18,16
 55578cc:	88c00215 	stw	r3,8(r17)
 55578d0:	90800317 	ldw	r2,12(r18)
 55578d4:	88800315 	stw	r2,12(r17)
 55578d8:	31c09126 	beq	r6,r7,5557b20 <_realloc_r+0x574>
 55578dc:	20800017 	ldw	r2,0(r4)
 55578e0:	28800015 	stw	r2,0(r5)
 55578e4:	20c00117 	ldw	r3,4(r4)
 55578e8:	28c00115 	stw	r3,4(r5)
 55578ec:	20800217 	ldw	r2,8(r4)
 55578f0:	28800215 	stw	r2,8(r5)
 55578f4:	900b883a 	mov	r5,r18
 55578f8:	b009883a 	mov	r4,r22
 55578fc:	55583680 	call	5558368 <_free_r>
 5557900:	b009883a 	mov	r4,r22
 5557904:	55595f80 	call	55595f8 <__malloc_unlock>
 5557908:	003f5e06 	br	5557684 <_realloc_r+0xd8>
 555790c:	300b883a 	mov	r5,r6
 5557910:	dfc00b17 	ldw	ra,44(sp)
 5557914:	df000a17 	ldw	fp,40(sp)
 5557918:	ddc00917 	ldw	r23,36(sp)
 555791c:	dd800817 	ldw	r22,32(sp)
 5557920:	dd400717 	ldw	r21,28(sp)
 5557924:	dd000617 	ldw	r20,24(sp)
 5557928:	dcc00517 	ldw	r19,20(sp)
 555792c:	dc800417 	ldw	r18,16(sp)
 5557930:	dc400317 	ldw	r17,12(sp)
 5557934:	dc000217 	ldw	r16,8(sp)
 5557938:	dec00c04 	addi	sp,sp,48
 555793c:	5556c081 	jmpi	5556c08 <_malloc_r>
 5557940:	38800117 	ldw	r2,4(r7)
 5557944:	e54b883a 	add	r5,fp,r21
 5557948:	31000054 	ori	r4,r6,1
 555794c:	1080004c 	andi	r2,r2,1
 5557950:	1704b03a 	or	r2,r2,fp
 5557954:	38800115 	stw	r2,4(r7)
 5557958:	29000115 	stw	r4,4(r5)
 555795c:	2987883a 	add	r3,r5,r6
 5557960:	18800117 	ldw	r2,4(r3)
 5557964:	29400204 	addi	r5,r5,8
 5557968:	b009883a 	mov	r4,r22
 555796c:	10800054 	ori	r2,r2,1
 5557970:	18800115 	stw	r2,4(r3)
 5557974:	55583680 	call	5558368 <_free_r>
 5557978:	003f3806 	br	555765c <_realloc_r+0xb0>
 555797c:	000d883a 	mov	r6,zero
 5557980:	0009883a 	mov	r4,zero
 5557984:	003f5d06 	br	55576fc <_realloc_r+0x150>
 5557988:	30c00217 	ldw	r3,8(r6)
 555798c:	30800317 	ldw	r2,12(r6)
 5557990:	800f883a 	mov	r7,r16
 5557994:	84000204 	addi	r16,r16,8
 5557998:	10c00215 	stw	r3,8(r2)
 555799c:	18800315 	stw	r2,12(r3)
 55579a0:	003f2306 	br	5557630 <_realloc_r+0x84>
 55579a4:	8809883a 	mov	r4,r17
 55579a8:	900b883a 	mov	r5,r18
 55579ac:	55574cc0 	call	55574cc <memmove>
 55579b0:	003fd006 	br	55578f4 <_realloc_r+0x348>
 55579b4:	30800117 	ldw	r2,4(r6)
 55579b8:	e0c00404 	addi	r3,fp,16
 55579bc:	1108703a 	and	r4,r2,r4
 55579c0:	9905883a 	add	r2,r19,r4
 55579c4:	10ff4d16 	blt	r2,r3,55576fc <_realloc_r+0x150>
 55579c8:	1705c83a 	sub	r2,r2,fp
 55579cc:	870b883a 	add	r5,r16,fp
 55579d0:	10800054 	ori	r2,r2,1
 55579d4:	28800115 	stw	r2,4(r5)
 55579d8:	80c00117 	ldw	r3,4(r16)
 55579dc:	008155b4 	movhi	r2,1366
 55579e0:	10b2df04 	addi	r2,r2,-13444
 55579e4:	b009883a 	mov	r4,r22
 55579e8:	18c0004c 	andi	r3,r3,1
 55579ec:	e0c6b03a 	or	r3,fp,r3
 55579f0:	11400215 	stw	r5,8(r2)
 55579f4:	80c00115 	stw	r3,4(r16)
 55579f8:	55595f80 	call	55595f8 <__malloc_unlock>
 55579fc:	84400204 	addi	r17,r16,8
 5557a00:	003f2006 	br	5557684 <_realloc_r+0xd8>
 5557a04:	98a9883a 	add	r20,r19,r2
 5557a08:	2509883a 	add	r4,r4,r20
 5557a0c:	e0800404 	addi	r2,fp,16
 5557a10:	d9000115 	stw	r4,4(sp)
 5557a14:	20bf7016 	blt	r4,r2,55577d8 <_realloc_r+0x22c>
 5557a18:	b8c00317 	ldw	r3,12(r23)
 5557a1c:	b8800217 	ldw	r2,8(r23)
 5557a20:	99bfff04 	addi	r6,r19,-4
 5557a24:	01400904 	movi	r5,36
 5557a28:	18800215 	stw	r2,8(r3)
 5557a2c:	10c00315 	stw	r3,12(r2)
 5557a30:	bc400204 	addi	r17,r23,8
 5557a34:	29804136 	bltu	r5,r6,5557b3c <_realloc_r+0x590>
 5557a38:	008004c4 	movi	r2,19
 5557a3c:	9009883a 	mov	r4,r18
 5557a40:	880f883a 	mov	r7,r17
 5557a44:	11800f2e 	bgeu	r2,r6,5557a84 <_realloc_r+0x4d8>
 5557a48:	90800017 	ldw	r2,0(r18)
 5557a4c:	b9c00404 	addi	r7,r23,16
 5557a50:	91000204 	addi	r4,r18,8
 5557a54:	b8800215 	stw	r2,8(r23)
 5557a58:	90c00117 	ldw	r3,4(r18)
 5557a5c:	008006c4 	movi	r2,27
 5557a60:	b8c00315 	stw	r3,12(r23)
 5557a64:	1180072e 	bgeu	r2,r6,5557a84 <_realloc_r+0x4d8>
 5557a68:	90c00217 	ldw	r3,8(r18)
 5557a6c:	b9c00604 	addi	r7,r23,24
 5557a70:	91000404 	addi	r4,r18,16
 5557a74:	b8c00415 	stw	r3,16(r23)
 5557a78:	90800317 	ldw	r2,12(r18)
 5557a7c:	b8800515 	stw	r2,20(r23)
 5557a80:	31404026 	beq	r6,r5,5557b84 <_realloc_r+0x5d8>
 5557a84:	20800017 	ldw	r2,0(r4)
 5557a88:	38800015 	stw	r2,0(r7)
 5557a8c:	20c00117 	ldw	r3,4(r4)
 5557a90:	38c00115 	stw	r3,4(r7)
 5557a94:	20800217 	ldw	r2,8(r4)
 5557a98:	38800215 	stw	r2,8(r7)
 5557a9c:	d8c00117 	ldw	r3,4(sp)
 5557aa0:	bf0b883a 	add	r5,r23,fp
 5557aa4:	b009883a 	mov	r4,r22
 5557aa8:	1f05c83a 	sub	r2,r3,fp
 5557aac:	10800054 	ori	r2,r2,1
 5557ab0:	28800115 	stw	r2,4(r5)
 5557ab4:	b8c00117 	ldw	r3,4(r23)
 5557ab8:	008155b4 	movhi	r2,1366
 5557abc:	10b2df04 	addi	r2,r2,-13444
 5557ac0:	11400215 	stw	r5,8(r2)
 5557ac4:	18c0004c 	andi	r3,r3,1
 5557ac8:	e0c6b03a 	or	r3,fp,r3
 5557acc:	b8c00115 	stw	r3,4(r23)
 5557ad0:	55595f80 	call	55595f8 <__malloc_unlock>
 5557ad4:	003eeb06 	br	5557684 <_realloc_r+0xd8>
 5557ad8:	20800117 	ldw	r2,4(r4)
 5557adc:	00ffff04 	movi	r3,-4
 5557ae0:	800f883a 	mov	r7,r16
 5557ae4:	10c4703a 	and	r2,r2,r3
 5557ae8:	98a9883a 	add	r20,r19,r2
 5557aec:	84000204 	addi	r16,r16,8
 5557af0:	003ecf06 	br	5557630 <_realloc_r+0x84>
 5557af4:	900b883a 	mov	r5,r18
 5557af8:	8009883a 	mov	r4,r16
 5557afc:	55574cc0 	call	55574cc <memmove>
 5557b00:	dd000017 	ldw	r20,0(sp)
 5557b04:	b80f883a 	mov	r7,r23
 5557b08:	003ec906 	br	5557630 <_realloc_r+0x84>
 5557b0c:	900b883a 	mov	r5,r18
 5557b10:	8009883a 	mov	r4,r16
 5557b14:	55574cc0 	call	55574cc <memmove>
 5557b18:	b80f883a 	mov	r7,r23
 5557b1c:	003ec406 	br	5557630 <_realloc_r+0x84>
 5557b20:	90c00417 	ldw	r3,16(r18)
 5557b24:	89400604 	addi	r5,r17,24
 5557b28:	91000604 	addi	r4,r18,24
 5557b2c:	88c00415 	stw	r3,16(r17)
 5557b30:	90800517 	ldw	r2,20(r18)
 5557b34:	88800515 	stw	r2,20(r17)
 5557b38:	003f6806 	br	55578dc <_realloc_r+0x330>
 5557b3c:	900b883a 	mov	r5,r18
 5557b40:	8809883a 	mov	r4,r17
 5557b44:	55574cc0 	call	55574cc <memmove>
 5557b48:	003fd406 	br	5557a9c <_realloc_r+0x4f0>
 5557b4c:	90c00417 	ldw	r3,16(r18)
 5557b50:	91000604 	addi	r4,r18,24
 5557b54:	ba000804 	addi	r8,r23,32
 5557b58:	b8c00615 	stw	r3,24(r23)
 5557b5c:	90800517 	ldw	r2,20(r18)
 5557b60:	b8800715 	stw	r2,28(r23)
 5557b64:	003f1206 	br	55577b0 <_realloc_r+0x204>
 5557b68:	90c00417 	ldw	r3,16(r18)
 5557b6c:	91000604 	addi	r4,r18,24
 5557b70:	ba000804 	addi	r8,r23,32
 5557b74:	b8c00615 	stw	r3,24(r23)
 5557b78:	90800517 	ldw	r2,20(r18)
 5557b7c:	b8800715 	stw	r2,28(r23)
 5557b80:	003f3206 	br	555784c <_realloc_r+0x2a0>
 5557b84:	90c00417 	ldw	r3,16(r18)
 5557b88:	91000604 	addi	r4,r18,24
 5557b8c:	b9c00804 	addi	r7,r23,32
 5557b90:	b8c00615 	stw	r3,24(r23)
 5557b94:	90800517 	ldw	r2,20(r18)
 5557b98:	b8800715 	stw	r2,28(r23)
 5557b9c:	003fb906 	br	5557a84 <_realloc_r+0x4d8>

05557ba0 <_sbrk_r>:
 5557ba0:	defffd04 	addi	sp,sp,-12
 5557ba4:	dc000015 	stw	r16,0(sp)
 5557ba8:	040155b4 	movhi	r16,1366
 5557bac:	84010e04 	addi	r16,r16,1080
 5557bb0:	dc400115 	stw	r17,4(sp)
 5557bb4:	80000015 	stw	zero,0(r16)
 5557bb8:	2023883a 	mov	r17,r4
 5557bbc:	2809883a 	mov	r4,r5
 5557bc0:	dfc00215 	stw	ra,8(sp)
 5557bc4:	55597f80 	call	55597f8 <sbrk>
 5557bc8:	1007883a 	mov	r3,r2
 5557bcc:	00bfffc4 	movi	r2,-1
 5557bd0:	18800626 	beq	r3,r2,5557bec <_sbrk_r+0x4c>
 5557bd4:	1805883a 	mov	r2,r3
 5557bd8:	dfc00217 	ldw	ra,8(sp)
 5557bdc:	dc400117 	ldw	r17,4(sp)
 5557be0:	dc000017 	ldw	r16,0(sp)
 5557be4:	dec00304 	addi	sp,sp,12
 5557be8:	f800283a 	ret
 5557bec:	80800017 	ldw	r2,0(r16)
 5557bf0:	103ff826 	beq	r2,zero,5557bd4 <_sbrk_r+0x34>
 5557bf4:	88800015 	stw	r2,0(r17)
 5557bf8:	1805883a 	mov	r2,r3
 5557bfc:	dfc00217 	ldw	ra,8(sp)
 5557c00:	dc400117 	ldw	r17,4(sp)
 5557c04:	dc000017 	ldw	r16,0(sp)
 5557c08:	dec00304 	addi	sp,sp,12
 5557c0c:	f800283a 	ret

05557c10 <__swsetup_r>:
 5557c10:	008155b4 	movhi	r2,1366
 5557c14:	10b86304 	addi	r2,r2,-7796
 5557c18:	10c00017 	ldw	r3,0(r2)
 5557c1c:	defffd04 	addi	sp,sp,-12
 5557c20:	dc400115 	stw	r17,4(sp)
 5557c24:	dc000015 	stw	r16,0(sp)
 5557c28:	dfc00215 	stw	ra,8(sp)
 5557c2c:	2023883a 	mov	r17,r4
 5557c30:	2821883a 	mov	r16,r5
 5557c34:	18000226 	beq	r3,zero,5557c40 <__swsetup_r+0x30>
 5557c38:	18800e17 	ldw	r2,56(r3)
 5557c3c:	10001f26 	beq	r2,zero,5557cbc <__swsetup_r+0xac>
 5557c40:	8100030b 	ldhu	r4,12(r16)
 5557c44:	2080020c 	andi	r2,r4,8
 5557c48:	10002826 	beq	r2,zero,5557cec <__swsetup_r+0xdc>
 5557c4c:	81400417 	ldw	r5,16(r16)
 5557c50:	28001d26 	beq	r5,zero,5557cc8 <__swsetup_r+0xb8>
 5557c54:	2080004c 	andi	r2,r4,1
 5557c58:	1005003a 	cmpeq	r2,r2,zero
 5557c5c:	10000b26 	beq	r2,zero,5557c8c <__swsetup_r+0x7c>
 5557c60:	2080008c 	andi	r2,r4,2
 5557c64:	10001226 	beq	r2,zero,5557cb0 <__swsetup_r+0xa0>
 5557c68:	0005883a 	mov	r2,zero
 5557c6c:	80800215 	stw	r2,8(r16)
 5557c70:	28000b26 	beq	r5,zero,5557ca0 <__swsetup_r+0x90>
 5557c74:	0005883a 	mov	r2,zero
 5557c78:	dfc00217 	ldw	ra,8(sp)
 5557c7c:	dc400117 	ldw	r17,4(sp)
 5557c80:	dc000017 	ldw	r16,0(sp)
 5557c84:	dec00304 	addi	sp,sp,12
 5557c88:	f800283a 	ret
 5557c8c:	80800517 	ldw	r2,20(r16)
 5557c90:	80000215 	stw	zero,8(r16)
 5557c94:	0085c83a 	sub	r2,zero,r2
 5557c98:	80800615 	stw	r2,24(r16)
 5557c9c:	283ff51e 	bne	r5,zero,5557c74 <__swsetup_r+0x64>
 5557ca0:	2080200c 	andi	r2,r4,128
 5557ca4:	103ff326 	beq	r2,zero,5557c74 <__swsetup_r+0x64>
 5557ca8:	00bfffc4 	movi	r2,-1
 5557cac:	003ff206 	br	5557c78 <__swsetup_r+0x68>
 5557cb0:	80800517 	ldw	r2,20(r16)
 5557cb4:	80800215 	stw	r2,8(r16)
 5557cb8:	003fed06 	br	5557c70 <__swsetup_r+0x60>
 5557cbc:	1809883a 	mov	r4,r3
 5557cc0:	5557fe40 	call	5557fe4 <__sinit>
 5557cc4:	003fde06 	br	5557c40 <__swsetup_r+0x30>
 5557cc8:	20c0a00c 	andi	r3,r4,640
 5557ccc:	00808004 	movi	r2,512
 5557cd0:	18bfe026 	beq	r3,r2,5557c54 <__swsetup_r+0x44>
 5557cd4:	8809883a 	mov	r4,r17
 5557cd8:	800b883a 	mov	r5,r16
 5557cdc:	55587fc0 	call	55587fc <__smakebuf_r>
 5557ce0:	8100030b 	ldhu	r4,12(r16)
 5557ce4:	81400417 	ldw	r5,16(r16)
 5557ce8:	003fda06 	br	5557c54 <__swsetup_r+0x44>
 5557cec:	2080040c 	andi	r2,r4,16
 5557cf0:	103fed26 	beq	r2,zero,5557ca8 <__swsetup_r+0x98>
 5557cf4:	2080010c 	andi	r2,r4,4
 5557cf8:	10001226 	beq	r2,zero,5557d44 <__swsetup_r+0x134>
 5557cfc:	81400c17 	ldw	r5,48(r16)
 5557d00:	28000526 	beq	r5,zero,5557d18 <__swsetup_r+0x108>
 5557d04:	80801004 	addi	r2,r16,64
 5557d08:	28800226 	beq	r5,r2,5557d14 <__swsetup_r+0x104>
 5557d0c:	8809883a 	mov	r4,r17
 5557d10:	55583680 	call	5558368 <_free_r>
 5557d14:	80000c15 	stw	zero,48(r16)
 5557d18:	8080030b 	ldhu	r2,12(r16)
 5557d1c:	81400417 	ldw	r5,16(r16)
 5557d20:	80000115 	stw	zero,4(r16)
 5557d24:	10bff6cc 	andi	r2,r2,65499
 5557d28:	8080030d 	sth	r2,12(r16)
 5557d2c:	81400015 	stw	r5,0(r16)
 5557d30:	8080030b 	ldhu	r2,12(r16)
 5557d34:	10800214 	ori	r2,r2,8
 5557d38:	113fffcc 	andi	r4,r2,65535
 5557d3c:	8080030d 	sth	r2,12(r16)
 5557d40:	003fc306 	br	5557c50 <__swsetup_r+0x40>
 5557d44:	81400417 	ldw	r5,16(r16)
 5557d48:	003ff906 	br	5557d30 <__swsetup_r+0x120>

05557d4c <_fflush_r>:
 5557d4c:	defffb04 	addi	sp,sp,-20
 5557d50:	dcc00315 	stw	r19,12(sp)
 5557d54:	dc800215 	stw	r18,8(sp)
 5557d58:	dfc00415 	stw	ra,16(sp)
 5557d5c:	dc400115 	stw	r17,4(sp)
 5557d60:	dc000015 	stw	r16,0(sp)
 5557d64:	2027883a 	mov	r19,r4
 5557d68:	2825883a 	mov	r18,r5
 5557d6c:	20000226 	beq	r4,zero,5557d78 <_fflush_r+0x2c>
 5557d70:	20800e17 	ldw	r2,56(r4)
 5557d74:	10005626 	beq	r2,zero,5557ed0 <_fflush_r+0x184>
 5557d78:	9100030b 	ldhu	r4,12(r18)
 5557d7c:	20ffffcc 	andi	r3,r4,65535
 5557d80:	18e0001c 	xori	r3,r3,32768
 5557d84:	18e00004 	addi	r3,r3,-32768
 5557d88:	1880020c 	andi	r2,r3,8
 5557d8c:	1000261e 	bne	r2,zero,5557e28 <_fflush_r+0xdc>
 5557d90:	90c00117 	ldw	r3,4(r18)
 5557d94:	20820014 	ori	r2,r4,2048
 5557d98:	9080030d 	sth	r2,12(r18)
 5557d9c:	1009883a 	mov	r4,r2
 5557da0:	00c0400e 	bge	zero,r3,5557ea4 <_fflush_r+0x158>
 5557da4:	92000a17 	ldw	r8,40(r18)
 5557da8:	40004026 	beq	r8,zero,5557eac <_fflush_r+0x160>
 5557dac:	2084000c 	andi	r2,r4,4096
 5557db0:	10005326 	beq	r2,zero,5557f00 <_fflush_r+0x1b4>
 5557db4:	94001417 	ldw	r16,80(r18)
 5557db8:	9080030b 	ldhu	r2,12(r18)
 5557dbc:	1080010c 	andi	r2,r2,4
 5557dc0:	1000481e 	bne	r2,zero,5557ee4 <_fflush_r+0x198>
 5557dc4:	91400717 	ldw	r5,28(r18)
 5557dc8:	9809883a 	mov	r4,r19
 5557dcc:	800d883a 	mov	r6,r16
 5557dd0:	000f883a 	mov	r7,zero
 5557dd4:	403ee83a 	callr	r8
 5557dd8:	8080261e 	bne	r16,r2,5557e74 <_fflush_r+0x128>
 5557ddc:	9080030b 	ldhu	r2,12(r18)
 5557de0:	91000417 	ldw	r4,16(r18)
 5557de4:	90000115 	stw	zero,4(r18)
 5557de8:	10bdffcc 	andi	r2,r2,63487
 5557dec:	10ffffcc 	andi	r3,r2,65535
 5557df0:	18c4000c 	andi	r3,r3,4096
 5557df4:	9080030d 	sth	r2,12(r18)
 5557df8:	91000015 	stw	r4,0(r18)
 5557dfc:	18002b26 	beq	r3,zero,5557eac <_fflush_r+0x160>
 5557e00:	0007883a 	mov	r3,zero
 5557e04:	1805883a 	mov	r2,r3
 5557e08:	94001415 	stw	r16,80(r18)
 5557e0c:	dfc00417 	ldw	ra,16(sp)
 5557e10:	dcc00317 	ldw	r19,12(sp)
 5557e14:	dc800217 	ldw	r18,8(sp)
 5557e18:	dc400117 	ldw	r17,4(sp)
 5557e1c:	dc000017 	ldw	r16,0(sp)
 5557e20:	dec00504 	addi	sp,sp,20
 5557e24:	f800283a 	ret
 5557e28:	94400417 	ldw	r17,16(r18)
 5557e2c:	88001f26 	beq	r17,zero,5557eac <_fflush_r+0x160>
 5557e30:	90800017 	ldw	r2,0(r18)
 5557e34:	18c000cc 	andi	r3,r3,3
 5557e38:	94400015 	stw	r17,0(r18)
 5557e3c:	1461c83a 	sub	r16,r2,r17
 5557e40:	18002526 	beq	r3,zero,5557ed8 <_fflush_r+0x18c>
 5557e44:	0005883a 	mov	r2,zero
 5557e48:	90800215 	stw	r2,8(r18)
 5557e4c:	0400170e 	bge	zero,r16,5557eac <_fflush_r+0x160>
 5557e50:	90c00917 	ldw	r3,36(r18)
 5557e54:	91400717 	ldw	r5,28(r18)
 5557e58:	880d883a 	mov	r6,r17
 5557e5c:	800f883a 	mov	r7,r16
 5557e60:	9809883a 	mov	r4,r19
 5557e64:	183ee83a 	callr	r3
 5557e68:	88a3883a 	add	r17,r17,r2
 5557e6c:	80a1c83a 	sub	r16,r16,r2
 5557e70:	00bff616 	blt	zero,r2,5557e4c <_fflush_r+0x100>
 5557e74:	9080030b 	ldhu	r2,12(r18)
 5557e78:	00ffffc4 	movi	r3,-1
 5557e7c:	10801014 	ori	r2,r2,64
 5557e80:	9080030d 	sth	r2,12(r18)
 5557e84:	1805883a 	mov	r2,r3
 5557e88:	dfc00417 	ldw	ra,16(sp)
 5557e8c:	dcc00317 	ldw	r19,12(sp)
 5557e90:	dc800217 	ldw	r18,8(sp)
 5557e94:	dc400117 	ldw	r17,4(sp)
 5557e98:	dc000017 	ldw	r16,0(sp)
 5557e9c:	dec00504 	addi	sp,sp,20
 5557ea0:	f800283a 	ret
 5557ea4:	90800f17 	ldw	r2,60(r18)
 5557ea8:	00bfbe16 	blt	zero,r2,5557da4 <_fflush_r+0x58>
 5557eac:	0007883a 	mov	r3,zero
 5557eb0:	1805883a 	mov	r2,r3
 5557eb4:	dfc00417 	ldw	ra,16(sp)
 5557eb8:	dcc00317 	ldw	r19,12(sp)
 5557ebc:	dc800217 	ldw	r18,8(sp)
 5557ec0:	dc400117 	ldw	r17,4(sp)
 5557ec4:	dc000017 	ldw	r16,0(sp)
 5557ec8:	dec00504 	addi	sp,sp,20
 5557ecc:	f800283a 	ret
 5557ed0:	5557fe40 	call	5557fe4 <__sinit>
 5557ed4:	003fa806 	br	5557d78 <_fflush_r+0x2c>
 5557ed8:	90800517 	ldw	r2,20(r18)
 5557edc:	90800215 	stw	r2,8(r18)
 5557ee0:	003fda06 	br	5557e4c <_fflush_r+0x100>
 5557ee4:	90800117 	ldw	r2,4(r18)
 5557ee8:	90c00c17 	ldw	r3,48(r18)
 5557eec:	80a1c83a 	sub	r16,r16,r2
 5557ef0:	183fb426 	beq	r3,zero,5557dc4 <_fflush_r+0x78>
 5557ef4:	90800f17 	ldw	r2,60(r18)
 5557ef8:	80a1c83a 	sub	r16,r16,r2
 5557efc:	003fb106 	br	5557dc4 <_fflush_r+0x78>
 5557f00:	91400717 	ldw	r5,28(r18)
 5557f04:	9809883a 	mov	r4,r19
 5557f08:	000d883a 	mov	r6,zero
 5557f0c:	01c00044 	movi	r7,1
 5557f10:	403ee83a 	callr	r8
 5557f14:	1021883a 	mov	r16,r2
 5557f18:	00bfffc4 	movi	r2,-1
 5557f1c:	80800226 	beq	r16,r2,5557f28 <_fflush_r+0x1dc>
 5557f20:	92000a17 	ldw	r8,40(r18)
 5557f24:	003fa406 	br	5557db8 <_fflush_r+0x6c>
 5557f28:	98c00017 	ldw	r3,0(r19)
 5557f2c:	00800744 	movi	r2,29
 5557f30:	18bfde26 	beq	r3,r2,5557eac <_fflush_r+0x160>
 5557f34:	9080030b 	ldhu	r2,12(r18)
 5557f38:	8007883a 	mov	r3,r16
 5557f3c:	10801014 	ori	r2,r2,64
 5557f40:	9080030d 	sth	r2,12(r18)
 5557f44:	003fcf06 	br	5557e84 <_fflush_r+0x138>

05557f48 <fflush>:
 5557f48:	01415574 	movhi	r5,1365
 5557f4c:	295f5304 	addi	r5,r5,32076
 5557f50:	2007883a 	mov	r3,r4
 5557f54:	20000526 	beq	r4,zero,5557f6c <fflush+0x24>
 5557f58:	008155b4 	movhi	r2,1366
 5557f5c:	10b86304 	addi	r2,r2,-7796
 5557f60:	11000017 	ldw	r4,0(r2)
 5557f64:	180b883a 	mov	r5,r3
 5557f68:	5557d4c1 	jmpi	5557d4c <_fflush_r>
 5557f6c:	008155b4 	movhi	r2,1366
 5557f70:	10b86404 	addi	r2,r2,-7792
 5557f74:	11000017 	ldw	r4,0(r2)
 5557f78:	555867c1 	jmpi	555867c <_fwalk_reent>

05557f7c <std>:
 5557f7c:	008155b4 	movhi	r2,1366
 5557f80:	10a28a04 	addi	r2,r2,-30168
 5557f84:	20800b15 	stw	r2,44(r4)
 5557f88:	008155b4 	movhi	r2,1366
 5557f8c:	10a2c504 	addi	r2,r2,-29932
 5557f90:	20800815 	stw	r2,32(r4)
 5557f94:	00c155b4 	movhi	r3,1366
 5557f98:	18e2a604 	addi	r3,r3,-30056
 5557f9c:	008155b4 	movhi	r2,1366
 5557fa0:	10a28c04 	addi	r2,r2,-30160
 5557fa4:	2140030d 	sth	r5,12(r4)
 5557fa8:	2180038d 	sth	r6,14(r4)
 5557fac:	20c00915 	stw	r3,36(r4)
 5557fb0:	20800a15 	stw	r2,40(r4)
 5557fb4:	20000015 	stw	zero,0(r4)
 5557fb8:	20000115 	stw	zero,4(r4)
 5557fbc:	20000215 	stw	zero,8(r4)
 5557fc0:	20000415 	stw	zero,16(r4)
 5557fc4:	20000515 	stw	zero,20(r4)
 5557fc8:	20000615 	stw	zero,24(r4)
 5557fcc:	21000715 	stw	r4,28(r4)
 5557fd0:	f800283a 	ret

05557fd4 <__sfp_lock_acquire>:
 5557fd4:	f800283a 	ret

05557fd8 <__sfp_lock_release>:
 5557fd8:	f800283a 	ret

05557fdc <__sinit_lock_acquire>:
 5557fdc:	f800283a 	ret

05557fe0 <__sinit_lock_release>:
 5557fe0:	f800283a 	ret

05557fe4 <__sinit>:
 5557fe4:	20800e17 	ldw	r2,56(r4)
 5557fe8:	defffd04 	addi	sp,sp,-12
 5557fec:	dc400115 	stw	r17,4(sp)
 5557ff0:	dc000015 	stw	r16,0(sp)
 5557ff4:	dfc00215 	stw	ra,8(sp)
 5557ff8:	04400044 	movi	r17,1
 5557ffc:	01400104 	movi	r5,4
 5558000:	000d883a 	mov	r6,zero
 5558004:	2021883a 	mov	r16,r4
 5558008:	2200bb04 	addi	r8,r4,748
 555800c:	200f883a 	mov	r7,r4
 5558010:	10000526 	beq	r2,zero,5558028 <__sinit+0x44>
 5558014:	dfc00217 	ldw	ra,8(sp)
 5558018:	dc400117 	ldw	r17,4(sp)
 555801c:	dc000017 	ldw	r16,0(sp)
 5558020:	dec00304 	addi	sp,sp,12
 5558024:	f800283a 	ret
 5558028:	21000117 	ldw	r4,4(r4)
 555802c:	008155b4 	movhi	r2,1366
 5558030:	10a03204 	addi	r2,r2,-32568
 5558034:	00c000c4 	movi	r3,3
 5558038:	80800f15 	stw	r2,60(r16)
 555803c:	80c0b915 	stw	r3,740(r16)
 5558040:	8200ba15 	stw	r8,744(r16)
 5558044:	84400e15 	stw	r17,56(r16)
 5558048:	8000b815 	stw	zero,736(r16)
 555804c:	5557f7c0 	call	5557f7c <std>
 5558050:	81000217 	ldw	r4,8(r16)
 5558054:	880d883a 	mov	r6,r17
 5558058:	800f883a 	mov	r7,r16
 555805c:	01400284 	movi	r5,10
 5558060:	5557f7c0 	call	5557f7c <std>
 5558064:	81000317 	ldw	r4,12(r16)
 5558068:	800f883a 	mov	r7,r16
 555806c:	01400484 	movi	r5,18
 5558070:	01800084 	movi	r6,2
 5558074:	dfc00217 	ldw	ra,8(sp)
 5558078:	dc400117 	ldw	r17,4(sp)
 555807c:	dc000017 	ldw	r16,0(sp)
 5558080:	dec00304 	addi	sp,sp,12
 5558084:	5557f7c1 	jmpi	5557f7c <std>

05558088 <__fp_lock>:
 5558088:	0005883a 	mov	r2,zero
 555808c:	f800283a 	ret

05558090 <__fp_unlock>:
 5558090:	0005883a 	mov	r2,zero
 5558094:	f800283a 	ret

05558098 <__fp_unlock_all>:
 5558098:	008155b4 	movhi	r2,1366
 555809c:	10b86304 	addi	r2,r2,-7796
 55580a0:	11000017 	ldw	r4,0(r2)
 55580a4:	014155b4 	movhi	r5,1366
 55580a8:	29602404 	addi	r5,r5,-32624
 55580ac:	55587441 	jmpi	5558744 <_fwalk>

055580b0 <__fp_lock_all>:
 55580b0:	008155b4 	movhi	r2,1366
 55580b4:	10b86304 	addi	r2,r2,-7796
 55580b8:	11000017 	ldw	r4,0(r2)
 55580bc:	014155b4 	movhi	r5,1366
 55580c0:	29602204 	addi	r5,r5,-32632
 55580c4:	55587441 	jmpi	5558744 <_fwalk>

055580c8 <_cleanup_r>:
 55580c8:	014155b4 	movhi	r5,1366
 55580cc:	29635b04 	addi	r5,r5,-29332
 55580d0:	55587441 	jmpi	5558744 <_fwalk>

055580d4 <_cleanup>:
 55580d4:	008155b4 	movhi	r2,1366
 55580d8:	10b86404 	addi	r2,r2,-7792
 55580dc:	11000017 	ldw	r4,0(r2)
 55580e0:	55580c81 	jmpi	55580c8 <_cleanup_r>

055580e4 <__sfmoreglue>:
 55580e4:	defffc04 	addi	sp,sp,-16
 55580e8:	dc400115 	stw	r17,4(sp)
 55580ec:	2c401724 	muli	r17,r5,92
 55580f0:	dc800215 	stw	r18,8(sp)
 55580f4:	2825883a 	mov	r18,r5
 55580f8:	89400304 	addi	r5,r17,12
 55580fc:	dc000015 	stw	r16,0(sp)
 5558100:	dfc00315 	stw	ra,12(sp)
 5558104:	5556c080 	call	5556c08 <_malloc_r>
 5558108:	0021883a 	mov	r16,zero
 555810c:	880d883a 	mov	r6,r17
 5558110:	000b883a 	mov	r5,zero
 5558114:	10000626 	beq	r2,zero,5558130 <__sfmoreglue+0x4c>
 5558118:	11000304 	addi	r4,r2,12
 555811c:	14800115 	stw	r18,4(r2)
 5558120:	10000015 	stw	zero,0(r2)
 5558124:	11000215 	stw	r4,8(r2)
 5558128:	1021883a 	mov	r16,r2
 555812c:	55589900 	call	5558990 <memset>
 5558130:	8005883a 	mov	r2,r16
 5558134:	dfc00317 	ldw	ra,12(sp)
 5558138:	dc800217 	ldw	r18,8(sp)
 555813c:	dc400117 	ldw	r17,4(sp)
 5558140:	dc000017 	ldw	r16,0(sp)
 5558144:	dec00404 	addi	sp,sp,16
 5558148:	f800283a 	ret

0555814c <__sfp>:
 555814c:	defffd04 	addi	sp,sp,-12
 5558150:	008155b4 	movhi	r2,1366
 5558154:	10b86404 	addi	r2,r2,-7792
 5558158:	dc000015 	stw	r16,0(sp)
 555815c:	14000017 	ldw	r16,0(r2)
 5558160:	dc400115 	stw	r17,4(sp)
 5558164:	dfc00215 	stw	ra,8(sp)
 5558168:	80800e17 	ldw	r2,56(r16)
 555816c:	2023883a 	mov	r17,r4
 5558170:	10002626 	beq	r2,zero,555820c <__sfp+0xc0>
 5558174:	8400b804 	addi	r16,r16,736
 5558178:	80800117 	ldw	r2,4(r16)
 555817c:	81000217 	ldw	r4,8(r16)
 5558180:	10ffffc4 	addi	r3,r2,-1
 5558184:	18000916 	blt	r3,zero,55581ac <__sfp+0x60>
 5558188:	2080030f 	ldh	r2,12(r4)
 555818c:	10000b26 	beq	r2,zero,55581bc <__sfp+0x70>
 5558190:	017fffc4 	movi	r5,-1
 5558194:	00000206 	br	55581a0 <__sfp+0x54>
 5558198:	2080030f 	ldh	r2,12(r4)
 555819c:	10000726 	beq	r2,zero,55581bc <__sfp+0x70>
 55581a0:	18ffffc4 	addi	r3,r3,-1
 55581a4:	21001704 	addi	r4,r4,92
 55581a8:	197ffb1e 	bne	r3,r5,5558198 <__sfp+0x4c>
 55581ac:	80800017 	ldw	r2,0(r16)
 55581b0:	10001926 	beq	r2,zero,5558218 <__sfp+0xcc>
 55581b4:	1021883a 	mov	r16,r2
 55581b8:	003fef06 	br	5558178 <__sfp+0x2c>
 55581bc:	00bfffc4 	movi	r2,-1
 55581c0:	00c00044 	movi	r3,1
 55581c4:	2080038d 	sth	r2,14(r4)
 55581c8:	20c0030d 	sth	r3,12(r4)
 55581cc:	20000015 	stw	zero,0(r4)
 55581d0:	20000215 	stw	zero,8(r4)
 55581d4:	20000115 	stw	zero,4(r4)
 55581d8:	20000415 	stw	zero,16(r4)
 55581dc:	20000515 	stw	zero,20(r4)
 55581e0:	20000615 	stw	zero,24(r4)
 55581e4:	20000c15 	stw	zero,48(r4)
 55581e8:	20000d15 	stw	zero,52(r4)
 55581ec:	20001115 	stw	zero,68(r4)
 55581f0:	20001215 	stw	zero,72(r4)
 55581f4:	2005883a 	mov	r2,r4
 55581f8:	dfc00217 	ldw	ra,8(sp)
 55581fc:	dc400117 	ldw	r17,4(sp)
 5558200:	dc000017 	ldw	r16,0(sp)
 5558204:	dec00304 	addi	sp,sp,12
 5558208:	f800283a 	ret
 555820c:	8009883a 	mov	r4,r16
 5558210:	5557fe40 	call	5557fe4 <__sinit>
 5558214:	003fd706 	br	5558174 <__sfp+0x28>
 5558218:	8809883a 	mov	r4,r17
 555821c:	01400104 	movi	r5,4
 5558220:	55580e40 	call	55580e4 <__sfmoreglue>
 5558224:	80800015 	stw	r2,0(r16)
 5558228:	103fe21e 	bne	r2,zero,55581b4 <__sfp+0x68>
 555822c:	00800304 	movi	r2,12
 5558230:	0009883a 	mov	r4,zero
 5558234:	88800015 	stw	r2,0(r17)
 5558238:	003fee06 	br	55581f4 <__sfp+0xa8>

0555823c <_malloc_trim_r>:
 555823c:	defffb04 	addi	sp,sp,-20
 5558240:	dcc00315 	stw	r19,12(sp)
 5558244:	04c155b4 	movhi	r19,1366
 5558248:	9cf2df04 	addi	r19,r19,-13444
 555824c:	dc800215 	stw	r18,8(sp)
 5558250:	dc400115 	stw	r17,4(sp)
 5558254:	dc000015 	stw	r16,0(sp)
 5558258:	2823883a 	mov	r17,r5
 555825c:	2025883a 	mov	r18,r4
 5558260:	dfc00415 	stw	ra,16(sp)
 5558264:	55595d80 	call	55595d8 <__malloc_lock>
 5558268:	98800217 	ldw	r2,8(r19)
 555826c:	9009883a 	mov	r4,r18
 5558270:	000b883a 	mov	r5,zero
 5558274:	10c00117 	ldw	r3,4(r2)
 5558278:	00bfff04 	movi	r2,-4
 555827c:	18a0703a 	and	r16,r3,r2
 5558280:	8463c83a 	sub	r17,r16,r17
 5558284:	8c43fbc4 	addi	r17,r17,4079
 5558288:	8822d33a 	srli	r17,r17,12
 555828c:	0083ffc4 	movi	r2,4095
 5558290:	8c7fffc4 	addi	r17,r17,-1
 5558294:	8822933a 	slli	r17,r17,12
 5558298:	1440060e 	bge	r2,r17,55582b4 <_malloc_trim_r+0x78>
 555829c:	5557ba00 	call	5557ba0 <_sbrk_r>
 55582a0:	98c00217 	ldw	r3,8(r19)
 55582a4:	9009883a 	mov	r4,r18
 55582a8:	044bc83a 	sub	r5,zero,r17
 55582ac:	80c7883a 	add	r3,r16,r3
 55582b0:	10c00926 	beq	r2,r3,55582d8 <_malloc_trim_r+0x9c>
 55582b4:	55595f80 	call	55595f8 <__malloc_unlock>
 55582b8:	0005883a 	mov	r2,zero
 55582bc:	dfc00417 	ldw	ra,16(sp)
 55582c0:	dcc00317 	ldw	r19,12(sp)
 55582c4:	dc800217 	ldw	r18,8(sp)
 55582c8:	dc400117 	ldw	r17,4(sp)
 55582cc:	dc000017 	ldw	r16,0(sp)
 55582d0:	dec00504 	addi	sp,sp,20
 55582d4:	f800283a 	ret
 55582d8:	9009883a 	mov	r4,r18
 55582dc:	5557ba00 	call	5557ba0 <_sbrk_r>
 55582e0:	844dc83a 	sub	r6,r16,r17
 55582e4:	00ffffc4 	movi	r3,-1
 55582e8:	9009883a 	mov	r4,r18
 55582ec:	000b883a 	mov	r5,zero
 55582f0:	01c155b4 	movhi	r7,1366
 55582f4:	39c11504 	addi	r7,r7,1108
 55582f8:	31800054 	ori	r6,r6,1
 55582fc:	10c00926 	beq	r2,r3,5558324 <_malloc_trim_r+0xe8>
 5558300:	38800017 	ldw	r2,0(r7)
 5558304:	98c00217 	ldw	r3,8(r19)
 5558308:	9009883a 	mov	r4,r18
 555830c:	1445c83a 	sub	r2,r2,r17
 5558310:	38800015 	stw	r2,0(r7)
 5558314:	19800115 	stw	r6,4(r3)
 5558318:	55595f80 	call	55595f8 <__malloc_unlock>
 555831c:	00800044 	movi	r2,1
 5558320:	003fe606 	br	55582bc <_malloc_trim_r+0x80>
 5558324:	5557ba00 	call	5557ba0 <_sbrk_r>
 5558328:	99800217 	ldw	r6,8(r19)
 555832c:	100f883a 	mov	r7,r2
 5558330:	9009883a 	mov	r4,r18
 5558334:	1187c83a 	sub	r3,r2,r6
 5558338:	008003c4 	movi	r2,15
 555833c:	19400054 	ori	r5,r3,1
 5558340:	10ffdc0e 	bge	r2,r3,55582b4 <_malloc_trim_r+0x78>
 5558344:	008155b4 	movhi	r2,1366
 5558348:	10b86604 	addi	r2,r2,-7784
 555834c:	10c00017 	ldw	r3,0(r2)
 5558350:	008155b4 	movhi	r2,1366
 5558354:	10811504 	addi	r2,r2,1108
 5558358:	31400115 	stw	r5,4(r6)
 555835c:	38c7c83a 	sub	r3,r7,r3
 5558360:	10c00015 	stw	r3,0(r2)
 5558364:	003fd306 	br	55582b4 <_malloc_trim_r+0x78>

05558368 <_free_r>:
 5558368:	defffd04 	addi	sp,sp,-12
 555836c:	dc400115 	stw	r17,4(sp)
 5558370:	dc000015 	stw	r16,0(sp)
 5558374:	dfc00215 	stw	ra,8(sp)
 5558378:	2821883a 	mov	r16,r5
 555837c:	2023883a 	mov	r17,r4
 5558380:	28005a26 	beq	r5,zero,55584ec <_free_r+0x184>
 5558384:	55595d80 	call	55595d8 <__malloc_lock>
 5558388:	823ffe04 	addi	r8,r16,-8
 555838c:	41400117 	ldw	r5,4(r8)
 5558390:	00bfff84 	movi	r2,-2
 5558394:	028155b4 	movhi	r10,1366
 5558398:	52b2df04 	addi	r10,r10,-13444
 555839c:	288e703a 	and	r7,r5,r2
 55583a0:	41cd883a 	add	r6,r8,r7
 55583a4:	30c00117 	ldw	r3,4(r6)
 55583a8:	51000217 	ldw	r4,8(r10)
 55583ac:	00bfff04 	movi	r2,-4
 55583b0:	1892703a 	and	r9,r3,r2
 55583b4:	5017883a 	mov	r11,r10
 55583b8:	31006726 	beq	r6,r4,5558558 <_free_r+0x1f0>
 55583bc:	2880004c 	andi	r2,r5,1
 55583c0:	1005003a 	cmpeq	r2,r2,zero
 55583c4:	32400115 	stw	r9,4(r6)
 55583c8:	10001a1e 	bne	r2,zero,5558434 <_free_r+0xcc>
 55583cc:	000b883a 	mov	r5,zero
 55583d0:	3247883a 	add	r3,r6,r9
 55583d4:	18800117 	ldw	r2,4(r3)
 55583d8:	1080004c 	andi	r2,r2,1
 55583dc:	1000231e 	bne	r2,zero,555846c <_free_r+0x104>
 55583e0:	280ac03a 	cmpne	r5,r5,zero
 55583e4:	3a4f883a 	add	r7,r7,r9
 55583e8:	2800451e 	bne	r5,zero,5558500 <_free_r+0x198>
 55583ec:	31000217 	ldw	r4,8(r6)
 55583f0:	008155b4 	movhi	r2,1366
 55583f4:	10b2e104 	addi	r2,r2,-13436
 55583f8:	20807b26 	beq	r4,r2,55585e8 <_free_r+0x280>
 55583fc:	30800317 	ldw	r2,12(r6)
 5558400:	3a07883a 	add	r3,r7,r8
 5558404:	19c00015 	stw	r7,0(r3)
 5558408:	11000215 	stw	r4,8(r2)
 555840c:	20800315 	stw	r2,12(r4)
 5558410:	38800054 	ori	r2,r7,1
 5558414:	40800115 	stw	r2,4(r8)
 5558418:	28001a26 	beq	r5,zero,5558484 <_free_r+0x11c>
 555841c:	8809883a 	mov	r4,r17
 5558420:	dfc00217 	ldw	ra,8(sp)
 5558424:	dc400117 	ldw	r17,4(sp)
 5558428:	dc000017 	ldw	r16,0(sp)
 555842c:	dec00304 	addi	sp,sp,12
 5558430:	55595f81 	jmpi	55595f8 <__malloc_unlock>
 5558434:	80bffe17 	ldw	r2,-8(r16)
 5558438:	50c00204 	addi	r3,r10,8
 555843c:	4091c83a 	sub	r8,r8,r2
 5558440:	41000217 	ldw	r4,8(r8)
 5558444:	388f883a 	add	r7,r7,r2
 5558448:	20c06126 	beq	r4,r3,55585d0 <_free_r+0x268>
 555844c:	40800317 	ldw	r2,12(r8)
 5558450:	3247883a 	add	r3,r6,r9
 5558454:	000b883a 	mov	r5,zero
 5558458:	11000215 	stw	r4,8(r2)
 555845c:	20800315 	stw	r2,12(r4)
 5558460:	18800117 	ldw	r2,4(r3)
 5558464:	1080004c 	andi	r2,r2,1
 5558468:	103fdd26 	beq	r2,zero,55583e0 <_free_r+0x78>
 555846c:	38800054 	ori	r2,r7,1
 5558470:	3a07883a 	add	r3,r7,r8
 5558474:	280ac03a 	cmpne	r5,r5,zero
 5558478:	40800115 	stw	r2,4(r8)
 555847c:	19c00015 	stw	r7,0(r3)
 5558480:	283fe61e 	bne	r5,zero,555841c <_free_r+0xb4>
 5558484:	00807fc4 	movi	r2,511
 5558488:	11c01f2e 	bgeu	r2,r7,5558508 <_free_r+0x1a0>
 555848c:	3806d27a 	srli	r3,r7,9
 5558490:	1800481e 	bne	r3,zero,55585b4 <_free_r+0x24c>
 5558494:	3804d0fa 	srli	r2,r7,3
 5558498:	100690fa 	slli	r3,r2,3
 555849c:	1acd883a 	add	r6,r3,r11
 55584a0:	31400217 	ldw	r5,8(r6)
 55584a4:	31405926 	beq	r6,r5,555860c <_free_r+0x2a4>
 55584a8:	28800117 	ldw	r2,4(r5)
 55584ac:	00ffff04 	movi	r3,-4
 55584b0:	10c4703a 	and	r2,r2,r3
 55584b4:	3880022e 	bgeu	r7,r2,55584c0 <_free_r+0x158>
 55584b8:	29400217 	ldw	r5,8(r5)
 55584bc:	317ffa1e 	bne	r6,r5,55584a8 <_free_r+0x140>
 55584c0:	29800317 	ldw	r6,12(r5)
 55584c4:	41800315 	stw	r6,12(r8)
 55584c8:	41400215 	stw	r5,8(r8)
 55584cc:	8809883a 	mov	r4,r17
 55584d0:	2a000315 	stw	r8,12(r5)
 55584d4:	32000215 	stw	r8,8(r6)
 55584d8:	dfc00217 	ldw	ra,8(sp)
 55584dc:	dc400117 	ldw	r17,4(sp)
 55584e0:	dc000017 	ldw	r16,0(sp)
 55584e4:	dec00304 	addi	sp,sp,12
 55584e8:	55595f81 	jmpi	55595f8 <__malloc_unlock>
 55584ec:	dfc00217 	ldw	ra,8(sp)
 55584f0:	dc400117 	ldw	r17,4(sp)
 55584f4:	dc000017 	ldw	r16,0(sp)
 55584f8:	dec00304 	addi	sp,sp,12
 55584fc:	f800283a 	ret
 5558500:	31000217 	ldw	r4,8(r6)
 5558504:	003fbd06 	br	55583fc <_free_r+0x94>
 5558508:	3806d0fa 	srli	r3,r7,3
 555850c:	00800044 	movi	r2,1
 5558510:	51400117 	ldw	r5,4(r10)
 5558514:	180890fa 	slli	r4,r3,3
 5558518:	1807d0ba 	srai	r3,r3,2
 555851c:	22c9883a 	add	r4,r4,r11
 5558520:	21800217 	ldw	r6,8(r4)
 5558524:	10c4983a 	sll	r2,r2,r3
 5558528:	41000315 	stw	r4,12(r8)
 555852c:	41800215 	stw	r6,8(r8)
 5558530:	288ab03a 	or	r5,r5,r2
 5558534:	22000215 	stw	r8,8(r4)
 5558538:	8809883a 	mov	r4,r17
 555853c:	51400115 	stw	r5,4(r10)
 5558540:	32000315 	stw	r8,12(r6)
 5558544:	dfc00217 	ldw	ra,8(sp)
 5558548:	dc400117 	ldw	r17,4(sp)
 555854c:	dc000017 	ldw	r16,0(sp)
 5558550:	dec00304 	addi	sp,sp,12
 5558554:	55595f81 	jmpi	55595f8 <__malloc_unlock>
 5558558:	2880004c 	andi	r2,r5,1
 555855c:	3a4d883a 	add	r6,r7,r9
 5558560:	1000071e 	bne	r2,zero,5558580 <_free_r+0x218>
 5558564:	80bffe17 	ldw	r2,-8(r16)
 5558568:	4091c83a 	sub	r8,r8,r2
 555856c:	41000317 	ldw	r4,12(r8)
 5558570:	40c00217 	ldw	r3,8(r8)
 5558574:	308d883a 	add	r6,r6,r2
 5558578:	20c00215 	stw	r3,8(r4)
 555857c:	19000315 	stw	r4,12(r3)
 5558580:	008155b4 	movhi	r2,1366
 5558584:	10b86504 	addi	r2,r2,-7788
 5558588:	11000017 	ldw	r4,0(r2)
 555858c:	30c00054 	ori	r3,r6,1
 5558590:	52000215 	stw	r8,8(r10)
 5558594:	40c00115 	stw	r3,4(r8)
 5558598:	313fa036 	bltu	r6,r4,555841c <_free_r+0xb4>
 555859c:	008155b4 	movhi	r2,1366
 55585a0:	10810b04 	addi	r2,r2,1068
 55585a4:	11400017 	ldw	r5,0(r2)
 55585a8:	8809883a 	mov	r4,r17
 55585ac:	555823c0 	call	555823c <_malloc_trim_r>
 55585b0:	003f9a06 	br	555841c <_free_r+0xb4>
 55585b4:	00800104 	movi	r2,4
 55585b8:	10c0072e 	bgeu	r2,r3,55585d8 <_free_r+0x270>
 55585bc:	00800504 	movi	r2,20
 55585c0:	10c01936 	bltu	r2,r3,5558628 <_free_r+0x2c0>
 55585c4:	188016c4 	addi	r2,r3,91
 55585c8:	100690fa 	slli	r3,r2,3
 55585cc:	003fb306 	br	555849c <_free_r+0x134>
 55585d0:	01400044 	movi	r5,1
 55585d4:	003f7e06 	br	55583d0 <_free_r+0x68>
 55585d8:	3804d1ba 	srli	r2,r7,6
 55585dc:	10800e04 	addi	r2,r2,56
 55585e0:	100690fa 	slli	r3,r2,3
 55585e4:	003fad06 	br	555849c <_free_r+0x134>
 55585e8:	22000315 	stw	r8,12(r4)
 55585ec:	22000215 	stw	r8,8(r4)
 55585f0:	3a05883a 	add	r2,r7,r8
 55585f4:	38c00054 	ori	r3,r7,1
 55585f8:	11c00015 	stw	r7,0(r2)
 55585fc:	41000215 	stw	r4,8(r8)
 5558600:	40c00115 	stw	r3,4(r8)
 5558604:	41000315 	stw	r4,12(r8)
 5558608:	003f8406 	br	555841c <_free_r+0xb4>
 555860c:	1005d0ba 	srai	r2,r2,2
 5558610:	00c00044 	movi	r3,1
 5558614:	51000117 	ldw	r4,4(r10)
 5558618:	1886983a 	sll	r3,r3,r2
 555861c:	20c8b03a 	or	r4,r4,r3
 5558620:	51000115 	stw	r4,4(r10)
 5558624:	003fa706 	br	55584c4 <_free_r+0x15c>
 5558628:	00801504 	movi	r2,84
 555862c:	10c00436 	bltu	r2,r3,5558640 <_free_r+0x2d8>
 5558630:	3804d33a 	srli	r2,r7,12
 5558634:	10801b84 	addi	r2,r2,110
 5558638:	100690fa 	slli	r3,r2,3
 555863c:	003f9706 	br	555849c <_free_r+0x134>
 5558640:	00805504 	movi	r2,340
 5558644:	10c00436 	bltu	r2,r3,5558658 <_free_r+0x2f0>
 5558648:	3804d3fa 	srli	r2,r7,15
 555864c:	10801dc4 	addi	r2,r2,119
 5558650:	100690fa 	slli	r3,r2,3
 5558654:	003f9106 	br	555849c <_free_r+0x134>
 5558658:	00815504 	movi	r2,1364
 555865c:	10c0032e 	bgeu	r2,r3,555866c <_free_r+0x304>
 5558660:	00801f84 	movi	r2,126
 5558664:	00c0fc04 	movi	r3,1008
 5558668:	003f8c06 	br	555849c <_free_r+0x134>
 555866c:	3804d4ba 	srli	r2,r7,18
 5558670:	10801f04 	addi	r2,r2,124
 5558674:	100690fa 	slli	r3,r2,3
 5558678:	003f8806 	br	555849c <_free_r+0x134>

0555867c <_fwalk_reent>:
 555867c:	defff704 	addi	sp,sp,-36
 5558680:	dcc00315 	stw	r19,12(sp)
 5558684:	24c0b804 	addi	r19,r4,736
 5558688:	dd800615 	stw	r22,24(sp)
 555868c:	dd400515 	stw	r21,20(sp)
 5558690:	dfc00815 	stw	ra,32(sp)
 5558694:	ddc00715 	stw	r23,28(sp)
 5558698:	dd000415 	stw	r20,16(sp)
 555869c:	dc800215 	stw	r18,8(sp)
 55586a0:	dc400115 	stw	r17,4(sp)
 55586a4:	dc000015 	stw	r16,0(sp)
 55586a8:	202b883a 	mov	r21,r4
 55586ac:	282d883a 	mov	r22,r5
 55586b0:	5557fd40 	call	5557fd4 <__sfp_lock_acquire>
 55586b4:	98002126 	beq	r19,zero,555873c <_fwalk_reent+0xc0>
 55586b8:	002f883a 	mov	r23,zero
 55586bc:	9c800117 	ldw	r18,4(r19)
 55586c0:	9c000217 	ldw	r16,8(r19)
 55586c4:	90bfffc4 	addi	r2,r18,-1
 55586c8:	10000d16 	blt	r2,zero,5558700 <_fwalk_reent+0x84>
 55586cc:	0023883a 	mov	r17,zero
 55586d0:	053fffc4 	movi	r20,-1
 55586d4:	8080030f 	ldh	r2,12(r16)
 55586d8:	8c400044 	addi	r17,r17,1
 55586dc:	10000626 	beq	r2,zero,55586f8 <_fwalk_reent+0x7c>
 55586e0:	8080038f 	ldh	r2,14(r16)
 55586e4:	800b883a 	mov	r5,r16
 55586e8:	a809883a 	mov	r4,r21
 55586ec:	15000226 	beq	r2,r20,55586f8 <_fwalk_reent+0x7c>
 55586f0:	b03ee83a 	callr	r22
 55586f4:	b8aeb03a 	or	r23,r23,r2
 55586f8:	84001704 	addi	r16,r16,92
 55586fc:	947ff51e 	bne	r18,r17,55586d4 <_fwalk_reent+0x58>
 5558700:	9cc00017 	ldw	r19,0(r19)
 5558704:	983fed1e 	bne	r19,zero,55586bc <_fwalk_reent+0x40>
 5558708:	5557fd80 	call	5557fd8 <__sfp_lock_release>
 555870c:	b805883a 	mov	r2,r23
 5558710:	dfc00817 	ldw	ra,32(sp)
 5558714:	ddc00717 	ldw	r23,28(sp)
 5558718:	dd800617 	ldw	r22,24(sp)
 555871c:	dd400517 	ldw	r21,20(sp)
 5558720:	dd000417 	ldw	r20,16(sp)
 5558724:	dcc00317 	ldw	r19,12(sp)
 5558728:	dc800217 	ldw	r18,8(sp)
 555872c:	dc400117 	ldw	r17,4(sp)
 5558730:	dc000017 	ldw	r16,0(sp)
 5558734:	dec00904 	addi	sp,sp,36
 5558738:	f800283a 	ret
 555873c:	002f883a 	mov	r23,zero
 5558740:	003ff106 	br	5558708 <_fwalk_reent+0x8c>

05558744 <_fwalk>:
 5558744:	defff804 	addi	sp,sp,-32
 5558748:	dcc00315 	stw	r19,12(sp)
 555874c:	24c0b804 	addi	r19,r4,736
 5558750:	dd400515 	stw	r21,20(sp)
 5558754:	dfc00715 	stw	ra,28(sp)
 5558758:	dd800615 	stw	r22,24(sp)
 555875c:	dd000415 	stw	r20,16(sp)
 5558760:	dc800215 	stw	r18,8(sp)
 5558764:	dc400115 	stw	r17,4(sp)
 5558768:	dc000015 	stw	r16,0(sp)
 555876c:	282b883a 	mov	r21,r5
 5558770:	5557fd40 	call	5557fd4 <__sfp_lock_acquire>
 5558774:	98001f26 	beq	r19,zero,55587f4 <_fwalk+0xb0>
 5558778:	002d883a 	mov	r22,zero
 555877c:	9c800117 	ldw	r18,4(r19)
 5558780:	9c000217 	ldw	r16,8(r19)
 5558784:	90bfffc4 	addi	r2,r18,-1
 5558788:	10000c16 	blt	r2,zero,55587bc <_fwalk+0x78>
 555878c:	0023883a 	mov	r17,zero
 5558790:	053fffc4 	movi	r20,-1
 5558794:	8080030f 	ldh	r2,12(r16)
 5558798:	8c400044 	addi	r17,r17,1
 555879c:	10000526 	beq	r2,zero,55587b4 <_fwalk+0x70>
 55587a0:	8080038f 	ldh	r2,14(r16)
 55587a4:	8009883a 	mov	r4,r16
 55587a8:	15000226 	beq	r2,r20,55587b4 <_fwalk+0x70>
 55587ac:	a83ee83a 	callr	r21
 55587b0:	b0acb03a 	or	r22,r22,r2
 55587b4:	84001704 	addi	r16,r16,92
 55587b8:	947ff61e 	bne	r18,r17,5558794 <_fwalk+0x50>
 55587bc:	9cc00017 	ldw	r19,0(r19)
 55587c0:	983fee1e 	bne	r19,zero,555877c <_fwalk+0x38>
 55587c4:	5557fd80 	call	5557fd8 <__sfp_lock_release>
 55587c8:	b005883a 	mov	r2,r22
 55587cc:	dfc00717 	ldw	ra,28(sp)
 55587d0:	dd800617 	ldw	r22,24(sp)
 55587d4:	dd400517 	ldw	r21,20(sp)
 55587d8:	dd000417 	ldw	r20,16(sp)
 55587dc:	dcc00317 	ldw	r19,12(sp)
 55587e0:	dc800217 	ldw	r18,8(sp)
 55587e4:	dc400117 	ldw	r17,4(sp)
 55587e8:	dc000017 	ldw	r16,0(sp)
 55587ec:	dec00804 	addi	sp,sp,32
 55587f0:	f800283a 	ret
 55587f4:	002d883a 	mov	r22,zero
 55587f8:	003ff206 	br	55587c4 <_fwalk+0x80>

055587fc <__smakebuf_r>:
 55587fc:	2880030b 	ldhu	r2,12(r5)
 5558800:	deffed04 	addi	sp,sp,-76
 5558804:	dc401015 	stw	r17,64(sp)
 5558808:	1080008c 	andi	r2,r2,2
 555880c:	dc000f15 	stw	r16,60(sp)
 5558810:	dfc01215 	stw	ra,72(sp)
 5558814:	dc801115 	stw	r18,68(sp)
 5558818:	2821883a 	mov	r16,r5
 555881c:	2023883a 	mov	r17,r4
 5558820:	10000b26 	beq	r2,zero,5558850 <__smakebuf_r+0x54>
 5558824:	28c010c4 	addi	r3,r5,67
 5558828:	00800044 	movi	r2,1
 555882c:	28800515 	stw	r2,20(r5)
 5558830:	28c00415 	stw	r3,16(r5)
 5558834:	28c00015 	stw	r3,0(r5)
 5558838:	dfc01217 	ldw	ra,72(sp)
 555883c:	dc801117 	ldw	r18,68(sp)
 5558840:	dc401017 	ldw	r17,64(sp)
 5558844:	dc000f17 	ldw	r16,60(sp)
 5558848:	dec01304 	addi	sp,sp,76
 555884c:	f800283a 	ret
 5558850:	2940038f 	ldh	r5,14(r5)
 5558854:	28002116 	blt	r5,zero,55588dc <__smakebuf_r+0xe0>
 5558858:	d80d883a 	mov	r6,sp
 555885c:	5558d800 	call	5558d80 <_fstat_r>
 5558860:	10001e16 	blt	r2,zero,55588dc <__smakebuf_r+0xe0>
 5558864:	d8800117 	ldw	r2,4(sp)
 5558868:	00e00014 	movui	r3,32768
 555886c:	113c000c 	andi	r4,r2,61440
 5558870:	20c03126 	beq	r4,r3,5558938 <__smakebuf_r+0x13c>
 5558874:	8080030b 	ldhu	r2,12(r16)
 5558878:	00c80004 	movi	r3,8192
 555887c:	10820014 	ori	r2,r2,2048
 5558880:	8080030d 	sth	r2,12(r16)
 5558884:	20c01e26 	beq	r4,r3,5558900 <__smakebuf_r+0x104>
 5558888:	04810004 	movi	r18,1024
 555888c:	8809883a 	mov	r4,r17
 5558890:	900b883a 	mov	r5,r18
 5558894:	5556c080 	call	5556c08 <_malloc_r>
 5558898:	1009883a 	mov	r4,r2
 555889c:	10003126 	beq	r2,zero,5558964 <__smakebuf_r+0x168>
 55588a0:	80c0030b 	ldhu	r3,12(r16)
 55588a4:	008155b4 	movhi	r2,1366
 55588a8:	10a03204 	addi	r2,r2,-32568
 55588ac:	88800f15 	stw	r2,60(r17)
 55588b0:	18c02014 	ori	r3,r3,128
 55588b4:	84800515 	stw	r18,20(r16)
 55588b8:	80c0030d 	sth	r3,12(r16)
 55588bc:	81000415 	stw	r4,16(r16)
 55588c0:	81000015 	stw	r4,0(r16)
 55588c4:	dfc01217 	ldw	ra,72(sp)
 55588c8:	dc801117 	ldw	r18,68(sp)
 55588cc:	dc401017 	ldw	r17,64(sp)
 55588d0:	dc000f17 	ldw	r16,60(sp)
 55588d4:	dec01304 	addi	sp,sp,76
 55588d8:	f800283a 	ret
 55588dc:	80c0030b 	ldhu	r3,12(r16)
 55588e0:	1880200c 	andi	r2,r3,128
 55588e4:	10000426 	beq	r2,zero,55588f8 <__smakebuf_r+0xfc>
 55588e8:	04801004 	movi	r18,64
 55588ec:	18820014 	ori	r2,r3,2048
 55588f0:	8080030d 	sth	r2,12(r16)
 55588f4:	003fe506 	br	555888c <__smakebuf_r+0x90>
 55588f8:	04810004 	movi	r18,1024
 55588fc:	003ffb06 	br	55588ec <__smakebuf_r+0xf0>
 5558900:	8140038f 	ldh	r5,14(r16)
 5558904:	8809883a 	mov	r4,r17
 5558908:	5558df40 	call	5558df4 <_isatty_r>
 555890c:	103fde26 	beq	r2,zero,5558888 <__smakebuf_r+0x8c>
 5558910:	8080030b 	ldhu	r2,12(r16)
 5558914:	80c010c4 	addi	r3,r16,67
 5558918:	04810004 	movi	r18,1024
 555891c:	10800054 	ori	r2,r2,1
 5558920:	8080030d 	sth	r2,12(r16)
 5558924:	00800044 	movi	r2,1
 5558928:	80c00415 	stw	r3,16(r16)
 555892c:	80800515 	stw	r2,20(r16)
 5558930:	80c00015 	stw	r3,0(r16)
 5558934:	003fd506 	br	555888c <__smakebuf_r+0x90>
 5558938:	80c00a17 	ldw	r3,40(r16)
 555893c:	008155b4 	movhi	r2,1366
 5558940:	10a28c04 	addi	r2,r2,-30160
 5558944:	18bfcb1e 	bne	r3,r2,5558874 <__smakebuf_r+0x78>
 5558948:	8080030b 	ldhu	r2,12(r16)
 555894c:	00c10004 	movi	r3,1024
 5558950:	1825883a 	mov	r18,r3
 5558954:	10c4b03a 	or	r2,r2,r3
 5558958:	8080030d 	sth	r2,12(r16)
 555895c:	80c01315 	stw	r3,76(r16)
 5558960:	003fca06 	br	555888c <__smakebuf_r+0x90>
 5558964:	8100030b 	ldhu	r4,12(r16)
 5558968:	2080800c 	andi	r2,r4,512
 555896c:	103fb21e 	bne	r2,zero,5558838 <__smakebuf_r+0x3c>
 5558970:	80c010c4 	addi	r3,r16,67
 5558974:	21000094 	ori	r4,r4,2
 5558978:	00800044 	movi	r2,1
 555897c:	80800515 	stw	r2,20(r16)
 5558980:	8100030d 	sth	r4,12(r16)
 5558984:	80c00415 	stw	r3,16(r16)
 5558988:	80c00015 	stw	r3,0(r16)
 555898c:	003faa06 	br	5558838 <__smakebuf_r+0x3c>

05558990 <memset>:
 5558990:	008000c4 	movi	r2,3
 5558994:	29403fcc 	andi	r5,r5,255
 5558998:	2007883a 	mov	r3,r4
 555899c:	1180022e 	bgeu	r2,r6,55589a8 <memset+0x18>
 55589a0:	2084703a 	and	r2,r4,r2
 55589a4:	10000826 	beq	r2,zero,55589c8 <memset+0x38>
 55589a8:	30000526 	beq	r6,zero,55589c0 <memset+0x30>
 55589ac:	2805883a 	mov	r2,r5
 55589b0:	30cd883a 	add	r6,r6,r3
 55589b4:	18800005 	stb	r2,0(r3)
 55589b8:	18c00044 	addi	r3,r3,1
 55589bc:	19bffd1e 	bne	r3,r6,55589b4 <memset+0x24>
 55589c0:	2005883a 	mov	r2,r4
 55589c4:	f800283a 	ret
 55589c8:	2804923a 	slli	r2,r5,8
 55589cc:	020003c4 	movi	r8,15
 55589d0:	200f883a 	mov	r7,r4
 55589d4:	2884b03a 	or	r2,r5,r2
 55589d8:	1006943a 	slli	r3,r2,16
 55589dc:	10c6b03a 	or	r3,r2,r3
 55589e0:	41800a2e 	bgeu	r8,r6,5558a0c <memset+0x7c>
 55589e4:	4005883a 	mov	r2,r8
 55589e8:	31bffc04 	addi	r6,r6,-16
 55589ec:	38c00015 	stw	r3,0(r7)
 55589f0:	38c00115 	stw	r3,4(r7)
 55589f4:	38c00215 	stw	r3,8(r7)
 55589f8:	38c00315 	stw	r3,12(r7)
 55589fc:	39c00404 	addi	r7,r7,16
 5558a00:	11bff936 	bltu	r2,r6,55589e8 <memset+0x58>
 5558a04:	008000c4 	movi	r2,3
 5558a08:	1180052e 	bgeu	r2,r6,5558a20 <memset+0x90>
 5558a0c:	31bfff04 	addi	r6,r6,-4
 5558a10:	008000c4 	movi	r2,3
 5558a14:	38c00015 	stw	r3,0(r7)
 5558a18:	39c00104 	addi	r7,r7,4
 5558a1c:	11bffb36 	bltu	r2,r6,5558a0c <memset+0x7c>
 5558a20:	3807883a 	mov	r3,r7
 5558a24:	003fe006 	br	55589a8 <memset+0x18>

05558a28 <__sclose>:
 5558a28:	2940038f 	ldh	r5,14(r5)
 5558a2c:	5558bec1 	jmpi	5558bec <_close_r>

05558a30 <__sseek>:
 5558a30:	defffe04 	addi	sp,sp,-8
 5558a34:	dc000015 	stw	r16,0(sp)
 5558a38:	2821883a 	mov	r16,r5
 5558a3c:	2940038f 	ldh	r5,14(r5)
 5558a40:	dfc00115 	stw	ra,4(sp)
 5558a44:	5558e640 	call	5558e64 <_lseek_r>
 5558a48:	1007883a 	mov	r3,r2
 5558a4c:	00bfffc4 	movi	r2,-1
 5558a50:	18800926 	beq	r3,r2,5558a78 <__sseek+0x48>
 5558a54:	8080030b 	ldhu	r2,12(r16)
 5558a58:	80c01415 	stw	r3,80(r16)
 5558a5c:	10840014 	ori	r2,r2,4096
 5558a60:	8080030d 	sth	r2,12(r16)
 5558a64:	1805883a 	mov	r2,r3
 5558a68:	dfc00117 	ldw	ra,4(sp)
 5558a6c:	dc000017 	ldw	r16,0(sp)
 5558a70:	dec00204 	addi	sp,sp,8
 5558a74:	f800283a 	ret
 5558a78:	8080030b 	ldhu	r2,12(r16)
 5558a7c:	10bbffcc 	andi	r2,r2,61439
 5558a80:	8080030d 	sth	r2,12(r16)
 5558a84:	1805883a 	mov	r2,r3
 5558a88:	dfc00117 	ldw	ra,4(sp)
 5558a8c:	dc000017 	ldw	r16,0(sp)
 5558a90:	dec00204 	addi	sp,sp,8
 5558a94:	f800283a 	ret

05558a98 <__swrite>:
 5558a98:	2880030b 	ldhu	r2,12(r5)
 5558a9c:	defffb04 	addi	sp,sp,-20
 5558aa0:	dcc00315 	stw	r19,12(sp)
 5558aa4:	1080400c 	andi	r2,r2,256
 5558aa8:	dc800215 	stw	r18,8(sp)
 5558aac:	dc400115 	stw	r17,4(sp)
 5558ab0:	dc000015 	stw	r16,0(sp)
 5558ab4:	3027883a 	mov	r19,r6
 5558ab8:	3825883a 	mov	r18,r7
 5558abc:	dfc00415 	stw	ra,16(sp)
 5558ac0:	2821883a 	mov	r16,r5
 5558ac4:	000d883a 	mov	r6,zero
 5558ac8:	01c00084 	movi	r7,2
 5558acc:	2023883a 	mov	r17,r4
 5558ad0:	10000226 	beq	r2,zero,5558adc <__swrite+0x44>
 5558ad4:	2940038f 	ldh	r5,14(r5)
 5558ad8:	5558e640 	call	5558e64 <_lseek_r>
 5558adc:	8080030b 	ldhu	r2,12(r16)
 5558ae0:	8140038f 	ldh	r5,14(r16)
 5558ae4:	8809883a 	mov	r4,r17
 5558ae8:	10bbffcc 	andi	r2,r2,61439
 5558aec:	980d883a 	mov	r6,r19
 5558af0:	900f883a 	mov	r7,r18
 5558af4:	8080030d 	sth	r2,12(r16)
 5558af8:	dfc00417 	ldw	ra,16(sp)
 5558afc:	dcc00317 	ldw	r19,12(sp)
 5558b00:	dc800217 	ldw	r18,8(sp)
 5558b04:	dc400117 	ldw	r17,4(sp)
 5558b08:	dc000017 	ldw	r16,0(sp)
 5558b0c:	dec00504 	addi	sp,sp,20
 5558b10:	5558b741 	jmpi	5558b74 <_write_r>

05558b14 <__sread>:
 5558b14:	defffe04 	addi	sp,sp,-8
 5558b18:	dc000015 	stw	r16,0(sp)
 5558b1c:	2821883a 	mov	r16,r5
 5558b20:	2940038f 	ldh	r5,14(r5)
 5558b24:	dfc00115 	stw	ra,4(sp)
 5558b28:	5558edc0 	call	5558edc <_read_r>
 5558b2c:	1007883a 	mov	r3,r2
 5558b30:	10000816 	blt	r2,zero,5558b54 <__sread+0x40>
 5558b34:	80801417 	ldw	r2,80(r16)
 5558b38:	10c5883a 	add	r2,r2,r3
 5558b3c:	80801415 	stw	r2,80(r16)
 5558b40:	1805883a 	mov	r2,r3
 5558b44:	dfc00117 	ldw	ra,4(sp)
 5558b48:	dc000017 	ldw	r16,0(sp)
 5558b4c:	dec00204 	addi	sp,sp,8
 5558b50:	f800283a 	ret
 5558b54:	8080030b 	ldhu	r2,12(r16)
 5558b58:	10bbffcc 	andi	r2,r2,61439
 5558b5c:	8080030d 	sth	r2,12(r16)
 5558b60:	1805883a 	mov	r2,r3
 5558b64:	dfc00117 	ldw	ra,4(sp)
 5558b68:	dc000017 	ldw	r16,0(sp)
 5558b6c:	dec00204 	addi	sp,sp,8
 5558b70:	f800283a 	ret

05558b74 <_write_r>:
 5558b74:	defffd04 	addi	sp,sp,-12
 5558b78:	dc000015 	stw	r16,0(sp)
 5558b7c:	040155b4 	movhi	r16,1366
 5558b80:	84010e04 	addi	r16,r16,1080
 5558b84:	dc400115 	stw	r17,4(sp)
 5558b88:	80000015 	stw	zero,0(r16)
 5558b8c:	2023883a 	mov	r17,r4
 5558b90:	2809883a 	mov	r4,r5
 5558b94:	300b883a 	mov	r5,r6
 5558b98:	380d883a 	mov	r6,r7
 5558b9c:	dfc00215 	stw	ra,8(sp)
 5558ba0:	55598b40 	call	55598b4 <write>
 5558ba4:	1007883a 	mov	r3,r2
 5558ba8:	00bfffc4 	movi	r2,-1
 5558bac:	18800626 	beq	r3,r2,5558bc8 <_write_r+0x54>
 5558bb0:	1805883a 	mov	r2,r3
 5558bb4:	dfc00217 	ldw	ra,8(sp)
 5558bb8:	dc400117 	ldw	r17,4(sp)
 5558bbc:	dc000017 	ldw	r16,0(sp)
 5558bc0:	dec00304 	addi	sp,sp,12
 5558bc4:	f800283a 	ret
 5558bc8:	80800017 	ldw	r2,0(r16)
 5558bcc:	103ff826 	beq	r2,zero,5558bb0 <_write_r+0x3c>
 5558bd0:	88800015 	stw	r2,0(r17)
 5558bd4:	1805883a 	mov	r2,r3
 5558bd8:	dfc00217 	ldw	ra,8(sp)
 5558bdc:	dc400117 	ldw	r17,4(sp)
 5558be0:	dc000017 	ldw	r16,0(sp)
 5558be4:	dec00304 	addi	sp,sp,12
 5558be8:	f800283a 	ret

05558bec <_close_r>:
 5558bec:	defffd04 	addi	sp,sp,-12
 5558bf0:	dc000015 	stw	r16,0(sp)
 5558bf4:	040155b4 	movhi	r16,1366
 5558bf8:	84010e04 	addi	r16,r16,1080
 5558bfc:	dc400115 	stw	r17,4(sp)
 5558c00:	80000015 	stw	zero,0(r16)
 5558c04:	2023883a 	mov	r17,r4
 5558c08:	2809883a 	mov	r4,r5
 5558c0c:	dfc00215 	stw	ra,8(sp)
 5558c10:	5558f540 	call	5558f54 <close>
 5558c14:	1007883a 	mov	r3,r2
 5558c18:	00bfffc4 	movi	r2,-1
 5558c1c:	18800626 	beq	r3,r2,5558c38 <_close_r+0x4c>
 5558c20:	1805883a 	mov	r2,r3
 5558c24:	dfc00217 	ldw	ra,8(sp)
 5558c28:	dc400117 	ldw	r17,4(sp)
 5558c2c:	dc000017 	ldw	r16,0(sp)
 5558c30:	dec00304 	addi	sp,sp,12
 5558c34:	f800283a 	ret
 5558c38:	80800017 	ldw	r2,0(r16)
 5558c3c:	103ff826 	beq	r2,zero,5558c20 <_close_r+0x34>
 5558c40:	88800015 	stw	r2,0(r17)
 5558c44:	1805883a 	mov	r2,r3
 5558c48:	dfc00217 	ldw	ra,8(sp)
 5558c4c:	dc400117 	ldw	r17,4(sp)
 5558c50:	dc000017 	ldw	r16,0(sp)
 5558c54:	dec00304 	addi	sp,sp,12
 5558c58:	f800283a 	ret

05558c5c <_fclose_r>:
 5558c5c:	defffc04 	addi	sp,sp,-16
 5558c60:	dc400115 	stw	r17,4(sp)
 5558c64:	dc000015 	stw	r16,0(sp)
 5558c68:	dfc00315 	stw	ra,12(sp)
 5558c6c:	dc800215 	stw	r18,8(sp)
 5558c70:	2821883a 	mov	r16,r5
 5558c74:	2023883a 	mov	r17,r4
 5558c78:	28002926 	beq	r5,zero,5558d20 <_fclose_r+0xc4>
 5558c7c:	5557fd40 	call	5557fd4 <__sfp_lock_acquire>
 5558c80:	88000226 	beq	r17,zero,5558c8c <_fclose_r+0x30>
 5558c84:	88800e17 	ldw	r2,56(r17)
 5558c88:	10002d26 	beq	r2,zero,5558d40 <_fclose_r+0xe4>
 5558c8c:	8080030f 	ldh	r2,12(r16)
 5558c90:	10002226 	beq	r2,zero,5558d1c <_fclose_r+0xc0>
 5558c94:	8809883a 	mov	r4,r17
 5558c98:	800b883a 	mov	r5,r16
 5558c9c:	5557d4c0 	call	5557d4c <_fflush_r>
 5558ca0:	1025883a 	mov	r18,r2
 5558ca4:	80800b17 	ldw	r2,44(r16)
 5558ca8:	10000426 	beq	r2,zero,5558cbc <_fclose_r+0x60>
 5558cac:	81400717 	ldw	r5,28(r16)
 5558cb0:	8809883a 	mov	r4,r17
 5558cb4:	103ee83a 	callr	r2
 5558cb8:	10002a16 	blt	r2,zero,5558d64 <_fclose_r+0x108>
 5558cbc:	8080030b 	ldhu	r2,12(r16)
 5558cc0:	1080200c 	andi	r2,r2,128
 5558cc4:	1000231e 	bne	r2,zero,5558d54 <_fclose_r+0xf8>
 5558cc8:	81400c17 	ldw	r5,48(r16)
 5558ccc:	28000526 	beq	r5,zero,5558ce4 <_fclose_r+0x88>
 5558cd0:	80801004 	addi	r2,r16,64
 5558cd4:	28800226 	beq	r5,r2,5558ce0 <_fclose_r+0x84>
 5558cd8:	8809883a 	mov	r4,r17
 5558cdc:	55583680 	call	5558368 <_free_r>
 5558ce0:	80000c15 	stw	zero,48(r16)
 5558ce4:	81401117 	ldw	r5,68(r16)
 5558ce8:	28000326 	beq	r5,zero,5558cf8 <_fclose_r+0x9c>
 5558cec:	8809883a 	mov	r4,r17
 5558cf0:	55583680 	call	5558368 <_free_r>
 5558cf4:	80001115 	stw	zero,68(r16)
 5558cf8:	8000030d 	sth	zero,12(r16)
 5558cfc:	5557fd80 	call	5557fd8 <__sfp_lock_release>
 5558d00:	9005883a 	mov	r2,r18
 5558d04:	dfc00317 	ldw	ra,12(sp)
 5558d08:	dc800217 	ldw	r18,8(sp)
 5558d0c:	dc400117 	ldw	r17,4(sp)
 5558d10:	dc000017 	ldw	r16,0(sp)
 5558d14:	dec00404 	addi	sp,sp,16
 5558d18:	f800283a 	ret
 5558d1c:	5557fd80 	call	5557fd8 <__sfp_lock_release>
 5558d20:	0025883a 	mov	r18,zero
 5558d24:	9005883a 	mov	r2,r18
 5558d28:	dfc00317 	ldw	ra,12(sp)
 5558d2c:	dc800217 	ldw	r18,8(sp)
 5558d30:	dc400117 	ldw	r17,4(sp)
 5558d34:	dc000017 	ldw	r16,0(sp)
 5558d38:	dec00404 	addi	sp,sp,16
 5558d3c:	f800283a 	ret
 5558d40:	8809883a 	mov	r4,r17
 5558d44:	5557fe40 	call	5557fe4 <__sinit>
 5558d48:	8080030f 	ldh	r2,12(r16)
 5558d4c:	103fd11e 	bne	r2,zero,5558c94 <_fclose_r+0x38>
 5558d50:	003ff206 	br	5558d1c <_fclose_r+0xc0>
 5558d54:	81400417 	ldw	r5,16(r16)
 5558d58:	8809883a 	mov	r4,r17
 5558d5c:	55583680 	call	5558368 <_free_r>
 5558d60:	003fd906 	br	5558cc8 <_fclose_r+0x6c>
 5558d64:	04bfffc4 	movi	r18,-1
 5558d68:	003fd406 	br	5558cbc <_fclose_r+0x60>

05558d6c <fclose>:
 5558d6c:	008155b4 	movhi	r2,1366
 5558d70:	10b86304 	addi	r2,r2,-7796
 5558d74:	200b883a 	mov	r5,r4
 5558d78:	11000017 	ldw	r4,0(r2)
 5558d7c:	5558c5c1 	jmpi	5558c5c <_fclose_r>

05558d80 <_fstat_r>:
 5558d80:	defffd04 	addi	sp,sp,-12
 5558d84:	dc000015 	stw	r16,0(sp)
 5558d88:	040155b4 	movhi	r16,1366
 5558d8c:	84010e04 	addi	r16,r16,1080
 5558d90:	dc400115 	stw	r17,4(sp)
 5558d94:	80000015 	stw	zero,0(r16)
 5558d98:	2023883a 	mov	r17,r4
 5558d9c:	2809883a 	mov	r4,r5
 5558da0:	300b883a 	mov	r5,r6
 5558da4:	dfc00215 	stw	ra,8(sp)
 5558da8:	55590dc0 	call	55590dc <fstat>
 5558dac:	1007883a 	mov	r3,r2
 5558db0:	00bfffc4 	movi	r2,-1
 5558db4:	18800626 	beq	r3,r2,5558dd0 <_fstat_r+0x50>
 5558db8:	1805883a 	mov	r2,r3
 5558dbc:	dfc00217 	ldw	ra,8(sp)
 5558dc0:	dc400117 	ldw	r17,4(sp)
 5558dc4:	dc000017 	ldw	r16,0(sp)
 5558dc8:	dec00304 	addi	sp,sp,12
 5558dcc:	f800283a 	ret
 5558dd0:	80800017 	ldw	r2,0(r16)
 5558dd4:	103ff826 	beq	r2,zero,5558db8 <_fstat_r+0x38>
 5558dd8:	88800015 	stw	r2,0(r17)
 5558ddc:	1805883a 	mov	r2,r3
 5558de0:	dfc00217 	ldw	ra,8(sp)
 5558de4:	dc400117 	ldw	r17,4(sp)
 5558de8:	dc000017 	ldw	r16,0(sp)
 5558dec:	dec00304 	addi	sp,sp,12
 5558df0:	f800283a 	ret

05558df4 <_isatty_r>:
 5558df4:	defffd04 	addi	sp,sp,-12
 5558df8:	dc000015 	stw	r16,0(sp)
 5558dfc:	040155b4 	movhi	r16,1366
 5558e00:	84010e04 	addi	r16,r16,1080
 5558e04:	dc400115 	stw	r17,4(sp)
 5558e08:	80000015 	stw	zero,0(r16)
 5558e0c:	2023883a 	mov	r17,r4
 5558e10:	2809883a 	mov	r4,r5
 5558e14:	dfc00215 	stw	ra,8(sp)
 5558e18:	55592100 	call	5559210 <isatty>
 5558e1c:	1007883a 	mov	r3,r2
 5558e20:	00bfffc4 	movi	r2,-1
 5558e24:	18800626 	beq	r3,r2,5558e40 <_isatty_r+0x4c>
 5558e28:	1805883a 	mov	r2,r3
 5558e2c:	dfc00217 	ldw	ra,8(sp)
 5558e30:	dc400117 	ldw	r17,4(sp)
 5558e34:	dc000017 	ldw	r16,0(sp)
 5558e38:	dec00304 	addi	sp,sp,12
 5558e3c:	f800283a 	ret
 5558e40:	80800017 	ldw	r2,0(r16)
 5558e44:	103ff826 	beq	r2,zero,5558e28 <_isatty_r+0x34>
 5558e48:	88800015 	stw	r2,0(r17)
 5558e4c:	1805883a 	mov	r2,r3
 5558e50:	dfc00217 	ldw	ra,8(sp)
 5558e54:	dc400117 	ldw	r17,4(sp)
 5558e58:	dc000017 	ldw	r16,0(sp)
 5558e5c:	dec00304 	addi	sp,sp,12
 5558e60:	f800283a 	ret

05558e64 <_lseek_r>:
 5558e64:	defffd04 	addi	sp,sp,-12
 5558e68:	dc000015 	stw	r16,0(sp)
 5558e6c:	040155b4 	movhi	r16,1366
 5558e70:	84010e04 	addi	r16,r16,1080
 5558e74:	dc400115 	stw	r17,4(sp)
 5558e78:	80000015 	stw	zero,0(r16)
 5558e7c:	2023883a 	mov	r17,r4
 5558e80:	2809883a 	mov	r4,r5
 5558e84:	300b883a 	mov	r5,r6
 5558e88:	380d883a 	mov	r6,r7
 5558e8c:	dfc00215 	stw	ra,8(sp)
 5558e90:	555941c0 	call	555941c <lseek>
 5558e94:	1007883a 	mov	r3,r2
 5558e98:	00bfffc4 	movi	r2,-1
 5558e9c:	18800626 	beq	r3,r2,5558eb8 <_lseek_r+0x54>
 5558ea0:	1805883a 	mov	r2,r3
 5558ea4:	dfc00217 	ldw	ra,8(sp)
 5558ea8:	dc400117 	ldw	r17,4(sp)
 5558eac:	dc000017 	ldw	r16,0(sp)
 5558eb0:	dec00304 	addi	sp,sp,12
 5558eb4:	f800283a 	ret
 5558eb8:	80800017 	ldw	r2,0(r16)
 5558ebc:	103ff826 	beq	r2,zero,5558ea0 <_lseek_r+0x3c>
 5558ec0:	88800015 	stw	r2,0(r17)
 5558ec4:	1805883a 	mov	r2,r3
 5558ec8:	dfc00217 	ldw	ra,8(sp)
 5558ecc:	dc400117 	ldw	r17,4(sp)
 5558ed0:	dc000017 	ldw	r16,0(sp)
 5558ed4:	dec00304 	addi	sp,sp,12
 5558ed8:	f800283a 	ret

05558edc <_read_r>:
 5558edc:	defffd04 	addi	sp,sp,-12
 5558ee0:	dc000015 	stw	r16,0(sp)
 5558ee4:	040155b4 	movhi	r16,1366
 5558ee8:	84010e04 	addi	r16,r16,1080
 5558eec:	dc400115 	stw	r17,4(sp)
 5558ef0:	80000015 	stw	zero,0(r16)
 5558ef4:	2023883a 	mov	r17,r4
 5558ef8:	2809883a 	mov	r4,r5
 5558efc:	300b883a 	mov	r5,r6
 5558f00:	380d883a 	mov	r6,r7
 5558f04:	dfc00215 	stw	ra,8(sp)
 5558f08:	55596180 	call	5559618 <read>
 5558f0c:	1007883a 	mov	r3,r2
 5558f10:	00bfffc4 	movi	r2,-1
 5558f14:	18800626 	beq	r3,r2,5558f30 <_read_r+0x54>
 5558f18:	1805883a 	mov	r2,r3
 5558f1c:	dfc00217 	ldw	ra,8(sp)
 5558f20:	dc400117 	ldw	r17,4(sp)
 5558f24:	dc000017 	ldw	r16,0(sp)
 5558f28:	dec00304 	addi	sp,sp,12
 5558f2c:	f800283a 	ret
 5558f30:	80800017 	ldw	r2,0(r16)
 5558f34:	103ff826 	beq	r2,zero,5558f18 <_read_r+0x3c>
 5558f38:	88800015 	stw	r2,0(r17)
 5558f3c:	1805883a 	mov	r2,r3
 5558f40:	dfc00217 	ldw	ra,8(sp)
 5558f44:	dc400117 	ldw	r17,4(sp)
 5558f48:	dc000017 	ldw	r16,0(sp)
 5558f4c:	dec00304 	addi	sp,sp,12
 5558f50:	f800283a 	ret

05558f54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 5558f54:	defff804 	addi	sp,sp,-32
 5558f58:	dfc00715 	stw	ra,28(sp)
 5558f5c:	df000615 	stw	fp,24(sp)
 5558f60:	df000604 	addi	fp,sp,24
 5558f64:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 5558f68:	e0bffc17 	ldw	r2,-16(fp)
 5558f6c:	1004803a 	cmplt	r2,r2,zero
 5558f70:	1000081e 	bne	r2,zero,5558f94 <close+0x40>
 5558f74:	e0bffc17 	ldw	r2,-16(fp)
 5558f78:	10800324 	muli	r2,r2,12
 5558f7c:	1007883a 	mov	r3,r2
 5558f80:	008155b4 	movhi	r2,1366
 5558f84:	10b3eb04 	addi	r2,r2,-12372
 5558f88:	1887883a 	add	r3,r3,r2
 5558f8c:	e0ffff15 	stw	r3,-4(fp)
 5558f90:	00000106 	br	5558f98 <close+0x44>
 5558f94:	e03fff15 	stw	zero,-4(fp)
 5558f98:	e0bfff17 	ldw	r2,-4(fp)
 5558f9c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 5558fa0:	e0bffb17 	ldw	r2,-20(fp)
 5558fa4:	1005003a 	cmpeq	r2,r2,zero
 5558fa8:	10001d1e 	bne	r2,zero,5559020 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 5558fac:	e0bffb17 	ldw	r2,-20(fp)
 5558fb0:	10800017 	ldw	r2,0(r2)
 5558fb4:	10800417 	ldw	r2,16(r2)
 5558fb8:	1005003a 	cmpeq	r2,r2,zero
 5558fbc:	1000071e 	bne	r2,zero,5558fdc <close+0x88>
 5558fc0:	e0bffb17 	ldw	r2,-20(fp)
 5558fc4:	10800017 	ldw	r2,0(r2)
 5558fc8:	10800417 	ldw	r2,16(r2)
 5558fcc:	e13ffb17 	ldw	r4,-20(fp)
 5558fd0:	103ee83a 	callr	r2
 5558fd4:	e0bffe15 	stw	r2,-8(fp)
 5558fd8:	00000106 	br	5558fe0 <close+0x8c>
 5558fdc:	e03ffe15 	stw	zero,-8(fp)
 5558fe0:	e0bffe17 	ldw	r2,-8(fp)
 5558fe4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 5558fe8:	e13ffc17 	ldw	r4,-16(fp)
 5558fec:	55597980 	call	5559798 <alt_release_fd>
    if (rval < 0)
 5558ff0:	e0bffa17 	ldw	r2,-24(fp)
 5558ff4:	1004403a 	cmpge	r2,r2,zero
 5558ff8:	1000071e 	bne	r2,zero,5559018 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 5558ffc:	55590500 	call	5559050 <alt_get_errno>
 5559000:	e0fffa17 	ldw	r3,-24(fp)
 5559004:	00c7c83a 	sub	r3,zero,r3
 5559008:	10c00015 	stw	r3,0(r2)
      return -1;
 555900c:	00bfffc4 	movi	r2,-1
 5559010:	e0bffd15 	stw	r2,-12(fp)
 5559014:	00000806 	br	5559038 <close+0xe4>
    }
    return 0;
 5559018:	e03ffd15 	stw	zero,-12(fp)
 555901c:	00000606 	br	5559038 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5559020:	55590500 	call	5559050 <alt_get_errno>
 5559024:	1007883a 	mov	r3,r2
 5559028:	00801444 	movi	r2,81
 555902c:	18800015 	stw	r2,0(r3)
    return -1;
 5559030:	00bfffc4 	movi	r2,-1
 5559034:	e0bffd15 	stw	r2,-12(fp)
 5559038:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 555903c:	e037883a 	mov	sp,fp
 5559040:	dfc00117 	ldw	ra,4(sp)
 5559044:	df000017 	ldw	fp,0(sp)
 5559048:	dec00204 	addi	sp,sp,8
 555904c:	f800283a 	ret

05559050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5559050:	defffd04 	addi	sp,sp,-12
 5559054:	dfc00215 	stw	ra,8(sp)
 5559058:	df000115 	stw	fp,4(sp)
 555905c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 5559060:	008155b4 	movhi	r2,1366
 5559064:	10b86c04 	addi	r2,r2,-7760
 5559068:	10800017 	ldw	r2,0(r2)
 555906c:	1005003a 	cmpeq	r2,r2,zero
 5559070:	1000061e 	bne	r2,zero,555908c <alt_get_errno+0x3c>
 5559074:	008155b4 	movhi	r2,1366
 5559078:	10b86c04 	addi	r2,r2,-7760
 555907c:	10800017 	ldw	r2,0(r2)
 5559080:	103ee83a 	callr	r2
 5559084:	e0bfff15 	stw	r2,-4(fp)
 5559088:	00000306 	br	5559098 <alt_get_errno+0x48>
 555908c:	008155b4 	movhi	r2,1366
 5559090:	10810e04 	addi	r2,r2,1080
 5559094:	e0bfff15 	stw	r2,-4(fp)
 5559098:	e0bfff17 	ldw	r2,-4(fp)
}
 555909c:	e037883a 	mov	sp,fp
 55590a0:	dfc00117 	ldw	ra,4(sp)
 55590a4:	df000017 	ldw	fp,0(sp)
 55590a8:	dec00204 	addi	sp,sp,8
 55590ac:	f800283a 	ret

055590b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 55590b0:	defffc04 	addi	sp,sp,-16
 55590b4:	df000315 	stw	fp,12(sp)
 55590b8:	df000304 	addi	fp,sp,12
 55590bc:	e13ffd15 	stw	r4,-12(fp)
 55590c0:	e17ffe15 	stw	r5,-8(fp)
 55590c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 55590c8:	e0bfff17 	ldw	r2,-4(fp)
}
 55590cc:	e037883a 	mov	sp,fp
 55590d0:	df000017 	ldw	fp,0(sp)
 55590d4:	dec00104 	addi	sp,sp,4
 55590d8:	f800283a 	ret

055590dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 55590dc:	defff904 	addi	sp,sp,-28
 55590e0:	dfc00615 	stw	ra,24(sp)
 55590e4:	df000515 	stw	fp,20(sp)
 55590e8:	df000504 	addi	fp,sp,20
 55590ec:	e13ffc15 	stw	r4,-16(fp)
 55590f0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 55590f4:	e0bffc17 	ldw	r2,-16(fp)
 55590f8:	1004803a 	cmplt	r2,r2,zero
 55590fc:	1000081e 	bne	r2,zero,5559120 <fstat+0x44>
 5559100:	e0bffc17 	ldw	r2,-16(fp)
 5559104:	10800324 	muli	r2,r2,12
 5559108:	1007883a 	mov	r3,r2
 555910c:	008155b4 	movhi	r2,1366
 5559110:	10b3eb04 	addi	r2,r2,-12372
 5559114:	1887883a 	add	r3,r3,r2
 5559118:	e0ffff15 	stw	r3,-4(fp)
 555911c:	00000106 	br	5559124 <fstat+0x48>
 5559120:	e03fff15 	stw	zero,-4(fp)
 5559124:	e0bfff17 	ldw	r2,-4(fp)
 5559128:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 555912c:	e0bffb17 	ldw	r2,-20(fp)
 5559130:	1005003a 	cmpeq	r2,r2,zero
 5559134:	1000121e 	bne	r2,zero,5559180 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 5559138:	e0bffb17 	ldw	r2,-20(fp)
 555913c:	10800017 	ldw	r2,0(r2)
 5559140:	10800817 	ldw	r2,32(r2)
 5559144:	1005003a 	cmpeq	r2,r2,zero
 5559148:	1000081e 	bne	r2,zero,555916c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 555914c:	e0bffb17 	ldw	r2,-20(fp)
 5559150:	10800017 	ldw	r2,0(r2)
 5559154:	10800817 	ldw	r2,32(r2)
 5559158:	e13ffb17 	ldw	r4,-20(fp)
 555915c:	e17ffd17 	ldw	r5,-12(fp)
 5559160:	103ee83a 	callr	r2
 5559164:	e0bffe15 	stw	r2,-8(fp)
 5559168:	00000b06 	br	5559198 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 555916c:	e0fffd17 	ldw	r3,-12(fp)
 5559170:	00880004 	movi	r2,8192
 5559174:	18800115 	stw	r2,4(r3)
      return 0;
 5559178:	e03ffe15 	stw	zero,-8(fp)
 555917c:	00000606 	br	5559198 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5559180:	55591b00 	call	55591b0 <alt_get_errno>
 5559184:	1007883a 	mov	r3,r2
 5559188:	00801444 	movi	r2,81
 555918c:	18800015 	stw	r2,0(r3)
    return -1;
 5559190:	00bfffc4 	movi	r2,-1
 5559194:	e0bffe15 	stw	r2,-8(fp)
 5559198:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 555919c:	e037883a 	mov	sp,fp
 55591a0:	dfc00117 	ldw	ra,4(sp)
 55591a4:	df000017 	ldw	fp,0(sp)
 55591a8:	dec00204 	addi	sp,sp,8
 55591ac:	f800283a 	ret

055591b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 55591b0:	defffd04 	addi	sp,sp,-12
 55591b4:	dfc00215 	stw	ra,8(sp)
 55591b8:	df000115 	stw	fp,4(sp)
 55591bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 55591c0:	008155b4 	movhi	r2,1366
 55591c4:	10b86c04 	addi	r2,r2,-7760
 55591c8:	10800017 	ldw	r2,0(r2)
 55591cc:	1005003a 	cmpeq	r2,r2,zero
 55591d0:	1000061e 	bne	r2,zero,55591ec <alt_get_errno+0x3c>
 55591d4:	008155b4 	movhi	r2,1366
 55591d8:	10b86c04 	addi	r2,r2,-7760
 55591dc:	10800017 	ldw	r2,0(r2)
 55591e0:	103ee83a 	callr	r2
 55591e4:	e0bfff15 	stw	r2,-4(fp)
 55591e8:	00000306 	br	55591f8 <alt_get_errno+0x48>
 55591ec:	008155b4 	movhi	r2,1366
 55591f0:	10810e04 	addi	r2,r2,1080
 55591f4:	e0bfff15 	stw	r2,-4(fp)
 55591f8:	e0bfff17 	ldw	r2,-4(fp)
}
 55591fc:	e037883a 	mov	sp,fp
 5559200:	dfc00117 	ldw	ra,4(sp)
 5559204:	df000017 	ldw	fp,0(sp)
 5559208:	dec00204 	addi	sp,sp,8
 555920c:	f800283a 	ret

05559210 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 5559210:	deffeb04 	addi	sp,sp,-84
 5559214:	dfc01415 	stw	ra,80(sp)
 5559218:	df001315 	stw	fp,76(sp)
 555921c:	df001304 	addi	fp,sp,76
 5559220:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5559224:	e0bffd17 	ldw	r2,-12(fp)
 5559228:	1004803a 	cmplt	r2,r2,zero
 555922c:	1000081e 	bne	r2,zero,5559250 <isatty+0x40>
 5559230:	e0bffd17 	ldw	r2,-12(fp)
 5559234:	10800324 	muli	r2,r2,12
 5559238:	1007883a 	mov	r3,r2
 555923c:	008155b4 	movhi	r2,1366
 5559240:	10b3eb04 	addi	r2,r2,-12372
 5559244:	1887883a 	add	r3,r3,r2
 5559248:	e0ffff15 	stw	r3,-4(fp)
 555924c:	00000106 	br	5559254 <isatty+0x44>
 5559250:	e03fff15 	stw	zero,-4(fp)
 5559254:	e0bfff17 	ldw	r2,-4(fp)
 5559258:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 555925c:	e0bfed17 	ldw	r2,-76(fp)
 5559260:	1005003a 	cmpeq	r2,r2,zero
 5559264:	10000f1e 	bne	r2,zero,55592a4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 5559268:	e0bfed17 	ldw	r2,-76(fp)
 555926c:	10800017 	ldw	r2,0(r2)
 5559270:	10800817 	ldw	r2,32(r2)
 5559274:	1004c03a 	cmpne	r2,r2,zero
 5559278:	1000031e 	bne	r2,zero,5559288 <isatty+0x78>
    {
      return 1;
 555927c:	00800044 	movi	r2,1
 5559280:	e0bffe15 	stw	r2,-8(fp)
 5559284:	00000c06 	br	55592b8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 5559288:	e17fee04 	addi	r5,fp,-72
 555928c:	e13ffd17 	ldw	r4,-12(fp)
 5559290:	55590dc0 	call	55590dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 5559294:	e0bfef17 	ldw	r2,-68(fp)
 5559298:	10880020 	cmpeqi	r2,r2,8192
 555929c:	e0bffe15 	stw	r2,-8(fp)
 55592a0:	00000506 	br	55592b8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 55592a4:	55592d00 	call	55592d0 <alt_get_errno>
 55592a8:	1007883a 	mov	r3,r2
 55592ac:	00801444 	movi	r2,81
 55592b0:	18800015 	stw	r2,0(r3)
    return 0;
 55592b4:	e03ffe15 	stw	zero,-8(fp)
 55592b8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 55592bc:	e037883a 	mov	sp,fp
 55592c0:	dfc00117 	ldw	ra,4(sp)
 55592c4:	df000017 	ldw	fp,0(sp)
 55592c8:	dec00204 	addi	sp,sp,8
 55592cc:	f800283a 	ret

055592d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 55592d0:	defffd04 	addi	sp,sp,-12
 55592d4:	dfc00215 	stw	ra,8(sp)
 55592d8:	df000115 	stw	fp,4(sp)
 55592dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 55592e0:	008155b4 	movhi	r2,1366
 55592e4:	10b86c04 	addi	r2,r2,-7760
 55592e8:	10800017 	ldw	r2,0(r2)
 55592ec:	1005003a 	cmpeq	r2,r2,zero
 55592f0:	1000061e 	bne	r2,zero,555930c <alt_get_errno+0x3c>
 55592f4:	008155b4 	movhi	r2,1366
 55592f8:	10b86c04 	addi	r2,r2,-7760
 55592fc:	10800017 	ldw	r2,0(r2)
 5559300:	103ee83a 	callr	r2
 5559304:	e0bfff15 	stw	r2,-4(fp)
 5559308:	00000306 	br	5559318 <alt_get_errno+0x48>
 555930c:	008155b4 	movhi	r2,1366
 5559310:	10810e04 	addi	r2,r2,1080
 5559314:	e0bfff15 	stw	r2,-4(fp)
 5559318:	e0bfff17 	ldw	r2,-4(fp)
}
 555931c:	e037883a 	mov	sp,fp
 5559320:	dfc00117 	ldw	ra,4(sp)
 5559324:	df000017 	ldw	fp,0(sp)
 5559328:	dec00204 	addi	sp,sp,8
 555932c:	f800283a 	ret

05559330 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 5559330:	defffe04 	addi	sp,sp,-8
 5559334:	dfc00115 	stw	ra,4(sp)
 5559338:	df000015 	stw	fp,0(sp)
 555933c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 5559340:	010155b4 	movhi	r4,1366
 5559344:	21387104 	addi	r4,r4,-7740
 5559348:	014155b4 	movhi	r5,1366
 555934c:	296fda04 	addi	r5,r5,-16536
 5559350:	018155b4 	movhi	r6,1366
 5559354:	31b87104 	addi	r6,r6,-7740
 5559358:	55593b00 	call	55593b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 555935c:	01015574 	movhi	r4,1365
 5559360:	21155004 	addi	r4,r4,21824
 5559364:	01420034 	movhi	r5,2048
 5559368:	29460804 	addi	r5,r5,6176
 555936c:	01820034 	movhi	r6,2048
 5559370:	31866d04 	addi	r6,r6,6580
 5559374:	55593b00 	call	55593b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 5559378:	010155b4 	movhi	r4,1366
 555937c:	212fc704 	addi	r4,r4,-16612
 5559380:	014155b4 	movhi	r5,1366
 5559384:	296fc704 	addi	r5,r5,-16612
 5559388:	018155b4 	movhi	r6,1366
 555938c:	31afda04 	addi	r6,r6,-16536
 5559390:	55593b00 	call	55593b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 5559394:	555ad5c0 	call	555ad5c <alt_dcache_flush_all>
  alt_icache_flush_all();
 5559398:	555af540 	call	555af54 <alt_icache_flush_all>
}
 555939c:	e037883a 	mov	sp,fp
 55593a0:	dfc00117 	ldw	ra,4(sp)
 55593a4:	df000017 	ldw	fp,0(sp)
 55593a8:	dec00204 	addi	sp,sp,8
 55593ac:	f800283a 	ret

055593b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 55593b0:	defffc04 	addi	sp,sp,-16
 55593b4:	df000315 	stw	fp,12(sp)
 55593b8:	df000304 	addi	fp,sp,12
 55593bc:	e13ffd15 	stw	r4,-12(fp)
 55593c0:	e17ffe15 	stw	r5,-8(fp)
 55593c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 55593c8:	e0fffe17 	ldw	r3,-8(fp)
 55593cc:	e0bffd17 	ldw	r2,-12(fp)
 55593d0:	18800e26 	beq	r3,r2,555940c <alt_load_section+0x5c>
  {
    while( to != end )
 55593d4:	00000a06 	br	5559400 <alt_load_section+0x50>
    {
      *to++ = *from++;
 55593d8:	e0bffd17 	ldw	r2,-12(fp)
 55593dc:	10c00017 	ldw	r3,0(r2)
 55593e0:	e0bffe17 	ldw	r2,-8(fp)
 55593e4:	10c00015 	stw	r3,0(r2)
 55593e8:	e0bffe17 	ldw	r2,-8(fp)
 55593ec:	10800104 	addi	r2,r2,4
 55593f0:	e0bffe15 	stw	r2,-8(fp)
 55593f4:	e0bffd17 	ldw	r2,-12(fp)
 55593f8:	10800104 	addi	r2,r2,4
 55593fc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 5559400:	e0fffe17 	ldw	r3,-8(fp)
 5559404:	e0bfff17 	ldw	r2,-4(fp)
 5559408:	18bff31e 	bne	r3,r2,55593d8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 555940c:	e037883a 	mov	sp,fp
 5559410:	df000017 	ldw	fp,0(sp)
 5559414:	dec00104 	addi	sp,sp,4
 5559418:	f800283a 	ret

0555941c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 555941c:	defff804 	addi	sp,sp,-32
 5559420:	dfc00715 	stw	ra,28(sp)
 5559424:	df000615 	stw	fp,24(sp)
 5559428:	df000604 	addi	fp,sp,24
 555942c:	e13ffc15 	stw	r4,-16(fp)
 5559430:	e17ffd15 	stw	r5,-12(fp)
 5559434:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 5559438:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 555943c:	e0bffc17 	ldw	r2,-16(fp)
 5559440:	1004803a 	cmplt	r2,r2,zero
 5559444:	1000081e 	bne	r2,zero,5559468 <lseek+0x4c>
 5559448:	e0bffc17 	ldw	r2,-16(fp)
 555944c:	10800324 	muli	r2,r2,12
 5559450:	1007883a 	mov	r3,r2
 5559454:	008155b4 	movhi	r2,1366
 5559458:	10b3eb04 	addi	r2,r2,-12372
 555945c:	1887883a 	add	r3,r3,r2
 5559460:	e0ffff15 	stw	r3,-4(fp)
 5559464:	00000106 	br	555946c <lseek+0x50>
 5559468:	e03fff15 	stw	zero,-4(fp)
 555946c:	e0bfff17 	ldw	r2,-4(fp)
 5559470:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 5559474:	e0bffb17 	ldw	r2,-20(fp)
 5559478:	1005003a 	cmpeq	r2,r2,zero
 555947c:	1000111e 	bne	r2,zero,55594c4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 5559480:	e0bffb17 	ldw	r2,-20(fp)
 5559484:	10800017 	ldw	r2,0(r2)
 5559488:	10800717 	ldw	r2,28(r2)
 555948c:	1005003a 	cmpeq	r2,r2,zero
 5559490:	1000091e 	bne	r2,zero,55594b8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 5559494:	e0bffb17 	ldw	r2,-20(fp)
 5559498:	10800017 	ldw	r2,0(r2)
 555949c:	10800717 	ldw	r2,28(r2)
 55594a0:	e13ffb17 	ldw	r4,-20(fp)
 55594a4:	e17ffd17 	ldw	r5,-12(fp)
 55594a8:	e1bffe17 	ldw	r6,-8(fp)
 55594ac:	103ee83a 	callr	r2
 55594b0:	e0bffa15 	stw	r2,-24(fp)
 55594b4:	00000506 	br	55594cc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 55594b8:	00bfde84 	movi	r2,-134
 55594bc:	e0bffa15 	stw	r2,-24(fp)
 55594c0:	00000206 	br	55594cc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 55594c4:	00bfebc4 	movi	r2,-81
 55594c8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 55594cc:	e0bffa17 	ldw	r2,-24(fp)
 55594d0:	1004403a 	cmpge	r2,r2,zero
 55594d4:	1000071e 	bne	r2,zero,55594f4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 55594d8:	555950c0 	call	555950c <alt_get_errno>
 55594dc:	1007883a 	mov	r3,r2
 55594e0:	e0bffa17 	ldw	r2,-24(fp)
 55594e4:	0085c83a 	sub	r2,zero,r2
 55594e8:	18800015 	stw	r2,0(r3)
    rc = -1;
 55594ec:	00bfffc4 	movi	r2,-1
 55594f0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 55594f4:	e0bffa17 	ldw	r2,-24(fp)
}
 55594f8:	e037883a 	mov	sp,fp
 55594fc:	dfc00117 	ldw	ra,4(sp)
 5559500:	df000017 	ldw	fp,0(sp)
 5559504:	dec00204 	addi	sp,sp,8
 5559508:	f800283a 	ret

0555950c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 555950c:	defffd04 	addi	sp,sp,-12
 5559510:	dfc00215 	stw	ra,8(sp)
 5559514:	df000115 	stw	fp,4(sp)
 5559518:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 555951c:	008155b4 	movhi	r2,1366
 5559520:	10b86c04 	addi	r2,r2,-7760
 5559524:	10800017 	ldw	r2,0(r2)
 5559528:	1005003a 	cmpeq	r2,r2,zero
 555952c:	1000061e 	bne	r2,zero,5559548 <alt_get_errno+0x3c>
 5559530:	008155b4 	movhi	r2,1366
 5559534:	10b86c04 	addi	r2,r2,-7760
 5559538:	10800017 	ldw	r2,0(r2)
 555953c:	103ee83a 	callr	r2
 5559540:	e0bfff15 	stw	r2,-4(fp)
 5559544:	00000306 	br	5559554 <alt_get_errno+0x48>
 5559548:	008155b4 	movhi	r2,1366
 555954c:	10810e04 	addi	r2,r2,1080
 5559550:	e0bfff15 	stw	r2,-4(fp)
 5559554:	e0bfff17 	ldw	r2,-4(fp)
}
 5559558:	e037883a 	mov	sp,fp
 555955c:	dfc00117 	ldw	ra,4(sp)
 5559560:	df000017 	ldw	fp,0(sp)
 5559564:	dec00204 	addi	sp,sp,8
 5559568:	f800283a 	ret

0555956c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 555956c:	defffd04 	addi	sp,sp,-12
 5559570:	dfc00215 	stw	ra,8(sp)
 5559574:	df000115 	stw	fp,4(sp)
 5559578:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 555957c:	0009883a 	mov	r4,zero
 5559580:	5559a340 	call	5559a34 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 5559584:	5559a680 	call	5559a68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 5559588:	010155b4 	movhi	r4,1366
 555958c:	212fd004 	addi	r4,r4,-16576
 5559590:	014155b4 	movhi	r5,1366
 5559594:	296fd004 	addi	r5,r5,-16576
 5559598:	018155b4 	movhi	r6,1366
 555959c:	31afd004 	addi	r6,r6,-16576
 55595a0:	555b3140 	call	555b314 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 55595a4:	555ae8c0 	call	555ae8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 55595a8:	010155b4 	movhi	r4,1366
 55595ac:	212bbc04 	addi	r4,r4,-20752
 55595b0:	555bb100 	call	555bb10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 55595b4:	d128ac17 	ldw	r4,-23888(gp)
 55595b8:	d168ad17 	ldw	r5,-23884(gp)
 55595bc:	d1a8ae17 	ldw	r6,-23880(gp)
 55595c0:	555656c0 	call	555656c <main>
 55595c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 55595c8:	01000044 	movi	r4,1
 55595cc:	5558f540 	call	5558f54 <close>
  exit (result);
 55595d0:	e13fff17 	ldw	r4,-4(fp)
 55595d4:	555bb240 	call	555bb24 <exit>

055595d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 55595d8:	defffe04 	addi	sp,sp,-8
 55595dc:	df000115 	stw	fp,4(sp)
 55595e0:	df000104 	addi	fp,sp,4
 55595e4:	e13fff15 	stw	r4,-4(fp)
}
 55595e8:	e037883a 	mov	sp,fp
 55595ec:	df000017 	ldw	fp,0(sp)
 55595f0:	dec00104 	addi	sp,sp,4
 55595f4:	f800283a 	ret

055595f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 55595f8:	defffe04 	addi	sp,sp,-8
 55595fc:	df000115 	stw	fp,4(sp)
 5559600:	df000104 	addi	fp,sp,4
 5559604:	e13fff15 	stw	r4,-4(fp)
}
 5559608:	e037883a 	mov	sp,fp
 555960c:	df000017 	ldw	fp,0(sp)
 5559610:	dec00104 	addi	sp,sp,4
 5559614:	f800283a 	ret

05559618 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 5559618:	defff704 	addi	sp,sp,-36
 555961c:	dfc00815 	stw	ra,32(sp)
 5559620:	df000715 	stw	fp,28(sp)
 5559624:	df000704 	addi	fp,sp,28
 5559628:	e13ffb15 	stw	r4,-20(fp)
 555962c:	e17ffc15 	stw	r5,-16(fp)
 5559630:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5559634:	e0bffb17 	ldw	r2,-20(fp)
 5559638:	1004803a 	cmplt	r2,r2,zero
 555963c:	1000081e 	bne	r2,zero,5559660 <read+0x48>
 5559640:	e0bffb17 	ldw	r2,-20(fp)
 5559644:	10800324 	muli	r2,r2,12
 5559648:	1007883a 	mov	r3,r2
 555964c:	008155b4 	movhi	r2,1366
 5559650:	10b3eb04 	addi	r2,r2,-12372
 5559654:	1887883a 	add	r3,r3,r2
 5559658:	e0ffff15 	stw	r3,-4(fp)
 555965c:	00000106 	br	5559664 <read+0x4c>
 5559660:	e03fff15 	stw	zero,-4(fp)
 5559664:	e0bfff17 	ldw	r2,-4(fp)
 5559668:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 555966c:	e0bffa17 	ldw	r2,-24(fp)
 5559670:	1005003a 	cmpeq	r2,r2,zero
 5559674:	1000241e 	bne	r2,zero,5559708 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5559678:	e0bffa17 	ldw	r2,-24(fp)
 555967c:	10800217 	ldw	r2,8(r2)
 5559680:	108000cc 	andi	r2,r2,3
 5559684:	10800060 	cmpeqi	r2,r2,1
 5559688:	10001a1e 	bne	r2,zero,55596f4 <read+0xdc>
 555968c:	e0bffa17 	ldw	r2,-24(fp)
 5559690:	10800017 	ldw	r2,0(r2)
 5559694:	10800517 	ldw	r2,20(r2)
 5559698:	1005003a 	cmpeq	r2,r2,zero
 555969c:	1000151e 	bne	r2,zero,55596f4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 55596a0:	e0bffa17 	ldw	r2,-24(fp)
 55596a4:	10800017 	ldw	r2,0(r2)
 55596a8:	10800517 	ldw	r2,20(r2)
 55596ac:	e17ffc17 	ldw	r5,-16(fp)
 55596b0:	e1bffd17 	ldw	r6,-12(fp)
 55596b4:	e13ffa17 	ldw	r4,-24(fp)
 55596b8:	103ee83a 	callr	r2
 55596bc:	e0bff915 	stw	r2,-28(fp)
 55596c0:	e0bff917 	ldw	r2,-28(fp)
 55596c4:	1004403a 	cmpge	r2,r2,zero
 55596c8:	1000071e 	bne	r2,zero,55596e8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 55596cc:	55597380 	call	5559738 <alt_get_errno>
 55596d0:	e0fff917 	ldw	r3,-28(fp)
 55596d4:	00c7c83a 	sub	r3,zero,r3
 55596d8:	10c00015 	stw	r3,0(r2)
          return -1;
 55596dc:	00bfffc4 	movi	r2,-1
 55596e0:	e0bffe15 	stw	r2,-8(fp)
 55596e4:	00000e06 	br	5559720 <read+0x108>
        }
        return rval;
 55596e8:	e0bff917 	ldw	r2,-28(fp)
 55596ec:	e0bffe15 	stw	r2,-8(fp)
 55596f0:	00000b06 	br	5559720 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 55596f4:	55597380 	call	5559738 <alt_get_errno>
 55596f8:	1007883a 	mov	r3,r2
 55596fc:	00800344 	movi	r2,13
 5559700:	18800015 	stw	r2,0(r3)
 5559704:	00000406 	br	5559718 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 5559708:	55597380 	call	5559738 <alt_get_errno>
 555970c:	1007883a 	mov	r3,r2
 5559710:	00801444 	movi	r2,81
 5559714:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5559718:	00bfffc4 	movi	r2,-1
 555971c:	e0bffe15 	stw	r2,-8(fp)
 5559720:	e0bffe17 	ldw	r2,-8(fp)
}
 5559724:	e037883a 	mov	sp,fp
 5559728:	dfc00117 	ldw	ra,4(sp)
 555972c:	df000017 	ldw	fp,0(sp)
 5559730:	dec00204 	addi	sp,sp,8
 5559734:	f800283a 	ret

05559738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5559738:	defffd04 	addi	sp,sp,-12
 555973c:	dfc00215 	stw	ra,8(sp)
 5559740:	df000115 	stw	fp,4(sp)
 5559744:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 5559748:	008155b4 	movhi	r2,1366
 555974c:	10b86c04 	addi	r2,r2,-7760
 5559750:	10800017 	ldw	r2,0(r2)
 5559754:	1005003a 	cmpeq	r2,r2,zero
 5559758:	1000061e 	bne	r2,zero,5559774 <alt_get_errno+0x3c>
 555975c:	008155b4 	movhi	r2,1366
 5559760:	10b86c04 	addi	r2,r2,-7760
 5559764:	10800017 	ldw	r2,0(r2)
 5559768:	103ee83a 	callr	r2
 555976c:	e0bfff15 	stw	r2,-4(fp)
 5559770:	00000306 	br	5559780 <alt_get_errno+0x48>
 5559774:	008155b4 	movhi	r2,1366
 5559778:	10810e04 	addi	r2,r2,1080
 555977c:	e0bfff15 	stw	r2,-4(fp)
 5559780:	e0bfff17 	ldw	r2,-4(fp)
}
 5559784:	e037883a 	mov	sp,fp
 5559788:	dfc00117 	ldw	ra,4(sp)
 555978c:	df000017 	ldw	fp,0(sp)
 5559790:	dec00204 	addi	sp,sp,8
 5559794:	f800283a 	ret

05559798 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5559798:	defffe04 	addi	sp,sp,-8
 555979c:	df000115 	stw	fp,4(sp)
 55597a0:	df000104 	addi	fp,sp,4
 55597a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 55597a8:	e0bfff17 	ldw	r2,-4(fp)
 55597ac:	108000d0 	cmplti	r2,r2,3
 55597b0:	10000d1e 	bne	r2,zero,55597e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 55597b4:	e0bfff17 	ldw	r2,-4(fp)
 55597b8:	00c155b4 	movhi	r3,1366
 55597bc:	18f3eb04 	addi	r3,r3,-12372
 55597c0:	10800324 	muli	r2,r2,12
 55597c4:	10c5883a 	add	r2,r2,r3
 55597c8:	10800204 	addi	r2,r2,8
 55597cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 55597d0:	e0bfff17 	ldw	r2,-4(fp)
 55597d4:	00c155b4 	movhi	r3,1366
 55597d8:	18f3eb04 	addi	r3,r3,-12372
 55597dc:	10800324 	muli	r2,r2,12
 55597e0:	10c5883a 	add	r2,r2,r3
 55597e4:	10000015 	stw	zero,0(r2)
  }
}
 55597e8:	e037883a 	mov	sp,fp
 55597ec:	df000017 	ldw	fp,0(sp)
 55597f0:	dec00104 	addi	sp,sp,4
 55597f4:	f800283a 	ret

055597f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 55597f8:	defff804 	addi	sp,sp,-32
 55597fc:	df000715 	stw	fp,28(sp)
 5559800:	df000704 	addi	fp,sp,28
 5559804:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5559808:	0005303a 	rdctl	r2,status
 555980c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5559810:	e0fffb17 	ldw	r3,-20(fp)
 5559814:	00bfff84 	movi	r2,-2
 5559818:	1884703a 	and	r2,r3,r2
 555981c:	1001703a 	wrctl	status,r2
  
  return context;
 5559820:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 5559824:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 5559828:	d0a00a17 	ldw	r2,-32728(gp)
 555982c:	10c000c4 	addi	r3,r2,3
 5559830:	00bfff04 	movi	r2,-4
 5559834:	1884703a 	and	r2,r3,r2
 5559838:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 555983c:	d0e00a17 	ldw	r3,-32728(gp)
 5559840:	e0bffe17 	ldw	r2,-8(fp)
 5559844:	1887883a 	add	r3,r3,r2
 5559848:	0081aaf4 	movhi	r2,1707
 555984c:	10aaa404 	addi	r2,r2,-21872
 5559850:	10c0072e 	bgeu	r2,r3,5559870 <sbrk+0x78>
 5559854:	e0bffd17 	ldw	r2,-12(fp)
 5559858:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555985c:	e0bffa17 	ldw	r2,-24(fp)
 5559860:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 5559864:	00bfffc4 	movi	r2,-1
 5559868:	e0bfff15 	stw	r2,-4(fp)
 555986c:	00000c06 	br	55598a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 5559870:	d0a00a17 	ldw	r2,-32728(gp)
 5559874:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 5559878:	d0e00a17 	ldw	r3,-32728(gp)
 555987c:	e0bffe17 	ldw	r2,-8(fp)
 5559880:	1885883a 	add	r2,r3,r2
 5559884:	d0a00a15 	stw	r2,-32728(gp)
 5559888:	e0bffd17 	ldw	r2,-12(fp)
 555988c:	e0bff915 	stw	r2,-28(fp)
 5559890:	e0bff917 	ldw	r2,-28(fp)
 5559894:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 5559898:	e0bffc17 	ldw	r2,-16(fp)
 555989c:	e0bfff15 	stw	r2,-4(fp)
 55598a0:	e0bfff17 	ldw	r2,-4(fp)
} 
 55598a4:	e037883a 	mov	sp,fp
 55598a8:	df000017 	ldw	fp,0(sp)
 55598ac:	dec00104 	addi	sp,sp,4
 55598b0:	f800283a 	ret

055598b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 55598b4:	defff704 	addi	sp,sp,-36
 55598b8:	dfc00815 	stw	ra,32(sp)
 55598bc:	df000715 	stw	fp,28(sp)
 55598c0:	df000704 	addi	fp,sp,28
 55598c4:	e13ffb15 	stw	r4,-20(fp)
 55598c8:	e17ffc15 	stw	r5,-16(fp)
 55598cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 55598d0:	e0bffb17 	ldw	r2,-20(fp)
 55598d4:	1004803a 	cmplt	r2,r2,zero
 55598d8:	1000081e 	bne	r2,zero,55598fc <write+0x48>
 55598dc:	e0bffb17 	ldw	r2,-20(fp)
 55598e0:	10800324 	muli	r2,r2,12
 55598e4:	1007883a 	mov	r3,r2
 55598e8:	008155b4 	movhi	r2,1366
 55598ec:	10b3eb04 	addi	r2,r2,-12372
 55598f0:	1887883a 	add	r3,r3,r2
 55598f4:	e0ffff15 	stw	r3,-4(fp)
 55598f8:	00000106 	br	5559900 <write+0x4c>
 55598fc:	e03fff15 	stw	zero,-4(fp)
 5559900:	e0bfff17 	ldw	r2,-4(fp)
 5559904:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 5559908:	e0bffa17 	ldw	r2,-24(fp)
 555990c:	1005003a 	cmpeq	r2,r2,zero
 5559910:	1000241e 	bne	r2,zero,55599a4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5559914:	e0bffa17 	ldw	r2,-24(fp)
 5559918:	10800217 	ldw	r2,8(r2)
 555991c:	108000cc 	andi	r2,r2,3
 5559920:	1005003a 	cmpeq	r2,r2,zero
 5559924:	10001a1e 	bne	r2,zero,5559990 <write+0xdc>
 5559928:	e0bffa17 	ldw	r2,-24(fp)
 555992c:	10800017 	ldw	r2,0(r2)
 5559930:	10800617 	ldw	r2,24(r2)
 5559934:	1005003a 	cmpeq	r2,r2,zero
 5559938:	1000151e 	bne	r2,zero,5559990 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 555993c:	e0bffa17 	ldw	r2,-24(fp)
 5559940:	10800017 	ldw	r2,0(r2)
 5559944:	10800617 	ldw	r2,24(r2)
 5559948:	e17ffc17 	ldw	r5,-16(fp)
 555994c:	e1bffd17 	ldw	r6,-12(fp)
 5559950:	e13ffa17 	ldw	r4,-24(fp)
 5559954:	103ee83a 	callr	r2
 5559958:	e0bff915 	stw	r2,-28(fp)
 555995c:	e0bff917 	ldw	r2,-28(fp)
 5559960:	1004403a 	cmpge	r2,r2,zero
 5559964:	1000071e 	bne	r2,zero,5559984 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 5559968:	55599d40 	call	55599d4 <alt_get_errno>
 555996c:	e0fff917 	ldw	r3,-28(fp)
 5559970:	00c7c83a 	sub	r3,zero,r3
 5559974:	10c00015 	stw	r3,0(r2)
        return -1;
 5559978:	00bfffc4 	movi	r2,-1
 555997c:	e0bffe15 	stw	r2,-8(fp)
 5559980:	00000e06 	br	55599bc <write+0x108>
      }
      return rval;
 5559984:	e0bff917 	ldw	r2,-28(fp)
 5559988:	e0bffe15 	stw	r2,-8(fp)
 555998c:	00000b06 	br	55599bc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 5559990:	55599d40 	call	55599d4 <alt_get_errno>
 5559994:	1007883a 	mov	r3,r2
 5559998:	00800344 	movi	r2,13
 555999c:	18800015 	stw	r2,0(r3)
 55599a0:	00000406 	br	55599b4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 55599a4:	55599d40 	call	55599d4 <alt_get_errno>
 55599a8:	1007883a 	mov	r3,r2
 55599ac:	00801444 	movi	r2,81
 55599b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 55599b4:	00bfffc4 	movi	r2,-1
 55599b8:	e0bffe15 	stw	r2,-8(fp)
 55599bc:	e0bffe17 	ldw	r2,-8(fp)
}
 55599c0:	e037883a 	mov	sp,fp
 55599c4:	dfc00117 	ldw	ra,4(sp)
 55599c8:	df000017 	ldw	fp,0(sp)
 55599cc:	dec00204 	addi	sp,sp,8
 55599d0:	f800283a 	ret

055599d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 55599d4:	defffd04 	addi	sp,sp,-12
 55599d8:	dfc00215 	stw	ra,8(sp)
 55599dc:	df000115 	stw	fp,4(sp)
 55599e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 55599e4:	008155b4 	movhi	r2,1366
 55599e8:	10b86c04 	addi	r2,r2,-7760
 55599ec:	10800017 	ldw	r2,0(r2)
 55599f0:	1005003a 	cmpeq	r2,r2,zero
 55599f4:	1000061e 	bne	r2,zero,5559a10 <alt_get_errno+0x3c>
 55599f8:	008155b4 	movhi	r2,1366
 55599fc:	10b86c04 	addi	r2,r2,-7760
 5559a00:	10800017 	ldw	r2,0(r2)
 5559a04:	103ee83a 	callr	r2
 5559a08:	e0bfff15 	stw	r2,-4(fp)
 5559a0c:	00000306 	br	5559a1c <alt_get_errno+0x48>
 5559a10:	008155b4 	movhi	r2,1366
 5559a14:	10810e04 	addi	r2,r2,1080
 5559a18:	e0bfff15 	stw	r2,-4(fp)
 5559a1c:	e0bfff17 	ldw	r2,-4(fp)
}
 5559a20:	e037883a 	mov	sp,fp
 5559a24:	dfc00117 	ldw	ra,4(sp)
 5559a28:	df000017 	ldw	fp,0(sp)
 5559a2c:	dec00204 	addi	sp,sp,8
 5559a30:	f800283a 	ret

05559a34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5559a34:	defffd04 	addi	sp,sp,-12
 5559a38:	dfc00215 	stw	ra,8(sp)
 5559a3c:	df000115 	stw	fp,4(sp)
 5559a40:	df000104 	addi	fp,sp,4
 5559a44:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_4, cpu_4);
 5559a48:	555b7f40 	call	555b7f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5559a4c:	00800044 	movi	r2,1
 5559a50:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5559a54:	e037883a 	mov	sp,fp
 5559a58:	dfc00117 	ldw	ra,4(sp)
 5559a5c:	df000017 	ldw	fp,0(sp)
 5559a60:	dec00204 	addi	sp,sp,8
 5559a64:	f800283a 	ret

05559a68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5559a68:	defffe04 	addi	sp,sp,-8
 5559a6c:	dfc00115 	stw	ra,4(sp)
 5559a70:	df000015 	stw	fp,0(sp)
 5559a74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_4, timer_4);
 5559a78:	01020034 	movhi	r4,2048
 5559a7c:	21041804 	addi	r4,r4,4192
 5559a80:	000b883a 	mov	r5,zero
 5559a84:	01800044 	movi	r6,1
 5559a88:	01c0fa04 	movi	r7,1000
 5559a8c:	555ab780 	call	555ab78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE1_TO_5, fifo_stage1_to_5);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE4_TO_5, fifo_stage4_to_5);
    ALTERA_AVALON_FIFO_INIT ( FIFO_STAGE5_TO_6, fifo_stage5_to_6);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_4, jtag_uart_4);
 5559a90:	010155b4 	movhi	r4,1366
 5559a94:	21345504 	addi	r4,r4,-11948
 5559a98:	000b883a 	mov	r5,zero
 5559a9c:	01800404 	movi	r6,16
 5559aa0:	555a1a40 	call	555a1a4 <altera_avalon_jtag_uart_init>
 5559aa4:	010155b4 	movhi	r4,1366
 5559aa8:	21344b04 	addi	r4,r4,-11988
 5559aac:	5559ac40 	call	5559ac4 <alt_dev_reg>
}
 5559ab0:	e037883a 	mov	sp,fp
 5559ab4:	dfc00117 	ldw	ra,4(sp)
 5559ab8:	df000017 	ldw	fp,0(sp)
 5559abc:	dec00204 	addi	sp,sp,8
 5559ac0:	f800283a 	ret

05559ac4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 5559ac4:	defffd04 	addi	sp,sp,-12
 5559ac8:	dfc00215 	stw	ra,8(sp)
 5559acc:	df000115 	stw	fp,4(sp)
 5559ad0:	df000104 	addi	fp,sp,4
 5559ad4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 5559ad8:	e13fff17 	ldw	r4,-4(fp)
 5559adc:	014155b4 	movhi	r5,1366
 5559ae0:	29786904 	addi	r5,r5,-7772
 5559ae4:	555ad780 	call	555ad78 <alt_dev_llist_insert>
}
 5559ae8:	e037883a 	mov	sp,fp
 5559aec:	dfc00117 	ldw	ra,4(sp)
 5559af0:	df000017 	ldw	fp,0(sp)
 5559af4:	dec00204 	addi	sp,sp,8
 5559af8:	f800283a 	ret

05559afc <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 5559afc:	defff904 	addi	sp,sp,-28
 5559b00:	dfc00615 	stw	ra,24(sp)
 5559b04:	df000515 	stw	fp,20(sp)
 5559b08:	df000504 	addi	fp,sp,20
 5559b0c:	e13ffb15 	stw	r4,-20(fp)
 5559b10:	e17ffc15 	stw	r5,-16(fp)
 5559b14:	e1bffd15 	stw	r6,-12(fp)
 5559b18:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 5559b1c:	e13ffb17 	ldw	r4,-20(fp)
 5559b20:	01400fc4 	movi	r5,63
 5559b24:	5559cec0 	call	5559cec <altera_avalon_fifo_clear_event>
 5559b28:	1005003a 	cmpeq	r2,r2,zero
 5559b2c:	1000031e 	bne	r2,zero,5559b3c <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 5559b30:	00bfffc4 	movi	r2,-1
 5559b34:	e0bfff15 	stw	r2,-4(fp)
 5559b38:	00001906 	br	5559ba0 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 5559b3c:	e13ffb17 	ldw	r4,-20(fp)
 5559b40:	e17ffc17 	ldw	r5,-16(fp)
 5559b44:	5559d540 	call	5559d54 <altera_avalon_fifo_write_ienable>
 5559b48:	1005003a 	cmpeq	r2,r2,zero
 5559b4c:	1000031e 	bne	r2,zero,5559b5c <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 5559b50:	00bfff84 	movi	r2,-2
 5559b54:	e0bfff15 	stw	r2,-4(fp)
 5559b58:	00001106 	br	5559ba0 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 5559b5c:	e13ffb17 	ldw	r4,-20(fp)
 5559b60:	e17ffe17 	ldw	r5,-8(fp)
 5559b64:	5559db40 	call	5559db4 <altera_avalon_fifo_write_almostfull>
 5559b68:	1005003a 	cmpeq	r2,r2,zero
 5559b6c:	1000031e 	bne	r2,zero,5559b7c <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 5559b70:	00bfff44 	movi	r2,-3
 5559b74:	e0bfff15 	stw	r2,-4(fp)
 5559b78:	00000906 	br	5559ba0 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 5559b7c:	e13ffb17 	ldw	r4,-20(fp)
 5559b80:	e17ffd17 	ldw	r5,-12(fp)
 5559b84:	5559e140 	call	5559e14 <altera_avalon_fifo_write_almostempty>
 5559b88:	1005003a 	cmpeq	r2,r2,zero
 5559b8c:	1000031e 	bne	r2,zero,5559b9c <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 5559b90:	00bfff44 	movi	r2,-3
 5559b94:	e0bfff15 	stw	r2,-4(fp)
 5559b98:	00000106 	br	5559ba0 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
 5559b9c:	e03fff15 	stw	zero,-4(fp)
 5559ba0:	e0bfff17 	ldw	r2,-4(fp)
}
 5559ba4:	e037883a 	mov	sp,fp
 5559ba8:	dfc00117 	ldw	ra,4(sp)
 5559bac:	df000017 	ldw	fp,0(sp)
 5559bb0:	dec00204 	addi	sp,sp,8
 5559bb4:	f800283a 	ret

05559bb8 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
 5559bb8:	defffd04 	addi	sp,sp,-12
 5559bbc:	df000215 	stw	fp,8(sp)
 5559bc0:	df000204 	addi	fp,sp,8
 5559bc4:	e13ffe15 	stw	r4,-8(fp)
 5559bc8:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
 5559bcc:	e0bffe17 	ldw	r2,-8(fp)
 5559bd0:	10800104 	addi	r2,r2,4
 5559bd4:	10800037 	ldwio	r2,0(r2)
 5559bd8:	1007883a 	mov	r3,r2
 5559bdc:	e0bfff17 	ldw	r2,-4(fp)
 5559be0:	1884703a 	and	r2,r3,r2
}
 5559be4:	e037883a 	mov	sp,fp
 5559be8:	df000017 	ldw	fp,0(sp)
 5559bec:	dec00104 	addi	sp,sp,4
 5559bf0:	f800283a 	ret

05559bf4 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
 5559bf4:	defffd04 	addi	sp,sp,-12
 5559bf8:	df000215 	stw	fp,8(sp)
 5559bfc:	df000204 	addi	fp,sp,8
 5559c00:	e13ffe15 	stw	r4,-8(fp)
 5559c04:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
 5559c08:	e0bffe17 	ldw	r2,-8(fp)
 5559c0c:	10800304 	addi	r2,r2,12
 5559c10:	10800037 	ldwio	r2,0(r2)
 5559c14:	1007883a 	mov	r3,r2
 5559c18:	e0bfff17 	ldw	r2,-4(fp)
 5559c1c:	1884703a 	and	r2,r3,r2
}
 5559c20:	e037883a 	mov	sp,fp
 5559c24:	df000017 	ldw	fp,0(sp)
 5559c28:	dec00104 	addi	sp,sp,4
 5559c2c:	f800283a 	ret

05559c30 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
 5559c30:	defffe04 	addi	sp,sp,-8
 5559c34:	df000115 	stw	fp,4(sp)
 5559c38:	df000104 	addi	fp,sp,4
 5559c3c:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
 5559c40:	e0bfff17 	ldw	r2,-4(fp)
 5559c44:	10800404 	addi	r2,r2,16
 5559c48:	10800037 	ldwio	r2,0(r2)
}
 5559c4c:	e037883a 	mov	sp,fp
 5559c50:	df000017 	ldw	fp,0(sp)
 5559c54:	dec00104 	addi	sp,sp,4
 5559c58:	f800283a 	ret

05559c5c <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
 5559c5c:	defffe04 	addi	sp,sp,-8
 5559c60:	df000115 	stw	fp,4(sp)
 5559c64:	df000104 	addi	fp,sp,4
 5559c68:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
 5559c6c:	e0bfff17 	ldw	r2,-4(fp)
 5559c70:	10800504 	addi	r2,r2,20
 5559c74:	10800037 	ldwio	r2,0(r2)
}
 5559c78:	e037883a 	mov	sp,fp
 5559c7c:	df000017 	ldw	fp,0(sp)
 5559c80:	dec00104 	addi	sp,sp,4
 5559c84:	f800283a 	ret

05559c88 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
 5559c88:	defffd04 	addi	sp,sp,-12
 5559c8c:	df000215 	stw	fp,8(sp)
 5559c90:	df000204 	addi	fp,sp,8
 5559c94:	e13ffe15 	stw	r4,-8(fp)
 5559c98:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
 5559c9c:	e0bffe17 	ldw	r2,-8(fp)
 5559ca0:	10800204 	addi	r2,r2,8
 5559ca4:	10800037 	ldwio	r2,0(r2)
 5559ca8:	1007883a 	mov	r3,r2
 5559cac:	e0bfff17 	ldw	r2,-4(fp)
 5559cb0:	1884703a 	and	r2,r3,r2
}
 5559cb4:	e037883a 	mov	sp,fp
 5559cb8:	df000017 	ldw	fp,0(sp)
 5559cbc:	dec00104 	addi	sp,sp,4
 5559cc0:	f800283a 	ret

05559cc4 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
 5559cc4:	defffe04 	addi	sp,sp,-8
 5559cc8:	df000115 	stw	fp,4(sp)
 5559ccc:	df000104 	addi	fp,sp,4
 5559cd0:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
 5559cd4:	e0bfff17 	ldw	r2,-4(fp)
 5559cd8:	10800037 	ldwio	r2,0(r2)
}
 5559cdc:	e037883a 	mov	sp,fp
 5559ce0:	df000017 	ldw	fp,0(sp)
 5559ce4:	dec00104 	addi	sp,sp,4
 5559ce8:	f800283a 	ret

05559cec <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
 5559cec:	defffc04 	addi	sp,sp,-16
 5559cf0:	df000315 	stw	fp,12(sp)
 5559cf4:	df000304 	addi	fp,sp,12
 5559cf8:	e13ffd15 	stw	r4,-12(fp)
 5559cfc:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
 5559d00:	e0bffd17 	ldw	r2,-12(fp)
 5559d04:	10800204 	addi	r2,r2,8
 5559d08:	e0fffe17 	ldw	r3,-8(fp)
 5559d0c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
 5559d10:	e0bffd17 	ldw	r2,-12(fp)
 5559d14:	10800204 	addi	r2,r2,8
 5559d18:	10800037 	ldwio	r2,0(r2)
 5559d1c:	1007883a 	mov	r3,r2
 5559d20:	e0bffe17 	ldw	r2,-8(fp)
 5559d24:	1884703a 	and	r2,r3,r2
 5559d28:	1004c03a 	cmpne	r2,r2,zero
 5559d2c:	1000021e 	bne	r2,zero,5559d38 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
 5559d30:	e03fff15 	stw	zero,-4(fp)
 5559d34:	00000206 	br	5559d40 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
 5559d38:	00bfffc4 	movi	r2,-1
 5559d3c:	e0bfff15 	stw	r2,-4(fp)
 5559d40:	e0bfff17 	ldw	r2,-4(fp)
}
 5559d44:	e037883a 	mov	sp,fp
 5559d48:	df000017 	ldw	fp,0(sp)
 5559d4c:	dec00104 	addi	sp,sp,4
 5559d50:	f800283a 	ret

05559d54 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
 5559d54:	defffc04 	addi	sp,sp,-16
 5559d58:	df000315 	stw	fp,12(sp)
 5559d5c:	df000304 	addi	fp,sp,12
 5559d60:	e13ffd15 	stw	r4,-12(fp)
 5559d64:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
 5559d68:	e0bffd17 	ldw	r2,-12(fp)
 5559d6c:	10800304 	addi	r2,r2,12
 5559d70:	e0fffe17 	ldw	r3,-8(fp)
 5559d74:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
 5559d78:	e0bffd17 	ldw	r2,-12(fp)
 5559d7c:	10800304 	addi	r2,r2,12
 5559d80:	10800037 	ldwio	r2,0(r2)
 5559d84:	1007883a 	mov	r3,r2
 5559d88:	e0bffe17 	ldw	r2,-8(fp)
 5559d8c:	1880021e 	bne	r3,r2,5559d98 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
 5559d90:	e03fff15 	stw	zero,-4(fp)
 5559d94:	00000206 	br	5559da0 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
 5559d98:	00bfff84 	movi	r2,-2
 5559d9c:	e0bfff15 	stw	r2,-4(fp)
 5559da0:	e0bfff17 	ldw	r2,-4(fp)
}
 5559da4:	e037883a 	mov	sp,fp
 5559da8:	df000017 	ldw	fp,0(sp)
 5559dac:	dec00104 	addi	sp,sp,4
 5559db0:	f800283a 	ret

05559db4 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
 5559db4:	defffc04 	addi	sp,sp,-16
 5559db8:	df000315 	stw	fp,12(sp)
 5559dbc:	df000304 	addi	fp,sp,12
 5559dc0:	e13ffd15 	stw	r4,-12(fp)
 5559dc4:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
 5559dc8:	e0bffd17 	ldw	r2,-12(fp)
 5559dcc:	10800404 	addi	r2,r2,16
 5559dd0:	e0fffe17 	ldw	r3,-8(fp)
 5559dd4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
 5559dd8:	e0bffd17 	ldw	r2,-12(fp)
 5559ddc:	10800404 	addi	r2,r2,16
 5559de0:	10800037 	ldwio	r2,0(r2)
 5559de4:	1007883a 	mov	r3,r2
 5559de8:	e0bffe17 	ldw	r2,-8(fp)
 5559dec:	1880021e 	bne	r3,r2,5559df8 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
 5559df0:	e03fff15 	stw	zero,-4(fp)
 5559df4:	00000206 	br	5559e00 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 5559df8:	00bfff44 	movi	r2,-3
 5559dfc:	e0bfff15 	stw	r2,-4(fp)
 5559e00:	e0bfff17 	ldw	r2,-4(fp)
}
 5559e04:	e037883a 	mov	sp,fp
 5559e08:	df000017 	ldw	fp,0(sp)
 5559e0c:	dec00104 	addi	sp,sp,4
 5559e10:	f800283a 	ret

05559e14 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
 5559e14:	defffc04 	addi	sp,sp,-16
 5559e18:	df000315 	stw	fp,12(sp)
 5559e1c:	df000304 	addi	fp,sp,12
 5559e20:	e13ffd15 	stw	r4,-12(fp)
 5559e24:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
 5559e28:	e0bffd17 	ldw	r2,-12(fp)
 5559e2c:	10800504 	addi	r2,r2,20
 5559e30:	e0fffe17 	ldw	r3,-8(fp)
 5559e34:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
 5559e38:	e0bffd17 	ldw	r2,-12(fp)
 5559e3c:	10800504 	addi	r2,r2,20
 5559e40:	10800037 	ldwio	r2,0(r2)
 5559e44:	1007883a 	mov	r3,r2
 5559e48:	e0bffe17 	ldw	r2,-8(fp)
 5559e4c:	1880021e 	bne	r3,r2,5559e58 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
 5559e50:	e03fff15 	stw	zero,-4(fp)
 5559e54:	00000206 	br	5559e60 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
 5559e58:	00bfff44 	movi	r2,-3
 5559e5c:	e0bfff15 	stw	r2,-4(fp)
 5559e60:	e0bfff17 	ldw	r2,-4(fp)
}
 5559e64:	e037883a 	mov	sp,fp
 5559e68:	df000017 	ldw	fp,0(sp)
 5559e6c:	dec00104 	addi	sp,sp,4
 5559e70:	f800283a 	ret

05559e74 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 5559e74:	defffa04 	addi	sp,sp,-24
 5559e78:	dfc00515 	stw	ra,20(sp)
 5559e7c:	df000415 	stw	fp,16(sp)
 5559e80:	df000404 	addi	fp,sp,16
 5559e84:	e13ffc15 	stw	r4,-16(fp)
 5559e88:	e17ffd15 	stw	r5,-12(fp)
 5559e8c:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 5559e90:	e13ffd17 	ldw	r4,-12(fp)
 5559e94:	01400044 	movi	r5,1
 5559e98:	5559bb80 	call	5559bb8 <altera_avalon_fifo_read_status>
 5559e9c:	1004c03a 	cmpne	r2,r2,zero
 5559ea0:	1000051e 	bne	r2,zero,5559eb8 <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
 5559ea4:	e0bffc17 	ldw	r2,-16(fp)
 5559ea8:	e0fffe17 	ldw	r3,-8(fp)
 5559eac:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
 5559eb0:	e03fff15 	stw	zero,-4(fp)
 5559eb4:	00000206 	br	5559ec0 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
 5559eb8:	00bfff04 	movi	r2,-4
 5559ebc:	e0bfff15 	stw	r2,-4(fp)
 5559ec0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 5559ec4:	e037883a 	mov	sp,fp
 5559ec8:	dfc00117 	ldw	ra,4(sp)
 5559ecc:	df000017 	ldw	fp,0(sp)
 5559ed0:	dec00204 	addi	sp,sp,8
 5559ed4:	f800283a 	ret

05559ed8 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 5559ed8:	defffa04 	addi	sp,sp,-24
 5559edc:	dfc00515 	stw	ra,20(sp)
 5559ee0:	df000415 	stw	fp,16(sp)
 5559ee4:	df000404 	addi	fp,sp,16
 5559ee8:	e13ffd15 	stw	r4,-12(fp)
 5559eec:	e17ffe15 	stw	r5,-8(fp)
 5559ef0:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
 5559ef4:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
 5559ef8:	e0bfff17 	ldw	r2,-4(fp)
 5559efc:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 5559f00:	e13ffe17 	ldw	r4,-8(fp)
 5559f04:	01400084 	movi	r5,2
 5559f08:	5559bb80 	call	5559bb8 <altera_avalon_fifo_read_status>
 5559f0c:	1004c03a 	cmpne	r2,r2,zero
 5559f10:	1000071e 	bne	r2,zero,5559f30 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 5559f14:	e13ffe17 	ldw	r4,-8(fp)
 5559f18:	5559cc40 	call	5559cc4 <altera_avalon_fifo_read_level>
 5559f1c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 5559f20:	e0bffd17 	ldw	r2,-12(fp)
 5559f24:	10c00037 	ldwio	r3,0(r2)
 5559f28:	e0bfff17 	ldw	r2,-4(fp)
 5559f2c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
 5559f30:	e0bffc17 	ldw	r2,-16(fp)
}
 5559f34:	e037883a 	mov	sp,fp
 5559f38:	dfc00117 	ldw	ra,4(sp)
 5559f3c:	df000017 	ldw	fp,0(sp)
 5559f40:	dec00204 	addi	sp,sp,8
 5559f44:	f800283a 	ret

05559f48 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 5559f48:	defffb04 	addi	sp,sp,-20
 5559f4c:	dfc00415 	stw	ra,16(sp)
 5559f50:	df000315 	stw	fp,12(sp)
 5559f54:	df000304 	addi	fp,sp,12
 5559f58:	e13ffd15 	stw	r4,-12(fp)
 5559f5c:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 5559f60:	e13ffe17 	ldw	r4,-8(fp)
 5559f64:	01400084 	movi	r5,2
 5559f68:	5559bb80 	call	5559bb8 <altera_avalon_fifo_read_status>
 5559f6c:	1004c03a 	cmpne	r2,r2,zero
 5559f70:	1000041e 	bne	r2,zero,5559f84 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 5559f74:	e0bffd17 	ldw	r2,-12(fp)
 5559f78:	10800037 	ldwio	r2,0(r2)
 5559f7c:	e0bfff15 	stw	r2,-4(fp)
 5559f80:	00000106 	br	5559f88 <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
 5559f84:	e03fff15 	stw	zero,-4(fp)
 5559f88:	e0bfff17 	ldw	r2,-4(fp)
}
 5559f8c:	e037883a 	mov	sp,fp
 5559f90:	dfc00117 	ldw	ra,4(sp)
 5559f94:	df000017 	ldw	fp,0(sp)
 5559f98:	dec00204 	addi	sp,sp,8
 5559f9c:	f800283a 	ret

05559fa0 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 5559fa0:	defffa04 	addi	sp,sp,-24
 5559fa4:	dfc00515 	stw	ra,20(sp)
 5559fa8:	df000415 	stw	fp,16(sp)
 5559fac:	df000404 	addi	fp,sp,16
 5559fb0:	e13ffc15 	stw	r4,-16(fp)
 5559fb4:	e17ffd15 	stw	r5,-12(fp)
 5559fb8:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 5559fbc:	e13ffd17 	ldw	r4,-12(fp)
 5559fc0:	01400044 	movi	r5,1
 5559fc4:	5559bb80 	call	5559bb8 <altera_avalon_fifo_read_status>
 5559fc8:	1004c03a 	cmpne	r2,r2,zero
 5559fcc:	1000061e 	bne	r2,zero,5559fe8 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
 5559fd0:	e0bffc17 	ldw	r2,-16(fp)
 5559fd4:	10800104 	addi	r2,r2,4
 5559fd8:	e0fffe17 	ldw	r3,-8(fp)
 5559fdc:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
 5559fe0:	e03fff15 	stw	zero,-4(fp)
 5559fe4:	00000206 	br	5559ff0 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
 5559fe8:	00bfff04 	movi	r2,-4
 5559fec:	e0bfff15 	stw	r2,-4(fp)
 5559ff0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 5559ff4:	e037883a 	mov	sp,fp
 5559ff8:	dfc00117 	ldw	ra,4(sp)
 5559ffc:	df000017 	ldw	fp,0(sp)
 555a000:	dec00204 	addi	sp,sp,8
 555a004:	f800283a 	ret

0555a008 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
 555a008:	defffe04 	addi	sp,sp,-8
 555a00c:	df000115 	stw	fp,4(sp)
 555a010:	df000104 	addi	fp,sp,4
 555a014:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
 555a018:	e0bfff17 	ldw	r2,-4(fp)
 555a01c:	10800104 	addi	r2,r2,4
 555a020:	10800037 	ldwio	r2,0(r2)
}
 555a024:	e037883a 	mov	sp,fp
 555a028:	df000017 	ldw	fp,0(sp)
 555a02c:	dec00104 	addi	sp,sp,4
 555a030:	f800283a 	ret

0555a034 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
 555a034:	defffe04 	addi	sp,sp,-8
 555a038:	df000115 	stw	fp,4(sp)
 555a03c:	df000104 	addi	fp,sp,4
 555a040:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
 555a044:	e0bfff17 	ldw	r2,-4(fp)
 555a048:	10800037 	ldwio	r2,0(r2)
}
 555a04c:	e037883a 	mov	sp,fp
 555a050:	df000017 	ldw	fp,0(sp)
 555a054:	dec00104 	addi	sp,sp,4
 555a058:	f800283a 	ret

0555a05c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 555a05c:	defffa04 	addi	sp,sp,-24
 555a060:	dfc00515 	stw	ra,20(sp)
 555a064:	df000415 	stw	fp,16(sp)
 555a068:	df000404 	addi	fp,sp,16
 555a06c:	e13ffd15 	stw	r4,-12(fp)
 555a070:	e17ffe15 	stw	r5,-8(fp)
 555a074:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 555a078:	e0bffd17 	ldw	r2,-12(fp)
 555a07c:	10800017 	ldw	r2,0(r2)
 555a080:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 555a084:	e0bffc17 	ldw	r2,-16(fp)
 555a088:	11000a04 	addi	r4,r2,40
 555a08c:	e0bffd17 	ldw	r2,-12(fp)
 555a090:	11c00217 	ldw	r7,8(r2)
 555a094:	e17ffe17 	ldw	r5,-8(fp)
 555a098:	e1bfff17 	ldw	r6,-4(fp)
 555a09c:	555a6a40 	call	555a6a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 555a0a0:	e037883a 	mov	sp,fp
 555a0a4:	dfc00117 	ldw	ra,4(sp)
 555a0a8:	df000017 	ldw	fp,0(sp)
 555a0ac:	dec00204 	addi	sp,sp,8
 555a0b0:	f800283a 	ret

0555a0b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 555a0b4:	defffa04 	addi	sp,sp,-24
 555a0b8:	dfc00515 	stw	ra,20(sp)
 555a0bc:	df000415 	stw	fp,16(sp)
 555a0c0:	df000404 	addi	fp,sp,16
 555a0c4:	e13ffd15 	stw	r4,-12(fp)
 555a0c8:	e17ffe15 	stw	r5,-8(fp)
 555a0cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 555a0d0:	e0bffd17 	ldw	r2,-12(fp)
 555a0d4:	10800017 	ldw	r2,0(r2)
 555a0d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 555a0dc:	e0bffc17 	ldw	r2,-16(fp)
 555a0e0:	11000a04 	addi	r4,r2,40
 555a0e4:	e0bffd17 	ldw	r2,-12(fp)
 555a0e8:	11c00217 	ldw	r7,8(r2)
 555a0ec:	e17ffe17 	ldw	r5,-8(fp)
 555a0f0:	e1bfff17 	ldw	r6,-4(fp)
 555a0f4:	555a8c80 	call	555a8c8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 555a0f8:	e037883a 	mov	sp,fp
 555a0fc:	dfc00117 	ldw	ra,4(sp)
 555a100:	df000017 	ldw	fp,0(sp)
 555a104:	dec00204 	addi	sp,sp,8
 555a108:	f800283a 	ret

0555a10c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 555a10c:	defffc04 	addi	sp,sp,-16
 555a110:	dfc00315 	stw	ra,12(sp)
 555a114:	df000215 	stw	fp,8(sp)
 555a118:	df000204 	addi	fp,sp,8
 555a11c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 555a120:	e0bfff17 	ldw	r2,-4(fp)
 555a124:	10800017 	ldw	r2,0(r2)
 555a128:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 555a12c:	e0bffe17 	ldw	r2,-8(fp)
 555a130:	11000a04 	addi	r4,r2,40
 555a134:	e0bfff17 	ldw	r2,-4(fp)
 555a138:	11400217 	ldw	r5,8(r2)
 555a13c:	555a53c0 	call	555a53c <altera_avalon_jtag_uart_close>
}
 555a140:	e037883a 	mov	sp,fp
 555a144:	dfc00117 	ldw	ra,4(sp)
 555a148:	df000017 	ldw	fp,0(sp)
 555a14c:	dec00204 	addi	sp,sp,8
 555a150:	f800283a 	ret

0555a154 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 555a154:	defffa04 	addi	sp,sp,-24
 555a158:	dfc00515 	stw	ra,20(sp)
 555a15c:	df000415 	stw	fp,16(sp)
 555a160:	df000404 	addi	fp,sp,16
 555a164:	e13ffd15 	stw	r4,-12(fp)
 555a168:	e17ffe15 	stw	r5,-8(fp)
 555a16c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 555a170:	e0bffd17 	ldw	r2,-12(fp)
 555a174:	10800017 	ldw	r2,0(r2)
 555a178:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 555a17c:	e0bffc17 	ldw	r2,-16(fp)
 555a180:	11000a04 	addi	r4,r2,40
 555a184:	e17ffe17 	ldw	r5,-8(fp)
 555a188:	e1bfff17 	ldw	r6,-4(fp)
 555a18c:	555a5b00 	call	555a5b0 <altera_avalon_jtag_uart_ioctl>
}
 555a190:	e037883a 	mov	sp,fp
 555a194:	dfc00117 	ldw	ra,4(sp)
 555a198:	df000017 	ldw	fp,0(sp)
 555a19c:	dec00204 	addi	sp,sp,8
 555a1a0:	f800283a 	ret

0555a1a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 555a1a4:	defffa04 	addi	sp,sp,-24
 555a1a8:	dfc00515 	stw	ra,20(sp)
 555a1ac:	df000415 	stw	fp,16(sp)
 555a1b0:	df000404 	addi	fp,sp,16
 555a1b4:	e13ffd15 	stw	r4,-12(fp)
 555a1b8:	e17ffe15 	stw	r5,-8(fp)
 555a1bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 555a1c0:	e0fffd17 	ldw	r3,-12(fp)
 555a1c4:	00800044 	movi	r2,1
 555a1c8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 555a1cc:	e0bffd17 	ldw	r2,-12(fp)
 555a1d0:	10800017 	ldw	r2,0(r2)
 555a1d4:	11000104 	addi	r4,r2,4
 555a1d8:	e0bffd17 	ldw	r2,-12(fp)
 555a1dc:	10800817 	ldw	r2,32(r2)
 555a1e0:	1007883a 	mov	r3,r2
 555a1e4:	2005883a 	mov	r2,r4
 555a1e8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 555a1ec:	e13ffe17 	ldw	r4,-8(fp)
 555a1f0:	e17fff17 	ldw	r5,-4(fp)
 555a1f4:	d8000015 	stw	zero,0(sp)
 555a1f8:	018155b4 	movhi	r6,1366
 555a1fc:	31a89904 	addi	r6,r6,-23964
 555a200:	e1fffd17 	ldw	r7,-12(fp)
 555a204:	555af840 	call	555af84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 555a208:	e0bffd17 	ldw	r2,-12(fp)
 555a20c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 555a210:	e0bffd17 	ldw	r2,-12(fp)
 555a214:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 555a218:	008155b4 	movhi	r2,1366
 555a21c:	10811304 	addi	r2,r2,1100
 555a220:	10800017 	ldw	r2,0(r2)
 555a224:	100b883a 	mov	r5,r2
 555a228:	018155b4 	movhi	r6,1366
 555a22c:	31a92304 	addi	r6,r6,-23412
 555a230:	e1fffd17 	ldw	r7,-12(fp)
 555a234:	555ac080 	call	555ac08 <alt_alarm_start>
 555a238:	1004403a 	cmpge	r2,r2,zero
 555a23c:	1000041e 	bne	r2,zero,555a250 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 555a240:	e0fffd17 	ldw	r3,-12(fp)
 555a244:	00a00034 	movhi	r2,32768
 555a248:	10bfffc4 	addi	r2,r2,-1
 555a24c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 555a250:	e037883a 	mov	sp,fp
 555a254:	dfc00117 	ldw	ra,4(sp)
 555a258:	df000017 	ldw	fp,0(sp)
 555a25c:	dec00204 	addi	sp,sp,8
 555a260:	f800283a 	ret

0555a264 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 555a264:	defff804 	addi	sp,sp,-32
 555a268:	df000715 	stw	fp,28(sp)
 555a26c:	df000704 	addi	fp,sp,28
 555a270:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 555a274:	e0bfff17 	ldw	r2,-4(fp)
 555a278:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 555a27c:	e0bffe17 	ldw	r2,-8(fp)
 555a280:	10800017 	ldw	r2,0(r2)
 555a284:	e0bffd15 	stw	r2,-12(fp)
 555a288:	00000006 	br	555a28c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 555a28c:	e0bffd17 	ldw	r2,-12(fp)
 555a290:	10800104 	addi	r2,r2,4
 555a294:	10800037 	ldwio	r2,0(r2)
 555a298:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 555a29c:	e0bffc17 	ldw	r2,-16(fp)
 555a2a0:	1080c00c 	andi	r2,r2,768
 555a2a4:	1005003a 	cmpeq	r2,r2,zero
 555a2a8:	1000741e 	bne	r2,zero,555a47c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 555a2ac:	e0bffc17 	ldw	r2,-16(fp)
 555a2b0:	1080400c 	andi	r2,r2,256
 555a2b4:	1005003a 	cmpeq	r2,r2,zero
 555a2b8:	1000351e 	bne	r2,zero,555a390 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 555a2bc:	00800074 	movhi	r2,1
 555a2c0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 555a2c4:	e0bffe17 	ldw	r2,-8(fp)
 555a2c8:	10800a17 	ldw	r2,40(r2)
 555a2cc:	10800044 	addi	r2,r2,1
 555a2d0:	1081ffcc 	andi	r2,r2,2047
 555a2d4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 555a2d8:	e0bffe17 	ldw	r2,-8(fp)
 555a2dc:	10c00b17 	ldw	r3,44(r2)
 555a2e0:	e0bffa17 	ldw	r2,-24(fp)
 555a2e4:	18801626 	beq	r3,r2,555a340 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 555a2e8:	e0bffd17 	ldw	r2,-12(fp)
 555a2ec:	10800037 	ldwio	r2,0(r2)
 555a2f0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 555a2f4:	e0bffb17 	ldw	r2,-20(fp)
 555a2f8:	10a0000c 	andi	r2,r2,32768
 555a2fc:	1005003a 	cmpeq	r2,r2,zero
 555a300:	10000f1e 	bne	r2,zero,555a340 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 555a304:	e0bffe17 	ldw	r2,-8(fp)
 555a308:	10c00a17 	ldw	r3,40(r2)
 555a30c:	e0bffb17 	ldw	r2,-20(fp)
 555a310:	1009883a 	mov	r4,r2
 555a314:	e0bffe17 	ldw	r2,-8(fp)
 555a318:	1885883a 	add	r2,r3,r2
 555a31c:	10800e04 	addi	r2,r2,56
 555a320:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 555a324:	e0bffe17 	ldw	r2,-8(fp)
 555a328:	10800a17 	ldw	r2,40(r2)
 555a32c:	10800044 	addi	r2,r2,1
 555a330:	10c1ffcc 	andi	r3,r2,2047
 555a334:	e0bffe17 	ldw	r2,-8(fp)
 555a338:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 555a33c:	003fe106 	br	555a2c4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 555a340:	e0bffb17 	ldw	r2,-20(fp)
 555a344:	10bfffec 	andhi	r2,r2,65535
 555a348:	1005003a 	cmpeq	r2,r2,zero
 555a34c:	1000101e 	bne	r2,zero,555a390 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 555a350:	e0bffe17 	ldw	r2,-8(fp)
 555a354:	10c00817 	ldw	r3,32(r2)
 555a358:	00bfff84 	movi	r2,-2
 555a35c:	1886703a 	and	r3,r3,r2
 555a360:	e0bffe17 	ldw	r2,-8(fp)
 555a364:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 555a368:	e0bffd17 	ldw	r2,-12(fp)
 555a36c:	11000104 	addi	r4,r2,4
 555a370:	e0bffe17 	ldw	r2,-8(fp)
 555a374:	10800817 	ldw	r2,32(r2)
 555a378:	1007883a 	mov	r3,r2
 555a37c:	2005883a 	mov	r2,r4
 555a380:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 555a384:	e0bffd17 	ldw	r2,-12(fp)
 555a388:	10800104 	addi	r2,r2,4
 555a38c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 555a390:	e0bffc17 	ldw	r2,-16(fp)
 555a394:	1080800c 	andi	r2,r2,512
 555a398:	1005003a 	cmpeq	r2,r2,zero
 555a39c:	103fbb1e 	bne	r2,zero,555a28c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 555a3a0:	e0bffc17 	ldw	r2,-16(fp)
 555a3a4:	10bfffec 	andhi	r2,r2,65535
 555a3a8:	1004d43a 	srli	r2,r2,16
 555a3ac:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 555a3b0:	00001506 	br	555a408 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 555a3b4:	e13ffd17 	ldw	r4,-12(fp)
 555a3b8:	e0bffe17 	ldw	r2,-8(fp)
 555a3bc:	10c00d17 	ldw	r3,52(r2)
 555a3c0:	e0bffe17 	ldw	r2,-8(fp)
 555a3c4:	1885883a 	add	r2,r3,r2
 555a3c8:	10820e04 	addi	r2,r2,2104
 555a3cc:	10800003 	ldbu	r2,0(r2)
 555a3d0:	10c03fcc 	andi	r3,r2,255
 555a3d4:	18c0201c 	xori	r3,r3,128
 555a3d8:	18ffe004 	addi	r3,r3,-128
 555a3dc:	2005883a 	mov	r2,r4
 555a3e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 555a3e4:	e0bffe17 	ldw	r2,-8(fp)
 555a3e8:	10800d17 	ldw	r2,52(r2)
 555a3ec:	10800044 	addi	r2,r2,1
 555a3f0:	10c1ffcc 	andi	r3,r2,2047
 555a3f4:	e0bffe17 	ldw	r2,-8(fp)
 555a3f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 555a3fc:	e0bff917 	ldw	r2,-28(fp)
 555a400:	10bfffc4 	addi	r2,r2,-1
 555a404:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 555a408:	e0bff917 	ldw	r2,-28(fp)
 555a40c:	1005003a 	cmpeq	r2,r2,zero
 555a410:	1000051e 	bne	r2,zero,555a428 <altera_avalon_jtag_uart_irq+0x1c4>
 555a414:	e0bffe17 	ldw	r2,-8(fp)
 555a418:	10c00d17 	ldw	r3,52(r2)
 555a41c:	e0bffe17 	ldw	r2,-8(fp)
 555a420:	10800c17 	ldw	r2,48(r2)
 555a424:	18bfe31e 	bne	r3,r2,555a3b4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 555a428:	e0bff917 	ldw	r2,-28(fp)
 555a42c:	1005003a 	cmpeq	r2,r2,zero
 555a430:	103f961e 	bne	r2,zero,555a28c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 555a434:	e0bffe17 	ldw	r2,-8(fp)
 555a438:	10c00817 	ldw	r3,32(r2)
 555a43c:	00bfff44 	movi	r2,-3
 555a440:	1886703a 	and	r3,r3,r2
 555a444:	e0bffe17 	ldw	r2,-8(fp)
 555a448:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 555a44c:	e0bffe17 	ldw	r2,-8(fp)
 555a450:	10800017 	ldw	r2,0(r2)
 555a454:	11000104 	addi	r4,r2,4
 555a458:	e0bffe17 	ldw	r2,-8(fp)
 555a45c:	10800817 	ldw	r2,32(r2)
 555a460:	1007883a 	mov	r3,r2
 555a464:	2005883a 	mov	r2,r4
 555a468:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 555a46c:	e0bffd17 	ldw	r2,-12(fp)
 555a470:	10800104 	addi	r2,r2,4
 555a474:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 555a478:	003f8406 	br	555a28c <altera_avalon_jtag_uart_irq+0x28>
}
 555a47c:	e037883a 	mov	sp,fp
 555a480:	df000017 	ldw	fp,0(sp)
 555a484:	dec00104 	addi	sp,sp,4
 555a488:	f800283a 	ret

0555a48c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 555a48c:	defffc04 	addi	sp,sp,-16
 555a490:	df000315 	stw	fp,12(sp)
 555a494:	df000304 	addi	fp,sp,12
 555a498:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 555a49c:	e0bfff17 	ldw	r2,-4(fp)
 555a4a0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 555a4a4:	e0bffe17 	ldw	r2,-8(fp)
 555a4a8:	10800017 	ldw	r2,0(r2)
 555a4ac:	10800104 	addi	r2,r2,4
 555a4b0:	10800037 	ldwio	r2,0(r2)
 555a4b4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 555a4b8:	e0bffd17 	ldw	r2,-12(fp)
 555a4bc:	1081000c 	andi	r2,r2,1024
 555a4c0:	1005003a 	cmpeq	r2,r2,zero
 555a4c4:	10000c1e 	bne	r2,zero,555a4f8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 555a4c8:	e0bffe17 	ldw	r2,-8(fp)
 555a4cc:	10800017 	ldw	r2,0(r2)
 555a4d0:	11000104 	addi	r4,r2,4
 555a4d4:	e0bffe17 	ldw	r2,-8(fp)
 555a4d8:	10800817 	ldw	r2,32(r2)
 555a4dc:	10810014 	ori	r2,r2,1024
 555a4e0:	1007883a 	mov	r3,r2
 555a4e4:	2005883a 	mov	r2,r4
 555a4e8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 555a4ec:	e0bffe17 	ldw	r2,-8(fp)
 555a4f0:	10000915 	stw	zero,36(r2)
 555a4f4:	00000a06 	br	555a520 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 555a4f8:	e0bffe17 	ldw	r2,-8(fp)
 555a4fc:	10c00917 	ldw	r3,36(r2)
 555a500:	00a00034 	movhi	r2,32768
 555a504:	10bfff04 	addi	r2,r2,-4
 555a508:	10c00536 	bltu	r2,r3,555a520 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 555a50c:	e0bffe17 	ldw	r2,-8(fp)
 555a510:	10800917 	ldw	r2,36(r2)
 555a514:	10c00044 	addi	r3,r2,1
 555a518:	e0bffe17 	ldw	r2,-8(fp)
 555a51c:	10c00915 	stw	r3,36(r2)
 555a520:	008155b4 	movhi	r2,1366
 555a524:	10811304 	addi	r2,r2,1100
 555a528:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 555a52c:	e037883a 	mov	sp,fp
 555a530:	df000017 	ldw	fp,0(sp)
 555a534:	dec00104 	addi	sp,sp,4
 555a538:	f800283a 	ret

0555a53c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 555a53c:	defffc04 	addi	sp,sp,-16
 555a540:	df000315 	stw	fp,12(sp)
 555a544:	df000304 	addi	fp,sp,12
 555a548:	e13ffd15 	stw	r4,-12(fp)
 555a54c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 555a550:	00000706 	br	555a570 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 555a554:	e0bffe17 	ldw	r2,-8(fp)
 555a558:	1090000c 	andi	r2,r2,16384
 555a55c:	1005003a 	cmpeq	r2,r2,zero
 555a560:	1000031e 	bne	r2,zero,555a570 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 555a564:	00bffd44 	movi	r2,-11
 555a568:	e0bfff15 	stw	r2,-4(fp)
 555a56c:	00000b06 	br	555a59c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 555a570:	e0bffd17 	ldw	r2,-12(fp)
 555a574:	10c00d17 	ldw	r3,52(r2)
 555a578:	e0bffd17 	ldw	r2,-12(fp)
 555a57c:	10800c17 	ldw	r2,48(r2)
 555a580:	18800526 	beq	r3,r2,555a598 <altera_avalon_jtag_uart_close+0x5c>
 555a584:	e0bffd17 	ldw	r2,-12(fp)
 555a588:	10c00917 	ldw	r3,36(r2)
 555a58c:	e0bffd17 	ldw	r2,-12(fp)
 555a590:	10800117 	ldw	r2,4(r2)
 555a594:	18bfef36 	bltu	r3,r2,555a554 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 555a598:	e03fff15 	stw	zero,-4(fp)
 555a59c:	e0bfff17 	ldw	r2,-4(fp)
}
 555a5a0:	e037883a 	mov	sp,fp
 555a5a4:	df000017 	ldw	fp,0(sp)
 555a5a8:	dec00104 	addi	sp,sp,4
 555a5ac:	f800283a 	ret

0555a5b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 555a5b0:	defff804 	addi	sp,sp,-32
 555a5b4:	df000715 	stw	fp,28(sp)
 555a5b8:	df000704 	addi	fp,sp,28
 555a5bc:	e13ffb15 	stw	r4,-20(fp)
 555a5c0:	e17ffc15 	stw	r5,-16(fp)
 555a5c4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 555a5c8:	00bff9c4 	movi	r2,-25
 555a5cc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 555a5d0:	e0bffc17 	ldw	r2,-16(fp)
 555a5d4:	e0bfff15 	stw	r2,-4(fp)
 555a5d8:	e0ffff17 	ldw	r3,-4(fp)
 555a5dc:	189a8060 	cmpeqi	r2,r3,27137
 555a5e0:	1000041e 	bne	r2,zero,555a5f4 <altera_avalon_jtag_uart_ioctl+0x44>
 555a5e4:	e0ffff17 	ldw	r3,-4(fp)
 555a5e8:	189a80a0 	cmpeqi	r2,r3,27138
 555a5ec:	10001b1e 	bne	r2,zero,555a65c <altera_avalon_jtag_uart_ioctl+0xac>
 555a5f0:	00002706 	br	555a690 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 555a5f4:	e0bffb17 	ldw	r2,-20(fp)
 555a5f8:	10c00117 	ldw	r3,4(r2)
 555a5fc:	00a00034 	movhi	r2,32768
 555a600:	10bfffc4 	addi	r2,r2,-1
 555a604:	18802226 	beq	r3,r2,555a690 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 555a608:	e0bffd17 	ldw	r2,-12(fp)
 555a60c:	10800017 	ldw	r2,0(r2)
 555a610:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 555a614:	e0bff917 	ldw	r2,-28(fp)
 555a618:	10800090 	cmplti	r2,r2,2
 555a61c:	1000071e 	bne	r2,zero,555a63c <altera_avalon_jtag_uart_ioctl+0x8c>
 555a620:	e0fff917 	ldw	r3,-28(fp)
 555a624:	00a00034 	movhi	r2,32768
 555a628:	10bfffc4 	addi	r2,r2,-1
 555a62c:	18800326 	beq	r3,r2,555a63c <altera_avalon_jtag_uart_ioctl+0x8c>
 555a630:	e0bff917 	ldw	r2,-28(fp)
 555a634:	e0bffe15 	stw	r2,-8(fp)
 555a638:	00000306 	br	555a648 <altera_avalon_jtag_uart_ioctl+0x98>
 555a63c:	00e00034 	movhi	r3,32768
 555a640:	18ffff84 	addi	r3,r3,-2
 555a644:	e0fffe15 	stw	r3,-8(fp)
 555a648:	e0bffb17 	ldw	r2,-20(fp)
 555a64c:	e0fffe17 	ldw	r3,-8(fp)
 555a650:	10c00115 	stw	r3,4(r2)
      rc = 0;
 555a654:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 555a658:	00000d06 	br	555a690 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 555a65c:	e0bffb17 	ldw	r2,-20(fp)
 555a660:	10c00117 	ldw	r3,4(r2)
 555a664:	00a00034 	movhi	r2,32768
 555a668:	10bfffc4 	addi	r2,r2,-1
 555a66c:	18800826 	beq	r3,r2,555a690 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 555a670:	e13ffd17 	ldw	r4,-12(fp)
 555a674:	e0bffb17 	ldw	r2,-20(fp)
 555a678:	10c00917 	ldw	r3,36(r2)
 555a67c:	e0bffb17 	ldw	r2,-20(fp)
 555a680:	10800117 	ldw	r2,4(r2)
 555a684:	1885803a 	cmpltu	r2,r3,r2
 555a688:	20800015 	stw	r2,0(r4)
      rc = 0;
 555a68c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 555a690:	e0bffa17 	ldw	r2,-24(fp)
}
 555a694:	e037883a 	mov	sp,fp
 555a698:	df000017 	ldw	fp,0(sp)
 555a69c:	dec00104 	addi	sp,sp,4
 555a6a0:	f800283a 	ret

0555a6a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 555a6a4:	defff204 	addi	sp,sp,-56
 555a6a8:	dfc00d15 	stw	ra,52(sp)
 555a6ac:	df000c15 	stw	fp,48(sp)
 555a6b0:	df000c04 	addi	fp,sp,48
 555a6b4:	e13ffb15 	stw	r4,-20(fp)
 555a6b8:	e17ffc15 	stw	r5,-16(fp)
 555a6bc:	e1bffd15 	stw	r6,-12(fp)
 555a6c0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 555a6c4:	e0bffc17 	ldw	r2,-16(fp)
 555a6c8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 555a6cc:	00004806 	br	555a7f0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 555a6d0:	e0bffb17 	ldw	r2,-20(fp)
 555a6d4:	10800a17 	ldw	r2,40(r2)
 555a6d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 555a6dc:	e0bffb17 	ldw	r2,-20(fp)
 555a6e0:	10800b17 	ldw	r2,44(r2)
 555a6e4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 555a6e8:	e0fff717 	ldw	r3,-36(fp)
 555a6ec:	e0bff617 	ldw	r2,-40(fp)
 555a6f0:	18800536 	bltu	r3,r2,555a708 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 555a6f4:	e0bff717 	ldw	r2,-36(fp)
 555a6f8:	e0fff617 	ldw	r3,-40(fp)
 555a6fc:	10c5c83a 	sub	r2,r2,r3
 555a700:	e0bff815 	stw	r2,-32(fp)
 555a704:	00000406 	br	555a718 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 555a708:	00820004 	movi	r2,2048
 555a70c:	e0fff617 	ldw	r3,-40(fp)
 555a710:	10c5c83a 	sub	r2,r2,r3
 555a714:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 555a718:	e0bff817 	ldw	r2,-32(fp)
 555a71c:	1005003a 	cmpeq	r2,r2,zero
 555a720:	10001f1e 	bne	r2,zero,555a7a0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 555a724:	e0fffd17 	ldw	r3,-12(fp)
 555a728:	e0bff817 	ldw	r2,-32(fp)
 555a72c:	1880022e 	bgeu	r3,r2,555a738 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 555a730:	e0bffd17 	ldw	r2,-12(fp)
 555a734:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 555a738:	e0bffb17 	ldw	r2,-20(fp)
 555a73c:	10c00e04 	addi	r3,r2,56
 555a740:	e0bff617 	ldw	r2,-40(fp)
 555a744:	1887883a 	add	r3,r3,r2
 555a748:	e0bffa17 	ldw	r2,-24(fp)
 555a74c:	1009883a 	mov	r4,r2
 555a750:	180b883a 	mov	r5,r3
 555a754:	e1bff817 	ldw	r6,-32(fp)
 555a758:	555742c0 	call	555742c <memcpy>
      ptr   += n;
 555a75c:	e0fff817 	ldw	r3,-32(fp)
 555a760:	e0bffa17 	ldw	r2,-24(fp)
 555a764:	10c5883a 	add	r2,r2,r3
 555a768:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 555a76c:	e0fffd17 	ldw	r3,-12(fp)
 555a770:	e0bff817 	ldw	r2,-32(fp)
 555a774:	1885c83a 	sub	r2,r3,r2
 555a778:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 555a77c:	e0fff617 	ldw	r3,-40(fp)
 555a780:	e0bff817 	ldw	r2,-32(fp)
 555a784:	1885883a 	add	r2,r3,r2
 555a788:	10c1ffcc 	andi	r3,r2,2047
 555a78c:	e0bffb17 	ldw	r2,-20(fp)
 555a790:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 555a794:	e0bffd17 	ldw	r2,-12(fp)
 555a798:	10800048 	cmpgei	r2,r2,1
 555a79c:	103fcc1e 	bne	r2,zero,555a6d0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 555a7a0:	e0fffa17 	ldw	r3,-24(fp)
 555a7a4:	e0bffc17 	ldw	r2,-16(fp)
 555a7a8:	1880141e 	bne	r3,r2,555a7fc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 555a7ac:	e0bffe17 	ldw	r2,-8(fp)
 555a7b0:	1090000c 	andi	r2,r2,16384
 555a7b4:	1004c03a 	cmpne	r2,r2,zero
 555a7b8:	1000101e 	bne	r2,zero,555a7fc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 555a7bc:	e0bffb17 	ldw	r2,-20(fp)
 555a7c0:	10c00a17 	ldw	r3,40(r2)
 555a7c4:	e0bff717 	ldw	r2,-36(fp)
 555a7c8:	1880051e 	bne	r3,r2,555a7e0 <altera_avalon_jtag_uart_read+0x13c>
 555a7cc:	e0bffb17 	ldw	r2,-20(fp)
 555a7d0:	10c00917 	ldw	r3,36(r2)
 555a7d4:	e0bffb17 	ldw	r2,-20(fp)
 555a7d8:	10800117 	ldw	r2,4(r2)
 555a7dc:	18bff736 	bltu	r3,r2,555a7bc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 555a7e0:	e0bffb17 	ldw	r2,-20(fp)
 555a7e4:	10c00a17 	ldw	r3,40(r2)
 555a7e8:	e0bff717 	ldw	r2,-36(fp)
 555a7ec:	18800326 	beq	r3,r2,555a7fc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 555a7f0:	e0bffd17 	ldw	r2,-12(fp)
 555a7f4:	10800048 	cmpgei	r2,r2,1
 555a7f8:	103fb51e 	bne	r2,zero,555a6d0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 555a7fc:	e0fffa17 	ldw	r3,-24(fp)
 555a800:	e0bffc17 	ldw	r2,-16(fp)
 555a804:	18801926 	beq	r3,r2,555a86c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555a808:	0005303a 	rdctl	r2,status
 555a80c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555a810:	e0fff517 	ldw	r3,-44(fp)
 555a814:	00bfff84 	movi	r2,-2
 555a818:	1884703a 	and	r2,r3,r2
 555a81c:	1001703a 	wrctl	status,r2
  
  return context;
 555a820:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 555a824:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 555a828:	e0bffb17 	ldw	r2,-20(fp)
 555a82c:	10800817 	ldw	r2,32(r2)
 555a830:	10c00054 	ori	r3,r2,1
 555a834:	e0bffb17 	ldw	r2,-20(fp)
 555a838:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 555a83c:	e0bffb17 	ldw	r2,-20(fp)
 555a840:	10800017 	ldw	r2,0(r2)
 555a844:	11000104 	addi	r4,r2,4
 555a848:	e0bffb17 	ldw	r2,-20(fp)
 555a84c:	10800817 	ldw	r2,32(r2)
 555a850:	1007883a 	mov	r3,r2
 555a854:	2005883a 	mov	r2,r4
 555a858:	10c00035 	stwio	r3,0(r2)
 555a85c:	e0bff917 	ldw	r2,-28(fp)
 555a860:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555a864:	e0bff417 	ldw	r2,-48(fp)
 555a868:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 555a86c:	e0fffa17 	ldw	r3,-24(fp)
 555a870:	e0bffc17 	ldw	r2,-16(fp)
 555a874:	18800526 	beq	r3,r2,555a88c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 555a878:	e0fffa17 	ldw	r3,-24(fp)
 555a87c:	e0bffc17 	ldw	r2,-16(fp)
 555a880:	1887c83a 	sub	r3,r3,r2
 555a884:	e0ffff15 	stw	r3,-4(fp)
 555a888:	00000906 	br	555a8b0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 555a88c:	e0bffe17 	ldw	r2,-8(fp)
 555a890:	1090000c 	andi	r2,r2,16384
 555a894:	1005003a 	cmpeq	r2,r2,zero
 555a898:	1000031e 	bne	r2,zero,555a8a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 555a89c:	00bffd44 	movi	r2,-11
 555a8a0:	e0bfff15 	stw	r2,-4(fp)
 555a8a4:	00000206 	br	555a8b0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 555a8a8:	00bffec4 	movi	r2,-5
 555a8ac:	e0bfff15 	stw	r2,-4(fp)
 555a8b0:	e0bfff17 	ldw	r2,-4(fp)
}
 555a8b4:	e037883a 	mov	sp,fp
 555a8b8:	dfc00117 	ldw	ra,4(sp)
 555a8bc:	df000017 	ldw	fp,0(sp)
 555a8c0:	dec00204 	addi	sp,sp,8
 555a8c4:	f800283a 	ret

0555a8c8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 555a8c8:	defff204 	addi	sp,sp,-56
 555a8cc:	dfc00d15 	stw	ra,52(sp)
 555a8d0:	df000c15 	stw	fp,48(sp)
 555a8d4:	df000c04 	addi	fp,sp,48
 555a8d8:	e13ffb15 	stw	r4,-20(fp)
 555a8dc:	e17ffc15 	stw	r5,-16(fp)
 555a8e0:	e1bffd15 	stw	r6,-12(fp)
 555a8e4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 555a8e8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 555a8ec:	e0bffc17 	ldw	r2,-16(fp)
 555a8f0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 555a8f4:	00003a06 	br	555a9e0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 555a8f8:	e0bffb17 	ldw	r2,-20(fp)
 555a8fc:	10800c17 	ldw	r2,48(r2)
 555a900:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 555a904:	e0bffb17 	ldw	r2,-20(fp)
 555a908:	10800d17 	ldw	r2,52(r2)
 555a90c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 555a910:	e0fffa17 	ldw	r3,-24(fp)
 555a914:	e0bff917 	ldw	r2,-28(fp)
 555a918:	1880062e 	bgeu	r3,r2,555a934 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 555a91c:	e0fff917 	ldw	r3,-28(fp)
 555a920:	e0bffa17 	ldw	r2,-24(fp)
 555a924:	1885c83a 	sub	r2,r3,r2
 555a928:	10bfffc4 	addi	r2,r2,-1
 555a92c:	e0bff815 	stw	r2,-32(fp)
 555a930:	00000c06 	br	555a964 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 555a934:	e0bff917 	ldw	r2,-28(fp)
 555a938:	1005003a 	cmpeq	r2,r2,zero
 555a93c:	1000051e 	bne	r2,zero,555a954 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 555a940:	00820004 	movi	r2,2048
 555a944:	e0fffa17 	ldw	r3,-24(fp)
 555a948:	10c5c83a 	sub	r2,r2,r3
 555a94c:	e0bff815 	stw	r2,-32(fp)
 555a950:	00000406 	br	555a964 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 555a954:	0081ffc4 	movi	r2,2047
 555a958:	e0fffa17 	ldw	r3,-24(fp)
 555a95c:	10c5c83a 	sub	r2,r2,r3
 555a960:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 555a964:	e0bff817 	ldw	r2,-32(fp)
 555a968:	1005003a 	cmpeq	r2,r2,zero
 555a96c:	10001f1e 	bne	r2,zero,555a9ec <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 555a970:	e0fffd17 	ldw	r3,-12(fp)
 555a974:	e0bff817 	ldw	r2,-32(fp)
 555a978:	1880022e 	bgeu	r3,r2,555a984 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 555a97c:	e0bffd17 	ldw	r2,-12(fp)
 555a980:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 555a984:	e0bffb17 	ldw	r2,-20(fp)
 555a988:	10c20e04 	addi	r3,r2,2104
 555a98c:	e0bffa17 	ldw	r2,-24(fp)
 555a990:	1885883a 	add	r2,r3,r2
 555a994:	e0fffc17 	ldw	r3,-16(fp)
 555a998:	1009883a 	mov	r4,r2
 555a99c:	180b883a 	mov	r5,r3
 555a9a0:	e1bff817 	ldw	r6,-32(fp)
 555a9a4:	555742c0 	call	555742c <memcpy>
      ptr   += n;
 555a9a8:	e0fff817 	ldw	r3,-32(fp)
 555a9ac:	e0bffc17 	ldw	r2,-16(fp)
 555a9b0:	10c5883a 	add	r2,r2,r3
 555a9b4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 555a9b8:	e0fffd17 	ldw	r3,-12(fp)
 555a9bc:	e0bff817 	ldw	r2,-32(fp)
 555a9c0:	1885c83a 	sub	r2,r3,r2
 555a9c4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 555a9c8:	e0fffa17 	ldw	r3,-24(fp)
 555a9cc:	e0bff817 	ldw	r2,-32(fp)
 555a9d0:	1885883a 	add	r2,r3,r2
 555a9d4:	10c1ffcc 	andi	r3,r2,2047
 555a9d8:	e0bffb17 	ldw	r2,-20(fp)
 555a9dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 555a9e0:	e0bffd17 	ldw	r2,-12(fp)
 555a9e4:	10800048 	cmpgei	r2,r2,1
 555a9e8:	103fc31e 	bne	r2,zero,555a8f8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555a9ec:	0005303a 	rdctl	r2,status
 555a9f0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555a9f4:	e0fff517 	ldw	r3,-44(fp)
 555a9f8:	00bfff84 	movi	r2,-2
 555a9fc:	1884703a 	and	r2,r3,r2
 555aa00:	1001703a 	wrctl	status,r2
  
  return context;
 555aa04:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 555aa08:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 555aa0c:	e0bffb17 	ldw	r2,-20(fp)
 555aa10:	10800817 	ldw	r2,32(r2)
 555aa14:	10c00094 	ori	r3,r2,2
 555aa18:	e0bffb17 	ldw	r2,-20(fp)
 555aa1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 555aa20:	e0bffb17 	ldw	r2,-20(fp)
 555aa24:	10800017 	ldw	r2,0(r2)
 555aa28:	11000104 	addi	r4,r2,4
 555aa2c:	e0bffb17 	ldw	r2,-20(fp)
 555aa30:	10800817 	ldw	r2,32(r2)
 555aa34:	1007883a 	mov	r3,r2
 555aa38:	2005883a 	mov	r2,r4
 555aa3c:	10c00035 	stwio	r3,0(r2)
 555aa40:	e0bff717 	ldw	r2,-36(fp)
 555aa44:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555aa48:	e0bff417 	ldw	r2,-48(fp)
 555aa4c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 555aa50:	e0bffd17 	ldw	r2,-12(fp)
 555aa54:	10800050 	cmplti	r2,r2,1
 555aa58:	1000111e 	bne	r2,zero,555aaa0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 555aa5c:	e0bffe17 	ldw	r2,-8(fp)
 555aa60:	1090000c 	andi	r2,r2,16384
 555aa64:	1004c03a 	cmpne	r2,r2,zero
 555aa68:	1000101e 	bne	r2,zero,555aaac <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 555aa6c:	e0bffb17 	ldw	r2,-20(fp)
 555aa70:	10c00d17 	ldw	r3,52(r2)
 555aa74:	e0bff917 	ldw	r2,-28(fp)
 555aa78:	1880051e 	bne	r3,r2,555aa90 <altera_avalon_jtag_uart_write+0x1c8>
 555aa7c:	e0bffb17 	ldw	r2,-20(fp)
 555aa80:	10c00917 	ldw	r3,36(r2)
 555aa84:	e0bffb17 	ldw	r2,-20(fp)
 555aa88:	10800117 	ldw	r2,4(r2)
 555aa8c:	18bff736 	bltu	r3,r2,555aa6c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 555aa90:	e0bffb17 	ldw	r2,-20(fp)
 555aa94:	10c00d17 	ldw	r3,52(r2)
 555aa98:	e0bff917 	ldw	r2,-28(fp)
 555aa9c:	18800326 	beq	r3,r2,555aaac <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 555aaa0:	e0bffd17 	ldw	r2,-12(fp)
 555aaa4:	10800048 	cmpgei	r2,r2,1
 555aaa8:	103fcd1e 	bne	r2,zero,555a9e0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 555aaac:	e0fffc17 	ldw	r3,-16(fp)
 555aab0:	e0bff617 	ldw	r2,-40(fp)
 555aab4:	18800526 	beq	r3,r2,555aacc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 555aab8:	e0fffc17 	ldw	r3,-16(fp)
 555aabc:	e0bff617 	ldw	r2,-40(fp)
 555aac0:	1887c83a 	sub	r3,r3,r2
 555aac4:	e0ffff15 	stw	r3,-4(fp)
 555aac8:	00000906 	br	555aaf0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 555aacc:	e0bffe17 	ldw	r2,-8(fp)
 555aad0:	1090000c 	andi	r2,r2,16384
 555aad4:	1005003a 	cmpeq	r2,r2,zero
 555aad8:	1000031e 	bne	r2,zero,555aae8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 555aadc:	00bffd44 	movi	r2,-11
 555aae0:	e0bfff15 	stw	r2,-4(fp)
 555aae4:	00000206 	br	555aaf0 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 555aae8:	00bffec4 	movi	r2,-5
 555aaec:	e0bfff15 	stw	r2,-4(fp)
 555aaf0:	e0bfff17 	ldw	r2,-4(fp)
}
 555aaf4:	e037883a 	mov	sp,fp
 555aaf8:	dfc00117 	ldw	ra,4(sp)
 555aafc:	df000017 	ldw	fp,0(sp)
 555ab00:	dec00204 	addi	sp,sp,8
 555ab04:	f800283a 	ret

0555ab08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 555ab08:	defffa04 	addi	sp,sp,-24
 555ab0c:	dfc00515 	stw	ra,20(sp)
 555ab10:	df000415 	stw	fp,16(sp)
 555ab14:	df000404 	addi	fp,sp,16
 555ab18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 555ab1c:	e0bfff17 	ldw	r2,-4(fp)
 555ab20:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 555ab24:	e0bfff17 	ldw	r2,-4(fp)
 555ab28:	10800104 	addi	r2,r2,4
 555ab2c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555ab30:	0005303a 	rdctl	r2,status
 555ab34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555ab38:	e0fffd17 	ldw	r3,-12(fp)
 555ab3c:	00bfff84 	movi	r2,-2
 555ab40:	1884703a 	and	r2,r3,r2
 555ab44:	1001703a 	wrctl	status,r2
  
  return context;
 555ab48:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 555ab4c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 555ab50:	555b6e80 	call	555b6e8 <alt_tick>
 555ab54:	e0bffe17 	ldw	r2,-8(fp)
 555ab58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555ab5c:	e0bffc17 	ldw	r2,-16(fp)
 555ab60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 555ab64:	e037883a 	mov	sp,fp
 555ab68:	dfc00117 	ldw	ra,4(sp)
 555ab6c:	df000017 	ldw	fp,0(sp)
 555ab70:	dec00204 	addi	sp,sp,8
 555ab74:	f800283a 	ret

0555ab78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 555ab78:	defff804 	addi	sp,sp,-32
 555ab7c:	dfc00715 	stw	ra,28(sp)
 555ab80:	df000615 	stw	fp,24(sp)
 555ab84:	df000604 	addi	fp,sp,24
 555ab88:	e13ffc15 	stw	r4,-16(fp)
 555ab8c:	e17ffd15 	stw	r5,-12(fp)
 555ab90:	e1bffe15 	stw	r6,-8(fp)
 555ab94:	e1ffff15 	stw	r7,-4(fp)
 555ab98:	e0bfff17 	ldw	r2,-4(fp)
 555ab9c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 555aba0:	008155b4 	movhi	r2,1366
 555aba4:	10811304 	addi	r2,r2,1100
 555aba8:	10800017 	ldw	r2,0(r2)
 555abac:	1004c03a 	cmpne	r2,r2,zero
 555abb0:	1000041e 	bne	r2,zero,555abc4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 555abb4:	00c155b4 	movhi	r3,1366
 555abb8:	18c11304 	addi	r3,r3,1100
 555abbc:	e0bffb17 	ldw	r2,-20(fp)
 555abc0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 555abc4:	e0bffc17 	ldw	r2,-16(fp)
 555abc8:	10800104 	addi	r2,r2,4
 555abcc:	1007883a 	mov	r3,r2
 555abd0:	008001c4 	movi	r2,7
 555abd4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 555abd8:	d8000015 	stw	zero,0(sp)
 555abdc:	e13ffd17 	ldw	r4,-12(fp)
 555abe0:	e17ffe17 	ldw	r5,-8(fp)
 555abe4:	018155b4 	movhi	r6,1366
 555abe8:	31aac204 	addi	r6,r6,-21752
 555abec:	e1fffc17 	ldw	r7,-16(fp)
 555abf0:	555af840 	call	555af84 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 555abf4:	e037883a 	mov	sp,fp
 555abf8:	dfc00117 	ldw	ra,4(sp)
 555abfc:	df000017 	ldw	fp,0(sp)
 555ac00:	dec00204 	addi	sp,sp,8
 555ac04:	f800283a 	ret

0555ac08 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 555ac08:	defff404 	addi	sp,sp,-48
 555ac0c:	df000b15 	stw	fp,44(sp)
 555ac10:	df000b04 	addi	fp,sp,44
 555ac14:	e13ffb15 	stw	r4,-20(fp)
 555ac18:	e17ffc15 	stw	r5,-16(fp)
 555ac1c:	e1bffd15 	stw	r6,-12(fp)
 555ac20:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 555ac24:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 555ac28:	008155b4 	movhi	r2,1366
 555ac2c:	10811304 	addi	r2,r2,1100
 555ac30:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 555ac34:	1005003a 	cmpeq	r2,r2,zero
 555ac38:	1000411e 	bne	r2,zero,555ad40 <alt_alarm_start+0x138>
  {
    if (alarm)
 555ac3c:	e0bffb17 	ldw	r2,-20(fp)
 555ac40:	1005003a 	cmpeq	r2,r2,zero
 555ac44:	10003b1e 	bne	r2,zero,555ad34 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 555ac48:	e0fffb17 	ldw	r3,-20(fp)
 555ac4c:	e0bffd17 	ldw	r2,-12(fp)
 555ac50:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 555ac54:	e0fffb17 	ldw	r3,-20(fp)
 555ac58:	e0bffe17 	ldw	r2,-8(fp)
 555ac5c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555ac60:	0005303a 	rdctl	r2,status
 555ac64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555ac68:	e0fff817 	ldw	r3,-32(fp)
 555ac6c:	00bfff84 	movi	r2,-2
 555ac70:	1884703a 	and	r2,r3,r2
 555ac74:	1001703a 	wrctl	status,r2
  
  return context;
 555ac78:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 555ac7c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 555ac80:	008155b4 	movhi	r2,1366
 555ac84:	10811404 	addi	r2,r2,1104
 555ac88:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 555ac8c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 555ac90:	e0fffc17 	ldw	r3,-16(fp)
 555ac94:	e0bff917 	ldw	r2,-28(fp)
 555ac98:	1885883a 	add	r2,r3,r2
 555ac9c:	10c00044 	addi	r3,r2,1
 555aca0:	e0bffb17 	ldw	r2,-20(fp)
 555aca4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 555aca8:	e0bffb17 	ldw	r2,-20(fp)
 555acac:	10c00217 	ldw	r3,8(r2)
 555acb0:	e0bff917 	ldw	r2,-28(fp)
 555acb4:	1880042e 	bgeu	r3,r2,555acc8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 555acb8:	e0fffb17 	ldw	r3,-20(fp)
 555acbc:	00800044 	movi	r2,1
 555acc0:	18800405 	stb	r2,16(r3)
 555acc4:	00000206 	br	555acd0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 555acc8:	e0bffb17 	ldw	r2,-20(fp)
 555accc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 555acd0:	e0fffb17 	ldw	r3,-20(fp)
 555acd4:	008155b4 	movhi	r2,1366
 555acd8:	10b86f04 	addi	r2,r2,-7748
 555acdc:	e0bff615 	stw	r2,-40(fp)
 555ace0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 555ace4:	e0fff717 	ldw	r3,-36(fp)
 555ace8:	e0bff617 	ldw	r2,-40(fp)
 555acec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 555acf0:	e0bff617 	ldw	r2,-40(fp)
 555acf4:	10c00017 	ldw	r3,0(r2)
 555acf8:	e0bff717 	ldw	r2,-36(fp)
 555acfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 555ad00:	e0bff617 	ldw	r2,-40(fp)
 555ad04:	10c00017 	ldw	r3,0(r2)
 555ad08:	e0bff717 	ldw	r2,-36(fp)
 555ad0c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 555ad10:	e0fff617 	ldw	r3,-40(fp)
 555ad14:	e0bff717 	ldw	r2,-36(fp)
 555ad18:	18800015 	stw	r2,0(r3)
 555ad1c:	e0bffa17 	ldw	r2,-24(fp)
 555ad20:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555ad24:	e0bff517 	ldw	r2,-44(fp)
 555ad28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 555ad2c:	e03fff15 	stw	zero,-4(fp)
 555ad30:	00000506 	br	555ad48 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 555ad34:	00bffa84 	movi	r2,-22
 555ad38:	e0bfff15 	stw	r2,-4(fp)
 555ad3c:	00000206 	br	555ad48 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 555ad40:	00bfde84 	movi	r2,-134
 555ad44:	e0bfff15 	stw	r2,-4(fp)
 555ad48:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 555ad4c:	e037883a 	mov	sp,fp
 555ad50:	df000017 	ldw	fp,0(sp)
 555ad54:	dec00104 	addi	sp,sp,4
 555ad58:	f800283a 	ret

0555ad5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 555ad5c:	deffff04 	addi	sp,sp,-4
 555ad60:	df000015 	stw	fp,0(sp)
 555ad64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 555ad68:	e037883a 	mov	sp,fp
 555ad6c:	df000017 	ldw	fp,0(sp)
 555ad70:	dec00104 	addi	sp,sp,4
 555ad74:	f800283a 	ret

0555ad78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 555ad78:	defff904 	addi	sp,sp,-28
 555ad7c:	dfc00615 	stw	ra,24(sp)
 555ad80:	df000515 	stw	fp,20(sp)
 555ad84:	df000504 	addi	fp,sp,20
 555ad88:	e13ffd15 	stw	r4,-12(fp)
 555ad8c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 555ad90:	e0bffd17 	ldw	r2,-12(fp)
 555ad94:	1005003a 	cmpeq	r2,r2,zero
 555ad98:	1000041e 	bne	r2,zero,555adac <alt_dev_llist_insert+0x34>
 555ad9c:	e0bffd17 	ldw	r2,-12(fp)
 555ada0:	10800217 	ldw	r2,8(r2)
 555ada4:	1004c03a 	cmpne	r2,r2,zero
 555ada8:	1000071e 	bne	r2,zero,555adc8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 555adac:	555ae2c0 	call	555ae2c <alt_get_errno>
 555adb0:	1007883a 	mov	r3,r2
 555adb4:	00800584 	movi	r2,22
 555adb8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 555adbc:	00bffa84 	movi	r2,-22
 555adc0:	e0bfff15 	stw	r2,-4(fp)
 555adc4:	00001306 	br	555ae14 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 555adc8:	e0fffd17 	ldw	r3,-12(fp)
 555adcc:	e0bffe17 	ldw	r2,-8(fp)
 555add0:	e0bffb15 	stw	r2,-20(fp)
 555add4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 555add8:	e0fffc17 	ldw	r3,-16(fp)
 555addc:	e0bffb17 	ldw	r2,-20(fp)
 555ade0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 555ade4:	e0bffb17 	ldw	r2,-20(fp)
 555ade8:	10c00017 	ldw	r3,0(r2)
 555adec:	e0bffc17 	ldw	r2,-16(fp)
 555adf0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 555adf4:	e0bffb17 	ldw	r2,-20(fp)
 555adf8:	10c00017 	ldw	r3,0(r2)
 555adfc:	e0bffc17 	ldw	r2,-16(fp)
 555ae00:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 555ae04:	e0fffb17 	ldw	r3,-20(fp)
 555ae08:	e0bffc17 	ldw	r2,-16(fp)
 555ae0c:	18800015 	stw	r2,0(r3)

  return 0;  
 555ae10:	e03fff15 	stw	zero,-4(fp)
 555ae14:	e0bfff17 	ldw	r2,-4(fp)
}
 555ae18:	e037883a 	mov	sp,fp
 555ae1c:	dfc00117 	ldw	ra,4(sp)
 555ae20:	df000017 	ldw	fp,0(sp)
 555ae24:	dec00204 	addi	sp,sp,8
 555ae28:	f800283a 	ret

0555ae2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 555ae2c:	defffd04 	addi	sp,sp,-12
 555ae30:	dfc00215 	stw	ra,8(sp)
 555ae34:	df000115 	stw	fp,4(sp)
 555ae38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 555ae3c:	008155b4 	movhi	r2,1366
 555ae40:	10b86c04 	addi	r2,r2,-7760
 555ae44:	10800017 	ldw	r2,0(r2)
 555ae48:	1005003a 	cmpeq	r2,r2,zero
 555ae4c:	1000061e 	bne	r2,zero,555ae68 <alt_get_errno+0x3c>
 555ae50:	008155b4 	movhi	r2,1366
 555ae54:	10b86c04 	addi	r2,r2,-7760
 555ae58:	10800017 	ldw	r2,0(r2)
 555ae5c:	103ee83a 	callr	r2
 555ae60:	e0bfff15 	stw	r2,-4(fp)
 555ae64:	00000306 	br	555ae74 <alt_get_errno+0x48>
 555ae68:	008155b4 	movhi	r2,1366
 555ae6c:	10810e04 	addi	r2,r2,1080
 555ae70:	e0bfff15 	stw	r2,-4(fp)
 555ae74:	e0bfff17 	ldw	r2,-4(fp)
}
 555ae78:	e037883a 	mov	sp,fp
 555ae7c:	dfc00117 	ldw	ra,4(sp)
 555ae80:	df000017 	ldw	fp,0(sp)
 555ae84:	dec00204 	addi	sp,sp,8
 555ae88:	f800283a 	ret

0555ae8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 555ae8c:	defffd04 	addi	sp,sp,-12
 555ae90:	dfc00215 	stw	ra,8(sp)
 555ae94:	df000115 	stw	fp,4(sp)
 555ae98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 555ae9c:	00bfff04 	movi	r2,-4
 555aea0:	00c155b4 	movhi	r3,1366
 555aea4:	18efc704 	addi	r3,r3,-16612
 555aea8:	1885883a 	add	r2,r3,r2
 555aeac:	e0bfff15 	stw	r2,-4(fp)
 555aeb0:	00000606 	br	555aecc <_do_ctors+0x40>
        (*ctor) (); 
 555aeb4:	e0bfff17 	ldw	r2,-4(fp)
 555aeb8:	10800017 	ldw	r2,0(r2)
 555aebc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 555aec0:	e0bfff17 	ldw	r2,-4(fp)
 555aec4:	10bfff04 	addi	r2,r2,-4
 555aec8:	e0bfff15 	stw	r2,-4(fp)
 555aecc:	e0ffff17 	ldw	r3,-4(fp)
 555aed0:	008155b4 	movhi	r2,1366
 555aed4:	10afc604 	addi	r2,r2,-16616
 555aed8:	18bff62e 	bgeu	r3,r2,555aeb4 <_do_ctors+0x28>
        (*ctor) (); 
}
 555aedc:	e037883a 	mov	sp,fp
 555aee0:	dfc00117 	ldw	ra,4(sp)
 555aee4:	df000017 	ldw	fp,0(sp)
 555aee8:	dec00204 	addi	sp,sp,8
 555aeec:	f800283a 	ret

0555aef0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 555aef0:	defffd04 	addi	sp,sp,-12
 555aef4:	dfc00215 	stw	ra,8(sp)
 555aef8:	df000115 	stw	fp,4(sp)
 555aefc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 555af00:	00bfff04 	movi	r2,-4
 555af04:	00c155b4 	movhi	r3,1366
 555af08:	18efc704 	addi	r3,r3,-16612
 555af0c:	1885883a 	add	r2,r3,r2
 555af10:	e0bfff15 	stw	r2,-4(fp)
 555af14:	00000606 	br	555af30 <_do_dtors+0x40>
        (*dtor) (); 
 555af18:	e0bfff17 	ldw	r2,-4(fp)
 555af1c:	10800017 	ldw	r2,0(r2)
 555af20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 555af24:	e0bfff17 	ldw	r2,-4(fp)
 555af28:	10bfff04 	addi	r2,r2,-4
 555af2c:	e0bfff15 	stw	r2,-4(fp)
 555af30:	e0ffff17 	ldw	r3,-4(fp)
 555af34:	008155b4 	movhi	r2,1366
 555af38:	10afc704 	addi	r2,r2,-16612
 555af3c:	18bff62e 	bgeu	r3,r2,555af18 <_do_dtors+0x28>
        (*dtor) (); 
}
 555af40:	e037883a 	mov	sp,fp
 555af44:	dfc00117 	ldw	ra,4(sp)
 555af48:	df000017 	ldw	fp,0(sp)
 555af4c:	dec00204 	addi	sp,sp,8
 555af50:	f800283a 	ret

0555af54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 555af54:	defffe04 	addi	sp,sp,-8
 555af58:	dfc00115 	stw	ra,4(sp)
 555af5c:	df000015 	stw	fp,0(sp)
 555af60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 555af64:	0009883a 	mov	r4,zero
 555af68:	01440004 	movi	r5,4096
 555af6c:	555ba800 	call	555ba80 <alt_icache_flush>
#endif
}
 555af70:	e037883a 	mov	sp,fp
 555af74:	dfc00117 	ldw	ra,4(sp)
 555af78:	df000017 	ldw	fp,0(sp)
 555af7c:	dec00204 	addi	sp,sp,8
 555af80:	f800283a 	ret

0555af84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 555af84:	defff904 	addi	sp,sp,-28
 555af88:	dfc00615 	stw	ra,24(sp)
 555af8c:	df000515 	stw	fp,20(sp)
 555af90:	df000504 	addi	fp,sp,20
 555af94:	e13ffc15 	stw	r4,-16(fp)
 555af98:	e17ffd15 	stw	r5,-12(fp)
 555af9c:	e1bffe15 	stw	r6,-8(fp)
 555afa0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 555afa4:	e0800217 	ldw	r2,8(fp)
 555afa8:	d8800015 	stw	r2,0(sp)
 555afac:	e13ffc17 	ldw	r4,-16(fp)
 555afb0:	e17ffd17 	ldw	r5,-12(fp)
 555afb4:	e1bffe17 	ldw	r6,-8(fp)
 555afb8:	e1ffff17 	ldw	r7,-4(fp)
 555afbc:	555b1580 	call	555b158 <alt_iic_isr_register>
}  
 555afc0:	e037883a 	mov	sp,fp
 555afc4:	dfc00117 	ldw	ra,4(sp)
 555afc8:	df000017 	ldw	fp,0(sp)
 555afcc:	dec00204 	addi	sp,sp,8
 555afd0:	f800283a 	ret

0555afd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 555afd4:	defff904 	addi	sp,sp,-28
 555afd8:	df000615 	stw	fp,24(sp)
 555afdc:	df000604 	addi	fp,sp,24
 555afe0:	e13ffe15 	stw	r4,-8(fp)
 555afe4:	e17fff15 	stw	r5,-4(fp)
 555afe8:	e0bfff17 	ldw	r2,-4(fp)
 555afec:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555aff0:	0005303a 	rdctl	r2,status
 555aff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555aff8:	e0fffb17 	ldw	r3,-20(fp)
 555affc:	00bfff84 	movi	r2,-2
 555b000:	1884703a 	and	r2,r3,r2
 555b004:	1001703a 	wrctl	status,r2
  
  return context;
 555b008:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 555b00c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 555b010:	e0fffc17 	ldw	r3,-16(fp)
 555b014:	00800044 	movi	r2,1
 555b018:	10c4983a 	sll	r2,r2,r3
 555b01c:	1007883a 	mov	r3,r2
 555b020:	008155b4 	movhi	r2,1366
 555b024:	10811204 	addi	r2,r2,1096
 555b028:	10800017 	ldw	r2,0(r2)
 555b02c:	1886b03a 	or	r3,r3,r2
 555b030:	008155b4 	movhi	r2,1366
 555b034:	10811204 	addi	r2,r2,1096
 555b038:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 555b03c:	008155b4 	movhi	r2,1366
 555b040:	10811204 	addi	r2,r2,1096
 555b044:	10800017 	ldw	r2,0(r2)
 555b048:	100170fa 	wrctl	ienable,r2
 555b04c:	e0bffd17 	ldw	r2,-12(fp)
 555b050:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555b054:	e0bffa17 	ldw	r2,-24(fp)
 555b058:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 555b05c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 555b060:	e037883a 	mov	sp,fp
 555b064:	df000017 	ldw	fp,0(sp)
 555b068:	dec00104 	addi	sp,sp,4
 555b06c:	f800283a 	ret

0555b070 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 555b070:	defff904 	addi	sp,sp,-28
 555b074:	df000615 	stw	fp,24(sp)
 555b078:	df000604 	addi	fp,sp,24
 555b07c:	e13ffe15 	stw	r4,-8(fp)
 555b080:	e17fff15 	stw	r5,-4(fp)
 555b084:	e0bfff17 	ldw	r2,-4(fp)
 555b088:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555b08c:	0005303a 	rdctl	r2,status
 555b090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555b094:	e0fffb17 	ldw	r3,-20(fp)
 555b098:	00bfff84 	movi	r2,-2
 555b09c:	1884703a 	and	r2,r3,r2
 555b0a0:	1001703a 	wrctl	status,r2
  
  return context;
 555b0a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 555b0a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 555b0ac:	e0fffc17 	ldw	r3,-16(fp)
 555b0b0:	00800044 	movi	r2,1
 555b0b4:	10c4983a 	sll	r2,r2,r3
 555b0b8:	0084303a 	nor	r2,zero,r2
 555b0bc:	1007883a 	mov	r3,r2
 555b0c0:	008155b4 	movhi	r2,1366
 555b0c4:	10811204 	addi	r2,r2,1096
 555b0c8:	10800017 	ldw	r2,0(r2)
 555b0cc:	1886703a 	and	r3,r3,r2
 555b0d0:	008155b4 	movhi	r2,1366
 555b0d4:	10811204 	addi	r2,r2,1096
 555b0d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 555b0dc:	008155b4 	movhi	r2,1366
 555b0e0:	10811204 	addi	r2,r2,1096
 555b0e4:	10800017 	ldw	r2,0(r2)
 555b0e8:	100170fa 	wrctl	ienable,r2
 555b0ec:	e0bffd17 	ldw	r2,-12(fp)
 555b0f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555b0f4:	e0bffa17 	ldw	r2,-24(fp)
 555b0f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 555b0fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 555b100:	e037883a 	mov	sp,fp
 555b104:	df000017 	ldw	fp,0(sp)
 555b108:	dec00104 	addi	sp,sp,4
 555b10c:	f800283a 	ret

0555b110 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 555b110:	defffc04 	addi	sp,sp,-16
 555b114:	df000315 	stw	fp,12(sp)
 555b118:	df000304 	addi	fp,sp,12
 555b11c:	e13ffe15 	stw	r4,-8(fp)
 555b120:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 555b124:	000530fa 	rdctl	r2,ienable
 555b128:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 555b12c:	e0ffff17 	ldw	r3,-4(fp)
 555b130:	00800044 	movi	r2,1
 555b134:	10c4983a 	sll	r2,r2,r3
 555b138:	1007883a 	mov	r3,r2
 555b13c:	e0bffd17 	ldw	r2,-12(fp)
 555b140:	1884703a 	and	r2,r3,r2
 555b144:	1004c03a 	cmpne	r2,r2,zero
}
 555b148:	e037883a 	mov	sp,fp
 555b14c:	df000017 	ldw	fp,0(sp)
 555b150:	dec00104 	addi	sp,sp,4
 555b154:	f800283a 	ret

0555b158 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 555b158:	defff404 	addi	sp,sp,-48
 555b15c:	dfc00b15 	stw	ra,44(sp)
 555b160:	df000a15 	stw	fp,40(sp)
 555b164:	df000a04 	addi	fp,sp,40
 555b168:	e13ffb15 	stw	r4,-20(fp)
 555b16c:	e17ffc15 	stw	r5,-16(fp)
 555b170:	e1bffd15 	stw	r6,-12(fp)
 555b174:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 555b178:	00bffa84 	movi	r2,-22
 555b17c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 555b180:	e0bffc17 	ldw	r2,-16(fp)
 555b184:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 555b188:	e0bff917 	ldw	r2,-28(fp)
 555b18c:	10800808 	cmpgei	r2,r2,32
 555b190:	1000291e 	bne	r2,zero,555b238 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555b194:	0005303a 	rdctl	r2,status
 555b198:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555b19c:	e0fff717 	ldw	r3,-36(fp)
 555b1a0:	00bfff84 	movi	r2,-2
 555b1a4:	1884703a 	and	r2,r3,r2
 555b1a8:	1001703a 	wrctl	status,r2
  
  return context;
 555b1ac:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 555b1b0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 555b1b4:	e0bff917 	ldw	r2,-28(fp)
 555b1b8:	00c155b4 	movhi	r3,1366
 555b1bc:	18c11f04 	addi	r3,r3,1148
 555b1c0:	100490fa 	slli	r2,r2,3
 555b1c4:	10c7883a 	add	r3,r2,r3
 555b1c8:	e0bffd17 	ldw	r2,-12(fp)
 555b1cc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 555b1d0:	e0bff917 	ldw	r2,-28(fp)
 555b1d4:	00c155b4 	movhi	r3,1366
 555b1d8:	18c11f04 	addi	r3,r3,1148
 555b1dc:	100490fa 	slli	r2,r2,3
 555b1e0:	10c5883a 	add	r2,r2,r3
 555b1e4:	10c00104 	addi	r3,r2,4
 555b1e8:	e0bffe17 	ldw	r2,-8(fp)
 555b1ec:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 555b1f0:	e0bffd17 	ldw	r2,-12(fp)
 555b1f4:	1005003a 	cmpeq	r2,r2,zero
 555b1f8:	1000051e 	bne	r2,zero,555b210 <alt_iic_isr_register+0xb8>
 555b1fc:	e17ff917 	ldw	r5,-28(fp)
 555b200:	e13ffb17 	ldw	r4,-20(fp)
 555b204:	555afd40 	call	555afd4 <alt_ic_irq_enable>
 555b208:	e0bfff15 	stw	r2,-4(fp)
 555b20c:	00000406 	br	555b220 <alt_iic_isr_register+0xc8>
 555b210:	e17ff917 	ldw	r5,-28(fp)
 555b214:	e13ffb17 	ldw	r4,-20(fp)
 555b218:	555b0700 	call	555b070 <alt_ic_irq_disable>
 555b21c:	e0bfff15 	stw	r2,-4(fp)
 555b220:	e0bfff17 	ldw	r2,-4(fp)
 555b224:	e0bffa15 	stw	r2,-24(fp)
 555b228:	e0bff817 	ldw	r2,-32(fp)
 555b22c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555b230:	e0bff617 	ldw	r2,-40(fp)
 555b234:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 555b238:	e0bffa17 	ldw	r2,-24(fp)
}
 555b23c:	e037883a 	mov	sp,fp
 555b240:	dfc00117 	ldw	ra,4(sp)
 555b244:	df000017 	ldw	fp,0(sp)
 555b248:	dec00204 	addi	sp,sp,8
 555b24c:	f800283a 	ret

0555b250 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 555b250:	defff904 	addi	sp,sp,-28
 555b254:	dfc00615 	stw	ra,24(sp)
 555b258:	df000515 	stw	fp,20(sp)
 555b25c:	df000504 	addi	fp,sp,20
 555b260:	e13ffc15 	stw	r4,-16(fp)
 555b264:	e17ffd15 	stw	r5,-12(fp)
 555b268:	e1bffe15 	stw	r6,-8(fp)
 555b26c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 555b270:	e13ffd17 	ldw	r4,-12(fp)
 555b274:	e17ffe17 	ldw	r5,-8(fp)
 555b278:	e1bfff17 	ldw	r6,-4(fp)
 555b27c:	555b4680 	call	555b468 <open>
 555b280:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 555b284:	e0bffb17 	ldw	r2,-20(fp)
 555b288:	1004803a 	cmplt	r2,r2,zero
 555b28c:	10001c1e 	bne	r2,zero,555b300 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 555b290:	e0bffb17 	ldw	r2,-20(fp)
 555b294:	00c155b4 	movhi	r3,1366
 555b298:	18f3eb04 	addi	r3,r3,-12372
 555b29c:	10800324 	muli	r2,r2,12
 555b2a0:	10c5883a 	add	r2,r2,r3
 555b2a4:	10c00017 	ldw	r3,0(r2)
 555b2a8:	e0bffc17 	ldw	r2,-16(fp)
 555b2ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 555b2b0:	e0bffb17 	ldw	r2,-20(fp)
 555b2b4:	00c155b4 	movhi	r3,1366
 555b2b8:	18f3eb04 	addi	r3,r3,-12372
 555b2bc:	10800324 	muli	r2,r2,12
 555b2c0:	10c5883a 	add	r2,r2,r3
 555b2c4:	10800104 	addi	r2,r2,4
 555b2c8:	10c00017 	ldw	r3,0(r2)
 555b2cc:	e0bffc17 	ldw	r2,-16(fp)
 555b2d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 555b2d4:	e0bffb17 	ldw	r2,-20(fp)
 555b2d8:	00c155b4 	movhi	r3,1366
 555b2dc:	18f3eb04 	addi	r3,r3,-12372
 555b2e0:	10800324 	muli	r2,r2,12
 555b2e4:	10c5883a 	add	r2,r2,r3
 555b2e8:	10800204 	addi	r2,r2,8
 555b2ec:	10c00017 	ldw	r3,0(r2)
 555b2f0:	e0bffc17 	ldw	r2,-16(fp)
 555b2f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 555b2f8:	e13ffb17 	ldw	r4,-20(fp)
 555b2fc:	55597980 	call	5559798 <alt_release_fd>
  }
} 
 555b300:	e037883a 	mov	sp,fp
 555b304:	dfc00117 	ldw	ra,4(sp)
 555b308:	df000017 	ldw	fp,0(sp)
 555b30c:	dec00204 	addi	sp,sp,8
 555b310:	f800283a 	ret

0555b314 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 555b314:	defffb04 	addi	sp,sp,-20
 555b318:	dfc00415 	stw	ra,16(sp)
 555b31c:	df000315 	stw	fp,12(sp)
 555b320:	df000304 	addi	fp,sp,12
 555b324:	e13ffd15 	stw	r4,-12(fp)
 555b328:	e17ffe15 	stw	r5,-8(fp)
 555b32c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 555b330:	010155b4 	movhi	r4,1366
 555b334:	2133ee04 	addi	r4,r4,-12360
 555b338:	e17ffd17 	ldw	r5,-12(fp)
 555b33c:	01800044 	movi	r6,1
 555b340:	01c07fc4 	movi	r7,511
 555b344:	555b2500 	call	555b250 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 555b348:	010155b4 	movhi	r4,1366
 555b34c:	2133eb04 	addi	r4,r4,-12372
 555b350:	e17ffe17 	ldw	r5,-8(fp)
 555b354:	000d883a 	mov	r6,zero
 555b358:	01c07fc4 	movi	r7,511
 555b35c:	555b2500 	call	555b250 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 555b360:	010155b4 	movhi	r4,1366
 555b364:	2133f104 	addi	r4,r4,-12348
 555b368:	e17fff17 	ldw	r5,-4(fp)
 555b36c:	01800044 	movi	r6,1
 555b370:	01c07fc4 	movi	r7,511
 555b374:	555b2500 	call	555b250 <alt_open_fd>
}  
 555b378:	e037883a 	mov	sp,fp
 555b37c:	dfc00117 	ldw	ra,4(sp)
 555b380:	df000017 	ldw	fp,0(sp)
 555b384:	dec00204 	addi	sp,sp,8
 555b388:	f800283a 	ret

0555b38c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 555b38c:	defffc04 	addi	sp,sp,-16
 555b390:	df000315 	stw	fp,12(sp)
 555b394:	df000304 	addi	fp,sp,12
 555b398:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 555b39c:	e0bffe17 	ldw	r2,-8(fp)
 555b3a0:	10800217 	ldw	r2,8(r2)
 555b3a4:	10d00034 	orhi	r3,r2,16384
 555b3a8:	e0bffe17 	ldw	r2,-8(fp)
 555b3ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 555b3b0:	e03ffd15 	stw	zero,-12(fp)
 555b3b4:	00002006 	br	555b438 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 555b3b8:	e0bffd17 	ldw	r2,-12(fp)
 555b3bc:	00c155b4 	movhi	r3,1366
 555b3c0:	18f3eb04 	addi	r3,r3,-12372
 555b3c4:	10800324 	muli	r2,r2,12
 555b3c8:	10c5883a 	add	r2,r2,r3
 555b3cc:	10c00017 	ldw	r3,0(r2)
 555b3d0:	e0bffe17 	ldw	r2,-8(fp)
 555b3d4:	10800017 	ldw	r2,0(r2)
 555b3d8:	1880141e 	bne	r3,r2,555b42c <alt_file_locked+0xa0>
 555b3dc:	e0bffd17 	ldw	r2,-12(fp)
 555b3e0:	00c155b4 	movhi	r3,1366
 555b3e4:	18f3eb04 	addi	r3,r3,-12372
 555b3e8:	10800324 	muli	r2,r2,12
 555b3ec:	10c5883a 	add	r2,r2,r3
 555b3f0:	10800204 	addi	r2,r2,8
 555b3f4:	10800017 	ldw	r2,0(r2)
 555b3f8:	1004403a 	cmpge	r2,r2,zero
 555b3fc:	10000b1e 	bne	r2,zero,555b42c <alt_file_locked+0xa0>
 555b400:	e0bffd17 	ldw	r2,-12(fp)
 555b404:	10800324 	muli	r2,r2,12
 555b408:	1007883a 	mov	r3,r2
 555b40c:	008155b4 	movhi	r2,1366
 555b410:	10b3eb04 	addi	r2,r2,-12372
 555b414:	1887883a 	add	r3,r3,r2
 555b418:	e0bffe17 	ldw	r2,-8(fp)
 555b41c:	18800326 	beq	r3,r2,555b42c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 555b420:	00bffcc4 	movi	r2,-13
 555b424:	e0bfff15 	stw	r2,-4(fp)
 555b428:	00000a06 	br	555b454 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 555b42c:	e0bffd17 	ldw	r2,-12(fp)
 555b430:	10800044 	addi	r2,r2,1
 555b434:	e0bffd15 	stw	r2,-12(fp)
 555b438:	008155b4 	movhi	r2,1366
 555b43c:	10b86b04 	addi	r2,r2,-7764
 555b440:	10800017 	ldw	r2,0(r2)
 555b444:	1007883a 	mov	r3,r2
 555b448:	e0bffd17 	ldw	r2,-12(fp)
 555b44c:	18bfda2e 	bgeu	r3,r2,555b3b8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 555b450:	e03fff15 	stw	zero,-4(fp)
 555b454:	e0bfff17 	ldw	r2,-4(fp)
}
 555b458:	e037883a 	mov	sp,fp
 555b45c:	df000017 	ldw	fp,0(sp)
 555b460:	dec00104 	addi	sp,sp,4
 555b464:	f800283a 	ret

0555b468 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 555b468:	defff404 	addi	sp,sp,-48
 555b46c:	dfc00b15 	stw	ra,44(sp)
 555b470:	df000a15 	stw	fp,40(sp)
 555b474:	df000a04 	addi	fp,sp,40
 555b478:	e13ffb15 	stw	r4,-20(fp)
 555b47c:	e17ffc15 	stw	r5,-16(fp)
 555b480:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 555b484:	00bfffc4 	movi	r2,-1
 555b488:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 555b48c:	00bffb44 	movi	r2,-19
 555b490:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 555b494:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 555b498:	e13ffb17 	ldw	r4,-20(fp)
 555b49c:	014155b4 	movhi	r5,1366
 555b4a0:	29786904 	addi	r5,r5,-7772
 555b4a4:	555b8140 	call	555b814 <alt_find_dev>
 555b4a8:	e0bffa15 	stw	r2,-24(fp)
 555b4ac:	e0bffa17 	ldw	r2,-24(fp)
 555b4b0:	1004c03a 	cmpne	r2,r2,zero
 555b4b4:	1000051e 	bne	r2,zero,555b4cc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 555b4b8:	e13ffb17 	ldw	r4,-20(fp)
 555b4bc:	555b8a80 	call	555b8a8 <alt_find_file>
 555b4c0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 555b4c4:	00800044 	movi	r2,1
 555b4c8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 555b4cc:	e0bffa17 	ldw	r2,-24(fp)
 555b4d0:	1005003a 	cmpeq	r2,r2,zero
 555b4d4:	1000301e 	bne	r2,zero,555b598 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 555b4d8:	e13ffa17 	ldw	r4,-24(fp)
 555b4dc:	555b9c80 	call	555b9c8 <alt_get_fd>
 555b4e0:	e0bff815 	stw	r2,-32(fp)
 555b4e4:	e0bff817 	ldw	r2,-32(fp)
 555b4e8:	1004403a 	cmpge	r2,r2,zero
 555b4ec:	1000031e 	bne	r2,zero,555b4fc <open+0x94>
    {
      status = index;
 555b4f0:	e0bff817 	ldw	r2,-32(fp)
 555b4f4:	e0bff715 	stw	r2,-36(fp)
 555b4f8:	00002906 	br	555b5a0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 555b4fc:	e0bff817 	ldw	r2,-32(fp)
 555b500:	10800324 	muli	r2,r2,12
 555b504:	1007883a 	mov	r3,r2
 555b508:	008155b4 	movhi	r2,1366
 555b50c:	10b3eb04 	addi	r2,r2,-12372
 555b510:	1885883a 	add	r2,r3,r2
 555b514:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 555b518:	e0fffc17 	ldw	r3,-16(fp)
 555b51c:	00900034 	movhi	r2,16384
 555b520:	10bfffc4 	addi	r2,r2,-1
 555b524:	1886703a 	and	r3,r3,r2
 555b528:	e0bff917 	ldw	r2,-28(fp)
 555b52c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 555b530:	e0bff617 	ldw	r2,-40(fp)
 555b534:	1004c03a 	cmpne	r2,r2,zero
 555b538:	1000061e 	bne	r2,zero,555b554 <open+0xec>
 555b53c:	e13ff917 	ldw	r4,-28(fp)
 555b540:	555b38c0 	call	555b38c <alt_file_locked>
 555b544:	e0bff715 	stw	r2,-36(fp)
 555b548:	e0bff717 	ldw	r2,-36(fp)
 555b54c:	1004803a 	cmplt	r2,r2,zero
 555b550:	1000131e 	bne	r2,zero,555b5a0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 555b554:	e0bffa17 	ldw	r2,-24(fp)
 555b558:	10800317 	ldw	r2,12(r2)
 555b55c:	1005003a 	cmpeq	r2,r2,zero
 555b560:	1000091e 	bne	r2,zero,555b588 <open+0x120>
 555b564:	e0bffa17 	ldw	r2,-24(fp)
 555b568:	10800317 	ldw	r2,12(r2)
 555b56c:	e13ff917 	ldw	r4,-28(fp)
 555b570:	e17ffb17 	ldw	r5,-20(fp)
 555b574:	e1bffc17 	ldw	r6,-16(fp)
 555b578:	e1fffd17 	ldw	r7,-12(fp)
 555b57c:	103ee83a 	callr	r2
 555b580:	e0bfff15 	stw	r2,-4(fp)
 555b584:	00000106 	br	555b58c <open+0x124>
 555b588:	e03fff15 	stw	zero,-4(fp)
 555b58c:	e0bfff17 	ldw	r2,-4(fp)
 555b590:	e0bff715 	stw	r2,-36(fp)
 555b594:	00000206 	br	555b5a0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 555b598:	00bffb44 	movi	r2,-19
 555b59c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 555b5a0:	e0bff717 	ldw	r2,-36(fp)
 555b5a4:	1004403a 	cmpge	r2,r2,zero
 555b5a8:	1000091e 	bne	r2,zero,555b5d0 <open+0x168>
  {
    alt_release_fd (index);  
 555b5ac:	e13ff817 	ldw	r4,-32(fp)
 555b5b0:	55597980 	call	5559798 <alt_release_fd>
    ALT_ERRNO = -status;
 555b5b4:	555b5f00 	call	555b5f0 <alt_get_errno>
 555b5b8:	e0fff717 	ldw	r3,-36(fp)
 555b5bc:	00c7c83a 	sub	r3,zero,r3
 555b5c0:	10c00015 	stw	r3,0(r2)
    return -1;
 555b5c4:	00bfffc4 	movi	r2,-1
 555b5c8:	e0bffe15 	stw	r2,-8(fp)
 555b5cc:	00000206 	br	555b5d8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 555b5d0:	e0bff817 	ldw	r2,-32(fp)
 555b5d4:	e0bffe15 	stw	r2,-8(fp)
 555b5d8:	e0bffe17 	ldw	r2,-8(fp)
}
 555b5dc:	e037883a 	mov	sp,fp
 555b5e0:	dfc00117 	ldw	ra,4(sp)
 555b5e4:	df000017 	ldw	fp,0(sp)
 555b5e8:	dec00204 	addi	sp,sp,8
 555b5ec:	f800283a 	ret

0555b5f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 555b5f0:	defffd04 	addi	sp,sp,-12
 555b5f4:	dfc00215 	stw	ra,8(sp)
 555b5f8:	df000115 	stw	fp,4(sp)
 555b5fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 555b600:	008155b4 	movhi	r2,1366
 555b604:	10b86c04 	addi	r2,r2,-7760
 555b608:	10800017 	ldw	r2,0(r2)
 555b60c:	1005003a 	cmpeq	r2,r2,zero
 555b610:	1000061e 	bne	r2,zero,555b62c <alt_get_errno+0x3c>
 555b614:	008155b4 	movhi	r2,1366
 555b618:	10b86c04 	addi	r2,r2,-7760
 555b61c:	10800017 	ldw	r2,0(r2)
 555b620:	103ee83a 	callr	r2
 555b624:	e0bfff15 	stw	r2,-4(fp)
 555b628:	00000306 	br	555b638 <alt_get_errno+0x48>
 555b62c:	008155b4 	movhi	r2,1366
 555b630:	10810e04 	addi	r2,r2,1080
 555b634:	e0bfff15 	stw	r2,-4(fp)
 555b638:	e0bfff17 	ldw	r2,-4(fp)
}
 555b63c:	e037883a 	mov	sp,fp
 555b640:	dfc00117 	ldw	ra,4(sp)
 555b644:	df000017 	ldw	fp,0(sp)
 555b648:	dec00204 	addi	sp,sp,8
 555b64c:	f800283a 	ret

0555b650 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 555b650:	defffa04 	addi	sp,sp,-24
 555b654:	df000515 	stw	fp,20(sp)
 555b658:	df000504 	addi	fp,sp,20
 555b65c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 555b660:	0005303a 	rdctl	r2,status
 555b664:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 555b668:	e0fffd17 	ldw	r3,-12(fp)
 555b66c:	00bfff84 	movi	r2,-2
 555b670:	1884703a 	and	r2,r3,r2
 555b674:	1001703a 	wrctl	status,r2
  
  return context;
 555b678:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 555b67c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 555b680:	e0bfff17 	ldw	r2,-4(fp)
 555b684:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 555b688:	e0bffc17 	ldw	r2,-16(fp)
 555b68c:	10c00017 	ldw	r3,0(r2)
 555b690:	e0bffc17 	ldw	r2,-16(fp)
 555b694:	10800117 	ldw	r2,4(r2)
 555b698:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 555b69c:	e0bffc17 	ldw	r2,-16(fp)
 555b6a0:	10c00117 	ldw	r3,4(r2)
 555b6a4:	e0bffc17 	ldw	r2,-16(fp)
 555b6a8:	10800017 	ldw	r2,0(r2)
 555b6ac:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 555b6b0:	e0fffc17 	ldw	r3,-16(fp)
 555b6b4:	e0bffc17 	ldw	r2,-16(fp)
 555b6b8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 555b6bc:	e0fffc17 	ldw	r3,-16(fp)
 555b6c0:	e0bffc17 	ldw	r2,-16(fp)
 555b6c4:	18800015 	stw	r2,0(r3)
 555b6c8:	e0bffe17 	ldw	r2,-8(fp)
 555b6cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 555b6d0:	e0bffb17 	ldw	r2,-20(fp)
 555b6d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 555b6d8:	e037883a 	mov	sp,fp
 555b6dc:	df000017 	ldw	fp,0(sp)
 555b6e0:	dec00104 	addi	sp,sp,4
 555b6e4:	f800283a 	ret

0555b6e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 555b6e8:	defffb04 	addi	sp,sp,-20
 555b6ec:	dfc00415 	stw	ra,16(sp)
 555b6f0:	df000315 	stw	fp,12(sp)
 555b6f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 555b6f8:	d0a00c17 	ldw	r2,-32720(gp)
 555b6fc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 555b700:	d0a8b117 	ldw	r2,-23868(gp)
 555b704:	10800044 	addi	r2,r2,1
 555b708:	d0a8b115 	stw	r2,-23868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 555b70c:	00003106 	br	555b7d4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 555b710:	e0bffe17 	ldw	r2,-8(fp)
 555b714:	10800017 	ldw	r2,0(r2)
 555b718:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 555b71c:	e0bffe17 	ldw	r2,-8(fp)
 555b720:	10800403 	ldbu	r2,16(r2)
 555b724:	10803fcc 	andi	r2,r2,255
 555b728:	1005003a 	cmpeq	r2,r2,zero
 555b72c:	1000051e 	bne	r2,zero,555b744 <alt_tick+0x5c>
 555b730:	d0a8b117 	ldw	r2,-23868(gp)
 555b734:	1004c03a 	cmpne	r2,r2,zero
 555b738:	1000021e 	bne	r2,zero,555b744 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 555b73c:	e0bffe17 	ldw	r2,-8(fp)
 555b740:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 555b744:	e0bffe17 	ldw	r2,-8(fp)
 555b748:	10c00217 	ldw	r3,8(r2)
 555b74c:	d0a8b117 	ldw	r2,-23868(gp)
 555b750:	10c01e36 	bltu	r2,r3,555b7cc <alt_tick+0xe4>
 555b754:	e0bffe17 	ldw	r2,-8(fp)
 555b758:	10800403 	ldbu	r2,16(r2)
 555b75c:	10803fcc 	andi	r2,r2,255
 555b760:	1004c03a 	cmpne	r2,r2,zero
 555b764:	1000191e 	bne	r2,zero,555b7cc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 555b768:	e0bffe17 	ldw	r2,-8(fp)
 555b76c:	10c00317 	ldw	r3,12(r2)
 555b770:	e0bffe17 	ldw	r2,-8(fp)
 555b774:	11000517 	ldw	r4,20(r2)
 555b778:	183ee83a 	callr	r3
 555b77c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 555b780:	e0bffd17 	ldw	r2,-12(fp)
 555b784:	1004c03a 	cmpne	r2,r2,zero
 555b788:	1000031e 	bne	r2,zero,555b798 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 555b78c:	e13ffe17 	ldw	r4,-8(fp)
 555b790:	555b6500 	call	555b650 <alt_alarm_stop>
 555b794:	00000d06 	br	555b7cc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 555b798:	e0bffe17 	ldw	r2,-8(fp)
 555b79c:	10c00217 	ldw	r3,8(r2)
 555b7a0:	e0bffd17 	ldw	r2,-12(fp)
 555b7a4:	1887883a 	add	r3,r3,r2
 555b7a8:	e0bffe17 	ldw	r2,-8(fp)
 555b7ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 555b7b0:	e0bffe17 	ldw	r2,-8(fp)
 555b7b4:	10c00217 	ldw	r3,8(r2)
 555b7b8:	d0a8b117 	ldw	r2,-23868(gp)
 555b7bc:	1880032e 	bgeu	r3,r2,555b7cc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 555b7c0:	e0fffe17 	ldw	r3,-8(fp)
 555b7c4:	00800044 	movi	r2,1
 555b7c8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 555b7cc:	e0bfff17 	ldw	r2,-4(fp)
 555b7d0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 555b7d4:	d0e00c04 	addi	r3,gp,-32720
 555b7d8:	e0bffe17 	ldw	r2,-8(fp)
 555b7dc:	10ffcc1e 	bne	r2,r3,555b710 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 555b7e0:	e037883a 	mov	sp,fp
 555b7e4:	dfc00117 	ldw	ra,4(sp)
 555b7e8:	df000017 	ldw	fp,0(sp)
 555b7ec:	dec00204 	addi	sp,sp,8
 555b7f0:	f800283a 	ret

0555b7f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 555b7f4:	deffff04 	addi	sp,sp,-4
 555b7f8:	df000015 	stw	fp,0(sp)
 555b7fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 555b800:	000170fa 	wrctl	ienable,zero
}
 555b804:	e037883a 	mov	sp,fp
 555b808:	df000017 	ldw	fp,0(sp)
 555b80c:	dec00104 	addi	sp,sp,4
 555b810:	f800283a 	ret

0555b814 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 555b814:	defff904 	addi	sp,sp,-28
 555b818:	dfc00615 	stw	ra,24(sp)
 555b81c:	df000515 	stw	fp,20(sp)
 555b820:	df000504 	addi	fp,sp,20
 555b824:	e13ffd15 	stw	r4,-12(fp)
 555b828:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 555b82c:	e0bffe17 	ldw	r2,-8(fp)
 555b830:	10800017 	ldw	r2,0(r2)
 555b834:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 555b838:	e13ffd17 	ldw	r4,-12(fp)
 555b83c:	55566f80 	call	55566f8 <strlen>
 555b840:	10800044 	addi	r2,r2,1
 555b844:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 555b848:	00000d06 	br	555b880 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 555b84c:	e0bffc17 	ldw	r2,-16(fp)
 555b850:	11000217 	ldw	r4,8(r2)
 555b854:	e1bffb17 	ldw	r6,-20(fp)
 555b858:	e17ffd17 	ldw	r5,-12(fp)
 555b85c:	555bb5c0 	call	555bb5c <memcmp>
 555b860:	1004c03a 	cmpne	r2,r2,zero
 555b864:	1000031e 	bne	r2,zero,555b874 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 555b868:	e0bffc17 	ldw	r2,-16(fp)
 555b86c:	e0bfff15 	stw	r2,-4(fp)
 555b870:	00000706 	br	555b890 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 555b874:	e0bffc17 	ldw	r2,-16(fp)
 555b878:	10800017 	ldw	r2,0(r2)
 555b87c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 555b880:	e0fffe17 	ldw	r3,-8(fp)
 555b884:	e0bffc17 	ldw	r2,-16(fp)
 555b888:	10fff01e 	bne	r2,r3,555b84c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 555b88c:	e03fff15 	stw	zero,-4(fp)
 555b890:	e0bfff17 	ldw	r2,-4(fp)
}
 555b894:	e037883a 	mov	sp,fp
 555b898:	dfc00117 	ldw	ra,4(sp)
 555b89c:	df000017 	ldw	fp,0(sp)
 555b8a0:	dec00204 	addi	sp,sp,8
 555b8a4:	f800283a 	ret

0555b8a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 555b8a8:	defffa04 	addi	sp,sp,-24
 555b8ac:	dfc00515 	stw	ra,20(sp)
 555b8b0:	df000415 	stw	fp,16(sp)
 555b8b4:	df000404 	addi	fp,sp,16
 555b8b8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 555b8bc:	008155b4 	movhi	r2,1366
 555b8c0:	10b86704 	addi	r2,r2,-7780
 555b8c4:	10800017 	ldw	r2,0(r2)
 555b8c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 555b8cc:	00003306 	br	555b99c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 555b8d0:	e0bffd17 	ldw	r2,-12(fp)
 555b8d4:	11000217 	ldw	r4,8(r2)
 555b8d8:	55566f80 	call	55566f8 <strlen>
 555b8dc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 555b8e0:	e0bffd17 	ldw	r2,-12(fp)
 555b8e4:	10c00217 	ldw	r3,8(r2)
 555b8e8:	e0bffc17 	ldw	r2,-16(fp)
 555b8ec:	1885883a 	add	r2,r3,r2
 555b8f0:	10bfffc4 	addi	r2,r2,-1
 555b8f4:	10800003 	ldbu	r2,0(r2)
 555b8f8:	10803fcc 	andi	r2,r2,255
 555b8fc:	1080201c 	xori	r2,r2,128
 555b900:	10bfe004 	addi	r2,r2,-128
 555b904:	10800bd8 	cmpnei	r2,r2,47
 555b908:	1000031e 	bne	r2,zero,555b918 <alt_find_file+0x70>
    {
      len -= 1;
 555b90c:	e0bffc17 	ldw	r2,-16(fp)
 555b910:	10bfffc4 	addi	r2,r2,-1
 555b914:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 555b918:	e0bffc17 	ldw	r2,-16(fp)
 555b91c:	1007883a 	mov	r3,r2
 555b920:	e0bffe17 	ldw	r2,-8(fp)
 555b924:	1885883a 	add	r2,r3,r2
 555b928:	10800003 	ldbu	r2,0(r2)
 555b92c:	10803fcc 	andi	r2,r2,255
 555b930:	1080201c 	xori	r2,r2,128
 555b934:	10bfe004 	addi	r2,r2,-128
 555b938:	10800be0 	cmpeqi	r2,r2,47
 555b93c:	10000a1e 	bne	r2,zero,555b968 <alt_find_file+0xc0>
 555b940:	e0bffc17 	ldw	r2,-16(fp)
 555b944:	1007883a 	mov	r3,r2
 555b948:	e0bffe17 	ldw	r2,-8(fp)
 555b94c:	1885883a 	add	r2,r3,r2
 555b950:	10800003 	ldbu	r2,0(r2)
 555b954:	10803fcc 	andi	r2,r2,255
 555b958:	1080201c 	xori	r2,r2,128
 555b95c:	10bfe004 	addi	r2,r2,-128
 555b960:	1004c03a 	cmpne	r2,r2,zero
 555b964:	10000a1e 	bne	r2,zero,555b990 <alt_find_file+0xe8>
 555b968:	e0bffd17 	ldw	r2,-12(fp)
 555b96c:	11000217 	ldw	r4,8(r2)
 555b970:	e1bffc17 	ldw	r6,-16(fp)
 555b974:	e17ffe17 	ldw	r5,-8(fp)
 555b978:	555bb5c0 	call	555bb5c <memcmp>
 555b97c:	1004c03a 	cmpne	r2,r2,zero
 555b980:	1000031e 	bne	r2,zero,555b990 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 555b984:	e0bffd17 	ldw	r2,-12(fp)
 555b988:	e0bfff15 	stw	r2,-4(fp)
 555b98c:	00000806 	br	555b9b0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 555b990:	e0bffd17 	ldw	r2,-12(fp)
 555b994:	10800017 	ldw	r2,0(r2)
 555b998:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 555b99c:	00c155b4 	movhi	r3,1366
 555b9a0:	18f86704 	addi	r3,r3,-7780
 555b9a4:	e0bffd17 	ldw	r2,-12(fp)
 555b9a8:	10ffc91e 	bne	r2,r3,555b8d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 555b9ac:	e03fff15 	stw	zero,-4(fp)
 555b9b0:	e0bfff17 	ldw	r2,-4(fp)
}
 555b9b4:	e037883a 	mov	sp,fp
 555b9b8:	dfc00117 	ldw	ra,4(sp)
 555b9bc:	df000017 	ldw	fp,0(sp)
 555b9c0:	dec00204 	addi	sp,sp,8
 555b9c4:	f800283a 	ret

0555b9c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 555b9c8:	defffc04 	addi	sp,sp,-16
 555b9cc:	df000315 	stw	fp,12(sp)
 555b9d0:	df000304 	addi	fp,sp,12
 555b9d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 555b9d8:	00bffa04 	movi	r2,-24
 555b9dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 555b9e0:	e03ffe15 	stw	zero,-8(fp)
 555b9e4:	00001e06 	br	555ba60 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 555b9e8:	e0bffe17 	ldw	r2,-8(fp)
 555b9ec:	00c155b4 	movhi	r3,1366
 555b9f0:	18f3eb04 	addi	r3,r3,-12372
 555b9f4:	10800324 	muli	r2,r2,12
 555b9f8:	10c5883a 	add	r2,r2,r3
 555b9fc:	10800017 	ldw	r2,0(r2)
 555ba00:	1004c03a 	cmpne	r2,r2,zero
 555ba04:	1000131e 	bne	r2,zero,555ba54 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 555ba08:	e0bffe17 	ldw	r2,-8(fp)
 555ba0c:	00c155b4 	movhi	r3,1366
 555ba10:	18f3eb04 	addi	r3,r3,-12372
 555ba14:	10800324 	muli	r2,r2,12
 555ba18:	10c7883a 	add	r3,r2,r3
 555ba1c:	e0bfff17 	ldw	r2,-4(fp)
 555ba20:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 555ba24:	008155b4 	movhi	r2,1366
 555ba28:	10b86b04 	addi	r2,r2,-7764
 555ba2c:	10c00017 	ldw	r3,0(r2)
 555ba30:	e0bffe17 	ldw	r2,-8(fp)
 555ba34:	1880040e 	bge	r3,r2,555ba48 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 555ba38:	00c155b4 	movhi	r3,1366
 555ba3c:	18f86b04 	addi	r3,r3,-7764
 555ba40:	e0bffe17 	ldw	r2,-8(fp)
 555ba44:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 555ba48:	e0bffe17 	ldw	r2,-8(fp)
 555ba4c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 555ba50:	00000606 	br	555ba6c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 555ba54:	e0bffe17 	ldw	r2,-8(fp)
 555ba58:	10800044 	addi	r2,r2,1
 555ba5c:	e0bffe15 	stw	r2,-8(fp)
 555ba60:	e0bffe17 	ldw	r2,-8(fp)
 555ba64:	10800810 	cmplti	r2,r2,32
 555ba68:	103fdf1e 	bne	r2,zero,555b9e8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 555ba6c:	e0bffd17 	ldw	r2,-12(fp)
}
 555ba70:	e037883a 	mov	sp,fp
 555ba74:	df000017 	ldw	fp,0(sp)
 555ba78:	dec00104 	addi	sp,sp,4
 555ba7c:	f800283a 	ret

0555ba80 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 555ba80:	defffb04 	addi	sp,sp,-20
 555ba84:	df000415 	stw	fp,16(sp)
 555ba88:	df000404 	addi	fp,sp,16
 555ba8c:	e13ffe15 	stw	r4,-8(fp)
 555ba90:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 555ba94:	e0bfff17 	ldw	r2,-4(fp)
 555ba98:	10840070 	cmpltui	r2,r2,4097
 555ba9c:	1000021e 	bne	r2,zero,555baa8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 555baa0:	00840004 	movi	r2,4096
 555baa4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 555baa8:	e0fffe17 	ldw	r3,-8(fp)
 555baac:	e0bfff17 	ldw	r2,-4(fp)
 555bab0:	1885883a 	add	r2,r3,r2
 555bab4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 555bab8:	e0bffe17 	ldw	r2,-8(fp)
 555babc:	e0bffd15 	stw	r2,-12(fp)
 555bac0:	00000506 	br	555bad8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 555bac4:	e0bffd17 	ldw	r2,-12(fp)
 555bac8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 555bacc:	e0bffd17 	ldw	r2,-12(fp)
 555bad0:	10800804 	addi	r2,r2,32
 555bad4:	e0bffd15 	stw	r2,-12(fp)
 555bad8:	e0fffd17 	ldw	r3,-12(fp)
 555badc:	e0bffc17 	ldw	r2,-16(fp)
 555bae0:	18bff836 	bltu	r3,r2,555bac4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 555bae4:	e0bffe17 	ldw	r2,-8(fp)
 555bae8:	108007cc 	andi	r2,r2,31
 555baec:	1005003a 	cmpeq	r2,r2,zero
 555baf0:	1000021e 	bne	r2,zero,555bafc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 555baf4:	e0bffd17 	ldw	r2,-12(fp)
 555baf8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 555bafc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 555bb00:	e037883a 	mov	sp,fp
 555bb04:	df000017 	ldw	fp,0(sp)
 555bb08:	dec00104 	addi	sp,sp,4
 555bb0c:	f800283a 	ret

0555bb10 <atexit>:
 555bb10:	200b883a 	mov	r5,r4
 555bb14:	000d883a 	mov	r6,zero
 555bb18:	0009883a 	mov	r4,zero
 555bb1c:	000f883a 	mov	r7,zero
 555bb20:	555bbd01 	jmpi	555bbd0 <__register_exitproc>

0555bb24 <exit>:
 555bb24:	defffe04 	addi	sp,sp,-8
 555bb28:	000b883a 	mov	r5,zero
 555bb2c:	dc000015 	stw	r16,0(sp)
 555bb30:	dfc00115 	stw	ra,4(sp)
 555bb34:	2021883a 	mov	r16,r4
 555bb38:	555bd080 	call	555bd08 <__call_exitprocs>
 555bb3c:	008155b4 	movhi	r2,1366
 555bb40:	10b86404 	addi	r2,r2,-7792
 555bb44:	11000017 	ldw	r4,0(r2)
 555bb48:	20800f17 	ldw	r2,60(r4)
 555bb4c:	10000126 	beq	r2,zero,555bb54 <exit+0x30>
 555bb50:	103ee83a 	callr	r2
 555bb54:	8009883a 	mov	r4,r16
 555bb58:	555bef80 	call	555bef8 <_exit>

0555bb5c <memcmp>:
 555bb5c:	00c000c4 	movi	r3,3
 555bb60:	1980032e 	bgeu	r3,r6,555bb70 <memcmp+0x14>
 555bb64:	2144b03a 	or	r2,r4,r5
 555bb68:	10c4703a 	and	r2,r2,r3
 555bb6c:	10000f26 	beq	r2,zero,555bbac <memcmp+0x50>
 555bb70:	31ffffc4 	addi	r7,r6,-1
 555bb74:	3000061e 	bne	r6,zero,555bb90 <memcmp+0x34>
 555bb78:	00000a06 	br	555bba4 <memcmp+0x48>
 555bb7c:	39ffffc4 	addi	r7,r7,-1
 555bb80:	00bfffc4 	movi	r2,-1
 555bb84:	21000044 	addi	r4,r4,1
 555bb88:	29400044 	addi	r5,r5,1
 555bb8c:	38800526 	beq	r7,r2,555bba4 <memcmp+0x48>
 555bb90:	20c00003 	ldbu	r3,0(r4)
 555bb94:	28800003 	ldbu	r2,0(r5)
 555bb98:	18bff826 	beq	r3,r2,555bb7c <memcmp+0x20>
 555bb9c:	1885c83a 	sub	r2,r3,r2
 555bba0:	f800283a 	ret
 555bba4:	0005883a 	mov	r2,zero
 555bba8:	f800283a 	ret
 555bbac:	180f883a 	mov	r7,r3
 555bbb0:	20c00017 	ldw	r3,0(r4)
 555bbb4:	28800017 	ldw	r2,0(r5)
 555bbb8:	18bfed1e 	bne	r3,r2,555bb70 <memcmp+0x14>
 555bbbc:	31bfff04 	addi	r6,r6,-4
 555bbc0:	21000104 	addi	r4,r4,4
 555bbc4:	29400104 	addi	r5,r5,4
 555bbc8:	39bff936 	bltu	r7,r6,555bbb0 <memcmp+0x54>
 555bbcc:	003fe806 	br	555bb70 <memcmp+0x14>

0555bbd0 <__register_exitproc>:
 555bbd0:	defffa04 	addi	sp,sp,-24
 555bbd4:	008155b4 	movhi	r2,1366
 555bbd8:	10b86404 	addi	r2,r2,-7792
 555bbdc:	dc000015 	stw	r16,0(sp)
 555bbe0:	14000017 	ldw	r16,0(r2)
 555bbe4:	dd000415 	stw	r20,16(sp)
 555bbe8:	2829883a 	mov	r20,r5
 555bbec:	81405217 	ldw	r5,328(r16)
 555bbf0:	dcc00315 	stw	r19,12(sp)
 555bbf4:	dc800215 	stw	r18,8(sp)
 555bbf8:	dc400115 	stw	r17,4(sp)
 555bbfc:	dfc00515 	stw	ra,20(sp)
 555bc00:	2023883a 	mov	r17,r4
 555bc04:	3027883a 	mov	r19,r6
 555bc08:	3825883a 	mov	r18,r7
 555bc0c:	28002526 	beq	r5,zero,555bca4 <__register_exitproc+0xd4>
 555bc10:	29000117 	ldw	r4,4(r5)
 555bc14:	008007c4 	movi	r2,31
 555bc18:	11002716 	blt	r2,r4,555bcb8 <__register_exitproc+0xe8>
 555bc1c:	8800101e 	bne	r17,zero,555bc60 <__register_exitproc+0x90>
 555bc20:	2105883a 	add	r2,r4,r4
 555bc24:	1085883a 	add	r2,r2,r2
 555bc28:	20c00044 	addi	r3,r4,1
 555bc2c:	1145883a 	add	r2,r2,r5
 555bc30:	0009883a 	mov	r4,zero
 555bc34:	15000215 	stw	r20,8(r2)
 555bc38:	28c00115 	stw	r3,4(r5)
 555bc3c:	2005883a 	mov	r2,r4
 555bc40:	dfc00517 	ldw	ra,20(sp)
 555bc44:	dd000417 	ldw	r20,16(sp)
 555bc48:	dcc00317 	ldw	r19,12(sp)
 555bc4c:	dc800217 	ldw	r18,8(sp)
 555bc50:	dc400117 	ldw	r17,4(sp)
 555bc54:	dc000017 	ldw	r16,0(sp)
 555bc58:	dec00604 	addi	sp,sp,24
 555bc5c:	f800283a 	ret
 555bc60:	29802204 	addi	r6,r5,136
 555bc64:	00800044 	movi	r2,1
 555bc68:	110e983a 	sll	r7,r2,r4
 555bc6c:	30c04017 	ldw	r3,256(r6)
 555bc70:	2105883a 	add	r2,r4,r4
 555bc74:	1085883a 	add	r2,r2,r2
 555bc78:	1185883a 	add	r2,r2,r6
 555bc7c:	19c6b03a 	or	r3,r3,r7
 555bc80:	14802015 	stw	r18,128(r2)
 555bc84:	14c00015 	stw	r19,0(r2)
 555bc88:	00800084 	movi	r2,2
 555bc8c:	30c04015 	stw	r3,256(r6)
 555bc90:	88bfe31e 	bne	r17,r2,555bc20 <__register_exitproc+0x50>
 555bc94:	30804117 	ldw	r2,260(r6)
 555bc98:	11c4b03a 	or	r2,r2,r7
 555bc9c:	30804115 	stw	r2,260(r6)
 555bca0:	003fdf06 	br	555bc20 <__register_exitproc+0x50>
 555bca4:	008155b4 	movhi	r2,1366
 555bca8:	10815f04 	addi	r2,r2,1404
 555bcac:	100b883a 	mov	r5,r2
 555bcb0:	80805215 	stw	r2,328(r16)
 555bcb4:	003fd606 	br	555bc10 <__register_exitproc+0x40>
 555bcb8:	00800034 	movhi	r2,0
 555bcbc:	10800004 	addi	r2,r2,0
 555bcc0:	1000021e 	bne	r2,zero,555bccc <__register_exitproc+0xfc>
 555bcc4:	013fffc4 	movi	r4,-1
 555bcc8:	003fdc06 	br	555bc3c <__register_exitproc+0x6c>
 555bccc:	01006404 	movi	r4,400
 555bcd0:	103ee83a 	callr	r2
 555bcd4:	1007883a 	mov	r3,r2
 555bcd8:	103ffa26 	beq	r2,zero,555bcc4 <__register_exitproc+0xf4>
 555bcdc:	80805217 	ldw	r2,328(r16)
 555bce0:	180b883a 	mov	r5,r3
 555bce4:	18000115 	stw	zero,4(r3)
 555bce8:	18800015 	stw	r2,0(r3)
 555bcec:	80c05215 	stw	r3,328(r16)
 555bcf0:	18006215 	stw	zero,392(r3)
 555bcf4:	18006315 	stw	zero,396(r3)
 555bcf8:	0009883a 	mov	r4,zero
 555bcfc:	883fc826 	beq	r17,zero,555bc20 <__register_exitproc+0x50>
 555bd00:	003fd706 	br	555bc60 <__register_exitproc+0x90>

0555bd04 <register_fini>:
 555bd04:	f800283a 	ret

0555bd08 <__call_exitprocs>:
 555bd08:	008155b4 	movhi	r2,1366
 555bd0c:	10b86404 	addi	r2,r2,-7792
 555bd10:	10800017 	ldw	r2,0(r2)
 555bd14:	defff304 	addi	sp,sp,-52
 555bd18:	df000b15 	stw	fp,44(sp)
 555bd1c:	d8800115 	stw	r2,4(sp)
 555bd20:	00800034 	movhi	r2,0
 555bd24:	10800004 	addi	r2,r2,0
 555bd28:	1005003a 	cmpeq	r2,r2,zero
 555bd2c:	d8800215 	stw	r2,8(sp)
 555bd30:	d8800117 	ldw	r2,4(sp)
 555bd34:	dd400815 	stw	r21,32(sp)
 555bd38:	dd000715 	stw	r20,28(sp)
 555bd3c:	10805204 	addi	r2,r2,328
 555bd40:	dfc00c15 	stw	ra,48(sp)
 555bd44:	ddc00a15 	stw	r23,40(sp)
 555bd48:	dd800915 	stw	r22,36(sp)
 555bd4c:	dcc00615 	stw	r19,24(sp)
 555bd50:	dc800515 	stw	r18,20(sp)
 555bd54:	dc400415 	stw	r17,16(sp)
 555bd58:	dc000315 	stw	r16,12(sp)
 555bd5c:	282b883a 	mov	r21,r5
 555bd60:	2039883a 	mov	fp,r4
 555bd64:	d8800015 	stw	r2,0(sp)
 555bd68:	2829003a 	cmpeq	r20,r5,zero
 555bd6c:	d8800117 	ldw	r2,4(sp)
 555bd70:	14405217 	ldw	r17,328(r2)
 555bd74:	88001026 	beq	r17,zero,555bdb8 <__call_exitprocs+0xb0>
 555bd78:	ddc00017 	ldw	r23,0(sp)
 555bd7c:	88800117 	ldw	r2,4(r17)
 555bd80:	8c802204 	addi	r18,r17,136
 555bd84:	143fffc4 	addi	r16,r2,-1
 555bd88:	80000916 	blt	r16,zero,555bdb0 <__call_exitprocs+0xa8>
 555bd8c:	05bfffc4 	movi	r22,-1
 555bd90:	a000151e 	bne	r20,zero,555bde8 <__call_exitprocs+0xe0>
 555bd94:	8409883a 	add	r4,r16,r16
 555bd98:	2105883a 	add	r2,r4,r4
 555bd9c:	1485883a 	add	r2,r2,r18
 555bda0:	10c02017 	ldw	r3,128(r2)
 555bda4:	a8c01126 	beq	r21,r3,555bdec <__call_exitprocs+0xe4>
 555bda8:	843fffc4 	addi	r16,r16,-1
 555bdac:	85bff81e 	bne	r16,r22,555bd90 <__call_exitprocs+0x88>
 555bdb0:	d8800217 	ldw	r2,8(sp)
 555bdb4:	10003126 	beq	r2,zero,555be7c <__call_exitprocs+0x174>
 555bdb8:	dfc00c17 	ldw	ra,48(sp)
 555bdbc:	df000b17 	ldw	fp,44(sp)
 555bdc0:	ddc00a17 	ldw	r23,40(sp)
 555bdc4:	dd800917 	ldw	r22,36(sp)
 555bdc8:	dd400817 	ldw	r21,32(sp)
 555bdcc:	dd000717 	ldw	r20,28(sp)
 555bdd0:	dcc00617 	ldw	r19,24(sp)
 555bdd4:	dc800517 	ldw	r18,20(sp)
 555bdd8:	dc400417 	ldw	r17,16(sp)
 555bddc:	dc000317 	ldw	r16,12(sp)
 555bde0:	dec00d04 	addi	sp,sp,52
 555bde4:	f800283a 	ret
 555bde8:	8409883a 	add	r4,r16,r16
 555bdec:	88c00117 	ldw	r3,4(r17)
 555bdf0:	2105883a 	add	r2,r4,r4
 555bdf4:	1445883a 	add	r2,r2,r17
 555bdf8:	18ffffc4 	addi	r3,r3,-1
 555bdfc:	11800217 	ldw	r6,8(r2)
 555be00:	1c001526 	beq	r3,r16,555be58 <__call_exitprocs+0x150>
 555be04:	10000215 	stw	zero,8(r2)
 555be08:	303fe726 	beq	r6,zero,555bda8 <__call_exitprocs+0xa0>
 555be0c:	00c00044 	movi	r3,1
 555be10:	1c06983a 	sll	r3,r3,r16
 555be14:	90804017 	ldw	r2,256(r18)
 555be18:	8cc00117 	ldw	r19,4(r17)
 555be1c:	1884703a 	and	r2,r3,r2
 555be20:	10001426 	beq	r2,zero,555be74 <__call_exitprocs+0x16c>
 555be24:	90804117 	ldw	r2,260(r18)
 555be28:	1884703a 	and	r2,r3,r2
 555be2c:	10000c1e 	bne	r2,zero,555be60 <__call_exitprocs+0x158>
 555be30:	2105883a 	add	r2,r4,r4
 555be34:	1485883a 	add	r2,r2,r18
 555be38:	11400017 	ldw	r5,0(r2)
 555be3c:	e009883a 	mov	r4,fp
 555be40:	303ee83a 	callr	r6
 555be44:	88800117 	ldw	r2,4(r17)
 555be48:	98bfc81e 	bne	r19,r2,555bd6c <__call_exitprocs+0x64>
 555be4c:	b8800017 	ldw	r2,0(r23)
 555be50:	147fd526 	beq	r2,r17,555bda8 <__call_exitprocs+0xa0>
 555be54:	003fc506 	br	555bd6c <__call_exitprocs+0x64>
 555be58:	8c000115 	stw	r16,4(r17)
 555be5c:	003fea06 	br	555be08 <__call_exitprocs+0x100>
 555be60:	2105883a 	add	r2,r4,r4
 555be64:	1485883a 	add	r2,r2,r18
 555be68:	11000017 	ldw	r4,0(r2)
 555be6c:	303ee83a 	callr	r6
 555be70:	003ff406 	br	555be44 <__call_exitprocs+0x13c>
 555be74:	303ee83a 	callr	r6
 555be78:	003ff206 	br	555be44 <__call_exitprocs+0x13c>
 555be7c:	88800117 	ldw	r2,4(r17)
 555be80:	1000081e 	bne	r2,zero,555bea4 <__call_exitprocs+0x19c>
 555be84:	89000017 	ldw	r4,0(r17)
 555be88:	20000726 	beq	r4,zero,555bea8 <__call_exitprocs+0x1a0>
 555be8c:	b9000015 	stw	r4,0(r23)
 555be90:	8809883a 	mov	r4,r17
 555be94:	00000000 	call	0 <__alt_mem_sdram_controller>
 555be98:	bc400017 	ldw	r17,0(r23)
 555be9c:	883fb71e 	bne	r17,zero,555bd7c <__call_exitprocs+0x74>
 555bea0:	003fc506 	br	555bdb8 <__call_exitprocs+0xb0>
 555bea4:	89000017 	ldw	r4,0(r17)
 555bea8:	882f883a 	mov	r23,r17
 555beac:	2023883a 	mov	r17,r4
 555beb0:	883fb21e 	bne	r17,zero,555bd7c <__call_exitprocs+0x74>
 555beb4:	003fc006 	br	555bdb8 <__call_exitprocs+0xb0>

0555beb8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 555beb8:	defffd04 	addi	sp,sp,-12
 555bebc:	df000215 	stw	fp,8(sp)
 555bec0:	df000204 	addi	fp,sp,8
 555bec4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 555bec8:	e0bfff17 	ldw	r2,-4(fp)
 555becc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 555bed0:	e0bffe17 	ldw	r2,-8(fp)
 555bed4:	1005003a 	cmpeq	r2,r2,zero
 555bed8:	1000021e 	bne	r2,zero,555bee4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 555bedc:	002af070 	cmpltui	zero,zero,43969
 555bee0:	00000106 	br	555bee8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 555bee4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 555bee8:	e037883a 	mov	sp,fp
 555beec:	df000017 	ldw	fp,0(sp)
 555bef0:	dec00104 	addi	sp,sp,4
 555bef4:	f800283a 	ret

0555bef8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 555bef8:	defffd04 	addi	sp,sp,-12
 555befc:	dfc00215 	stw	ra,8(sp)
 555bf00:	df000115 	stw	fp,4(sp)
 555bf04:	df000104 	addi	fp,sp,4
 555bf08:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 555bf0c:	e13fff17 	ldw	r4,-4(fp)
 555bf10:	555beb80 	call	555beb8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 555bf14:	003fff06 	br	555bf14 <_exit+0x1c>
 555bf18:	0555bd04 	movi	r21,22260
